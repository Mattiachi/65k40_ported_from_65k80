

Microchip Technology PIC18 PRO Macro Assembler V1.41 build -162212810 
                                                                                               Sat May 06 08:16:57 2023

Microchip Technology Omniscient Code Generator v1.41 (PRO mode) build 201701250102
     1                           	processor	18LF65K40
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    18                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    19                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1,group=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	text72,global,reloc=2,class=CODE,delta=1
    96                           	psect	text73,global,reloc=2,class=CODE,delta=1
    97                           	psect	text74,global,reloc=2,class=CODE,delta=1
    98                           	psect	text75,global,reloc=2,class=CODE,delta=1
    99                           	psect	text76,global,reloc=2,class=CODE,delta=1
   100                           	psect	text77,global,reloc=2,class=CODE,delta=1
   101                           	psect	text78,global,reloc=2,class=CODE,delta=1
   102                           	psect	text79,global,reloc=2,class=CODE,delta=1
   103                           	psect	text80,global,reloc=2,class=CODE,delta=1
   104                           	psect	text81,global,reloc=2,class=CODE,delta=1
   105                           	psect	text82,global,reloc=2,class=CODE,delta=1
   106                           	psect	text83,global,reloc=2,class=CODE,delta=1
   107                           	psect	text84,global,reloc=2,class=CODE,delta=1
   108                           	psect	text85,global,reloc=2,class=CODE,delta=1
   109                           	psect	text86,global,reloc=2,class=CODE,delta=1
   110                           	psect	text87,global,reloc=2,class=CODE,delta=1
   111                           	psect	text88,global,reloc=2,class=CODE,delta=1
   112                           	psect	text89,global,reloc=2,class=CODE,delta=1
   113                           	psect	text90,global,reloc=2,class=CODE,delta=1
   114                           	psect	text91,global,reloc=2,class=CODE,delta=1
   115                           	psect	text92,global,reloc=2,class=CODE,delta=1
   116                           	psect	text93,global,reloc=2,class=CODE,delta=1
   117                           	psect	text94,global,reloc=2,class=CODE,delta=1
   118                           	psect	text95,global,reloc=2,class=CODE,delta=1
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	text119,global,reloc=2,class=CODE,delta=1
   143                           	psect	text120,global,reloc=2,class=CODE,delta=1
   144                           	psect	text121,global,reloc=2,class=CODE,delta=1
   145                           	psect	text122,global,reloc=2,class=CODE,delta=1
   146                           	psect	text123,global,reloc=2,class=CODE,delta=1
   147                           	psect	text124,global,reloc=2,class=CODE,delta=1
   148                           	psect	text125,global,reloc=2,class=CODE,delta=1
   149                           	psect	text126,global,reloc=2,class=CODE,delta=1
   150                           	psect	text127,global,reloc=2,class=CODE,delta=1
   151                           	psect	text128,global,reloc=2,class=CODE,delta=1
   152                           	psect	text129,global,reloc=2,class=CODE,delta=1
   153                           	psect	text130,global,reloc=2,class=CODE,delta=1
   154                           	psect	text131,global,reloc=2,class=CODE,delta=1
   155                           	psect	text132,global,reloc=2,class=CODE,delta=1
   156                           	psect	text133,global,reloc=2,class=CODE,delta=1
   157                           	psect	text134,global,reloc=2,class=CODE,delta=1
   158                           	psect	text135,global,reloc=2,class=CODE,delta=1
   159                           	psect	text136,global,reloc=2,class=CODE,delta=1
   160                           	psect	text137,global,reloc=2,class=CODE,delta=1
   161                           	psect	text138,global,reloc=2,class=CODE,delta=1
   162                           	psect	text139,global,reloc=2,class=CODE,delta=1
   163                           	psect	text140,global,reloc=2,class=CODE,delta=1
   164                           	psect	text141,global,reloc=2,class=CODE,delta=1
   165                           	psect	text142,global,reloc=2,class=CODE,delta=1,group=1
   166                           	psect	text143,global,reloc=2,class=CODE,delta=1,group=1
   167                           	psect	text144,global,reloc=2,class=CODE,delta=1
   168                           	psect	text145,global,reloc=2,class=CODE,delta=1
   169                           	psect	text146,global,reloc=2,class=CODE,delta=1
   170                           	psect	text147,global,reloc=2,class=CODE,delta=1
   171                           	psect	text148,global,reloc=2,class=CODE,delta=1
   172                           	psect	text149,global,reloc=2,class=CODE,delta=1
   173                           	psect	text150,global,reloc=2,class=CODE,delta=1
   174                           	psect	text151,global,reloc=2,class=CODE,delta=1
   175                           	psect	text152,global,reloc=2,class=CODE,delta=1
   176                           	psect	text153,global,reloc=2,class=CODE,delta=1,group=1
   177                           	psect	text154,global,reloc=2,class=CODE,delta=1
   178                           	psect	text155,global,reloc=2,class=CODE,delta=1
   179                           	psect	text156,global,reloc=2,class=CODE,delta=1
   180                           	psect	text157,global,reloc=2,class=CODE,delta=1
   181                           	psect	text158,global,reloc=2,class=CODE,delta=1
   182                           	psect	text159,global,reloc=2,class=CODE,delta=1
   183                           	psect	text160,global,reloc=2,class=CODE,delta=1
   184                           	psect	text161,global,reloc=2,class=CODE,delta=1
   185                           	psect	text162,global,reloc=2,class=CODE,delta=1
   186                           	psect	text163,global,reloc=2,class=CODE,delta=1
   187                           	psect	text164,global,reloc=2,class=CODE,delta=1
   188                           	psect	text165,global,reloc=2,class=CODE,delta=1
   189                           	psect	text166,global,reloc=2,class=CODE,delta=1,group=1
   190                           	psect	text167,global,reloc=2,class=CODE,delta=1
   191                           	psect	text168,global,reloc=2,class=CODE,delta=1
   192                           	psect	text169,global,reloc=2,class=CODE,delta=1
   193                           	psect	text170,global,reloc=2,class=CODE,delta=1
   194                           	psect	text171,global,reloc=2,class=CODE,delta=1
   195                           	psect	text172,global,reloc=2,class=CODE,delta=1
   196                           	psect	text173,global,reloc=2,class=CODE,delta=1
   197                           	psect	text174,global,reloc=2,class=CODE,delta=1
   198                           	psect	text175,global,reloc=2,class=CODE,delta=1
   199                           	psect	text176,global,reloc=2,class=CODE,delta=1
   200                           	psect	text177,global,reloc=2,class=CODE,delta=1
   201                           	psect	text178,global,reloc=2,class=CODE,delta=1,group=1
   202                           	psect	text179,global,reloc=2,class=CODE,delta=1,group=1
   203                           	psect	text180,global,reloc=2,class=CODE,delta=1
   204                           	psect	text181,global,reloc=2,class=CODE,delta=1
   205                           	psect	text182,global,reloc=2,class=CODE,delta=1
   206                           	psect	text183,global,reloc=2,class=CODE,delta=1
   207                           	psect	text184,global,reloc=2,class=CODE,delta=1
   208                           	psect	text185,global,reloc=2,class=CODE,delta=1
   209                           	psect	text186,global,reloc=2,class=CODE,delta=1
   210                           	psect	text187,global,reloc=2,class=CODE,delta=1
   211                           	psect	text188,global,reloc=2,class=CODE,delta=1
   212                           	psect	text189,global,reloc=2,class=CODE,delta=1
   213                           	psect	text190,global,reloc=2,class=CODE,delta=1
   214                           	psect	text191,global,reloc=2,class=CODE,delta=1,group=1
   215                           	psect	text192,global,reloc=2,class=CODE,delta=1,group=1
   216                           	psect	text193,global,reloc=2,class=CODE,delta=1
   217                           	psect	text194,global,reloc=2,class=CODE,delta=1
   218                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   219                           	psect	text196,global,reloc=2,class=CODE,delta=1
   220                           	psect	text197,global,reloc=2,class=CODE,delta=1
   221                           	psect	text198,global,reloc=2,class=CODE,delta=1
   222                           	psect	text199,global,reloc=2,class=CODE,delta=1
   223                           	psect	text200,global,reloc=2,class=CODE,delta=1
   224                           	psect	text201,global,reloc=2,class=CODE,delta=1
   225                           	psect	text202,global,reloc=2,class=CODE,delta=1
   226                           	psect	text203,global,reloc=2,class=CODE,delta=1
   227                           	psect	text204,global,reloc=2,class=CODE,delta=1
   228                           	psect	text205,global,reloc=2,class=CODE,delta=1
   229                           	psect	text206,global,reloc=2,class=CODE,delta=1
   230                           	psect	text207,global,reloc=2,class=CODE,delta=1
   231                           	psect	text208,global,reloc=2,class=CODE,delta=1
   232                           	psect	text209,global,reloc=2,class=CODE,delta=1
   233                           	psect	text210,global,reloc=2,class=CODE,delta=1
   234                           	psect	text211,global,reloc=2,class=CODE,delta=1
   235                           	psect	text212,global,reloc=2,class=CODE,delta=1
   236                           	psect	text213,global,reloc=2,class=CODE,delta=1
   237                           	psect	text214,global,reloc=2,class=CODE,delta=1
   238                           	psect	text215,global,reloc=2,class=CODE,delta=1
   239                           	psect	text216,global,reloc=2,class=CODE,delta=1
   240                           	psect	text217,global,reloc=2,class=CODE,delta=1
   241                           	psect	text218,global,reloc=2,class=CODE,delta=1
   242                           	psect	text219,global,reloc=2,class=CODE,delta=1
   243                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   244                           	psect	text220,global,reloc=2,class=CODE,delta=1
   245                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   246                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   247                           	psect	pa_nodes0,global,class=CODE,delta=1
   248  0000                     
   249                           ; Version 1.41
   250                           ; Generated 25/01/2017 GMT
   251                           ; 
   252                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   253                           ; All rights reserved.
   254                           ; 
   255                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   256                           ; 
   257                           ; Redistribution and use in source and binary forms, with or without modification, are
   258                           ; permitted provided that the following conditions are met:
   259                           ; 
   260                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   261                           ;        conditions and the following disclaimer.
   262                           ; 
   263                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   264                           ;        of conditions and the following disclaimer in the documentation and/or other
   265                           ;        materials provided with the distribution.
   266                           ; 
   267                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   268                           ;        software without specific prior written permission.
   269                           ; 
   270                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   271                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   272                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   273                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   274                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   275                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   276                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   277                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   278                           ; 
   279                           ; 
   280                           ; Code-generator required, PIC18LF65K40 Definitions
   281                           ; 
   282                           ; SFR Addresses
   283  0000                     
   284 ;; Function _DIO0_ISR_Lora is unused but had its address taken
   285  0000                     
   286 ;; Function _INT0_DefaultInterruptHandler is unused but had its address taken
   287  0000                     tosu	equ	0xFFF
   288                           tosh	equ	0xFFE
   289                           tosl	equ	0xFFD
   290                           pclath	equ	0xFFA
   291                           tblptru	equ	0xFF8
   292                           tblptrh	equ	0xFF7
   293                           tblptrl	equ	0xFF6
   294                           tablat	equ	0xFF5
   295                           prodh	equ	0xFF4
   296                           prodl	equ	0xFF3
   297                           intcon	equ	0xFF2
   298                           indf0	equ	0xFEF
   299                           plusw0	equ	0xFEB
   300                           fsr0h	equ	0xFEA
   301                           fsr0l	equ	0xFE9
   302                           wreg	equ	0xFE8
   303                           postinc1	equ	0xFE6
   304                           postdec1	equ	0xFE5
   305                           plusw1	equ	0xFE3
   306                           fsr1h	equ	0xFE2
   307                           fsr1l	equ	0xFE1
   308                           indf2	equ	0xFDF
   309                           postinc2	equ	0xFDE
   310                           postdec2	equ	0xFDD
   311                           plusw2	equ	0xFDB
   312                           fsr2h	equ	0xFDA
   313                           fsr2l	equ	0xFD9
   314                           status	equ	0xFD8
   315                           
   316 ;;UnconfirmedTransmissionCallback@param	offset=-1 (param)
   317 ;;RADIO_WatchdogTimeout@param	offset=-1 (param)
   318 ;;RADIO_RxFSKTimeout@irqFlags	offset	0
   319 ;;RADIO_RxFSKTimeout@param	offset=-1 (param)
   320 ;;LORAWAN_ReceiveWindow1Callback@freq	offset	0
   321 ;;LORAWAN_ReceiveWindow1Callback@param	offset=-1 (param)
   322 ;;_LORAWAN_LinkCheckCallback$1052	offset	0
   323 ;;LORAWAN_LinkCheckCallback@iCtr	offset	4
   324 ;;LORAWAN_LinkCheckCallback@param	offset=-1 (param)
   325 ;;_DutyCycleCallback$2139	offset	0
   326 ;;DutyCycleCallback@minim	offset	4
   327 ;;DutyCycleCallback@i	offset	8
   328 ;;DutyCycleCallback@found	offset	9
   329 ;;DutyCycleCallback@param	offset=-1 (param)
   330 ;;AutomaticReplyCallback@param	offset=-1 (param)
   331 ;;AckRetransmissionCallback@maximumPacketSize	offset	0
   332 ;;AckRetransmissionCallback@param	offset=-1 (param)
   333 ;;_param	offset=-1 (param)
   334 ;;_UpdateJoinSuccessState$1069	offset	0
   335 ;;UpdateJoinSuccessState@param	offset=-1 (param)
   336                           
   337                           	psect	idataCOMRAM
   338  0061C2                     __pidataCOMRAM:
   339                           	opt stack 0
   340                           
   341                           ;initializer for _randx
   342  0061C2  0001               	dw	1
   343  0061C4  0000               	dw	0
   344                           
   345                           ;initializer for _ticksToScheduledInterrupt
   346  0061C6  FFFF               	dw	65535
   347  0061C8  FFFF               	dw	65535
   348                           tosu	equ	0xFFF
   349                           tosh	equ	0xFFE
   350                           tosl	equ	0xFFD
   351                           pclath	equ	0xFFA
   352                           tblptru	equ	0xFF8
   353                           tblptrh	equ	0xFF7
   354                           tblptrl	equ	0xFF6
   355                           tablat	equ	0xFF5
   356                           prodh	equ	0xFF4
   357                           prodl	equ	0xFF3
   358                           intcon	equ	0xFF2
   359                           indf0	equ	0xFEF
   360                           plusw0	equ	0xFEB
   361                           fsr0h	equ	0xFEA
   362                           fsr0l	equ	0xFE9
   363                           wreg	equ	0xFE8
   364                           postinc1	equ	0xFE6
   365                           postdec1	equ	0xFE5
   366                           plusw1	equ	0xFE3
   367                           fsr1h	equ	0xFE2
   368                           fsr1l	equ	0xFE1
   369                           indf2	equ	0xFDF
   370                           postinc2	equ	0xFDE
   371                           postdec2	equ	0xFDD
   372                           plusw2	equ	0xFDB
   373                           fsr2h	equ	0xFDA
   374                           fsr2l	equ	0xFD9
   375                           status	equ	0xFD8
   376                           
   377                           	psect	idataBANK1
   378  005996                     __pidataBANK1:
   379                           	opt stack 0
   380                           
   381                           ;initializer for GenerateSubkey@F17267
   382  005996  00                 	db	0
   383  005997  00                 	db	0
   384  005998  00                 	db	0
   385  005999  00                 	db	0
   386  00599A  00                 	db	0
   387  00599B  00                 	db	0
   388  00599C  00                 	db	0
   389  00599D  00                 	db	0
   390  00599E  00                 	db	0
   391  00599F  00                 	db	0
   392  0059A0  00                 	db	0
   393  0059A1  00                 	db	0
   394  0059A2  00                 	db	0
   395  0059A3  00                 	db	0
   396  0059A4  00                 	db	0
   397  0059A5  87                 	db	135
   398                           
   399                           ;initializer for _appSKey
   400  0059A6  45                 	db	69
   401  0059A7  37                 	db	55
   402  0059A8  1A                 	db	26
   403  0059A9  44                 	db	68
   404  0059AA  B2                 	db	178
   405  0059AB  99                 	db	153
   406  0059AC  80                 	db	128
   407  0059AD  1D                 	db	29
   408  0059AE  2E                 	db	46
   409  0059AF  5C                 	db	92
   410  0059B0  A1                 	db	161
   411  0059B1  9E                 	db	158
   412  0059B2  38                 	db	56
   413  0059B3  A5                 	db	165
   414  0059B4  03                 	db	3
   415  0059B5  2A                 	db	42
   416                           
   417                           ;initializer for _nwkSKey
   418  0059B6  DC                 	db	220
   419  0059B7  98                 	db	152
   420  0059B8  06                 	db	6
   421  0059B9  0B                 	db	11
   422  0059BA  22                 	db	34
   423  0059BB  B5                 	db	181
   424  0059BC  BA                 	db	186
   425  0059BD  21                 	db	33
   426  0059BE  61                 	db	97
   427  0059BF  B3                 	db	179
   428  0059C0  A9                 	db	169
   429  0059C1  95                 	db	149
   430  0059C2  7C                 	db	124
   431  0059C3  88                 	db	136
   432  0059C4  03                 	db	3
   433  0059C5  1F                 	db	31
   434                           tosu	equ	0xFFF
   435                           tosh	equ	0xFFE
   436                           tosl	equ	0xFFD
   437                           pclath	equ	0xFFA
   438                           tblptru	equ	0xFF8
   439                           tblptrh	equ	0xFF7
   440                           tblptrl	equ	0xFF6
   441                           tablat	equ	0xFF5
   442                           prodh	equ	0xFF4
   443                           prodl	equ	0xFF3
   444                           intcon	equ	0xFF2
   445                           indf0	equ	0xFEF
   446                           plusw0	equ	0xFEB
   447                           fsr0h	equ	0xFEA
   448                           fsr0l	equ	0xFE9
   449                           wreg	equ	0xFE8
   450                           postinc1	equ	0xFE6
   451                           postdec1	equ	0xFE5
   452                           plusw1	equ	0xFE3
   453                           fsr1h	equ	0xFE2
   454                           fsr1l	equ	0xFE1
   455                           indf2	equ	0xFDF
   456                           postinc2	equ	0xFDE
   457                           postdec2	equ	0xFDD
   458                           plusw2	equ	0xFDB
   459                           fsr2h	equ	0xFDA
   460                           fsr2l	equ	0xFD9
   461                           status	equ	0xFD8
   462                           
   463                           	psect	mediumconst
   464  007E6C                     __pmediumconst:
   465                           	opt stack 0
   466  007E6C  00                 	db	0
   467  007E6D                     _STable:
   468                           	opt stack 0
   469  007E6D  63                 	db	99
   470  007E6E  7C                 	db	124
   471  007E6F  77                 	db	119
   472  007E70  7B                 	db	123
   473  007E71  F2                 	db	242
   474  007E72  6B                 	db	107
   475  007E73  6F                 	db	111
   476  007E74  C5                 	db	197
   477  007E75  30                 	db	48
   478  007E76  01                 	db	1
   479  007E77  67                 	db	103
   480  007E78  2B                 	db	43
   481  007E79  FE                 	db	254
   482  007E7A  D7                 	db	215
   483  007E7B  AB                 	db	171
   484  007E7C  76                 	db	118
   485  007E7D  CA                 	db	202
   486  007E7E  82                 	db	130
   487  007E7F  C9                 	db	201
   488  007E80  7D                 	db	125
   489  007E81  FA                 	db	250
   490  007E82  59                 	db	89
   491  007E83  47                 	db	71
   492  007E84  F0                 	db	240
   493  007E85  AD                 	db	173
   494  007E86  D4                 	db	212
   495  007E87  A2                 	db	162
   496  007E88  AF                 	db	175
   497  007E89  9C                 	db	156
   498  007E8A  A4                 	db	164
   499  007E8B  72                 	db	114
   500  007E8C  C0                 	db	192
   501  007E8D  B7                 	db	183
   502  007E8E  FD                 	db	253
   503  007E8F  93                 	db	147
   504  007E90  26                 	db	38
   505  007E91  36                 	db	54
   506  007E92  3F                 	db	63
   507  007E93  F7                 	db	247
   508  007E94  CC                 	db	204
   509  007E95  34                 	db	52
   510  007E96  A5                 	db	165
   511  007E97  E5                 	db	229
   512  007E98  F1                 	db	241
   513  007E99  71                 	db	113
   514  007E9A  D8                 	db	216
   515  007E9B  31                 	db	49
   516  007E9C  15                 	db	21
   517  007E9D  04                 	db	4
   518  007E9E  C7                 	db	199
   519  007E9F  23                 	db	35
   520  007EA0  C3                 	db	195
   521  007EA1  18                 	db	24
   522  007EA2  96                 	db	150
   523  007EA3  05                 	db	5
   524  007EA4  9A                 	db	154
   525  007EA5  07                 	db	7
   526  007EA6  12                 	db	18
   527  007EA7  80                 	db	128
   528  007EA8  E2                 	db	226
   529  007EA9  EB                 	db	235
   530  007EAA  27                 	db	39
   531  007EAB  B2                 	db	178
   532  007EAC  75                 	db	117
   533  007EAD  09                 	db	9
   534  007EAE  83                 	db	131
   535  007EAF  2C                 	db	44
   536  007EB0  1A                 	db	26
   537  007EB1  1B                 	db	27
   538  007EB2  6E                 	db	110
   539  007EB3  5A                 	db	90
   540  007EB4  A0                 	db	160
   541  007EB5  52                 	db	82
   542  007EB6  3B                 	db	59
   543  007EB7  D6                 	db	214
   544  007EB8  B3                 	db	179
   545  007EB9  29                 	db	41
   546  007EBA  E3                 	db	227
   547  007EBB  2F                 	db	47
   548  007EBC  84                 	db	132
   549  007EBD  53                 	db	83
   550  007EBE  D1                 	db	209
   551  007EBF  00                 	db	0
   552  007EC0  ED                 	db	237
   553  007EC1  20                 	db	32
   554  007EC2  FC                 	db	252
   555  007EC3  B1                 	db	177
   556  007EC4  5B                 	db	91
   557  007EC5  6A                 	db	106
   558  007EC6  CB                 	db	203
   559  007EC7  BE                 	db	190
   560  007EC8  39                 	db	57
   561  007EC9  4A                 	db	74
   562  007ECA  4C                 	db	76
   563  007ECB  58                 	db	88
   564  007ECC  CF                 	db	207
   565  007ECD  D0                 	db	208
   566  007ECE  EF                 	db	239
   567  007ECF  AA                 	db	170
   568  007ED0  FB                 	db	251
   569  007ED1  43                 	db	67
   570  007ED2  4D                 	db	77
   571  007ED3  33                 	db	51
   572  007ED4  85                 	db	133
   573  007ED5  45                 	db	69
   574  007ED6  F9                 	db	249
   575  007ED7  02                 	db	2
   576  007ED8  7F                 	db	127
   577  007ED9  50                 	db	80
   578  007EDA  3C                 	db	60
   579  007EDB  9F                 	db	159
   580  007EDC  A8                 	db	168
   581  007EDD  51                 	db	81
   582  007EDE  A3                 	db	163
   583  007EDF  40                 	db	64
   584  007EE0  8F                 	db	143
   585  007EE1  92                 	db	146
   586  007EE2  9D                 	db	157
   587  007EE3  38                 	db	56
   588  007EE4  F5                 	db	245
   589  007EE5  BC                 	db	188
   590  007EE6  B6                 	db	182
   591  007EE7  DA                 	db	218
   592  007EE8  21                 	db	33
   593  007EE9  10                 	db	16
   594  007EEA  FF                 	db	255
   595  007EEB  F3                 	db	243
   596  007EEC  D2                 	db	210
   597  007EED  CD                 	db	205
   598  007EEE  0C                 	db	12
   599  007EEF  13                 	db	19
   600  007EF0  EC                 	db	236
   601  007EF1  5F                 	db	95
   602  007EF2  97                 	db	151
   603  007EF3  44                 	db	68
   604  007EF4  17                 	db	23
   605  007EF5  C4                 	db	196
   606  007EF6  A7                 	db	167
   607  007EF7  7E                 	db	126
   608  007EF8  3D                 	db	61
   609  007EF9  64                 	db	100
   610  007EFA  5D                 	db	93
   611  007EFB  19                 	db	25
   612  007EFC  73                 	db	115
   613  007EFD  60                 	db	96
   614  007EFE  81                 	db	129
   615  007EFF  4F                 	db	79
   616  007F00  DC                 	db	220
   617  007F01  22                 	db	34
   618  007F02  2A                 	db	42
   619  007F03  90                 	db	144
   620  007F04  88                 	db	136
   621  007F05  46                 	db	70
   622  007F06  EE                 	db	238
   623  007F07  B8                 	db	184
   624  007F08  14                 	db	20
   625  007F09  DE                 	db	222
   626  007F0A  5E                 	db	94
   627  007F0B  0B                 	db	11
   628  007F0C  DB                 	db	219
   629  007F0D  E0                 	db	224
   630  007F0E  32                 	db	50
   631  007F0F  3A                 	db	58
   632  007F10  0A                 	db	10
   633  007F11  49                 	db	73
   634  007F12  06                 	db	6
   635  007F13  24                 	db	36
   636  007F14  5C                 	db	92
   637  007F15  C2                 	db	194
   638  007F16  D3                 	db	211
   639  007F17  AC                 	db	172
   640  007F18  62                 	db	98
   641  007F19  91                 	db	145
   642  007F1A  95                 	db	149
   643  007F1B  E4                 	db	228
   644  007F1C  79                 	db	121
   645  007F1D  E7                 	db	231
   646  007F1E  C8                 	db	200
   647  007F1F  37                 	db	55
   648  007F20  6D                 	db	109
   649  007F21  8D                 	db	141
   650  007F22  D5                 	db	213
   651  007F23  4E                 	db	78
   652  007F24  A9                 	db	169
   653  007F25  6C                 	db	108
   654  007F26  56                 	db	86
   655  007F27  F4                 	db	244
   656  007F28  EA                 	db	234
   657  007F29  65                 	db	101
   658  007F2A  7A                 	db	122
   659  007F2B  AE                 	db	174
   660  007F2C  08                 	db	8
   661  007F2D  BA                 	db	186
   662  007F2E  78                 	db	120
   663  007F2F  25                 	db	37
   664  007F30  2E                 	db	46
   665  007F31  1C                 	db	28
   666  007F32  A6                 	db	166
   667  007F33  B4                 	db	180
   668  007F34  C6                 	db	198
   669  007F35  E8                 	db	232
   670  007F36  DD                 	db	221
   671  007F37  74                 	db	116
   672  007F38  1F                 	db	31
   673  007F39  4B                 	db	75
   674  007F3A  BD                 	db	189
   675  007F3B  8B                 	db	139
   676  007F3C  8A                 	db	138
   677  007F3D  70                 	db	112
   678  007F3E  3E                 	db	62
   679  007F3F  B5                 	db	181
   680  007F40  66                 	db	102
   681  007F41  48                 	db	72
   682  007F42  03                 	db	3
   683  007F43  F6                 	db	246
   684  007F44  0E                 	db	14
   685  007F45  61                 	db	97
   686  007F46  35                 	db	53
   687  007F47  57                 	db	87
   688  007F48  B9                 	db	185
   689  007F49  86                 	db	134
   690  007F4A  C1                 	db	193
   691  007F4B  1D                 	db	29
   692  007F4C  9E                 	db	158
   693  007F4D  E1                 	db	225
   694  007F4E  F8                 	db	248
   695  007F4F  98                 	db	152
   696  007F50  11                 	db	17
   697  007F51  69                 	db	105
   698  007F52  D9                 	db	217
   699  007F53  8E                 	db	142
   700  007F54  94                 	db	148
   701  007F55  9B                 	db	155
   702  007F56  1E                 	db	30
   703  007F57  87                 	db	135
   704  007F58  E9                 	db	233
   705  007F59  CE                 	db	206
   706  007F5A  55                 	db	85
   707  007F5B  28                 	db	40
   708  007F5C  DF                 	db	223
   709  007F5D  8C                 	db	140
   710  007F5E  A1                 	db	161
   711  007F5F  89                 	db	137
   712  007F60  0D                 	db	13
   713  007F61  BF                 	db	191
   714  007F62  E6                 	db	230
   715  007F63  42                 	db	66
   716  007F64  68                 	db	104
   717  007F65  41                 	db	65
   718  007F66  99                 	db	153
   719  007F67  2D                 	db	45
   720  007F68  0F                 	db	15
   721  007F69  B0                 	db	176
   722  007F6A  54                 	db	84
   723  007F6B  BB                 	db	187
   724  007F6C  16                 	db	22
   725  007F6D                     __end_of_STable:
   726                           	opt stack 0
   727  007F6D                     _modulation:
   728                           	opt stack 0
   729  007F6D  01                 	db	1
   730  007F6E  01                 	db	1
   731  007F6F  01                 	db	1
   732  007F70  01                 	db	1
   733  007F71  01                 	db	1
   734  007F72  01                 	db	1
   735  007F73  01                 	db	1
   736  007F74  00                 	db	0
   737  007F75                     __end_of_modulation:
   738                           	opt stack 0
   739  007F75                     _rxWindowOffset:
   740                           	opt stack 0
   741  007F75  DF                 	db	223
   742  007F76  CE                 	db	206
   743  007F77  C6                 	db	198
   744  007F78  C2                 	db	194
   745  007F79  BE                 	db	190
   746  007F7A  BC                 	db	188
   747  007F7B  F1                 	db	241
   748  007F7C  FE                 	db	254
   749  007F7D                     __end_of_rxWindowOffset:
   750                           	opt stack 0
   751  007F7D                     _maxPayloadSize:
   752                           	opt stack 0
   753  007F7D  33                 	db	51
   754  007F7E  33                 	db	51
   755  007F7F  33                 	db	51
   756  007F80  73                 	db	115
   757  007F81  F2                 	db	242
   758  007F82  F2                 	db	242
   759  007F83  F2                 	db	242
   760  007F84  38                 	db	56
   761  007F85                     __end_of_maxPayloadSize:
   762                           	opt stack 0
   763  007F85                     _rxWindowSize:
   764                           	opt stack 0
   765  007F85  08                 	db	8
   766  007F86  0A                 	db	10
   767  007F87  0E                 	db	14
   768  007F88  1A                 	db	26
   769  007F89  31                 	db	49
   770  007F8A  58                 	db	88
   771  007F8B  3C                 	db	60
   772  007F8C  08                 	db	8
   773  007F8D                     __end_of_rxWindowSize:
   774                           	opt stack 0
   775  007F8D                     _bandwidth:
   776                           	opt stack 0
   777  007F8D  07                 	db	7
   778  007F8E  07                 	db	7
   779  007F8F  07                 	db	7
   780  007F90  07                 	db	7
   781  007F91  07                 	db	7
   782  007F92  07                 	db	7
   783  007F93  08                 	db	8
   784  007F94                     __end_of_bandwidth:
   785                           	opt stack 0
   786  007F94                     _spreadingFactor:
   787                           	opt stack 0
   788  007F94  0C                 	db	12
   789  007F95  0B                 	db	11
   790  007F96  0A                 	db	10
   791  007F97  09                 	db	9
   792  007F98  08                 	db	8
   793  007F99  07                 	db	7
   794  007F9A  07                 	db	7
   795  007F9B                     __end_of_spreadingFactor:
   796                           	opt stack 0
   797  007F9B                     _macEndDevCmdReplyLen:
   798                           	opt stack 0
   799  007F9B  01                 	db	1
   800  007F9C  02                 	db	2
   801  007F9D  01                 	db	1
   802  007F9E  02                 	db	2
   803  007F9F  03                 	db	3
   804  007FA0  02                 	db	2
   805  007FA1  01                 	db	1
   806  007FA2                     __end_of_macEndDevCmdReplyLen:
   807                           	opt stack 0
   808  007FA2                     _txPower868:
   809                           	opt stack 0
   810  007FA2  14                 	db	20
   811  007FA3  0E                 	db	14
   812  007FA4  0B                 	db	11
   813  007FA5  08                 	db	8
   814  007FA6  05                 	db	5
   815  007FA7  02                 	db	2
   816  007FA8                     __end_of_txPower868:
   817                           	opt stack 0
   818  007FA8                     _DefaultChannels433:
   819                           	opt stack 0
   820  007FA8  B9D8               	dw	47576
   821  007FAA  19D1               	dw	6609
   822  007FAC  01                 	db	1
   823  007FAD  50                 	db	80
   824  007FAE  012E               	dw	302
   825  007FB0  0000               	dw	0
   826  007FB2  0000               	dw	0
   827  007FB4  01                 	db	1
   828  007FB5  FF                 	db	255
   829  007FB6  C718               	dw	50968
   830  007FB8  19D4               	dw	6612
   831  007FBA  01                 	db	1
   832  007FBB  50                 	db	80
   833  007FBC  012E               	dw	302
   834  007FBE  0000               	dw	0
   835  007FC0  0000               	dw	0
   836  007FC2  01                 	db	1
   837  007FC3  FF                 	db	255
   838  007FC4  D458               	dw	54360
   839  007FC6  19D7               	dw	6615
   840  007FC8  01                 	db	1
   841  007FC9  50                 	db	80
   842  007FCA  012E               	dw	302
   843  007FCC  0000               	dw	0
   844  007FCE  0000               	dw	0
   845  007FD0  01                 	db	1
   846  007FD1  FF                 	db	255
   847  007FD2                     __end_of_DefaultChannels433:
   848                           	opt stack 0
   849  007FD2                     _DefaultChannels868:
   850                           	opt stack 0
   851  007FD2  27A0               	dw	10144
   852  007FD4  33BE               	dw	13246
   853  007FD6  01                 	db	1
   854  007FD7  50                 	db	80
   855  007FD8  012E               	dw	302
   856  007FDA  0000               	dw	0
   857  007FDC  0000               	dw	0
   858  007FDE  01                 	db	1
   859  007FDF  FF                 	db	255
   860  007FE0  34E0               	dw	13536
   861  007FE2  33C1               	dw	13249
   862  007FE4  01                 	db	1
   863  007FE5  50                 	db	80
   864  007FE6  012E               	dw	302
   865  007FE8  0000               	dw	0
   866  007FEA  0000               	dw	0
   867  007FEC  01                 	db	1
   868  007FED  FF                 	db	255
   869  007FEE  4220               	dw	16928
   870  007FF0  33C4               	dw	13252
   871  007FF2  01                 	db	1
   872  007FF3  50                 	db	80
   873  007FF4  012E               	dw	302
   874  007FF6  0000               	dw	0
   875  007FF8  0000               	dw	0
   876  007FFA  01                 	db	1
   877  007FFB  FF                 	db	255
   878  007FFC                     __end_of_DefaultChannels868:
   879                           	opt stack 0
   880  007FFC                     _FskSyncWordBuff:
   881                           	opt stack 0
   882  007FFC  C1                 	db	193
   883  007FFD  94                 	db	148
   884  007FFE  C1                 	db	193
   885  007FFF                     __end_of_FskSyncWordBuff:
   886                           	opt stack 0
   887  007FFF  00                 	db	0	; dummy byte at the end
   888  0000                     tosu	equ	0xFFF
   889                           tosh	equ	0xFFE
   890                           tosl	equ	0xFFD
   891                           pclath	equ	0xFFA
   892                           tblptru	equ	0xFF8
   893                           tblptrh	equ	0xFF7
   894                           tblptrl	equ	0xFF6
   895                           tablat	equ	0xFF5
   896                           prodh	equ	0xFF4
   897                           prodl	equ	0xFF3
   898                           intcon	equ	0xFF2
   899                           indf0	equ	0xFEF
   900                           plusw0	equ	0xFEB
   901                           fsr0h	equ	0xFEA
   902                           fsr0l	equ	0xFE9
   903                           wreg	equ	0xFE8
   904                           postinc1	equ	0xFE6
   905                           postdec1	equ	0xFE5
   906                           plusw1	equ	0xFE3
   907                           fsr1h	equ	0xFE2
   908                           fsr1l	equ	0xFE1
   909                           indf2	equ	0xFDF
   910                           postinc2	equ	0xFDE
   911                           postdec2	equ	0xFDD
   912                           plusw2	equ	0xFDB
   913                           fsr2h	equ	0xFDA
   914                           fsr2l	equ	0xFD9
   915                           status	equ	0xFD8
   916                           
   917                           	psect	nvCOMRAM
   918  00005C                     __pnvCOMRAM:
   919                           	opt stack 0
   920  00005C                     _timer1ReloadVal:
   921                           	opt stack 0
   922  00005C                     	ds	2
   923  00005E                     _INT1_InterruptHandler:
   924                           	opt stack 0
   925  00005E                     	ds	2
   926                           tosu	equ	0xFFF
   927                           tosh	equ	0xFFE
   928                           tosl	equ	0xFFD
   929                           pclath	equ	0xFFA
   930                           tblptru	equ	0xFF8
   931                           tblptrh	equ	0xFF7
   932                           tblptrl	equ	0xFF6
   933                           tablat	equ	0xFF5
   934                           prodh	equ	0xFF4
   935                           prodl	equ	0xFF3
   936                           intcon	equ	0xFF2
   937                           indf0	equ	0xFEF
   938                           plusw0	equ	0xFEB
   939                           fsr0h	equ	0xFEA
   940                           fsr0l	equ	0xFE9
   941                           wreg	equ	0xFE8
   942                           postinc1	equ	0xFE6
   943                           postdec1	equ	0xFE5
   944                           plusw1	equ	0xFE3
   945                           fsr1h	equ	0xFE2
   946                           fsr1l	equ	0xFE1
   947                           indf2	equ	0xFDF
   948                           postinc2	equ	0xFDE
   949                           postdec2	equ	0xFDD
   950                           plusw2	equ	0xFDB
   951                           fsr2h	equ	0xFDA
   952                           fsr2l	equ	0xFD9
   953                           status	equ	0xFD8
   954                           
   955                           	psect	nvBANK1
   956  0001F7                     __pnvBANK1:
   957                           	opt stack 0
   958  0001F7                     _IOCBF4_InterruptHandler:
   959                           	opt stack 0
   960  0001F7                     	ds	2
   961  0001F9                     _TMR1_InterruptHandler:
   962                           	opt stack 0
   963  0001F9                     	ds	2
   964  0001FB                     _INT3_InterruptHandler:
   965                           	opt stack 0
   966  0001FB                     	ds	2
   967  0001FD                     _INT2_InterruptHandler:
   968                           	opt stack 0
   969  0001FD                     	ds	2
   970  0000                     _INT2PPSbits	set	3570
   971  0000                     _INT0PPSbits	set	3568
   972  0000                     _INT3PPSbits	set	3571
   973  0000                     _INT1PPSbits	set	3569
   974  0000                     _PPSLOCKbits	set	3567
   975  0000                     _PPSLOCK	set	3567
   976  0000                     _SSP2DATPPSbits	set	3613
   977  0000                     _RD6PPS	set	3696
   978  0000                     _RD5PPS	set	3695
   979  0000                     _IOCBPbits	set	3733
   980  0000                     _IOCBNbits	set	3732
   981  0000                     _IOCBFbits	set	3731
   982  0000                     _ODCOND	set	3749
   983  0000                     _ODCONC	set	3744
   984  0000                     _ODCONH	set	3775
   985  0000                     _ODCONB	set	3736
   986  0000                     _ODCONG	set	3770
   987  0000                     _ODCONA	set	3728
   988  0000                     _ODCONF	set	3762
   989  0000                     _ODCONE	set	3757
   990  0000                     _WPUH	set	3776
   991  0000                     _WPUC	set	3745
   992  0000                     _WPUA	set	3729
   993  0000                     _WPUG	set	3771
   994  0000                     _WPUB	set	3737
   995  0000                     _WPUE	set	3758
   996  0000                     _WPUF	set	3763
   997  0000                     _WPUD	set	3750
   998  0000                     _ANSELA	set	3730
   999  0000                     _ANSELF	set	3764
  1000  0000                     _ANSELG	set	3772
  1001  0000                     _ANSELE	set	3759
  1002  0000                     _ANSELD	set	3751
  1003  0000                     _ANSELB	set	3738
  1004  0000                     _SSP2STATbits	set	3800
  1005  0000                     _SSP2BUF	set	3797
  1006  0000                     _SSP2CON1bits	set	3801
  1007  0000                     _SSP2ADD	set	3798
  1008  0000                     _SSP2CON1	set	3801
  1009  0000                     _SSP2STAT	set	3800
  1010  0000                     _OSCTUNE	set	3656
  1011  0000                     _OSCFRQ	set	3657
  1012  0000                     _OSCEN	set	3655
  1013  0000                     _OSCCON3	set	3653
  1014  0000                     _OSCCON1	set	3651
  1015  0000                     _PIE5bits	set	3630
  1016  0000                     _PIR5bits	set	3640
  1017  0000                     _PIE0bits	set	3625
  1018  0000                     _PIR0bits	set	3635
  1019  0000                     _LATCbits	set	3963
  1020  0000                     _TRISD	set	3972
  1021  0000                     _TRISC	set	3971
  1022  0000                     _TRISH	set	3976
  1023  0000                     _TRISB	set	3970
  1024  0000                     _TRISG	set	3975
  1025  0000                     _TRISA	set	3969
  1026  0000                     _TRISF	set	3974
  1027  0000                     _TRISE	set	3973
  1028  0000                     _LATH	set	3968
  1029  0000                     _LATC	set	3963
  1030  0000                     _LATG	set	3967
  1031  0000                     _LATB	set	3962
  1032  0000                     _LATF	set	3966
  1033  0000                     _LATA	set	3961
  1034  0000                     _LATD	set	3964
  1035  0000                     _LATE	set	3965
  1036  0000                     _T1CONbits	set	4047
  1037  0000                     _TMR1L	set	4045
  1038  0000                     _TMR1H	set	4046
  1039  0000                     _T1CLK	set	4050
  1040  0000                     _T1GATE	set	4049
  1041  0000                     _T1GCON	set	4048
  1042  0000                     _T1CON	set	4047
  1043  0000                     _PORTBbits	set	3978
  1044  0000                     _INTCONbits	set	4082
  1045  0000                     _GIE	set	32663
  1046  0000                     _LATC1	set	31705
  1047  0000                     _LATC0	set	31704
  1048  0000                     _TRISC0	set	31768
  1049                           
  1050                           ; #config settings
  1051  0000                     tosu	equ	0xFFF
  1052                           tosh	equ	0xFFE
  1053                           tosl	equ	0xFFD
  1054                           pclath	equ	0xFFA
  1055                           tblptru	equ	0xFF8
  1056                           tblptrh	equ	0xFF7
  1057                           tblptrl	equ	0xFF6
  1058                           tablat	equ	0xFF5
  1059                           prodh	equ	0xFF4
  1060                           prodl	equ	0xFF3
  1061                           intcon	equ	0xFF2
  1062                           indf0	equ	0xFEF
  1063                           plusw0	equ	0xFEB
  1064                           fsr0h	equ	0xFEA
  1065                           fsr0l	equ	0xFE9
  1066                           wreg	equ	0xFE8
  1067                           postinc1	equ	0xFE6
  1068                           postdec1	equ	0xFE5
  1069                           plusw1	equ	0xFE3
  1070                           fsr1h	equ	0xFE2
  1071                           fsr1l	equ	0xFE1
  1072                           indf2	equ	0xFDF
  1073                           postinc2	equ	0xFDE
  1074                           postdec2	equ	0xFDD
  1075                           plusw2	equ	0xFDB
  1076                           fsr2h	equ	0xFDA
  1077                           fsr2l	equ	0xFD9
  1078                           status	equ	0xFD8
  1079                           
  1080                           	psect	cinit
  1081  0043C2                     __pcinit:
  1082                           	opt stack 0
  1083  0043C2                     start_initialization:
  1084                           	opt stack 0
  1085  0043C2                     __initialization:
  1086                           	opt stack 0
  1087                           
  1088                           ; Initialize objects allocated to BANK1 (48 bytes)
  1089                           ; load TBLPTR registers with __pidataBANK1
  1090  0043C2  0E96               	movlw	low __pidataBANK1
  1091  0043C4  6EF6               	movwf	tblptrl,c
  1092  0043C6  0E59               	movlw	high __pidataBANK1
  1093  0043C8  6EF7               	movwf	tblptrh,c
  1094  0043CA  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1095  0043CC  6EF8               	movwf	tblptru,c
  1096  0043CE  EE01  F0C7         	lfsr	0,__pdataBANK1
  1097  0043D2  EE20 F030          	lfsr	2,48
  1098  0043D6                     copy_data0:
  1099  0043D6  0009               	tblrd		*+
  1100  0043D8  CFF5 FFEE          	movff	tablat,postinc0
  1101  0043DC  50DD               	movf	postdec2,w,c
  1102  0043DE  50D9               	movf	fsr2l,w,c
  1103  0043E0  E1FA               	bnz	copy_data0
  1104                           
  1105                           ; Initialize objects allocated to COMRAM (8 bytes)
  1106                           ; load TBLPTR registers with __pidataCOMRAM
  1107  0043E2  0EC2               	movlw	low __pidataCOMRAM
  1108  0043E4  6EF6               	movwf	tblptrl,c
  1109  0043E6  0E61               	movlw	high __pidataCOMRAM
  1110  0043E8  6EF7               	movwf	tblptrh,c
  1111  0043EA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1112  0043EC  6EF8               	movwf	tblptru,c
  1113  0043EE  EE00  F054         	lfsr	0,__pdataCOMRAM
  1114  0043F2  EE20 F008          	lfsr	2,8
  1115  0043F6                     copy_data1:
  1116  0043F6  0009               	tblrd		*+
  1117  0043F8  CFF5 FFEE          	movff	tablat,postinc0
  1118  0043FC  50DD               	movf	postdec2,w,c
  1119  0043FE  50D9               	movf	fsr2l,w,c
  1120  004400  E1FA               	bnz	copy_data1
  1121                           
  1122                           ; Clear objects allocated to BIGRAM (542 bytes)
  1123  004402  EE04  F0E0         	lfsr	0,__pbssBIGRAM
  1124  004406  EE22 F01E          	lfsr	2,542
  1125  00440A                     clear_0:
  1126  00440A  6AEE               	clrf	postinc0,c
  1127  00440C  50DD               	movf	postdec2,w,c
  1128  00440E  50D9               	movf	fsr2l,w,c
  1129  004410  E1FC               	bnz	clear_0
  1130  004412  50DA               	movf	fsr2h,w,c
  1131  004414  E1FA               	bnz	clear_0
  1132                           
  1133                           ; Clear objects allocated to BANK4 (224 bytes)
  1134  004416  EE04  F000         	lfsr	0,__pbssBANK4
  1135  00441A  0EE0               	movlw	224
  1136  00441C                     clear_1:
  1137  00441C  6AEE               	clrf	postinc0,c
  1138  00441E  06E8               	decf	wreg,f,c
  1139  004420  E1FD               	bnz	clear_1
  1140                           
  1141                           ; Clear objects allocated to BANK3 (160 bytes)
  1142  004422  EE03  F000         	lfsr	0,__pbssBANK3
  1143  004426  0EA0               	movlw	160
  1144  004428                     clear_2:
  1145  004428  6AEE               	clrf	postinc0,c
  1146  00442A  06E8               	decf	wreg,f,c
  1147  00442C  E1FD               	bnz	clear_2
  1148                           
  1149                           ; Clear objects allocated to BANK2 (245 bytes)
  1150  00442E  EE02  F000         	lfsr	0,__pbssBANK2
  1151  004432  0EF5               	movlw	245
  1152  004434                     clear_3:
  1153  004434  6AEE               	clrf	postinc0,c
  1154  004436  06E8               	decf	wreg,f,c
  1155  004438  E1FD               	bnz	clear_3
  1156                           
  1157                           ; Clear objects allocated to BANK1 (78 bytes)
  1158  00443A  EE01  F079         	lfsr	0,__pbssBANK1
  1159  00443E  0E4E               	movlw	78
  1160  004440                     clear_4:
  1161  004440  6AEE               	clrf	postinc0,c
  1162  004442  06E8               	decf	wreg,f,c
  1163  004444  E1FD               	bnz	clear_4
  1164                           
  1165                           ; Clear objects allocated to BANK0 (3 bytes)
  1166  004446  0100               	movlb	0
  1167  004448  6BFF               	clrf	(__pbssBANK0+2)& (0+255),b
  1168  00444A  6BFE               	clrf	(__pbssBANK0+1)& (0+255),b
  1169  00444C  6BFD               	clrf	__pbssBANK0& (0+255),b
  1170                           
  1171                           ; Clear objects allocated to COMRAM (24 bytes)
  1172  00444E  EE00  F030         	lfsr	0,__pbssCOMRAM
  1173  004452  0E18               	movlw	24
  1174  004454                     clear_5:
  1175  004454  6AEE               	clrf	postinc0,c
  1176  004456  06E8               	decf	wreg,f,c
  1177  004458  E1FD               	bnz	clear_5
  1178  00445A                     end_of_initialization:
  1179                           	opt stack 0
  1180  00445A                     __end_of__initialization:
  1181                           	opt stack 0
  1182  00445A  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1183  00445C  6EF8               	movwf	tblptru,c
  1184  00445E  0100               	movlb	0
  1185  004460  EF1E  F01E         	goto	_main	;jump to C main() function
  1186                           tosu	equ	0xFFF
  1187                           tosh	equ	0xFFE
  1188                           tosl	equ	0xFFD
  1189                           pclath	equ	0xFFA
  1190                           tblptru	equ	0xFF8
  1191                           tblptrh	equ	0xFF7
  1192                           tblptrl	equ	0xFF6
  1193                           tablat	equ	0xFF5
  1194                           prodh	equ	0xFF4
  1195                           prodl	equ	0xFF3
  1196                           intcon	equ	0xFF2
  1197                           indf0	equ	0xFEF
  1198                           postinc0	equ	0xFEE
  1199                           plusw0	equ	0xFEB
  1200                           fsr0h	equ	0xFEA
  1201                           fsr0l	equ	0xFE9
  1202                           wreg	equ	0xFE8
  1203                           postinc1	equ	0xFE6
  1204                           postdec1	equ	0xFE5
  1205                           plusw1	equ	0xFE3
  1206                           fsr1h	equ	0xFE2
  1207                           fsr1l	equ	0xFE1
  1208                           indf2	equ	0xFDF
  1209                           postinc2	equ	0xFDE
  1210                           postdec2	equ	0xFDD
  1211                           plusw2	equ	0xFDB
  1212                           fsr2h	equ	0xFDA
  1213                           fsr2l	equ	0xFD9
  1214                           status	equ	0xFD8
  1215                           
  1216                           	psect	bssCOMRAM
  1217  000030                     __pbssCOMRAM:
  1218                           	opt stack 0
  1219  000030                     TMR_GetDeltaTime@retVal:
  1220                           	opt stack 0
  1221  000030                     	ds	4
  1222  000034                     _ticksAccounted:
  1223                           	opt stack 0
  1224  000034                     	ds	4
  1225  000038                     _ticksAdded:
  1226                           	opt stack 0
  1227  000038                     	ds	4
  1228  00003C                     TMR1_ISR@CountCallBack:
  1229                           	opt stack 0
  1230  00003C                     	ds	2
  1231  00003E                     TMR_SwapTimer@retVal:
  1232                           	opt stack 0
  1233  00003E                     	ds	2
  1234  000040                     TMR_SwapTimer@oldVal:
  1235                           	opt stack 0
  1236  000040                     	ds	2
  1237  000042                     TMR_GetDeltaTime@tmrVal:
  1238                           	opt stack 0
  1239  000042                     	ds	2
  1240  000044                     _timerOverflow:
  1241                           	opt stack 0
  1242  000044                     	ds	1
  1243  000045                     _dioStatus:
  1244                           	opt stack 0
  1245  000045                     	ds	1
  1246  000046                     __rcon:
  1247                           	opt stack 0
  1248  000046                     	ds	1
  1249  000047                     __roundCounter:
  1250                           	opt stack 0
  1251  000047                     	ds	1
  1252                           tosu	equ	0xFFF
  1253                           tosh	equ	0xFFE
  1254                           tosl	equ	0xFFD
  1255                           pclath	equ	0xFFA
  1256                           tblptru	equ	0xFF8
  1257                           tblptrh	equ	0xFF7
  1258                           tblptrl	equ	0xFF6
  1259                           tablat	equ	0xFF5
  1260                           prodh	equ	0xFF4
  1261                           prodl	equ	0xFF3
  1262                           intcon	equ	0xFF2
  1263                           indf0	equ	0xFEF
  1264                           postinc0	equ	0xFEE
  1265                           plusw0	equ	0xFEB
  1266                           fsr0h	equ	0xFEA
  1267                           fsr0l	equ	0xFE9
  1268                           wreg	equ	0xFE8
  1269                           postinc1	equ	0xFE6
  1270                           postdec1	equ	0xFE5
  1271                           plusw1	equ	0xFE3
  1272                           fsr1h	equ	0xFE2
  1273                           fsr1l	equ	0xFE1
  1274                           indf2	equ	0xFDF
  1275                           postinc2	equ	0xFDE
  1276                           postdec2	equ	0xFDD
  1277                           plusw2	equ	0xFDB
  1278                           fsr2h	equ	0xFDA
  1279                           fsr2l	equ	0xFD9
  1280                           status	equ	0xFD8
  1281                           
  1282                           	psect	dataCOMRAM
  1283  000054                     __pdataCOMRAM:
  1284                           	opt stack 0
  1285  000054                     _randx:
  1286                           	opt stack 0
  1287  000054                     	ds	4
  1288  000058                     _ticksToScheduledInterrupt:
  1289                           	opt stack 0
  1290  000058                     	ds	4
  1291                           tosu	equ	0xFFF
  1292                           tosh	equ	0xFFE
  1293                           tosl	equ	0xFFD
  1294                           pclath	equ	0xFFA
  1295                           tblptru	equ	0xFF8
  1296                           tblptrh	equ	0xFF7
  1297                           tblptrl	equ	0xFF6
  1298                           tablat	equ	0xFF5
  1299                           prodh	equ	0xFF4
  1300                           prodl	equ	0xFF3
  1301                           intcon	equ	0xFF2
  1302                           indf0	equ	0xFEF
  1303                           postinc0	equ	0xFEE
  1304                           plusw0	equ	0xFEB
  1305                           fsr0h	equ	0xFEA
  1306                           fsr0l	equ	0xFE9
  1307                           wreg	equ	0xFE8
  1308                           postinc1	equ	0xFE6
  1309                           postdec1	equ	0xFE5
  1310                           plusw1	equ	0xFE3
  1311                           fsr1h	equ	0xFE2
  1312                           fsr1l	equ	0xFE1
  1313                           indf2	equ	0xFDF
  1314                           postinc2	equ	0xFDE
  1315                           postdec2	equ	0xFDD
  1316                           plusw2	equ	0xFDB
  1317                           fsr2h	equ	0xFDA
  1318                           fsr2l	equ	0xFD9
  1319                           status	equ	0xFD8
  1320                           
  1321                           	psect	bssBANK0
  1322  0000FD                     __pbssBANK0:
  1323                           	opt stack 0
  1324  0000FD                     _reloadVal:
  1325                           	opt stack 0
  1326  0000FD                     	ds	2
  1327  0000FF                     _allocatedTimers:
  1328                           	opt stack 0
  1329  0000FF                     	ds	1
  1330                           tosu	equ	0xFFF
  1331                           tosh	equ	0xFFE
  1332                           tosl	equ	0xFFD
  1333                           pclath	equ	0xFFA
  1334                           tblptru	equ	0xFF8
  1335                           tblptrh	equ	0xFF7
  1336                           tblptrl	equ	0xFF6
  1337                           tablat	equ	0xFF5
  1338                           prodh	equ	0xFF4
  1339                           prodl	equ	0xFF3
  1340                           intcon	equ	0xFF2
  1341                           indf0	equ	0xFEF
  1342                           postinc0	equ	0xFEE
  1343                           plusw0	equ	0xFEB
  1344                           fsr0h	equ	0xFEA
  1345                           fsr0l	equ	0xFE9
  1346                           wreg	equ	0xFE8
  1347                           postinc1	equ	0xFE6
  1348                           postdec1	equ	0xFE5
  1349                           plusw1	equ	0xFE3
  1350                           fsr1h	equ	0xFE2
  1351                           fsr1l	equ	0xFE1
  1352                           indf2	equ	0xFDF
  1353                           postinc2	equ	0xFDE
  1354                           postdec2	equ	0xFDD
  1355                           plusw2	equ	0xFDB
  1356                           fsr2h	equ	0xFDA
  1357                           fsr2l	equ	0xFD9
  1358                           status	equ	0xFD8
  1359                           
  1360                           	psect	bssBANK1
  1361  000179                     __pbssBANK1:
  1362                           	opt stack 0
  1363  000179                     _rxPayload:
  1364                           	opt stack 0
  1365  000179                     	ds	4
  1366  00017D                     _JoinedServer:
  1367                           	opt stack 0
  1368  00017D                     	ds	1
  1369  00017E                     _localDioStatus:
  1370                           	opt stack 0
  1371  00017E                     	ds	1
  1372  00017F                     _RadioConfiguration:
  1373                           	opt stack 0
  1374  00017F                     	ds	54
  1375  0001B5                     _aesBuffer:
  1376                           	opt stack 0
  1377  0001B5                     	ds	16
  1378  0001C5                     _payload:
  1379                           	opt stack 0
  1380  0001C5                     	ds	2
  1381                           tosu	equ	0xFFF
  1382                           tosh	equ	0xFFE
  1383                           tosl	equ	0xFFD
  1384                           pclath	equ	0xFFA
  1385                           tblptru	equ	0xFF8
  1386                           tblptrh	equ	0xFF7
  1387                           tblptrl	equ	0xFF6
  1388                           tablat	equ	0xFF5
  1389                           prodh	equ	0xFF4
  1390                           prodl	equ	0xFF3
  1391                           intcon	equ	0xFF2
  1392                           indf0	equ	0xFEF
  1393                           postinc0	equ	0xFEE
  1394                           plusw0	equ	0xFEB
  1395                           fsr0h	equ	0xFEA
  1396                           fsr0l	equ	0xFE9
  1397                           wreg	equ	0xFE8
  1398                           postinc1	equ	0xFE6
  1399                           postdec1	equ	0xFE5
  1400                           plusw1	equ	0xFE3
  1401                           fsr1h	equ	0xFE2
  1402                           fsr1l	equ	0xFE1
  1403                           indf2	equ	0xFDF
  1404                           postinc2	equ	0xFDE
  1405                           postdec2	equ	0xFDD
  1406                           plusw2	equ	0xFDB
  1407                           fsr2h	equ	0xFDA
  1408                           fsr2l	equ	0xFD9
  1409                           status	equ	0xFD8
  1410                           
  1411                           	psect	dataBANK1
  1412  0001C7                     __pdataBANK1:
  1413                           	opt stack 0
  1414  0001C7                     GenerateSubkey@F17267:
  1415                           	opt stack 0
  1416  0001C7                     	ds	16
  1417  0001D7                     _appSKey:
  1418                           	opt stack 0
  1419  0001D7                     	ds	16
  1420  0001E7                     _nwkSKey:
  1421                           	opt stack 0
  1422  0001E7                     	ds	16
  1423                           tosu	equ	0xFFF
  1424                           tosh	equ	0xFFE
  1425                           tosl	equ	0xFFD
  1426                           pclath	equ	0xFFA
  1427                           tblptru	equ	0xFF8
  1428                           tblptrh	equ	0xFF7
  1429                           tblptrl	equ	0xFF6
  1430                           tablat	equ	0xFF5
  1431                           prodh	equ	0xFF4
  1432                           prodl	equ	0xFF3
  1433                           intcon	equ	0xFF2
  1434                           indf0	equ	0xFEF
  1435                           postinc0	equ	0xFEE
  1436                           plusw0	equ	0xFEB
  1437                           fsr0h	equ	0xFEA
  1438                           fsr0l	equ	0xFE9
  1439                           wreg	equ	0xFE8
  1440                           postinc1	equ	0xFE6
  1441                           postdec1	equ	0xFE5
  1442                           plusw1	equ	0xFE3
  1443                           fsr1h	equ	0xFE2
  1444                           fsr1l	equ	0xFE1
  1445                           indf2	equ	0xFDF
  1446                           postinc2	equ	0xFDE
  1447                           postdec2	equ	0xFDD
  1448                           plusw2	equ	0xFDB
  1449                           fsr2h	equ	0xFDA
  1450                           fsr2l	equ	0xFD9
  1451                           status	equ	0xFD8
  1452                           
  1453                           	psect	bssBANK2
  1454  000200                     __pbssBANK2:
  1455                           	opt stack 0
  1456  000200                     _loRa:
  1457                           	opt stack 0
  1458  000200                     	ds	245
  1459                           tosu	equ	0xFFF
  1460                           tosh	equ	0xFFE
  1461                           tosl	equ	0xFFD
  1462                           pclath	equ	0xFFA
  1463                           tblptru	equ	0xFF8
  1464                           tblptrh	equ	0xFF7
  1465                           tblptrl	equ	0xFF6
  1466                           tablat	equ	0xFF5
  1467                           prodh	equ	0xFF4
  1468                           prodl	equ	0xFF3
  1469                           intcon	equ	0xFF2
  1470                           indf0	equ	0xFEF
  1471                           postinc0	equ	0xFEE
  1472                           plusw0	equ	0xFEB
  1473                           fsr0h	equ	0xFEA
  1474                           fsr0l	equ	0xFE9
  1475                           wreg	equ	0xFE8
  1476                           postinc1	equ	0xFE6
  1477                           postdec1	equ	0xFE5
  1478                           plusw1	equ	0xFE3
  1479                           fsr1h	equ	0xFE2
  1480                           fsr1l	equ	0xFE1
  1481                           indf2	equ	0xFDF
  1482                           postinc2	equ	0xFDE
  1483                           postdec2	equ	0xFDD
  1484                           plusw2	equ	0xFDB
  1485                           fsr2h	equ	0xFDA
  1486                           fsr2l	equ	0xFD9
  1487                           status	equ	0xFD8
  1488                           
  1489                           	psect	bssBANK3
  1490  000300                     __pbssBANK3:
  1491                           	opt stack 0
  1492  000300                     _swTimers:
  1493                           	opt stack 0
  1494  000300                     	ds	160
  1495                           tosu	equ	0xFFF
  1496                           tosh	equ	0xFFE
  1497                           tosl	equ	0xFFD
  1498                           pclath	equ	0xFFA
  1499                           tblptru	equ	0xFF8
  1500                           tblptrh	equ	0xFF7
  1501                           tblptrl	equ	0xFF6
  1502                           tablat	equ	0xFF5
  1503                           prodh	equ	0xFF4
  1504                           prodl	equ	0xFF3
  1505                           intcon	equ	0xFF2
  1506                           indf0	equ	0xFEF
  1507                           postinc0	equ	0xFEE
  1508                           plusw0	equ	0xFEB
  1509                           fsr0h	equ	0xFEA
  1510                           fsr0l	equ	0xFE9
  1511                           wreg	equ	0xFE8
  1512                           postinc1	equ	0xFE6
  1513                           postdec1	equ	0xFE5
  1514                           plusw1	equ	0xFE3
  1515                           fsr1h	equ	0xFE2
  1516                           fsr1l	equ	0xFE1
  1517                           indf2	equ	0xFDF
  1518                           postinc2	equ	0xFDE
  1519                           postdec2	equ	0xFDD
  1520                           plusw2	equ	0xFDB
  1521                           fsr2h	equ	0xFDA
  1522                           fsr2l	equ	0xFD9
  1523                           status	equ	0xFD8
  1524                           
  1525                           	psect	bssBANK4
  1526  000400                     __pbssBANK4:
  1527                           	opt stack 0
  1528  000400                     _Channels:
  1529                           	opt stack 0
  1530  000400                     	ds	224
  1531                           tosu	equ	0xFFF
  1532                           tosh	equ	0xFFE
  1533                           tosl	equ	0xFFD
  1534                           pclath	equ	0xFFA
  1535                           tblptru	equ	0xFF8
  1536                           tblptrh	equ	0xFF7
  1537                           tblptrl	equ	0xFF6
  1538                           tablat	equ	0xFF5
  1539                           prodh	equ	0xFF4
  1540                           prodl	equ	0xFF3
  1541                           intcon	equ	0xFF2
  1542                           indf0	equ	0xFEF
  1543                           postinc0	equ	0xFEE
  1544                           plusw0	equ	0xFEB
  1545                           fsr0h	equ	0xFEA
  1546                           fsr0l	equ	0xFE9
  1547                           wreg	equ	0xFE8
  1548                           postinc1	equ	0xFE6
  1549                           postdec1	equ	0xFE5
  1550                           plusw1	equ	0xFE3
  1551                           fsr1h	equ	0xFE2
  1552                           fsr1l	equ	0xFE1
  1553                           indf2	equ	0xFDF
  1554                           postinc2	equ	0xFDE
  1555                           postdec2	equ	0xFDD
  1556                           plusw2	equ	0xFDB
  1557                           fsr2h	equ	0xFDA
  1558                           fsr2l	equ	0xFD9
  1559                           status	equ	0xFD8
  1560                           
  1561                           	psect	bssBIGRAM
  1562  0004E0                     __pbssBIGRAM:
  1563                           	opt stack 0
  1564  0004E0                     _radioBuffer:
  1565                           	opt stack 0
  1566  0004E0                     	ds	271
  1567  0005EF                     _macBuffer:
  1568                           	opt stack 0
  1569  0005EF                     	ds	271
  1570                           tosu	equ	0xFFF
  1571                           tosh	equ	0xFFE
  1572                           tosl	equ	0xFFD
  1573                           pclath	equ	0xFFA
  1574                           tblptru	equ	0xFF8
  1575                           tblptrh	equ	0xFF7
  1576                           tblptrl	equ	0xFF6
  1577                           tablat	equ	0xFF5
  1578                           prodh	equ	0xFF4
  1579                           prodl	equ	0xFF3
  1580                           intcon	equ	0xFF2
  1581                           indf0	equ	0xFEF
  1582                           postinc0	equ	0xFEE
  1583                           plusw0	equ	0xFEB
  1584                           fsr0h	equ	0xFEA
  1585                           fsr0l	equ	0xFE9
  1586                           wreg	equ	0xFE8
  1587                           postinc1	equ	0xFE6
  1588                           postdec1	equ	0xFE5
  1589                           plusw1	equ	0xFE3
  1590                           fsr1h	equ	0xFE2
  1591                           fsr1l	equ	0xFE1
  1592                           indf2	equ	0xFDF
  1593                           postinc2	equ	0xFDE
  1594                           postdec2	equ	0xFDD
  1595                           plusw2	equ	0xFDB
  1596                           fsr2h	equ	0xFDA
  1597                           fsr2l	equ	0xFD9
  1598                           status	equ	0xFD8
  1599                           
  1600                           	psect	cstackBANK1
  1601  000100                     __pcstackBANK1:
  1602                           	opt stack 0
  1603  000100                     AESCmac@k2:
  1604                           	opt stack 0
  1605                           
  1606                           ; 16 bytes @ 0x0
  1607  000100                     	ds	16
  1608  000110                     AESCmac@k1:
  1609                           	opt stack 0
  1610                           
  1611                           ; 16 bytes @ 0x10
  1612  000110                     	ds	16
  1613  000120                     AESCmac@mLast:
  1614                           	opt stack 0
  1615                           
  1616                           ; 16 bytes @ 0x20
  1617  000120                     	ds	16
  1618  000130                     AESCmac@padded:
  1619                           	opt stack 0
  1620                           
  1621                           ; 16 bytes @ 0x30
  1622  000130                     	ds	16
  1623  000140                     AESCmac@y:
  1624                           	opt stack 0
  1625                           
  1626                           ; 16 bytes @ 0x40
  1627  000140                     	ds	16
  1628  000150                     AESCmac@x:
  1629                           	opt stack 0
  1630                           
  1631                           ; 16 bytes @ 0x50
  1632  000150                     	ds	16
  1633  000160                     AESCmac@ptr:
  1634                           	opt stack 0
  1635                           
  1636                           ; 2 bytes @ 0x60
  1637  000160                     	ds	2
  1638  000162                     AESCmac@flag:
  1639                           	opt stack 0
  1640                           
  1641                           ; 1 bytes @ 0x62
  1642  000162                     	ds	1
  1643  000163                     AESCmac@n:
  1644                           	opt stack 0
  1645                           
  1646                           ; 1 bytes @ 0x63
  1647  000163                     	ds	1
  1648  000164                     AESCmac@j:
  1649                           	opt stack 0
  1650                           
  1651                           ; 1 bytes @ 0x64
  1652  000164                     	ds	1
  1653  000165                     AESCmac@i:
  1654                           	opt stack 0
  1655                           
  1656                           ; 1 bytes @ 0x65
  1657  000165                     	ds	1
  1658  000166                     ?_ComputeMic:
  1659                           	opt stack 0
  1660  000166                     AssemblePacket@port:
  1661                           	opt stack 0
  1662  000166                     ComputeMic@key:
  1663                           	opt stack 0
  1664                           
  1665                           ; 2 bytes @ 0x66
  1666  000166                     	ds	1
  1667  000167                     AssemblePacket@buffer:
  1668                           	opt stack 0
  1669                           
  1670                           ; 2 bytes @ 0x67
  1671  000167                     	ds	1
  1672  000168                     ComputeMic@buffer:
  1673                           	opt stack 0
  1674                           
  1675                           ; 2 bytes @ 0x68
  1676  000168                     	ds	1
  1677  000169                     AssemblePacket@bufferLength:
  1678                           	opt stack 0
  1679                           
  1680                           ; 2 bytes @ 0x69
  1681  000169                     	ds	1
  1682  00016A                     ComputeMic@bufferLength:
  1683                           	opt stack 0
  1684                           
  1685                           ; 1 bytes @ 0x6A
  1686  00016A                     	ds	1
  1687  00016B                     LORAWAN_Send@port:
  1688                           	opt stack 0
  1689                           
  1690                           ; 1 bytes @ 0x6B
  1691  00016B                     	ds	1
  1692  00016C                     LORAWAN_Send@buffer:
  1693                           	opt stack 0
  1694                           
  1695                           ; 2 bytes @ 0x6C
  1696  00016C                     	ds	2
  1697  00016E                     LORAWAN_Send@bufferLength:
  1698                           	opt stack 0
  1699                           
  1700                           ; 1 bytes @ 0x6E
  1701  00016E                     	ds	1
  1702  00016F                     LORAWAN_RxDone@buffer:
  1703                           	opt stack 0
  1704                           
  1705                           ; 2 bytes @ 0x6F
  1706  00016F                     	ds	2
  1707  000171                     LORAWAN_RxDone@bufferLength:
  1708                           	opt stack 0
  1709                           
  1710                           ; 1 bytes @ 0x71
  1711  000171                     	ds	1
  1712  000172                     RADIO_DIO0@dioMapping:
  1713                           	opt stack 0
  1714                           
  1715                           ; 1 bytes @ 0x72
  1716  000172                     	ds	1
  1717  000173                     RADIO_DIO0@opMode:
  1718                           	opt stack 0
  1719                           
  1720                           ; 1 bytes @ 0x73
  1721  000173                     	ds	1
  1722  000174                     ??_main:
  1723                           
  1724                           ; 1 bytes @ 0x74
  1725  000174                     	ds	1
  1726  000175                     main@flag:
  1727                           	opt stack 0
  1728                           
  1729                           ; 2 bytes @ 0x75
  1730  000175                     	ds	2
  1731  000177                     main@x:
  1732                           	opt stack 0
  1733                           
  1734                           ; 2 bytes @ 0x77
  1735  000177                     	ds	2
  1736                           tosu	equ	0xFFF
  1737                           tosh	equ	0xFFE
  1738                           tosl	equ	0xFFD
  1739                           pclath	equ	0xFFA
  1740                           tblptru	equ	0xFF8
  1741                           tblptrh	equ	0xFF7
  1742                           tblptrl	equ	0xFF6
  1743                           tablat	equ	0xFF5
  1744                           prodh	equ	0xFF4
  1745                           prodl	equ	0xFF3
  1746                           intcon	equ	0xFF2
  1747                           indf0	equ	0xFEF
  1748                           postinc0	equ	0xFEE
  1749                           plusw0	equ	0xFEB
  1750                           fsr0h	equ	0xFEA
  1751                           fsr0l	equ	0xFE9
  1752                           wreg	equ	0xFE8
  1753                           postinc1	equ	0xFE6
  1754                           postdec1	equ	0xFE5
  1755                           plusw1	equ	0xFE3
  1756                           fsr1h	equ	0xFE2
  1757                           fsr1l	equ	0xFE1
  1758                           indf2	equ	0xFDF
  1759                           postinc2	equ	0xFDE
  1760                           postdec2	equ	0xFDD
  1761                           plusw2	equ	0xFDB
  1762                           fsr2h	equ	0xFDA
  1763                           fsr2l	equ	0xFD9
  1764                           status	equ	0xFD8
  1765                           
  1766                           	psect	cstackBANK0
  1767  000060                     __pcstackBANK0:
  1768                           	opt stack 0
  1769  000060                     ??_FindSmallestDataRate:
  1770  000060                     ??_CountfOptsLength:
  1771  000060                     ??_flash:
  1772  000060                     ??_UpdateMinMaxChDataRate:
  1773  000060                     ?_ExecuteLinkCheck:
  1774                           	opt stack 0
  1775  000060                     ?_ExecuteDutyCycle:
  1776                           	opt stack 0
  1777  000060                     ?_ExecuteDevStatus:
  1778                           	opt stack 0
  1779  000060                     ?_TMR1_ReadTimer:
  1780                           	opt stack 0
  1781  000060                     ?___wmul:
  1782                           	opt stack 0
  1783  000060                     ?_GetRx1Freq:
  1784                           	opt stack 0
  1785  000060                     ?___lldiv:
  1786                           	opt stack 0
  1787  000060                     ?___llmod:
  1788                           	opt stack 0
  1789  000060                     EncKeySchedule@key:
  1790                           	opt stack 0
  1791  000060                     INTERRUPT_GetDioStatus@a:
  1792                           	opt stack 0
  1793  000060                     UpdateCurrentDataRate@valueNew:
  1794                           	opt stack 0
  1795  000060                     UpdateTxPower@txPowerNew:
  1796                           	opt stack 0
  1797  000060                     UpdateJoinInProgress@state:
  1798                           	opt stack 0
  1799  000060                     ValidateDataRate@dataRate:
  1800                           	opt stack 0
  1801  000060                     ValidateTxPower@result:
  1802                           	opt stack 0
  1803  000060                     UpdateDLSettings@dlRx1DrOffset:
  1804                           	opt stack 0
  1805  000060                     UpdateDataRange@dataRangeNew:
  1806                           	opt stack 0
  1807  000060                     UpdateChannelIdStatus@statusNew:
  1808                           	opt stack 0
  1809  000060                     ValidateRxOffset@rxOffset:
  1810                           	opt stack 0
  1811  000060                     ValidateChannelId@allowedForDefaultChannels:
  1812                           	opt stack 0
  1813  000060                     ValidateChannelMaskCntl@result:
  1814                           	opt stack 0
  1815  000060                     HALResetPinOutputValue@value:
  1816                           	opt stack 0
  1817  000060                     RADIO_SetLoRaSyncWord@syncWord:
  1818                           	opt stack 0
  1819  000060                     RADIO_SetSpreadingFactor@spreadingFactor:
  1820                           	opt stack 0
  1821  000060                     RADIO_SetOutputPower@power:
  1822                           	opt stack 0
  1823  000060                     RADIO_SetCRC@crc:
  1824                           	opt stack 0
  1825  000060                     RADIO_SetIQInverted@iqInverted:
  1826                           	opt stack 0
  1827  000060                     RADIO_SetBandwidth@bandwidth:
  1828                           	opt stack 0
  1829  000060                     RADIO_SetModulation@modulation:
  1830                           	opt stack 0
  1831  000060                     SwTimerCreate@retVal:
  1832                           	opt stack 0
  1833  000060                     SwTimerIsRunning@timerId:
  1834                           	opt stack 0
  1835  000060                     SwTimerStop@timerId:
  1836                           	opt stack 0
  1837  000060                     SPI2_Exchange8bit@data:
  1838                           	opt stack 0
  1839  000060                     ___abdiv@divisor:
  1840                           	opt stack 0
  1841  000060                     EncodeShiftRow@stateTable:
  1842                           	opt stack 0
  1843  000060                     ExecuteLinkCheck@ptr:
  1844                           	opt stack 0
  1845  000060                     IncludeMacCommandsResponse@macBuffer:
  1846                           	opt stack 0
  1847  000060                     CheckFlags@hdr:
  1848                           	opt stack 0
  1849  000060                     CheckMcastFlags@hdr:
  1850                           	opt stack 0
  1851  000060                     FillSubKey@source:
  1852                           	opt stack 0
  1853  000060                     ExecuteDutyCycle@ptr:
  1854                           	opt stack 0
  1855  000060                     ExecuteDevStatus@ptr:
  1856                           	opt stack 0
  1857  000060                     UpdateDutyCycle@dutyCycleNew:
  1858                           	opt stack 0
  1859  000060                     ValidateChannelMask@channelMask:
  1860                           	opt stack 0
  1861  000060                     RADIO_SetFrequencyHopPeriod@frequencyHopPeriod:
  1862                           	opt stack 0
  1863  000060                     SwTimerSetCallback@callback:
  1864                           	opt stack 0
  1865  000060                     INT1_SetInterruptHandler@InterruptHandler:
  1866                           	opt stack 0
  1867  000060                     INT2_SetInterruptHandler@InterruptHandler:
  1868                           	opt stack 0
  1869  000060                     INT0_SetInterruptHandler@InterruptHandler:
  1870                           	opt stack 0
  1871  000060                     INT3_SetInterruptHandler@InterruptHandler:
  1872                           	opt stack 0
  1873  000060                     TMR1_WriteTimer@timerVal:
  1874                           	opt stack 0
  1875  000060                     TMR1_SetInterruptHandler@InterruptHandler:
  1876                           	opt stack 0
  1877  000060                     IOCBF4_SetInterruptHandler@InterruptHandler:
  1878                           	opt stack 0
  1879  000060                     RxDataDone@pData:
  1880                           	opt stack 0
  1881  000060                     ___wmul@multiplier:
  1882                           	opt stack 0
  1883  000060                     memcpy@d1:
  1884                           	opt stack 0
  1885  000060                     memset@p1:
  1886                           	opt stack 0
  1887  000060                     LORAWAN_SetDeviceAddress@deviceAddressNew:
  1888                           	opt stack 0
  1889  000060                     UpdateReceiveWindow2Parameters@frequency:
  1890                           	opt stack 0
  1891  000060                     ValidateFrequency@frequencyNew:
  1892                           	opt stack 0
  1893  000060                     UpdateFrequency@frequencyNew:
  1894                           	opt stack 0
  1895  000060                     RADIO_SetChannelFrequency@frequency:
  1896                           	opt stack 0
  1897  000060                     SystemBlockingWaitMs@ms:
  1898                           	opt stack 0
  1899  000060                     ___lldiv@dividend:
  1900                           	opt stack 0
  1901  000060                     ___llmod@dividend:
  1902                           	opt stack 0
  1903                           
  1904                           ; 4 bytes @ 0x0
  1905  000060                     	ds	1
  1906  000061                     ??_UpdateDataRange:
  1907  000061                     ??_UpdateChannelIdStatus:
  1908  000061                     ??_EncKeySchedule:
  1909  000061                     UpdateMinMaxChDataRate@i:
  1910                           	opt stack 0
  1911  000061                     FindSmallestDataRate@found:
  1912                           	opt stack 0
  1913  000061                     ValidateDataRate@result:
  1914                           	opt stack 0
  1915  000061                     ValidateTxPower@txPowerNew:
  1916                           	opt stack 0
  1917  000061                     UpdateDLSettings@dlRx2Dr:
  1918                           	opt stack 0
  1919  000061                     ValidateRxOffset@result:
  1920                           	opt stack 0
  1921  000061                     ValidateChannelId@result:
  1922                           	opt stack 0
  1923  000061                     ValidateChannelMaskCntl@channelMaskCntl:
  1924                           	opt stack 0
  1925  000061                     HALSPISend@data:
  1926                           	opt stack 0
  1927  000061                     SwTimerIsRunning@isRunning:
  1928                           	opt stack 0
  1929  000061                     flash@x:
  1930                           	opt stack 0
  1931  000061                     ___abdiv@counter:
  1932                           	opt stack 0
  1933                           
  1934                           ; 1 bytes @ 0x1
  1935  000061                     	ds	1
  1936  000062                     ??_ExecuteDutyCycle:
  1937  000062                     ??_TMR1_ReadTimer:
  1938  000062                     ??_TMR1_Initialize:
  1939  000062                     EncodeShiftRow@temp:
  1940                           	opt stack 0
  1941  000062                     IncludeMacCommandsResponse@pBufferIndex:
  1942                           	opt stack 0
  1943  000062                     FindSmallestDataRate@i:
  1944                           	opt stack 0
  1945  000062                     UpdateDataRange@channelId:
  1946                           	opt stack 0
  1947  000062                     UpdateChannelIdStatus@channelId:
  1948                           	opt stack 0
  1949  000062                     ValidateDataRange@result:
  1950                           	opt stack 0
  1951  000062                     ValidateChannelId@channelId:
  1952                           	opt stack 0
  1953  000062                     UpdateDutyCycle@channelId:
  1954                           	opt stack 0
  1955  000062                     ValidateChannelMask@i:
  1956                           	opt stack 0
  1957  000062                     RADIO_RegisterWrite@value:
  1958                           	opt stack 0
  1959  000062                     RADIO_RegisterRead@reg:
  1960                           	opt stack 0
  1961  000062                     SwTimerSetCallback@callbackParameter:
  1962                           	opt stack 0
  1963  000062                     PIN_MANAGER_Initialize@state:
  1964                           	opt stack 0
  1965  000062                     RxDataDone@dataLength:
  1966                           	opt stack 0
  1967  000062                     ___abdiv@sign:
  1968                           	opt stack 0
  1969  000062                     FillSubKey@key:
  1970                           	opt stack 0
  1971  000062                     ___wmul@multiplicand:
  1972                           	opt stack 0
  1973  000062                     memcpy@s1:
  1974                           	opt stack 0
  1975  000062                     memset@c:
  1976                           	opt stack 0
  1977                           
  1978                           ; 2 bytes @ 0x2
  1979  000062                     	ds	1
  1980  000063                     IncludeMacCommandsResponse@bIncludeInFopts:
  1981                           	opt stack 0
  1982  000063                     FindSmallestDataRate@dataRate:
  1983                           	opt stack 0
  1984  000063                     UpdateDataRange@i:
  1985                           	opt stack 0
  1986  000063                     UpdateChannelIdStatus@i:
  1987                           	opt stack 0
  1988  000063                     ValidateDataRange@dataRangeNew:
  1989                           	opt stack 0
  1990  000063                     RADIO_RegisterWrite@reg:
  1991                           	opt stack 0
  1992  000063                     RADIO_RegisterRead@readValue:
  1993                           	opt stack 0
  1994  000063                     SwTimerSetCallback@timerId:
  1995                           	opt stack 0
  1996  000063                     RxDataDone@status:
  1997                           	opt stack 0
  1998  000063                     ___abdiv@quotient:
  1999                           	opt stack 0
  2000                           
  2001                           ; 1 bytes @ 0x3
  2002  000063                     	ds	1
  2003  000064                     ??_IncludeMacCommandsResponse:
  2004  000064                     ??_SystemBlockingWaitMs:
  2005  000064                     UpdateReceiveWindow2Parameters@dataRate:
  2006                           	opt stack 0
  2007  000064                     FillSubKey@size:
  2008                           	opt stack 0
  2009  000064                     LORAWAN_SetChannelIdStatus@statusNew:
  2010                           	opt stack 0
  2011  000064                     ValidateFrequency@result:
  2012                           	opt stack 0
  2013  000064                     ValidateDataRange@dataRateMax:
  2014                           	opt stack 0
  2015  000064                     UpdateFrequency@channelId:
  2016                           	opt stack 0
  2017  000064                     RADIO_WritePower@ocp:
  2018                           	opt stack 0
  2019  000064                     RADIO_UnhandledInterrupt@modulation:
  2020                           	opt stack 0
  2021  000064                     ___abdiv@dividend:
  2022                           	opt stack 0
  2023  000064                     _EncKeySchedule$26:
  2024                           	opt stack 0
  2025  000064                     EnableChannels1@channelMask:
  2026                           	opt stack 0
  2027  000064                     TMR1_ReadTimer@readVal:
  2028                           	opt stack 0
  2029  000064                     ___wmul@product:
  2030                           	opt stack 0
  2031  000064                     memcpy@n:
  2032                           	opt stack 0
  2033  000064                     memset@n:
  2034                           	opt stack 0
  2035  000064                     ___lldiv@divisor:
  2036                           	opt stack 0
  2037  000064                     ___llmod@divisor:
  2038                           	opt stack 0
  2039                           
  2040                           ; 4 bytes @ 0x4
  2041  000064                     	ds	1
  2042  000065                     ??_RADIO_DIO3:
  2043  000065                     ??_RADIO_DIO4:
  2044  000065                     ??_RADIO_DIO5:
  2045  000065                     ??_FillSubKey:
  2046  000065                     ExecuteDutyCycle@maxDCycle:
  2047                           	opt stack 0
  2048  000065                     ValidateDataRange@dataRateMin:
  2049                           	opt stack 0
  2050  000065                     RADIO_WriteMode@newModulation:
  2051                           	opt stack 0
  2052  000065                     RADIO_WritePower@paDac:
  2053                           	opt stack 0
  2054                           
  2055                           ; 1 bytes @ 0x5
  2056  000065                     	ds	1
  2057  000066                     ?_TMR_SwapTimer:
  2058                           	opt stack 0
  2059  000066                     ?_TMR_GetDeltaTime:
  2060                           	opt stack 0
  2061  000066                     UpdateReceiveDelays@delay:
  2062                           	opt stack 0
  2063  000066                     CountfOptsLength@macCommandLength:
  2064                           	opt stack 0
  2065  000066                     FillSubKey@carry:
  2066                           	opt stack 0
  2067  000066                     LORAWAN_SetChannelIdStatus@channelId:
  2068                           	opt stack 0
  2069  000066                     EnableChannels1@channelMaskCntl:
  2070                           	opt stack 0
  2071  000066                     RADIO_WriteMode@blocking:
  2072                           	opt stack 0
  2073  000066                     RADIO_WritePower@power:
  2074                           	opt stack 0
  2075  000066                     AESEncode@block:
  2076                           	opt stack 0
  2077  000066                     TMR_SwapTimer@timerVal:
  2078                           	opt stack 0
  2079  000066                     memcpy@d:
  2080                           	opt stack 0
  2081  000066                     memset@p:
  2082                           	opt stack 0
  2083                           
  2084                           ; 2 bytes @ 0x6
  2085  000066                     	ds	1
  2086  000067                     ?_ExecuteRxTimingSetup:
  2087                           	opt stack 0
  2088  000067                     CountfOptsLength@i:
  2089                           	opt stack 0
  2090  000067                     FillSubKey@i:
  2091                           	opt stack 0
  2092  000067                     EnableChannels1@channelIndexMin:
  2093                           	opt stack 0
  2094  000067                     RADIO_WriteMode@currentModulation:
  2095                           	opt stack 0
  2096  000067                     ExecuteRxTimingSetup@ptr:
  2097                           	opt stack 0
  2098                           
  2099                           ; 2 bytes @ 0x7
  2100  000067                     	ds	1
  2101  000068                     ??_LORAWAN_GetMaxPayloadSize:
  2102  000068                     AESEncode@masterKey:
  2103                           	opt stack 0
  2104  000068                     EnableChannels1@channelIndexMax:
  2105                           	opt stack 0
  2106  000068                     RADIO_WriteMode@dioMapping:
  2107                           	opt stack 0
  2108  000068                     ___llmod@counter:
  2109                           	opt stack 0
  2110  000068                     memcpy@s:
  2111                           	opt stack 0
  2112  000068                     TMR_OverrideRemaining@ticksRemaining:
  2113                           	opt stack 0
  2114  000068                     ___lldiv@quotient:
  2115                           	opt stack 0
  2116                           
  2117                           ; 4 bytes @ 0x8
  2118  000068                     	ds	1
  2119  000069                     ??_AESEncode:
  2120  000069                     LORAWAN_GetMaxPayloadSize@macCommandsLength:
  2121                           	opt stack 0
  2122  000069                     ExecuteRxTimingSetup@delay:
  2123                           	opt stack 0
  2124  000069                     EnableChannels1@i:
  2125                           	opt stack 0
  2126  000069                     RADIO_WriteMode@currentMode:
  2127                           	opt stack 0
  2128                           
  2129                           ; 1 bytes @ 0x9
  2130  000069                     	ds	1
  2131  00006A                     ??_TMR_GetDeltaTime:
  2132  00006A                     ?_ExtractMic:
  2133                           	opt stack 0
  2134  00006A                     LORAWAN_GetMaxPayloadSize@result:
  2135                           	opt stack 0
  2136  00006A                     IncludeMacCommandsResponse@i:
  2137                           	opt stack 0
  2138  00006A                     InitDefault868Channels@i:
  2139                           	opt stack 0
  2140  00006A                     InitDefault433Channels@i:
  2141                           	opt stack 0
  2142  00006A                     RADIO_WriteMode@newMode:
  2143                           	opt stack 0
  2144  00006A                     LORAWAN_SetNetworkSessionKey@networkSessionKeyNew:
  2145                           	opt stack 0
  2146  00006A                     LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew:
  2147                           	opt stack 0
  2148  00006A                     PrepareSessionKeys@sessionKey:
  2149                           	opt stack 0
  2150  00006A                     ExtractMic@buffer:
  2151                           	opt stack 0
  2152  00006A                     EnableChannels@channelMask:
  2153                           	opt stack 0
  2154  00006A                     RADIO_SetFSKSyncWord@syncWord:
  2155                           	opt stack 0
  2156  00006A                     AssembleEncryptionBlock@frameCounter:
  2157                           	opt stack 0
  2158                           
  2159                           ; 4 bytes @ 0xA
  2160  00006A                     	ds	1
  2161  00006B                     IncludeMacCommandsResponse@bufferIndex:
  2162                           	opt stack 0
  2163  00006B                     RADIO_WriteMode@opMode:
  2164                           	opt stack 0
  2165                           
  2166                           ; 1 bytes @ 0xB
  2167  00006B                     	ds	1
  2168  00006C                     ??_TMR_OverrideRemaining:
  2169  00006C                     ?_RADIO_ReadRandom:
  2170                           	opt stack 0
  2171  00006C                     ExtractMic@bufferLength:
  2172                           	opt stack 0
  2173  00006C                     EnableChannels@channelMaskCntl:
  2174                           	opt stack 0
  2175  00006C                     RADIO_SetFSKSyncWord@syncWordLen:
  2176                           	opt stack 0
  2177  00006C                     ___lldiv@counter:
  2178                           	opt stack 0
  2179  00006C                     PrepareSessionKeys@appNonce:
  2180                           	opt stack 0
  2181                           
  2182                           ; 2 bytes @ 0xC
  2183  00006C                     	ds	1
  2184  00006D                     ?_ExecuteLinkAdr:
  2185                           	opt stack 0
  2186  00006D                     ExecuteLinkAdr@ptr:
  2187                           	opt stack 0
  2188  00006D                     ConfigureRadio@freq:
  2189                           	opt stack 0
  2190  00006D                     RADIO_WriteFrequency@frequency:
  2191                           	opt stack 0
  2192  00006D                     RADIO_WriteFSKFrequencyDeviation@frequencyDeviation:
  2193                           	opt stack 0
  2194  00006D                     RADIO_WriteFSKBitRate@bitRate:
  2195                           	opt stack 0
  2196  00006D                     SwTimerSetTimeout@timeout:
  2197                           	opt stack 0
  2198                           
  2199                           ; 4 bytes @ 0xD
  2200  00006D                     	ds	1
  2201  00006E                     ??_ExtractMic:
  2202  00006E                     AssembleEncryptionBlock@blockId:
  2203                           	opt stack 0
  2204  00006E                     PrepareSessionKeys@networkId:
  2205                           	opt stack 0
  2206  00006E                     RADIO_ReadRandom@retVal:
  2207                           	opt stack 0
  2208  00006E                     TMR_OverrideRemaining@tmrVal:
  2209                           	opt stack 0
  2210                           
  2211                           ; 2 bytes @ 0xE
  2212  00006E                     	ds	1
  2213  00006F                     ??_ExecuteLinkAdr:
  2214  00006F                     AssembleEncryptionBlock@firstByte:
  2215                           	opt stack 0
  2216                           
  2217                           ; 1 bytes @ 0xF
  2218  00006F                     	ds	1
  2219  000070                     PrepareSessionKeys@index:
  2220                           	opt stack 0
  2221  000070                     AssembleEncryptionBlock@multicastStatus:
  2222                           	opt stack 0
  2223  000070                     RADIO_ReadRandom@i:
  2224                           	opt stack 0
  2225  000070                     ExecuteLinkAdr@channelMask:
  2226                           	opt stack 0
  2227  000070                     TMR_OverrideRemaining@oldReloadVal:
  2228                           	opt stack 0
  2229  000070                     ExtractMic@mic:
  2230                           	opt stack 0
  2231                           
  2232                           ; 4 bytes @ 0x10
  2233  000070                     	ds	1
  2234  000071                     ??_SwTimerSetTimeout:
  2235  000071                     AssembleEncryptionBlock@dir:
  2236                           	opt stack 0
  2237  000071                     ConfigureRadio@dataRate:
  2238                           	opt stack 0
  2239  000071                     srand@x:
  2240                           	opt stack 0
  2241  000071                     RADIO_WriteFrequency@num_mod:
  2242                           	opt stack 0
  2243  000071                     RADIO_WriteFSKFrequencyDeviation@num:
  2244                           	opt stack 0
  2245  000071                     RADIO_WriteFSKBitRate@num:
  2246                           	opt stack 0
  2247  000071                     AESEncode@key:
  2248                           	opt stack 0
  2249                           
  2250                           ; 16 bytes @ 0x11
  2251  000071                     	ds	1
  2252  000072                     AssembleEncryptionBlock@bufferIndex:
  2253                           	opt stack 0
  2254  000072                     ExecuteLinkAdr@txPower:
  2255                           	opt stack 0
  2256  000072                     ConfigureRadioRx@freq:
  2257                           	opt stack 0
  2258  000072                     ConfigureRadioTx@freq:
  2259                           	opt stack 0
  2260                           
  2261                           ; 4 bytes @ 0x12
  2262  000072                     	ds	1
  2263  000073                     ExecuteLinkAdr@redundancy:
  2264                           	opt stack 0
  2265                           
  2266                           ; 2 bytes @ 0x13
  2267  000073                     	ds	2
  2268  000075                     ExecuteLinkAdr@dataRate:
  2269                           	opt stack 0
  2270  000075                     SwTimerSetTimeout@timerId:
  2271                           	opt stack 0
  2272  000075                     RADIO_WriteFrequency@num:
  2273                           	opt stack 0
  2274                           
  2275                           ; 4 bytes @ 0x15
  2276  000075                     	ds	1
  2277  000076                     ?_SwTimersInterrupt:
  2278                           	opt stack 0
  2279  000076                     ConfigureRadioRx@dataRate:
  2280                           	opt stack 0
  2281  000076                     ConfigureRadioTx@dataRate:
  2282                           	opt stack 0
  2283                           
  2284                           ; 1 bytes @ 0x16
  2285  000076                     	ds	1
  2286  000077                     ConfigureRadioTx@txPower:
  2287                           	opt stack 0
  2288                           
  2289                           ; 1 bytes @ 0x17
  2290  000077                     	ds	2
  2291  000079                     ??_RADIO_DIO2:
  2292  000079                     RADIO_Init@radioBuffer:
  2293                           	opt stack 0
  2294                           
  2295                           ; 2 bytes @ 0x19
  2296  000079                     	ds	1
  2297  00007A                     RADIO_DIO2@dioMapping:
  2298                           	opt stack 0
  2299                           
  2300                           ; 1 bytes @ 0x1A
  2301  00007A                     	ds	1
  2302  00007B                     RADIO_Init@frequency:
  2303                           	opt stack 0
  2304                           
  2305                           ; 4 bytes @ 0x1B
  2306  00007B                     	ds	3
  2307  00007E                     SwTimersInterrupt@timeElapsed:
  2308                           	opt stack 0
  2309                           
  2310                           ; 4 bytes @ 0x1E
  2311  00007E                     	ds	1
  2312  00007F                     ??_RADIO_Init:
  2313                           
  2314                           ; 1 bytes @ 0x1F
  2315  00007F                     	ds	2
  2316  000081                     _AESEncode$40:
  2317                           	opt stack 0
  2318                           
  2319                           ; 2 bytes @ 0x21
  2320  000081                     	ds	1
  2321  000082                     SwTimersInterrupt@ticksToNextTimerEvent:
  2322                           	opt stack 0
  2323                           
  2324                           ; 4 bytes @ 0x22
  2325  000082                     	ds	1
  2326  000083                     _AESEncode$41:
  2327                           	opt stack 0
  2328                           
  2329                           ; 2 bytes @ 0x23
  2330  000083                     	ds	2
  2331  000085                     _AESEncode$42:
  2332                           	opt stack 0
  2333                           
  2334                           ; 2 bytes @ 0x25
  2335  000085                     	ds	1
  2336  000086                     SwTimersInterrupt@i:
  2337                           	opt stack 0
  2338                           
  2339                           ; 1 bytes @ 0x26
  2340  000086                     	ds	1
  2341  000087                     ?_SwTimerReadValue:
  2342                           	opt stack 0
  2343  000087                     AESEncode@aux:
  2344                           	opt stack 0
  2345                           
  2346                           ; 1 bytes @ 0x27
  2347  000087                     	ds	1
  2348  000088                     AESEncode@aux2:
  2349                           	opt stack 0
  2350                           
  2351                           ; 1 bytes @ 0x28
  2352  000088                     	ds	1
  2353  000089                     AESEncode@aux1:
  2354                           	opt stack 0
  2355                           
  2356                           ; 1 bytes @ 0x29
  2357  000089                     	ds	1
  2358  00008A                     AESEncode@aux3:
  2359                           	opt stack 0
  2360                           
  2361                           ; 1 bytes @ 0x2A
  2362  00008A                     	ds	1
  2363  00008B                     AESEncode@i:
  2364                           	opt stack 0
  2365  00008B                     SwTimerReadValue@ticksCount:
  2366                           	opt stack 0
  2367  00008B                     SwTimerStart@ticksRemaining:
  2368                           	opt stack 0
  2369                           
  2370                           ; 4 bytes @ 0x2B
  2371  00008B                     	ds	1
  2372  00008C                     AESEncodeLoRa@block:
  2373                           	opt stack 0
  2374                           
  2375                           ; 2 bytes @ 0x2C
  2376  00008C                     	ds	2
  2377  00008E                     AESEncodeLoRa@key:
  2378                           	opt stack 0
  2379                           
  2380                           ; 2 bytes @ 0x2E
  2381  00008E                     	ds	1
  2382  00008F                     SwTimerReadValue@timerId:
  2383                           	opt stack 0
  2384  00008F                     SwTimerStart@timerId:
  2385                           	opt stack 0
  2386                           
  2387                           ; 1 bytes @ 0x2F
  2388  00008F                     	ds	1
  2389  000090                     ??_UpdateRetransmissionAckTimeoutState:
  2390  000090                     ??_StartReTxTimer:
  2391  000090                     ?___lmul:
  2392                           	opt stack 0
  2393  000090                     ___lmul@multiplier:
  2394                           	opt stack 0
  2395  000090                     AESEncodeLoRa@useKey:
  2396                           	opt stack 0
  2397                           
  2398                           ; 16 bytes @ 0x30
  2399  000090                     	ds	4
  2400  000094                     StartReTxTimer@minim:
  2401                           	opt stack 0
  2402  000094                     ___lmul@multiplicand:
  2403                           	opt stack 0
  2404                           
  2405                           ; 4 bytes @ 0x34
  2406  000094                     	ds	4
  2407  000098                     StartReTxTimer@i:
  2408                           	opt stack 0
  2409  000098                     ___lmul@product:
  2410                           	opt stack 0
  2411                           
  2412                           ; 4 bytes @ 0x38
  2413  000098                     	ds	4
  2414  00009C                     ?_rand:
  2415                           	opt stack 0
  2416  00009C                     ?_ExecuteRxParamSetupReq:
  2417                           	opt stack 0
  2418  00009C                     ?_ExecuteNewChannel:
  2419                           	opt stack 0
  2420  00009C                     LORAWAN_LinkCheckConfigure@period:
  2421                           	opt stack 0
  2422  00009C                     ExecuteNewChannel@ptr:
  2423                           	opt stack 0
  2424  00009C                     ExecuteRxParamSetupReq@ptr:
  2425                           	opt stack 0
  2426  00009C                     UpdateCfList@joinAccept:
  2427                           	opt stack 0
  2428  00009C                     RADIO_WriteConfiguration@symbolTimeout:
  2429                           	opt stack 0
  2430                           
  2431                           ; 2 bytes @ 0x3C
  2432  00009C                     	ds	2
  2433  00009E                     ??_UpdateCfList:
  2434  00009E                     ??_LORAWAN_LinkCheckConfigure:
  2435  00009E                     ??_RADIO_WriteConfiguration:
  2436  00009E                     ?___lwmod:
  2437                           	opt stack 0
  2438  00009E                     ExecuteNewChannel@drRange:
  2439                           	opt stack 0
  2440  00009E                     ___lwmod@dividend:
  2441                           	opt stack 0
  2442  00009E                     ExecuteRxParamSetupReq@frequency:
  2443                           	opt stack 0
  2444                           
  2445                           ; 4 bytes @ 0x3E
  2446  00009E                     	ds	1
  2447  00009F                     ExecuteNewChannel@frequency:
  2448                           	opt stack 0
  2449                           
  2450                           ; 4 bytes @ 0x3F
  2451  00009F                     	ds	1
  2452  0000A0                     UpdateCfList@bufferLength:
  2453                           	opt stack 0
  2454  0000A0                     RADIO_WriteConfiguration@i:
  2455                           	opt stack 0
  2456  0000A0                     ComputeSessionKeys@joinAcceptBuffer:
  2457                           	opt stack 0
  2458  0000A0                     EncryptFRMPayload@buffer:
  2459                           	opt stack 0
  2460  0000A0                     GenerateSubkey@key:
  2461                           	opt stack 0
  2462  0000A0                     ___lwmod@divisor:
  2463                           	opt stack 0
  2464                           
  2465                           ; 2 bytes @ 0x40
  2466  0000A0                     	ds	1
  2467  0000A1                     UpdateCfList@frequency:
  2468                           	opt stack 0
  2469  0000A1                     RADIO_WriteConfiguration@tempValue:
  2470                           	opt stack 0
  2471                           
  2472                           ; 4 bytes @ 0x41
  2473  0000A1                     	ds	1
  2474  0000A2                     EncryptFRMPayload@bufferLength:
  2475                           	opt stack 0
  2476  0000A2                     ExecuteRxParamSetupReq@dlSettings:
  2477                           	opt stack 0
  2478  0000A2                     ___lwmod@counter:
  2479                           	opt stack 0
  2480  0000A2                     GenerateSubkey@k1:
  2481                           	opt stack 0
  2482  0000A2                     _LORAWAN_LinkCheckConfigure$1034:
  2483                           	opt stack 0
  2484                           
  2485                           ; 4 bytes @ 0x42
  2486  0000A2                     	ds	1
  2487  0000A3                     ?_Random:
  2488                           	opt stack 0
  2489  0000A3                     EncryptFRMPayload@dir:
  2490                           	opt stack 0
  2491  0000A3                     ExecuteNewChannel@channelIndex:
  2492                           	opt stack 0
  2493  0000A3                     Random@max:
  2494                           	opt stack 0
  2495                           
  2496                           ; 2 bytes @ 0x43
  2497  0000A3                     	ds	1
  2498  0000A4                     ?_MacExecuteCommands:
  2499                           	opt stack 0
  2500  0000A4                     MacExecuteCommands@buffer:
  2501                           	opt stack 0
  2502  0000A4                     GenerateSubkey@k2:
  2503                           	opt stack 0
  2504  0000A4                     EncryptFRMPayload@frameCounter:
  2505                           	opt stack 0
  2506                           
  2507                           ; 4 bytes @ 0x44
  2508  0000A4                     	ds	1
  2509  0000A5                     SearchAvailableChannel@transmissionType:
  2510                           	opt stack 0
  2511  0000A5                     UpdateCfList@channelIndex:
  2512                           	opt stack 0
  2513  0000A5                     RADIO_WriteConfiguration@regValue:
  2514                           	opt stack 0
  2515                           
  2516                           ; 1 bytes @ 0x45
  2517  0000A5                     	ds	1
  2518  0000A6                     ??_GenerateSubkey:
  2519  0000A6                     ?_RADIO_Transmit:
  2520                           	opt stack 0
  2521  0000A6                     ?_RADIO_ReceiveStart:
  2522                           	opt stack 0
  2523  0000A6                     LORAWAN_LinkCheckConfigure@iCtr:
  2524                           	opt stack 0
  2525  0000A6                     MacExecuteCommands@fOptsLen:
  2526                           	opt stack 0
  2527  0000A6                     SearchAvailableChannel@channelIndex:
  2528                           	opt stack 0
  2529  0000A6                     UpdateCfList@i:
  2530                           	opt stack 0
  2531  0000A6                     RADIO_Transmit@buffer:
  2532                           	opt stack 0
  2533  0000A6                     RADIO_ReceiveStart@rxWindowSize:
  2534                           	opt stack 0
  2535                           
  2536                           ; 2 bytes @ 0x46
  2537  0000A6                     	ds	1
  2538  0000A7                     ??_MacExecuteCommands:
  2539  0000A7                     ??_SearchAvailableChannel:
  2540  0000A7                     LORAWAN_Reset@ismBandNew:
  2541                           	opt stack 0
  2542  0000A7                     GenerateSubkey@const_Rb:
  2543                           	opt stack 0
  2544                           
  2545                           ; 16 bytes @ 0x47
  2546  0000A7                     	ds	1
  2547  0000A8                     ??_RADIO_ReceiveStart:
  2548  0000A8                     RADIO_Transmit@bufferLen:
  2549                           	opt stack 0
  2550  0000A8                     EncryptFRMPayload@key:
  2551                           	opt stack 0
  2552  0000A8                     LORAWAN_Init@RxPayload:
  2553                           	opt stack 0
  2554                           
  2555                           ; 2 bytes @ 0x48
  2556  0000A8                     	ds	1
  2557  0000A9                     ??_RADIO_Transmit:
  2558  0000A9                     MacExecuteCommands@done:
  2559                           	opt stack 0
  2560                           
  2561                           ; 1 bytes @ 0x49
  2562  0000A9                     	ds	1
  2563  0000AA                     EncryptFRMPayload@macBufferIndex:
  2564                           	opt stack 0
  2565  0000AA                     MacExecuteCommands@ptr:
  2566                           	opt stack 0
  2567  0000AA                     LORAWAN_Init@RxJoinResponse:
  2568                           	opt stack 0
  2569                           
  2570                           ; 2 bytes @ 0x4A
  2571  0000AA                     	ds	1
  2572  0000AB                     SearchAvailableChannel@randomNumberCopy:
  2573                           	opt stack 0
  2574  0000AB                     EncryptFRMPayload@bufferToBeEncrypted:
  2575                           	opt stack 0
  2576                           
  2577                           ; 2 bytes @ 0x4B
  2578  0000AB                     	ds	1
  2579  0000AC                     SearchAvailableChannel@result:
  2580                           	opt stack 0
  2581  0000AC                     _RADIO_ReceiveStart$2491:
  2582                           	opt stack 0
  2583                           
  2584                           ; 4 bytes @ 0x4C
  2585  0000AC                     	ds	1
  2586  0000AD                     EncryptFRMPayload@multicastStatus:
  2587                           	opt stack 0
  2588  0000AD                     SearchAvailableChannel@maxChannels:
  2589                           	opt stack 0
  2590                           
  2591                           ; 1 bytes @ 0x4D
  2592  0000AD                     	ds	1
  2593  0000AE                     ??_EncryptFRMPayload:
  2594  0000AE                     SearchAvailableChannel@randomNumber:
  2595                           	opt stack 0
  2596                           
  2597                           ; 1 bytes @ 0x4E
  2598  0000AE                     	ds	1
  2599  0000AF                     SearchAvailableChannel@i:
  2600                           	opt stack 0
  2601                           
  2602                           ; 1 bytes @ 0x4F
  2603  0000AF                     	ds	1
  2604  0000B0                     SelectChannelForTransmission@transmissionType:
  2605                           	opt stack 0
  2606  0000B0                     LORAWAN_TxDone@timeOnAir:
  2607                           	opt stack 0
  2608                           
  2609                           ; 2 bytes @ 0x50
  2610  0000B0                     	ds	1
  2611  0000B1                     SelectChannelForTransmission@result:
  2612                           	opt stack 0
  2613  0000B1                     _RADIO_Transmit$2488:
  2614                           	opt stack 0
  2615                           
  2616                           ; 4 bytes @ 0x51
  2617  0000B1                     	ds	1
  2618  0000B2                     ??_LORAWAN_TxDone:
  2619  0000B2                     SelectChannelForTransmission@channelIndex:
  2620                           	opt stack 0
  2621                           
  2622                           ; 1 bytes @ 0x52
  2623  0000B2                     	ds	1
  2624  0000B3                     EncryptFRMPayload@k:
  2625                           	opt stack 0
  2626                           
  2627                           ; 1 bytes @ 0x53
  2628  0000B3                     	ds	1
  2629  0000B4                     EncryptFRMPayload@i:
  2630                           	opt stack 0
  2631                           
  2632                           ; 1 bytes @ 0x54
  2633  0000B4                     	ds	1
  2634  0000B5                     EncryptFRMPayload@j:
  2635                           	opt stack 0
  2636  0000B5                     RADIO_Transmit@regValue:
  2637                           	opt stack 0
  2638                           
  2639                           ; 1 bytes @ 0x55
  2640  0000B5                     	ds	1
  2641  0000B6                     RADIO_Transmit@i:
  2642                           	opt stack 0
  2643                           
  2644                           ; 1 bytes @ 0x56
  2645  0000B6                     	ds	1
  2646  0000B7                     ??_LORAWAN_RxTimeout:
  2647  0000B7                     GenerateSubkey@l:
  2648                           	opt stack 0
  2649                           
  2650                           ; 16 bytes @ 0x57
  2651  0000B7                     	ds	3
  2652  0000BA                     _LORAWAN_TxDone$1988:
  2653                           	opt stack 0
  2654                           
  2655                           ; 4 bytes @ 0x5A
  2656  0000BA                     	ds	1
  2657  0000BB                     LORAWAN_RxTimeout@minim:
  2658                           	opt stack 0
  2659                           
  2660                           ; 4 bytes @ 0x5B
  2661  0000BB                     	ds	3
  2662  0000BE                     _LORAWAN_TxDone$1989:
  2663                           	opt stack 0
  2664                           
  2665                           ; 4 bytes @ 0x5E
  2666  0000BE                     	ds	1
  2667  0000BF                     LORAWAN_RxTimeout@i:
  2668                           	opt stack 0
  2669                           
  2670                           ; 1 bytes @ 0x5F
  2671  0000BF                     	ds	1
  2672  0000C0                     ??_RADIO_DIO1:
  2673  0000C0                     
  2674                           ; 1 bytes @ 0x60
  2675  0000C0                     	ds	1
  2676  0000C1                     RADIO_DIO1@dioMapping:
  2677                           	opt stack 0
  2678                           
  2679                           ; 1 bytes @ 0x61
  2680  0000C1                     	ds	1
  2681  0000C2                     LORAWAN_TxDone@found:
  2682                           	opt stack 0
  2683                           
  2684                           ; 1 bytes @ 0x62
  2685  0000C2                     	ds	1
  2686  0000C3                     LORAWAN_TxDone@delta:
  2687                           	opt stack 0
  2688                           
  2689                           ; 4 bytes @ 0x63
  2690  0000C3                     	ds	4
  2691  0000C7                     GenerateSubkey@i:
  2692                           	opt stack 0
  2693  0000C7                     _LORAWAN_TxDone$5058:
  2694                           	opt stack 0
  2695                           
  2696                           ; 4 bytes @ 0x67
  2697  0000C7                     	ds	1
  2698  0000C8                     AESCmac@key:
  2699                           	opt stack 0
  2700                           
  2701                           ; 2 bytes @ 0x68
  2702  0000C8                     	ds	2
  2703  0000CA                     AESCmac@output:
  2704                           	opt stack 0
  2705                           
  2706                           ; 2 bytes @ 0x6A
  2707  0000CA                     	ds	1
  2708  0000CB                     LORAWAN_TxDone@ticks:
  2709                           	opt stack 0
  2710                           
  2711                           ; 4 bytes @ 0x6B
  2712  0000CB                     	ds	1
  2713  0000CC                     AESCmac@input:
  2714                           	opt stack 0
  2715                           
  2716                           ; 2 bytes @ 0x6C
  2717  0000CC                     	ds	2
  2718  0000CE                     AESCmac@size:
  2719                           	opt stack 0
  2720                           
  2721                           ; 1 bytes @ 0x6E
  2722  0000CE                     	ds	1
  2723  0000CF                     ??_AESCmac:
  2724  0000CF                     LORAWAN_TxDone@minim:
  2725                           	opt stack 0
  2726                           
  2727                           ; 4 bytes @ 0x6F
  2728  0000CF                     	ds	4
  2729  0000D3                     LORAWAN_TxDone@i:
  2730                           	opt stack 0
  2731                           
  2732                           ; 1 bytes @ 0x73
  2733  0000D3                     	ds	1
  2734  0000D4                     RADIO_TxDone@timeOnAir:
  2735                           	opt stack 0
  2736  0000D4                     RADIO_FSKPacketSent@timeOnAir:
  2737                           	opt stack 0
  2738                           
  2739                           ; 4 bytes @ 0x74
  2740  0000D4                     	ds	2
  2741  0000D6                     ??_AssemblePacket:
  2742  0000D6                     ComputeMic@mic:
  2743                           	opt stack 0
  2744                           
  2745                           ; 4 bytes @ 0x76
  2746  0000D6                     	ds	2
  2747  0000D8                     AssemblePacket@confirmed:
  2748                           	opt stack 0
  2749  0000D8                     _RADIO_TxDone$2504:
  2750                           	opt stack 0
  2751  0000D8                     _RADIO_FSKPacketSent$2509:
  2752                           	opt stack 0
  2753                           
  2754                           ; 4 bytes @ 0x78
  2755  0000D8                     	ds	1
  2756  0000D9                     AssemblePacket@mhdr:
  2757                           	opt stack 0
  2758                           
  2759                           ; 1 bytes @ 0x79
  2760  0000D9                     	ds	1
  2761  0000DA                     ??_PrepareJoinRequestFrame:
  2762  0000DA                     AssemblePacket@fCtrl:
  2763                           	opt stack 0
  2764                           
  2765                           ; 1 bytes @ 0x7A
  2766  0000DA                     	ds	1
  2767  0000DB                     AssemblePacket@macCmdIdx:
  2768                           	opt stack 0
  2769                           
  2770                           ; 1 bytes @ 0x7B
  2771  0000DB                     	ds	1
  2772  0000DC                     AssemblePacket@bufferIndex:
  2773                           	opt stack 0
  2774  0000DC                     RADIO_FSKPacketSent@irqFlags:
  2775                           	opt stack 0
  2776  0000DC                     PrepareJoinRequestFrame@mic:
  2777                           	opt stack 0
  2778                           
  2779                           ; 4 bytes @ 0x7C
  2780  0000DC                     	ds	1
  2781  0000DD                     ??_LORAWAN_Send:
  2782                           
  2783                           ; 1 bytes @ 0x7D
  2784  0000DD                     	ds	1
  2785  0000DE                     LORAWAN_Send@result:
  2786                           	opt stack 0
  2787                           
  2788                           ; 1 bytes @ 0x7E
  2789  0000DE                     	ds	1
  2790  0000DF                     LORAWAN_Send@confirmed:
  2791                           	opt stack 0
  2792                           
  2793                           ; 1 bytes @ 0x7F
  2794  0000DF                     	ds	1
  2795  0000E0                     ??_LORAWAN_RxDone:
  2796  0000E0                     PrepareJoinRequestFrame@mhdr:
  2797                           	opt stack 0
  2798                           
  2799                           ; 1 bytes @ 0x80
  2800  0000E0                     	ds	1
  2801  0000E1                     PrepareJoinRequestFrame@bufferIndex:
  2802                           	opt stack 0
  2803                           
  2804                           ; 1 bytes @ 0x81
  2805  0000E1                     	ds	1
  2806  0000E2                     PrepareJoinRequestFrame@iCtr:
  2807                           	opt stack 0
  2808                           
  2809                           ; 1 bytes @ 0x82
  2810  0000E2                     	ds	1
  2811  0000E3                     LORAWAN_Join@bufferIndex:
  2812                           	opt stack 0
  2813                           
  2814                           ; 1 bytes @ 0x83
  2815  0000E3                     	ds	1
  2816  0000E4                     LORAWAN_Join@result:
  2817                           	opt stack 0
  2818  0000E4                     SwTimersExecute@i:
  2819                           	opt stack 0
  2820                           
  2821                           ; 1 bytes @ 0x84
  2822  0000E4                     	ds	1
  2823  0000E5                     LORAWAN_Join@activationTypeNew:
  2824                           	opt stack 0
  2825  0000E5                     LORAWAN_RxDone@fPort:
  2826                           	opt stack 0
  2827                           
  2828                           ; 1 bytes @ 0x85
  2829  0000E5                     	ds	1
  2830  0000E6                     LORAWAN_RxDone@channelIndex:
  2831                           	opt stack 0
  2832                           
  2833                           ; 1 bytes @ 0x86
  2834  0000E6                     	ds	1
  2835  0000E7                     LORAWAN_RxDone@mhdr:
  2836                           	opt stack 0
  2837                           
  2838                           ; 1 bytes @ 0x87
  2839  0000E7                     	ds	1
  2840  0000E8                     LORAWAN_RxDone@extractedMic:
  2841                           	opt stack 0
  2842                           
  2843                           ; 4 bytes @ 0x88
  2844  0000E8                     	ds	4
  2845  0000EC                     LORAWAN_RxDone@bufferIndex:
  2846                           	opt stack 0
  2847                           
  2848                           ; 1 bytes @ 0x8C
  2849  0000EC                     	ds	1
  2850  0000ED                     LORAWAN_RxDone@temp:
  2851                           	opt stack 0
  2852                           
  2853                           ; 1 bytes @ 0x8D
  2854  0000ED                     	ds	1
  2855  0000EE                     LORAWAN_RxDone@packet:
  2856                           	opt stack 0
  2857                           
  2858                           ; 2 bytes @ 0x8E
  2859  0000EE                     	ds	2
  2860  0000F0                     LORAWAN_RxDone@computedMic:
  2861                           	opt stack 0
  2862                           
  2863                           ; 4 bytes @ 0x90
  2864  0000F0                     	ds	4
  2865  0000F4                     LORAWAN_RxDone@joinAccept:
  2866                           	opt stack 0
  2867                           
  2868                           ; 2 bytes @ 0x94
  2869  0000F4                     	ds	2
  2870  0000F6                     LORAWAN_RxDone@frmPayloadLength:
  2871                           	opt stack 0
  2872                           
  2873                           ; 1 bytes @ 0x96
  2874  0000F6                     	ds	1
  2875  0000F7                     LORAWAN_RxDone@hdr:
  2876                           	opt stack 0
  2877                           
  2878                           ; 2 bytes @ 0x97
  2879  0000F7                     	ds	2
  2880  0000F9                     RADIO_RxDone@irqFlags:
  2881                           	opt stack 0
  2882  0000F9                     RADIO_FSKPayloadReady@irqFlags:
  2883                           	opt stack 0
  2884                           
  2885                           ; 1 bytes @ 0x99
  2886  0000F9                     	ds	1
  2887  0000FA                     RADIO_RxDone@i:
  2888                           	opt stack 0
  2889  0000FA                     RADIO_FSKPayloadReady@i:
  2890                           	opt stack 0
  2891                           
  2892                           ; 1 bytes @ 0x9A
  2893  0000FA                     	ds	1
  2894  0000FB                     ??_RADIO_DIO0:
  2895                           
  2896                           ; 1 bytes @ 0x9B
  2897  0000FB                     	ds	2
  2898  0000FD                     tosu	equ	0xFFF
  2899                           tosh	equ	0xFFE
  2900                           tosl	equ	0xFFD
  2901                           pclath	equ	0xFFA
  2902                           tblptru	equ	0xFF8
  2903                           tblptrh	equ	0xFF7
  2904                           tblptrl	equ	0xFF6
  2905                           tablat	equ	0xFF5
  2906                           prodh	equ	0xFF4
  2907                           prodl	equ	0xFF3
  2908                           intcon	equ	0xFF2
  2909                           indf0	equ	0xFEF
  2910                           postinc0	equ	0xFEE
  2911                           plusw0	equ	0xFEB
  2912                           fsr0h	equ	0xFEA
  2913                           fsr0l	equ	0xFE9
  2914                           wreg	equ	0xFE8
  2915                           postinc1	equ	0xFE6
  2916                           postdec1	equ	0xFE5
  2917                           plusw1	equ	0xFE3
  2918                           fsr1h	equ	0xFE2
  2919                           fsr1l	equ	0xFE1
  2920                           indf2	equ	0xFDF
  2921                           postinc2	equ	0xFDE
  2922                           postdec2	equ	0xFDD
  2923                           plusw2	equ	0xFDB
  2924                           fsr2h	equ	0xFDA
  2925                           fsr2l	equ	0xFD9
  2926                           status	equ	0xFD8
  2927                           
  2928                           ; 1 bytes @ 0x9D
  2929                           
  2930                           	psect	cstackCOMRAM
  2931  000001                     __pcstackCOMRAM:
  2932                           	opt stack 0
  2933  000001                     ?i2_TMR1_ReadTimer:
  2934                           	opt stack 0
  2935  000001                     i2TMR1_WriteTimer@timerVal:
  2936                           	opt stack 0
  2937                           
  2938                           ; 2 bytes @ 0x0
  2939  000001                     	ds	2
  2940  000003                     ??i2_TMR1_ReadTimer:
  2941  000003                     
  2942                           ; 1 bytes @ 0x2
  2943  000003                     	ds	2
  2944  000005                     i2TMR1_ReadTimer@readVal:
  2945                           	opt stack 0
  2946                           
  2947                           ; 2 bytes @ 0x4
  2948  000005                     	ds	2
  2949  000007                     ?i2_TMR_SwapTimer:
  2950                           	opt stack 0
  2951  000007                     ?i2_TMR_GetDeltaTime:
  2952                           	opt stack 0
  2953  000007                     i2TMR_SwapTimer@timerVal:
  2954                           	opt stack 0
  2955                           
  2956                           ; 2 bytes @ 0x6
  2957  000007                     	ds	2
  2958  000009                     
  2959                           ; 1 bytes @ 0x8
  2960  000009                     	ds	2
  2961  00000B                     ??i2_TMR_GetDeltaTime:
  2962                           
  2963                           ; 1 bytes @ 0xA
  2964  00000B                     	ds	12
  2965  000017                     ?i2_SwTimersInterrupt:
  2966                           	opt stack 0
  2967                           
  2968                           ; 4 bytes @ 0x16
  2969  000017                     	ds	4
  2970  00001B                     
  2971                           ; 1 bytes @ 0x1A
  2972  00001B                     	ds	4
  2973  00001F                     i2SwTimersInterrupt@timeElapsed:
  2974                           	opt stack 0
  2975                           
  2976                           ; 4 bytes @ 0x1E
  2977  00001F                     	ds	4
  2978  000023                     i2SwTimersInterrupt@ticksToNextTimerEvent:
  2979                           	opt stack 0
  2980                           
  2981                           ; 4 bytes @ 0x22
  2982  000023                     	ds	4
  2983  000027                     i2SwTimersInterrupt@i:
  2984                           	opt stack 0
  2985                           
  2986                           ; 1 bytes @ 0x26
  2987  000027                     	ds	1
  2988  000028                     ??_INTERRUPT_InterruptManager:
  2989                           
  2990                           ; 1 bytes @ 0x27
  2991  000028                     	ds	8
  2992                           tosu	equ	0xFFF
  2993                           tosh	equ	0xFFE
  2994                           tosl	equ	0xFFD
  2995                           pclath	equ	0xFFA
  2996                           tblptru	equ	0xFF8
  2997                           tblptrh	equ	0xFF7
  2998                           tblptrl	equ	0xFF6
  2999                           tablat	equ	0xFF5
  3000                           prodh	equ	0xFF4
  3001                           prodl	equ	0xFF3
  3002                           intcon	equ	0xFF2
  3003                           indf0	equ	0xFEF
  3004                           postinc0	equ	0xFEE
  3005                           plusw0	equ	0xFEB
  3006                           fsr0h	equ	0xFEA
  3007                           fsr0l	equ	0xFE9
  3008                           wreg	equ	0xFE8
  3009                           postinc1	equ	0xFE6
  3010                           postdec1	equ	0xFE5
  3011                           plusw1	equ	0xFE3
  3012                           fsr1h	equ	0xFE2
  3013                           fsr1l	equ	0xFE1
  3014                           indf2	equ	0xFDF
  3015                           postinc2	equ	0xFDE
  3016                           postdec2	equ	0xFDD
  3017                           plusw2	equ	0xFDB
  3018                           fsr2h	equ	0xFDA
  3019                           fsr2l	equ	0xFD9
  3020                           status	equ	0xFD8
  3021                           
  3022 ;;
  3023 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3024 ;;
  3025 ;; *************** function _main *****************
  3026 ;; Defined at:
  3027 ;;		line 73 in file "main.c"
  3028 ;; Parameters:    Size  Location     Type
  3029 ;;		None
  3030 ;; Auto vars:     Size  Location     Type
  3031 ;;  x               2  119[BANK1 ] int 
  3032 ;;  flag            2  117[BANK1 ] int 
  3033 ;; Return value:  Size  Location     Type
  3034 ;;                  1    wreg      void 
  3035 ;; Registers used:
  3036 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+4, btemp+5, btem
      +p+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3037 ;; Tracked objects:
  3038 ;;		On entry : 0/0
  3039 ;;		On exit  : 3F/1
  3040 ;;		Unchanged: 0/0
  3041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3042 ;;      Params:         0       0       0       0       0       0       0       0       0
  3043 ;;      Locals:         0       0       4       0       0       0       0       0       0
  3044 ;;      Temps:          0       0       1       0       0       0       0       0       0
  3045 ;;      Totals:         0       0       5       0       0       0       0       0       0
  3046 ;;Total ram usage:        5 bytes
  3047 ;; Hardware stack levels required when called:   19
  3048 ;; This function calls:
  3049 ;;		_LORAWAN_Init
  3050 ;;		_LORAWAN_Join
  3051 ;;		_LORAWAN_Mainloop
  3052 ;;		_LORAWAN_SetApplicationSessionKey
  3053 ;;		_LORAWAN_SetDeviceAddress
  3054 ;;		_LORAWAN_SetNetworkSessionKey
  3055 ;;		_SYSTEM_Initialize
  3056 ;;		_flash
  3057 ;;		_sendPacket
  3058 ;; This function is called by:
  3059 ;;		Startup code after reset
  3060 ;; This function uses a non-reentrant model
  3061 ;;
  3062                           
  3063                           	psect	text0
  3064  003C3C                     __ptext0:
  3065                           	opt stack 0
  3066  003C3C                     _main:
  3067                           	opt stack 12
  3068                           
  3069                           ;main.c: 76: SYSTEM_Initialize();
  3070                           
  3071                           ; BSR set to: 14
  3072                           ;incstack = 0
  3073  003C3C  EC6D  F02F         	call	_SYSTEM_Initialize	;wreg free
  3074                           
  3075                           ; BSR set to: 0
  3076                           ;main.c: 79: (INTCONbits.GIE = 1);
  3077  003C40  8EF2               	bsf	intcon,7,c	;volatile
  3078                           
  3079                           ; BSR set to: 0
  3080                           ;main.c: 80: (INTCONbits.PEIE = 1);
  3081  003C42  8CF2               	bsf	intcon,6,c	;volatile
  3082                           
  3083                           ; BSR set to: 0
  3084  003C44  847B               	bsf	3963,2,c	;volatile
  3085                           
  3086                           ; BSR set to: 0
  3087                           ;main.c: 83: LORAWAN_Init(RxDataDone, RxJoinResponse);
  3088  003C46  0E66               	movlw	low _RxDataDone
  3089  003C48  6FA8               	movwf	LORAWAN_Init@RxPayload& (0+255),b
  3090  003C4A  0E62               	movlw	high _RxDataDone
  3091  003C4C  6FA9               	movwf	(LORAWAN_Init@RxPayload+1)& (0+255),b
  3092  003C4E  0E08               	movlw	low _RxJoinResponse
  3093  003C50  6FAA               	movwf	LORAWAN_Init@RxJoinResponse& (0+255),b
  3094  003C52  0E62               	movlw	high _RxJoinResponse
  3095  003C54  6FAB               	movwf	(LORAWAN_Init@RxJoinResponse+1)& (0+255),b
  3096  003C56  ECFF  F029         	call	_LORAWAN_Init	;wreg free
  3097                           
  3098                           ;main.c: 84: LORAWAN_SetNetworkSessionKey(nwkSKey);
  3099  003C5A  0EE7               	movlw	low _nwkSKey
  3100  003C5C  0100               	movlb	0	; () banked
  3101  003C5E  6F6A               	movwf	LORAWAN_SetNetworkSessionKey@networkSessionKeyNew& (0+255),b
  3102  003C60  0E01               	movlw	high _nwkSKey
  3103  003C62  6F6B               	movwf	(LORAWAN_SetNetworkSessionKey@networkSessionKeyNew+1)& (0+255),b
  3104  003C64  EC04  F02E         	call	_LORAWAN_SetNetworkSessionKey	;wreg free
  3105                           
  3106                           ;main.c: 85: LORAWAN_SetApplicationSessionKey(appSKey);
  3107  003C68  0ED7               	movlw	low _appSKey
  3108  003C6A  0100               	movlb	0	; () banked
  3109  003C6C  6F6A               	movwf	LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew& (0+255),b
  3110  003C6E  0E01               	movlw	high _appSKey
  3111  003C70  6F6B               	movwf	(LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew+1)& (0+255),b
  3112  003C72  ECE3  F02C         	call	_LORAWAN_SetApplicationSessionKey	;wreg free
  3113                           
  3114                           ;main.c: 86: LORAWAN_SetDeviceAddress(devAddr);
  3115  003C76  0E40               	movlw	64
  3116  003C78  0100               	movlb	0	; () banked
  3117  003C7A  6F60               	movwf	LORAWAN_SetDeviceAddress@deviceAddressNew& (0+255),b
  3118  003C7C  0E65               	movlw	101
  3119  003C7E  6F61               	movwf	(LORAWAN_SetDeviceAddress@deviceAddressNew+1)& (0+255),b
  3120  003C80  0E00               	movlw	0
  3121  003C82  6B62               	clrf	(LORAWAN_SetDeviceAddress@deviceAddressNew+2)& (0+255),b
  3122  003C84  6B63               	clrf	(LORAWAN_SetDeviceAddress@deviceAddressNew+3)& (0+255),b
  3123  003C86  ECA3  F02F         	call	_LORAWAN_SetDeviceAddress	;wreg free
  3124                           
  3125                           ; BSR set to: 2
  3126                           ;main.c: 87: LORAWAN_Join(ABP);
  3127  003C8A  0E01               	movlw	1
  3128  003C8C  EC20  F023         	call	_LORAWAN_Join
  3129                           
  3130                           ;main.c: 89: while(JoinedServer == 0){
  3131  003C90  D003               	goto	l16190
  3132  003C92                     l16186:
  3133                           
  3134                           ; BSR set to: 1
  3135                           ;main.c: 90: LORAWAN_Mainloop();
  3136  003C92  EC9D  F02B         	call	_LORAWAN_Mainloop	;wreg free
  3137  003C96  947B               	bcf	3963,2,c	;volatile
  3138  003C98                     l16190:
  3139  003C98  0101               	movlb	1	; () banked
  3140  003C9A  517D               	movf	_JoinedServer& (0+255),w,b
  3141  003C9C  E0FA               	bz	l16186
  3142                           
  3143                           ; BSR set to: 1
  3144                           ;main.c: 92: }
  3145                           ;main.c: 94: int flag = 5;
  3146  003C9E  6B76               	clrf	(main@flag+1)& (0+255),b
  3147  003CA0  0E05               	movlw	5
  3148  003CA2  6F75               	movwf	main@flag& (0+255),b
  3149  003CA4                     l16194:
  3150                           
  3151                           ; BSR set to: 1
  3152                           ;main.c: 97: {
  3153                           ;main.c: 98: LORAWAN_Mainloop();
  3154  003CA4  EC9D  F02B         	call	_LORAWAN_Mainloop	;wreg free
  3155                           
  3156                           ;main.c: 99: flag++;
  3157  003CA8  0101               	movlb	1	; () banked
  3158  003CAA  4B75               	infsnz	main@flag& (0+255),f,b
  3159  003CAC  2B76               	incf	(main@flag+1)& (0+255),f,b
  3160                           
  3161                           ; BSR set to: 1
  3162                           ;main.c: 101: if(flag > 10){
  3163  003CAE  BF76               	btfsc	(main@flag+1)& (0+255),7,b
  3164  003CB0  D00B               	goto	l16206
  3165  003CB2  5176               	movf	(main@flag+1)& (0+255),w,b
  3166  003CB4  E103               	bnz	u19770
  3167  003CB6  0E0B               	movlw	11
  3168  003CB8  5D75               	subwf	main@flag& (0+255),w,b
  3169  003CBA  E306               	bnc	l16206
  3170  003CBC                     u19770:
  3171                           
  3172                           ; BSR set to: 1
  3173                           ;main.c: 102: flag = 0;
  3174  003CBC  6B75               	clrf	main@flag& (0+255),b
  3175  003CBE  6B76               	clrf	(main@flag+1)& (0+255),b
  3176                           
  3177                           ; BSR set to: 1
  3178                           ;main.c: 103: flash();
  3179  003CC0  EC63  F029         	call	_flash	;wreg free
  3180                           
  3181                           ; BSR set to: 0
  3182                           ;main.c: 104: sendPacket();
  3183  003CC4  EC8A  F02E         	call	_sendPacket	;wreg free
  3184  003CC8                     l16206:
  3185                           
  3186                           ;main.c: 105: }
  3187                           ;main.c: 106: for(int x = 0; x < 1000; x++) _delay((unsigned long)((1)*(16000000/4000.0)
      +                          ));
  3188  003CC8  0101               	movlb	1	; () banked
  3189  003CCA  6B77               	clrf	main@x& (0+255),b
  3190  003CCC  6B78               	clrf	(main@x+1)& (0+255),b
  3191  003CCE                     l16212:
  3192                           
  3193                           ; BSR set to: 1
  3194  003CCE  0E06               	movlw	6
  3195  003CD0  0101               	movlb	1	; () banked
  3196  003CD2  6F74               	movwf	??_main& (0+255),b
  3197  003CD4  0E30               	movlw	48
  3198  003CD6                     u19797:
  3199  003CD6  2EE8               	decfsz	wreg,f,c
  3200  003CD8  D7FE               	bra	u19797
  3201  003CDA  2F74               	decfsz	??_main& (0+255),f,b
  3202  003CDC  D7FC               	bra	u19797
  3203  003CDE  F000               	nop	
  3204  003CE0  0101               	movlb	1	; () banked
  3205  003CE2  4B77               	infsnz	main@x& (0+255),f,b
  3206  003CE4  2B78               	incf	(main@x+1)& (0+255),f,b
  3207  003CE6  BF78               	btfsc	(main@x+1)& (0+255),7,b
  3208  003CE8  D7F2               	goto	l16212
  3209  003CEA  0EE8               	movlw	232
  3210  003CEC  5D77               	subwf	main@x& (0+255),w,b
  3211  003CEE  0E03               	movlw	3
  3212  003CF0  5978               	subwfb	(main@x+1)& (0+255),w,b
  3213  003CF2  E2D8               	bc	l16194
  3214  003CF4  D7EC               	goto	l16212
  3215  003CF6                     __end_of_main:
  3216                           	opt stack 0
  3217                           tosu	equ	0xFFF
  3218                           tosh	equ	0xFFE
  3219                           tosl	equ	0xFFD
  3220                           pclath	equ	0xFFA
  3221                           tblptru	equ	0xFF8
  3222                           tblptrh	equ	0xFF7
  3223                           tblptrl	equ	0xFF6
  3224                           tablat	equ	0xFF5
  3225                           prodh	equ	0xFF4
  3226                           prodl	equ	0xFF3
  3227                           intcon	equ	0xFF2
  3228                           indf0	equ	0xFEF
  3229                           postinc0	equ	0xFEE
  3230                           plusw0	equ	0xFEB
  3231                           fsr0h	equ	0xFEA
  3232                           fsr0l	equ	0xFE9
  3233                           wreg	equ	0xFE8
  3234                           postinc1	equ	0xFE6
  3235                           postdec1	equ	0xFE5
  3236                           plusw1	equ	0xFE3
  3237                           fsr1h	equ	0xFE2
  3238                           fsr1l	equ	0xFE1
  3239                           indf2	equ	0xFDF
  3240                           postinc2	equ	0xFDE
  3241                           postdec2	equ	0xFDD
  3242                           plusw2	equ	0xFDB
  3243                           fsr2h	equ	0xFDA
  3244                           fsr2l	equ	0xFD9
  3245                           status	equ	0xFD8
  3246                           
  3247 ;; *************** function _sendPacket *****************
  3248 ;; Defined at:
  3249 ;;		line 111 in file "main.c"
  3250 ;; Parameters:    Size  Location     Type
  3251 ;;		None
  3252 ;; Auto vars:     Size  Location     Type
  3253 ;;		None
  3254 ;; Return value:  Size  Location     Type
  3255 ;;                  1    wreg      void 
  3256 ;; Registers used:
  3257 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3258 ;; Tracked objects:
  3259 ;;		On entry : 3F/0
  3260 ;;		On exit  : 3C/0
  3261 ;;		Unchanged: 0/0
  3262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3263 ;;      Params:         0       0       0       0       0       0       0       0       0
  3264 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3265 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3266 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3267 ;;Total ram usage:        0 bytes
  3268 ;; Hardware stack levels used:    1
  3269 ;; Hardware stack levels required when called:   14
  3270 ;; This function calls:
  3271 ;;		_LORAWAN_Send
  3272 ;; This function is called by:
  3273 ;;		_main
  3274 ;; This function uses a non-reentrant model
  3275 ;;
  3276                           
  3277                           	psect	text1
  3278  005D14                     __ptext1:
  3279                           	opt stack 0
  3280  005D14                     _sendPacket:
  3281                           	opt stack 16
  3282                           
  3283                           ; BSR set to: 0
  3284                           
  3285                           ; BSR set to: 1
  3286                           ;incstack = 0
  3287                           ;main.c: 112: do { LATCbits.LATC2 = 1; } while(0);
  3288  005D14  847B               	bsf	3963,2,c	;volatile
  3289                           
  3290                           ; BSR set to: 0
  3291                           ;main.c: 113: payload[0] = 0xFF00;
  3292  005D16  0101               	movlb	1	; () banked
  3293  005D18  69C6               	setf	(_payload+1)& (0+255),b
  3294  005D1A  0E00               	movlw	0
  3295  005D1C  6FC5               	movwf	_payload& (0+255),b
  3296                           
  3297                           ; BSR set to: 1
  3298                           ;main.c: 116: count++;
  3299  005D1E  0E02               	movlw	2
  3300  005D20  6F6B               	movwf	LORAWAN_Send@port& (0+255),b
  3301  005D22  0EC5               	movlw	low _payload
  3302  005D24  6F6C               	movwf	LORAWAN_Send@buffer& (0+255),b
  3303  005D26  0E01               	movlw	high _payload
  3304  005D28  6F6D               	movwf	(LORAWAN_Send@buffer+1)& (0+255),b
  3305  005D2A  0E02               	movlw	2
  3306  005D2C  6F6E               	movwf	LORAWAN_Send@bufferLength& (0+255),b
  3307  005D2E  0E00               	movlw	0
  3308  005D30  EC7B  F01E         	call	_LORAWAN_Send
  3309  005D34  947B               	bcf	3963,2,c	;volatile
  3310  005D36  0012               	return		;funcret
  3311  005D38                     __end_of_sendPacket:
  3312                           	opt stack 0
  3313                           tosu	equ	0xFFF
  3314                           tosh	equ	0xFFE
  3315                           tosl	equ	0xFFD
  3316                           pclath	equ	0xFFA
  3317                           tblptru	equ	0xFF8
  3318                           tblptrh	equ	0xFF7
  3319                           tblptrl	equ	0xFF6
  3320                           tablat	equ	0xFF5
  3321                           prodh	equ	0xFF4
  3322                           prodl	equ	0xFF3
  3323                           intcon	equ	0xFF2
  3324                           indf0	equ	0xFEF
  3325                           postinc0	equ	0xFEE
  3326                           plusw0	equ	0xFEB
  3327                           fsr0h	equ	0xFEA
  3328                           fsr0l	equ	0xFE9
  3329                           wreg	equ	0xFE8
  3330                           postinc1	equ	0xFE6
  3331                           postdec1	equ	0xFE5
  3332                           plusw1	equ	0xFE3
  3333                           fsr1h	equ	0xFE2
  3334                           fsr1l	equ	0xFE1
  3335                           indf2	equ	0xFDF
  3336                           postinc2	equ	0xFDE
  3337                           postdec2	equ	0xFDD
  3338                           plusw2	equ	0xFDB
  3339                           fsr2h	equ	0xFDA
  3340                           fsr2l	equ	0xFD9
  3341                           status	equ	0xFD8
  3342                           
  3343 ;; *************** function _flash *****************
  3344 ;; Defined at:
  3345 ;;		line 129 in file "main.c"
  3346 ;; Parameters:    Size  Location     Type
  3347 ;;		None
  3348 ;; Auto vars:     Size  Location     Type
  3349 ;;  x               1    1[BANK0 ] unsigned char 
  3350 ;; Return value:  Size  Location     Type
  3351 ;;                  1    wreg      void 
  3352 ;; Registers used:
  3353 ;;		wreg, status,2, status,0
  3354 ;; Tracked objects:
  3355 ;;		On entry : 3F/1
  3356 ;;		On exit  : 3F/0
  3357 ;;		Unchanged: 0/0
  3358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3359 ;;      Params:         0       0       0       0       0       0       0       0       0
  3360 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3361 ;;      Temps:          0       1       0       0       0       0       0       0       0
  3362 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3363 ;;Total ram usage:        2 bytes
  3364 ;; Hardware stack levels used:    1
  3365 ;; Hardware stack levels required when called:    7
  3366 ;; This function calls:
  3367 ;;		Nothing
  3368 ;; This function is called by:
  3369 ;;		_main
  3370 ;; This function uses a non-reentrant model
  3371 ;;
  3372                           
  3373                           	psect	text2
  3374  0052C6                     __ptext2:
  3375                           	opt stack 0
  3376  0052C6                     _flash:
  3377                           	opt stack 23
  3378                           
  3379                           ; BSR set to: 1
  3380                           ;main.c: 130: for(uint8_t x = 0; x < 10; x++){
  3381                           
  3382                           ;incstack = 0
  3383  0052C6  0100               	movlb	0	; () banked
  3384  0052C8  6B61               	clrf	flash@x& (0+255),b
  3385  0052CA                     l11720:
  3386  0052CA  0E01               	movlw	1
  3387                           
  3388                           ; BSR set to: 0
  3389  0052CC  A47B               	btfss	3963,2,c	;volatile
  3390  0052CE  0E00               	movlw	0
  3391  0052D0  0AFF               	xorlw	255
  3392  0052D2  6F60               	movwf	??_flash& (0+255),b
  3393  0052D4  4760               	rlncf	??_flash& (0+255),f,b
  3394  0052D6  4760               	rlncf	??_flash& (0+255),f,b
  3395  0052D8  507B               	movf	3963,w,c	;volatile
  3396  0052DA  1960               	xorwf	??_flash& (0+255),w,b
  3397  0052DC  0BFB               	andlw	-5
  3398  0052DE  1960               	xorwf	??_flash& (0+255),w,b
  3399  0052E0  6E7B               	movwf	3963,c	;volatile
  3400                           
  3401                           ; BSR set to: 0
  3402                           ;main.c: 132: _delay((unsigned long)((25)*(16000000/4000.0)));
  3403  0052E2  0E82               	movlw	130
  3404  0052E4  0100               	movlb	0	; () banked
  3405  0052E6  6F60               	movwf	??_flash& (0+255),b
  3406  0052E8  0EDD               	movlw	221
  3407  0052EA                     u19807:
  3408  0052EA  2EE8               	decfsz	wreg,f,c
  3409  0052EC  D7FE               	bra	u19807
  3410  0052EE  2F60               	decfsz	??_flash& (0+255),f,b
  3411  0052F0  D7FC               	bra	u19807
  3412  0052F2  D000               	nop2	
  3413                           
  3414                           ;main.c: 133: _delay((unsigned long)((25)*(16000000/4000.0)));
  3415  0052F4  0E82               	movlw	130
  3416  0052F6  0100               	movlb	0	; () banked
  3417  0052F8  6F60               	movwf	??_flash& (0+255),b
  3418  0052FA  0EDD               	movlw	221
  3419  0052FC                     u19817:
  3420  0052FC  2EE8               	decfsz	wreg,f,c
  3421  0052FE  D7FE               	bra	u19817
  3422  005300  2F60               	decfsz	??_flash& (0+255),f,b
  3423  005302  D7FC               	bra	u19817
  3424  005304  D000               	nop2	
  3425  005306  0100               	movlb	0	; () banked
  3426  005308  2B61               	incf	flash@x& (0+255),f,b
  3427                           
  3428                           ; BSR set to: 0
  3429  00530A  0E09               	movlw	9
  3430  00530C  6561               	cpfsgt	flash@x& (0+255),b
  3431  00530E  D7DD               	goto	l11720
  3432                           
  3433                           ; BSR set to: 0
  3434                           
  3435                           ;main.c: 134: }
  3436                           ;main.c: 135: do { LATCbits.LATC2 = 0; } while(0);
  3437  005310  947B               	bcf	3963,2,c	;volatile
  3438                           
  3439                           ; BSR set to: 0
  3440  005312  0C09               	retlw	9	;funcret
  3441  005314                     __end_of_flash:
  3442                           	opt stack 0
  3443                           tosu	equ	0xFFF
  3444                           tosh	equ	0xFFE
  3445                           tosl	equ	0xFFD
  3446                           pclath	equ	0xFFA
  3447                           tblptru	equ	0xFF8
  3448                           tblptrh	equ	0xFF7
  3449                           tblptrl	equ	0xFF6
  3450                           tablat	equ	0xFF5
  3451                           prodh	equ	0xFF4
  3452                           prodl	equ	0xFF3
  3453                           intcon	equ	0xFF2
  3454                           indf0	equ	0xFEF
  3455                           postinc0	equ	0xFEE
  3456                           plusw0	equ	0xFEB
  3457                           fsr0h	equ	0xFEA
  3458                           fsr0l	equ	0xFE9
  3459                           wreg	equ	0xFE8
  3460                           postinc1	equ	0xFE6
  3461                           postdec1	equ	0xFE5
  3462                           plusw1	equ	0xFE3
  3463                           fsr1h	equ	0xFE2
  3464                           fsr1l	equ	0xFE1
  3465                           indf2	equ	0xFDF
  3466                           postinc2	equ	0xFDE
  3467                           postdec2	equ	0xFDD
  3468                           plusw2	equ	0xFDB
  3469                           fsr2h	equ	0xFDA
  3470                           fsr2l	equ	0xFD9
  3471                           status	equ	0xFD8
  3472                           
  3473 ;; *************** function _SYSTEM_Initialize *****************
  3474 ;; Defined at:
  3475 ;;		line 107 in file "mcc_generated_files/mcc.c"
  3476 ;; Parameters:    Size  Location     Type
  3477 ;;		None
  3478 ;; Auto vars:     Size  Location     Type
  3479 ;;		None
  3480 ;; Return value:  Size  Location     Type
  3481 ;;                  1    wreg      void 
  3482 ;; Registers used:
  3483 ;;		wreg, status,2, status,0, cstack
  3484 ;; Tracked objects:
  3485 ;;		On entry : 0/0
  3486 ;;		On exit  : 3F/0
  3487 ;;		Unchanged: 0/0
  3488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3489 ;;      Params:         0       0       0       0       0       0       0       0       0
  3490 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3491 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3492 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3493 ;;Total ram usage:        0 bytes
  3494 ;; Hardware stack levels used:    1
  3495 ;; Hardware stack levels required when called:   10
  3496 ;; This function calls:
  3497 ;;		_EXT_INT_Initialize
  3498 ;;		_INTERRUPT_Initialize
  3499 ;;		_LORAWAN_PlatformInit
  3500 ;;		_OSCILLATOR_Initialize
  3501 ;;		_PIN_MANAGER_Initialize
  3502 ;;		_SPI2_Initialize
  3503 ;;		_TMR1_Initialize
  3504 ;; This function is called by:
  3505 ;;		_main
  3506 ;; This function uses a non-reentrant model
  3507 ;;
  3508                           
  3509                           	psect	text3
  3510  005EDA                     __ptext3:
  3511                           	opt stack 0
  3512  005EDA                     _SYSTEM_Initialize:
  3513                           	opt stack 20
  3514                           
  3515                           ;mcc.c: 110: INTERRUPT_Initialize();
  3516                           
  3517                           ; BSR set to: 0
  3518                           ;incstack = 0
  3519  005EDA  EC20  F031         	call	_INTERRUPT_Initialize	;wreg free
  3520                           
  3521                           ;mcc.c: 111: PIN_MANAGER_Initialize();
  3522  005EDE  EC48  F01B         	call	_PIN_MANAGER_Initialize	;wreg free
  3523                           
  3524                           ;mcc.c: 112: OSCILLATOR_Initialize();
  3525  005EE2  EC4D  F030         	call	_OSCILLATOR_Initialize	;wreg free
  3526                           
  3527                           ; BSR set to: 14
  3528                           ;mcc.c: 113: SPI2_Initialize();
  3529  005EE6  EC87  F030         	call	_SPI2_Initialize	;wreg free
  3530                           
  3531                           ; BSR set to: 14
  3532                           ;mcc.c: 114: EXT_INT_Initialize();
  3533  005EEA  EC69  F028         	call	_EXT_INT_Initialize	;wreg free
  3534                           
  3535                           ; BSR set to: 14
  3536                           ;mcc.c: 115: TMR1_Initialize();
  3537  005EEE  ECDC  F02A         	call	_TMR1_Initialize	;wreg free
  3538                           
  3539                           ; BSR set to: 0
  3540                           ;mcc.c: 116: LORAWAN_PlatformInit();
  3541  005EF2  EFE2  F02E         	goto	_LORAWAN_PlatformInit	;wreg free
  3542  005EF6                     __end_of_SYSTEM_Initialize:
  3543                           	opt stack 0
  3544                           tosu	equ	0xFFF
  3545                           tosh	equ	0xFFE
  3546                           tosl	equ	0xFFD
  3547                           pclath	equ	0xFFA
  3548                           tblptru	equ	0xFF8
  3549                           tblptrh	equ	0xFF7
  3550                           tblptrl	equ	0xFF6
  3551                           tablat	equ	0xFF5
  3552                           prodh	equ	0xFF4
  3553                           prodl	equ	0xFF3
  3554                           intcon	equ	0xFF2
  3555                           indf0	equ	0xFEF
  3556                           postinc0	equ	0xFEE
  3557                           plusw0	equ	0xFEB
  3558                           fsr0h	equ	0xFEA
  3559                           fsr0l	equ	0xFE9
  3560                           wreg	equ	0xFE8
  3561                           postinc1	equ	0xFE6
  3562                           postdec1	equ	0xFE5
  3563                           plusw1	equ	0xFE3
  3564                           fsr1h	equ	0xFE2
  3565                           fsr1l	equ	0xFE1
  3566                           indf2	equ	0xFDF
  3567                           postinc2	equ	0xFDE
  3568                           postdec2	equ	0xFDD
  3569                           plusw2	equ	0xFDB
  3570                           fsr2h	equ	0xFDA
  3571                           fsr2l	equ	0xFD9
  3572                           status	equ	0xFD8
  3573                           
  3574 ;; *************** function _TMR1_Initialize *****************
  3575 ;; Defined at:
  3576 ;;		line 63 in file "mcc_generated_files/tmr1.c"
  3577 ;; Parameters:    Size  Location     Type
  3578 ;;		None
  3579 ;; Auto vars:     Size  Location     Type
  3580 ;;		None
  3581 ;; Return value:  Size  Location     Type
  3582 ;;                  1    wreg      void 
  3583 ;; Registers used:
  3584 ;;		wreg, status,2, status,0, cstack
  3585 ;; Tracked objects:
  3586 ;;		On entry : 3F/E
  3587 ;;		On exit  : 3F/0
  3588 ;;		Unchanged: 0/0
  3589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3590 ;;      Params:         0       0       0       0       0       0       0       0       0
  3591 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3592 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3593 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3594 ;;Total ram usage:        2 bytes
  3595 ;; Hardware stack levels used:    1
  3596 ;; Hardware stack levels required when called:    8
  3597 ;; This function calls:
  3598 ;;		_TMR1_SetInterruptHandler
  3599 ;;		_TMR1_StartTimer
  3600 ;; This function is called by:
  3601 ;;		_SYSTEM_Initialize
  3602 ;; This function uses a non-reentrant model
  3603 ;;
  3604                           
  3605                           	psect	text4
  3606  0055B8                     __ptext4:
  3607                           	opt stack 0
  3608  0055B8                     _TMR1_Initialize:
  3609                           	opt stack 21
  3610                           
  3611                           ; BSR set to: 14
  3612                           ;tmr1.c: 68: T1CON = 0x34;
  3613                           
  3614                           ; BSR set to: 0
  3615                           ;incstack = 0
  3616  0055B8  0E34               	movlw	52
  3617  0055BA  6ECF               	movwf	4047,c	;volatile
  3618                           
  3619                           ; BSR set to: 14
  3620                           ;tmr1.c: 71: T1GCON = 0x00;
  3621  0055BC  6AD0               	clrf	4048,c	;volatile
  3622                           
  3623                           ; BSR set to: 14
  3624                           ;tmr1.c: 74: T1GATE = 0x00;
  3625  0055BE  6AD1               	clrf	4049,c	;volatile
  3626                           
  3627                           ;tmr1.c: 77: T1CLK = 0x01;
  3628  0055C0  0E01               	movlw	1
  3629  0055C2  6ED2               	movwf	4050,c	;volatile
  3630                           
  3631                           ;tmr1.c: 80: TMR1H = 0x0B;
  3632  0055C4  0E0B               	movlw	11
  3633  0055C6  6ECE               	movwf	4046,c	;volatile
  3634                           
  3635                           ;tmr1.c: 83: TMR1L = 0xDC;
  3636  0055C8  0EDC               	movlw	220
  3637  0055CA  6ECD               	movwf	4045,c	;volatile
  3638                           
  3639                           ; BSR set to: 14
  3640                           ;tmr1.c: 86: timer1ReloadVal=(TMR1H << 8) | TMR1L;
  3641  0055CC  50CD               	movf	4045,w,c	;volatile
  3642  0055CE  CFCE F062          	movff	4046,??_TMR1_Initialize	;volatile
  3643  0055D2  0100               	movlb	0	; () banked
  3644  0055D4  6B63               	clrf	(??_TMR1_Initialize+1)& (0+255),b
  3645  0055D6  C062  F063         	movff	??_TMR1_Initialize,??_TMR1_Initialize+1
  3646  0055DA  6B62               	clrf	??_TMR1_Initialize& (0+255),b
  3647  0055DC  1162               	iorwf	??_TMR1_Initialize& (0+255),w,b
  3648  0055DE  6E5C               	movwf	_timer1ReloadVal,c	;volatile
  3649  0055E0  5163               	movf	(??_TMR1_Initialize+1)& (0+255),w,b
  3650  0055E2  6E5D               	movwf	_timer1ReloadVal+1,c	;volatile
  3651                           
  3652                           ; BSR set to: 0
  3653                           ;tmr1.c: 89: PIR5bits.TMR1IF = 0;
  3654  0055E4  010E               	movlb	14	; () banked
  3655  0055E6  9138               	bcf	56,0,b	;volatile
  3656                           
  3657                           ; BSR set to: 14
  3658                           ;tmr1.c: 92: PIE5bits.TMR1IE = 1;
  3659  0055E8  812E               	bsf	46,0,b	;volatile
  3660                           
  3661                           ; BSR set to: 14
  3662                           ;tmr1.c: 95: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
  3663  0055EA  0E68               	movlw	low _TMR1_DefaultInterruptHandler
  3664  0055EC  0100               	movlb	0	; () banked
  3665  0055EE  6F60               	movwf	TMR1_SetInterruptHandler@InterruptHandler& (0+255),b
  3666  0055F0  0E62               	movlw	high _TMR1_DefaultInterruptHandler
  3667  0055F2  6F61               	movwf	(TMR1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  3668  0055F4  ECA5  F030         	call	_TMR1_SetInterruptHandler	;wreg free
  3669                           
  3670                           ; BSR set to: 0
  3671                           ;tmr1.c: 98: TMR1_StartTimer();
  3672  0055F8  EF1C  F031         	goto	_TMR1_StartTimer	;wreg free
  3673  0055FC                     __end_of_TMR1_Initialize:
  3674                           	opt stack 0
  3675                           tosu	equ	0xFFF
  3676                           tosh	equ	0xFFE
  3677                           tosl	equ	0xFFD
  3678                           pclath	equ	0xFFA
  3679                           tblptru	equ	0xFF8
  3680                           tblptrh	equ	0xFF7
  3681                           tblptrl	equ	0xFF6
  3682                           tablat	equ	0xFF5
  3683                           prodh	equ	0xFF4
  3684                           prodl	equ	0xFF3
  3685                           intcon	equ	0xFF2
  3686                           indf0	equ	0xFEF
  3687                           postinc0	equ	0xFEE
  3688                           plusw0	equ	0xFEB
  3689                           fsr0h	equ	0xFEA
  3690                           fsr0l	equ	0xFE9
  3691                           wreg	equ	0xFE8
  3692                           postinc1	equ	0xFE6
  3693                           postdec1	equ	0xFE5
  3694                           plusw1	equ	0xFE3
  3695                           fsr1h	equ	0xFE2
  3696                           fsr1l	equ	0xFE1
  3697                           indf2	equ	0xFDF
  3698                           postinc2	equ	0xFDE
  3699                           postdec2	equ	0xFDD
  3700                           plusw2	equ	0xFDB
  3701                           fsr2h	equ	0xFDA
  3702                           fsr2l	equ	0xFD9
  3703                           status	equ	0xFD8
  3704                           
  3705 ;; *************** function _TMR1_StartTimer *****************
  3706 ;; Defined at:
  3707 ;;		line 101 in file "mcc_generated_files/tmr1.c"
  3708 ;; Parameters:    Size  Location     Type
  3709 ;;		None
  3710 ;; Auto vars:     Size  Location     Type
  3711 ;;		None
  3712 ;; Return value:  Size  Location     Type
  3713 ;;                  1    wreg      void 
  3714 ;; Registers used:
  3715 ;;		None
  3716 ;; Tracked objects:
  3717 ;;		On entry : 3F/0
  3718 ;;		On exit  : 3F/0
  3719 ;;		Unchanged: 3F/0
  3720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3721 ;;      Params:         0       0       0       0       0       0       0       0       0
  3722 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3723 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3724 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3725 ;;Total ram usage:        0 bytes
  3726 ;; Hardware stack levels used:    1
  3727 ;; Hardware stack levels required when called:    7
  3728 ;; This function calls:
  3729 ;;		Nothing
  3730 ;; This function is called by:
  3731 ;;		_TMR1_Initialize
  3732 ;; This function uses a non-reentrant model
  3733 ;;
  3734                           
  3735                           	psect	text5
  3736  006238                     __ptext5:
  3737                           	opt stack 0
  3738  006238                     _TMR1_StartTimer:
  3739                           	opt stack 21
  3740                           
  3741                           ; BSR set to: 0
  3742                           ;tmr1.c: 104: T1CONbits.TMR1ON = 1;
  3743                           
  3744                           ; BSR set to: 0
  3745                           ;incstack = 0
  3746  006238  80CF               	bsf	4047,0,c	;volatile
  3747                           
  3748                           ; BSR set to: 0
  3749  00623A  0012               	return		;funcret
  3750  00623C                     __end_of_TMR1_StartTimer:
  3751                           	opt stack 0
  3752                           tosu	equ	0xFFF
  3753                           tosh	equ	0xFFE
  3754                           tosl	equ	0xFFD
  3755                           pclath	equ	0xFFA
  3756                           tblptru	equ	0xFF8
  3757                           tblptrh	equ	0xFF7
  3758                           tblptrl	equ	0xFF6
  3759                           tablat	equ	0xFF5
  3760                           prodh	equ	0xFF4
  3761                           prodl	equ	0xFF3
  3762                           intcon	equ	0xFF2
  3763                           indf0	equ	0xFEF
  3764                           postinc0	equ	0xFEE
  3765                           plusw0	equ	0xFEB
  3766                           fsr0h	equ	0xFEA
  3767                           fsr0l	equ	0xFE9
  3768                           wreg	equ	0xFE8
  3769                           postinc1	equ	0xFE6
  3770                           postdec1	equ	0xFE5
  3771                           plusw1	equ	0xFE3
  3772                           fsr1h	equ	0xFE2
  3773                           fsr1l	equ	0xFE1
  3774                           indf2	equ	0xFDF
  3775                           postinc2	equ	0xFDE
  3776                           postdec2	equ	0xFDD
  3777                           plusw2	equ	0xFDB
  3778                           fsr2h	equ	0xFDA
  3779                           fsr2l	equ	0xFD9
  3780                           status	equ	0xFD8
  3781                           
  3782 ;; *************** function _SPI2_Initialize *****************
  3783 ;; Defined at:
  3784 ;;		line 63 in file "mcc_generated_files/spi2.c"
  3785 ;; Parameters:    Size  Location     Type
  3786 ;;		None
  3787 ;; Auto vars:     Size  Location     Type
  3788 ;;		None
  3789 ;; Return value:  Size  Location     Type
  3790 ;;                  1    wreg      void 
  3791 ;; Registers used:
  3792 ;;		wreg, status,2
  3793 ;; Tracked objects:
  3794 ;;		On entry : 3F/E
  3795 ;;		On exit  : 3F/E
  3796 ;;		Unchanged: 0/0
  3797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3798 ;;      Params:         0       0       0       0       0       0       0       0       0
  3799 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3800 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3801 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3802 ;;Total ram usage:        0 bytes
  3803 ;; Hardware stack levels used:    1
  3804 ;; Hardware stack levels required when called:    7
  3805 ;; This function calls:
  3806 ;;		Nothing
  3807 ;; This function is called by:
  3808 ;;		_SYSTEM_Initialize
  3809 ;; This function uses a non-reentrant model
  3810 ;;
  3811                           
  3812                           	psect	text6
  3813  00610E                     __ptext6:
  3814                           	opt stack 0
  3815  00610E                     _SPI2_Initialize:
  3816                           	opt stack 22
  3817                           
  3818                           ; BSR set to: 14
  3819                           ;spi2.c: 68: SSP2STAT = 0x40;
  3820                           
  3821                           ; BSR set to: 0
  3822                           ;incstack = 0
  3823  00610E  0E40               	movlw	64
  3824  006110  6FD8               	movwf	216,b	;volatile
  3825                           
  3826                           ;spi2.c: 71: SSP2CON1 = 0x20;
  3827  006112  0E20               	movlw	32
  3828  006114  6FD9               	movwf	217,b	;volatile
  3829                           
  3830                           ; BSR set to: 14
  3831                           ;spi2.c: 74: SSP2ADD = 0x00;
  3832  006116  6BD6               	clrf	214,b	;volatile
  3833                           
  3834                           ; BSR set to: 14
  3835  006118  0012               	return		;funcret
  3836  00611A                     __end_of_SPI2_Initialize:
  3837                           	opt stack 0
  3838                           tosu	equ	0xFFF
  3839                           tosh	equ	0xFFE
  3840                           tosl	equ	0xFFD
  3841                           pclath	equ	0xFFA
  3842                           tblptru	equ	0xFF8
  3843                           tblptrh	equ	0xFF7
  3844                           tblptrl	equ	0xFF6
  3845                           tablat	equ	0xFF5
  3846                           prodh	equ	0xFF4
  3847                           prodl	equ	0xFF3
  3848                           intcon	equ	0xFF2
  3849                           indf0	equ	0xFEF
  3850                           postinc0	equ	0xFEE
  3851                           plusw0	equ	0xFEB
  3852                           fsr0h	equ	0xFEA
  3853                           fsr0l	equ	0xFE9
  3854                           wreg	equ	0xFE8
  3855                           postinc1	equ	0xFE6
  3856                           postdec1	equ	0xFE5
  3857                           plusw1	equ	0xFE3
  3858                           fsr1h	equ	0xFE2
  3859                           fsr1l	equ	0xFE1
  3860                           indf2	equ	0xFDF
  3861                           postinc2	equ	0xFDE
  3862                           postdec2	equ	0xFDD
  3863                           plusw2	equ	0xFDB
  3864                           fsr2h	equ	0xFDA
  3865                           fsr2l	equ	0xFD9
  3866                           status	equ	0xFD8
  3867                           
  3868 ;; *************** function _PIN_MANAGER_Initialize *****************
  3869 ;; Defined at:
  3870 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  3871 ;; Parameters:    Size  Location     Type
  3872 ;;		None
  3873 ;; Auto vars:     Size  Location     Type
  3874 ;;  state           1    2[BANK0 ] unsigned char 
  3875 ;; Return value:  Size  Location     Type
  3876 ;;                  1    wreg      void 
  3877 ;; Registers used:
  3878 ;;		wreg, status,2, status,0, cstack
  3879 ;; Tracked objects:
  3880 ;;		On entry : 0/0
  3881 ;;		On exit  : 0/0
  3882 ;;		Unchanged: 0/0
  3883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3884 ;;      Params:         0       0       0       0       0       0       0       0       0
  3885 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3886 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3887 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3888 ;;Total ram usage:        1 bytes
  3889 ;; Hardware stack levels used:    1
  3890 ;; Hardware stack levels required when called:    8
  3891 ;; This function calls:
  3892 ;;		_IOCBF4_SetInterruptHandler
  3893 ;; This function is called by:
  3894 ;;		_SYSTEM_Initialize
  3895 ;; This function uses a non-reentrant model
  3896 ;;
  3897                           
  3898                           	psect	text7
  3899  003690                     __ptext7:
  3900                           	opt stack 0
  3901  003690                     _PIN_MANAGER_Initialize:
  3902                           	opt stack 21
  3903                           
  3904                           ;pin_manager.c: 57: LATE = 0x00;
  3905                           
  3906                           ; BSR set to: 14
  3907                           ;incstack = 0
  3908  003690  6A7D               	clrf	3965,c	;volatile
  3909                           
  3910                           ;pin_manager.c: 58: LATD = 0x00;
  3911  003692  6A7C               	clrf	3964,c	;volatile
  3912                           
  3913                           ;pin_manager.c: 59: LATA = 0x00;
  3914  003694  6A79               	clrf	3961,c	;volatile
  3915                           
  3916                           ;pin_manager.c: 60: LATF = 0x00;
  3917  003696  6A7E               	clrf	3966,c	;volatile
  3918                           
  3919                           ;pin_manager.c: 61: LATB = 0x00;
  3920  003698  6A7A               	clrf	3962,c	;volatile
  3921                           
  3922                           ;pin_manager.c: 62: LATG = 0x00;
  3923  00369A  6A7F               	clrf	3967,c	;volatile
  3924                           
  3925                           ;pin_manager.c: 63: LATC = 0x00;
  3926  00369C  6A7B               	clrf	3963,c	;volatile
  3927                           
  3928                           ;pin_manager.c: 64: LATH = 0x00;
  3929  00369E  6A80               	clrf	3968,c	;volatile
  3930                           
  3931                           ;pin_manager.c: 69: TRISE = 0xFF;
  3932  0036A0  6885               	setf	3973,c	;volatile
  3933                           
  3934                           ;pin_manager.c: 70: TRISF = 0xFF;
  3935  0036A2  6886               	setf	3974,c	;volatile
  3936                           
  3937                           ;pin_manager.c: 71: TRISA = 0xFF;
  3938  0036A4  6881               	setf	3969,c	;volatile
  3939                           
  3940                           ;pin_manager.c: 72: TRISG = 0xDF;
  3941  0036A6  0EDF               	movlw	223
  3942  0036A8  6E87               	movwf	3975,c	;volatile
  3943                           
  3944                           ;pin_manager.c: 73: TRISB = 0xFF;
  3945  0036AA  6882               	setf	3970,c	;volatile
  3946                           
  3947                           ;pin_manager.c: 74: TRISH = 0x0F;
  3948  0036AC  0E0F               	movlw	15
  3949  0036AE  6E88               	movwf	3976,c	;volatile
  3950                           
  3951                           ;pin_manager.c: 75: TRISC = 0xF9;
  3952  0036B0  0EF9               	movlw	249
  3953  0036B2  6E83               	movwf	3971,c	;volatile
  3954                           
  3955                           ;pin_manager.c: 76: TRISD = 0x9F;
  3956  0036B4  0E9F               	movlw	159
  3957  0036B6  6E84               	movwf	3972,c	;volatile
  3958                           
  3959                           ;pin_manager.c: 81: ANSELB = 0xE0;
  3960  0036B8  0EE0               	movlw	224
  3961  0036BA  010E               	movlb	14	; () banked
  3962  0036BC  6F9A               	movwf	154,b	;volatile
  3963                           
  3964                           ;pin_manager.c: 82: ANSELD = 0x7F;
  3965  0036BE  0E7F               	movlw	127
  3966  0036C0  6FA7               	movwf	167,b	;volatile
  3967                           
  3968                           ; BSR set to: 14
  3969                           ;pin_manager.c: 83: ANSELE = 0xFF;
  3970  0036C2  69AF               	setf	175,b	;volatile
  3971                           
  3972                           ; BSR set to: 14
  3973                           ;pin_manager.c: 84: ANSELG = 0xFF;
  3974  0036C4  69BC               	setf	188,b	;volatile
  3975                           
  3976                           ; BSR set to: 14
  3977                           ;pin_manager.c: 85: ANSELF = 0xFF;
  3978  0036C6  69B4               	setf	180,b	;volatile
  3979                           
  3980                           ; BSR set to: 14
  3981                           ;pin_manager.c: 86: ANSELA = 0xFF;
  3982  0036C8  6992               	setf	146,b	;volatile
  3983                           
  3984                           ; BSR set to: 14
  3985                           ;pin_manager.c: 91: WPUD = 0xFF;
  3986  0036CA  69A6               	setf	166,b	;volatile
  3987                           
  3988                           ; BSR set to: 14
  3989                           ;pin_manager.c: 92: WPUF = 0xFF;
  3990  0036CC  69B3               	setf	179,b	;volatile
  3991                           
  3992                           ; BSR set to: 14
  3993                           ;pin_manager.c: 93: WPUE = 0xFF;
  3994  0036CE  69AE               	setf	174,b	;volatile
  3995                           
  3996                           ; BSR set to: 14
  3997                           ;pin_manager.c: 94: WPUB = 0xFF;
  3998  0036D0  6999               	setf	153,b	;volatile
  3999                           
  4000                           ; BSR set to: 14
  4001                           ;pin_manager.c: 95: WPUG = 0xFF;
  4002  0036D2  69BB               	setf	187,b	;volatile
  4003                           
  4004                           ; BSR set to: 14
  4005                           ;pin_manager.c: 96: WPUA = 0xFF;
  4006  0036D4  6991               	setf	145,b	;volatile
  4007                           
  4008                           ; BSR set to: 14
  4009                           ;pin_manager.c: 97: WPUC = 0xFF;
  4010  0036D6  69A1               	setf	161,b	;volatile
  4011                           
  4012                           ;pin_manager.c: 98: WPUH = 0x0F;
  4013  0036D8  0E0F               	movlw	15
  4014  0036DA  6FC0               	movwf	192,b	;volatile
  4015                           
  4016                           ; BSR set to: 14
  4017                           ;pin_manager.c: 103: ODCONE = 0x00;
  4018  0036DC  6BAD               	clrf	173,b	;volatile
  4019                           
  4020                           ; BSR set to: 14
  4021                           ;pin_manager.c: 104: ODCONF = 0x00;
  4022  0036DE  6BB2               	clrf	178,b	;volatile
  4023                           
  4024                           ; BSR set to: 14
  4025                           ;pin_manager.c: 105: ODCONA = 0x00;
  4026  0036E0  6B90               	clrf	144,b	;volatile
  4027                           
  4028                           ; BSR set to: 14
  4029                           ;pin_manager.c: 106: ODCONG = 0x00;
  4030  0036E2  6BBA               	clrf	186,b	;volatile
  4031                           
  4032                           ; BSR set to: 14
  4033                           ;pin_manager.c: 107: ODCONB = 0x00;
  4034  0036E4  6B98               	clrf	152,b	;volatile
  4035                           
  4036                           ; BSR set to: 14
  4037                           ;pin_manager.c: 108: ODCONH = 0x00;
  4038  0036E6  6BBF               	clrf	191,b	;volatile
  4039                           
  4040                           ; BSR set to: 14
  4041                           ;pin_manager.c: 109: ODCONC = 0x00;
  4042  0036E8  6BA0               	clrf	160,b	;volatile
  4043                           
  4044                           ; BSR set to: 14
  4045                           ;pin_manager.c: 110: ODCOND = 0x00;
  4046  0036EA  6BA5               	clrf	165,b	;volatile
  4047                           
  4048                           ; BSR set to: 14
  4049                           ;pin_manager.c: 117: IOCBFbits.IOCBF4 = 0;
  4050  0036EC  9993               	bcf	147,4,b	;volatile
  4051                           
  4052                           ; BSR set to: 14
  4053                           ;pin_manager.c: 119: IOCBNbits.IOCBN4 = 1;
  4054  0036EE  8994               	bsf	148,4,b	;volatile
  4055                           
  4056                           ; BSR set to: 14
  4057                           ;pin_manager.c: 121: IOCBPbits.IOCBP4 = 1;
  4058  0036F0  8995               	bsf	149,4,b	;volatile
  4059                           
  4060                           ; BSR set to: 14
  4061                           ;pin_manager.c: 124: IOCBF4_SetInterruptHandler(IOCBF4_DefaultInterruptHandler);
  4062  0036F2  0E6A               	movlw	low _IOCBF4_DefaultInterruptHandler
  4063  0036F4  0100               	movlb	0	; () banked
  4064  0036F6  6F60               	movwf	IOCBF4_SetInterruptHandler@InterruptHandler& (0+255),b
  4065  0036F8  0E62               	movlw	high _IOCBF4_DefaultInterruptHandler
  4066  0036FA  6F61               	movwf	(IOCBF4_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4067  0036FC  ECAA  F030         	call	_IOCBF4_SetInterruptHandler	;wreg free
  4068                           
  4069                           ; BSR set to: 0
  4070                           ;pin_manager.c: 127: PIE0bits.IOCIE = 1;
  4071  003700  010E               	movlb	14	; () banked
  4072  003702  8929               	bsf	41,4,b	;volatile
  4073                           
  4074                           ; BSR set to: 14
  4075                           ;pin_manager.c: 130: bool state = GIE;
  4076  003704  0E00               	movlw	0
  4077  003706  BEF2               	btfsc	intcon,7,c	;volatile
  4078  003708  0E01               	movlw	1
  4079  00370A  0100               	movlb	0	; () banked
  4080  00370C  6F62               	movwf	PIN_MANAGER_Initialize@state& (0+255),b
  4081                           
  4082                           ; BSR set to: 0
  4083                           ;pin_manager.c: 131: GIE = 0;
  4084  00370E  9EF2               	bcf	intcon,7,c	;volatile
  4085                           
  4086                           ; BSR set to: 0
  4087                           ;pin_manager.c: 132: PPSLOCK = 0x55;
  4088                           
  4089                           ; BSR set to: 13
  4090                           ;pin_manager.c: 133: PPSLOCK = 0xAA;
  4091  003710  D825               	call	PL340	;call to abstracted procedure
  4092                           
  4093                           ; BSR set to: 13
  4094                           ;pin_manager.c: 134: PPSLOCKbits.PPSLOCKED = 0x00;
  4095  003712  91EF               	bcf	239,0,b	;volatile
  4096                           
  4097                           ; BSR set to: 13
  4098                           ;pin_manager.c: 136: INT1PPSbits.INT1PPS = 0x09;
  4099  003714  51F1               	movf	241,w,b	;volatile
  4100  003716  0BC0               	andlw	-64
  4101  003718  0909               	iorlw	9
  4102  00371A  6FF1               	movwf	241,b	;volatile
  4103                           
  4104                           ; BSR set to: 13
  4105                           ;pin_manager.c: 137: INT3PPSbits.INT3PPS = 0x0B;
  4106  00371C  51F3               	movf	243,w,b	;volatile
  4107  00371E  0BC0               	andlw	-64
  4108  003720  090B               	iorlw	11
  4109  003722  6FF3               	movwf	243,b	;volatile
  4110                           
  4111                           ; BSR set to: 13
  4112                           ;pin_manager.c: 138: RD5PPS = 0x1C;
  4113  003724  0E1C               	movlw	28
  4114  003726  010E               	movlb	14	; () banked
  4115  003728  6F6F               	movwf	111,b	;volatile
  4116                           
  4117                           ; BSR set to: 14
  4118                           ;pin_manager.c: 139: INT0PPSbits.INT0PPS = 0x08;
  4119  00372A  010D               	movlb	13	; () banked
  4120  00372C  51F0               	movf	240,w,b	;volatile
  4121  00372E  0BC0               	andlw	-64
  4122  003730  0908               	iorlw	8
  4123  003732  6FF0               	movwf	240,b	;volatile
  4124                           
  4125                           ; BSR set to: 13
  4126                           ;pin_manager.c: 140: INT2PPSbits.INT2PPS = 0x0A;
  4127  003734  51F2               	movf	242,w,b	;volatile
  4128  003736  0BC0               	andlw	-64
  4129  003738  090A               	iorlw	10
  4130  00373A  6FF2               	movwf	242,b	;volatile
  4131                           
  4132                           ; BSR set to: 13
  4133                           ;pin_manager.c: 141: RD6PPS = 0x1B;
  4134  00373C  0E1B               	movlw	27
  4135  00373E  010E               	movlb	14	; () banked
  4136  003740  6F70               	movwf	112,b	;volatile
  4137                           
  4138                           ; BSR set to: 14
  4139                           ;pin_manager.c: 142: SSP2DATPPSbits.SSP2DATPPS = 0x1F;
  4140  003742  511D               	movf	29,w,b	;volatile
  4141  003744  0BC0               	andlw	-64
  4142  003746  091F               	iorlw	31
  4143  003748  6F1D               	movwf	29,b	;volatile
  4144                           
  4145                           ; BSR set to: 14
  4146                           ;pin_manager.c: 144: PPSLOCK = 0x55;
  4147                           
  4148                           ; BSR set to: 13
  4149                           ;pin_manager.c: 145: PPSLOCK = 0xAA;
  4150  00374A  D808               	call	PL340	;call to abstracted procedure
  4151                           
  4152                           ; BSR set to: 13
  4153                           ;pin_manager.c: 146: PPSLOCKbits.PPSLOCKED = 0x01;
  4154  00374C  81EF               	bsf	239,0,b	;volatile
  4155                           
  4156                           ; BSR set to: 13
  4157                           ;pin_manager.c: 148: GIE = state;
  4158  00374E  0100               	movlb	0	; () banked
  4159  003750  A162               	btfss	PIN_MANAGER_Initialize@state& (0+255),0,b
  4160  003752  D002               	goto	u12160
  4161  003754  8EF2               	bsf	intcon,7,c	;volatile
  4162  003756  0CAA               	retlw	170
  4163  003758                     u12160:
  4164  003758  9EF2               	bcf	intcon,7,c	;volatile
  4165  00375A  0012               	return		;funcret
  4166  00375C                     __end_of_PIN_MANAGER_Initialize:
  4167                           	opt stack 0
  4168  00375C                     PL340:
  4169                           	opt stack 21
  4170  00375C  0E55               	movlw	85
  4171  00375E  010D               	movlb	13	; () banked
  4172  003760  6FEF               	movwf	239,b	;volatile
  4173  003762  0EAA               	movlw	170
  4174  003764  6FEF               	movwf	239,b	;volatile
  4175  003766  0CAA               	retlw	170
  4176  003768                     __end_ofPL340:
  4177                           	opt stack 0
  4178                           tosu	equ	0xFFF
  4179                           tosh	equ	0xFFE
  4180                           tosl	equ	0xFFD
  4181                           pclath	equ	0xFFA
  4182                           tblptru	equ	0xFF8
  4183                           tblptrh	equ	0xFF7
  4184                           tblptrl	equ	0xFF6
  4185                           tablat	equ	0xFF5
  4186                           prodh	equ	0xFF4
  4187                           prodl	equ	0xFF3
  4188                           intcon	equ	0xFF2
  4189                           indf0	equ	0xFEF
  4190                           postinc0	equ	0xFEE
  4191                           plusw0	equ	0xFEB
  4192                           fsr0h	equ	0xFEA
  4193                           fsr0l	equ	0xFE9
  4194                           wreg	equ	0xFE8
  4195                           postinc1	equ	0xFE6
  4196                           postdec1	equ	0xFE5
  4197                           plusw1	equ	0xFE3
  4198                           fsr1h	equ	0xFE2
  4199                           fsr1l	equ	0xFE1
  4200                           indf2	equ	0xFDF
  4201                           postinc2	equ	0xFDE
  4202                           postdec2	equ	0xFDD
  4203                           plusw2	equ	0xFDB
  4204                           fsr2h	equ	0xFDA
  4205                           fsr2l	equ	0xFD9
  4206                           status	equ	0xFD8
  4207                           
  4208 ;; *************** function _OSCILLATOR_Initialize *****************
  4209 ;; Defined at:
  4210 ;;		line 119 in file "mcc_generated_files/mcc.c"
  4211 ;; Parameters:    Size  Location     Type
  4212 ;;		None
  4213 ;; Auto vars:     Size  Location     Type
  4214 ;;		None
  4215 ;; Return value:  Size  Location     Type
  4216 ;;                  1    wreg      void 
  4217 ;; Registers used:
  4218 ;;		wreg, status,2
  4219 ;; Tracked objects:
  4220 ;;		On entry : 0/0
  4221 ;;		On exit  : 3F/E
  4222 ;;		Unchanged: 0/0
  4223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4224 ;;      Params:         0       0       0       0       0       0       0       0       0
  4225 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4226 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4227 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4228 ;;Total ram usage:        0 bytes
  4229 ;; Hardware stack levels used:    1
  4230 ;; Hardware stack levels required when called:    7
  4231 ;; This function calls:
  4232 ;;		Nothing
  4233 ;; This function is called by:
  4234 ;;		_SYSTEM_Initialize
  4235 ;; This function uses a non-reentrant model
  4236 ;;
  4237                           
  4238                           	psect	text8
  4239  00609A                     __ptext8:
  4240                           	opt stack 0
  4241  00609A                     _OSCILLATOR_Initialize:
  4242                           	opt stack 22
  4243                           
  4244                           ;mcc.c: 122: OSCCON1 = 0x60;
  4245                           
  4246                           ;incstack = 0
  4247  00609A  0E60               	movlw	96
  4248  00609C  010E               	movlb	14	; () banked
  4249  00609E  6F43               	movwf	67,b	;volatile
  4250                           
  4251                           ; BSR set to: 14
  4252                           ;mcc.c: 124: OSCCON3 = 0x00;
  4253  0060A0  6B45               	clrf	69,b	;volatile
  4254                           
  4255                           ; BSR set to: 14
  4256                           ;mcc.c: 126: OSCEN = 0x00;
  4257  0060A2  6B47               	clrf	71,b	;volatile
  4258                           
  4259                           ;mcc.c: 128: OSCFRQ = 0x05;
  4260  0060A4  0E05               	movlw	5
  4261  0060A6  6F49               	movwf	73,b	;volatile
  4262                           
  4263                           ; BSR set to: 14
  4264                           ;mcc.c: 130: OSCTUNE = 0x00;
  4265  0060A8  6B48               	clrf	72,b	;volatile
  4266                           
  4267                           ; BSR set to: 14
  4268  0060AA  0012               	return		;funcret
  4269  0060AC                     __end_of_OSCILLATOR_Initialize:
  4270                           	opt stack 0
  4271                           tosu	equ	0xFFF
  4272                           tosh	equ	0xFFE
  4273                           tosl	equ	0xFFD
  4274                           pclath	equ	0xFFA
  4275                           tblptru	equ	0xFF8
  4276                           tblptrh	equ	0xFF7
  4277                           tblptrl	equ	0xFF6
  4278                           tablat	equ	0xFF5
  4279                           prodh	equ	0xFF4
  4280                           prodl	equ	0xFF3
  4281                           intcon	equ	0xFF2
  4282                           indf0	equ	0xFEF
  4283                           postinc0	equ	0xFEE
  4284                           plusw0	equ	0xFEB
  4285                           fsr0h	equ	0xFEA
  4286                           fsr0l	equ	0xFE9
  4287                           wreg	equ	0xFE8
  4288                           postinc1	equ	0xFE6
  4289                           postdec1	equ	0xFE5
  4290                           plusw1	equ	0xFE3
  4291                           fsr1h	equ	0xFE2
  4292                           fsr1l	equ	0xFE1
  4293                           indf2	equ	0xFDF
  4294                           postinc2	equ	0xFDE
  4295                           postdec2	equ	0xFDD
  4296                           plusw2	equ	0xFDB
  4297                           fsr2h	equ	0xFDA
  4298                           fsr2l	equ	0xFD9
  4299                           status	equ	0xFD8
  4300                           
  4301 ;; *************** function _LORAWAN_PlatformInit *****************
  4302 ;; Defined at:
  4303 ;;		line 72 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4304 ;; Parameters:    Size  Location     Type
  4305 ;;		None
  4306 ;; Auto vars:     Size  Location     Type
  4307 ;;		None
  4308 ;; Return value:  Size  Location     Type
  4309 ;;                  1    wreg      void 
  4310 ;; Registers used:
  4311 ;;		wreg, status,2, status,0, cstack
  4312 ;; Tracked objects:
  4313 ;;		On entry : 3F/0
  4314 ;;		On exit  : 3F/0
  4315 ;;		Unchanged: 0/0
  4316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4317 ;;      Params:         0       0       0       0       0       0       0       0       0
  4318 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4319 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4320 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4321 ;;Total ram usage:        0 bytes
  4322 ;; Hardware stack levels used:    1
  4323 ;; Hardware stack levels required when called:    9
  4324 ;; This function calls:
  4325 ;;		_DIO0_ISR_Lora_Init
  4326 ;;		_DIO1_ISR_Lora_Init
  4327 ;;		_DIO2_ISR_Lora_Init
  4328 ;;		_DIO3_ISR_Lora_Init
  4329 ;;		_DIO4_ISR_Lora_Init
  4330 ;;		_DIO5_ISR_Lora_Init
  4331 ;;		_SystemTimerInit
  4332 ;;		_TMR_ISR_Lora_Init
  4333 ;; This function is called by:
  4334 ;;		_SYSTEM_Initialize
  4335 ;; This function uses a non-reentrant model
  4336 ;;
  4337                           
  4338                           	psect	text9
  4339  005DC4                     __ptext9:
  4340                           	opt stack 0
  4341  005DC4                     _LORAWAN_PlatformInit:
  4342                           	opt stack 20
  4343                           
  4344                           ; BSR set to: 0
  4345                           ;lorawan_init.c: 74: TMR_ISR_Lora_Init();
  4346                           
  4347                           ; BSR set to: 14
  4348                           ;incstack = 0
  4349  005DC4  EC8D  F030         	call	_TMR_ISR_Lora_Init	;wreg free
  4350                           
  4351                           ;lorawan_init.c: 75: DIO0_ISR_Lora_Init();
  4352  005DC8  EC01  F031         	call	_DIO0_ISR_Lora_Init	;wreg free
  4353                           
  4354                           ;lorawan_init.c: 76: DIO1_ISR_Lora_Init();
  4355  005DCC  EC9F  F030         	call	_DIO1_ISR_Lora_Init	;wreg free
  4356                           
  4357                           ;lorawan_init.c: 77: DIO2_ISR_Lora_Init();
  4358  005DD0  EC99  F030         	call	_DIO2_ISR_Lora_Init	;wreg free
  4359                           
  4360                           ; BSR set to: 0
  4361                           ;lorawan_init.c: 78: DIO3_ISR_Lora_Init();
  4362  005DD4  EC31  F031         	call	_DIO3_ISR_Lora_Init	;wreg free
  4363                           
  4364                           ; BSR set to: 0
  4365                           ;lorawan_init.c: 79: DIO4_ISR_Lora_Init();
  4366  005DD8  EC30  F031         	call	_DIO4_ISR_Lora_Init	;wreg free
  4367                           
  4368                           ;lorawan_init.c: 80: DIO5_ISR_Lora_Init();
  4369  005DDC  EC93  F030         	call	_DIO5_ISR_Lora_Init	;wreg free
  4370                           
  4371                           ; BSR set to: 0
  4372                           ;lorawan_init.c: 81: SystemTimerInit();
  4373  005DE0  EF1E  F031         	goto	_SystemTimerInit	;wreg free
  4374  005DE4                     __end_of_LORAWAN_PlatformInit:
  4375                           	opt stack 0
  4376                           tosu	equ	0xFFF
  4377                           tosh	equ	0xFFE
  4378                           tosl	equ	0xFFD
  4379                           pclath	equ	0xFFA
  4380                           tblptru	equ	0xFF8
  4381                           tblptrh	equ	0xFF7
  4382                           tblptrl	equ	0xFF6
  4383                           tablat	equ	0xFF5
  4384                           prodh	equ	0xFF4
  4385                           prodl	equ	0xFF3
  4386                           intcon	equ	0xFF2
  4387                           indf0	equ	0xFEF
  4388                           postinc0	equ	0xFEE
  4389                           plusw0	equ	0xFEB
  4390                           fsr0h	equ	0xFEA
  4391                           fsr0l	equ	0xFE9
  4392                           wreg	equ	0xFE8
  4393                           postinc1	equ	0xFE6
  4394                           postdec1	equ	0xFE5
  4395                           plusw1	equ	0xFE3
  4396                           fsr1h	equ	0xFE2
  4397                           fsr1l	equ	0xFE1
  4398                           indf2	equ	0xFDF
  4399                           postinc2	equ	0xFDE
  4400                           postdec2	equ	0xFDD
  4401                           plusw2	equ	0xFDB
  4402                           fsr2h	equ	0xFDA
  4403                           fsr2l	equ	0xFD9
  4404                           status	equ	0xFD8
  4405                           
  4406 ;; *************** function _TMR_ISR_Lora_Init *****************
  4407 ;; Defined at:
  4408 ;;		line 54 in file "mcc_generated_files/LoRaWAN/tmr_lora_addons.c"
  4409 ;; Parameters:    Size  Location     Type
  4410 ;;		None
  4411 ;; Auto vars:     Size  Location     Type
  4412 ;;		None
  4413 ;; Return value:  Size  Location     Type
  4414 ;;                  1    wreg      void 
  4415 ;; Registers used:
  4416 ;;		wreg, status,2, status,0, cstack
  4417 ;; Tracked objects:
  4418 ;;		On entry : 3F/0
  4419 ;;		On exit  : 3F/0
  4420 ;;		Unchanged: 0/0
  4421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4422 ;;      Params:         0       0       0       0       0       0       0       0       0
  4423 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4424 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4425 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4426 ;;Total ram usage:        0 bytes
  4427 ;; Hardware stack levels used:    1
  4428 ;; Hardware stack levels required when called:    8
  4429 ;; This function calls:
  4430 ;;		_TMR1_SetInterruptHandler
  4431 ;; This function is called by:
  4432 ;;		_LORAWAN_PlatformInit
  4433 ;; This function uses a non-reentrant model
  4434 ;;
  4435                           
  4436                           	psect	text10
  4437  00611A                     __ptext10:
  4438                           	opt stack 0
  4439  00611A                     _TMR_ISR_Lora_Init:
  4440                           	opt stack 20
  4441                           
  4442                           ; BSR set to: 0
  4443                           ;tmr_lora_addons.c: 56: TMR1_SetInterruptHandler(TMR_ISR_lora);
  4444                           
  4445                           ; BSR set to: 0
  4446                           ;incstack = 0
  4447  00611A  0E76               	movlw	low _TMR_ISR_lora
  4448  00611C  6F60               	movwf	TMR1_SetInterruptHandler@InterruptHandler& (0+255),b
  4449  00611E  0E52               	movlw	high _TMR_ISR_lora
  4450  006120  6F61               	movwf	(TMR1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4451  006122  EFA5  F030         	goto	_TMR1_SetInterruptHandler	;wreg free
  4452  006126                     __end_of_TMR_ISR_Lora_Init:
  4453                           	opt stack 0
  4454                           tosu	equ	0xFFF
  4455                           tosh	equ	0xFFE
  4456                           tosl	equ	0xFFD
  4457                           pclath	equ	0xFFA
  4458                           tblptru	equ	0xFF8
  4459                           tblptrh	equ	0xFF7
  4460                           tblptrl	equ	0xFF6
  4461                           tablat	equ	0xFF5
  4462                           prodh	equ	0xFF4
  4463                           prodl	equ	0xFF3
  4464                           intcon	equ	0xFF2
  4465                           indf0	equ	0xFEF
  4466                           postinc0	equ	0xFEE
  4467                           plusw0	equ	0xFEB
  4468                           fsr0h	equ	0xFEA
  4469                           fsr0l	equ	0xFE9
  4470                           wreg	equ	0xFE8
  4471                           postinc1	equ	0xFE6
  4472                           postdec1	equ	0xFE5
  4473                           plusw1	equ	0xFE3
  4474                           fsr1h	equ	0xFE2
  4475                           fsr1l	equ	0xFE1
  4476                           indf2	equ	0xFDF
  4477                           postinc2	equ	0xFDE
  4478                           postdec2	equ	0xFDD
  4479                           plusw2	equ	0xFDB
  4480                           fsr2h	equ	0xFDA
  4481                           fsr2l	equ	0xFD9
  4482                           status	equ	0xFD8
  4483                           
  4484 ;; *************** function _TMR1_SetInterruptHandler *****************
  4485 ;; Defined at:
  4486 ;;		line 191 in file "mcc_generated_files/tmr1.c"
  4487 ;; Parameters:    Size  Location     Type
  4488 ;;  InterruptHan    2    0[BANK0 ] PTR void 
  4489 ;;		 -> TMR1_DefaultInterruptHandler(1), TMR_ISR_lora(1), 
  4490 ;; Auto vars:     Size  Location     Type
  4491 ;;		None
  4492 ;; Return value:  Size  Location     Type
  4493 ;;                  1    wreg      void 
  4494 ;; Registers used:
  4495 ;;		wreg, status,2, status,0
  4496 ;; Tracked objects:
  4497 ;;		On entry : 3F/0
  4498 ;;		On exit  : 3F/0
  4499 ;;		Unchanged: 3F/0
  4500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4501 ;;      Params:         0       2       0       0       0       0       0       0       0
  4502 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4503 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4504 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4505 ;;Total ram usage:        2 bytes
  4506 ;; Hardware stack levels used:    1
  4507 ;; Hardware stack levels required when called:    7
  4508 ;; This function calls:
  4509 ;;		Nothing
  4510 ;; This function is called by:
  4511 ;;		_TMR_ISR_Lora_Init
  4512 ;;		_TMR1_Initialize
  4513 ;; This function uses a non-reentrant model
  4514 ;;
  4515                           
  4516                           	psect	text11
  4517  00614A                     __ptext11:
  4518                           	opt stack 0
  4519  00614A                     _TMR1_SetInterruptHandler:
  4520                           	opt stack 21
  4521                           
  4522                           ; BSR set to: 0
  4523                           ;tmr1.c: 192: TMR1_InterruptHandler = InterruptHandler;
  4524                           
  4525                           ; BSR set to: 0
  4526                           ;incstack = 0
  4527  00614A  C060  F1F9         	movff	TMR1_SetInterruptHandler@InterruptHandler,_TMR1_InterruptHandler
  4528  00614E  C061  F1FA         	movff	TMR1_SetInterruptHandler@InterruptHandler+1,_TMR1_InterruptHandler+1
  4529                           
  4530                           ; BSR set to: 0
  4531  006152  0012               	return		;funcret
  4532  006154                     __end_of_TMR1_SetInterruptHandler:
  4533                           	opt stack 0
  4534                           tosu	equ	0xFFF
  4535                           tosh	equ	0xFFE
  4536                           tosl	equ	0xFFD
  4537                           pclath	equ	0xFFA
  4538                           tblptru	equ	0xFF8
  4539                           tblptrh	equ	0xFF7
  4540                           tblptrl	equ	0xFF6
  4541                           tablat	equ	0xFF5
  4542                           prodh	equ	0xFF4
  4543                           prodl	equ	0xFF3
  4544                           intcon	equ	0xFF2
  4545                           indf0	equ	0xFEF
  4546                           postinc0	equ	0xFEE
  4547                           plusw0	equ	0xFEB
  4548                           fsr0h	equ	0xFEA
  4549                           fsr0l	equ	0xFE9
  4550                           wreg	equ	0xFE8
  4551                           postinc1	equ	0xFE6
  4552                           postdec1	equ	0xFE5
  4553                           plusw1	equ	0xFE3
  4554                           fsr1h	equ	0xFE2
  4555                           fsr1l	equ	0xFE1
  4556                           indf2	equ	0xFDF
  4557                           postinc2	equ	0xFDE
  4558                           postdec2	equ	0xFDD
  4559                           plusw2	equ	0xFDB
  4560                           fsr2h	equ	0xFDA
  4561                           fsr2l	equ	0xFD9
  4562                           status	equ	0xFD8
  4563                           
  4564 ;; *************** function _SystemTimerInit *****************
  4565 ;; Defined at:
  4566 ;;		line 135 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
  4567 ;; Parameters:    Size  Location     Type
  4568 ;;		None
  4569 ;; Auto vars:     Size  Location     Type
  4570 ;;		None
  4571 ;; Return value:  Size  Location     Type
  4572 ;;                  1    wreg      void 
  4573 ;; Registers used:
  4574 ;;		None
  4575 ;; Tracked objects:
  4576 ;;		On entry : 3F/0
  4577 ;;		On exit  : 3F/0
  4578 ;;		Unchanged: 0/0
  4579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4580 ;;      Params:         0       0       0       0       0       0       0       0       0
  4581 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4582 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4583 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4584 ;;Total ram usage:        0 bytes
  4585 ;; Hardware stack levels used:    1
  4586 ;; Hardware stack levels required when called:    7
  4587 ;; This function calls:
  4588 ;;		Nothing
  4589 ;; This function is called by:
  4590 ;;		_LORAWAN_PlatformInit
  4591 ;; This function uses a non-reentrant model
  4592 ;;
  4593                           
  4594                           	psect	text12
  4595  00623C                     __ptext12:
  4596                           	opt stack 0
  4597  00623C                     _SystemTimerInit:
  4598                           	opt stack 21
  4599                           
  4600                           ; BSR set to: 0
  4601                           ;sw_timer.c: 137: allocatedTimers = 0;
  4602                           
  4603                           ; BSR set to: 0
  4604                           ;incstack = 0
  4605  00623C  6BFF               	clrf	_allocatedTimers& (0+255),b	;volatile
  4606                           
  4607                           ; BSR set to: 0
  4608  00623E  0012               	return		;funcret
  4609  006240                     __end_of_SystemTimerInit:
  4610                           	opt stack 0
  4611                           tosu	equ	0xFFF
  4612                           tosh	equ	0xFFE
  4613                           tosl	equ	0xFFD
  4614                           pclath	equ	0xFFA
  4615                           tblptru	equ	0xFF8
  4616                           tblptrh	equ	0xFF7
  4617                           tblptrl	equ	0xFF6
  4618                           tablat	equ	0xFF5
  4619                           prodh	equ	0xFF4
  4620                           prodl	equ	0xFF3
  4621                           intcon	equ	0xFF2
  4622                           indf0	equ	0xFEF
  4623                           postinc0	equ	0xFEE
  4624                           plusw0	equ	0xFEB
  4625                           fsr0h	equ	0xFEA
  4626                           fsr0l	equ	0xFE9
  4627                           wreg	equ	0xFE8
  4628                           postinc1	equ	0xFE6
  4629                           postdec1	equ	0xFE5
  4630                           plusw1	equ	0xFE3
  4631                           fsr1h	equ	0xFE2
  4632                           fsr1l	equ	0xFE1
  4633                           indf2	equ	0xFDF
  4634                           postinc2	equ	0xFDE
  4635                           postdec2	equ	0xFDD
  4636                           plusw2	equ	0xFDB
  4637                           fsr2h	equ	0xFDA
  4638                           fsr2l	equ	0xFD9
  4639                           status	equ	0xFD8
  4640                           
  4641 ;; *************** function _DIO5_ISR_Lora_Init *****************
  4642 ;; Defined at:
  4643 ;;		line 67 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4644 ;; Parameters:    Size  Location     Type
  4645 ;;		None
  4646 ;; Auto vars:     Size  Location     Type
  4647 ;;		None
  4648 ;; Return value:  Size  Location     Type
  4649 ;;                  1    wreg      void 
  4650 ;; Registers used:
  4651 ;;		wreg, status,2, status,0, cstack
  4652 ;; Tracked objects:
  4653 ;;		On entry : 3F/0
  4654 ;;		On exit  : 3F/0
  4655 ;;		Unchanged: 0/0
  4656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4657 ;;      Params:         0       0       0       0       0       0       0       0       0
  4658 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4659 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4660 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4661 ;;Total ram usage:        0 bytes
  4662 ;; Hardware stack levels used:    1
  4663 ;; Hardware stack levels required when called:    8
  4664 ;; This function calls:
  4665 ;;		_INT2_SetInterruptHandler
  4666 ;; This function is called by:
  4667 ;;		_LORAWAN_PlatformInit
  4668 ;; This function uses a non-reentrant model
  4669 ;;
  4670                           
  4671                           	psect	text13
  4672  006126                     __ptext13:
  4673                           	opt stack 0
  4674  006126                     _DIO5_ISR_Lora_Init:
  4675                           	opt stack 20
  4676                           
  4677                           ; BSR set to: 0
  4678                           ;lorawan_init.c: 69: INT2_SetInterruptHandler(DIO5_ISR_Lora);
  4679                           
  4680                           ; BSR set to: 0
  4681                           ;incstack = 0
  4682  006126  0E58               	movlw	low _DIO5_ISR_Lora
  4683  006128  6F60               	movwf	INT2_SetInterruptHandler@InterruptHandler& (0+255),b
  4684  00612A  0E62               	movlw	high _DIO5_ISR_Lora
  4685  00612C  6F61               	movwf	(INT2_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4686  00612E  EFB4  F030         	goto	_INT2_SetInterruptHandler	;wreg free
  4687  006132                     __end_of_DIO5_ISR_Lora_Init:
  4688                           	opt stack 0
  4689                           tosu	equ	0xFFF
  4690                           tosh	equ	0xFFE
  4691                           tosl	equ	0xFFD
  4692                           pclath	equ	0xFFA
  4693                           tblptru	equ	0xFF8
  4694                           tblptrh	equ	0xFF7
  4695                           tblptrl	equ	0xFF6
  4696                           tablat	equ	0xFF5
  4697                           prodh	equ	0xFF4
  4698                           prodl	equ	0xFF3
  4699                           intcon	equ	0xFF2
  4700                           indf0	equ	0xFEF
  4701                           postinc0	equ	0xFEE
  4702                           plusw0	equ	0xFEB
  4703                           fsr0h	equ	0xFEA
  4704                           fsr0l	equ	0xFE9
  4705                           wreg	equ	0xFE8
  4706                           postinc1	equ	0xFE6
  4707                           postdec1	equ	0xFE5
  4708                           plusw1	equ	0xFE3
  4709                           fsr1h	equ	0xFE2
  4710                           fsr1l	equ	0xFE1
  4711                           indf2	equ	0xFDF
  4712                           postinc2	equ	0xFDE
  4713                           postdec2	equ	0xFDD
  4714                           plusw2	equ	0xFDB
  4715                           fsr2h	equ	0xFDA
  4716                           fsr2l	equ	0xFD9
  4717                           status	equ	0xFD8
  4718                           
  4719 ;; *************** function _DIO4_ISR_Lora_Init *****************
  4720 ;; Defined at:
  4721 ;;		line 63 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4722 ;; Parameters:    Size  Location     Type
  4723 ;;		None
  4724 ;; Auto vars:     Size  Location     Type
  4725 ;;		None
  4726 ;; Return value:  Size  Location     Type
  4727 ;;                  1    wreg      void 
  4728 ;; Registers used:
  4729 ;;		None
  4730 ;; Tracked objects:
  4731 ;;		On entry : 3F/0
  4732 ;;		On exit  : 3F/0
  4733 ;;		Unchanged: 3F/0
  4734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4735 ;;      Params:         0       0       0       0       0       0       0       0       0
  4736 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4737 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4738 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4739 ;;Total ram usage:        0 bytes
  4740 ;; Hardware stack levels used:    1
  4741 ;; Hardware stack levels required when called:    7
  4742 ;; This function calls:
  4743 ;;		Nothing
  4744 ;; This function is called by:
  4745 ;;		_LORAWAN_PlatformInit
  4746 ;; This function uses a non-reentrant model
  4747 ;;
  4748                           
  4749                           	psect	text14
  4750  006260                     __ptext14:
  4751                           	opt stack 0
  4752  006260                     _DIO4_ISR_Lora_Init:
  4753                           	opt stack 21
  4754                           
  4755                           ; BSR set to: 0
  4756                           
  4757                           ; BSR set to: 0
  4758                           ;incstack = 0
  4759  006260  0012               	return		;funcret
  4760  006262                     __end_of_DIO4_ISR_Lora_Init:
  4761                           	opt stack 0
  4762                           tosu	equ	0xFFF
  4763                           tosh	equ	0xFFE
  4764                           tosl	equ	0xFFD
  4765                           pclath	equ	0xFFA
  4766                           tblptru	equ	0xFF8
  4767                           tblptrh	equ	0xFF7
  4768                           tblptrl	equ	0xFF6
  4769                           tablat	equ	0xFF5
  4770                           prodh	equ	0xFF4
  4771                           prodl	equ	0xFF3
  4772                           intcon	equ	0xFF2
  4773                           indf0	equ	0xFEF
  4774                           postinc0	equ	0xFEE
  4775                           plusw0	equ	0xFEB
  4776                           fsr0h	equ	0xFEA
  4777                           fsr0l	equ	0xFE9
  4778                           wreg	equ	0xFE8
  4779                           postinc1	equ	0xFE6
  4780                           postdec1	equ	0xFE5
  4781                           plusw1	equ	0xFE3
  4782                           fsr1h	equ	0xFE2
  4783                           fsr1l	equ	0xFE1
  4784                           indf2	equ	0xFDF
  4785                           postinc2	equ	0xFDE
  4786                           postdec2	equ	0xFDD
  4787                           plusw2	equ	0xFDB
  4788                           fsr2h	equ	0xFDA
  4789                           fsr2l	equ	0xFD9
  4790                           status	equ	0xFD8
  4791                           
  4792 ;; *************** function _DIO3_ISR_Lora_Init *****************
  4793 ;; Defined at:
  4794 ;;		line 59 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4795 ;; Parameters:    Size  Location     Type
  4796 ;;		None
  4797 ;; Auto vars:     Size  Location     Type
  4798 ;;		None
  4799 ;; Return value:  Size  Location     Type
  4800 ;;                  1    wreg      void 
  4801 ;; Registers used:
  4802 ;;		None
  4803 ;; Tracked objects:
  4804 ;;		On entry : 3F/0
  4805 ;;		On exit  : 3F/0
  4806 ;;		Unchanged: 3F/0
  4807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4808 ;;      Params:         0       0       0       0       0       0       0       0       0
  4809 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4810 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4811 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4812 ;;Total ram usage:        0 bytes
  4813 ;; Hardware stack levels used:    1
  4814 ;; Hardware stack levels required when called:    7
  4815 ;; This function calls:
  4816 ;;		Nothing
  4817 ;; This function is called by:
  4818 ;;		_LORAWAN_PlatformInit
  4819 ;; This function uses a non-reentrant model
  4820 ;;
  4821                           
  4822                           	psect	text15
  4823  006262                     __ptext15:
  4824                           	opt stack 0
  4825  006262                     _DIO3_ISR_Lora_Init:
  4826                           	opt stack 21
  4827                           
  4828                           ; BSR set to: 0
  4829                           
  4830                           ; BSR set to: 0
  4831                           ;incstack = 0
  4832  006262  0012               	return		;funcret
  4833  006264                     __end_of_DIO3_ISR_Lora_Init:
  4834                           	opt stack 0
  4835                           tosu	equ	0xFFF
  4836                           tosh	equ	0xFFE
  4837                           tosl	equ	0xFFD
  4838                           pclath	equ	0xFFA
  4839                           tblptru	equ	0xFF8
  4840                           tblptrh	equ	0xFF7
  4841                           tblptrl	equ	0xFF6
  4842                           tablat	equ	0xFF5
  4843                           prodh	equ	0xFF4
  4844                           prodl	equ	0xFF3
  4845                           intcon	equ	0xFF2
  4846                           indf0	equ	0xFEF
  4847                           postinc0	equ	0xFEE
  4848                           plusw0	equ	0xFEB
  4849                           fsr0h	equ	0xFEA
  4850                           fsr0l	equ	0xFE9
  4851                           wreg	equ	0xFE8
  4852                           postinc1	equ	0xFE6
  4853                           postdec1	equ	0xFE5
  4854                           plusw1	equ	0xFE3
  4855                           fsr1h	equ	0xFE2
  4856                           fsr1l	equ	0xFE1
  4857                           indf2	equ	0xFDF
  4858                           postinc2	equ	0xFDE
  4859                           postdec2	equ	0xFDD
  4860                           plusw2	equ	0xFDB
  4861                           fsr2h	equ	0xFDA
  4862                           fsr2l	equ	0xFD9
  4863                           status	equ	0xFD8
  4864                           
  4865 ;; *************** function _DIO2_ISR_Lora_Init *****************
  4866 ;; Defined at:
  4867 ;;		line 54 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4868 ;; Parameters:    Size  Location     Type
  4869 ;;		None
  4870 ;; Auto vars:     Size  Location     Type
  4871 ;;		None
  4872 ;; Return value:  Size  Location     Type
  4873 ;;                  1    wreg      void 
  4874 ;; Registers used:
  4875 ;;		wreg, status,2, status,0, cstack
  4876 ;; Tracked objects:
  4877 ;;		On entry : 3F/0
  4878 ;;		On exit  : 3F/0
  4879 ;;		Unchanged: 0/0
  4880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4881 ;;      Params:         0       0       0       0       0       0       0       0       0
  4882 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4883 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4884 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4885 ;;Total ram usage:        0 bytes
  4886 ;; Hardware stack levels used:    1
  4887 ;; Hardware stack levels required when called:    8
  4888 ;; This function calls:
  4889 ;;		_IOCBF4_SetInterruptHandler
  4890 ;; This function is called by:
  4891 ;;		_LORAWAN_PlatformInit
  4892 ;; This function uses a non-reentrant model
  4893 ;;
  4894                           
  4895                           	psect	text16
  4896  006132                     __ptext16:
  4897                           	opt stack 0
  4898  006132                     _DIO2_ISR_Lora_Init:
  4899                           	opt stack 20
  4900                           
  4901                           ; BSR set to: 0
  4902                           ;lorawan_init.c: 56: IOCBF4_SetInterruptHandler(DIO2_ISR_Lora);
  4903                           
  4904                           ; BSR set to: 0
  4905                           ;incstack = 0
  4906  006132  0E54               	movlw	low _DIO2_ISR_Lora
  4907  006134  6F60               	movwf	IOCBF4_SetInterruptHandler@InterruptHandler& (0+255),b
  4908  006136  0E62               	movlw	high _DIO2_ISR_Lora
  4909  006138  6F61               	movwf	(IOCBF4_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4910  00613A  EFAA  F030         	goto	_IOCBF4_SetInterruptHandler	;wreg free
  4911  00613E                     __end_of_DIO2_ISR_Lora_Init:
  4912                           	opt stack 0
  4913                           tosu	equ	0xFFF
  4914                           tosh	equ	0xFFE
  4915                           tosl	equ	0xFFD
  4916                           pclath	equ	0xFFA
  4917                           tblptru	equ	0xFF8
  4918                           tblptrh	equ	0xFF7
  4919                           tblptrl	equ	0xFF6
  4920                           tablat	equ	0xFF5
  4921                           prodh	equ	0xFF4
  4922                           prodl	equ	0xFF3
  4923                           intcon	equ	0xFF2
  4924                           indf0	equ	0xFEF
  4925                           postinc0	equ	0xFEE
  4926                           plusw0	equ	0xFEB
  4927                           fsr0h	equ	0xFEA
  4928                           fsr0l	equ	0xFE9
  4929                           wreg	equ	0xFE8
  4930                           postinc1	equ	0xFE6
  4931                           postdec1	equ	0xFE5
  4932                           plusw1	equ	0xFE3
  4933                           fsr1h	equ	0xFE2
  4934                           fsr1l	equ	0xFE1
  4935                           indf2	equ	0xFDF
  4936                           postinc2	equ	0xFDE
  4937                           postdec2	equ	0xFDD
  4938                           plusw2	equ	0xFDB
  4939                           fsr2h	equ	0xFDA
  4940                           fsr2l	equ	0xFD9
  4941                           status	equ	0xFD8
  4942                           
  4943 ;; *************** function _IOCBF4_SetInterruptHandler *****************
  4944 ;; Defined at:
  4945 ;;		line 180 in file "mcc_generated_files/pin_manager.c"
  4946 ;; Parameters:    Size  Location     Type
  4947 ;;  InterruptHan    2    0[BANK0 ] PTR void 
  4948 ;;		 -> IOCBF4_DefaultInterruptHandler(1), DIO2_ISR_Lora(1), 
  4949 ;; Auto vars:     Size  Location     Type
  4950 ;;		None
  4951 ;; Return value:  Size  Location     Type
  4952 ;;                  1    wreg      void 
  4953 ;; Registers used:
  4954 ;;		wreg, status,2, status,0
  4955 ;; Tracked objects:
  4956 ;;		On entry : 3F/0
  4957 ;;		On exit  : 3F/0
  4958 ;;		Unchanged: 3F/0
  4959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4960 ;;      Params:         0       2       0       0       0       0       0       0       0
  4961 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4962 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4963 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4964 ;;Total ram usage:        2 bytes
  4965 ;; Hardware stack levels used:    1
  4966 ;; Hardware stack levels required when called:    7
  4967 ;; This function calls:
  4968 ;;		Nothing
  4969 ;; This function is called by:
  4970 ;;		_DIO2_ISR_Lora_Init
  4971 ;;		_PIN_MANAGER_Initialize
  4972 ;; This function uses a non-reentrant model
  4973 ;;
  4974                           
  4975                           	psect	text17
  4976  006154                     __ptext17:
  4977                           	opt stack 0
  4978  006154                     _IOCBF4_SetInterruptHandler:
  4979                           	opt stack 21
  4980                           
  4981                           ; BSR set to: 0
  4982                           ;pin_manager.c: 181: IOCBF4_InterruptHandler = InterruptHandler;
  4983                           
  4984                           ; BSR set to: 0
  4985                           ;incstack = 0
  4986  006154  C060  F1F7         	movff	IOCBF4_SetInterruptHandler@InterruptHandler,_IOCBF4_InterruptHandler
  4987  006158  C061  F1F8         	movff	IOCBF4_SetInterruptHandler@InterruptHandler+1,_IOCBF4_InterruptHandler+1
  4988                           
  4989                           ; BSR set to: 0
  4990  00615C  0012               	return		;funcret
  4991  00615E                     __end_of_IOCBF4_SetInterruptHandler:
  4992                           	opt stack 0
  4993                           tosu	equ	0xFFF
  4994                           tosh	equ	0xFFE
  4995                           tosl	equ	0xFFD
  4996                           pclath	equ	0xFFA
  4997                           tblptru	equ	0xFF8
  4998                           tblptrh	equ	0xFF7
  4999                           tblptrl	equ	0xFF6
  5000                           tablat	equ	0xFF5
  5001                           prodh	equ	0xFF4
  5002                           prodl	equ	0xFF3
  5003                           intcon	equ	0xFF2
  5004                           indf0	equ	0xFEF
  5005                           postinc0	equ	0xFEE
  5006                           plusw0	equ	0xFEB
  5007                           fsr0h	equ	0xFEA
  5008                           fsr0l	equ	0xFE9
  5009                           wreg	equ	0xFE8
  5010                           postinc1	equ	0xFE6
  5011                           postdec1	equ	0xFE5
  5012                           plusw1	equ	0xFE3
  5013                           fsr1h	equ	0xFE2
  5014                           fsr1l	equ	0xFE1
  5015                           indf2	equ	0xFDF
  5016                           postinc2	equ	0xFDE
  5017                           postdec2	equ	0xFDD
  5018                           plusw2	equ	0xFDB
  5019                           fsr2h	equ	0xFDA
  5020                           fsr2l	equ	0xFD9
  5021                           status	equ	0xFD8
  5022                           
  5023 ;; *************** function _DIO1_ISR_Lora_Init *****************
  5024 ;; Defined at:
  5025 ;;		line 49 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  5026 ;; Parameters:    Size  Location     Type
  5027 ;;		None
  5028 ;; Auto vars:     Size  Location     Type
  5029 ;;		None
  5030 ;; Return value:  Size  Location     Type
  5031 ;;                  1    wreg      void 
  5032 ;; Registers used:
  5033 ;;		wreg, status,2, status,0, cstack
  5034 ;; Tracked objects:
  5035 ;;		On entry : 3F/0
  5036 ;;		On exit  : 3F/0
  5037 ;;		Unchanged: 0/0
  5038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5039 ;;      Params:         0       0       0       0       0       0       0       0       0
  5040 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5041 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5042 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5043 ;;Total ram usage:        0 bytes
  5044 ;; Hardware stack levels used:    1
  5045 ;; Hardware stack levels required when called:    8
  5046 ;; This function calls:
  5047 ;;		_INT1_SetInterruptHandler
  5048 ;; This function is called by:
  5049 ;;		_LORAWAN_PlatformInit
  5050 ;; This function uses a non-reentrant model
  5051 ;;
  5052                           
  5053                           	psect	text18
  5054  00613E                     __ptext18:
  5055                           	opt stack 0
  5056  00613E                     _DIO1_ISR_Lora_Init:
  5057                           	opt stack 20
  5058                           
  5059                           ; BSR set to: 0
  5060                           ;lorawan_init.c: 51: INT1_SetInterruptHandler(DIO1_ISR_Lora);
  5061                           
  5062                           ; BSR set to: 0
  5063                           ;incstack = 0
  5064  00613E  0E5C               	movlw	low _DIO1_ISR_Lora
  5065  006140  6F60               	movwf	INT1_SetInterruptHandler@InterruptHandler& (0+255),b
  5066  006142  0E62               	movlw	high _DIO1_ISR_Lora
  5067  006144  6F61               	movwf	(INT1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5068  006146  EFB9  F030         	goto	_INT1_SetInterruptHandler	;wreg free
  5069  00614A                     __end_of_DIO1_ISR_Lora_Init:
  5070                           	opt stack 0
  5071                           tosu	equ	0xFFF
  5072                           tosh	equ	0xFFE
  5073                           tosl	equ	0xFFD
  5074                           pclath	equ	0xFFA
  5075                           tblptru	equ	0xFF8
  5076                           tblptrh	equ	0xFF7
  5077                           tblptrl	equ	0xFF6
  5078                           tablat	equ	0xFF5
  5079                           prodh	equ	0xFF4
  5080                           prodl	equ	0xFF3
  5081                           intcon	equ	0xFF2
  5082                           indf0	equ	0xFEF
  5083                           postinc0	equ	0xFEE
  5084                           plusw0	equ	0xFEB
  5085                           fsr0h	equ	0xFEA
  5086                           fsr0l	equ	0xFE9
  5087                           wreg	equ	0xFE8
  5088                           postinc1	equ	0xFE6
  5089                           postdec1	equ	0xFE5
  5090                           plusw1	equ	0xFE3
  5091                           fsr1h	equ	0xFE2
  5092                           fsr1l	equ	0xFE1
  5093                           indf2	equ	0xFDF
  5094                           postinc2	equ	0xFDE
  5095                           postdec2	equ	0xFDD
  5096                           plusw2	equ	0xFDB
  5097                           fsr2h	equ	0xFDA
  5098                           fsr2l	equ	0xFD9
  5099                           status	equ	0xFD8
  5100                           
  5101 ;; *************** function _DIO0_ISR_Lora_Init *****************
  5102 ;; Defined at:
  5103 ;;		line 44 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  5104 ;; Parameters:    Size  Location     Type
  5105 ;;		None
  5106 ;; Auto vars:     Size  Location     Type
  5107 ;;		None
  5108 ;; Return value:  Size  Location     Type
  5109 ;;                  1    wreg      void 
  5110 ;; Registers used:
  5111 ;;		wreg, status,2, status,0, cstack
  5112 ;; Tracked objects:
  5113 ;;		On entry : 3F/0
  5114 ;;		On exit  : 3F/0
  5115 ;;		Unchanged: 0/0
  5116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5117 ;;      Params:         0       0       0       0       0       0       0       0       0
  5118 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5119 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5120 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5121 ;;Total ram usage:        0 bytes
  5122 ;; Hardware stack levels used:    1
  5123 ;; Hardware stack levels required when called:    8
  5124 ;; This function calls:
  5125 ;;		_INT0_SetInterruptHandler
  5126 ;; This function is called by:
  5127 ;;		_LORAWAN_PlatformInit
  5128 ;; This function uses a non-reentrant model
  5129 ;;
  5130                           
  5131                           	psect	text19
  5132  006202                     __ptext19:
  5133                           	opt stack 0
  5134  006202                     _DIO0_ISR_Lora_Init:
  5135                           	opt stack 20
  5136                           
  5137                           ; BSR set to: 0
  5138                           ;lorawan_init.c: 46: INT0_SetInterruptHandler(DIO0_ISR_Lora);
  5139                           
  5140                           ; BSR set to: 0
  5141                           ;incstack = 0
  5142  006202  6B60               	clrf	INT0_SetInterruptHandler@InterruptHandler& (0+255),b
  5143  006204  6B61               	clrf	(INT0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5144  006206  0C00               	retlw	0	;wreg free
  5145  006208                     __end_of_DIO0_ISR_Lora_Init:
  5146                           	opt stack 0
  5147                           tosu	equ	0xFFF
  5148                           tosh	equ	0xFFE
  5149                           tosl	equ	0xFFD
  5150                           pclath	equ	0xFFA
  5151                           tblptru	equ	0xFF8
  5152                           tblptrh	equ	0xFF7
  5153                           tblptrl	equ	0xFF6
  5154                           tablat	equ	0xFF5
  5155                           prodh	equ	0xFF4
  5156                           prodl	equ	0xFF3
  5157                           intcon	equ	0xFF2
  5158                           indf0	equ	0xFEF
  5159                           postinc0	equ	0xFEE
  5160                           plusw0	equ	0xFEB
  5161                           fsr0h	equ	0xFEA
  5162                           fsr0l	equ	0xFE9
  5163                           wreg	equ	0xFE8
  5164                           postinc1	equ	0xFE6
  5165                           postdec1	equ	0xFE5
  5166                           plusw1	equ	0xFE3
  5167                           fsr1h	equ	0xFE2
  5168                           fsr1l	equ	0xFE1
  5169                           indf2	equ	0xFDF
  5170                           postinc2	equ	0xFDE
  5171                           postdec2	equ	0xFDD
  5172                           plusw2	equ	0xFDB
  5173                           fsr2h	equ	0xFDA
  5174                           fsr2l	equ	0xFD9
  5175                           status	equ	0xFD8
  5176                           
  5177 ;; *************** function _INTERRUPT_Initialize *****************
  5178 ;; Defined at:
  5179 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  5180 ;; Parameters:    Size  Location     Type
  5181 ;;		None
  5182 ;; Auto vars:     Size  Location     Type
  5183 ;;		None
  5184 ;; Return value:  Size  Location     Type
  5185 ;;                  1    wreg      void 
  5186 ;; Registers used:
  5187 ;;		None
  5188 ;; Tracked objects:
  5189 ;;		On entry : 0/0
  5190 ;;		On exit  : 0/0
  5191 ;;		Unchanged: 0/0
  5192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5193 ;;      Params:         0       0       0       0       0       0       0       0       0
  5194 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5195 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5196 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5197 ;;Total ram usage:        0 bytes
  5198 ;; Hardware stack levels used:    1
  5199 ;; Hardware stack levels required when called:    7
  5200 ;; This function calls:
  5201 ;;		Nothing
  5202 ;; This function is called by:
  5203 ;;		_SYSTEM_Initialize
  5204 ;; This function uses a non-reentrant model
  5205 ;;
  5206                           
  5207                           	psect	text20
  5208  006240                     __ptext20:
  5209                           	opt stack 0
  5210  006240                     _INTERRUPT_Initialize:
  5211                           	opt stack 22
  5212                           
  5213                           ;interrupt_manager.c: 54: INTCONbits.IPEN = 0;
  5214                           
  5215                           ; BSR set to: 0
  5216                           ;incstack = 0
  5217  006240  9AF2               	bcf	intcon,5,c	;volatile
  5218  006242  0012               	return		;funcret
  5219  006244                     __end_of_INTERRUPT_Initialize:
  5220                           	opt stack 0
  5221                           tosu	equ	0xFFF
  5222                           tosh	equ	0xFFE
  5223                           tosl	equ	0xFFD
  5224                           pclath	equ	0xFFA
  5225                           tblptru	equ	0xFF8
  5226                           tblptrh	equ	0xFF7
  5227                           tblptrl	equ	0xFF6
  5228                           tablat	equ	0xFF5
  5229                           prodh	equ	0xFF4
  5230                           prodl	equ	0xFF3
  5231                           intcon	equ	0xFF2
  5232                           indf0	equ	0xFEF
  5233                           postinc0	equ	0xFEE
  5234                           plusw0	equ	0xFEB
  5235                           fsr0h	equ	0xFEA
  5236                           fsr0l	equ	0xFE9
  5237                           wreg	equ	0xFE8
  5238                           postinc1	equ	0xFE6
  5239                           postdec1	equ	0xFE5
  5240                           plusw1	equ	0xFE3
  5241                           fsr1h	equ	0xFE2
  5242                           fsr1l	equ	0xFE1
  5243                           indf2	equ	0xFDF
  5244                           postinc2	equ	0xFDE
  5245                           postdec2	equ	0xFDD
  5246                           plusw2	equ	0xFDB
  5247                           fsr2h	equ	0xFDA
  5248                           fsr2l	equ	0xFD9
  5249                           status	equ	0xFD8
  5250                           
  5251 ;; *************** function _EXT_INT_Initialize *****************
  5252 ;; Defined at:
  5253 ;;		line 219 in file "mcc_generated_files/ext_int.c"
  5254 ;; Parameters:    Size  Location     Type
  5255 ;;		None
  5256 ;; Auto vars:     Size  Location     Type
  5257 ;;		None
  5258 ;; Return value:  Size  Location     Type
  5259 ;;                  1    wreg      void 
  5260 ;; Registers used:
  5261 ;;		wreg, status,2, status,0, cstack
  5262 ;; Tracked objects:
  5263 ;;		On entry : 3F/E
  5264 ;;		On exit  : 3F/E
  5265 ;;		Unchanged: 0/0
  5266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5267 ;;      Params:         0       0       0       0       0       0       0       0       0
  5268 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5269 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5270 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5271 ;;Total ram usage:        0 bytes
  5272 ;; Hardware stack levels used:    1
  5273 ;; Hardware stack levels required when called:    8
  5274 ;; This function calls:
  5275 ;;		_INT0_SetInterruptHandler
  5276 ;;		_INT1_SetInterruptHandler
  5277 ;;		_INT2_SetInterruptHandler
  5278 ;;		_INT3_SetInterruptHandler
  5279 ;; This function is called by:
  5280 ;;		_SYSTEM_Initialize
  5281 ;; This function uses a non-reentrant model
  5282 ;;
  5283                           
  5284                           	psect	text21
  5285  0050D2                     __ptext21:
  5286                           	opt stack 0
  5287  0050D2                     _EXT_INT_Initialize:
  5288                           	opt stack 21
  5289                           
  5290                           ; BSR set to: 14
  5291                           ;ext_int.c: 228: (PIR0bits.INT1IF = 0);
  5292                           
  5293                           ;incstack = 0
  5294  0050D2  9333               	bcf	51,1,b	;volatile
  5295                           
  5296                           ;ext_int.c: 229: (INTCONbits.INT1EDG = 1);
  5297  0050D4  82F2               	bsf	intcon,1,c	;volatile
  5298                           
  5299                           ; BSR set to: 14
  5300                           ;ext_int.c: 231: INT1_SetInterruptHandler(INT1_DefaultInterruptHandler);
  5301  0050D6  0E70               	movlw	low _INT1_DefaultInterruptHandler
  5302  0050D8  0100               	movlb	0	; () banked
  5303  0050DA  6F60               	movwf	INT1_SetInterruptHandler@InterruptHandler& (0+255),b
  5304  0050DC  0E62               	movlw	high _INT1_DefaultInterruptHandler
  5305  0050DE  6F61               	movwf	(INT1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5306  0050E0  ECB9  F030         	call	_INT1_SetInterruptHandler	;wreg free
  5307                           
  5308                           ; BSR set to: 0
  5309                           ;ext_int.c: 232: (PIE0bits.INT1IE = 1);
  5310  0050E4  010E               	movlb	14	; () banked
  5311  0050E6  8329               	bsf	41,1,b	;volatile
  5312                           
  5313                           ; BSR set to: 14
  5314                           ;ext_int.c: 243: (PIR0bits.INT2IF = 0);
  5315  0050E8  9533               	bcf	51,2,b	;volatile
  5316                           
  5317                           ; BSR set to: 14
  5318                           ;ext_int.c: 244: (INTCONbits.INT2EDG = 1);
  5319  0050EA  84F2               	bsf	intcon,2,c	;volatile
  5320                           
  5321                           ;ext_int.c: 246: INT2_SetInterruptHandler(INT2_DefaultInterruptHandler);
  5322  0050EC  0E6E               	movlw	low _INT2_DefaultInterruptHandler
  5323  0050EE  0100               	movlb	0	; () banked
  5324  0050F0  6F60               	movwf	INT2_SetInterruptHandler@InterruptHandler& (0+255),b
  5325  0050F2  0E62               	movlw	high _INT2_DefaultInterruptHandler
  5326  0050F4  6F61               	movwf	(INT2_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5327  0050F6  ECB4  F030         	call	_INT2_SetInterruptHandler	;wreg free
  5328                           
  5329                           ; BSR set to: 0
  5330                           ;ext_int.c: 247: (PIE0bits.INT2IE = 1);
  5331  0050FA  010E               	movlb	14	; () banked
  5332  0050FC  8529               	bsf	41,2,b	;volatile
  5333                           
  5334                           ; BSR set to: 14
  5335                           ;ext_int.c: 258: (PIR0bits.INT0IF = 0);
  5336  0050FE  9133               	bcf	51,0,b	;volatile
  5337                           
  5338                           ; BSR set to: 14
  5339                           ;ext_int.c: 259: (INTCONbits.INT0EDG = 1);
  5340  005100  80F2               	bsf	intcon,0,c	;volatile
  5341                           
  5342                           ;ext_int.c: 261: INT0_SetInterruptHandler(INT0_DefaultInterruptHandler);
  5343  005102  0E00               	movlw	0
  5344  005104  0100               	movlb	0	; () banked
  5345  005106  6B60               	clrf	INT0_SetInterruptHandler@InterruptHandler& (0+255),b
  5346  005108  6B61               	clrf	(INT0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5347  00510A  EC32  F031         	call	_INT0_SetInterruptHandler	;wreg free
  5348                           
  5349                           ; BSR set to: 0
  5350                           ;ext_int.c: 272: (PIR0bits.INT3IF = 0);
  5351  00510E  010E               	movlb	14	; () banked
  5352  005110  9733               	bcf	51,3,b	;volatile
  5353                           
  5354                           ; BSR set to: 14
  5355                           ;ext_int.c: 273: (INTCONbits.INT3EDG = 1);
  5356  005112  86F2               	bsf	intcon,3,c	;volatile
  5357                           
  5358                           ;ext_int.c: 275: INT3_SetInterruptHandler(INT3_DefaultInterruptHandler);
  5359  005114  0E6C               	movlw	low _INT3_DefaultInterruptHandler
  5360  005116  0100               	movlb	0	; () banked
  5361  005118  6F60               	movwf	INT3_SetInterruptHandler@InterruptHandler& (0+255),b
  5362  00511A  0E62               	movlw	high _INT3_DefaultInterruptHandler
  5363  00511C  6F61               	movwf	(INT3_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5364  00511E  ECAF  F030         	call	_INT3_SetInterruptHandler	;wreg free
  5365                           
  5366                           ; BSR set to: 0
  5367                           ;ext_int.c: 276: (PIE0bits.INT3IE = 1);
  5368  005122  010E               	movlb	14	; () banked
  5369  005124  8729               	bsf	41,3,b	;volatile
  5370                           
  5371                           ; BSR set to: 14
  5372  005126  0012               	return		;funcret
  5373  005128                     __end_of_EXT_INT_Initialize:
  5374                           	opt stack 0
  5375                           tosu	equ	0xFFF
  5376                           tosh	equ	0xFFE
  5377                           tosl	equ	0xFFD
  5378                           pclath	equ	0xFFA
  5379                           tblptru	equ	0xFF8
  5380                           tblptrh	equ	0xFF7
  5381                           tblptrl	equ	0xFF6
  5382                           tablat	equ	0xFF5
  5383                           prodh	equ	0xFF4
  5384                           prodl	equ	0xFF3
  5385                           intcon	equ	0xFF2
  5386                           indf0	equ	0xFEF
  5387                           postinc0	equ	0xFEE
  5388                           plusw0	equ	0xFEB
  5389                           fsr0h	equ	0xFEA
  5390                           fsr0l	equ	0xFE9
  5391                           wreg	equ	0xFE8
  5392                           postinc1	equ	0xFE6
  5393                           postdec1	equ	0xFE5
  5394                           plusw1	equ	0xFE3
  5395                           fsr1h	equ	0xFE2
  5396                           fsr1l	equ	0xFE1
  5397                           indf2	equ	0xFDF
  5398                           postinc2	equ	0xFDE
  5399                           postdec2	equ	0xFDD
  5400                           plusw2	equ	0xFDB
  5401                           fsr2h	equ	0xFDA
  5402                           fsr2l	equ	0xFD9
  5403                           status	equ	0xFD8
  5404                           
  5405 ;; *************** function _INT3_SetInterruptHandler *****************
  5406 ;; Defined at:
  5407 ;;		line 196 in file "mcc_generated_files/ext_int.c"
  5408 ;; Parameters:    Size  Location     Type
  5409 ;;  InterruptHan    2    0[BANK0 ] PTR void 
  5410 ;;		 -> INT3_DefaultInterruptHandler(1), 
  5411 ;; Auto vars:     Size  Location     Type
  5412 ;;		None
  5413 ;; Return value:  Size  Location     Type
  5414 ;;                  1    wreg      void 
  5415 ;; Registers used:
  5416 ;;		wreg, status,2, status,0
  5417 ;; Tracked objects:
  5418 ;;		On entry : 3F/0
  5419 ;;		On exit  : 3F/0
  5420 ;;		Unchanged: 3F/0
  5421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5422 ;;      Params:         0       2       0       0       0       0       0       0       0
  5423 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5424 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5425 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5426 ;;Total ram usage:        2 bytes
  5427 ;; Hardware stack levels used:    1
  5428 ;; Hardware stack levels required when called:    7
  5429 ;; This function calls:
  5430 ;;		Nothing
  5431 ;; This function is called by:
  5432 ;;		_EXT_INT_Initialize
  5433 ;; This function uses a non-reentrant model
  5434 ;;
  5435                           
  5436                           	psect	text22
  5437  00615E                     __ptext22:
  5438                           	opt stack 0
  5439  00615E                     _INT3_SetInterruptHandler:
  5440                           	opt stack 21
  5441                           
  5442                           ; BSR set to: 0
  5443                           ;ext_int.c: 197: INT3_InterruptHandler = InterruptHandler;
  5444                           
  5445                           ; BSR set to: 14
  5446                           ;incstack = 0
  5447  00615E  C060  F1FB         	movff	INT3_SetInterruptHandler@InterruptHandler,_INT3_InterruptHandler
  5448  006162  C061  F1FC         	movff	INT3_SetInterruptHandler@InterruptHandler+1,_INT3_InterruptHandler+1
  5449                           
  5450                           ; BSR set to: 0
  5451  006166  0012               	return		;funcret
  5452  006168                     __end_of_INT3_SetInterruptHandler:
  5453                           	opt stack 0
  5454                           tosu	equ	0xFFF
  5455                           tosh	equ	0xFFE
  5456                           tosl	equ	0xFFD
  5457                           pclath	equ	0xFFA
  5458                           tblptru	equ	0xFF8
  5459                           tblptrh	equ	0xFF7
  5460                           tblptrl	equ	0xFF6
  5461                           tablat	equ	0xFF5
  5462                           prodh	equ	0xFF4
  5463                           prodl	equ	0xFF3
  5464                           intcon	equ	0xFF2
  5465                           indf0	equ	0xFEF
  5466                           postinc0	equ	0xFEE
  5467                           plusw0	equ	0xFEB
  5468                           fsr0h	equ	0xFEA
  5469                           fsr0l	equ	0xFE9
  5470                           wreg	equ	0xFE8
  5471                           postinc1	equ	0xFE6
  5472                           postdec1	equ	0xFE5
  5473                           plusw1	equ	0xFE3
  5474                           fsr1h	equ	0xFE2
  5475                           fsr1l	equ	0xFE1
  5476                           indf2	equ	0xFDF
  5477                           postinc2	equ	0xFDE
  5478                           postdec2	equ	0xFDD
  5479                           plusw2	equ	0xFDB
  5480                           fsr2h	equ	0xFDA
  5481                           fsr2l	equ	0xFD9
  5482                           status	equ	0xFD8
  5483                           
  5484 ;; *************** function _INT2_SetInterruptHandler *****************
  5485 ;; Defined at:
  5486 ;;		line 114 in file "mcc_generated_files/ext_int.c"
  5487 ;; Parameters:    Size  Location     Type
  5488 ;;  InterruptHan    2    0[BANK0 ] PTR void 
  5489 ;;		 -> INT2_DefaultInterruptHandler(1), DIO5_ISR_Lora(1), 
  5490 ;; Auto vars:     Size  Location     Type
  5491 ;;		None
  5492 ;; Return value:  Size  Location     Type
  5493 ;;                  1    wreg      void 
  5494 ;; Registers used:
  5495 ;;		wreg, status,2, status,0
  5496 ;; Tracked objects:
  5497 ;;		On entry : 3F/0
  5498 ;;		On exit  : 3F/0
  5499 ;;		Unchanged: 3F/0
  5500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5501 ;;      Params:         0       2       0       0       0       0       0       0       0
  5502 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5503 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5504 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5505 ;;Total ram usage:        2 bytes
  5506 ;; Hardware stack levels used:    1
  5507 ;; Hardware stack levels required when called:    7
  5508 ;; This function calls:
  5509 ;;		Nothing
  5510 ;; This function is called by:
  5511 ;;		_DIO5_ISR_Lora_Init
  5512 ;;		_EXT_INT_Initialize
  5513 ;; This function uses a non-reentrant model
  5514 ;;
  5515                           
  5516                           	psect	text23
  5517  006168                     __ptext23:
  5518                           	opt stack 0
  5519  006168                     _INT2_SetInterruptHandler:
  5520                           	opt stack 20
  5521                           
  5522                           ; BSR set to: 0
  5523                           ;ext_int.c: 115: INT2_InterruptHandler = InterruptHandler;
  5524                           
  5525                           ; BSR set to: 0
  5526                           ;incstack = 0
  5527  006168  C060  F1FD         	movff	INT2_SetInterruptHandler@InterruptHandler,_INT2_InterruptHandler
  5528  00616C  C061  F1FE         	movff	INT2_SetInterruptHandler@InterruptHandler+1,_INT2_InterruptHandler+1
  5529                           
  5530                           ; BSR set to: 0
  5531  006170  0012               	return		;funcret
  5532  006172                     __end_of_INT2_SetInterruptHandler:
  5533                           	opt stack 0
  5534                           tosu	equ	0xFFF
  5535                           tosh	equ	0xFFE
  5536                           tosl	equ	0xFFD
  5537                           pclath	equ	0xFFA
  5538                           tblptru	equ	0xFF8
  5539                           tblptrh	equ	0xFF7
  5540                           tblptrl	equ	0xFF6
  5541                           tablat	equ	0xFF5
  5542                           prodh	equ	0xFF4
  5543                           prodl	equ	0xFF3
  5544                           intcon	equ	0xFF2
  5545                           indf0	equ	0xFEF
  5546                           postinc0	equ	0xFEE
  5547                           plusw0	equ	0xFEB
  5548                           fsr0h	equ	0xFEA
  5549                           fsr0l	equ	0xFE9
  5550                           wreg	equ	0xFE8
  5551                           postinc1	equ	0xFE6
  5552                           postdec1	equ	0xFE5
  5553                           plusw1	equ	0xFE3
  5554                           fsr1h	equ	0xFE2
  5555                           fsr1l	equ	0xFE1
  5556                           indf2	equ	0xFDF
  5557                           postinc2	equ	0xFDE
  5558                           postdec2	equ	0xFDD
  5559                           plusw2	equ	0xFDB
  5560                           fsr2h	equ	0xFDA
  5561                           fsr2l	equ	0xFD9
  5562                           status	equ	0xFD8
  5563                           
  5564 ;; *************** function _INT1_SetInterruptHandler *****************
  5565 ;; Defined at:
  5566 ;;		line 73 in file "mcc_generated_files/ext_int.c"
  5567 ;; Parameters:    Size  Location     Type
  5568 ;;  InterruptHan    2    0[BANK0 ] PTR void 
  5569 ;;		 -> INT1_DefaultInterruptHandler(1), DIO1_ISR_Lora(1), 
  5570 ;; Auto vars:     Size  Location     Type
  5571 ;;		None
  5572 ;; Return value:  Size  Location     Type
  5573 ;;                  1    wreg      void 
  5574 ;; Registers used:
  5575 ;;		wreg, status,2, status,0
  5576 ;; Tracked objects:
  5577 ;;		On entry : 3F/0
  5578 ;;		On exit  : 3F/0
  5579 ;;		Unchanged: 3F/0
  5580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5581 ;;      Params:         0       2       0       0       0       0       0       0       0
  5582 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5583 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5584 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5585 ;;Total ram usage:        2 bytes
  5586 ;; Hardware stack levels used:    1
  5587 ;; Hardware stack levels required when called:    7
  5588 ;; This function calls:
  5589 ;;		Nothing
  5590 ;; This function is called by:
  5591 ;;		_DIO1_ISR_Lora_Init
  5592 ;;		_EXT_INT_Initialize
  5593 ;; This function uses a non-reentrant model
  5594 ;;
  5595                           
  5596                           	psect	text24
  5597  006172                     __ptext24:
  5598                           	opt stack 0
  5599  006172                     _INT1_SetInterruptHandler:
  5600                           	opt stack 20
  5601                           
  5602                           ; BSR set to: 0
  5603                           ;ext_int.c: 74: INT1_InterruptHandler = InterruptHandler;
  5604                           
  5605                           ; BSR set to: 0
  5606                           ;incstack = 0
  5607  006172  C060  F05E         	movff	INT1_SetInterruptHandler@InterruptHandler,_INT1_InterruptHandler
  5608  006176  C061  F05F         	movff	INT1_SetInterruptHandler@InterruptHandler+1,_INT1_InterruptHandler+1
  5609                           
  5610                           ; BSR set to: 0
  5611  00617A  0012               	return		;funcret
  5612  00617C                     __end_of_INT1_SetInterruptHandler:
  5613                           	opt stack 0
  5614                           tosu	equ	0xFFF
  5615                           tosh	equ	0xFFE
  5616                           tosl	equ	0xFFD
  5617                           pclath	equ	0xFFA
  5618                           tblptru	equ	0xFF8
  5619                           tblptrh	equ	0xFF7
  5620                           tblptrl	equ	0xFF6
  5621                           tablat	equ	0xFF5
  5622                           prodh	equ	0xFF4
  5623                           prodl	equ	0xFF3
  5624                           intcon	equ	0xFF2
  5625                           indf0	equ	0xFEF
  5626                           postinc0	equ	0xFEE
  5627                           plusw0	equ	0xFEB
  5628                           fsr0h	equ	0xFEA
  5629                           fsr0l	equ	0xFE9
  5630                           wreg	equ	0xFE8
  5631                           postinc1	equ	0xFE6
  5632                           postdec1	equ	0xFE5
  5633                           plusw1	equ	0xFE3
  5634                           fsr1h	equ	0xFE2
  5635                           fsr1l	equ	0xFE1
  5636                           indf2	equ	0xFDF
  5637                           postinc2	equ	0xFDE
  5638                           postdec2	equ	0xFDD
  5639                           plusw2	equ	0xFDB
  5640                           fsr2h	equ	0xFDA
  5641                           fsr2l	equ	0xFD9
  5642                           status	equ	0xFD8
  5643                           
  5644 ;; *************** function _INT0_SetInterruptHandler *****************
  5645 ;; Defined at:
  5646 ;;		line 155 in file "mcc_generated_files/ext_int.c"
  5647 ;; Parameters:    Size  Location     Type
  5648 ;;  InterruptHan    2    0[BANK0 ] PTR void 
  5649 ;;		 -> INT0_DefaultInterruptHandler(1), DIO0_ISR_Lora(1), 
  5650 ;; Auto vars:     Size  Location     Type
  5651 ;;		None
  5652 ;; Return value:  Size  Location     Type
  5653 ;;                  1    wreg      void 
  5654 ;; Registers used:
  5655 ;;		None
  5656 ;; Tracked objects:
  5657 ;;		On entry : 3F/0
  5658 ;;		On exit  : 3F/0
  5659 ;;		Unchanged: 3F/0
  5660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5661 ;;      Params:         0       2       0       0       0       0       0       0       0
  5662 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5663 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5664 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5665 ;;Total ram usage:        2 bytes
  5666 ;; Hardware stack levels used:    1
  5667 ;; Hardware stack levels required when called:    7
  5668 ;; This function calls:
  5669 ;;		Nothing
  5670 ;; This function is called by:
  5671 ;;		_DIO0_ISR_Lora_Init
  5672 ;;		_EXT_INT_Initialize
  5673 ;; This function uses a non-reentrant model
  5674 ;;
  5675                           
  5676                           	psect	text25
  5677  006264                     __ptext25:
  5678                           	opt stack 0
  5679  006264                     _INT0_SetInterruptHandler:
  5680                           	opt stack 20
  5681                           
  5682                           ; BSR set to: 0
  5683                           
  5684                           ; BSR set to: 0
  5685                           ;incstack = 0
  5686  006264  0012               	return		;funcret
  5687  006266                     __end_of_INT0_SetInterruptHandler:
  5688                           	opt stack 0
  5689                           tosu	equ	0xFFF
  5690                           tosh	equ	0xFFE
  5691                           tosl	equ	0xFFD
  5692                           pclath	equ	0xFFA
  5693                           tblptru	equ	0xFF8
  5694                           tblptrh	equ	0xFF7
  5695                           tblptrl	equ	0xFF6
  5696                           tablat	equ	0xFF5
  5697                           prodh	equ	0xFF4
  5698                           prodl	equ	0xFF3
  5699                           intcon	equ	0xFF2
  5700                           indf0	equ	0xFEF
  5701                           postinc0	equ	0xFEE
  5702                           plusw0	equ	0xFEB
  5703                           fsr0h	equ	0xFEA
  5704                           fsr0l	equ	0xFE9
  5705                           wreg	equ	0xFE8
  5706                           postinc1	equ	0xFE6
  5707                           postdec1	equ	0xFE5
  5708                           plusw1	equ	0xFE3
  5709                           fsr1h	equ	0xFE2
  5710                           fsr1l	equ	0xFE1
  5711                           indf2	equ	0xFDF
  5712                           postinc2	equ	0xFDE
  5713                           postdec2	equ	0xFDD
  5714                           plusw2	equ	0xFDB
  5715                           fsr2h	equ	0xFDA
  5716                           fsr2l	equ	0xFD9
  5717                           status	equ	0xFD8
  5718                           
  5719 ;; *************** function _LORAWAN_SetNetworkSessionKey *****************
  5720 ;; Defined at:
  5721 ;;		line 379 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  5722 ;; Parameters:    Size  Location     Type
  5723 ;;  networkSessi    2   10[BANK0 ] PTR unsigned char 
  5724 ;;		 -> nwkSKey(16), 
  5725 ;; Auto vars:     Size  Location     Type
  5726 ;;		None
  5727 ;; Return value:  Size  Location     Type
  5728 ;;                  1    wreg      void 
  5729 ;; Registers used:
  5730 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5731 ;; Tracked objects:
  5732 ;;		On entry : 3F/0
  5733 ;;		On exit  : 3D/0
  5734 ;;		Unchanged: 0/0
  5735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5736 ;;      Params:         0       2       0       0       0       0       0       0       0
  5737 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5738 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5739 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5740 ;;Total ram usage:        2 bytes
  5741 ;; Hardware stack levels used:    1
  5742 ;; Hardware stack levels required when called:    8
  5743 ;; This function calls:
  5744 ;;		_memcpy
  5745 ;; This function is called by:
  5746 ;;		_main
  5747 ;; This function uses a non-reentrant model
  5748 ;;
  5749                           
  5750                           	psect	text26
  5751  005C08                     __ptext26:
  5752                           	opt stack 0
  5753  005C08                     _LORAWAN_SetNetworkSessionKey:
  5754                           	opt stack 22
  5755                           
  5756                           ; BSR set to: 0
  5757                           ;lorawan.c: 381: if (networkSessionKeyNew != (0))
  5758                           
  5759                           ; BSR set to: 0
  5760                           ;incstack = 0
  5761  005C08  516A               	movf	LORAWAN_SetNetworkSessionKey@networkSessionKeyNew& (0+255),w,b
  5762  005C0A  116B               	iorwf	(LORAWAN_SetNetworkSessionKey@networkSessionKeyNew+1)& (0+255),w,b
  5763  005C0C  B4D8               	btfsc	status,2,c
  5764  005C0E  0012               	return	
  5765                           
  5766                           ; BSR set to: 0
  5767                           ;lorawan.c: 382: {
  5768                           ;lorawan.c: 383: memcpy(loRa.activationParameters.networkSessionKey, networkSessionKeyNe
      +                          w, 16);
  5769  005C10  0E22               	movlw	low (_loRa+34)
  5770  005C12  6F60               	movwf	memcpy@d1& (0+255),b
  5771  005C14  0E02               	movlw	high (_loRa+34)
  5772  005C16  6F61               	movwf	(memcpy@d1+1)& (0+255),b
  5773  005C18  C06A  F062         	movff	LORAWAN_SetNetworkSessionKey@networkSessionKeyNew,memcpy@s1
  5774  005C1C  C06B  F063         	movff	LORAWAN_SetNetworkSessionKey@networkSessionKeyNew+1,memcpy@s1+1
  5775  005C20  ECF6  F02C         	call	PL306	;call to abstracted procedure
  5776  005C24  EC94  F028         	call	_memcpy	;wreg free
  5777                           
  5778                           ; BSR set to: 0
  5779                           ;lorawan.c: 384: loRa.macKeys.networkSessionKey = 1;
  5780  005C28  0102               	movlb	2	; () banked
  5781  005C2A  89A5               	bsf	(_loRa+165)& (0+255),4,b
  5782                           
  5783                           ; BSR set to: 2
  5784                           ;lorawan.c: 385: loRa.macStatus.networkJoined = 0;
  5785  005C2C  9902               	bcf	(_loRa+2)& (0+255),4,b
  5786  005C2E  0012               	return		;funcret
  5787  005C30                     __end_of_LORAWAN_SetNetworkSessionKey:
  5788                           	opt stack 0
  5789                           tosu	equ	0xFFF
  5790                           tosh	equ	0xFFE
  5791                           tosl	equ	0xFFD
  5792                           pclath	equ	0xFFA
  5793                           tblptru	equ	0xFF8
  5794                           tblptrh	equ	0xFF7
  5795                           tblptrl	equ	0xFF6
  5796                           tablat	equ	0xFF5
  5797                           prodh	equ	0xFF4
  5798                           prodl	equ	0xFF3
  5799                           intcon	equ	0xFF2
  5800                           indf0	equ	0xFEF
  5801                           postinc0	equ	0xFEE
  5802                           plusw0	equ	0xFEB
  5803                           fsr0h	equ	0xFEA
  5804                           fsr0l	equ	0xFE9
  5805                           wreg	equ	0xFE8
  5806                           postinc1	equ	0xFE6
  5807                           postdec1	equ	0xFE5
  5808                           plusw1	equ	0xFE3
  5809                           fsr1h	equ	0xFE2
  5810                           fsr1l	equ	0xFE1
  5811                           indf2	equ	0xFDF
  5812                           postinc2	equ	0xFDE
  5813                           postdec2	equ	0xFDD
  5814                           plusw2	equ	0xFDB
  5815                           fsr2h	equ	0xFDA
  5816                           fsr2l	equ	0xFD9
  5817                           status	equ	0xFD8
  5818                           
  5819 ;; *************** function _LORAWAN_SetDeviceAddress *****************
  5820 ;; Defined at:
  5821 ;;		line 367 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  5822 ;; Parameters:    Size  Location     Type
  5823 ;;  deviceAddres    4    0[BANK0 ] unsigned long 
  5824 ;; Auto vars:     Size  Location     Type
  5825 ;;		None
  5826 ;; Return value:  Size  Location     Type
  5827 ;;                  1    wreg      void 
  5828 ;; Registers used:
  5829 ;;		None
  5830 ;; Tracked objects:
  5831 ;;		On entry : 3F/0
  5832 ;;		On exit  : 3F/2
  5833 ;;		Unchanged: 0/0
  5834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5835 ;;      Params:         0       4       0       0       0       0       0       0       0
  5836 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5837 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5838 ;;      Totals:         0       4       0       0       0       0       0       0       0
  5839 ;;Total ram usage:        4 bytes
  5840 ;; Hardware stack levels used:    1
  5841 ;; Hardware stack levels required when called:    7
  5842 ;; This function calls:
  5843 ;;		Nothing
  5844 ;; This function is called by:
  5845 ;;		_main
  5846 ;; This function uses a non-reentrant model
  5847 ;;
  5848                           
  5849                           	psect	text27
  5850  005F46                     __ptext27:
  5851                           	opt stack 0
  5852  005F46                     _LORAWAN_SetDeviceAddress:
  5853                           	opt stack 23
  5854                           
  5855                           ; BSR set to: 0
  5856                           ;lorawan.c: 369: loRa.activationParameters.deviceAddress.value = deviceAddressNew;
  5857                           
  5858                           ;incstack = 0
  5859  005F46  C060  F21E         	movff	LORAWAN_SetDeviceAddress@deviceAddressNew,_loRa+30
  5860  005F4A  C061  F21F         	movff	LORAWAN_SetDeviceAddress@deviceAddressNew+1,_loRa+31
  5861  005F4E  C062  F220         	movff	LORAWAN_SetDeviceAddress@deviceAddressNew+2,_loRa+32
  5862  005F52  C063  F221         	movff	LORAWAN_SetDeviceAddress@deviceAddressNew+3,_loRa+33
  5863                           
  5864                           ;lorawan.c: 370: loRa.macKeys.deviceAddress = 1;
  5865  005F56  0102               	movlb	2	; () banked
  5866  005F58  85A5               	bsf	(_loRa+165)& (0+255),2,b
  5867                           
  5868                           ;lorawan.c: 371: loRa.macStatus.networkJoined = 0;
  5869  005F5A  9902               	bcf	(_loRa+2)& (0+255),4,b
  5870                           
  5871                           ; BSR set to: 2
  5872  005F5C  0012               	return		;funcret
  5873  005F5E                     __end_of_LORAWAN_SetDeviceAddress:
  5874                           	opt stack 0
  5875                           tosu	equ	0xFFF
  5876                           tosh	equ	0xFFE
  5877                           tosl	equ	0xFFD
  5878                           pclath	equ	0xFFA
  5879                           tblptru	equ	0xFF8
  5880                           tblptrh	equ	0xFF7
  5881                           tblptrl	equ	0xFF6
  5882                           tablat	equ	0xFF5
  5883                           prodh	equ	0xFF4
  5884                           prodl	equ	0xFF3
  5885                           intcon	equ	0xFF2
  5886                           indf0	equ	0xFEF
  5887                           postinc0	equ	0xFEE
  5888                           plusw0	equ	0xFEB
  5889                           fsr0h	equ	0xFEA
  5890                           fsr0l	equ	0xFE9
  5891                           wreg	equ	0xFE8
  5892                           postinc1	equ	0xFE6
  5893                           postdec1	equ	0xFE5
  5894                           plusw1	equ	0xFE3
  5895                           fsr1h	equ	0xFE2
  5896                           fsr1l	equ	0xFE1
  5897                           indf2	equ	0xFDF
  5898                           postinc2	equ	0xFDE
  5899                           postdec2	equ	0xFDD
  5900                           plusw2	equ	0xFDB
  5901                           fsr2h	equ	0xFDA
  5902                           fsr2l	equ	0xFD9
  5903                           status	equ	0xFD8
  5904                           
  5905 ;; *************** function _LORAWAN_SetApplicationSessionKey *****************
  5906 ;; Defined at:
  5907 ;;		line 394 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  5908 ;; Parameters:    Size  Location     Type
  5909 ;;  applicationS    2   10[BANK0 ] PTR unsigned char 
  5910 ;;		 -> appSKey(16), 
  5911 ;; Auto vars:     Size  Location     Type
  5912 ;;		None
  5913 ;; Return value:  Size  Location     Type
  5914 ;;                  1    wreg      void 
  5915 ;; Registers used:
  5916 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5917 ;; Tracked objects:
  5918 ;;		On entry : 3F/0
  5919 ;;		On exit  : 3D/0
  5920 ;;		Unchanged: 0/0
  5921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5922 ;;      Params:         0       2       0       0       0       0       0       0       0
  5923 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5924 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5925 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5926 ;;Total ram usage:        2 bytes
  5927 ;; Hardware stack levels used:    1
  5928 ;; Hardware stack levels required when called:    8
  5929 ;; This function calls:
  5930 ;;		_memcpy
  5931 ;; This function is called by:
  5932 ;;		_main
  5933 ;; This function uses a non-reentrant model
  5934 ;;
  5935                           
  5936                           	psect	text28
  5937  0059C6                     __ptext28:
  5938                           	opt stack 0
  5939  0059C6                     _LORAWAN_SetApplicationSessionKey:
  5940                           	opt stack 22
  5941                           
  5942                           ; BSR set to: 0
  5943                           ;lorawan.c: 396: if (applicationSessionKeyNew != (0))
  5944                           
  5945                           ; BSR set to: 2
  5946                           ;incstack = 0
  5947  0059C6  516A               	movf	LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew& (0+255),w,b
  5948  0059C8  116B               	iorwf	(LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew+1)& (0+255),w,b
  5949  0059CA  B4D8               	btfsc	status,2,c
  5950  0059CC  0012               	return	
  5951                           
  5952                           ; BSR set to: 0
  5953                           ;lorawan.c: 397: {
  5954                           ;lorawan.c: 398: memcpy( loRa.activationParameters.applicationSessionKey, applicationSes
      +                          sionKeyNew, 16);
  5955  0059CE  0E32               	movlw	low (_loRa+50)
  5956  0059D0  6F60               	movwf	memcpy@d1& (0+255),b
  5957  0059D2  0E02               	movlw	high (_loRa+50)
  5958  0059D4  6F61               	movwf	(memcpy@d1+1)& (0+255),b
  5959  0059D6  C06A  F062         	movff	LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew,memcpy@s1
  5960  0059DA  C06B  F063         	movff	LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew+1,memcpy@s1+1
  5961  0059DE  D806               	call	PL306	;call to abstracted procedure
  5962  0059E0  EC94  F028         	call	_memcpy	;wreg free
  5963                           
  5964                           ; BSR set to: 0
  5965                           ;lorawan.c: 399: loRa.macKeys.applicationSessionKey = 1;
  5966  0059E4  0102               	movlb	2	; () banked
  5967  0059E6  8BA5               	bsf	(_loRa+165)& (0+255),5,b
  5968                           
  5969                           ; BSR set to: 2
  5970                           ;lorawan.c: 400: loRa.macStatus.networkJoined = 0;
  5971  0059E8  9902               	bcf	(_loRa+2)& (0+255),4,b
  5972  0059EA  0012               	return		;funcret
  5973  0059EC                     __end_of_LORAWAN_SetApplicationSessionKey:
  5974                           	opt stack 0
  5975  0059EC                     PL306:
  5976                           	opt stack 22
  5977  0059EC  6B65               	clrf	(memcpy@n+1)& (0+255),b
  5978  0059EE  0E10               	movlw	16
  5979  0059F0  6F64               	movwf	memcpy@n& (0+255),b
  5980  0059F2  0C10               	retlw	16
  5981  0059F4                     __end_ofPL306:
  5982                           	opt stack 0
  5983                           tosu	equ	0xFFF
  5984                           tosh	equ	0xFFE
  5985                           tosl	equ	0xFFD
  5986                           pclath	equ	0xFFA
  5987                           tblptru	equ	0xFF8
  5988                           tblptrh	equ	0xFF7
  5989                           tblptrl	equ	0xFF6
  5990                           tablat	equ	0xFF5
  5991                           prodh	equ	0xFF4
  5992                           prodl	equ	0xFF3
  5993                           intcon	equ	0xFF2
  5994                           indf0	equ	0xFEF
  5995                           postinc0	equ	0xFEE
  5996                           plusw0	equ	0xFEB
  5997                           fsr0h	equ	0xFEA
  5998                           fsr0l	equ	0xFE9
  5999                           wreg	equ	0xFE8
  6000                           postinc1	equ	0xFE6
  6001                           postdec1	equ	0xFE5
  6002                           plusw1	equ	0xFE3
  6003                           fsr1h	equ	0xFE2
  6004                           fsr1l	equ	0xFE1
  6005                           indf2	equ	0xFDF
  6006                           postinc2	equ	0xFDE
  6007                           postdec2	equ	0xFDD
  6008                           plusw2	equ	0xFDB
  6009                           fsr2h	equ	0xFDA
  6010                           fsr2l	equ	0xFD9
  6011                           status	equ	0xFD8
  6012                           
  6013 ;; *************** function _LORAWAN_Mainloop *****************
  6014 ;; Defined at:
  6015 ;;		line 2238 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  6016 ;; Parameters:    Size  Location     Type
  6017 ;;		None
  6018 ;; Auto vars:     Size  Location     Type
  6019 ;;		None
  6020 ;; Return value:  Size  Location     Type
  6021 ;;                  1    wreg      void 
  6022 ;; Registers used:
  6023 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+4, btemp+5, btem
      +p+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6024 ;; Tracked objects:
  6025 ;;		On entry : 0/1
  6026 ;;		On exit  : 30/0
  6027 ;;		Unchanged: 0/0
  6028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6029 ;;      Params:         0       0       0       0       0       0       0       0       0
  6030 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6031 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6032 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6033 ;;Total ram usage:        0 bytes
  6034 ;; Hardware stack levels used:    1
  6035 ;; Hardware stack levels required when called:   18
  6036 ;; This function calls:
  6037 ;;		_INTERRUPT_GetDioStatus
  6038 ;;		_RADIO_DIO0
  6039 ;;		_RADIO_DIO1
  6040 ;;		_RADIO_DIO2
  6041 ;;		_RADIO_DIO3
  6042 ;;		_RADIO_DIO4
  6043 ;;		_RADIO_DIO5
  6044 ;;		_SwTimersExecute
  6045 ;; This function is called by:
  6046 ;;		_main
  6047 ;; This function uses a non-reentrant model
  6048 ;;
  6049                           
  6050                           	psect	text29
  6051  00573A                     __ptext29:
  6052                           	opt stack 0
  6053  00573A                     _LORAWAN_Mainloop:
  6054                           	opt stack 12
  6055                           
  6056                           ;lorawan.c: 2240: SwTimersExecute();
  6057                           
  6058                           ;incstack = 0
  6059  00573A  ECA9  F023         	call	_SwTimersExecute	;wreg free
  6060                           
  6061                           ; BSR set to: 0
  6062                           ;lorawan.c: 2243: localDioStatus = INTERRUPT_GetDioStatus();
  6063  00573E  EC79  F030         	call	_INTERRUPT_GetDioStatus	;wreg free
  6064  005742  0101               	movlb	1	; () banked
  6065  005744  6F7E               	movwf	_localDioStatus& (0+255),b
  6066                           
  6067                           ; BSR set to: 1
  6068                           ;lorawan.c: 2245: if ((localDioStatus & 0x01) != 0)
  6069  005746  B17E               	btfsc	_localDioStatus& (0+255),0,b
  6070                           
  6071                           ; BSR set to: 1
  6072                           ;lorawan.c: 2246: {
  6073                           ;lorawan.c: 2247: RADIO_DIO0();
  6074  005748  ECF9  F025         	call	_RADIO_DIO0	;wreg free
  6075                           
  6076                           ;lorawan.c: 2248: }
  6077                           ;lorawan.c: 2249: if ((localDioStatus & 0x02) != 0)
  6078  00574C  0101               	movlb	1	; () banked
  6079  00574E  B37E               	btfsc	_localDioStatus& (0+255),1,b
  6080                           
  6081                           ; BSR set to: 1
  6082                           ;lorawan.c: 2250: {
  6083                           ;lorawan.c: 2251: RADIO_DIO1();
  6084  005750  ECBB  F02B         	call	_RADIO_DIO1	;wreg free
  6085                           
  6086                           ;lorawan.c: 2252: }
  6087                           ;lorawan.c: 2253: if ((localDioStatus & 0x04) != 0)
  6088  005754  0101               	movlb	1	; () banked
  6089  005756  B57E               	btfsc	_localDioStatus& (0+255),2,b
  6090                           
  6091                           ; BSR set to: 1
  6092                           ;lorawan.c: 2254: {
  6093                           ;lorawan.c: 2255: RADIO_DIO2();
  6094  005758  EC95  F02A         	call	_RADIO_DIO2	;wreg free
  6095                           
  6096                           ;lorawan.c: 2256: }
  6097                           ;lorawan.c: 2257: if ((localDioStatus & 0x08) != 0)
  6098  00575C  0101               	movlb	1	; () banked
  6099  00575E  B77E               	btfsc	_localDioStatus& (0+255),3,b
  6100                           
  6101                           ; BSR set to: 1
  6102                           ;lorawan.c: 2258: {
  6103                           ;lorawan.c: 2259: RADIO_DIO3();
  6104  005760  ECC7  F02F         	call	_RADIO_DIO3	;wreg free
  6105                           
  6106                           ;lorawan.c: 2260: }
  6107                           ;lorawan.c: 2261: if ((localDioStatus & 0x10) != 0)
  6108  005764  0101               	movlb	1	; () banked
  6109  005766  B97E               	btfsc	_localDioStatus& (0+255),4,b
  6110                           
  6111                           ; BSR set to: 1
  6112                           ;lorawan.c: 2262: {
  6113                           ;lorawan.c: 2263: RADIO_DIO4();
  6114  005768  ECBB  F02F         	call	_RADIO_DIO4	;wreg free
  6115                           
  6116                           ;lorawan.c: 2264: }
  6117                           ;lorawan.c: 2265: if ((localDioStatus & 0x20) != 0)
  6118  00576C  0101               	movlb	1	; () banked
  6119  00576E  BB7E               	btfsc	_localDioStatus& (0+255),5,b
  6120                           
  6121                           ; BSR set to: 1
  6122                           ;lorawan.c: 2266: {
  6123                           ;lorawan.c: 2267: RADIO_DIO5();
  6124  005770  ECAF  F02F         	call	_RADIO_DIO5	;wreg free
  6125  005774  0012               	return		;funcret
  6126  005776                     __end_of_LORAWAN_Mainloop:
  6127                           	opt stack 0
  6128                           tosu	equ	0xFFF
  6129                           tosh	equ	0xFFE
  6130                           tosl	equ	0xFFD
  6131                           pclath	equ	0xFFA
  6132                           tblptru	equ	0xFF8
  6133                           tblptrh	equ	0xFF7
  6134                           tblptrl	equ	0xFF6
  6135                           tablat	equ	0xFF5
  6136                           prodh	equ	0xFF4
  6137                           prodl	equ	0xFF3
  6138                           intcon	equ	0xFF2
  6139                           indf0	equ	0xFEF
  6140                           postinc0	equ	0xFEE
  6141                           plusw0	equ	0xFEB
  6142                           fsr0h	equ	0xFEA
  6143                           fsr0l	equ	0xFE9
  6144                           wreg	equ	0xFE8
  6145                           postinc1	equ	0xFE6
  6146                           postdec1	equ	0xFE5
  6147                           plusw1	equ	0xFE3
  6148                           fsr1h	equ	0xFE2
  6149                           fsr1l	equ	0xFE1
  6150                           indf2	equ	0xFDF
  6151                           postinc2	equ	0xFDE
  6152                           postdec2	equ	0xFDD
  6153                           plusw2	equ	0xFDB
  6154                           fsr2h	equ	0xFDA
  6155                           fsr2l	equ	0xFD9
  6156                           status	equ	0xFD8
  6157                           
  6158 ;; *************** function _SwTimersExecute *****************
  6159 ;; Defined at:
  6160 ;;		line 260 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
  6161 ;; Parameters:    Size  Location     Type
  6162 ;;		None
  6163 ;; Auto vars:     Size  Location     Type
  6164 ;;  i               1  132[BANK0 ] unsigned char 
  6165 ;; Return value:  Size  Location     Type
  6166 ;;                  1    wreg      void 
  6167 ;; Registers used:
  6168 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+4, btemp+5, btem
      +p+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6169 ;; Tracked objects:
  6170 ;;		On entry : 0/1
  6171 ;;		On exit  : 3F/0
  6172 ;;		Unchanged: 0/0
  6173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6174 ;;      Params:         0       0       0       0       0       0       0       0       0
  6175 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6176 ;;      Temps:          0       4       0       0       0       0       0       0       0
  6177 ;;      Totals:         0       5       0       0       0       0       0       0       0
  6178 ;;Total ram usage:        5 bytes
  6179 ;; Hardware stack levels used:    1
  6180 ;; Hardware stack levels required when called:   17
  6181 ;; This function calls:
  6182 ;;		Absolute function
  6183 ;;		_AckRetransmissionCallback
  6184 ;;		_AutomaticReplyCallback
  6185 ;;		_DutyCycleCallback
  6186 ;;		_LORAWAN_LinkCheckCallback
  6187 ;;		_LORAWAN_ReceiveWindow1Callback
  6188 ;;		_LORAWAN_ReceiveWindow2Callback
  6189 ;;		_RADIO_RxFSKTimeout
  6190 ;;		_RADIO_WatchdogTimeout
  6191 ;;		_UnconfirmedTransmissionCallback
  6192 ;;		_UpdateJoinSuccessState
  6193 ;; This function is called by:
  6194 ;;		_LORAWAN_Mainloop
  6195 ;; This function uses a non-reentrant model
  6196 ;;
  6197                           
  6198                           	psect	text30
  6199  004752                     __ptext30:
  6200                           	opt stack 0
  6201  004752                     _SwTimersExecute:
  6202                           	opt stack 12
  6203                           
  6204                           ;sw_timer.c: 262: uint8_t i;
  6205                           ;sw_timer.c: 264: (INTCONbits.GIE = 0);
  6206                           
  6207                           ;incstack = 0
  6208  004752  9EF2               	bcf	intcon,7,c	;volatile
  6209                           
  6210                           ;sw_timer.c: 265: for (i = 0; i < allocatedTimers; i++)
  6211  004754  0100               	movlb	0	; () banked
  6212  004756  6BE4               	clrf	SwTimersExecute@i& (0+255),b
  6213  004758  D029               	goto	l16068
  6214  00475A                     l16054:
  6215                           
  6216                           ; BSR set to: 0
  6217                           ;sw_timer.c: 266: {
  6218                           ;sw_timer.c: 269: if (swTimers[i].running == 1)
  6219  00475A  51E4               	movf	SwTimersExecute@i& (0+255),w,b
  6220  00475C  D82C               	call	PL40	;call to abstracted procedure
  6221  00475E  04DE               	decf	postinc2,w,c
  6222  004760  E123               	bnz	l16066
  6223                           
  6224                           ; BSR set to: 0
  6225                           ;sw_timer.c: 270: {
  6226                           ;sw_timer.c: 271: if (0 == swTimers[i].ticksRemaining)
  6227  004762  51E4               	movf	SwTimersExecute@i& (0+255),w,b
  6228  004764  EC84  F01F         	call	PL10	;call to abstracted procedure
  6229  004768  ECBB  F00E         	call	PL130	;call to abstracted procedure
  6230  00476C  E11D               	bnz	l16066
  6231                           
  6232                           ; BSR set to: 0
  6233                           ;sw_timer.c: 272: {
  6234                           ;sw_timer.c: 273: swTimers[i].running = 0;
  6235  00476E  51E4               	movf	SwTimersExecute@i& (0+255),w,b
  6236  004770  D822               	call	PL40	;call to abstracted procedure
  6237  004772  6ADF               	clrf	indf2,c
  6238                           
  6239                           ;sw_timer.c: 274: if ((0) != swTimers[i].callback)
  6240  004774  51E4               	movf	SwTimersExecute@i& (0+255),w,b
  6241  004776  D827               	call	PL94	;call to abstracted procedure
  6242  004778  50DE               	movf	postinc2,w,c
  6243  00477A  10DE               	iorwf	postinc2,w,c
  6244  00477C  E015               	bz	l16066
  6245                           
  6246                           ; BSR set to: 0
  6247                           ;sw_timer.c: 275: {
  6248                           ;sw_timer.c: 276: (INTCONbits.GIE = 1);
  6249  00477E  8EF2               	bsf	intcon,7,c	;volatile
  6250                           
  6251                           ; BSR set to: 0
  6252                           ;sw_timer.c: 277: swTimers[i].callback(swTimers[i].callbackParameter);
  6253  004780  51E4               	movf	SwTimersExecute@i& (0+255),w,b
  6254  004782  ECBC  F02D         	call	PL158	;call to abstracted procedure
  6255  004786  50DF               	movf	indf2,w,c
  6256  004788  6EE6               	movwf	postinc1,c
  6257  00478A  51E4               	movf	SwTimersExecute@i& (0+255),w,b
  6258  00478C  D81C               	call	PL94	;call to abstracted procedure
  6259  00478E  D801               	call	u19458
  6260  004790  D00A               	goto	l16064
  6261  004792                     u19458:
  6262  004792  0005               	push	
  6263  004794  6EFA               	movwf	pclath,c
  6264  004796  50DE               	movf	postinc2,w,c
  6265  004798  6EFD               	movwf	tosl,c
  6266  00479A  50DE               	movf	postinc2,w,c
  6267  00479C  6EFE               	movwf	tosh,c
  6268  00479E  50F8               	movf	tblptru,w,c
  6269  0047A0  6EFF               	movwf	tosu,c
  6270  0047A2  50FA               	movf	pclath,w,c
  6271  0047A4  0012               	return		;indir
  6272  0047A6                     l16064:
  6273                           
  6274                           ;sw_timer.c: 278: (INTCONbits.GIE = 0);
  6275  0047A6  9EF2               	bcf	intcon,7,c	;volatile
  6276  0047A8                     l16066:
  6277  0047A8  0100               	movlb	0	; () banked
  6278  0047AA  2BE4               	incf	SwTimersExecute@i& (0+255),f,b
  6279  0047AC                     l16068:
  6280                           
  6281                           ; BSR set to: 0
  6282  0047AC  51FF               	movf	_allocatedTimers& (0+255),w,b	;volatile
  6283  0047AE  5DE4               	subwf	SwTimersExecute@i& (0+255),w,b
  6284  0047B0  E3D4               	bnc	l16054
  6285                           
  6286                           ; BSR set to: 0
  6287                           ;sw_timer.c: 279: }
  6288                           ;sw_timer.c: 280: }
  6289                           ;sw_timer.c: 281: }
  6290                           ;sw_timer.c: 282: }
  6291                           ;sw_timer.c: 283: (INTCONbits.GIE = 1);
  6292  0047B2  8EF2               	bsf	intcon,7,c	;volatile
  6293                           
  6294                           ; BSR set to: 0
  6295  0047B4  0012               	return		;funcret
  6296  0047B6                     __end_of_SwTimersExecute:
  6297                           	opt stack 0
  6298  0047B6                     PL40:
  6299                           	opt stack 12
  6300  0047B6  0D08               	mullw	8
  6301  0047B8  0E04               	movlw	low (_swTimers+4)
  6302  0047BA  24F3               	addwf	prodl,w,c
  6303  0047BC  6ED9               	movwf	fsr2l,c
  6304  0047BE  0E03               	movlw	high (_swTimers+4)
  6305  0047C0  20F4               	addwfc	prodh,w,c
  6306  0047C2  6EDA               	movwf	fsr2h,c
  6307  0047C4  0012               	return	
  6308  0047C6                     __end_ofPL40:
  6309                           	opt stack 0
  6310  0047C6                     PL94:
  6311                           	opt stack 12
  6312  0047C6  0D08               	mullw	8
  6313  0047C8  0E06               	movlw	low (_swTimers+6)
  6314  0047CA  24F3               	addwf	prodl,w,c
  6315  0047CC  6ED9               	movwf	fsr2l,c
  6316  0047CE  0E03               	movlw	high (_swTimers+6)
  6317  0047D0  20F4               	addwfc	prodh,w,c
  6318  0047D2  6EDA               	movwf	fsr2h,c
  6319  0047D4  0012               	return	
  6320  0047D6                     __end_ofPL94:
  6321                           	opt stack 0
  6322                           tosu	equ	0xFFF
  6323                           tosh	equ	0xFFE
  6324                           tosl	equ	0xFFD
  6325                           pclath	equ	0xFFA
  6326                           tblptru	equ	0xFF8
  6327                           tblptrh	equ	0xFF7
  6328                           tblptrl	equ	0xFF6
  6329                           tablat	equ	0xFF5
  6330                           prodh	equ	0xFF4
  6331                           prodl	equ	0xFF3
  6332                           intcon	equ	0xFF2
  6333                           indf0	equ	0xFEF
  6334                           postinc0	equ	0xFEE
  6335                           plusw0	equ	0xFEB
  6336                           fsr0h	equ	0xFEA
  6337                           fsr0l	equ	0xFE9
  6338                           wreg	equ	0xFE8
  6339                           postinc1	equ	0xFE6
  6340                           postdec1	equ	0xFE5
  6341                           plusw1	equ	0xFE3
  6342                           fsr1h	equ	0xFE2
  6343                           fsr1l	equ	0xFE1
  6344                           indf2	equ	0xFDF
  6345                           postinc2	equ	0xFDE
  6346                           postdec2	equ	0xFDD
  6347                           plusw2	equ	0xFDB
  6348                           fsr2h	equ	0xFDA
  6349                           fsr2l	equ	0xFD9
  6350                           status	equ	0xFD8
  6351                           
  6352 ;; *************** function _RADIO_WatchdogTimeout *****************
  6353 ;; Defined at:
  6354 ;;		line 1408 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  6355 ;; Parameters:    Size  Location     Type
  6356 ;;  param           1  [STACK] unsigned char 
  6357 ;; Auto vars:     Size  Location     Type
  6358 ;;		None
  6359 ;; Return value:  Size  Location     Type
  6360 ;;                  1  [STACK] void 
  6361 ;; Registers used:
  6362 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tb
      +lptru, prodl, prodh, cstack
  6363 ;; Tracked objects:
  6364 ;;		On entry : 3F/0
  6365 ;;		On exit  : 3C/0
  6366 ;;		Unchanged: 0/0
  6367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6368 ;;      Params:         0       0       0       0       0       0       0       0       0
  6369 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6370 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6371 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6372 ;;Total ram usage:        0 bytes
  6373 ;; Hardware stack levels used:    1
  6374 ;; Hardware stack levels required when called:   16
  6375 ;; This function calls:
  6376 ;;		_LORAWAN_RxTimeout
  6377 ;;		_LORAWAN_TxDone
  6378 ;;		_RADIO_WriteMode
  6379 ;; This function is called by:
  6380 ;;		_RADIO_Init
  6381 ;;		_SwTimersExecute
  6382 ;; This function uses a reentrant model
  6383 ;;
  6384                           
  6385                           	psect	text31
  6386  00585A                     __ptext31:
  6387                           	opt stack 0
  6388  00585A                     _RADIO_WatchdogTimeout:
  6389                           	opt stack 0
  6390                           
  6391                           ;radio_driver_SX1276.c: 1410: RADIO_WriteMode(MODE_STANDBY, RadioConfiguration.modulatio
      +                          n, 1);
  6392                           
  6393                           ; BSR set to: 0
  6394                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  6395                           ;incstack = 0
  6396  00585A  ECB4  F00F         	call	PL346	;call to abstracted procedure
  6397  00585E  ECDB  F01A         	call	_RADIO_WriteMode
  6398                           
  6399                           ;radio_driver_SX1276.c: 1411: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  6400  005862  EC66  F02D         	call	PL78	;call to abstracted procedure
  6401  005866  ECDB  F01A         	call	_RADIO_WriteMode
  6402                           
  6403                           ;radio_driver_SX1276.c: 1412: RadioConfiguration.flags |= (1 << (4));
  6404  00586A  0101               	movlb	1	; () banked
  6405  00586C  89A2               	bsf	(_RadioConfiguration+35)& (0+255),4,b
  6406                           
  6407                           ; BSR set to: 1
  6408                           ;radio_driver_SX1276.c: 1413: if ((RadioConfiguration.flags & (1 << (1))) != 0)
  6409  00586E  A3A2               	btfss	(_RadioConfiguration+35)& (0+255),1,b
  6410  005870  D004               	goto	l1910
  6411                           
  6412                           ; BSR set to: 1
  6413                           ;radio_driver_SX1276.c: 1414: {
  6414                           ;radio_driver_SX1276.c: 1415: RadioConfiguration.flags &= ~(1 << (1));
  6415  005872  93A2               	bcf	(_RadioConfiguration+35)& (0+255),1,b
  6416                           
  6417                           ; BSR set to: 1
  6418                           ;radio_driver_SX1276.c: 1416: LORAWAN_RxTimeout();
  6419  005874  EC90  F00B         	call	_LORAWAN_RxTimeout	;wreg free
  6420                           
  6421                           ;radio_driver_SX1276.c: 1417: }
  6422  005878  D009               	goto	l1913
  6423  00587A                     l1910:
  6424                           
  6425                           ; BSR set to: 1
  6426                           ;radio_driver_SX1276.c: 1418: else if ((RadioConfiguration.flags & (1 << (0))) != 0)
  6427  00587A  A1A2               	btfss	(_RadioConfiguration+35)& (0+255),0,b
  6428  00587C  D007               	goto	l1913
  6429                           
  6430                           ; BSR set to: 1
  6431                           ;radio_driver_SX1276.c: 1419: {
  6432                           ;radio_driver_SX1276.c: 1420: RadioConfiguration.flags &= ~(1 << (0));
  6433  00587E  91A2               	bcf	(_RadioConfiguration+35)& (0+255),0,b
  6434                           
  6435                           ; BSR set to: 1
  6436                           ;radio_driver_SX1276.c: 1425: LORAWAN_TxDone(RadioConfiguration.watchdogTimerTimeout);
  6437  005880  C1A9  F0B0         	movff	_RadioConfiguration+42,LORAWAN_TxDone@timeOnAir
  6438  005884  C1AA  F0B1         	movff	_RadioConfiguration+43,LORAWAN_TxDone@timeOnAir+1
  6439  005888  EC5E  F004         	call	_LORAWAN_TxDone	;wreg free
  6440  00588C                     l1913:
  6441                           
  6442                           ; _RADIO_WatchdogTimeout: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 pars
      +                          ize = 1, argsize = 1, vargsize = 0
  6443  00588C  52E5               	movf	postdec1,f,c
  6444  00588E  0012               	return		;funcret
  6445  005890                     __end_of_RADIO_WatchdogTimeout:
  6446                           	opt stack 0
  6447                           tosu	equ	0xFFF
  6448                           tosh	equ	0xFFE
  6449                           tosl	equ	0xFFD
  6450                           pclath	equ	0xFFA
  6451                           tblptru	equ	0xFF8
  6452                           tblptrh	equ	0xFF7
  6453                           tblptrl	equ	0xFF6
  6454                           tablat	equ	0xFF5
  6455                           prodh	equ	0xFF4
  6456                           prodl	equ	0xFF3
  6457                           intcon	equ	0xFF2
  6458                           indf0	equ	0xFEF
  6459                           postinc0	equ	0xFEE
  6460                           plusw0	equ	0xFEB
  6461                           fsr0h	equ	0xFEA
  6462                           fsr0l	equ	0xFE9
  6463                           wreg	equ	0xFE8
  6464                           postinc1	equ	0xFE6
  6465                           postdec1	equ	0xFE5
  6466                           plusw1	equ	0xFE3
  6467                           fsr1h	equ	0xFE2
  6468                           fsr1l	equ	0xFE1
  6469                           indf2	equ	0xFDF
  6470                           postinc2	equ	0xFDE
  6471                           postdec2	equ	0xFDD
  6472                           plusw2	equ	0xFDB
  6473                           fsr2h	equ	0xFDA
  6474                           fsr2l	equ	0xFD9
  6475                           status	equ	0xFD8
  6476                           
  6477 ;; *************** function _RADIO_RxFSKTimeout *****************
  6478 ;; Defined at:
  6479 ;;		line 1392 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  6480 ;; Parameters:    Size  Location     Type
  6481 ;;  param           1  [STACK] unsigned char 
  6482 ;; Auto vars:     Size  Location     Type
  6483 ;;  irqFlags        1  [STACK] unsigned char 
  6484 ;; Return value:  Size  Location     Type
  6485 ;;                  1  [STACK] void 
  6486 ;; Registers used:
  6487 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+11, tosl, tblptr
      +l, tblptrh, tblptru, prodl, prodh, cstack
  6488 ;; Tracked objects:
  6489 ;;		On entry : 3F/0
  6490 ;;		On exit  : 3C/0
  6491 ;;		Unchanged: 0/0
  6492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6493 ;;      Params:         0       0       0       0       0       0       0       0       0
  6494 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6495 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6496 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6497 ;;Total ram usage:        0 bytes
  6498 ;; Hardware stack levels used:    1
  6499 ;; Hardware stack levels required when called:   16
  6500 ;; This function calls:
  6501 ;;		_LORAWAN_RxTimeout
  6502 ;;		_RADIO_RegisterRead
  6503 ;;		_RADIO_WriteMode
  6504 ;;		_SwTimerStop
  6505 ;; This function is called by:
  6506 ;;		_RADIO_Init
  6507 ;;		_SwTimersExecute
  6508 ;; This function uses a reentrant model
  6509 ;;
  6510                           
  6511                           	psect	text32
  6512  005964                     __ptext32:
  6513                           	opt stack 0
  6514  005964                     _RADIO_RxFSKTimeout:
  6515                           	opt stack 0
  6516                           
  6517                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  6518  005964  52E6               	movf	postinc1,f,c
  6519                           
  6520                           ;radio_driver_SX1276.c: 1394: uint8_t irqFlags;
  6521                           ;radio_driver_SX1276.c: 1395: irqFlags = RADIO_RegisterRead(0x3E);
  6522                           
  6523                           ;incstack = 0
  6524  005966  0E3E               	movlw	62
  6525  005968  EC64  F02E         	call	_RADIO_RegisterRead
  6526  00596C  6E53               	movwf	btemp+11,c
  6527                           
  6528                           ;stkvar	RADIO_RxFSKTimeout@irqFlags @ sp[(-1)+0]
  6529  00596E  0EFF               	movlw	-1
  6530  005970  C053  FFE3         	movff	btemp+11,plusw1
  6531                           
  6532                           ; BSR set to: 0
  6533                           ;radio_driver_SX1276.c: 1396: if (0 == (irqFlags & (1<<(0))))
  6534                           ;stkvar	RADIO_RxFSKTimeout@irqFlags @ sp[(-1)+0]
  6535  005974  B0E3               	btfsc	plusw1,0,c
  6536  005976  EFF9  F019         	goto	PL448
  6537                           
  6538                           ; BSR set to: 0
  6539                           ;radio_driver_SX1276.c: 1397: {
  6540                           ;radio_driver_SX1276.c: 1399: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  6541  00597A  EC77  F019         	call	PL248	;call to abstracted procedure
  6542  00597E  ECDB  F01A         	call	_RADIO_WriteMode
  6543                           
  6544                           ;radio_driver_SX1276.c: 1401: SwTimerStop(RadioConfiguration.watchdogTimerId);
  6545  005982  0101               	movlb	1	; () banked
  6546  005984  51A8               	movf	(_RadioConfiguration+41)& (0+255),w,b
  6547  005986  EC68  F030         	call	_SwTimerStop
  6548                           
  6549                           ; BSR set to: 0
  6550                           ;radio_driver_SX1276.c: 1402: RadioConfiguration.flags &= ~(1 << (1));
  6551  00598A  0101               	movlb	1	; () banked
  6552  00598C  93A2               	bcf	(_RadioConfiguration+35)& (0+255),1,b
  6553                           
  6554                           ; BSR set to: 1
  6555                           ;radio_driver_SX1276.c: 1403: LORAWAN_RxTimeout();
  6556  00598E  EC90  F00B         	call	_LORAWAN_RxTimeout	;wreg free
  6557  005992                     l1907:
  6558                           
  6559                           ; _RADIO_RxFSKTimeout: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize
      +                           = 1, argsize = 1, vargsize = 0
  6560  005992  EFF9  F019         	goto	PL448	;call to abstracted procedure
  6561  005996                     __end_of_RADIO_RxFSKTimeout:
  6562                           	opt stack 0
  6563                           tosu	equ	0xFFF
  6564                           tosh	equ	0xFFE
  6565                           tosl	equ	0xFFD
  6566                           pclath	equ	0xFFA
  6567                           tblptru	equ	0xFF8
  6568                           tblptrh	equ	0xFF7
  6569                           tblptrl	equ	0xFF6
  6570                           tablat	equ	0xFF5
  6571                           prodh	equ	0xFF4
  6572                           prodl	equ	0xFF3
  6573                           intcon	equ	0xFF2
  6574                           indf0	equ	0xFEF
  6575                           postinc0	equ	0xFEE
  6576                           plusw0	equ	0xFEB
  6577                           fsr0h	equ	0xFEA
  6578                           fsr0l	equ	0xFE9
  6579                           wreg	equ	0xFE8
  6580                           postinc1	equ	0xFE6
  6581                           postdec1	equ	0xFE5
  6582                           plusw1	equ	0xFE3
  6583                           fsr1h	equ	0xFE2
  6584                           fsr1l	equ	0xFE1
  6585                           indf2	equ	0xFDF
  6586                           postinc2	equ	0xFDE
  6587                           postdec2	equ	0xFDD
  6588                           plusw2	equ	0xFDB
  6589                           fsr2h	equ	0xFDA
  6590                           fsr2l	equ	0xFD9
  6591                           status	equ	0xFD8
  6592                           
  6593 ;; *************** function _DutyCycleCallback *****************
  6594 ;; Defined at:
  6595 ;;		line 1221 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
  6596 ;; Parameters:    Size  Location     Type
  6597 ;;  param           1  [STACK] unsigned char 
  6598 ;; Auto vars:     Size  Location     Type
  6599 ;;  minim           4  [STACK] unsigned long 
  6600 ;;  i               1  [STACK] unsigned char 
  6601 ;;  found           1  [STACK] unsigned char 
  6602 ;; Return value:  Size  Location     Type
  6603 ;;                  1  [STACK] void 
  6604 ;; Registers used:
  6605 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+1, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9,
      + btemp+10, btemp+11, prodl, prodh, cstack
  6606 ;; Tracked objects:
  6607 ;;		On entry : 3F/0
  6608 ;;		On exit  : 0/0
  6609 ;;		Unchanged: 0/0
  6610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6611 ;;      Params:         0       0       0       0       0       0       0       0       0
  6612 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6613 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6614 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6615 ;;Total ram usage:        0 bytes
  6616 ;; Hardware stack levels used:    1
  6617 ;; Hardware stack levels required when called:   11
  6618 ;; This function calls:
  6619 ;;		_SwTimerSetTimeout
  6620 ;;		_SwTimerStart
  6621 ;;		___lldiv
  6622 ;; This function is called by:
  6623 ;;		_SetCallbackSoftwareTimers
  6624 ;;		_SwTimersExecute
  6625 ;; This function uses a reentrant model
  6626 ;;
  6627                           
  6628                           	psect	text33
  6629  001B84                     __ptext33:
  6630                           	opt stack 0
  6631  001B84                     _DutyCycleCallback:
  6632                           	opt stack 0
  6633                           
  6634                           ; autosize = 10, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 va
      +                          rgsize = 0, retsize = 0
  6635  001B84  0E0A               	movlw	10
  6636  001B86  26E1               	addwf	fsr1l,f,c
  6637  001B88  0E00               	movlw	0
  6638  001B8A  22E2               	addwfc	fsr1h,f,c
  6639                           
  6640                           ;lorawan_eu.c: 1223: uint32_t minim = (4294967295UL);
  6641                           
  6642                           ;incstack = 0
  6643  001B8C  6850               	setf	btemp+8,c
  6644  001B8E  6851               	setf	btemp+9,c
  6645  001B90  6852               	setf	btemp+10,c
  6646  001B92  6853               	setf	btemp+11,c
  6647                           
  6648                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6649                           
  6650                           ;lorawan_eu.c: 1224: bool found = 0;
  6651                           ;stkvar	DutyCycleCallback@found @ sp[(-10)+9]
  6652  001B94  D8E1               	call	PL120	;call to abstracted procedure
  6653                           
  6654                           ;lorawan_eu.c: 1225: uint8_t i;
  6655                           ;lorawan_eu.c: 1227: for (i=0; i < 16; i++)
  6656                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6657  001B96  0EFE               	movlw	-2
  6658  001B98  6AE3               	clrf	plusw1,c
  6659  001B9A                     l14986:
  6660                           
  6661                           ;lorawan_eu.c: 1228: {
  6662                           ;lorawan_eu.c: 1230: if ((Channels[i].status == 1) && ( Channels[i].channelTimer != 0 ))
  6663                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6664  001B9A  0EFE               	movlw	-2
  6665  001B9C  50E3               	movf	plusw1,w,c
  6666  001B9E  EC86  F021         	call	PL12	;call to abstracted procedure
  6667  001BA2  E155               	bnz	l15004
  6668                           
  6669                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6670  001BA4  0EFE               	movlw	-2
  6671  001BA6  50E3               	movf	plusw1,w,c
  6672  001BA8  EC51  F006         	call	PL4	;call to abstracted procedure
  6673  001BAC  D8E4               	call	PL130	;call to abstracted procedure
  6674  001BAE  E04F               	bz	l15004
  6675                           
  6676                           ;lorawan_eu.c: 1231: {
  6677                           ;lorawan_eu.c: 1232: if ( Channels[i].channelTimer > loRa.lastTimerValue )
  6678                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6679  001BB0  0EFE               	movlw	-2
  6680  001BB2  50E3               	movf	plusw1,w,c
  6681  001BB4  EC51  F006         	call	PL4	;call to abstracted procedure
  6682  001BB8  50DE               	movf	postinc2,w,c
  6683  001BBA  0102               	movlb	2	; () banked
  6684  001BBC  5DC8               	subwf	(_loRa+200)& (0+255),w,b
  6685  001BBE  50DE               	movf	postinc2,w,c
  6686  001BC0  59C9               	subwfb	(_loRa+201)& (0+255),w,b
  6687  001BC2  50DE               	movf	postinc2,w,c
  6688  001BC4  59CA               	subwfb	(_loRa+202)& (0+255),w,b
  6689  001BC6  50DE               	movf	postinc2,w,c
  6690  001BC8  59CB               	subwfb	(_loRa+203)& (0+255),w,b
  6691  001BCA  E21E               	bc	l14994
  6692                           
  6693                           ; BSR set to: 2
  6694                           ;lorawan_eu.c: 1233: {
  6695                           ;lorawan_eu.c: 1234: Channels[i].channelTimer = Channels[i].channelTimer - loRa.lastTime
      +                          rValue;
  6696                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6697  001BCC  0EFE               	movlw	-2
  6698  001BCE  50E3               	movf	plusw1,w,c
  6699  001BD0  EC51  F006         	call	PL4	;call to abstracted procedure
  6700  001BD4  D8D5               	call	PL208	;call to abstracted procedure
  6701  001BD6  51C8               	movf	(_loRa+200)& (0+255),w,b
  6702  001BD8  5C50               	subwf	btemp+8,w,c
  6703  001BDA  6E4C               	movwf	btemp+4,c
  6704  001BDC  51C9               	movf	(_loRa+201)& (0+255),w,b
  6705  001BDE  5851               	subwfb	btemp+9,w,c
  6706  001BE0  6E4D               	movwf	btemp+5,c
  6707  001BE2  51CA               	movf	(_loRa+202)& (0+255),w,b
  6708  001BE4  5852               	subwfb	btemp+10,w,c
  6709  001BE6  6E4E               	movwf	btemp+6,c
  6710  001BE8  51CB               	movf	(_loRa+203)& (0+255),w,b
  6711  001BEA  5853               	subwfb	btemp+11,w,c
  6712  001BEC  6E4F               	movwf	btemp+7,c
  6713                           
  6714                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6715  001BEE  0EFE               	movlw	-2
  6716  001BF0  50E3               	movf	plusw1,w,c
  6717  001BF2  EC51  F006         	call	PL4	;call to abstracted procedure
  6718  001BF6  C04C  FFDE         	movff	btemp+4,postinc2
  6719  001BFA  C04D  FFDE         	movff	btemp+5,postinc2
  6720  001BFE  C04E  FFDE         	movff	btemp+6,postinc2
  6721  001C02  C04F  FFDE         	movff	btemp+7,postinc2
  6722                           
  6723                           ;lorawan_eu.c: 1235: }
  6724  001C06  D006               	goto	l14996
  6725  001C08                     l14994:
  6726                           
  6727                           ; BSR set to: 2
  6728                           ;lorawan_eu.c: 1236: else
  6729                           ;lorawan_eu.c: 1237: {
  6730                           ;lorawan_eu.c: 1238: Channels[i].channelTimer = 0;
  6731                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6732  001C08  0EFE               	movlw	-2
  6733  001C0A  50E3               	movf	plusw1,w,c
  6734  001C0C  EC51  F006         	call	PL4	;call to abstracted procedure
  6735  001C10  ECA2  F01D         	call	PL182	;call to abstracted procedure
  6736  001C14                     l14996:
  6737                           
  6738                           ; BSR set to: 2
  6739                           ;lorawan_eu.c: 1239: }
  6740                           ;lorawan_eu.c: 1240: if ( (Channels[i].channelTimer <= minim) && (Channels[i].channelTim
      +                          er != 0) )
  6741                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6742  001C14  0EFE               	movlw	-2
  6743  001C16  50E3               	movf	plusw1,w,c
  6744  001C18  EC51  F006         	call	PL4	;call to abstracted procedure
  6745                           
  6746                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6747  001C1C  0EFA               	movlw	-6
  6748  001C1E  CFE3 F049          	movff	plusw1,btemp+1
  6749  001C22  50DE               	movf	postinc2,w,c
  6750  001C24  5C49               	subwf	btemp+1,w,c
  6751  001C26  0EFB               	movlw	-5
  6752  001C28  D8B4               	call	PL312	;call to abstracted procedure
  6753  001C2A  0EFC               	movlw	-4
  6754  001C2C  D8B2               	call	PL312	;call to abstracted procedure
  6755  001C2E  0EFD               	movlw	-3
  6756  001C30  D8B0               	call	PL312	;call to abstracted procedure
  6757  001C32  E30D               	bnc	l15004
  6758                           
  6759                           ; BSR set to: 2
  6760                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6761  001C34  0EFE               	movlw	-2
  6762  001C36  50E3               	movf	plusw1,w,c
  6763  001C38  EC51  F006         	call	PL4	;call to abstracted procedure
  6764  001C3C  D89C               	call	PL130	;call to abstracted procedure
  6765  001C3E  E007               	bz	l15004
  6766                           
  6767                           ; BSR set to: 2
  6768                           ;lorawan_eu.c: 1241: {
  6769                           ;lorawan_eu.c: 1242: minim = Channels[i].channelTimer;
  6770                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6771  001C40  0EFE               	movlw	-2
  6772  001C42  50E3               	movf	plusw1,w,c
  6773  001C44  EC51  F006         	call	PL4	;call to abstracted procedure
  6774  001C48  D89B               	call	PL208	;call to abstracted procedure
  6775                           
  6776                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6777                           
  6778                           ; BSR set to: 2
  6779                           ;lorawan_eu.c: 1243: found = 1;
  6780                           ;stkvar	DutyCycleCallback@found @ sp[(-10)+9]
  6781  001C4A  D886               	call	PL120	;call to abstracted procedure
  6782  001C4C  2AE3               	incf	plusw1,f,c
  6783  001C4E                     l15004:
  6784                           
  6785                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6786  001C4E  0EFE               	movlw	-2
  6787  001C50  2AE3               	incf	plusw1,f,c
  6788                           
  6789                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6790  001C52  CFE3 F049          	movff	plusw1,btemp+1
  6791  001C56  0E0F               	movlw	15
  6792  001C58  6449               	cpfsgt	btemp+1,c
  6793  001C5A  D79F               	goto	l14986
  6794                           
  6795                           ;lorawan_eu.c: 1244: }
  6796                           ;lorawan_eu.c: 1245: }
  6797                           ;lorawan_eu.c: 1246: }
  6798                           ;lorawan_eu.c: 1247: if ( found == 1 )
  6799                           ;stkvar	DutyCycleCallback@found @ sp[(-10)+9]
  6800  001C5C  0EFF               	movlw	-1
  6801  001C5E  04E3               	decf	plusw1,w,c
  6802  001C60  E16C               	bnz	l1461
  6803                           
  6804                           ;lorawan_eu.c: 1248: {
  6805                           ;lorawan_eu.c: 1249: loRa.lastTimerValue = minim;
  6806                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6807  001C62  50E1               	movf	fsr1l,w,c
  6808  001C64  0FFA               	addlw	-6
  6809  001C66  D86C               	call	PL102	;call to abstracted procedure
  6810  001C68  CFDE F2C8          	movff	postinc2,_loRa+200
  6811  001C6C  CFDE F2C9          	movff	postinc2,_loRa+201
  6812  001C70  CFDE F2CA          	movff	postinc2,_loRa+202
  6813  001C74  CFDE F2CB          	movff	postinc2,_loRa+203
  6814                           
  6815                           ;lorawan_eu.c: 1250: SwTimerSetTimeout (loRa.dutyCycleTimerId, ((minim) < 0x000FFFFFUL ?
      +                           ( (((uint32_t)(minim)) << (12)) / 125UL ) : ( (((uint32_t)(minim)) / 125UL) << (12) ) )
      +                          );
  6816                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6817  001C78  0EFD               	movlw	-3
  6818  001C7A  50E3               	movf	plusw1,w,c
  6819  001C7C  E10D               	bnz	u17740
  6820  001C7E  0EFA               	movlw	-6
  6821  001C80  28E3               	incf	plusw1,w,c
  6822  001C82  0EFB               	movlw	-5
  6823  001C84  CFE3 F049          	movff	plusw1,btemp+1
  6824  001C88  0EFF               	movlw	255
  6825  001C8A  5A49               	subwfb	btemp+1,f,c
  6826  001C8C  0EFC               	movlw	-4
  6827  001C8E  CFE3 F049          	movff	plusw1,btemp+1
  6828  001C92  0E0F               	movlw	15
  6829  001C94  5A49               	subwfb	btemp+1,f,c
  6830  001C96  E318               	bnc	l15016
  6831  001C98                     u17740:
  6832                           
  6833                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6834  001C98  50E1               	movf	fsr1l,w,c
  6835  001C9A  0FFA               	addlw	-6
  6836  001C9C  D851               	call	PL102	;call to abstracted procedure
  6837  001C9E  CFDE F060          	movff	postinc2,___lldiv@dividend
  6838  001CA2  CFDE F061          	movff	postinc2,___lldiv@dividend+1
  6839  001CA6  CFDE F062          	movff	postinc2,___lldiv@dividend+2
  6840  001CAA  CFDE F063          	movff	postinc2,___lldiv@dividend+3
  6841  001CAE  0E7D               	movlw	125
  6842  001CB0  0100               	movlb	0	; () banked
  6843  001CB2  EC77  F011         	call	PL32	;call to abstracted procedure
  6844  001CB6  EC1B  F025         	call	___lldiv	;wreg free
  6845  001CBA  EC04  F01E         	call	PL50	;call to abstracted procedure
  6846  001CBE  0E0C               	movlw	12
  6847  001CC0                     u17755:
  6848  001CC0  D845               	call	PL108	;call to abstracted procedure
  6849  001CC2  2EE8               	decfsz	wreg,f,c
  6850  001CC4  D7FD               	goto	u17755
  6851  001CC6  D020               	goto	L1
  6852  001CC8                     l15016:
  6853                           
  6854                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6855  001CC8  0EFA               	movlw	-6
  6856  001CCA  CFE3 F050          	movff	plusw1,btemp+8
  6857  001CCE  0EFB               	movlw	-5
  6858  001CD0  CFE3 F051          	movff	plusw1,btemp+9
  6859  001CD4  0EFC               	movlw	-4
  6860  001CD6  CFE3 F052          	movff	plusw1,btemp+10
  6861  001CDA  0EFD               	movlw	-3
  6862  001CDC  CFE3 F053          	movff	plusw1,btemp+11
  6863  001CE0  0E0C               	movlw	12
  6864  001CE2                     u17765:
  6865  001CE2  D834               	call	PL108	;call to abstracted procedure
  6866  001CE4  2EE8               	decfsz	wreg,f,c
  6867  001CE6  D7FD               	goto	u17765
  6868  001CE8  C050  F060         	movff	btemp+8,___lldiv@dividend
  6869  001CEC  C051  F061         	movff	btemp+9,___lldiv@dividend+1
  6870  001CF0  C052  F062         	movff	btemp+10,___lldiv@dividend+2
  6871  001CF4  C053  F063         	movff	btemp+11,___lldiv@dividend+3
  6872  001CF8  0E7D               	movlw	125
  6873  001CFA  0100               	movlb	0	; () banked
  6874  001CFC  EC77  F011         	call	PL32	;call to abstracted procedure
  6875  001D00  EC1B  F025         	call	___lldiv	;wreg free
  6876  001D04  EC04  F01E         	call	PL50	;call to abstracted procedure
  6877  001D08                     L1:
  6878                           
  6879                           ;stkvar	_DutyCycleCallback$2139 @ sp[(-10)+0]
  6880  001D08  0EF6               	movlw	-10
  6881  001D0A  C050  FFE3         	movff	btemp+8,plusw1
  6882  001D0E  0EF7               	movlw	-9
  6883  001D10  C051  FFE3         	movff	btemp+9,plusw1
  6884  001D14  0EF8               	movlw	-8
  6885  001D16  C052  FFE3         	movff	btemp+10,plusw1
  6886  001D1A  0EF9               	movlw	-7
  6887  001D1C  C053  FFE3         	movff	btemp+11,plusw1
  6888                           
  6889                           ; BSR set to: 0
  6890                           ;stkvar	_DutyCycleCallback$2139 @ sp[(-10)+0]
  6891  001D20  50E1               	movf	fsr1l,w,c
  6892  001D22  0FF6               	addlw	-10
  6893  001D24  6ED9               	movwf	fsr2l,c
  6894  001D26  50E2               	movf	fsr1h,w,c
  6895  001D28  EC0D  F01E         	call	PL66	;call to abstracted procedure
  6896  001D2C  51E9               	movf	(_loRa+233)& (0+255),w,b
  6897  001D2E  EC11  F02C         	call	_SwTimerSetTimeout
  6898                           
  6899                           ; BSR set to: 0
  6900                           ;lorawan_eu.c: 1251: SwTimerStart (loRa.dutyCycleTimerId);
  6901  001D32  0102               	movlb	2	; () banked
  6902  001D34  51E9               	movf	(_loRa+233)& (0+255),w,b
  6903  001D36  ECC4  F025         	call	_SwTimerStart
  6904  001D3A                     l1461:
  6905                           
  6906                           ; _DutyCycleCallback: autosize = 10, savesize = 0, parsavesize = 0, tempsize = 0 parsize
      +                           = 1, argsize = 1, vargsize = 0
  6907  001D3A  0EF5               	movlw	245
  6908  001D3C  EF1A  F01E         	goto	PL256	;call to abstracted procedure
  6909  001D40                     __end_of_DutyCycleCallback:
  6910                           	opt stack 0
  6911  001D40                     PL102:
  6912                           	opt stack 17
  6913  001D40  6ED9               	movwf	fsr2l,c
  6914  001D42  50E2               	movf	fsr1h,w,c
  6915  001D44  6EDA               	movwf	fsr2h,c
  6916  001D46  0EFF               	movlw	255
  6917  001D48  22DA               	addwfc	fsr2h,f,c
  6918  001D4A  0CFF               	retlw	255
  6919  001D4C                     __end_ofPL102:
  6920                           	opt stack 0
  6921  001D4C                     PL108:
  6922                           	opt stack 17
  6923  001D4C  90D8               	bcf	status,0,c
  6924  001D4E  3650               	rlcf	btemp+8,f,c
  6925  001D50  3651               	rlcf	btemp+9,f,c
  6926  001D52  3652               	rlcf	btemp+10,f,c
  6927  001D54  3653               	rlcf	btemp+11,f,c
  6928  001D56  0012               	return	
  6929  001D58                     __end_ofPL108:
  6930                           	opt stack 0
  6931  001D58                     PL120:
  6932                           	opt stack 17
  6933  001D58  0EFA               	movlw	-6
  6934  001D5A  C050  FFE3         	movff	btemp+8,plusw1
  6935  001D5E  0EFB               	movlw	-5
  6936  001D60  C051  FFE3         	movff	btemp+9,plusw1
  6937  001D64  0EFC               	movlw	-4
  6938  001D66  C052  FFE3         	movff	btemp+10,plusw1
  6939  001D6A  0EFD               	movlw	-3
  6940  001D6C  C053  FFE3         	movff	btemp+11,plusw1
  6941  001D70  0EFF               	movlw	-1
  6942  001D72  6AE3               	clrf	plusw1,c
  6943  001D74  0012               	return	
  6944  001D76                     __end_ofPL120:
  6945                           	opt stack 0
  6946  001D76                     PL130:
  6947                           	opt stack 12
  6948  001D76  50DE               	movf	postinc2,w,c
  6949  001D78  10DE               	iorwf	postinc2,w,c
  6950  001D7A  10DE               	iorwf	postinc2,w,c
  6951  001D7C  10DE               	iorwf	postinc2,w,c
  6952  001D7E  0012               	return	
  6953  001D80                     __end_ofPL130:
  6954                           	opt stack 0
  6955  001D80                     PL208:
  6956                           	opt stack 17
  6957  001D80  CFDE F050          	movff	postinc2,btemp+8
  6958  001D84  CFDE F051          	movff	postinc2,btemp+9
  6959  001D88  CFDE F052          	movff	postinc2,btemp+10
  6960  001D8C  CFDE F053          	movff	postinc2,btemp+11
  6961  001D90  0012               	return	
  6962  001D92                     __end_ofPL208:
  6963                           	opt stack 0
  6964  001D92                     PL312:
  6965                           	opt stack 17
  6966  001D92  CFE3 F049          	movff	plusw1,btemp+1
  6967  001D96  50DE               	movf	postinc2,w,c
  6968  001D98  5849               	subwfb	btemp+1,w,c
  6969  001D9A  0012               	return	
  6970  001D9C                     __end_ofPL312:
  6971                           	opt stack 0
  6972                           tosu	equ	0xFFF
  6973                           tosh	equ	0xFFE
  6974                           tosl	equ	0xFFD
  6975                           pclath	equ	0xFFA
  6976                           tblptru	equ	0xFF8
  6977                           tblptrh	equ	0xFF7
  6978                           tblptrl	equ	0xFF6
  6979                           tablat	equ	0xFF5
  6980                           prodh	equ	0xFF4
  6981                           prodl	equ	0xFF3
  6982                           intcon	equ	0xFF2
  6983                           indf0	equ	0xFEF
  6984                           postinc0	equ	0xFEE
  6985                           plusw0	equ	0xFEB
  6986                           fsr0h	equ	0xFEA
  6987                           fsr0l	equ	0xFE9
  6988                           wreg	equ	0xFE8
  6989                           postinc1	equ	0xFE6
  6990                           postdec1	equ	0xFE5
  6991                           plusw1	equ	0xFE3
  6992                           fsr1h	equ	0xFE2
  6993                           fsr1l	equ	0xFE1
  6994                           indf2	equ	0xFDF
  6995                           postinc2	equ	0xFDE
  6996                           postdec2	equ	0xFDD
  6997                           plusw2	equ	0xFDB
  6998                           fsr2h	equ	0xFDA
  6999                           fsr2l	equ	0xFD9
  7000                           status	equ	0xFD8
  7001                           
  7002 ;; *************** function _UpdateJoinSuccessState *****************
  7003 ;; Defined at:
  7004 ;;		line 1041 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  7005 ;; Parameters:    Size  Location     Type
  7006 ;;  param           1  [STACK] unsigned char 
  7007 ;; Auto vars:     Size  Location     Type
  7008 ;;		None
  7009 ;; Return value:  Size  Location     Type
  7010 ;;                  1  [STACK] void 
  7011 ;; Registers used:
  7012 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+8, btemp+9, btemp+10, btemp+11, tosl, prodl, pro
      +dh, cstack
  7013 ;; Tracked objects:
  7014 ;;		On entry : 3F/0
  7015 ;;		On exit  : 3F/1
  7016 ;;		Unchanged: 0/0
  7017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7018 ;;      Params:         0       0       0       0       0       0       0       0       0
  7019 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7020 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7021 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7022 ;;Total ram usage:        0 bytes
  7023 ;; Hardware stack levels used:    1
  7024 ;; Hardware stack levels required when called:   11
  7025 ;; This function calls:
  7026 ;;		_RxJoinResponse
  7027 ;;		_SwTimerSetTimeout
  7028 ;;		_SwTimerStart
  7029 ;;		___lldiv
  7030 ;; This function is called by:
  7031 ;;		_LORAWAN_RxDone
  7032 ;;		_SetCallbackSoftwareTimers
  7033 ;;		_SwTimersExecute
  7034 ;; This function uses a reentrant model
  7035 ;;
  7036                           
  7037                           	psect	text34
  7038  003B76                     __ptext34:
  7039                           	opt stack 0
  7040  003B76                     _UpdateJoinSuccessState:
  7041                           	opt stack 0
  7042                           
  7043                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  7044  003B76  52E6               	movf	postinc1,f,c
  7045  003B78  52E6               	movf	postinc1,f,c
  7046  003B7A  52E6               	movf	postinc1,f,c
  7047  003B7C  52E6               	movf	postinc1,f,c
  7048                           
  7049                           ;lorawan.c: 1043: loRa.lorawanMacStatus.joining = 0;
  7050                           
  7051                           ;incstack = 0
  7052  003B7E  0102               	movlb	2	; () banked
  7053  003B80  9500               	bcf	_loRa& (0+255),2,b
  7054                           
  7055                           ;lorawan.c: 1044: loRa.macStatus.networkJoined = 1;
  7056  003B82  8902               	bsf	(_loRa+2)& (0+255),4,b
  7057                           
  7058                           ; BSR set to: 2
  7059                           ;lorawan.c: 1045: loRa.macStatus.macState = IDLE;
  7060  003B84  0EF0               	movlw	-16
  7061  003B86  1702               	andwf	(_loRa+2)& (0+255),f,b
  7062                           
  7063                           ; BSR set to: 2
  7064                           ;lorawan.c: 1047: loRa.adrAckCnt = 0;
  7065  003B88  6BD0               	clrf	(_loRa+208)& (0+255),b
  7066  003B8A  6BD1               	clrf	(_loRa+209)& (0+255),b
  7067                           
  7068                           ; BSR set to: 2
  7069                           ;lorawan.c: 1048: loRa.counterAdrAckDelay = 0;
  7070  003B8C  6BEE               	clrf	(_loRa+238)& (0+255),b
  7071                           
  7072                           ; BSR set to: 2
  7073                           ;lorawan.c: 1051: if (loRa.macStatus.linkCheck == 1)
  7074  003B8E  A503               	btfss	(_loRa+3)& (0+255),2,b
  7075  003B90  D027               	goto	l13886
  7076                           
  7077                           ; BSR set to: 2
  7078                           ;lorawan.c: 1052: {
  7079                           ;lorawan.c: 1053: SwTimerSetTimeout(loRa.linkCheckTimerId, ((loRa.periodForLinkCheck) < 
      +                          0x000FFFFFUL ? ( (((uint32_t)(loRa.periodForLinkCheck)) << (12)) / 125UL ) : ( (((uint32
      +                          _t)(loRa.periodForLinkCheck)) / 125UL) << (12) ) ));
  7080  003B92  51CF               	movf	(_loRa+207)& (0+255),w,b
  7081  003B94  E103               	bnz	u15540
  7082  003B96  EC0B  F018         	call	PL244	;call to abstracted procedure
  7083  003B9A  E30D               	bnc	l13880
  7084  003B9C                     u15540:
  7085                           
  7086                           ; BSR set to: 2
  7087  003B9C  EC01  F018         	call	PL58	;call to abstracted procedure
  7088  003BA0  EC77  F011         	call	PL32	;call to abstracted procedure
  7089  003BA4  EC1B  F025         	call	___lldiv	;wreg free
  7090  003BA8  D82F               	call	PL50	;call to abstracted procedure
  7091  003BAA  0E0C               	movlw	12
  7092  003BAC                     u15555:
  7093  003BAC  ECA6  F00E         	call	PL108	;call to abstracted procedure
  7094  003BB0  2EE8               	decfsz	wreg,f,c
  7095  003BB2  D7FC               	goto	u15555
  7096  003BB4  D007               	goto	L2
  7097  003BB6                     l13880:
  7098                           
  7099                           ; BSR set to: 2
  7100  003BB6  ECE7  F017         	call	PL46	;call to abstracted procedure
  7101  003BBA  EC77  F011         	call	PL32	;call to abstracted procedure
  7102  003BBE  EC1B  F025         	call	___lldiv	;wreg free
  7103  003BC2  D822               	call	PL50	;call to abstracted procedure
  7104  003BC4                     L2:
  7105                           
  7106                           ;stkvar	_UpdateJoinSuccessState$1069 @ sp[(-4)+0]
  7107  003BC4  EC23  F020         	call	PL144	;call to abstracted procedure
  7108                           
  7109                           ; BSR set to: 0
  7110                           ;stkvar	_UpdateJoinSuccessState$1069 @ sp[(-4)+0]
  7111  003BC8  50E1               	movf	fsr1l,w,c
  7112  003BCA  0FFC               	addlw	-4
  7113  003BCC  6ED9               	movwf	fsr2l,c
  7114  003BCE  50E2               	movf	fsr1h,w,c
  7115  003BD0  D824               	call	PL66	;call to abstracted procedure
  7116  003BD2  51E7               	movf	(_loRa+231)& (0+255),w,b
  7117  003BD4  EC11  F02C         	call	_SwTimerSetTimeout
  7118                           
  7119                           ; BSR set to: 0
  7120                           ;lorawan.c: 1054: SwTimerStart(loRa.linkCheckTimerId);
  7121  003BD8  0102               	movlb	2	; () banked
  7122  003BDA  51E7               	movf	(_loRa+231)& (0+255),w,b
  7123  003BDC  ECC4  F025         	call	_SwTimerStart
  7124  003BE0                     l13886:
  7125                           
  7126                           ;lorawan.c: 1055: }
  7127                           ;lorawan.c: 1057: if (rxPayload.RxJoinResponse != (0))
  7128  003BE0  0101               	movlb	1	; () banked
  7129  003BE2  517B               	movf	(_rxPayload+2)& (0+255),w,b
  7130  003BE4  117C               	iorwf	(_rxPayload+3)& (0+255),w,b
  7131  003BE6  E00E               	bz	l605
  7132                           
  7133                           ; BSR set to: 1
  7134                           ;lorawan.c: 1058: {
  7135                           ;lorawan.c: 1059: rxPayload.RxJoinResponse(1);
  7136  003BE8  EE21  F07B         	lfsr	2,_rxPayload+2
  7137  003BEC  D801               	call	u15588
  7138  003BEE  D00A               	goto	l605
  7139  003BF0                     u15588:
  7140  003BF0  0005               	push	
  7141  003BF2  6EFA               	movwf	pclath,c
  7142  003BF4  50DE               	movf	postinc2,w,c
  7143  003BF6  6EFD               	movwf	tosl,c
  7144  003BF8  50DE               	movf	postinc2,w,c
  7145  003BFA  6EFE               	movwf	tosh,c
  7146  003BFC  50F8               	movf	tblptru,w,c
  7147  003BFE  6EFF               	movwf	tosu,c
  7148  003C00  50FA               	movf	pclath,w,c
  7149  003C02  0C01               	retlw	1	;indir
  7150  003C04                     l605:
  7151                           
  7152                           ; BSR set to: 1
  7153                           ; _UpdateJoinSuccessState: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 1, argsize = 1, vargsize = 0
  7154  003C04  0EFB               	movlw	251
  7155  003C06  D016               	goto	PL256	;call to abstracted procedure
  7156  003C08                     __end_of_UpdateJoinSuccessState:
  7157                           	opt stack 0
  7158  003C08                     PL50:
  7159                           	opt stack 17
  7160  003C08  C060  F050         	movff	?___lldiv,btemp+8
  7161  003C0C  C061  F051         	movff	?___lldiv+1,btemp+9
  7162  003C10  C062  F052         	movff	?___lldiv+2,btemp+10
  7163  003C14  C063  F053         	movff	?___lldiv+3,btemp+11
  7164  003C18  0012               	return	
  7165  003C1A                     __end_ofPL50:
  7166                           	opt stack 0
  7167  003C1A                     PL66:
  7168                           	opt stack 17
  7169  003C1A  6EDA               	movwf	fsr2h,c
  7170  003C1C  0EFF               	movlw	255
  7171  003C1E  22DA               	addwfc	fsr2h,f,c
  7172  003C20  CFDE F06D          	movff	postinc2,SwTimerSetTimeout@timeout
  7173  003C24  CFDE F06E          	movff	postinc2,SwTimerSetTimeout@timeout+1
  7174  003C28  CFDE F06F          	movff	postinc2,SwTimerSetTimeout@timeout+2
  7175  003C2C  CFDE F070          	movff	postinc2,SwTimerSetTimeout@timeout+3
  7176  003C30  0102               	movlb	2	; () banked
  7177  003C32  0CFF               	retlw	255
  7178  003C34                     __end_ofPL66:
  7179                           	opt stack 0
  7180  003C34                     PL256:
  7181                           	opt stack 17
  7182  003C34  26E1               	addwf	fsr1l,f,c
  7183  003C36  0EFF               	movlw	255
  7184  003C38  22E2               	addwfc	fsr1h,f,c
  7185  003C3A  0CFF               	retlw	255	;funcret
  7186  003C3C                     __end_ofPL256:
  7187                           	opt stack 0
  7188                           tosu	equ	0xFFF
  7189                           tosh	equ	0xFFE
  7190                           tosl	equ	0xFFD
  7191                           pclath	equ	0xFFA
  7192                           tblptru	equ	0xFF8
  7193                           tblptrh	equ	0xFF7
  7194                           tblptrl	equ	0xFF6
  7195                           tablat	equ	0xFF5
  7196                           prodh	equ	0xFF4
  7197                           prodl	equ	0xFF3
  7198                           intcon	equ	0xFF2
  7199                           indf0	equ	0xFEF
  7200                           postinc0	equ	0xFEE
  7201                           plusw0	equ	0xFEB
  7202                           fsr0h	equ	0xFEA
  7203                           fsr0l	equ	0xFE9
  7204                           wreg	equ	0xFE8
  7205                           postinc1	equ	0xFE6
  7206                           postdec1	equ	0xFE5
  7207                           plusw1	equ	0xFE3
  7208                           fsr1h	equ	0xFE2
  7209                           fsr1l	equ	0xFE1
  7210                           indf2	equ	0xFDF
  7211                           postinc2	equ	0xFDE
  7212                           postdec2	equ	0xFDD
  7213                           plusw2	equ	0xFDB
  7214                           fsr2h	equ	0xFDA
  7215                           fsr2l	equ	0xFD9
  7216                           status	equ	0xFD8
  7217                           
  7218 ;; *************** function _AutomaticReplyCallback *****************
  7219 ;; Defined at:
  7220 ;;		line 1017 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  7221 ;; Parameters:    Size  Location     Type
  7222 ;;  param           1  [STACK] unsigned char 
  7223 ;; Auto vars:     Size  Location     Type
  7224 ;;		None
  7225 ;; Return value:  Size  Location     Type
  7226 ;;                  1  [STACK] void 
  7227 ;; Registers used:
  7228 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7229 ;; Tracked objects:
  7230 ;;		On entry : 3F/0
  7231 ;;		On exit  : 3F/2
  7232 ;;		Unchanged: 0/0
  7233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7234 ;;      Params:         0       0       0       0       0       0       0       0       0
  7235 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7236 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7237 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7238 ;;Total ram usage:        0 bytes
  7239 ;; Hardware stack levels used:    1
  7240 ;; Hardware stack levels required when called:   14
  7241 ;; This function calls:
  7242 ;;		_LORAWAN_Send
  7243 ;; This function is called by:
  7244 ;;		_SetCallbackSoftwareTimers
  7245 ;;		_SwTimersExecute
  7246 ;; This function uses a reentrant model
  7247 ;;
  7248                           
  7249                           	psect	text35
  7250  006006                     __ptext35:
  7251                           	opt stack 0
  7252  006006                     _AutomaticReplyCallback:
  7253                           	opt stack 14
  7254                           
  7255                           ;lorawan.c: 1019: loRa.macStatus.macState = IDLE;
  7256                           
  7257                           ; BSR set to: 1
  7258                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  7259                           ;incstack = 0
  7260  006006  0EF0               	movlw	-16
  7261  006008  0102               	movlb	2	; () banked
  7262  00600A  1702               	andwf	(_loRa+2)& (0+255),f,b
  7263                           
  7264                           ; BSR set to: 2
  7265                           ;lorawan.c: 1020: LORAWAN_Send (0, 0, 0, 0);
  7266  00600C  ECFC  F003         	call	PL186	;call to abstracted procedure
  7267  006010  EC7B  F01E         	call	_LORAWAN_Send
  7268                           
  7269                           ;lorawan.c: 1021: loRa.lorawanMacStatus.fPending = 0;
  7270  006014  0102               	movlb	2	; () banked
  7271  006016  9700               	bcf	_loRa& (0+255),3,b
  7272                           
  7273                           ; BSR set to: 2
  7274                           ; _AutomaticReplyCallback: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 1, argsize = 1, vargsize = 0
  7275  006018  52E5               	movf	postdec1,f,c
  7276  00601A  0012               	return		;funcret
  7277  00601C                     __end_of_AutomaticReplyCallback:
  7278                           	opt stack 0
  7279                           tosu	equ	0xFFF
  7280                           tosh	equ	0xFFE
  7281                           tosl	equ	0xFFD
  7282                           pclath	equ	0xFFA
  7283                           tblptru	equ	0xFF8
  7284                           tblptrh	equ	0xFF7
  7285                           tblptrl	equ	0xFF6
  7286                           tablat	equ	0xFF5
  7287                           prodh	equ	0xFF4
  7288                           prodl	equ	0xFF3
  7289                           intcon	equ	0xFF2
  7290                           indf0	equ	0xFEF
  7291                           postinc0	equ	0xFEE
  7292                           plusw0	equ	0xFEB
  7293                           fsr0h	equ	0xFEA
  7294                           fsr0l	equ	0xFE9
  7295                           wreg	equ	0xFE8
  7296                           postinc1	equ	0xFE6
  7297                           postdec1	equ	0xFE5
  7298                           plusw1	equ	0xFE3
  7299                           fsr1h	equ	0xFE2
  7300                           fsr1l	equ	0xFE1
  7301                           indf2	equ	0xFDF
  7302                           postinc2	equ	0xFDE
  7303                           postdec2	equ	0xFDD
  7304                           plusw2	equ	0xFDB
  7305                           fsr2h	equ	0xFDA
  7306                           fsr2l	equ	0xFD9
  7307                           status	equ	0xFD8
  7308                           
  7309 ;; *************** function _AckRetransmissionCallback *****************
  7310 ;; Defined at:
  7311 ;;		line 934 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  7312 ;; Parameters:    Size  Location     Type
  7313 ;;  param           1  [STACK] unsigned char 
  7314 ;; Auto vars:     Size  Location     Type
  7315 ;;  maximumPacke    1  [STACK] unsigned char 
  7316 ;; Return value:  Size  Location     Type
  7317 ;;                  1  [STACK] void 
  7318 ;; Registers used:
  7319 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+10, btemp+11, to
      +sl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7320 ;; Tracked objects:
  7321 ;;		On entry : 3F/0
  7322 ;;		On exit  : 3C/0
  7323 ;;		Unchanged: 0/0
  7324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7325 ;;      Params:         0       0       0       0       0       0       0       0       0
  7326 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7327 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7328 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7329 ;;Total ram usage:        0 bytes
  7330 ;; Hardware stack levels used:    1
  7331 ;; Hardware stack levels required when called:   13
  7332 ;; This function calls:
  7333 ;;		_FindSmallestDataRate
  7334 ;;		_LORAWAN_GetMaxPayloadSize
  7335 ;;		_RADIO_Transmit
  7336 ;;		_ResetParametersForConfirmedTransmission
  7337 ;;		_RxDataDone
  7338 ;;		_SelectChannelForTransmission
  7339 ;;		_UpdateRetransmissionAckTimeoutState
  7340 ;; This function is called by:
  7341 ;;		_SetCallbackSoftwareTimers
  7342 ;;		_SwTimersExecute
  7343 ;; This function uses a reentrant model
  7344 ;;
  7345                           
  7346                           	psect	text36
  7347  003312                     __ptext36:
  7348                           	opt stack 0
  7349  003312                     _AckRetransmissionCallback:
  7350                           	opt stack 0
  7351                           
  7352                           ; BSR set to: 2
  7353                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  7354  003312  52E6               	movf	postinc1,f,c
  7355                           
  7356                           ;lorawan.c: 936: uint8_t maximumPacketSize;
  7357                           ;lorawan.c: 938: if (loRa.macStatus.macPause == 0)
  7358                           
  7359                           ;incstack = 0
  7360  003314  0102               	movlb	2	; () banked
  7361  003316  B103               	btfsc	(_loRa+3)& (0+255),0,b
  7362  003318  D069               	goto	l14870
  7363                           
  7364                           ; BSR set to: 2
  7365                           ;lorawan.c: 939: {
  7366                           ;lorawan.c: 940: if (loRa.counterRepetitionsConfirmedUplink <= loRa.maxRepetitionsConfir
      +                          medUplink)
  7367  00331A  51D9               	movf	(_loRa+217)& (0+255),w,b
  7368  00331C  5DD7               	subwf	(_loRa+215)& (0+255),w,b
  7369  00331E  E34B               	bnc	l14860
  7370                           
  7371                           ; BSR set to: 2
  7372                           ;lorawan.c: 941: {
  7373                           ;lorawan.c: 942: maximumPacketSize = LORAWAN_GetMaxPayloadSize () + 13;
  7374  003320  ECF5  F02B         	call	_LORAWAN_GetMaxPayloadSize	;wreg free
  7375  003324  6E53               	movwf	btemp+11,c
  7376  003326  0E0D               	movlw	13
  7377  003328  2653               	addwf	btemp+11,f,c
  7378                           
  7379                           ;stkvar	AckRetransmissionCallback@maximumPacketSize @ sp[(-1)+0]
  7380  00332A  0EFF               	movlw	-1
  7381  00332C  C053  FFE3         	movff	btemp+11,plusw1
  7382                           
  7383                           ; BSR set to: 0
  7384                           ;lorawan.c: 945: if (loRa.lastPacketLength <= maximumPacketSize)
  7385                           ;stkvar	AckRetransmissionCallback@maximumPacketSize @ sp[(-1)+0]
  7386  003330  50E3               	movf	plusw1,w,c
  7387  003332  6E49               	movwf	btemp+1,c
  7388  003334  6A4A               	clrf	btemp+2,c
  7389  003336  0102               	movlb	2	; () banked
  7390  003338  51D4               	movf	(_loRa+212)& (0+255),w,b
  7391  00333A  5C49               	subwf	btemp+1,w,c
  7392  00333C  51D5               	movf	(_loRa+213)& (0+255),w,b
  7393  00333E  584A               	subwfb	btemp+2,w,c
  7394  003340  E32A               	bnc	l14854
  7395                           
  7396                           ; BSR set to: 2
  7397                           ;lorawan.c: 946: {
  7398                           ;lorawan.c: 947: if (SelectChannelForTransmission (1) == OK)
  7399  003342  0E01               	movlw	1
  7400  003344  ECC4  F026         	call	_SelectChannelForTransmission
  7401  003348  0900               	iorlw	0
  7402  00334A  E122               	bnz	l14850
  7403                           
  7404                           ; BSR set to: 0
  7405                           ;lorawan.c: 948: {
  7406                           ;lorawan.c: 950: if (RADIO_Transmit (&macBuffer[16], loRa.lastPacketLength) == OK)
  7407  00334C  0EFF               	movlw	low (_macBuffer+16)
  7408  00334E  EC7D  F025         	call	PL170	;call to abstracted procedure
  7409  003352  ECCE  F00E         	call	_RADIO_Transmit	;wreg free
  7410  003356  EC88  F025         	call	PL284	;call to abstracted procedure
  7411  00335A  E11A               	bnz	l14850
  7412                           
  7413                           ; BSR set to: 0
  7414                           ;lorawan.c: 951: {
  7415                           ;lorawan.c: 952: loRa.macStatus.macState = TRANSMISSION_OCCURRING;
  7416  00335C  0102               	movlb	2	; () banked
  7417  00335E  EC83  F025         	call	PL270	;call to abstracted procedure
  7418                           
  7419                           ; BSR set to: 2
  7420                           ;lorawan.c: 953: loRa.counterRepetitionsConfirmedUplink ++ ;
  7421  003362  2BD9               	incf	(_loRa+217)& (0+255),f,b
  7422                           
  7423                           ; BSR set to: 2
  7424                           ;lorawan.c: 956: if ( ( (loRa.counterRepetitionsConfirmedUplink % 2) == 0) && (loRa.curr
      +                          entDataRate != 0) && (loRa.counterRepetitionsConfirmedUplink != (loRa.maxRepetitionsConf
      +                          irmedUplink + 1) ) )
  7425  003364  B1D9               	btfsc	(_loRa+217)& (0+255),0,b
  7426  003366  D045               	goto	PL448
  7427                           
  7428                           ; BSR set to: 2
  7429  003368  51DF               	movf	(_loRa+223)& (0+255),w,b
  7430  00336A  E043               	bz	PL448
  7431                           
  7432                           ; BSR set to: 2
  7433  00336C  51D9               	movf	(_loRa+217)& (0+255),w,b
  7434  00336E  6E49               	movwf	btemp+1,c
  7435  003370  6A4A               	clrf	btemp+2,c
  7436  003372  51D7               	movf	(_loRa+215)& (0+255),w,b
  7437  003374  6E52               	movwf	btemp+10,c
  7438  003376  6A53               	clrf	btemp+11,c
  7439  003378  2A52               	incf	btemp+10,f,c
  7440  00337A  0E00               	movlw	0
  7441  00337C  2253               	addwfc	btemp+11,f,c
  7442  00337E  5049               	movf	btemp+1,w,c
  7443  003380  1852               	xorwf	btemp+10,w,c
  7444  003382  E103               	bnz	u17520
  7445  003384  504A               	movf	btemp+2,w,c
  7446  003386  1853               	xorwf	btemp+11,w,c
  7447  003388  E034               	bz	PL448
  7448  00338A                     u17520:
  7449                           
  7450                           ; BSR set to: 2
  7451                           ;lorawan.c: 957: {
  7452                           ;lorawan.c: 958: FindSmallestDataRate();
  7453  00338A  EC66  F023         	call	_FindSmallestDataRate	;wreg free
  7454  00338E  D031               	goto	PL448
  7455  003390                     l14850:
  7456                           
  7457                           ; BSR set to: 0
  7458                           ;lorawan.c: 961: else
  7459                           ;lorawan.c: 962: {
  7460                           ;lorawan.c: 964: UpdateRetransmissionAckTimeoutState ();
  7461  003390  ECBF  F028         	call	_UpdateRetransmissionAckTimeoutState	;wreg free
  7462  003394  D02E               	goto	PL448
  7463  003396                     l14854:
  7464                           
  7465                           ; BSR set to: 2
  7466                           ;lorawan.c: 973: else
  7467                           ;lorawan.c: 974: {
  7468                           ;lorawan.c: 975: ResetParametersForConfirmedTransmission ();
  7469  003396  EC71  F030         	call	_ResetParametersForConfirmedTransmission	;wreg free
  7470                           
  7471                           ; BSR set to: 2
  7472                           ;lorawan.c: 976: if (rxPayload.RxAppData != (0))
  7473  00339A  0101               	movlb	1	; () banked
  7474  00339C  5179               	movf	_rxPayload& (0+255),w,b
  7475  00339E  117A               	iorwf	(_rxPayload+1)& (0+255),w,b
  7476  0033A0  E028               	bz	PL448
  7477                           
  7478                           ; BSR set to: 1
  7479                           ;lorawan.c: 977: {
  7480                           ;lorawan.c: 978: rxPayload.RxAppData((0), 0, INVALID_BUFFER_LEN);
  7481  0033A2  EC96  F00C         	call	PL48	;call to abstracted procedure
  7482  0033A6  0E04               	movlw	4
  7483  0033A8  6F63               	movwf	RxDataDone@status& (0+255),b
  7484  0033AA  D801               	call	u17548
  7485  0033AC  D022               	goto	PL448
  7486  0033AE                     u17548:
  7487  0033AE  0005               	push	
  7488  0033B0  0101               	movlb	1	; () banked
  7489  0033B2  6EFA               	movwf	pclath,c
  7490  0033B4  D013               	goto	L3
  7491  0033B6                     l14860:
  7492                           
  7493                           ; BSR set to: 2
  7494                           ;lorawan.c: 982: else if ( (loRa.counterRepetitionsConfirmedUplink > loRa.maxRepetitions
      +                          ConfirmedUplink) && (loRa.macStatus.macPause == 0) )
  7495  0033B6  51D9               	movf	(_loRa+217)& (0+255),w,b
  7496  0033B8  5DD7               	subwf	(_loRa+215)& (0+255),w,b
  7497  0033BA  E21B               	bc	PL448
  7498                           
  7499                           ; BSR set to: 2
  7500  0033BC  B103               	btfsc	(_loRa+3)& (0+255),0,b
  7501  0033BE  D019               	goto	PL448
  7502                           
  7503                           ; BSR set to: 2
  7504                           ;lorawan.c: 983: {
  7505                           ;lorawan.c: 984: ResetParametersForConfirmedTransmission ();
  7506  0033C0  EC71  F030         	call	_ResetParametersForConfirmedTransmission	;wreg free
  7507                           
  7508                           ; BSR set to: 2
  7509                           ;lorawan.c: 985: if (rxPayload.RxAppData != (0))
  7510  0033C4  0101               	movlb	1	; () banked
  7511  0033C6  5179               	movf	_rxPayload& (0+255),w,b
  7512  0033C8  117A               	iorwf	(_rxPayload+1)& (0+255),w,b
  7513  0033CA  E013               	bz	PL448
  7514                           
  7515                           ; BSR set to: 1
  7516                           ;lorawan.c: 986: {
  7517                           ;lorawan.c: 987: rxPayload.RxAppData((0), 0, MAC_NOT_OK);
  7518  0033CC  EC96  F00C         	call	PL48	;call to abstracted procedure
  7519  0033D0  6F63               	movwf	RxDataDone@status& (0+255),b
  7520  0033D2  D801               	call	u17588
  7521  0033D4  D00E               	goto	PL448
  7522  0033D6                     u17588:
  7523  0033D6  0005               	push	
  7524  0033D8  0101               	movlb	1	; () banked
  7525  0033DA  6EFA               	movwf	pclath,c
  7526  0033DC                     L3:
  7527  0033DC  5179               	movf	_rxPayload& (0+255),w,b
  7528  0033DE  6EFD               	movwf	tosl,c
  7529  0033E0  517A               	movf	(_rxPayload+1)& (0+255),w,b
  7530  0033E2  6EFE               	movwf	tosh,c
  7531  0033E4  50F8               	movf	tblptru,w,c
  7532  0033E6  6EFF               	movwf	tosu,c
  7533  0033E8  50FA               	movf	pclath,w,c
  7534  0033EA  0012               	return		;indir
  7535  0033EC                     l14870:
  7536                           
  7537                           ; BSR set to: 2
  7538                           ;lorawan.c: 991: else
  7539                           ;lorawan.c: 992: {
  7540                           ;lorawan.c: 993: ResetParametersForConfirmedTransmission ();
  7541  0033EC  EC71  F030         	call	_ResetParametersForConfirmedTransmission	;wreg free
  7542  0033F0                     l578:
  7543                           
  7544                           ; _AckRetransmissionCallback: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 
      +                          parsize = 1, argsize = 1, vargsize = 0
  7545  0033F0  D000               	goto	PL448	;call to abstracted procedure
  7546  0033F2                     __end_of_AckRetransmissionCallback:
  7547                           	opt stack 0
  7548  0033F2                     PL448:
  7549                           	opt stack 12
  7550  0033F2  52E5               	movf	postdec1,f,c
  7551  0033F4  52E5               	movf	postdec1,f,c
  7552  0033F6  0012               	return		;funcret
  7553  0033F8                     __end_ofPL448:
  7554                           	opt stack 0
  7555                           tosu	equ	0xFFF
  7556                           tosh	equ	0xFFE
  7557                           tosl	equ	0xFFD
  7558                           pclath	equ	0xFFA
  7559                           tblptru	equ	0xFF8
  7560                           tblptrh	equ	0xFF7
  7561                           tblptrl	equ	0xFF6
  7562                           tablat	equ	0xFF5
  7563                           prodh	equ	0xFF4
  7564                           prodl	equ	0xFF3
  7565                           intcon	equ	0xFF2
  7566                           indf0	equ	0xFEF
  7567                           postinc0	equ	0xFEE
  7568                           plusw0	equ	0xFEB
  7569                           fsr0h	equ	0xFEA
  7570                           fsr0l	equ	0xFE9
  7571                           wreg	equ	0xFE8
  7572                           postinc1	equ	0xFE6
  7573                           postdec1	equ	0xFE5
  7574                           plusw1	equ	0xFE3
  7575                           fsr1h	equ	0xFE2
  7576                           fsr1l	equ	0xFE1
  7577                           indf2	equ	0xFDF
  7578                           postinc2	equ	0xFDE
  7579                           postdec2	equ	0xFDD
  7580                           plusw2	equ	0xFDB
  7581                           fsr2h	equ	0xFDA
  7582                           fsr2l	equ	0xFD9
  7583                           status	equ	0xFD8
  7584                           
  7585 ;; *************** function _LORAWAN_LinkCheckCallback *****************
  7586 ;; Defined at:
  7587 ;;		line 881 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  7588 ;; Parameters:    Size  Location     Type
  7589 ;;  param           1  [STACK] unsigned char 
  7590 ;; Auto vars:     Size  Location     Type
  7591 ;;  iCtr            1  [STACK] unsigned char 
  7592 ;; Return value:  Size  Location     Type
  7593 ;;                  1  [STACK] void 
  7594 ;; Registers used:
  7595 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh, c
      +stack
  7596 ;; Tracked objects:
  7597 ;;		On entry : 3F/0
  7598 ;;		On exit  : 3D/0
  7599 ;;		Unchanged: 0/0
  7600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7601 ;;      Params:         0       0       0       0       0       0       0       0       0
  7602 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7603 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7604 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7605 ;;Total ram usage:        0 bytes
  7606 ;; Hardware stack levels used:    1
  7607 ;; Hardware stack levels required when called:   11
  7608 ;; This function calls:
  7609 ;;		_SwTimerSetTimeout
  7610 ;;		_SwTimerStart
  7611 ;;		___lldiv
  7612 ;; This function is called by:
  7613 ;;		_SetCallbackSoftwareTimers
  7614 ;;		_SwTimersExecute
  7615 ;; This function uses a reentrant model
  7616 ;;
  7617                           
  7618                           	psect	text37
  7619  002F14                     __ptext37:
  7620                           	opt stack 0
  7621  002F14                     _LORAWAN_LinkCheckCallback:
  7622                           	opt stack 0
  7623                           
  7624                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  7625  002F14  0E05               	movlw	5
  7626  002F16  26E1               	addwf	fsr1l,f,c
  7627  002F18  0E00               	movlw	0
  7628  002F1A  22E2               	addwfc	fsr1h,f,c
  7629                           
  7630                           ;lorawan.c: 885: if ((loRa.macStatus.macPause == 0) && (loRa.macStatus.linkCheck == 1))
  7631                           
  7632                           ;incstack = 0
  7633  002F1C  0102               	movlb	2	; () banked
  7634  002F1E  A103               	btfss	(_loRa+3)& (0+255),0,b
  7635                           
  7636                           ; BSR set to: 2
  7637  002F20  A503               	btfss	(_loRa+3)& (0+255),2,b
  7638  002F22  D01F               	goto	l14814
  7639                           
  7640                           ; BSR set to: 2
  7641                           ;lorawan.c: 886: {
  7642                           ;lorawan.c: 888: for(iCtr = 0; iCtr < loRa.crtMacCmdIndex; iCtr ++)
  7643                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  7644  002F24  0EFF               	movlw	-1
  7645  002F26  6AE3               	clrf	plusw1,c
  7646  002F28  D009               	goto	l14804
  7647  002F2A                     l14798:
  7648                           
  7649                           ; BSR set to: 2
  7650                           ;lorawan.c: 889: {
  7651                           ;lorawan.c: 890: if(loRa.macCommands[iCtr].receivedCid == LINK_CHECK_CID)
  7652                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  7653  002F2A  0EFF               	movlw	-1
  7654  002F2C  50E3               	movf	plusw1,w,c
  7655  002F2E  ECA3  F010         	call	PL16	;call to abstracted procedure
  7656  002F32  0E02               	movlw	2
  7657  002F34  18DE               	xorwf	postinc2,w,c
  7658  002F36  E008               	bz	l14806
  7659                           
  7660                           ; BSR set to: 2
  7661                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  7662  002F38  0EFF               	movlw	-1
  7663  002F3A  2AE3               	incf	plusw1,f,c
  7664  002F3C                     l14804:
  7665                           
  7666                           ; BSR set to: 2
  7667                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  7668  002F3C  0EFF               	movlw	-1
  7669  002F3E  CFE3 F049          	movff	plusw1,btemp+1
  7670  002F42  51A7               	movf	(_loRa+167)& (0+255),w,b
  7671  002F44  5C49               	subwf	btemp+1,w,c
  7672  002F46  E3F1               	bnc	l14798
  7673  002F48                     l14806:
  7674                           
  7675                           ; BSR set to: 2
  7676                           ;lorawan.c: 893: }
  7677                           ;lorawan.c: 894: }
  7678                           ;lorawan.c: 896: if(iCtr == loRa.crtMacCmdIndex)
  7679                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  7680  002F48  0EFF               	movlw	-1
  7681  002F4A  50E3               	movf	plusw1,w,c
  7682  002F4C  19A7               	xorwf	(_loRa+167)& (0+255),w,b
  7683  002F4E  E109               	bnz	l14814
  7684                           
  7685                           ; BSR set to: 2
  7686                           ;lorawan.c: 897: {
  7687                           ;lorawan.c: 898: loRa.macCommands[loRa.crtMacCmdIndex].receivedCid = LINK_CHECK_CID;
  7688  002F50  51A7               	movf	(_loRa+167)& (0+255),w,b
  7689  002F52  ECA3  F010         	call	PL16	;call to abstracted procedure
  7690  002F56  0E02               	movlw	2
  7691  002F58  6EDF               	movwf	indf2,c
  7692                           
  7693                           ; BSR set to: 2
  7694                           ;lorawan.c: 900: if(loRa.crtMacCmdIndex < 16)
  7695  002F5A  0E10               	movlw	16
  7696  002F5C  61A7               	cpfslt	(_loRa+167)& (0+255),b
  7697  002F5E  D001               	goto	l14814
  7698                           
  7699                           ; BSR set to: 2
  7700                           ;lorawan.c: 901: {
  7701                           ;lorawan.c: 902: loRa.crtMacCmdIndex ++;
  7702  002F60  2BA7               	incf	(_loRa+167)& (0+255),f,b
  7703  002F62                     l14814:
  7704                           
  7705                           ; BSR set to: 2
  7706                           ;lorawan.c: 903: }
  7707                           ;lorawan.c: 904: }
  7708                           ;lorawan.c: 905: }
  7709                           ;lorawan.c: 908: if (loRa.macStatus.linkCheck == 1)
  7710  002F62  A503               	btfss	(_loRa+3)& (0+255),2,b
  7711  002F64  D031               	goto	l556
  7712                           
  7713                           ; BSR set to: 2
  7714                           ;lorawan.c: 909: {
  7715                           ;lorawan.c: 910: SwTimerSetTimeout(loRa.linkCheckTimerId, ((loRa.periodForLinkCheck) < 0
      +                          x000FFFFFUL ? ( (((uint32_t)(loRa.periodForLinkCheck)) << (12)) / 125UL ) : ( (((uint32_
      +                          t)(loRa.periodForLinkCheck)) / 125UL) << (12) ) ));
  7716  002F66  51CF               	movf	(_loRa+207)& (0+255),w,b
  7717  002F68  E102               	bnz	u17420
  7718  002F6A  D855               	call	PL244	;call to abstracted procedure
  7719  002F6C  E30D               	bnc	l14820
  7720  002F6E                     u17420:
  7721                           
  7722                           ; BSR set to: 2
  7723  002F6E  D849               	call	PL58	;call to abstracted procedure
  7724  002F70  EC77  F011         	call	PL32	;call to abstracted procedure
  7725  002F74  EC1B  F025         	call	___lldiv	;wreg free
  7726  002F78  EC04  F01E         	call	PL50	;call to abstracted procedure
  7727  002F7C  0E0C               	movlw	12
  7728  002F7E                     u17435:
  7729  002F7E  ECA6  F00E         	call	PL108	;call to abstracted procedure
  7730  002F82  2EE8               	decfsz	wreg,f,c
  7731  002F84  D7FC               	goto	u17435
  7732  002F86  D007               	goto	L4
  7733  002F88                     l14820:
  7734                           
  7735                           ; BSR set to: 2
  7736  002F88  D822               	call	PL46	;call to abstracted procedure
  7737  002F8A  EC77  F011         	call	PL32	;call to abstracted procedure
  7738  002F8E  EC1B  F025         	call	___lldiv	;wreg free
  7739  002F92  EC04  F01E         	call	PL50	;call to abstracted procedure
  7740  002F96                     L4:
  7741                           
  7742                           ;stkvar	_LORAWAN_LinkCheckCallback$1052 @ sp[(-5)+0]
  7743  002F96  0EFB               	movlw	-5
  7744  002F98  C050  FFE3         	movff	btemp+8,plusw1
  7745  002F9C  0EFC               	movlw	-4
  7746  002F9E  C051  FFE3         	movff	btemp+9,plusw1
  7747  002FA2  0EFD               	movlw	-3
  7748  002FA4  C052  FFE3         	movff	btemp+10,plusw1
  7749  002FA8  0EFE               	movlw	-2
  7750  002FAA  C053  FFE3         	movff	btemp+11,plusw1
  7751                           
  7752                           ; BSR set to: 0
  7753                           ;stkvar	_LORAWAN_LinkCheckCallback$1052 @ sp[(-5)+0]
  7754  002FAE  50E1               	movf	fsr1l,w,c
  7755  002FB0  0FFB               	addlw	-5
  7756  002FB2  6ED9               	movwf	fsr2l,c
  7757  002FB4  50E2               	movf	fsr1h,w,c
  7758  002FB6  EC0D  F01E         	call	PL66	;call to abstracted procedure
  7759  002FBA  51E7               	movf	(_loRa+231)& (0+255),w,b
  7760  002FBC  EC11  F02C         	call	_SwTimerSetTimeout
  7761                           
  7762                           ; BSR set to: 0
  7763                           ;lorawan.c: 911: SwTimerStart(loRa.linkCheckTimerId);
  7764  002FC0  0102               	movlb	2	; () banked
  7765  002FC2  51E7               	movf	(_loRa+231)& (0+255),w,b
  7766  002FC4  ECC4  F025         	call	_SwTimerStart
  7767  002FC8                     l556:
  7768                           
  7769                           ; _LORAWAN_LinkCheckCallback: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 
      +                          parsize = 1, argsize = 1, vargsize = 0
  7770  002FC8  0EFA               	movlw	250
  7771  002FCA  EF1A  F01E         	goto	PL256	;call to abstracted procedure
  7772  002FCE                     __end_of_LORAWAN_LinkCheckCallback:
  7773                           	opt stack 0
  7774  002FCE                     PL46:
  7775                           	opt stack 17
  7776  002FCE  C2CC  F050         	movff	_loRa+204,btemp+8
  7777  002FD2  C2CD  F051         	movff	_loRa+205,btemp+9
  7778  002FD6  C2CE  F052         	movff	_loRa+206,btemp+10
  7779  002FDA  C2CF  F053         	movff	_loRa+207,btemp+11
  7780  002FDE  0E0C               	movlw	12
  7781  002FE0                     u15565:
  7782  002FE0  90D8               	bcf	status,0,c
  7783  002FE2  3650               	rlcf	btemp+8,f,c
  7784  002FE4  3651               	rlcf	btemp+9,f,c
  7785  002FE6  3652               	rlcf	btemp+10,f,c
  7786  002FE8  3653               	rlcf	btemp+11,f,c
  7787  002FEA  2EE8               	decfsz	wreg,f,c
  7788  002FEC  D7F9               	goto	u15565
  7789  002FEE  C050  F060         	movff	btemp+8,___lldiv@dividend
  7790  002FF2  C051  F061         	movff	btemp+9,___lldiv@dividend+1
  7791  002FF6  C052  F062         	movff	btemp+10,___lldiv@dividend+2
  7792  002FFA  C053  F063         	movff	btemp+11,___lldiv@dividend+3
  7793  002FFE  0100               	movlb	0	; () banked
  7794  003000  0C7D               	retlw	125
  7795  003002                     __end_ofPL46:
  7796                           	opt stack 0
  7797  003002                     PL58:
  7798                           	opt stack 17
  7799  003002  C2CC  F060         	movff	_loRa+204,___lldiv@dividend
  7800  003006  C2CD  F061         	movff	_loRa+205,___lldiv@dividend+1
  7801  00300A  C2CE  F062         	movff	_loRa+206,___lldiv@dividend+2
  7802  00300E  C2CF  F063         	movff	_loRa+207,___lldiv@dividend+3
  7803  003012  0100               	movlb	0	; () banked
  7804  003014  0C7D               	retlw	125
  7805  003016                     __end_ofPL58:
  7806                           	opt stack 0
  7807  003016                     PL244:
  7808                           	opt stack 17
  7809  003016  29CC               	incf	(_loRa+204)& (0+255),w,b
  7810  003018  0EFF               	movlw	255
  7811  00301A  59CD               	subwfb	(_loRa+205)& (0+255),w,b
  7812  00301C  0E0F               	movlw	15
  7813  00301E  59CE               	subwfb	(_loRa+206)& (0+255),w,b
  7814  003020  0012               	return	
  7815  003022                     __end_ofPL244:
  7816                           	opt stack 0
  7817                           tosu	equ	0xFFF
  7818                           tosh	equ	0xFFE
  7819                           tosl	equ	0xFFD
  7820                           pclath	equ	0xFFA
  7821                           tblptru	equ	0xFF8
  7822                           tblptrh	equ	0xFF7
  7823                           tblptrl	equ	0xFF6
  7824                           tablat	equ	0xFF5
  7825                           prodh	equ	0xFF4
  7826                           prodl	equ	0xFF3
  7827                           intcon	equ	0xFF2
  7828                           indf0	equ	0xFEF
  7829                           postinc0	equ	0xFEE
  7830                           plusw0	equ	0xFEB
  7831                           fsr0h	equ	0xFEA
  7832                           fsr0l	equ	0xFE9
  7833                           wreg	equ	0xFE8
  7834                           postinc1	equ	0xFE6
  7835                           postdec1	equ	0xFE5
  7836                           plusw1	equ	0xFE3
  7837                           fsr1h	equ	0xFE2
  7838                           fsr1l	equ	0xFE1
  7839                           indf2	equ	0xFDF
  7840                           postinc2	equ	0xFDE
  7841                           postdec2	equ	0xFDD
  7842                           plusw2	equ	0xFDB
  7843                           fsr2h	equ	0xFDA
  7844                           fsr2l	equ	0xFD9
  7845                           status	equ	0xFD8
  7846                           
  7847 ;; *************** function _LORAWAN_ReceiveWindow2Callback *****************
  7848 ;; Defined at:
  7849 ;;		line 827 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  7850 ;; Parameters:    Size  Location     Type
  7851 ;;  param           1  [STACK] unsigned char 
  7852 ;; Auto vars:     Size  Location     Type
  7853 ;;		None
  7854 ;; Return value:  Size  Location     Type
  7855 ;;                  1  [STACK] void 
  7856 ;; Registers used:
  7857 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tb
      +lptru, prodl, prodh, cstack
  7858 ;; Tracked objects:
  7859 ;;		On entry : 3D/0
  7860 ;;		On exit  : 3C/0
  7861 ;;		Unchanged: 0/0
  7862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7863 ;;      Params:         0       0       0       0       0       0       0       0       0
  7864 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7865 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7866 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7867 ;;Total ram usage:        0 bytes
  7868 ;; Hardware stack levels used:    1
  7869 ;; Hardware stack levels required when called:   14
  7870 ;; This function calls:
  7871 ;;		_ConfigureRadioRx
  7872 ;;		_LORAWAN_EnterContinuousReceive
  7873 ;;		_RADIO_GetStatus
  7874 ;;		_RADIO_ReceiveStart
  7875 ;;		_RADIO_ReceiveStop
  7876 ;;		_RADIO_ReleaseData
  7877 ;;		_ResetParametersForConfirmedTransmission
  7878 ;;		_ResetParametersForUnconfirmedTransmission
  7879 ;;		_RxDataDone
  7880 ;; This function is called by:
  7881 ;;		_LORAWAN_RxTimeout
  7882 ;;		_SetCallbackSoftwareTimers
  7883 ;;		_SwTimersExecute
  7884 ;; This function uses a reentrant model
  7885 ;;
  7886                           
  7887                           	psect	text38
  7888  004464                     __ptext38:
  7889                           	opt stack 0
  7890  004464                     _LORAWAN_ReceiveWindow2Callback:
  7891                           	opt stack 12
  7892                           
  7893                           ;lorawan.c: 830: if (loRa.macStatus.macPause == 0)
  7894                           
  7895                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  7896                           ;incstack = 0
  7897  004464  0102               	movlb	2	; () banked
  7898  004466  B103               	btfsc	(_loRa+3)& (0+255),0,b
  7899  004468  D043               	goto	l532
  7900                           
  7901                           ; BSR set to: 2
  7902                           ;lorawan.c: 831: {
  7903                           ;lorawan.c: 832: if((RADIO_GetStatus() & (1 << (1))) == 0)
  7904  00446A  EC0A  F031         	call	_RADIO_GetStatus	;wreg free
  7905  00446E  6E53               	movwf	btemp+11,c
  7906  004470  B253               	btfsc	btemp+11,1,c
  7907  004472  D03A               	goto	l13854
  7908                           
  7909                           ; BSR set to: 1
  7910                           ;lorawan.c: 833: {
  7911                           ;lorawan.c: 834: loRa.macStatus.macState = RX2_OPEN;
  7912  004474  0102               	movlb	2	; () banked
  7913  004476  5102               	movf	(_loRa+2)& (0+255),w,b
  7914  004478  0BF0               	andlw	-16
  7915  00447A  0905               	iorlw	5
  7916  00447C  6F02               	movwf	(_loRa+2)& (0+255),b
  7917                           
  7918                           ; BSR set to: 2
  7919                           ;lorawan.c: 836: RADIO_ReceiveStop();
  7920  00447E  ECDF  F02F         	call	_RADIO_ReceiveStop	;wreg free
  7921                           
  7922                           ; BSR set to: 1
  7923                           ;lorawan.c: 837: RADIO_ReleaseData();
  7924  004482  EC0D  F031         	call	_RADIO_ReleaseData	;wreg free
  7925                           
  7926                           ; BSR set to: 1
  7927                           ;lorawan.c: 839: ConfigureRadioRx(loRa.receiveWindow2Parameters.dataRate, loRa.receiveWi
      +                          ndow2Parameters.frequency);
  7928  004486  ECB9  F026         	call	PL168	;call to abstracted procedure
  7929  00448A  EC3E  F02E         	call	_ConfigureRadioRx
  7930                           
  7931                           ;lorawan.c: 841: if (CLASS_A == loRa.deviceClass)
  7932  00448E  0102               	movlb	2	; () banked
  7933  004490  5112               	movf	(_loRa+18)& (0+255),w,b
  7934  004492  E125               	bnz	l13850
  7935                           
  7936                           ; BSR set to: 2
  7937                           ;lorawan.c: 842: {
  7938                           ;lorawan.c: 843: if (RADIO_ReceiveStart(rxWindowSize[loRa.receiveWindow2Parameters.dataR
      +                          ate]) != OK)
  7939  004494  0E85               	movlw	low _rxWindowSize
  7940  004496  251C               	addwf	(_loRa+28)& (0+255),w,b
  7941  004498  EC30  F020         	call	PL194	;call to abstracted procedure
  7942  00449C  ECB4  F010         	call	_RADIO_ReceiveStart	;wreg free
  7943  0044A0  C0A6  F049         	movff	?_RADIO_ReceiveStart,btemp+1
  7944  0044A4  C0A7  F04A         	movff	?_RADIO_ReceiveStart+1,btemp+2
  7945  0044A8  5049               	movf	btemp+1,w,c
  7946  0044AA  104A               	iorwf	btemp+2,w,c
  7947  0044AC  E029               	bz	l541
  7948                           
  7949                           ; BSR set to: 0
  7950                           ;lorawan.c: 844: {
  7951                           ;lorawan.c: 845: ResetParametersForConfirmedTransmission ();
  7952  0044AE  EC71  F030         	call	_ResetParametersForConfirmedTransmission	;wreg free
  7953                           
  7954                           ;lorawan.c: 846: ResetParametersForUnconfirmedTransmission ();
  7955  0044B2  ECC3  F030         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
  7956                           
  7957                           ; BSR set to: 2
  7958                           ;lorawan.c: 847: if (rxPayload.RxAppData != (0))
  7959  0044B6  0101               	movlb	1	; () banked
  7960  0044B8  5179               	movf	_rxPayload& (0+255),w,b
  7961  0044BA  117A               	iorwf	(_rxPayload+1)& (0+255),w,b
  7962  0044BC  E021               	bz	l541
  7963                           
  7964                           ; BSR set to: 1
  7965                           ;lorawan.c: 848: {
  7966                           ;lorawan.c: 849: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
  7967  0044BE  EC96  F00C         	call	PL48	;call to abstracted procedure
  7968  0044C2  6F63               	movwf	RxDataDone@status& (0+255),b
  7969  0044C4  D801               	call	u15508
  7970  0044C6  D01C               	goto	l541
  7971  0044C8                     u15508:
  7972  0044C8  0005               	push	
  7973  0044CA  0101               	movlb	1	; () banked
  7974  0044CC  6EFA               	movwf	pclath,c
  7975  0044CE  5179               	movf	_rxPayload& (0+255),w,b
  7976  0044D0  6EFD               	movwf	tosl,c
  7977  0044D2  517A               	movf	(_rxPayload+1)& (0+255),w,b
  7978  0044D4  6EFE               	movwf	tosh,c
  7979  0044D6  50F8               	movf	tblptru,w,c
  7980  0044D8  6EFF               	movwf	tosu,c
  7981  0044DA  50FA               	movf	pclath,w,c
  7982  0044DC  0012               	return		;indir
  7983  0044DE                     l13850:
  7984                           
  7985                           ; BSR set to: 2
  7986                           ;lorawan.c: 853: else
  7987                           ;lorawan.c: 854: {
  7988                           ;lorawan.c: 855: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
  7989  0044DE  EC40  F004         	call	PL316	;call to abstracted procedure
  7990                           
  7991                           ; BSR set to: 2
  7992                           ;lorawan.c: 856: LORAWAN_EnterContinuousReceive();
  7993  0044E2  EC93  F026         	call	_LORAWAN_EnterContinuousReceive	;wreg free
  7994  0044E6  D00C               	goto	l541
  7995  0044E8                     l13854:
  7996                           
  7997                           ; BSR set to: 1
  7998                           ;lorawan.c: 859: else
  7999                           ;lorawan.c: 860: {
  8000                           ;lorawan.c: 863: loRa.rx2DelayExpired = 1;
  8001  0044E8  0E01               	movlw	1
  8002  0044EA  0102               	movlb	2	; () banked
  8003  0044EC  6FF1               	movwf	(_loRa+241)& (0+255),b
  8004                           
  8005                           ; BSR set to: 1
  8006                           ;lorawan.c: 864: }
  8007                           ;lorawan.c: 865: }
  8008  0044EE  D008               	goto	l541
  8009  0044F0                     l532:
  8010                           
  8011                           ; BSR set to: 2
  8012                           ;lorawan.c: 866: else
  8013                           ;lorawan.c: 867: {
  8014                           ;lorawan.c: 870: if (loRa.lorawanMacStatus.joining == 1)
  8015  0044F0  A500               	btfss	_loRa& (0+255),2,b
  8016  0044F2  D002               	goto	l13858
  8017                           
  8018                           ; BSR set to: 2
  8019                           ;lorawan.c: 871: {
  8020                           ;lorawan.c: 872: loRa.lorawanMacStatus.joining = 0;
  8021  0044F4  9500               	bcf	_loRa& (0+255),2,b
  8022                           
  8023                           ;lorawan.c: 873: loRa.macStatus.networkJoined = 0;
  8024  0044F6  9902               	bcf	(_loRa+2)& (0+255),4,b
  8025  0044F8                     l13858:
  8026                           
  8027                           ; BSR set to: 2
  8028                           ;lorawan.c: 874: }
  8029                           ;lorawan.c: 876: ResetParametersForUnconfirmedTransmission();
  8030  0044F8  ECC3  F030         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
  8031                           
  8032                           ;lorawan.c: 877: ResetParametersForConfirmedTransmission();
  8033  0044FC  EC71  F030         	call	_ResetParametersForConfirmedTransmission	;wreg free
  8034  004500                     l541:
  8035                           
  8036                           ; _LORAWAN_ReceiveWindow2Callback: autosize = 0, savesize = 0, parsavesize = 0, tempsize
      +                           = 0 parsize = 1, argsize = 1, vargsize = 0
  8037  004500  52E5               	movf	postdec1,f,c
  8038  004502  0012               	return		;funcret
  8039  004504                     __end_of_LORAWAN_ReceiveWindow2Callback:
  8040                           	opt stack 0
  8041                           tosu	equ	0xFFF
  8042                           tosh	equ	0xFFE
  8043                           tosl	equ	0xFFD
  8044                           pclath	equ	0xFFA
  8045                           tblptru	equ	0xFF8
  8046                           tblptrh	equ	0xFF7
  8047                           tblptrl	equ	0xFF6
  8048                           tablat	equ	0xFF5
  8049                           prodh	equ	0xFF4
  8050                           prodl	equ	0xFF3
  8051                           intcon	equ	0xFF2
  8052                           indf0	equ	0xFEF
  8053                           postinc0	equ	0xFEE
  8054                           plusw0	equ	0xFEB
  8055                           fsr0h	equ	0xFEA
  8056                           fsr0l	equ	0xFE9
  8057                           wreg	equ	0xFE8
  8058                           postinc1	equ	0xFE6
  8059                           postdec1	equ	0xFE5
  8060                           plusw1	equ	0xFE3
  8061                           fsr1h	equ	0xFE2
  8062                           fsr1l	equ	0xFE1
  8063                           indf2	equ	0xFDF
  8064                           postinc2	equ	0xFDE
  8065                           postdec2	equ	0xFDD
  8066                           plusw2	equ	0xFDB
  8067                           fsr2h	equ	0xFDA
  8068                           fsr2l	equ	0xFD9
  8069                           status	equ	0xFD8
  8070                           
  8071 ;; *************** function _LORAWAN_ReceiveWindow1Callback *****************
  8072 ;; Defined at:
  8073 ;;		line 796 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  8074 ;; Parameters:    Size  Location     Type
  8075 ;;  param           1  [STACK] unsigned char 
  8076 ;; Auto vars:     Size  Location     Type
  8077 ;;  freq            4  [STACK] unsigned long 
  8078 ;; Return value:  Size  Location     Type
  8079 ;;                  1  [STACK] void 
  8080 ;; Registers used:
  8081 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, t
      +blptrh, tblptru, prodl, prodh, cstack
  8082 ;; Tracked objects:
  8083 ;;		On entry : 3F/0
  8084 ;;		On exit  : 3D/0
  8085 ;;		Unchanged: 0/0
  8086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8087 ;;      Params:         0       0       0       0       0       0       0       0       0
  8088 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8089 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8090 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8091 ;;Total ram usage:        0 bytes
  8092 ;; Hardware stack levels used:    1
  8093 ;; Hardware stack levels required when called:   13
  8094 ;; This function calls:
  8095 ;;		_ConfigureRadioRx
  8096 ;;		_GetRx1Freq
  8097 ;;		_RADIO_ReceiveStart
  8098 ;;		_RADIO_ReceiveStop
  8099 ;;		_RADIO_ReleaseData
  8100 ;; This function is called by:
  8101 ;;		_SetCallbackSoftwareTimers
  8102 ;;		_SwTimersExecute
  8103 ;; This function uses a reentrant model
  8104 ;;
  8105                           
  8106                           	psect	text39
  8107  003FC8                     __ptext39:
  8108                           	opt stack 0
  8109  003FC8                     _LORAWAN_ReceiveWindow1Callback:
  8110                           	opt stack 0
  8111                           
  8112                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  8113  003FC8  52E6               	movf	postinc1,f,c
  8114  003FCA  52E6               	movf	postinc1,f,c
  8115  003FCC  52E6               	movf	postinc1,f,c
  8116  003FCE  52E6               	movf	postinc1,f,c
  8117                           
  8118                           ;lorawan.c: 798: uint32_t freq;
  8119                           ;lorawan.c: 800: if(loRa.macStatus.macPause == 0)
  8120                           
  8121                           ;incstack = 0
  8122  003FD0  0102               	movlb	2	; () banked
  8123  003FD2  B103               	btfsc	(_loRa+3)& (0+255),0,b
  8124  003FD4  D035               	goto	l529
  8125                           
  8126                           ; BSR set to: 2
  8127                           ;lorawan.c: 801: {
  8128                           ;lorawan.c: 802: if (CLASS_C == loRa.deviceClass)
  8129  003FD6  0E02               	movlw	2
  8130  003FD8  1912               	xorwf	(_loRa+18)& (0+255),w,b
  8131  003FDA  E102               	bnz	l14776
  8132                           
  8133                           ; BSR set to: 2
  8134                           ;lorawan.c: 803: {
  8135                           ;lorawan.c: 804: RADIO_ReceiveStop();
  8136  003FDC  ECDF  F02F         	call	_RADIO_ReceiveStop	;wreg free
  8137  003FE0                     l14776:
  8138                           
  8139                           ;lorawan.c: 805: }
  8140                           ;lorawan.c: 806: if (loRa.receiveWindow1Parameters.dataRate >= loRa.offset)
  8141  003FE0  0102               	movlb	2	; () banked
  8142  003FE2  51EF               	movf	(_loRa+239)& (0+255),w,b
  8143  003FE4  5D17               	subwf	(_loRa+23)& (0+255),w,b
  8144  003FE6  E304               	bnc	l527
  8145                           
  8146                           ; BSR set to: 2
  8147                           ;lorawan.c: 807: {
  8148                           ;lorawan.c: 808: loRa.receiveWindow1Parameters.dataRate = loRa.receiveWindow1Parameters.
      +                          dataRate - loRa.offset;
  8149  003FE8  51EF               	movf	(_loRa+239)& (0+255),w,b
  8150  003FEA  5D17               	subwf	(_loRa+23)& (0+255),w,b
  8151  003FEC  6F17               	movwf	(_loRa+23)& (0+255),b
  8152                           
  8153                           ;lorawan.c: 809: }
  8154  003FEE  D001               	goto	l14780
  8155  003FF0                     l527:
  8156                           
  8157                           ; BSR set to: 2
  8158                           ;lorawan.c: 810: else
  8159                           ;lorawan.c: 811: {
  8160                           ;lorawan.c: 812: loRa.receiveWindow1Parameters.dataRate = 0;
  8161  003FF0  6B17               	clrf	(_loRa+23)& (0+255),b
  8162  003FF2                     l14780:
  8163                           
  8164                           ; BSR set to: 2
  8165                           ;lorawan.c: 813: }
  8166                           ;lorawan.c: 815: freq = GetRx1Freq();
  8167  003FF2  EC56  F030         	call	_GetRx1Freq	;wreg free
  8168  003FF6  C060  F050         	movff	?_GetRx1Freq,btemp+8
  8169  003FFA  C061  F051         	movff	?_GetRx1Freq+1,btemp+9
  8170  003FFE  C062  F052         	movff	?_GetRx1Freq+2,btemp+10
  8171  004002  C063  F053         	movff	?_GetRx1Freq+3,btemp+11
  8172                           
  8173                           ;stkvar	LORAWAN_ReceiveWindow1Callback@freq @ sp[(-4)+0]
  8174  004006  D81F               	call	PL144	;call to abstracted procedure
  8175                           
  8176                           ; BSR set to: 2
  8177                           ;lorawan.c: 817: loRa.macStatus.macState = RX1_OPEN;
  8178  004008  5102               	movf	(_loRa+2)& (0+255),w,b
  8179  00400A  0BF0               	andlw	-16
  8180  00400C  0903               	iorlw	3
  8181  00400E  6F02               	movwf	(_loRa+2)& (0+255),b
  8182                           
  8183                           ; BSR set to: 2
  8184                           ;lorawan.c: 819: RADIO_ReleaseData();
  8185  004010  EC0D  F031         	call	_RADIO_ReleaseData	;wreg free
  8186                           
  8187                           ; BSR set to: 1
  8188                           ;lorawan.c: 821: ConfigureRadioRx(loRa.receiveWindow1Parameters.dataRate, freq);
  8189                           ;stkvar	LORAWAN_ReceiveWindow1Callback@freq @ sp[(-4)+0]
  8190  004014  50E1               	movf	fsr1l,w,c
  8191  004016  0FFC               	addlw	-4
  8192  004018  ECA0  F00E         	call	PL102	;call to abstracted procedure
  8193  00401C  CFDE F072          	movff	postinc2,ConfigureRadioRx@freq
  8194  004020  CFDE F073          	movff	postinc2,ConfigureRadioRx@freq+1
  8195  004024  CFDE F074          	movff	postinc2,ConfigureRadioRx@freq+2
  8196  004028  CFDE F075          	movff	postinc2,ConfigureRadioRx@freq+3
  8197  00402C  0102               	movlb	2	; () banked
  8198  00402E  5117               	movf	(_loRa+23)& (0+255),w,b
  8199  004030  EC3E  F02E         	call	_ConfigureRadioRx
  8200                           
  8201                           ;lorawan.c: 823: RADIO_ReceiveStart(rxWindowSize[loRa.receiveWindow1Parameters.dataRate]
      +                          );
  8202  004034  0E85               	movlw	low _rxWindowSize
  8203  004036  0102               	movlb	2	; () banked
  8204  004038  2517               	addwf	(_loRa+23)& (0+255),w,b
  8205  00403A  D812               	call	PL194	;call to abstracted procedure
  8206  00403C  ECB4  F010         	call	_RADIO_ReceiveStart	;wreg free
  8207  004040                     l529:
  8208                           
  8209                           ; _LORAWAN_ReceiveWindow1Callback: autosize = 4, savesize = 0, parsavesize = 0, tempsize
      +                           = 0 parsize = 1, argsize = 1, vargsize = 0
  8210  004040  0EFB               	movlw	251
  8211  004042  EF1A  F01E         	goto	PL256	;call to abstracted procedure
  8212  004046                     __end_of_LORAWAN_ReceiveWindow1Callback:
  8213                           	opt stack 0
  8214  004046                     PL144:
  8215                           	opt stack 17
  8216  004046  0EFC               	movlw	-4
  8217  004048  C050  FFE3         	movff	btemp+8,plusw1
  8218  00404C  0EFD               	movlw	-3
  8219  00404E  C051  FFE3         	movff	btemp+9,plusw1
  8220  004052  0EFE               	movlw	-2
  8221  004054  C052  FFE3         	movff	btemp+10,plusw1
  8222  004058  0EFF               	movlw	-1
  8223  00405A  C053  FFE3         	movff	btemp+11,plusw1
  8224  00405E  0CFF               	retlw	255
  8225  004060                     __end_ofPL144:
  8226                           	opt stack 0
  8227  004060                     PL194:
  8228                           	opt stack 12
  8229  004060  6EF6               	movwf	tblptrl,c
  8230  004062  6AF7               	clrf	tblptrh,c
  8231  004064  0E7F               	movlw	high _rxWindowSize
  8232  004066  22F7               	addwfc	tblptrh,f,c
  8233  004068                     	if	0	;There are less than 3 active tblptr bytes
  8234  004068                     	endif
  8235  004068  0008               	tblrd		*
  8236  00406A  50F5               	movf	tablat,w,c
  8237  00406C  0100               	movlb	0	; () banked
  8238  00406E  6FA6               	movwf	RADIO_ReceiveStart@rxWindowSize& (0+255),b
  8239  004070  6BA7               	clrf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),b
  8240  004072  0012               	return	
  8241  004074                     __end_ofPL194:
  8242                           	opt stack 0
  8243                           tosu	equ	0xFFF
  8244                           tosh	equ	0xFFE
  8245                           tosl	equ	0xFFD
  8246                           pclath	equ	0xFFA
  8247                           tblptru	equ	0xFF8
  8248                           tblptrh	equ	0xFF7
  8249                           tblptrl	equ	0xFF6
  8250                           tablat	equ	0xFF5
  8251                           prodh	equ	0xFF4
  8252                           prodl	equ	0xFF3
  8253                           intcon	equ	0xFF2
  8254                           indf0	equ	0xFEF
  8255                           postinc0	equ	0xFEE
  8256                           plusw0	equ	0xFEB
  8257                           fsr0h	equ	0xFEA
  8258                           fsr0l	equ	0xFE9
  8259                           wreg	equ	0xFE8
  8260                           postinc1	equ	0xFE6
  8261                           postdec1	equ	0xFE5
  8262                           plusw1	equ	0xFE3
  8263                           fsr1h	equ	0xFE2
  8264                           fsr1l	equ	0xFE1
  8265                           indf2	equ	0xFDF
  8266                           postinc2	equ	0xFDE
  8267                           postdec2	equ	0xFDD
  8268                           plusw2	equ	0xFDB
  8269                           fsr2h	equ	0xFDA
  8270                           fsr2l	equ	0xFD9
  8271                           status	equ	0xFD8
  8272                           
  8273 ;; *************** function _UnconfirmedTransmissionCallback *****************
  8274 ;; Defined at:
  8275 ;;		line 997 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  8276 ;; Parameters:    Size  Location     Type
  8277 ;;  param           1  [STACK] unsigned char 
  8278 ;; Auto vars:     Size  Location     Type
  8279 ;;		None
  8280 ;; Return value:  Size  Location     Type
  8281 ;;                  1  [STACK] void 
  8282 ;; Registers used:
  8283 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, tosl, tblptrl, tblptrh, tblptru, pro
      +dl, prodh, cstack
  8284 ;; Tracked objects:
  8285 ;;		On entry : 3F/0
  8286 ;;		On exit  : 3C/0
  8287 ;;		Unchanged: 0/0
  8288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8289 ;;      Params:         0       0       0       0       0       0       0       0       0
  8290 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8291 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8292 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8293 ;;Total ram usage:        0 bytes
  8294 ;; Hardware stack levels used:    1
  8295 ;; Hardware stack levels required when called:   13
  8296 ;; This function calls:
  8297 ;;		_RADIO_Transmit
  8298 ;;		_ResetParametersForUnconfirmedTransmission
  8299 ;;		_RxDataDone
  8300 ;;		_SelectChannelForTransmission
  8301 ;; This function is called by:
  8302 ;;		_SetCallbackSoftwareTimers
  8303 ;;		_SwTimersExecute
  8304 ;; This function uses a reentrant model
  8305 ;;
  8306                           
  8307                           	psect	text40
  8308  004AAC                     __ptext40:
  8309                           	opt stack 0
  8310  004AAC                     _UnconfirmedTransmissionCallback:
  8311                           	opt stack 15
  8312                           
  8313                           ;lorawan.c: 1000: if ( (SelectChannelForTransmission (1) == OK) && (RADIO_Transmit (&mac
      +                          Buffer[16], loRa.lastPacketLength) == OK) )
  8314                           
  8315                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  8316                           ;incstack = 0
  8317  004AAC  0E01               	movlw	1
  8318  004AAE  ECC4  F026         	call	_SelectChannelForTransmission
  8319  004AB2  0900               	iorlw	0
  8320  004AB4  E10A               	bnz	l14880
  8321                           
  8322                           ; BSR set to: 0
  8323  004AB6  0EFF               	movlw	low (_macBuffer+16)
  8324  004AB8  D820               	call	PL170	;call to abstracted procedure
  8325  004ABA  ECCE  F00E         	call	_RADIO_Transmit	;wreg free
  8326  004ABE  D828               	call	PL284	;call to abstracted procedure
  8327  004AC0  E104               	bnz	l14880
  8328                           
  8329                           ; BSR set to: 0
  8330                           ;lorawan.c: 1001: {
  8331                           ;lorawan.c: 1002: loRa.counterRepetitionsUnconfirmedUplink ++ ;
  8332  004AC2  0102               	movlb	2	; () banked
  8333  004AC4  2BD8               	incf	(_loRa+216)& (0+255),f,b
  8334                           
  8335                           ; BSR set to: 2
  8336                           ;lorawan.c: 1003: loRa.macStatus.macState = TRANSMISSION_OCCURRING;
  8337  004AC6  D81F               	call	PL270	;call to abstracted procedure
  8338                           
  8339                           ;lorawan.c: 1005: }
  8340  004AC8  D016               	goto	l584
  8341  004ACA                     l14880:
  8342                           
  8343                           ; BSR set to: 0
  8344                           ;lorawan.c: 1006: else
  8345                           ;lorawan.c: 1008: {
  8346                           ;lorawan.c: 1009: ResetParametersForUnconfirmedTransmission ();
  8347  004ACA  ECC3  F030         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
  8348                           
  8349                           ; BSR set to: 2
  8350                           ;lorawan.c: 1010: if (rxPayload.RxAppData != (0))
  8351  004ACE  0101               	movlb	1	; () banked
  8352  004AD0  5179               	movf	_rxPayload& (0+255),w,b
  8353  004AD2  117A               	iorwf	(_rxPayload+1)& (0+255),w,b
  8354  004AD4  E010               	bz	l584
  8355                           
  8356                           ; BSR set to: 1
  8357                           ;lorawan.c: 1011: {
  8358                           ;lorawan.c: 1012: rxPayload.RxAppData((0), 0, MAC_NOT_OK);
  8359  004AD6  EC96  F00C         	call	PL48	;call to abstracted procedure
  8360  004ADA  6F63               	movwf	RxDataDone@status& (0+255),b
  8361  004ADC  D801               	call	u17628
  8362  004ADE  D00B               	goto	l584
  8363  004AE0                     u17628:
  8364  004AE0  0005               	push	
  8365  004AE2  0101               	movlb	1	; () banked
  8366  004AE4  6EFA               	movwf	pclath,c
  8367  004AE6  5179               	movf	_rxPayload& (0+255),w,b
  8368  004AE8  6EFD               	movwf	tosl,c
  8369  004AEA  517A               	movf	(_rxPayload+1)& (0+255),w,b
  8370  004AEC  6EFE               	movwf	tosh,c
  8371  004AEE  50F8               	movf	tblptru,w,c
  8372  004AF0  6EFF               	movwf	tosu,c
  8373  004AF2  50FA               	movf	pclath,w,c
  8374  004AF4  0012               	return		;indir
  8375  004AF6                     l584:
  8376                           
  8377                           ; _UnconfirmedTransmissionCallback: autosize = 0, savesize = 0, parsavesize = 0, tempsiz
      +                          e = 0 parsize = 1, argsize = 1, vargsize = 0
  8378  004AF6  52E5               	movf	postdec1,f,c
  8379  004AF8  0012               	return		;funcret
  8380  004AFA                     __end_of_UnconfirmedTransmissionCallback:
  8381                           	opt stack 0
  8382  004AFA                     PL170:
  8383                           	opt stack 15
  8384  004AFA  6FA6               	movwf	RADIO_Transmit@buffer& (0+255),b
  8385  004AFC  0E05               	movlw	high (_macBuffer+16)
  8386  004AFE  6FA7               	movwf	(RADIO_Transmit@buffer+1)& (0+255),b
  8387  004B00  C2D4  F0A8         	movff	_loRa+212,RADIO_Transmit@bufferLen
  8388  004B04  0012               	return	
  8389  004B06                     __end_ofPL170:
  8390                           	opt stack 0
  8391  004B06                     PL270:
  8392                           	opt stack 15
  8393  004B06  5102               	movf	(_loRa+2)& (0+255),w,b
  8394  004B08  0BF0               	andlw	-16
  8395  004B0A  0901               	iorlw	1
  8396  004B0C  6F02               	movwf	(_loRa+2)& (0+255),b
  8397  004B0E  0012               	return	
  8398  004B10                     __end_ofPL270:
  8399                           	opt stack 0
  8400  004B10                     PL284:
  8401                           	opt stack 15
  8402  004B10  C0A6  F049         	movff	?_RADIO_Transmit,btemp+1
  8403  004B14  C0A7  F04A         	movff	?_RADIO_Transmit+1,btemp+2
  8404  004B18  5049               	movf	btemp+1,w,c
  8405  004B1A  104A               	iorwf	btemp+2,w,c
  8406  004B1C  0012               	return	
  8407  004B1E                     __end_ofPL284:
  8408                           	opt stack 0
  8409                           tosu	equ	0xFFF
  8410                           tosh	equ	0xFFE
  8411                           tosl	equ	0xFFD
  8412                           pclath	equ	0xFFA
  8413                           tblptru	equ	0xFF8
  8414                           tblptrh	equ	0xFF7
  8415                           tblptrl	equ	0xFF6
  8416                           tablat	equ	0xFF5
  8417                           prodh	equ	0xFF4
  8418                           prodl	equ	0xFF3
  8419                           intcon	equ	0xFF2
  8420                           indf0	equ	0xFEF
  8421                           postinc0	equ	0xFEE
  8422                           plusw0	equ	0xFEB
  8423                           fsr0h	equ	0xFEA
  8424                           fsr0l	equ	0xFE9
  8425                           wreg	equ	0xFE8
  8426                           postinc1	equ	0xFE6
  8427                           postdec1	equ	0xFE5
  8428                           plusw1	equ	0xFE3
  8429                           fsr1h	equ	0xFE2
  8430                           fsr1l	equ	0xFE1
  8431                           indf2	equ	0xFDF
  8432                           postinc2	equ	0xFDE
  8433                           postdec2	equ	0xFDD
  8434                           plusw2	equ	0xFDB
  8435                           fsr2h	equ	0xFDA
  8436                           fsr2l	equ	0xFD9
  8437                           status	equ	0xFD8
  8438                           
  8439 ;; *************** function _GetRx1Freq *****************
  8440 ;; Defined at:
  8441 ;;		line 883 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
  8442 ;; Parameters:    Size  Location     Type
  8443 ;;		None
  8444 ;; Auto vars:     Size  Location     Type
  8445 ;;		None
  8446 ;; Return value:  Size  Location     Type
  8447 ;;                  4    0[BANK0 ] unsigned long 
  8448 ;; Registers used:
  8449 ;;		None
  8450 ;; Tracked objects:
  8451 ;;		On entry : 3F/2
  8452 ;;		On exit  : 3F/2
  8453 ;;		Unchanged: 3F/0
  8454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8455 ;;      Params:         0       4       0       0       0       0       0       0       0
  8456 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8457 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8458 ;;      Totals:         0       4       0       0       0       0       0       0       0
  8459 ;;Total ram usage:        4 bytes
  8460 ;; Hardware stack levels used:    1
  8461 ;; Hardware stack levels required when called:    7
  8462 ;; This function calls:
  8463 ;;		Nothing
  8464 ;; This function is called by:
  8465 ;;		_LORAWAN_ReceiveWindow1Callback
  8466 ;; This function uses a non-reentrant model
  8467 ;;
  8468                           
  8469                           	psect	text41
  8470  0060AC                     __ptext41:
  8471                           	opt stack 0
  8472  0060AC                     _GetRx1Freq:
  8473                           	opt stack 20
  8474                           
  8475                           ; BSR set to: 2
  8476                           ;lorawan_eu.c: 885: return loRa.receiveWindow1Parameters.frequency;
  8477                           
  8478                           ;incstack = 0
  8479  0060AC  C213  F060         	movff	_loRa+19,?_GetRx1Freq
  8480  0060B0  C214  F061         	movff	_loRa+20,?_GetRx1Freq+1
  8481  0060B4  C215  F062         	movff	_loRa+21,?_GetRx1Freq+2
  8482  0060B8  C216  F063         	movff	_loRa+22,?_GetRx1Freq+3
  8483                           
  8484                           ; BSR set to: 2
  8485  0060BC  0012               	return		;funcret
  8486  0060BE                     __end_of_GetRx1Freq:
  8487                           	opt stack 0
  8488                           tosu	equ	0xFFF
  8489                           tosh	equ	0xFFE
  8490                           tosl	equ	0xFFD
  8491                           pclath	equ	0xFFA
  8492                           tblptru	equ	0xFF8
  8493                           tblptrh	equ	0xFF7
  8494                           tblptrl	equ	0xFF6
  8495                           tablat	equ	0xFF5
  8496                           prodh	equ	0xFF4
  8497                           prodl	equ	0xFF3
  8498                           intcon	equ	0xFF2
  8499                           indf0	equ	0xFEF
  8500                           postinc0	equ	0xFEE
  8501                           plusw0	equ	0xFEB
  8502                           fsr0h	equ	0xFEA
  8503                           fsr0l	equ	0xFE9
  8504                           wreg	equ	0xFE8
  8505                           postinc1	equ	0xFE6
  8506                           postdec1	equ	0xFE5
  8507                           plusw1	equ	0xFE3
  8508                           fsr1h	equ	0xFE2
  8509                           fsr1l	equ	0xFE1
  8510                           indf2	equ	0xFDF
  8511                           postinc2	equ	0xFDE
  8512                           postdec2	equ	0xFDD
  8513                           plusw2	equ	0xFDB
  8514                           fsr2h	equ	0xFDA
  8515                           fsr2l	equ	0xFD9
  8516                           status	equ	0xFD8
  8517                           
  8518 ;; *************** function _RADIO_DIO5 *****************
  8519 ;; Defined at:
  8520 ;;		line 1344 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8521 ;; Parameters:    Size  Location     Type
  8522 ;;		None
  8523 ;; Auto vars:     Size  Location     Type
  8524 ;;  dioMapping      1    0        unsigned char 
  8525 ;; Return value:  Size  Location     Type
  8526 ;;                  1    wreg      void 
  8527 ;; Registers used:
  8528 ;;		wreg, status,2, status,0, cstack
  8529 ;; Tracked objects:
  8530 ;;		On entry : 3F/1
  8531 ;;		On exit  : 31/0
  8532 ;;		Unchanged: 0/0
  8533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8534 ;;      Params:         0       0       0       0       0       0       0       0       0
  8535 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8536 ;;      Temps:          0       1       0       0       0       0       0       0       0
  8537 ;;      Totals:         0       1       0       0       0       0       0       0       0
  8538 ;;Total ram usage:        1 bytes
  8539 ;; Hardware stack levels used:    1
  8540 ;; Hardware stack levels required when called:   11
  8541 ;; This function calls:
  8542 ;;		_RADIO_RegisterRead
  8543 ;;		_RADIO_UnhandledInterrupt
  8544 ;; This function is called by:
  8545 ;;		_LORAWAN_Mainloop
  8546 ;; This function uses a non-reentrant model
  8547 ;;
  8548                           
  8549                           	psect	text42
  8550  005F5E                     __ptext42:
  8551                           	opt stack 0
  8552  005F5E                     _RADIO_DIO5:
  8553                           	opt stack 18
  8554                           
  8555                           ; BSR set to: 1
  8556                           ;radio_driver_SX1276.c: 1347: uint8_t dioMapping;
  8557                           ;radio_driver_SX1276.c: 1348: dioMapping = (RADIO_RegisterRead(0x41) & 0x30) >> (4);
  8558                           
  8559                           ; BSR set to: 2
  8560                           ;incstack = 0
  8561  005F5E  0E41               	movlw	65
  8562  005F60  EC64  F02E         	call	_RADIO_RegisterRead
  8563                           
  8564                           ;radio_driver_SX1276.c: 1350: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  8565  005F64  0E01               	movlw	1
  8566  005F66  EC64  F02E         	call	_RADIO_RegisterRead
  8567  005F6A  6F65               	movwf	??_RADIO_DIO5& (0+255),b
  8568  005F6C  AF65               	btfss	??_RADIO_DIO5& (0+255),7,b
  8569  005F6E  0012               	return	
  8570                           
  8571                           ; BSR set to: 0
  8572                           ;radio_driver_SX1276.c: 1356: RADIO_UnhandledInterrupt(MODULATION_LORA);
  8573  005F70  0E01               	movlw	1
  8574  005F72  EFF2  F02E         	goto	_RADIO_UnhandledInterrupt
  8575  005F76                     __end_of_RADIO_DIO5:
  8576                           	opt stack 0
  8577                           tosu	equ	0xFFF
  8578                           tosh	equ	0xFFE
  8579                           tosl	equ	0xFFD
  8580                           pclath	equ	0xFFA
  8581                           tblptru	equ	0xFF8
  8582                           tblptrh	equ	0xFF7
  8583                           tblptrl	equ	0xFF6
  8584                           tablat	equ	0xFF5
  8585                           prodh	equ	0xFF4
  8586                           prodl	equ	0xFF3
  8587                           intcon	equ	0xFF2
  8588                           indf0	equ	0xFEF
  8589                           postinc0	equ	0xFEE
  8590                           plusw0	equ	0xFEB
  8591                           fsr0h	equ	0xFEA
  8592                           fsr0l	equ	0xFE9
  8593                           wreg	equ	0xFE8
  8594                           postinc1	equ	0xFE6
  8595                           postdec1	equ	0xFE5
  8596                           plusw1	equ	0xFE3
  8597                           fsr1h	equ	0xFE2
  8598                           fsr1l	equ	0xFE1
  8599                           indf2	equ	0xFDF
  8600                           postinc2	equ	0xFDE
  8601                           postdec2	equ	0xFDD
  8602                           plusw2	equ	0xFDB
  8603                           fsr2h	equ	0xFDA
  8604                           fsr2l	equ	0xFD9
  8605                           status	equ	0xFD8
  8606                           
  8607 ;; *************** function _RADIO_DIO4 *****************
  8608 ;; Defined at:
  8609 ;;		line 1321 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8610 ;; Parameters:    Size  Location     Type
  8611 ;;		None
  8612 ;; Auto vars:     Size  Location     Type
  8613 ;;  dioMapping      1    0        unsigned char 
  8614 ;; Return value:  Size  Location     Type
  8615 ;;                  1    wreg      void 
  8616 ;; Registers used:
  8617 ;;		wreg, status,2, status,0, cstack
  8618 ;; Tracked objects:
  8619 ;;		On entry : 3F/1
  8620 ;;		On exit  : 31/0
  8621 ;;		Unchanged: 0/0
  8622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8623 ;;      Params:         0       0       0       0       0       0       0       0       0
  8624 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8625 ;;      Temps:          0       1       0       0       0       0       0       0       0
  8626 ;;      Totals:         0       1       0       0       0       0       0       0       0
  8627 ;;Total ram usage:        1 bytes
  8628 ;; Hardware stack levels used:    1
  8629 ;; Hardware stack levels required when called:   11
  8630 ;; This function calls:
  8631 ;;		_RADIO_RegisterRead
  8632 ;;		_RADIO_UnhandledInterrupt
  8633 ;; This function is called by:
  8634 ;;		_LORAWAN_Mainloop
  8635 ;; This function uses a non-reentrant model
  8636 ;;
  8637                           
  8638                           	psect	text43
  8639  005F76                     __ptext43:
  8640                           	opt stack 0
  8641  005F76                     _RADIO_DIO4:
  8642                           	opt stack 18
  8643                           
  8644                           ; BSR set to: 1
  8645                           ;radio_driver_SX1276.c: 1324: uint8_t dioMapping;
  8646                           ;radio_driver_SX1276.c: 1325: dioMapping = (RADIO_RegisterRead(0x41) & 0xC0) >> (6);
  8647                           
  8648                           ;incstack = 0
  8649  005F76  0E41               	movlw	65
  8650  005F78  EC64  F02E         	call	_RADIO_RegisterRead
  8651                           
  8652                           ;radio_driver_SX1276.c: 1327: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  8653  005F7C  0E01               	movlw	1
  8654  005F7E  EC64  F02E         	call	_RADIO_RegisterRead
  8655  005F82  6F65               	movwf	??_RADIO_DIO4& (0+255),b
  8656  005F84  AF65               	btfss	??_RADIO_DIO4& (0+255),7,b
  8657  005F86  0012               	return	
  8658                           
  8659                           ; BSR set to: 0
  8660                           ;radio_driver_SX1276.c: 1333: RADIO_UnhandledInterrupt(MODULATION_LORA);
  8661  005F88  0E01               	movlw	1
  8662  005F8A  EFF2  F02E         	goto	_RADIO_UnhandledInterrupt
  8663  005F8E                     __end_of_RADIO_DIO4:
  8664                           	opt stack 0
  8665                           tosu	equ	0xFFF
  8666                           tosh	equ	0xFFE
  8667                           tosl	equ	0xFFD
  8668                           pclath	equ	0xFFA
  8669                           tblptru	equ	0xFF8
  8670                           tblptrh	equ	0xFF7
  8671                           tblptrl	equ	0xFF6
  8672                           tablat	equ	0xFF5
  8673                           prodh	equ	0xFF4
  8674                           prodl	equ	0xFF3
  8675                           intcon	equ	0xFF2
  8676                           indf0	equ	0xFEF
  8677                           postinc0	equ	0xFEE
  8678                           plusw0	equ	0xFEB
  8679                           fsr0h	equ	0xFEA
  8680                           fsr0l	equ	0xFE9
  8681                           wreg	equ	0xFE8
  8682                           postinc1	equ	0xFE6
  8683                           postdec1	equ	0xFE5
  8684                           plusw1	equ	0xFE3
  8685                           fsr1h	equ	0xFE2
  8686                           fsr1l	equ	0xFE1
  8687                           indf2	equ	0xFDF
  8688                           postinc2	equ	0xFDE
  8689                           postdec2	equ	0xFDD
  8690                           plusw2	equ	0xFDB
  8691                           fsr2h	equ	0xFDA
  8692                           fsr2l	equ	0xFD9
  8693                           status	equ	0xFD8
  8694                           
  8695 ;; *************** function _RADIO_DIO3 *****************
  8696 ;; Defined at:
  8697 ;;		line 1298 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8698 ;; Parameters:    Size  Location     Type
  8699 ;;		None
  8700 ;; Auto vars:     Size  Location     Type
  8701 ;;  dioMapping      1    0        unsigned char 
  8702 ;; Return value:  Size  Location     Type
  8703 ;;                  1    wreg      void 
  8704 ;; Registers used:
  8705 ;;		wreg, status,2, status,0, cstack
  8706 ;; Tracked objects:
  8707 ;;		On entry : 3F/1
  8708 ;;		On exit  : 31/0
  8709 ;;		Unchanged: 0/0
  8710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8711 ;;      Params:         0       0       0       0       0       0       0       0       0
  8712 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8713 ;;      Temps:          0       1       0       0       0       0       0       0       0
  8714 ;;      Totals:         0       1       0       0       0       0       0       0       0
  8715 ;;Total ram usage:        1 bytes
  8716 ;; Hardware stack levels used:    1
  8717 ;; Hardware stack levels required when called:   11
  8718 ;; This function calls:
  8719 ;;		_RADIO_RegisterRead
  8720 ;;		_RADIO_UnhandledInterrupt
  8721 ;; This function is called by:
  8722 ;;		_LORAWAN_Mainloop
  8723 ;; This function uses a non-reentrant model
  8724 ;;
  8725                           
  8726                           	psect	text44
  8727  005F8E                     __ptext44:
  8728                           	opt stack 0
  8729  005F8E                     _RADIO_DIO3:
  8730                           	opt stack 18
  8731                           
  8732                           ; BSR set to: 1
  8733                           ;radio_driver_SX1276.c: 1301: uint8_t dioMapping;
  8734                           ;radio_driver_SX1276.c: 1302: dioMapping = RADIO_RegisterRead(0x40) & 0x03;
  8735                           
  8736                           ;incstack = 0
  8737  005F8E  0E40               	movlw	64
  8738  005F90  EC64  F02E         	call	_RADIO_RegisterRead
  8739                           
  8740                           ;radio_driver_SX1276.c: 1304: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  8741  005F94  0E01               	movlw	1
  8742  005F96  EC64  F02E         	call	_RADIO_RegisterRead
  8743  005F9A  6F65               	movwf	??_RADIO_DIO3& (0+255),b
  8744  005F9C  AF65               	btfss	??_RADIO_DIO3& (0+255),7,b
  8745  005F9E  0012               	return	
  8746                           
  8747                           ; BSR set to: 0
  8748                           ;radio_driver_SX1276.c: 1310: RADIO_UnhandledInterrupt(MODULATION_LORA);
  8749  005FA0  0E01               	movlw	1
  8750  005FA2  EFF2  F02E         	goto	_RADIO_UnhandledInterrupt
  8751  005FA6                     __end_of_RADIO_DIO3:
  8752                           	opt stack 0
  8753                           tosu	equ	0xFFF
  8754                           tosh	equ	0xFFE
  8755                           tosl	equ	0xFFD
  8756                           pclath	equ	0xFFA
  8757                           tblptru	equ	0xFF8
  8758                           tblptrh	equ	0xFF7
  8759                           tblptrl	equ	0xFF6
  8760                           tablat	equ	0xFF5
  8761                           prodh	equ	0xFF4
  8762                           prodl	equ	0xFF3
  8763                           intcon	equ	0xFF2
  8764                           indf0	equ	0xFEF
  8765                           postinc0	equ	0xFEE
  8766                           plusw0	equ	0xFEB
  8767                           fsr0h	equ	0xFEA
  8768                           fsr0l	equ	0xFE9
  8769                           wreg	equ	0xFE8
  8770                           postinc1	equ	0xFE6
  8771                           postdec1	equ	0xFE5
  8772                           plusw1	equ	0xFE3
  8773                           fsr1h	equ	0xFE2
  8774                           fsr1l	equ	0xFE1
  8775                           indf2	equ	0xFDF
  8776                           postinc2	equ	0xFDE
  8777                           postdec2	equ	0xFDD
  8778                           plusw2	equ	0xFDB
  8779                           fsr2h	equ	0xFDA
  8780                           fsr2l	equ	0xFD9
  8781                           status	equ	0xFD8
  8782                           
  8783 ;; *************** function _RADIO_DIO2 *****************
  8784 ;; Defined at:
  8785 ;;		line 1268 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8786 ;; Parameters:    Size  Location     Type
  8787 ;;		None
  8788 ;; Auto vars:     Size  Location     Type
  8789 ;;  dioMapping      1   26[BANK0 ] unsigned char 
  8790 ;;  opMode          1    0        unsigned char 
  8791 ;; Return value:  Size  Location     Type
  8792 ;;                  1    wreg      void 
  8793 ;; Registers used:
  8794 ;;		wreg, status,2, status,0, cstack
  8795 ;; Tracked objects:
  8796 ;;		On entry : 3F/1
  8797 ;;		On exit  : 31/0
  8798 ;;		Unchanged: 0/0
  8799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8800 ;;      Params:         0       0       0       0       0       0       0       0       0
  8801 ;;      Locals:         0       1       0       0       0       0       0       0       0
  8802 ;;      Temps:          0       1       0       0       0       0       0       0       0
  8803 ;;      Totals:         0       2       0       0       0       0       0       0       0
  8804 ;;Total ram usage:        2 bytes
  8805 ;; Hardware stack levels used:    1
  8806 ;; Hardware stack levels required when called:   12
  8807 ;; This function calls:
  8808 ;;		_RADIO_FHSSChangeChannel
  8809 ;;		_RADIO_RegisterRead
  8810 ;;		_RADIO_UnhandledInterrupt
  8811 ;; This function is called by:
  8812 ;;		_LORAWAN_Mainloop
  8813 ;; This function uses a non-reentrant model
  8814 ;;
  8815                           
  8816                           	psect	text45
  8817  00552A                     __ptext45:
  8818                           	opt stack 0
  8819  00552A                     _RADIO_DIO2:
  8820                           	opt stack 17
  8821                           
  8822                           ; BSR set to: 1
  8823                           ;radio_driver_SX1276.c: 1271: uint8_t dioMapping;
  8824                           ;radio_driver_SX1276.c: 1272: uint8_t opMode;
  8825                           ;radio_driver_SX1276.c: 1273: dioMapping = (RADIO_RegisterRead(0x40) & 0x0C) >> (2);
  8826                           
  8827                           ;incstack = 0
  8828  00552A  0E40               	movlw	64
  8829  00552C  EC64  F02E         	call	_RADIO_RegisterRead
  8830  005530  6F79               	movwf	??_RADIO_DIO2& (0+255),b
  8831  005532  90D8               	bcf	status,0,c
  8832  005534  3379               	rrcf	??_RADIO_DIO2& (0+255),f,b
  8833  005536  90D8               	bcf	status,0,c
  8834  005538  3179               	rrcf	??_RADIO_DIO2& (0+255),w,b
  8835  00553A  0B03               	andlw	3
  8836  00553C  6F7A               	movwf	RADIO_DIO2@dioMapping& (0+255),b
  8837                           
  8838                           ;radio_driver_SX1276.c: 1274: opMode = RADIO_RegisterRead(0x01);
  8839  00553E  0E01               	movlw	1
  8840  005540  EC64  F02E         	call	_RADIO_RegisterRead
  8841                           
  8842                           ;radio_driver_SX1276.c: 1276: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  8843  005544  0E01               	movlw	1
  8844  005546  EC64  F02E         	call	_RADIO_RegisterRead
  8845  00554A  6F79               	movwf	??_RADIO_DIO2& (0+255),b
  8846  00554C  AF79               	btfss	??_RADIO_DIO2& (0+255),7,b
  8847  00554E  0012               	return	
  8848  005550  D003               	goto	l15338
  8849  005552                     l15334:
  8850                           
  8851                           ; BSR set to: 0
  8852                           ;radio_driver_SX1276.c: 1288: RADIO_UnhandledInterrupt(MODULATION_LORA);
  8853  005552  0E01               	movlw	1
  8854  005554  EFF2  F02E         	goto	_RADIO_UnhandledInterrupt
  8855  005558                     l15338:
  8856                           
  8857                           ; BSR set to: 0
  8858  005558  517A               	movf	RADIO_DIO2@dioMapping& (0+255),w,b
  8859                           
  8860                           ; Switch size 1, requested type "space"
  8861                           ; Number of cases is 3, Range of values is 0 to 2
  8862                           ; switch strategies available:
  8863                           ; Name         Instructions Cycles
  8864                           ; simple_byte           10     6 (average)
  8865                           ;	Chosen strategy is simple_byte
  8866  00555A  E102 EFFA  F02C    	bz	_RADIO_FHSSChangeChannel
  8867  005560  0A01               	xorlw	1	; case 1
  8868  005562  E102 EFFA  F02C    	bz	_RADIO_FHSSChangeChannel
  8869  005568  0A03               	xorlw	3	; case 2
  8870  00556A  E102 EFFA  F02C    	bz	_RADIO_FHSSChangeChannel
  8871  005570  D7F0               	goto	l15334
  8872  005572                     __end_of_RADIO_DIO2:
  8873                           	opt stack 0
  8874                           tosu	equ	0xFFF
  8875                           tosh	equ	0xFFE
  8876                           tosl	equ	0xFFD
  8877                           pclath	equ	0xFFA
  8878                           tblptru	equ	0xFF8
  8879                           tblptrh	equ	0xFF7
  8880                           tblptrl	equ	0xFF6
  8881                           tablat	equ	0xFF5
  8882                           prodh	equ	0xFF4
  8883                           prodl	equ	0xFF3
  8884                           intcon	equ	0xFF2
  8885                           indf0	equ	0xFEF
  8886                           postinc0	equ	0xFEE
  8887                           plusw0	equ	0xFEB
  8888                           fsr0h	equ	0xFEA
  8889                           fsr0l	equ	0xFE9
  8890                           wreg	equ	0xFE8
  8891                           postinc1	equ	0xFE6
  8892                           postdec1	equ	0xFE5
  8893                           plusw1	equ	0xFE3
  8894                           fsr1h	equ	0xFE2
  8895                           fsr1l	equ	0xFE1
  8896                           indf2	equ	0xFDF
  8897                           postinc2	equ	0xFDE
  8898                           postdec2	equ	0xFDD
  8899                           plusw2	equ	0xFDB
  8900                           fsr2h	equ	0xFDA
  8901                           fsr2l	equ	0xFD9
  8902                           status	equ	0xFD8
  8903                           
  8904 ;; *************** function _RADIO_DIO1 *****************
  8905 ;; Defined at:
  8906 ;;		line 1231 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8907 ;; Parameters:    Size  Location     Type
  8908 ;;		None
  8909 ;; Auto vars:     Size  Location     Type
  8910 ;;  dioMapping      1   97[BANK0 ] unsigned char 
  8911 ;; Return value:  Size  Location     Type
  8912 ;;                  1    wreg      void 
  8913 ;; Registers used:
  8914 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tb
      +lptru, prodl, prodh, cstack
  8915 ;; Tracked objects:
  8916 ;;		On entry : 3F/1
  8917 ;;		On exit  : 30/0
  8918 ;;		Unchanged: 0/0
  8919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8920 ;;      Params:         0       0       0       0       0       0       0       0       0
  8921 ;;      Locals:         0       1       0       0       0       0       0       0       0
  8922 ;;      Temps:          0       1       0       0       0       0       0       0       0
  8923 ;;      Totals:         0       2       0       0       0       0       0       0       0
  8924 ;;Total ram usage:        2 bytes
  8925 ;; Hardware stack levels used:    1
  8926 ;; Hardware stack levels required when called:   17
  8927 ;; This function calls:
  8928 ;;		_RADIO_FHSSChangeChannel
  8929 ;;		_RADIO_RegisterRead
  8930 ;;		_RADIO_RxTimeout
  8931 ;;		_RADIO_UnhandledInterrupt
  8932 ;; This function is called by:
  8933 ;;		_LORAWAN_Mainloop
  8934 ;; This function uses a non-reentrant model
  8935 ;;
  8936                           
  8937                           	psect	text46
  8938  005776                     __ptext46:
  8939                           	opt stack 0
  8940  005776                     _RADIO_DIO1:
  8941                           	opt stack 12
  8942                           
  8943                           ; BSR set to: 1
  8944                           ;radio_driver_SX1276.c: 1234: uint8_t dioMapping;
  8945                           ;radio_driver_SX1276.c: 1235: dioMapping = (RADIO_RegisterRead(0x40) & 0x30) >> (4);
  8946                           
  8947                           ;incstack = 0
  8948  005776  0E40               	movlw	64
  8949  005778  EC64  F02E         	call	_RADIO_RegisterRead
  8950  00577C  6FC0               	movwf	??_RADIO_DIO1& (0+255),b
  8951  00577E  39C0               	swapf	??_RADIO_DIO1& (0+255),w,b
  8952  005780  0B0F               	andlw	15
  8953  005782  0B03               	andlw	3
  8954  005784  6FC1               	movwf	RADIO_DIO1@dioMapping& (0+255),b
  8955                           
  8956                           ;radio_driver_SX1276.c: 1237: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  8957  005786  0E01               	movlw	1
  8958  005788  EC64  F02E         	call	_RADIO_RegisterRead
  8959  00578C  6FC0               	movwf	??_RADIO_DIO1& (0+255),b
  8960  00578E  AFC0               	btfss	??_RADIO_DIO1& (0+255),7,b
  8961  005790  D00D               	goto	l15326
  8962  005792  D003               	goto	l15322
  8963  005794                     l15318:
  8964                           
  8965                           ; BSR set to: 0
  8966                           ;radio_driver_SX1276.c: 1249: RADIO_UnhandledInterrupt(MODULATION_LORA);
  8967  005794  0E01               	movlw	1
  8968  005796  EFF2  F02E         	goto	_RADIO_UnhandledInterrupt
  8969  00579A                     l15322:
  8970                           
  8971                           ; BSR set to: 0
  8972  00579A  51C1               	movf	RADIO_DIO1@dioMapping& (0+255),w,b
  8973                           
  8974                           ; Switch size 1, requested type "space"
  8975                           ; Number of cases is 2, Range of values is 0 to 1
  8976                           ; switch strategies available:
  8977                           ; Name         Instructions Cycles
  8978                           ; simple_byte            7     4 (average)
  8979                           ;	Chosen strategy is simple_byte
  8980  00579C  E102 EF56  F02D    	bz	_RADIO_RxTimeout
  8981  0057A2  0A01               	xorlw	1	; case 1
  8982  0057A4  E102 EFFA  F02C    	bz	_RADIO_FHSSChangeChannel
  8983  0057AA  D7F4               	goto	l15318
  8984  0057AC                     l15326:
  8985                           
  8986                           ; BSR set to: 0
  8987  0057AC  51C1               	movf	RADIO_DIO1@dioMapping& (0+255),w,b
  8988                           
  8989                           ; Switch size 1, requested type "space"
  8990                           ; Number of cases is 1, Range of values is 0 to 0
  8991                           ; switch strategies available:
  8992                           ; Name         Instructions Cycles
  8993                           ; simple_byte            4     3 (average)
  8994                           ;	Chosen strategy is simple_byte
  8995  0057AE  0012               	return	
  8996  0057B0                     __end_of_RADIO_DIO1:
  8997                           	opt stack 0
  8998                           tosu	equ	0xFFF
  8999                           tosh	equ	0xFFE
  9000                           tosl	equ	0xFFD
  9001                           pclath	equ	0xFFA
  9002                           tblptru	equ	0xFF8
  9003                           tblptrh	equ	0xFF7
  9004                           tblptrl	equ	0xFF6
  9005                           tablat	equ	0xFF5
  9006                           prodh	equ	0xFF4
  9007                           prodl	equ	0xFF3
  9008                           intcon	equ	0xFF2
  9009                           indf0	equ	0xFEF
  9010                           postinc0	equ	0xFEE
  9011                           plusw0	equ	0xFEB
  9012                           fsr0h	equ	0xFEA
  9013                           fsr0l	equ	0xFE9
  9014                           wreg	equ	0xFE8
  9015                           postinc1	equ	0xFE6
  9016                           postdec1	equ	0xFE5
  9017                           plusw1	equ	0xFE3
  9018                           fsr1h	equ	0xFE2
  9019                           fsr1l	equ	0xFE1
  9020                           indf2	equ	0xFDF
  9021                           postinc2	equ	0xFDE
  9022                           postdec2	equ	0xFDD
  9023                           plusw2	equ	0xFDB
  9024                           fsr2h	equ	0xFDA
  9025                           fsr2l	equ	0xFD9
  9026                           status	equ	0xFD8
  9027                           
  9028 ;; *************** function _RADIO_RxTimeout *****************
  9029 ;; Defined at:
  9030 ;;		line 1066 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9031 ;; Parameters:    Size  Location     Type
  9032 ;;		None
  9033 ;; Auto vars:     Size  Location     Type
  9034 ;;		None
  9035 ;; Return value:  Size  Location     Type
  9036 ;;                  1    wreg      void 
  9037 ;; Registers used:
  9038 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tb
      +lptru, prodl, prodh, cstack
  9039 ;; Tracked objects:
  9040 ;;		On entry : 3E/0
  9041 ;;		On exit  : 3C/0
  9042 ;;		Unchanged: 0/0
  9043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9044 ;;      Params:         0       0       0       0       0       0       0       0       0
  9045 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9046 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9047 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9048 ;;Total ram usage:        0 bytes
  9049 ;; Hardware stack levels used:    1
  9050 ;; Hardware stack levels required when called:   16
  9051 ;; This function calls:
  9052 ;;		_LORAWAN_RxTimeout
  9053 ;;		_RADIO_RegisterWrite
  9054 ;;		_RADIO_WriteMode
  9055 ;;		_SwTimerStop
  9056 ;; This function is called by:
  9057 ;;		_RADIO_DIO1
  9058 ;; This function uses a non-reentrant model
  9059 ;;
  9060                           
  9061                           	psect	text47
  9062  005AAC                     __ptext47:
  9063                           	opt stack 0
  9064  005AAC                     _RADIO_RxTimeout:
  9065                           	opt stack 12
  9066                           
  9067                           ;radio_driver_SX1276.c: 1069: SwTimerStop(RadioConfiguration.watchdogTimerId);
  9068                           
  9069                           ;incstack = 0
  9070  005AAC  0101               	movlb	1	; () banked
  9071  005AAE  51A8               	movf	(_RadioConfiguration+41)& (0+255),w,b
  9072  005AB0  EC68  F030         	call	_SwTimerStop
  9073                           
  9074                           ; BSR set to: 0
  9075                           ;radio_driver_SX1276.c: 1070: RADIO_RegisterWrite(0x12, 1<<(7));
  9076  005AB4  0E80               	movlw	128
  9077  005AB6  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
  9078  005AB8  0E12               	movlw	18
  9079  005ABA  EC31  F02F         	call	_RADIO_RegisterWrite
  9080                           
  9081                           ;radio_driver_SX1276.c: 1072: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  9082  005ABE  D806               	call	PL78	;call to abstracted procedure
  9083  005AC0  ECDB  F01A         	call	_RADIO_WriteMode
  9084                           
  9085                           ;radio_driver_SX1276.c: 1073: RadioConfiguration.flags &= ~(1 << (1));
  9086  005AC4  0101               	movlb	1	; () banked
  9087  005AC6  93A2               	bcf	(_RadioConfiguration+35)& (0+255),1,b
  9088                           
  9089                           ; BSR set to: 1
  9090                           ;radio_driver_SX1276.c: 1075: LORAWAN_RxTimeout ();
  9091  005AC8  EF90  F00B         	goto	_LORAWAN_RxTimeout	;wreg free
  9092  005ACC                     __end_of_RADIO_RxTimeout:
  9093                           	opt stack 0
  9094  005ACC                     PL78:
  9095                           	opt stack 12
  9096  005ACC  C197  F065         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
  9097  005AD0  0E00               	movlw	0
  9098  005AD2  0100               	movlb	0	; () banked
  9099  005AD4  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
  9100  005AD6  0C00               	retlw	0
  9101  005AD8                     __end_ofPL78:
  9102                           	opt stack 0
  9103                           tosu	equ	0xFFF
  9104                           tosh	equ	0xFFE
  9105                           tosl	equ	0xFFD
  9106                           pclath	equ	0xFFA
  9107                           tblptru	equ	0xFF8
  9108                           tblptrh	equ	0xFF7
  9109                           tblptrl	equ	0xFF6
  9110                           tablat	equ	0xFF5
  9111                           prodh	equ	0xFF4
  9112                           prodl	equ	0xFF3
  9113                           intcon	equ	0xFF2
  9114                           indf0	equ	0xFEF
  9115                           postinc0	equ	0xFEE
  9116                           plusw0	equ	0xFEB
  9117                           fsr0h	equ	0xFEA
  9118                           fsr0l	equ	0xFE9
  9119                           wreg	equ	0xFE8
  9120                           postinc1	equ	0xFE6
  9121                           postdec1	equ	0xFE5
  9122                           plusw1	equ	0xFE3
  9123                           fsr1h	equ	0xFE2
  9124                           fsr1l	equ	0xFE1
  9125                           indf2	equ	0xFDF
  9126                           postinc2	equ	0xFDE
  9127                           postdec2	equ	0xFDD
  9128                           plusw2	equ	0xFDB
  9129                           fsr2h	equ	0xFDA
  9130                           fsr2l	equ	0xFD9
  9131                           status	equ	0xFD8
  9132                           
  9133 ;; *************** function _RADIO_FHSSChangeChannel *****************
  9134 ;; Defined at:
  9135 ;;		line 1158 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9136 ;; Parameters:    Size  Location     Type
  9137 ;;		None
  9138 ;; Auto vars:     Size  Location     Type
  9139 ;;  irqFlags        1    0        unsigned char 
  9140 ;; Return value:  Size  Location     Type
  9141 ;;                  1    wreg      void 
  9142 ;; Registers used:
  9143 ;;		wreg, status,2, status,0, cstack
  9144 ;; Tracked objects:
  9145 ;;		On entry : 3E/0
  9146 ;;		On exit  : 31/0
  9147 ;;		Unchanged: 0/0
  9148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9149 ;;      Params:         0       0       0       0       0       0       0       0       0
  9150 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9151 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9152 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9153 ;;Total ram usage:        0 bytes
  9154 ;; Hardware stack levels used:    1
  9155 ;; Hardware stack levels required when called:   11
  9156 ;; This function calls:
  9157 ;;		_RADIO_RegisterRead
  9158 ;;		_RADIO_RegisterWrite
  9159 ;;		_RADIO_WriteFrequency
  9160 ;; This function is called by:
  9161 ;;		_RADIO_DIO1
  9162 ;;		_RADIO_DIO2
  9163 ;; This function uses a non-reentrant model
  9164 ;;
  9165                           
  9166                           	psect	text48
  9167  0059F4                     __ptext48:
  9168                           	opt stack 0
  9169  0059F4                     _RADIO_FHSSChangeChannel:
  9170                           	opt stack 17
  9171                           
  9172                           ;radio_driver_SX1276.c: 1160: uint8_t irqFlags;
  9173                           ;radio_driver_SX1276.c: 1161: irqFlags = RADIO_RegisterRead(0x12);
  9174                           
  9175                           ;incstack = 0
  9176  0059F4  0E12               	movlw	18
  9177  0059F6  EC64  F02E         	call	_RADIO_RegisterRead
  9178                           
  9179                           ; BSR set to: 0
  9180                           ;radio_driver_SX1276.c: 1163: if ((0) != RadioConfiguration.frequencyHopPeriod)
  9181  0059FA  0101               	movlb	1	; () banked
  9182  0059FC  519D               	movf	(_RadioConfiguration+30)& (0+255),w,b
  9183  0059FE  119E               	iorwf	(_RadioConfiguration+31)& (0+255),w,b
  9184  005A00  E00A               	bz	l1829
  9185                           
  9186                           ; BSR set to: 1
  9187                           ;radio_driver_SX1276.c: 1164: {
  9188                           ;radio_driver_SX1276.c: 1165: if ((0) != RadioConfiguration.fhssNextFrequency)
  9189  005A02  51AE               	movf	(_RadioConfiguration+47)& (0+255),w,b
  9190  005A04  11AF               	iorwf	(_RadioConfiguration+48)& (0+255),w,b
  9191  005A06  E007               	bz	l1829
  9192                           
  9193                           ; BSR set to: 1
  9194                           ;radio_driver_SX1276.c: 1166: {
  9195                           ;radio_driver_SX1276.c: 1167: RADIO_WriteFrequency(RadioConfiguration.fhssNextFrequency(
      +                          ));
  9196  005A08  0100               	movlb	0	; () banked
  9197  005A0A  6B6D               	clrf	RADIO_WriteFrequency@frequency& (0+255),b
  9198  005A0C  6B6E               	clrf	(RADIO_WriteFrequency@frequency+1)& (0+255),b
  9199  005A0E  6B6F               	clrf	(RADIO_WriteFrequency@frequency+2)& (0+255),b
  9200  005A10  6B70               	clrf	(RADIO_WriteFrequency@frequency+3)& (0+255),b
  9201  005A12  ECB4  F01B         	call	_RADIO_WriteFrequency	;wreg free
  9202  005A16                     l1829:
  9203                           
  9204                           ;radio_driver_SX1276.c: 1168: }
  9205                           ;radio_driver_SX1276.c: 1169: }
  9206                           ;radio_driver_SX1276.c: 1172: RADIO_RegisterWrite(0x12, 1<<(1));
  9207  005A16  0E02               	movlw	2
  9208  005A18  0100               	movlb	0	; () banked
  9209  005A1A  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
  9210  005A1C  0E12               	movlw	18
  9211  005A1E  EF31  F02F         	goto	_RADIO_RegisterWrite
  9212  005A22                     __end_of_RADIO_FHSSChangeChannel:
  9213                           	opt stack 0
  9214                           tosu	equ	0xFFF
  9215                           tosh	equ	0xFFE
  9216                           tosl	equ	0xFFD
  9217                           pclath	equ	0xFFA
  9218                           tblptru	equ	0xFF8
  9219                           tblptrh	equ	0xFF7
  9220                           tblptrl	equ	0xFF6
  9221                           tablat	equ	0xFF5
  9222                           prodh	equ	0xFF4
  9223                           prodl	equ	0xFF3
  9224                           intcon	equ	0xFF2
  9225                           indf0	equ	0xFEF
  9226                           postinc0	equ	0xFEE
  9227                           plusw0	equ	0xFEB
  9228                           fsr0h	equ	0xFEA
  9229                           fsr0l	equ	0xFE9
  9230                           wreg	equ	0xFE8
  9231                           postinc1	equ	0xFE6
  9232                           postdec1	equ	0xFE5
  9233                           plusw1	equ	0xFE3
  9234                           fsr1h	equ	0xFE2
  9235                           fsr1l	equ	0xFE1
  9236                           indf2	equ	0xFDF
  9237                           postinc2	equ	0xFDE
  9238                           postdec2	equ	0xFDD
  9239                           plusw2	equ	0xFDB
  9240                           fsr2h	equ	0xFDA
  9241                           fsr2l	equ	0xFD9
  9242                           status	equ	0xFD8
  9243                           
  9244 ;; *************** function _RADIO_DIO0 *****************
  9245 ;; Defined at:
  9246 ;;		line 1176 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9247 ;; Parameters:    Size  Location     Type
  9248 ;;		None
  9249 ;; Auto vars:     Size  Location     Type
  9250 ;;  opMode          1  115[BANK1 ] unsigned char 
  9251 ;;  dioMapping      1  114[BANK1 ] unsigned char 
  9252 ;; Return value:  Size  Location     Type
  9253 ;;                  1    wreg      void 
  9254 ;; Registers used:
  9255 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+8, btemp+9, btem
      +p+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9256 ;; Tracked objects:
  9257 ;;		On entry : 3F/1
  9258 ;;		On exit  : 30/0
  9259 ;;		Unchanged: 0/0
  9260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9261 ;;      Params:         0       0       0       0       0       0       0       0       0
  9262 ;;      Locals:         0       0       2       0       0       0       0       0       0
  9263 ;;      Temps:          0       2       0       0       0       0       0       0       0
  9264 ;;      Totals:         0       2       2       0       0       0       0       0       0
  9265 ;;Total ram usage:        4 bytes
  9266 ;; Hardware stack levels used:    1
  9267 ;; Hardware stack levels required when called:   17
  9268 ;; This function calls:
  9269 ;;		_RADIO_FSKPacketSent
  9270 ;;		_RADIO_FSKPayloadReady
  9271 ;;		_RADIO_RegisterRead
  9272 ;;		_RADIO_RxDone
  9273 ;;		_RADIO_TxDone
  9274 ;;		_RADIO_UnhandledInterrupt
  9275 ;; This function is called by:
  9276 ;;		_LORAWAN_Mainloop
  9277 ;; This function uses a non-reentrant model
  9278 ;;
  9279                           
  9280                           	psect	text49
  9281  004BF2                     __ptext49:
  9282                           	opt stack 0
  9283  004BF2                     _RADIO_DIO0:
  9284                           	opt stack 12
  9285                           
  9286                           ; BSR set to: 1
  9287                           ;radio_driver_SX1276.c: 1179: uint8_t dioMapping;
  9288                           ;radio_driver_SX1276.c: 1180: uint8_t opMode;
  9289                           ;radio_driver_SX1276.c: 1181: dioMapping = (RADIO_RegisterRead(0x40) & 0xC0) >> (6);
  9290                           
  9291                           ;incstack = 0
  9292  004BF2  0E40               	movlw	64
  9293  004BF4  EC64  F02E         	call	_RADIO_RegisterRead
  9294  004BF8  6FFB               	movwf	??_RADIO_DIO0& (0+255),b
  9295  004BFA  0E06               	movlw	6
  9296  004BFC  6FFC               	movwf	(??_RADIO_DIO0+1)& (0+255),b
  9297  004BFE                     u18095:
  9298  004BFE  90D8               	bcf	status,0,c
  9299  004C00  33FB               	rrcf	??_RADIO_DIO0& (0+255),f,b
  9300  004C02  2FFC               	decfsz	(??_RADIO_DIO0+1)& (0+255),f,b
  9301  004C04  D7FC               	goto	u18095
  9302  004C06  51FB               	movf	??_RADIO_DIO0& (0+255),w,b
  9303  004C08  0B03               	andlw	3
  9304  004C0A  0101               	movlb	1	; () banked
  9305  004C0C  6F72               	movwf	RADIO_DIO0@dioMapping& (0+255),b
  9306                           
  9307                           ;radio_driver_SX1276.c: 1182: opMode = RADIO_RegisterRead(0x01);
  9308  004C0E  0E01               	movlw	1
  9309  004C10  EC64  F02E         	call	_RADIO_RegisterRead
  9310  004C14  0101               	movlb	1	; () banked
  9311  004C16  6F73               	movwf	RADIO_DIO0@opMode& (0+255),b
  9312                           
  9313                           ; BSR set to: 1
  9314                           ;radio_driver_SX1276.c: 1184: if ((opMode & 0x80) != 0)
  9315  004C18  AF73               	btfss	RADIO_DIO0@opMode& (0+255),7,b
  9316  004C1A  D01C               	goto	l15308
  9317  004C1C  D003               	goto	l15292
  9318  004C1E                     l15288:
  9319                           
  9320                           ; BSR set to: 1
  9321                           ;radio_driver_SX1276.c: 1196: RADIO_UnhandledInterrupt(MODULATION_LORA);
  9322  004C1E  0E01               	movlw	1
  9323  004C20  EFF2  F02E         	goto	_RADIO_UnhandledInterrupt
  9324  004C24                     l15292:
  9325                           
  9326                           ; BSR set to: 1
  9327  004C24  5172               	movf	RADIO_DIO0@dioMapping& (0+255),w,b
  9328                           
  9329                           ; Switch size 1, requested type "space"
  9330                           ; Number of cases is 2, Range of values is 0 to 1
  9331                           ; switch strategies available:
  9332                           ; Name         Instructions Cycles
  9333                           ; simple_byte            7     4 (average)
  9334                           ;	Chosen strategy is simple_byte
  9335  004C26  E102 EFD7  F01E    	bz	_RADIO_RxDone
  9336  004C2C  0A01               	xorlw	1	; case 1
  9337  004C2E  E102 EF82  F022    	bz	_RADIO_TxDone
  9338  004C34  D7F4               	goto	l15288
  9339  004C36                     l15294:
  9340                           
  9341                           ; BSR set to: 1
  9342                           ;radio_driver_SX1276.c: 1207: opMode &= 0x07;
  9343  004C36  0E07               	movlw	7
  9344  004C38  1773               	andwf	RADIO_DIO0@opMode& (0+255),f,b
  9345                           
  9346                           ;radio_driver_SX1276.c: 1208: if (MODE_TX == opMode)
  9347  004C3A  0E03               	movlw	3
  9348  004C3C  1973               	xorwf	RADIO_DIO0@opMode& (0+255),w,b
  9349  004C3E  E102               	bnz	l15298
  9350                           
  9351                           ; BSR set to: 1
  9352                           ;radio_driver_SX1276.c: 1209: {
  9353                           ;radio_driver_SX1276.c: 1211: RADIO_FSKPacketSent();
  9354  004C40  EF14  F019         	goto	_RADIO_FSKPacketSent	;wreg free
  9355  004C44                     l15298:
  9356                           
  9357                           ; BSR set to: 1
  9358                           ;radio_driver_SX1276.c: 1213: else if (MODE_RXCONT == opMode)
  9359  004C44  0E05               	movlw	5
  9360  004C46  1973               	xorwf	RADIO_DIO0@opMode& (0+255),w,b
  9361  004C48  E102               	bnz	l15304
  9362                           
  9363                           ; BSR set to: 1
  9364                           ;radio_driver_SX1276.c: 1214: {
  9365                           ;radio_driver_SX1276.c: 1216: RADIO_FSKPayloadReady();
  9366  004C4A  EFD1  F022         	goto	_RADIO_FSKPayloadReady	;wreg free
  9367  004C4E                     l15304:
  9368                           
  9369                           ; BSR set to: 1
  9370                           ;radio_driver_SX1276.c: 1224: RADIO_UnhandledInterrupt(MODULATION_FSK);
  9371  004C4E  0E00               	movlw	0
  9372  004C50  EFF2  F02E         	goto	_RADIO_UnhandledInterrupt
  9373  004C54                     l15308:
  9374                           
  9375                           ; BSR set to: 1
  9376  004C54  5172               	movf	RADIO_DIO0@dioMapping& (0+255),w,b
  9377                           
  9378                           ; Switch size 1, requested type "space"
  9379                           ; Number of cases is 1, Range of values is 0 to 0
  9380                           ; switch strategies available:
  9381                           ; Name         Instructions Cycles
  9382                           ; simple_byte            4     3 (average)
  9383                           ;	Chosen strategy is simple_byte
  9384  004C56  E0EF               	bz	l15294
  9385  004C58  D7FA               	goto	l15304
  9386  004C5A                     __end_of_RADIO_DIO0:
  9387                           	opt stack 0
  9388                           tosu	equ	0xFFF
  9389                           tosh	equ	0xFFE
  9390                           tosl	equ	0xFFD
  9391                           pclath	equ	0xFFA
  9392                           tblptru	equ	0xFF8
  9393                           tblptrh	equ	0xFF7
  9394                           tblptrl	equ	0xFF6
  9395                           tablat	equ	0xFF5
  9396                           prodh	equ	0xFF4
  9397                           prodl	equ	0xFF3
  9398                           intcon	equ	0xFF2
  9399                           indf0	equ	0xFEF
  9400                           postinc0	equ	0xFEE
  9401                           plusw0	equ	0xFEB
  9402                           fsr0h	equ	0xFEA
  9403                           fsr0l	equ	0xFE9
  9404                           wreg	equ	0xFE8
  9405                           postinc1	equ	0xFE6
  9406                           postdec1	equ	0xFE5
  9407                           plusw1	equ	0xFE3
  9408                           fsr1h	equ	0xFE2
  9409                           fsr1l	equ	0xFE1
  9410                           indf2	equ	0xFDF
  9411                           postinc2	equ	0xFDE
  9412                           postdec2	equ	0xFDD
  9413                           plusw2	equ	0xFDB
  9414                           fsr2h	equ	0xFDA
  9415                           fsr2l	equ	0xFD9
  9416                           status	equ	0xFD8
  9417                           
  9418 ;; *************** function _RADIO_UnhandledInterrupt *****************
  9419 ;; Defined at:
  9420 ;;		line 1139 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9421 ;; Parameters:    Size  Location     Type
  9422 ;;  modulation      1    wreg     enum E17148
  9423 ;; Auto vars:     Size  Location     Type
  9424 ;;  modulation      1    4[BANK0 ] enum E17148
  9425 ;; Return value:  Size  Location     Type
  9426 ;;                  1    wreg      void 
  9427 ;; Registers used:
  9428 ;;		wreg, status,2, status,0, cstack
  9429 ;; Tracked objects:
  9430 ;;		On entry : 3E/0
  9431 ;;		On exit  : 31/0
  9432 ;;		Unchanged: 0/0
  9433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9434 ;;      Params:         0       0       0       0       0       0       0       0       0
  9435 ;;      Locals:         0       1       0       0       0       0       0       0       0
  9436 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9437 ;;      Totals:         0       1       0       0       0       0       0       0       0
  9438 ;;Total ram usage:        1 bytes
  9439 ;; Hardware stack levels used:    1
  9440 ;; Hardware stack levels required when called:   10
  9441 ;; This function calls:
  9442 ;;		_RADIO_RegisterWrite
  9443 ;; This function is called by:
  9444 ;;		_RADIO_DIO0
  9445 ;;		_RADIO_DIO1
  9446 ;;		_RADIO_DIO2
  9447 ;;		_RADIO_DIO3
  9448 ;;		_RADIO_DIO4
  9449 ;;		_RADIO_DIO5
  9450 ;; This function uses a non-reentrant model
  9451 ;;
  9452                           
  9453                           	psect	text50
  9454  005DE4                     __ptext50:
  9455                           	opt stack 0
  9456  005DE4                     _RADIO_UnhandledInterrupt:
  9457                           	opt stack 18
  9458                           
  9459                           ;incstack = 0
  9460                           ;RADIO_UnhandledInterrupt@modulation stored from wreg
  9461  005DE4  0100               	movlb	0	; () banked
  9462  005DE6  6F64               	movwf	RADIO_UnhandledInterrupt@modulation& (0+255),b
  9463                           
  9464                           ;radio_driver_SX1276.c: 1144: if (MODULATION_LORA == modulation)
  9465  005DE8  0564               	decf	RADIO_UnhandledInterrupt@modulation& (0+255),w,b
  9466  005DEA  E104               	bnz	l15168
  9467                           
  9468                           ; BSR set to: 0
  9469                           ;radio_driver_SX1276.c: 1145: {
  9470                           ;radio_driver_SX1276.c: 1146: RADIO_RegisterWrite(0x12, 0xFF);
  9471  005DEC  6962               	setf	RADIO_RegisterWrite@value& (0+255),b
  9472  005DEE  0E12               	movlw	18
  9473  005DF0  EF31  F02F         	goto	_RADIO_RegisterWrite
  9474  005DF4                     l15168:
  9475                           
  9476                           ; BSR set to: 0
  9477                           ;radio_driver_SX1276.c: 1148: else
  9478                           ;radio_driver_SX1276.c: 1149: {
  9479                           ;radio_driver_SX1276.c: 1152: RADIO_RegisterWrite(0x3E, 0xFF);
  9480  005DF4  6962               	setf	RADIO_RegisterWrite@value& (0+255),b
  9481  005DF6  0E3E               	movlw	62
  9482  005DF8  EC31  F02F         	call	_RADIO_RegisterWrite
  9483                           
  9484                           ;radio_driver_SX1276.c: 1153: RADIO_RegisterWrite(0x3F, 0xFF);
  9485  005DFC  ECCC  F008         	call	PL444	;call to abstracted procedure
  9486  005E00  EF31  F02F         	goto	_RADIO_RegisterWrite
  9487  005E04                     __end_of_RADIO_UnhandledInterrupt:
  9488                           	opt stack 0
  9489                           tosu	equ	0xFFF
  9490                           tosh	equ	0xFFE
  9491                           tosl	equ	0xFFD
  9492                           pclath	equ	0xFFA
  9493                           tblptru	equ	0xFF8
  9494                           tblptrh	equ	0xFF7
  9495                           tblptrl	equ	0xFF6
  9496                           tablat	equ	0xFF5
  9497                           prodh	equ	0xFF4
  9498                           prodl	equ	0xFF3
  9499                           intcon	equ	0xFF2
  9500                           indf0	equ	0xFEF
  9501                           postinc0	equ	0xFEE
  9502                           plusw0	equ	0xFEB
  9503                           fsr0h	equ	0xFEA
  9504                           fsr0l	equ	0xFE9
  9505                           wreg	equ	0xFE8
  9506                           postinc1	equ	0xFE6
  9507                           postdec1	equ	0xFE5
  9508                           plusw1	equ	0xFE3
  9509                           fsr1h	equ	0xFE2
  9510                           fsr1l	equ	0xFE1
  9511                           indf2	equ	0xFDF
  9512                           postinc2	equ	0xFDE
  9513                           postdec2	equ	0xFDD
  9514                           plusw2	equ	0xFDB
  9515                           fsr2h	equ	0xFDA
  9516                           fsr2l	equ	0xFD9
  9517                           status	equ	0xFD8
  9518                           
  9519 ;; *************** function _RADIO_TxDone *****************
  9520 ;; Defined at:
  9521 ;;		line 1078 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9522 ;; Parameters:    Size  Location     Type
  9523 ;;		None
  9524 ;; Auto vars:     Size  Location     Type
  9525 ;;  timeOnAir       4  116[BANK0 ] unsigned long 
  9526 ;; Return value:  Size  Location     Type
  9527 ;;                  1    wreg      void 
  9528 ;; Registers used:
  9529 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9530 ;; Tracked objects:
  9531 ;;		On entry : 3F/1
  9532 ;;		On exit  : 3C/0
  9533 ;;		Unchanged: 0/0
  9534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9535 ;;      Params:         0       0       0       0       0       0       0       0       0
  9536 ;;      Locals:         0       8       0       0       0       0       0       0       0
  9537 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9538 ;;      Totals:         0       8       0       0       0       0       0       0       0
  9539 ;;Total ram usage:        8 bytes
  9540 ;; Hardware stack levels used:    1
  9541 ;; Hardware stack levels required when called:   15
  9542 ;; This function calls:
  9543 ;;		_LORAWAN_TxDone
  9544 ;;		_RADIO_RegisterWrite
  9545 ;;		_RADIO_WriteMode
  9546 ;;		_SwTimerReadValue
  9547 ;;		_SwTimerStop
  9548 ;;		___lmul
  9549 ;; This function is called by:
  9550 ;;		_RADIO_DIO0
  9551 ;; This function uses a non-reentrant model
  9552 ;;
  9553                           
  9554                           	psect	text51
  9555  004504                     __ptext51:
  9556                           	opt stack 0
  9557  004504                     _RADIO_TxDone:
  9558                           	opt stack 13
  9559                           
  9560                           ; BSR set to: 1
  9561                           ;radio_driver_SX1276.c: 1080: uint32_t timeOnAir;
  9562                           ;radio_driver_SX1276.c: 1082: SwTimerStop(RadioConfiguration.watchdogTimerId);
  9563                           
  9564                           ;incstack = 0
  9565  004504  51A8               	movf	(_RadioConfiguration+41)& (0+255),w,b
  9566  004506  EC68  F030         	call	_SwTimerStop
  9567                           
  9568                           ; BSR set to: 0
  9569                           ;radio_driver_SX1276.c: 1083: RADIO_RegisterWrite(0x12, 1<<(3));
  9570  00450A  0E08               	movlw	8
  9571  00450C  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
  9572  00450E  0E12               	movlw	18
  9573  004510  EC31  F02F         	call	_RADIO_RegisterWrite
  9574                           
  9575                           ;radio_driver_SX1276.c: 1084: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  9576  004514  EC66  F02D         	call	PL78	;call to abstracted procedure
  9577  004518  ECDB  F01A         	call	_RADIO_WriteMode
  9578                           
  9579                           ;radio_driver_SX1276.c: 1085: RadioConfiguration.flags &= ~(1 << (0));
  9580  00451C  0101               	movlb	1	; () banked
  9581  00451E  91A2               	bcf	(_RadioConfiguration+35)& (0+255),0,b
  9582                           
  9583                           ; BSR set to: 1
  9584                           ;radio_driver_SX1276.c: 1086: if ((RadioConfiguration.flags & (1 << (4))) == 0)
  9585  004520  B9A2               	btfsc	(_RadioConfiguration+35)& (0+255),4,b
  9586  004522  0012               	return	
  9587                           
  9588                           ; BSR set to: 1
  9589                           ;radio_driver_SX1276.c: 1087: {
  9590                           ;radio_driver_SX1276.c: 1088: timeOnAir = ((uint32_t)20000) - ((SwTimerReadValue(RadioCo
      +                          nfiguration.timeOnAirTimerId)) < 0x00DFAC1FUL ? ( (((uint32_t)(SwTimerReadValue(RadioCon
      +                          figuration.timeOnAirTimerId))) * 125UL) >> (12) ) : ( (((uint32_t)(SwTimerReadValue(Radi
      +                          oConfiguration.t
  9591  004524  51A6               	movf	(_RadioConfiguration+39)& (0+255),w,b
  9592  004526  EC98  F02C         	call	_SwTimerReadValue
  9593  00452A  518A               	movf	(?_SwTimerReadValue+3)& (0+255),w,b
  9594  00452C  E103               	bnz	u17880
  9595  00452E  EC7C  F019         	call	PL294	;call to abstracted procedure
  9596  004532  E30F               	bnc	l15134
  9597  004534                     u17880:
  9598                           
  9599                           ; BSR set to: 0
  9600  004534  0101               	movlb	1	; () banked
  9601  004536  51A6               	movf	(_RadioConfiguration+39)& (0+255),w,b
  9602  004538  EC98  F02C         	call	_SwTimerReadValue
  9603  00453C  0E0D               	movlw	13
  9604  00453E  D002               	goto	u17890
  9605  004540                     u17895:
  9606  004540  EC83  F019         	call	PL330	;call to abstracted procedure
  9607  004544                     u17890:
  9608  004544  2EE8               	decfsz	wreg,f,c
  9609  004546  D7FC               	goto	u17895
  9610  004548  EC63  F019         	call	PL36	;call to abstracted procedure
  9611  00454C  EC25  F02A         	call	___lmul	;wreg free
  9612  004550  D00E               	goto	L5
  9613  004552                     l15134:
  9614                           
  9615                           ; BSR set to: 0
  9616  004552  0101               	movlb	1	; () banked
  9617  004554  51A6               	movf	(_RadioConfiguration+39)& (0+255),w,b
  9618  004556  EC98  F02C         	call	_SwTimerReadValue
  9619  00455A  EC63  F019         	call	PL36	;call to abstracted procedure
  9620  00455E  EC25  F02A         	call	___lmul	;wreg free
  9621  004562  0E0D               	movlw	13
  9622  004564  D002               	goto	u17900
  9623  004566                     u17905:
  9624  004566  EC71  F019         	call	PL242	;call to abstracted procedure
  9625  00456A                     u17900:
  9626  00456A  2EE8               	decfsz	wreg,f,c
  9627  00456C  D7FC               	goto	u17905
  9628  00456E                     L5:
  9629  00456E  C090  F0D8         	movff	?___lmul,_RADIO_TxDone$2504
  9630  004572  C091  F0D9         	movff	?___lmul+1,_RADIO_TxDone$2504+1
  9631  004576  C092  F0DA         	movff	?___lmul+2,_RADIO_TxDone$2504+2
  9632  00457A  C093  F0DB         	movff	?___lmul+3,_RADIO_TxDone$2504+3
  9633                           
  9634                           ; BSR set to: 0
  9635  00457E  51D8               	movf	_RADIO_TxDone$2504& (0+255),w,b
  9636  004580  0820               	sublw	32
  9637  004582  6FD4               	movwf	RADIO_TxDone@timeOnAir& (0+255),b
  9638  004584  0E4E               	movlw	78
  9639  004586  55D9               	subfwb	(_RADIO_TxDone$2504+1)& (0+255),w,b
  9640  004588  6FD5               	movwf	(RADIO_TxDone@timeOnAir+1)& (0+255),b
  9641  00458A  0E00               	movlw	0
  9642  00458C  55DA               	subfwb	(_RADIO_TxDone$2504+2)& (0+255),w,b
  9643  00458E  6FD6               	movwf	(RADIO_TxDone@timeOnAir+2)& (0+255),b
  9644  004590  0E00               	movlw	0
  9645  004592  55DB               	subfwb	(_RADIO_TxDone$2504+3)& (0+255),w,b
  9646  004594  6FD7               	movwf	(RADIO_TxDone@timeOnAir+3)& (0+255),b
  9647                           
  9648                           ; BSR set to: 0
  9649                           ;radio_driver_SX1276.c: 1089: LORAWAN_TxDone((uint16_t)timeOnAir);
  9650  004596  C0D4  F0B0         	movff	RADIO_TxDone@timeOnAir,LORAWAN_TxDone@timeOnAir
  9651  00459A  C0D5  F0B1         	movff	RADIO_TxDone@timeOnAir+1,LORAWAN_TxDone@timeOnAir+1
  9652  00459E  EF5E  F004         	goto	_LORAWAN_TxDone	;wreg free
  9653  0045A2                     __end_of_RADIO_TxDone:
  9654                           	opt stack 0
  9655                           tosu	equ	0xFFF
  9656                           tosh	equ	0xFFE
  9657                           tosl	equ	0xFFD
  9658                           pclath	equ	0xFFA
  9659                           tblptru	equ	0xFF8
  9660                           tblptrh	equ	0xFF7
  9661                           tblptrl	equ	0xFF6
  9662                           tablat	equ	0xFF5
  9663                           prodh	equ	0xFF4
  9664                           prodl	equ	0xFF3
  9665                           intcon	equ	0xFF2
  9666                           indf0	equ	0xFEF
  9667                           postinc0	equ	0xFEE
  9668                           plusw0	equ	0xFEB
  9669                           fsr0h	equ	0xFEA
  9670                           fsr0l	equ	0xFE9
  9671                           wreg	equ	0xFE8
  9672                           postinc1	equ	0xFE6
  9673                           postdec1	equ	0xFE5
  9674                           plusw1	equ	0xFE3
  9675                           fsr1h	equ	0xFE2
  9676                           fsr1l	equ	0xFE1
  9677                           indf2	equ	0xFDF
  9678                           postinc2	equ	0xFDE
  9679                           postdec2	equ	0xFDD
  9680                           plusw2	equ	0xFDB
  9681                           fsr2h	equ	0xFDA
  9682                           fsr2l	equ	0xFD9
  9683                           status	equ	0xFD8
  9684                           
  9685 ;; *************** function _RADIO_RxDone *****************
  9686 ;; Defined at:
  9687 ;;		line 961 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9688 ;; Parameters:    Size  Location     Type
  9689 ;;		None
  9690 ;; Auto vars:     Size  Location     Type
  9691 ;;  i               1  154[BANK0 ] unsigned char 
  9692 ;;  irqFlags        1  153[BANK0 ] unsigned char 
  9693 ;; Return value:  Size  Location     Type
  9694 ;;                  1    wreg      void 
  9695 ;; Registers used:
  9696 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+8, btemp+9, btemp+10, btemp+11, to
      +sl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9697 ;; Tracked objects:
  9698 ;;		On entry : 3F/1
  9699 ;;		On exit  : 3C/0
  9700 ;;		Unchanged: 0/0
  9701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9702 ;;      Params:         0       0       0       0       0       0       0       0       0
  9703 ;;      Locals:         0       2       0       0       0       0       0       0       0
  9704 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9705 ;;      Totals:         0       2       0       0       0       0       0       0       0
  9706 ;;Total ram usage:        2 bytes
  9707 ;; Hardware stack levels used:    1
  9708 ;; Hardware stack levels required when called:   16
  9709 ;; This function calls:
  9710 ;;		_HALSPICSAssert
  9711 ;;		_HALSPICSDeassert
  9712 ;;		_HALSPISend
  9713 ;;		_LORAWAN_RxDone
  9714 ;;		_RADIO_RegisterRead
  9715 ;;		_RADIO_RegisterWrite
  9716 ;;		_RADIO_WriteMode
  9717 ;;		_SwTimerStop
  9718 ;;		___abdiv
  9719 ;; This function is called by:
  9720 ;;		_RADIO_DIO0
  9721 ;; This function uses a non-reentrant model
  9722 ;;
  9723                           
  9724                           	psect	text52
  9725  003DAE                     __ptext52:
  9726                           	opt stack 0
  9727  003DAE                     _RADIO_RxDone:
  9728                           	opt stack 12
  9729                           
  9730                           ; BSR set to: 1
  9731                           ;radio_driver_SX1276.c: 963: uint8_t i, irqFlags;
  9732                           ;radio_driver_SX1276.c: 964: irqFlags = RADIO_RegisterRead(0x12);
  9733                           
  9734                           ;incstack = 0
  9735  003DAE  0E12               	movlw	18
  9736  003DB0  EC64  F02E         	call	_RADIO_RegisterRead
  9737  003DB4  6FF9               	movwf	RADIO_RxDone@irqFlags& (0+255),b
  9738                           
  9739                           ;radio_driver_SX1276.c: 967: RADIO_RegisterWrite(0x12, (1<<(6)) | (1<<(5)) | (1<<(4)));
  9740  003DB6  0E70               	movlw	112
  9741  003DB8  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
  9742  003DBA  0E12               	movlw	18
  9743  003DBC  EC31  F02F         	call	_RADIO_RegisterWrite
  9744                           
  9745                           ;radio_driver_SX1276.c: 968: if (((1<<(6)) | (1<<(4))) == (irqFlags & ((1<<(6)) | (1<<(4
      +                          )))))
  9746  003DC0  0100               	movlb	0	; () banked
  9747  003DC2  51F9               	movf	RADIO_RxDone@irqFlags& (0+255),w,b
  9748  003DC4  0B50               	andlw	80
  9749  003DC6  0A50               	xorlw	80
  9750  003DC8  A4D8               	btfss	status,2,c
  9751  003DCA  0012               	return	
  9752                           
  9753                           ; BSR set to: 0
  9754                           ;radio_driver_SX1276.c: 969: {
  9755                           ;radio_driver_SX1276.c: 971: SwTimerStop(RadioConfiguration.watchdogTimerId);
  9756  003DCC  0101               	movlb	1	; () banked
  9757  003DCE  51A8               	movf	(_RadioConfiguration+41)& (0+255),w,b
  9758  003DD0  EC68  F030         	call	_SwTimerStop
  9759                           
  9760                           ; BSR set to: 0
  9761                           ;radio_driver_SX1276.c: 974: i = RADIO_RegisterRead(0x1C);
  9762  003DD4  0E1C               	movlw	28
  9763  003DD6  EC64  F02E         	call	_RADIO_RegisterRead
  9764  003DDA  6FFA               	movwf	RADIO_RxDone@i& (0+255),b
  9765                           
  9766                           ; BSR set to: 0
  9767                           ;radio_driver_SX1276.c: 975: if ((0 == RadioConfiguration.crcOn) || ((0 == (irqFlags & (
      +                          1<<(5)))) && (0 != (i & (1<<(6))))))
  9768  003DDC  0101               	movlb	1	; () banked
  9769  003DDE  519B               	movf	(_RadioConfiguration+28)& (0+255),w,b
  9770  003DE0  E004               	bz	l15036
  9771                           
  9772                           ; BSR set to: 1
  9773  003DE2  0100               	movlb	0	; () banked
  9774  003DE4  ABF9               	btfss	RADIO_RxDone@irqFlags& (0+255),5,b
  9775                           
  9776                           ; BSR set to: 0
  9777  003DE6  ADFA               	btfss	RADIO_RxDone@i& (0+255),6,b
  9778  003DE8  D031               	goto	l15058
  9779  003DEA                     l15036:
  9780                           
  9781                           ;radio_driver_SX1276.c: 976: {
  9782                           ;radio_driver_SX1276.c: 984: RadioConfiguration.dataBufferLen = RADIO_RegisterRead(0x13)
      +                          ;
  9783  003DEA  0E13               	movlw	19
  9784  003DEC  EC64  F02E         	call	_RADIO_RegisterRead
  9785  003DF0  0101               	movlb	1	; () banked
  9786  003DF2  6FA3               	movwf	(_RadioConfiguration+36)& (0+255),b
  9787                           
  9788                           ;radio_driver_SX1276.c: 985: RADIO_RegisterWrite(0x0D, 0x00);
  9789  003DF4  ECCF  F008         	call	PL456	;call to abstracted procedure
  9790  003DF8  EC31  F02F         	call	_RADIO_RegisterWrite
  9791                           
  9792                           ;radio_driver_SX1276.c: 987: HALSPICSAssert();
  9793  003DFC  EC24  F031         	call	_HALSPICSAssert	;wreg free
  9794                           
  9795                           ;radio_driver_SX1276.c: 988: HALSPISend(0x00);
  9796  003E00  0E00               	movlw	0
  9797  003E02  ECDC  F030         	call	_HALSPISend
  9798                           
  9799                           ; BSR set to: 14
  9800                           ;radio_driver_SX1276.c: 989: for (i = 0; i < RadioConfiguration.dataBufferLen; i++)
  9801  003E06  0100               	movlb	0	; () banked
  9802  003E08  6BFA               	clrf	RADIO_RxDone@i& (0+255),b
  9803  003E0A  D008               	goto	l15048
  9804  003E0C                     l15044:
  9805                           
  9806                           ; BSR set to: 0
  9807                           ;radio_driver_SX1276.c: 990: {
  9808                           ;radio_driver_SX1276.c: 991: RadioConfiguration.dataBuffer[i] = HALSPISend(0xFF);
  9809  003E0C  51FA               	movf	RADIO_RxDone@i& (0+255),w,b
  9810  003E0E  EC12  F023         	call	PL254	;call to abstracted procedure
  9811  003E12  ECDC  F030         	call	_HALSPISend
  9812  003E16  6EDF               	movwf	indf2,c
  9813                           
  9814                           ; BSR set to: 14
  9815  003E18  0100               	movlb	0	; () banked
  9816  003E1A  2BFA               	incf	RADIO_RxDone@i& (0+255),f,b
  9817  003E1C                     l15048:
  9818                           
  9819                           ; BSR set to: 0
  9820  003E1C  0101               	movlb	1	; () banked
  9821  003E1E  51A3               	movf	(_RadioConfiguration+36)& (0+255),w,b
  9822  003E20  0100               	movlb	0	; () banked
  9823  003E22  5DFA               	subwf	RADIO_RxDone@i& (0+255),w,b
  9824  003E24  E3F3               	bnc	l15044
  9825                           
  9826                           ; BSR set to: 0
  9827                           ;radio_driver_SX1276.c: 992: }
  9828                           ;radio_driver_SX1276.c: 993: HALSPICSDeassert();
  9829  003E26  EC22  F031         	call	_HALSPICSDeassert	;wreg free
  9830                           
  9831                           ;radio_driver_SX1276.c: 994: RadioConfiguration.flags |= (1 << (2));
  9832  003E2A  0101               	movlb	1	; () banked
  9833  003E2C  85A2               	bsf	(_RadioConfiguration+35)& (0+255),2,b
  9834                           
  9835                           ; BSR set to: 1
  9836                           ;radio_driver_SX1276.c: 996: RadioConfiguration.packetSNR = RADIO_RegisterRead(0x19);
  9837  003E2E  0E19               	movlw	25
  9838  003E30  EC64  F02E         	call	_RADIO_RegisterRead
  9839  003E34  0101               	movlb	1	; () banked
  9840  003E36  6FB1               	movwf	(_RadioConfiguration+50)& (0+255),b
  9841                           
  9842                           ; BSR set to: 1
  9843                           ;radio_driver_SX1276.c: 997: RadioConfiguration.packetSNR /= (int8_t)4;
  9844  003E38  0E04               	movlw	4
  9845  003E3A  0100               	movlb	0	; () banked
  9846  003E3C  6F60               	movwf	___abdiv@divisor& (0+255),b
  9847  003E3E  0101               	movlb	1	; () banked
  9848  003E40  51B1               	movf	(_RadioConfiguration+50)& (0+255),w,b
  9849  003E42  ECE9  F028         	call	___abdiv
  9850  003E46  0101               	movlb	1	; () banked
  9851  003E48  6FB1               	movwf	(_RadioConfiguration+50)& (0+255),b
  9852                           
  9853                           ;radio_driver_SX1276.c: 998: }
  9854  003E4A  D002               	goto	l15060
  9855  003E4C                     l15058:
  9856                           
  9857                           ; BSR set to: 0
  9858                           ;radio_driver_SX1276.c: 999: else
  9859                           ;radio_driver_SX1276.c: 1000: {
  9860                           ;radio_driver_SX1276.c: 1002: RadioConfiguration.flags |= (1 << (3));
  9861  003E4C  0101               	movlb	1	; () banked
  9862  003E4E  87A2               	bsf	(_RadioConfiguration+35)& (0+255),3,b
  9863  003E50                     l15060:
  9864                           
  9865                           ; BSR set to: 1
  9866                           ;radio_driver_SX1276.c: 1003: }
  9867                           ;radio_driver_SX1276.c: 1004: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  9868  003E50  EC66  F02D         	call	PL78	;call to abstracted procedure
  9869  003E54  ECDB  F01A         	call	_RADIO_WriteMode
  9870                           
  9871                           ;radio_driver_SX1276.c: 1005: RadioConfiguration.flags &= ~(1 << (1));
  9872  003E58  0101               	movlb	1	; () banked
  9873  003E5A  93A2               	bcf	(_RadioConfiguration+35)& (0+255),1,b
  9874                           
  9875                           ; BSR set to: 1
  9876                           ;radio_driver_SX1276.c: 1006: LORAWAN_RxDone(RadioConfiguration.dataBuffer, RadioConfigu
      +                          ration.dataBufferLen);
  9877  003E5C  EC19  F023         	call	PL308	;call to abstracted procedure
  9878  003E60  EF4B  F000         	goto	_LORAWAN_RxDone	;wreg free
  9879  003E64                     __end_of_RADIO_RxDone:
  9880                           	opt stack 0
  9881                           tosu	equ	0xFFF
  9882                           tosh	equ	0xFFE
  9883                           tosl	equ	0xFFD
  9884                           pclath	equ	0xFFA
  9885                           tblptru	equ	0xFF8
  9886                           tblptrh	equ	0xFF7
  9887                           tblptrl	equ	0xFF6
  9888                           tablat	equ	0xFF5
  9889                           prodh	equ	0xFF4
  9890                           prodl	equ	0xFF3
  9891                           intcon	equ	0xFF2
  9892                           indf0	equ	0xFEF
  9893                           postinc0	equ	0xFEE
  9894                           plusw0	equ	0xFEB
  9895                           fsr0h	equ	0xFEA
  9896                           fsr0l	equ	0xFE9
  9897                           wreg	equ	0xFE8
  9898                           postinc1	equ	0xFE6
  9899                           postdec1	equ	0xFE5
  9900                           plusw1	equ	0xFE3
  9901                           fsr1h	equ	0xFE2
  9902                           fsr1l	equ	0xFE1
  9903                           indf2	equ	0xFDF
  9904                           postinc2	equ	0xFDE
  9905                           postdec2	equ	0xFDD
  9906                           plusw2	equ	0xFDB
  9907                           fsr2h	equ	0xFDA
  9908                           fsr2l	equ	0xFD9
  9909                           status	equ	0xFD8
  9910                           
  9911 ;; *************** function ___abdiv *****************
  9912 ;; Defined at:
  9913 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\abdiv.c"
  9914 ;; Parameters:    Size  Location     Type
  9915 ;;  dividend        1    wreg     char 
  9916 ;;  divisor         1    0[BANK0 ] char 
  9917 ;; Auto vars:     Size  Location     Type
  9918 ;;  dividend        1    4[BANK0 ] char 
  9919 ;;  quotient        1    3[BANK0 ] char 
  9920 ;;  sign            1    2[BANK0 ] unsigned char 
  9921 ;;  counter         1    1[BANK0 ] unsigned char 
  9922 ;; Return value:  Size  Location     Type
  9923 ;;                  1    wreg      char 
  9924 ;; Registers used:
  9925 ;;		wreg, status,2, status,0
  9926 ;; Tracked objects:
  9927 ;;		On entry : 3F/1
  9928 ;;		On exit  : 3F/0
  9929 ;;		Unchanged: 0/0
  9930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9931 ;;      Params:         0       1       0       0       0       0       0       0       0
  9932 ;;      Locals:         0       4       0       0       0       0       0       0       0
  9933 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9934 ;;      Totals:         0       5       0       0       0       0       0       0       0
  9935 ;;Total ram usage:        5 bytes
  9936 ;; Hardware stack levels used:    1
  9937 ;; Hardware stack levels required when called:    7
  9938 ;; This function calls:
  9939 ;;		Nothing
  9940 ;; This function is called by:
  9941 ;;		_RADIO_RxDone
  9942 ;; This function uses a non-reentrant model
  9943 ;;
  9944                           
  9945                           	psect	text53
  9946  0051D2                     __ptext53:
  9947                           	opt stack 0
  9948  0051D2                     ___abdiv:
  9949                           	opt stack 20
  9950                           
  9951                           ;incstack = 0
  9952                           ;___abdiv@dividend stored from wreg
  9953  0051D2  0100               	movlb	0	; () banked
  9954  0051D4  6F64               	movwf	___abdiv@dividend& (0+255),b
  9955  0051D6  6B62               	clrf	___abdiv@sign& (0+255),b
  9956                           
  9957                           ; BSR set to: 0
  9958  0051D8  AF60               	btfss	___abdiv@divisor& (0+255),7,b
  9959  0051DA  D003               	goto	l14704
  9960                           
  9961                           ; BSR set to: 0
  9962  0051DC  6D60               	negf	___abdiv@divisor& (0+255),b
  9963                           
  9964                           ; BSR set to: 0
  9965  0051DE  0E01               	movlw	1
  9966  0051E0  6F62               	movwf	___abdiv@sign& (0+255),b
  9967  0051E2                     l14704:
  9968                           
  9969                           ; BSR set to: 0
  9970  0051E2  AF64               	btfss	___abdiv@dividend& (0+255),7,b
  9971  0051E4  D003               	goto	l14710
  9972                           
  9973                           ; BSR set to: 0
  9974  0051E6  6D64               	negf	___abdiv@dividend& (0+255),b
  9975                           
  9976                           ; BSR set to: 0
  9977  0051E8  0E01               	movlw	1
  9978  0051EA  1B62               	xorwf	___abdiv@sign& (0+255),f,b
  9979  0051EC                     l14710:
  9980                           
  9981                           ; BSR set to: 0
  9982  0051EC  6B63               	clrf	___abdiv@quotient& (0+255),b
  9983                           
  9984                           ; BSR set to: 0
  9985  0051EE  5160               	movf	___abdiv@divisor& (0+255),w,b
  9986  0051F0  E014               	bz	l14732
  9987                           
  9988                           ; BSR set to: 0
  9989  0051F2  0E01               	movlw	1
  9990  0051F4  6F61               	movwf	___abdiv@counter& (0+255),b
  9991  0051F6  D003               	goto	l14720
  9992  0051F8                     l14716:
  9993                           
  9994                           ; BSR set to: 0
  9995  0051F8  90D8               	bcf	status,0,c
  9996  0051FA  3760               	rlcf	___abdiv@divisor& (0+255),f,b
  9997                           
  9998                           ; BSR set to: 0
  9999  0051FC  2B61               	incf	___abdiv@counter& (0+255),f,b
 10000  0051FE                     l14720:
 10001                           
 10002                           ; BSR set to: 0
 10003  0051FE  AF60               	btfss	___abdiv@divisor& (0+255),7,b
 10004  005200  D7FB               	goto	l14716
 10005  005202                     l14722:
 10006                           
 10007                           ; BSR set to: 0
 10008  005202  90D8               	bcf	status,0,c
 10009  005204  3763               	rlcf	___abdiv@quotient& (0+255),f,b
 10010  005206  5160               	movf	___abdiv@divisor& (0+255),w,b
 10011  005208  5D64               	subwf	___abdiv@dividend& (0+255),w,b
 10012  00520A  E303               	bnc	l14728
 10013                           
 10014                           ; BSR set to: 0
 10015  00520C  5160               	movf	___abdiv@divisor& (0+255),w,b
 10016  00520E  5F64               	subwf	___abdiv@dividend& (0+255),f,b
 10017                           
 10018                           ; BSR set to: 0
 10019  005210  8163               	bsf	___abdiv@quotient& (0+255),0,b
 10020  005212                     l14728:
 10021                           
 10022                           ; BSR set to: 0
 10023  005212  90D8               	bcf	status,0,c
 10024  005214  3360               	rrcf	___abdiv@divisor& (0+255),f,b
 10025                           
 10026                           ; BSR set to: 0
 10027  005216  2F61               	decfsz	___abdiv@counter& (0+255),f,b
 10028  005218  D7F4               	goto	l14722
 10029  00521A                     l14732:
 10030                           
 10031                           ; BSR set to: 0
 10032  00521A  5162               	movf	___abdiv@sign& (0+255),w,b
 10033  00521C  E001               	bz	l14736
 10034                           
 10035                           ; BSR set to: 0
 10036  00521E  6D63               	negf	___abdiv@quotient& (0+255),b
 10037  005220                     l14736:
 10038                           
 10039                           ; BSR set to: 0
 10040  005220  5163               	movf	___abdiv@quotient& (0+255),w,b
 10041                           
 10042                           ; BSR set to: 0
 10043  005222  0012               	return		;funcret
 10044  005224                     __end_of___abdiv:
 10045                           	opt stack 0
 10046                           tosu	equ	0xFFF
 10047                           tosh	equ	0xFFE
 10048                           tosl	equ	0xFFD
 10049                           pclath	equ	0xFFA
 10050                           tblptru	equ	0xFF8
 10051                           tblptrh	equ	0xFF7
 10052                           tblptrl	equ	0xFF6
 10053                           tablat	equ	0xFF5
 10054                           prodh	equ	0xFF4
 10055                           prodl	equ	0xFF3
 10056                           intcon	equ	0xFF2
 10057                           indf0	equ	0xFEF
 10058                           postinc0	equ	0xFEE
 10059                           plusw0	equ	0xFEB
 10060                           fsr0h	equ	0xFEA
 10061                           fsr0l	equ	0xFE9
 10062                           wreg	equ	0xFE8
 10063                           postinc1	equ	0xFE6
 10064                           postdec1	equ	0xFE5
 10065                           plusw1	equ	0xFE3
 10066                           fsr1h	equ	0xFE2
 10067                           fsr1l	equ	0xFE1
 10068                           indf2	equ	0xFDF
 10069                           postinc2	equ	0xFDE
 10070                           postdec2	equ	0xFDD
 10071                           plusw2	equ	0xFDB
 10072                           fsr2h	equ	0xFDA
 10073                           fsr2l	equ	0xFD9
 10074                           status	equ	0xFD8
 10075                           
 10076 ;; *************** function _RADIO_FSKPayloadReady *****************
 10077 ;; Defined at:
 10078 ;;		line 1010 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 10079 ;; Parameters:    Size  Location     Type
 10080 ;;		None
 10081 ;; Auto vars:     Size  Location     Type
 10082 ;;  i               1  154[BANK0 ] unsigned char 
 10083 ;;  irqFlags        1  153[BANK0 ] unsigned char 
 10084 ;; Return value:  Size  Location     Type
 10085 ;;                  1    wreg      void 
 10086 ;; Registers used:
 10087 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+8, btemp+9, btem
      +p+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10088 ;; Tracked objects:
 10089 ;;		On entry : 3F/1
 10090 ;;		On exit  : 3C/0
 10091 ;;		Unchanged: 0/0
 10092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10093 ;;      Params:         0       0       0       0       0       0       0       0       0
 10094 ;;      Locals:         0       2       0       0       0       0       0       0       0
 10095 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10096 ;;      Totals:         0       2       0       0       0       0       0       0       0
 10097 ;;Total ram usage:        2 bytes
 10098 ;; Hardware stack levels used:    1
 10099 ;; Hardware stack levels required when called:   16
 10100 ;; This function calls:
 10101 ;;		_HALSPICSAssert
 10102 ;;		_HALSPICSDeassert
 10103 ;;		_HALSPISend
 10104 ;;		_LORAWAN_RxDone
 10105 ;;		_LORAWAN_RxTimeout
 10106 ;;		_RADIO_RegisterRead
 10107 ;;		_RADIO_WriteMode
 10108 ;;		_SwTimerStop
 10109 ;; This function is called by:
 10110 ;;		_RADIO_DIO0
 10111 ;; This function uses a non-reentrant model
 10112 ;;
 10113                           
 10114                           	psect	text54
 10115  0045A2                     __ptext54:
 10116                           	opt stack 0
 10117  0045A2                     _RADIO_FSKPayloadReady:
 10118                           	opt stack 12
 10119                           
 10120                           ; BSR set to: 1
 10121                           ;radio_driver_SX1276.c: 1012: uint8_t irqFlags;
 10122                           ;radio_driver_SX1276.c: 1013: uint8_t i;
 10123                           ;radio_driver_SX1276.c: 1015: irqFlags = RADIO_RegisterRead(0x3F);
 10124                           
 10125                           ; BSR set to: 0
 10126                           ;incstack = 0
 10127  0045A2  0E3F               	movlw	63
 10128  0045A4  EC64  F02E         	call	_RADIO_RegisterRead
 10129  0045A8  6FF9               	movwf	RADIO_FSKPayloadReady@irqFlags& (0+255),b
 10130                           
 10131                           ; BSR set to: 0
 10132                           ;radio_driver_SX1276.c: 1016: if ((1<<(2)) == (irqFlags & (1<<(2))))
 10133  0045AA  A5F9               	btfss	RADIO_FSKPayloadReady@irqFlags& (0+255),2,b
 10134  0045AC  0012               	return	
 10135                           
 10136                           ; BSR set to: 0
 10137                           ;radio_driver_SX1276.c: 1017: {
 10138                           ;radio_driver_SX1276.c: 1022: SwTimerStop(RadioConfiguration.watchdogTimerId);
 10139  0045AE  0101               	movlb	1	; () banked
 10140  0045B0  51A8               	movf	(_RadioConfiguration+41)& (0+255),w,b
 10141  0045B2  EC68  F030         	call	_SwTimerStop
 10142                           
 10143                           ;radio_driver_SX1276.c: 1023: SwTimerStop(RadioConfiguration.fskRxWindowTimerId);
 10144  0045B6  0101               	movlb	1	; () banked
 10145  0045B8  51A7               	movf	(_RadioConfiguration+40)& (0+255),w,b
 10146  0045BA  EC68  F030         	call	_SwTimerStop
 10147                           
 10148                           ; BSR set to: 0
 10149                           ;radio_driver_SX1276.c: 1025: HALSPICSAssert();
 10150  0045BE  EC24  F031         	call	_HALSPICSAssert	;wreg free
 10151                           
 10152                           ;radio_driver_SX1276.c: 1026: HALSPISend(0x00);
 10153  0045C2  0E00               	movlw	0
 10154  0045C4  ECDC  F030         	call	_HALSPISend
 10155                           
 10156                           ; BSR set to: 14
 10157                           ;radio_driver_SX1276.c: 1027: RadioConfiguration.dataBufferLen = HALSPISend(0xFF);
 10158  0045C8  0EFF               	movlw	255
 10159  0045CA  ECDC  F030         	call	_HALSPISend
 10160  0045CE  0101               	movlb	1	; () banked
 10161  0045D0  6FA3               	movwf	(_RadioConfiguration+36)& (0+255),b
 10162                           
 10163                           ; BSR set to: 1
 10164                           ;radio_driver_SX1276.c: 1028: for (i = 0; i < RadioConfiguration.dataBufferLen; i++)
 10165  0045D2  0100               	movlb	0	; () banked
 10166  0045D4  6BFA               	clrf	RADIO_FSKPayloadReady@i& (0+255),b
 10167  0045D6  D007               	goto	l15084
 10168  0045D8                     l15080:
 10169                           
 10170                           ; BSR set to: 0
 10171                           ;radio_driver_SX1276.c: 1029: {
 10172                           ;radio_driver_SX1276.c: 1030: RadioConfiguration.dataBuffer[i] = HALSPISend(0xFF);
 10173  0045D8  51FA               	movf	RADIO_FSKPayloadReady@i& (0+255),w,b
 10174  0045DA  D824               	call	PL254	;call to abstracted procedure
 10175  0045DC  ECDC  F030         	call	_HALSPISend
 10176  0045E0  6EDF               	movwf	indf2,c
 10177                           
 10178                           ; BSR set to: 14
 10179  0045E2  0100               	movlb	0	; () banked
 10180  0045E4  2BFA               	incf	RADIO_FSKPayloadReady@i& (0+255),f,b
 10181  0045E6                     l15084:
 10182                           
 10183                           ; BSR set to: 0
 10184  0045E6  0101               	movlb	1	; () banked
 10185  0045E8  51A3               	movf	(_RadioConfiguration+36)& (0+255),w,b
 10186  0045EA  0100               	movlb	0	; () banked
 10187  0045EC  5DFA               	subwf	RADIO_FSKPayloadReady@i& (0+255),w,b
 10188  0045EE  E3F4               	bnc	l15080
 10189                           
 10190                           ; BSR set to: 0
 10191                           ;radio_driver_SX1276.c: 1031: }
 10192                           ;radio_driver_SX1276.c: 1032: HALSPICSDeassert();
 10193  0045F0  EC22  F031         	call	_HALSPICSDeassert	;wreg free
 10194                           
 10195                           ;radio_driver_SX1276.c: 1034: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
 10196  0045F4  EC66  F02D         	call	PL78	;call to abstracted procedure
 10197  0045F8  ECDB  F01A         	call	_RADIO_WriteMode
 10198                           
 10199                           ;radio_driver_SX1276.c: 1035: RadioConfiguration.flags &= ~(1 << (1));
 10200  0045FC  0101               	movlb	1	; () banked
 10201  0045FE  93A2               	bcf	(_RadioConfiguration+35)& (0+255),1,b
 10202                           
 10203                           ; BSR set to: 1
 10204                           ;radio_driver_SX1276.c: 1037: RadioConfiguration.packetSNR = -128;
 10205  004600  0E80               	movlw	128
 10206  004602  6FB1               	movwf	(_RadioConfiguration+50)& (0+255),b
 10207                           
 10208                           ; BSR set to: 1
 10209                           ;radio_driver_SX1276.c: 1039: if (1 == RadioConfiguration.crcOn)
 10210  004604  059B               	decf	(_RadioConfiguration+28)& (0+255),w,b
 10211  004606  E103               	bnz	l15098
 10212                           
 10213                           ; BSR set to: 1
 10214                           ;radio_driver_SX1276.c: 1040: {
 10215                           ;radio_driver_SX1276.c: 1041: if ((1<<(1)) == (irqFlags & (1<<(1))))
 10216  004608  0100               	movlb	0	; () banked
 10217  00460A  A3F9               	btfss	RADIO_FSKPayloadReady@irqFlags& (0+255),1,b
 10218  00460C  D003               	goto	l15100
 10219  00460E                     l15098:
 10220                           
 10221                           ;radio_driver_SX1276.c: 1042: {
 10222                           ;radio_driver_SX1276.c: 1043: RadioConfiguration.flags |= (1 << (2));
 10223  00460E  0101               	movlb	1	; () banked
 10224  004610  85A2               	bsf	(_RadioConfiguration+35)& (0+255),2,b
 10225                           
 10226                           ;radio_driver_SX1276.c: 1044: }
 10227  004612  D002               	goto	l15104
 10228  004614                     l15100:
 10229                           
 10230                           ; BSR set to: 0
 10231                           ;radio_driver_SX1276.c: 1045: else
 10232                           ;radio_driver_SX1276.c: 1046: {
 10233                           ;radio_driver_SX1276.c: 1047: RadioConfiguration.flags &= ~(1 << (2));
 10234  004614  0101               	movlb	1	; () banked
 10235  004616  95A2               	bcf	(_RadioConfiguration+35)& (0+255),2,b
 10236  004618                     l15104:
 10237                           
 10238                           ; BSR set to: 1
 10239                           ;radio_driver_SX1276.c: 1053: }
 10240                           ;radio_driver_SX1276.c: 1055: if ((RadioConfiguration.flags & (1 << (2))) != 0)
 10241  004618  A5A2               	btfss	(_RadioConfiguration+35)& (0+255),2,b
 10242  00461A  EF90  F00B         	goto	_LORAWAN_RxTimeout
 10243                           
 10244                           ; BSR set to: 1
 10245                           ;radio_driver_SX1276.c: 1056: {
 10246                           ;radio_driver_SX1276.c: 1057: LORAWAN_RxDone(RadioConfiguration.dataBuffer, RadioConfigu
      +                          ration.dataBufferLen);
 10247  00461E  D809               	call	PL308	;call to abstracted procedure
 10248  004620  EF4B  F000         	goto	_LORAWAN_RxDone	;wreg free
 10249  004624                     __end_of_RADIO_FSKPayloadReady:
 10250                           	opt stack 0
 10251  004624                     PL254:
 10252                           	opt stack 12
 10253  004624  0101               	movlb	1	; () banked
 10254  004626  25A4               	addwf	(_RadioConfiguration+37)& (0+255),w,b
 10255  004628  6ED9               	movwf	fsr2l,c
 10256  00462A  0E00               	movlw	0
 10257  00462C  21A5               	addwfc	(_RadioConfiguration+38)& (0+255),w,b
 10258  00462E  6EDA               	movwf	fsr2h,c
 10259  004630  0CFF               	retlw	255
 10260  004632                     __end_ofPL254:
 10261                           	opt stack 0
 10262  004632                     PL308:
 10263                           	opt stack 12
 10264  004632  C1A4  F16F         	movff	_RadioConfiguration+37,LORAWAN_RxDone@buffer
 10265  004636  C1A5  F170         	movff	_RadioConfiguration+38,LORAWAN_RxDone@buffer+1
 10266  00463A  C1A3  F171         	movff	_RadioConfiguration+36,LORAWAN_RxDone@bufferLength
 10267  00463E  0012               	return	
 10268  004640                     __end_ofPL308:
 10269                           	opt stack 0
 10270                           tosu	equ	0xFFF
 10271                           tosh	equ	0xFFE
 10272                           tosl	equ	0xFFD
 10273                           pclath	equ	0xFFA
 10274                           tblptru	equ	0xFF8
 10275                           tblptrh	equ	0xFF7
 10276                           tblptrl	equ	0xFF6
 10277                           tablat	equ	0xFF5
 10278                           prodh	equ	0xFF4
 10279                           prodl	equ	0xFF3
 10280                           intcon	equ	0xFF2
 10281                           indf0	equ	0xFEF
 10282                           postinc0	equ	0xFEE
 10283                           plusw0	equ	0xFEB
 10284                           fsr0h	equ	0xFEA
 10285                           fsr0l	equ	0xFE9
 10286                           wreg	equ	0xFE8
 10287                           postinc1	equ	0xFE6
 10288                           postdec1	equ	0xFE5
 10289                           plusw1	equ	0xFE3
 10290                           fsr1h	equ	0xFE2
 10291                           fsr1l	equ	0xFE1
 10292                           indf2	equ	0xFDF
 10293                           postinc2	equ	0xFDE
 10294                           postdec2	equ	0xFDD
 10295                           plusw2	equ	0xFDB
 10296                           fsr2h	equ	0xFDA
 10297                           fsr2l	equ	0xFD9
 10298                           status	equ	0xFD8
 10299                           
 10300 ;; *************** function _LORAWAN_RxTimeout *****************
 10301 ;; Defined at:
 10302 ;;		line 464 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 10303 ;; Parameters:    Size  Location     Type
 10304 ;;		None
 10305 ;; Auto vars:     Size  Location     Type
 10306 ;;  minim           4   91[BANK0 ] unsigned long 
 10307 ;;  i               1   95[BANK0 ] unsigned char 
 10308 ;; Return value:  Size  Location     Type
 10309 ;;                  1    wreg      void 
 10310 ;; Registers used:
 10311 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tb
      +lptru, prodl, prodh, cstack
 10312 ;; Tracked objects:
 10313 ;;		On entry : 3F/1
 10314 ;;		On exit  : 3C/0
 10315 ;;		Unchanged: 0/0
 10316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10317 ;;      Params:         0       0       0       0       0       0       0       0       0
 10318 ;;      Locals:         0       5       0       0       0       0       0       0       0
 10319 ;;      Temps:          0       4       0       0       0       0       0       0       0
 10320 ;;      Totals:         0       9       0       0       0       0       0       0       0
 10321 ;;Total ram usage:        9 bytes
 10322 ;; Hardware stack levels used:    1
 10323 ;; Hardware stack levels required when called:   15
 10324 ;; This function calls:
 10325 ;;		_LORAWAN_ReceiveWindow2Callback
 10326 ;;		_RADIO_Transmit
 10327 ;;		_ResetParametersForConfirmedTransmission
 10328 ;;		_ResetParametersForUnconfirmedTransmission
 10329 ;;		_RxDataDone
 10330 ;;		_SelectChannelForTransmission
 10331 ;;		_SetJoinFailState
 10332 ;;		_SwTimerSetTimeout
 10333 ;;		_SwTimerStart
 10334 ;;		___lldiv
 10335 ;; This function is called by:
 10336 ;;		_RADIO_FSKPayloadReady
 10337 ;;		_RADIO_RxTimeout
 10338 ;;		_RADIO_RxFSKTimeout
 10339 ;;		_RADIO_WatchdogTimeout
 10340 ;; This function uses a non-reentrant model
 10341 ;;
 10342                           
 10343                           	psect	text55
 10344  001720                     __ptext55:
 10345                           	opt stack 0
 10346  001720                     _LORAWAN_RxTimeout:
 10347                           	opt stack 12
 10348                           
 10349                           ; BSR set to: 1
 10350                           ;lorawan_eu.c: 466: uint8_t i;
 10351                           ;lorawan_eu.c: 467: uint32_t minim = (4294967295UL);
 10352                           
 10353                           ;incstack = 0
 10354  001720  0100               	movlb	0	; () banked
 10355  001722  69BB               	setf	LORAWAN_RxTimeout@minim& (0+255),b
 10356  001724  69BC               	setf	(LORAWAN_RxTimeout@minim+1)& (0+255),b
 10357  001726  69BD               	setf	(LORAWAN_RxTimeout@minim+2)& (0+255),b
 10358  001728  69BE               	setf	(LORAWAN_RxTimeout@minim+3)& (0+255),b
 10359                           
 10360                           ;lorawan_eu.c: 469: if (loRa.macStatus.macPause == 0)
 10361  00172A  0102               	movlb	2	; () banked
 10362  00172C  B103               	btfsc	(_loRa+3)& (0+255),0,b
 10363  00172E  D0ED               	goto	l14682
 10364                           
 10365                           ; BSR set to: 2
 10366                           ;lorawan_eu.c: 470: {
 10367                           ;lorawan_eu.c: 472: if ( loRa.macStatus.macState == RX1_OPEN )
 10368  001730  5102               	movf	(_loRa+2)& (0+255),w,b
 10369  001732  0B0F               	andlw	15
 10370  001734  0A03               	xorlw	3
 10371  001736  E10E               	bnz	l1213
 10372                           
 10373                           ; BSR set to: 2
 10374                           ;lorawan_eu.c: 473: {
 10375                           ;lorawan_eu.c: 474: if (CLASS_A == loRa.deviceClass)
 10376  001738  5112               	movf	(_loRa+18)& (0+255),w,b
 10377  00173A  E105               	bnz	l14618
 10378                           
 10379                           ; BSR set to: 2
 10380                           ;lorawan_eu.c: 475: {
 10381                           ;lorawan_eu.c: 476: loRa.macStatus.macState = BETWEEN_RX1_RX2;
 10382  00173C  5102               	movf	(_loRa+2)& (0+255),w,b
 10383  00173E  0BF0               	andlw	-16
 10384  001740  0904               	iorlw	4
 10385  001742  6F02               	movwf	(_loRa+2)& (0+255),b
 10386                           
 10387                           ;lorawan_eu.c: 477: }
 10388  001744  0012               	return	
 10389  001746                     l14618:
 10390                           
 10391                           ; BSR set to: 2
 10392                           ;lorawan_eu.c: 478: else if (CLASS_C == loRa.deviceClass)
 10393  001746  0E02               	movlw	2
 10394  001748  1912               	xorwf	(_loRa+18)& (0+255),w,b
 10395  00174A  A4D8               	btfss	status,2,c
 10396  00174C  0012               	return	
 10397                           
 10398                           ; BSR set to: 2
 10399                           ;lorawan_eu.c: 479: {
 10400                           ;lorawan_eu.c: 480: LORAWAN_ReceiveWindow2Callback(0);
 10401  00174E  6AE6               	clrf	postinc1,c
 10402  001750  EF32  F022         	goto	_LORAWAN_ReceiveWindow2Callback	;wreg free
 10403  001754                     l1213:
 10404                           
 10405                           ; BSR set to: 2
 10406                           ;lorawan_eu.c: 483: else
 10407                           ;lorawan_eu.c: 484: {
 10408                           ;lorawan_eu.c: 486: if (loRa.lorawanMacStatus.joining == 1)
 10409  001754  B500               	btfsc	_loRa& (0+255),2,b
 10410                           
 10411                           ; BSR set to: 2
 10412                           ;lorawan_eu.c: 487: {
 10413                           ;lorawan_eu.c: 488: SetJoinFailState();
 10414  001756  EFDA  F02D         	goto	_SetJoinFailState	;wreg free
 10415                           
 10416                           ; BSR set to: 2
 10417                           ;lorawan_eu.c: 491: else if (loRa.macStatus.networkJoined == 1)
 10418                           
 10419                           ;lorawan_eu.c: 489: }
 10420  00175A  A902               	btfss	(_loRa+2)& (0+255),4,b
 10421  00175C  0012               	return	
 10422                           
 10423                           ; BSR set to: 2
 10424                           ;lorawan_eu.c: 492: {
 10425                           ;lorawan_eu.c: 493: if (loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage == 1)
 10426  00175E  A100               	btfss	_loRa& (0+255),0,b
 10427  001760  D03C               	goto	l14640
 10428                           
 10429                           ; BSR set to: 2
 10430                           ;lorawan_eu.c: 494: {
 10431                           ;lorawan_eu.c: 495: if (loRa.counterRepetitionsConfirmedUplink <= loRa.maxRepetitionsCon
      +                          firmedUplink)
 10432  001762  51D9               	movf	(_loRa+217)& (0+255),w,b
 10433  001764  5DD7               	subwf	(_loRa+215)& (0+255),w,b
 10434  001766  E325               	bnc	l14634
 10435                           
 10436                           ; BSR set to: 2
 10437                           ;lorawan_eu.c: 496: {
 10438                           ;lorawan_eu.c: 497: loRa.macStatus.macState = RETRANSMISSION_DELAY;
 10439  001768  D8E7               	call	PL274	;call to abstracted procedure
 10440                           
 10441                           ; BSR set to: 2
 10442                           ;lorawan_eu.c: 498: SwTimerSetTimeout(loRa.ackTimeoutTimerId, ( (((uint32_t)(loRa.protoc
      +                          olParameters.ackTimeout)) << (12)) / 125UL ));
 10443  00176A  51A0               	movf	(_loRa+160)& (0+255),w,b
 10444  00176C  0100               	movlb	0	; () banked
 10445  00176E  6FB7               	movwf	??_LORAWAN_RxTimeout& (0+255),b
 10446  001770  0102               	movlb	2	; () banked
 10447  001772  51A1               	movf	(_loRa+161)& (0+255),w,b
 10448  001774  0100               	movlb	0	; () banked
 10449  001776  6FB8               	movwf	(??_LORAWAN_RxTimeout+1)& (0+255),b
 10450  001778  6BB9               	clrf	(??_LORAWAN_RxTimeout+2)& (0+255),b
 10451  00177A  6BBA               	clrf	(??_LORAWAN_RxTimeout+3)& (0+255),b
 10452  00177C  0E0C               	movlw	12
 10453  00177E                     u17015:
 10454  00177E  90D8               	bcf	status,0,c
 10455  001780  D8E0               	call	PL392	;call to abstracted procedure
 10456  001782  2EE8               	decfsz	wreg,f,c
 10457  001784  D7FC               	goto	u17015
 10458  001786  C0B7  F060         	movff	??_LORAWAN_RxTimeout,___lldiv@dividend
 10459  00178A  C0B8  F061         	movff	??_LORAWAN_RxTimeout+1,___lldiv@dividend+1
 10460  00178E  C0B9  F062         	movff	??_LORAWAN_RxTimeout+2,___lldiv@dividend+2
 10461  001792  C0BA  F063         	movff	??_LORAWAN_RxTimeout+3,___lldiv@dividend+3
 10462  001796  0E7D               	movlw	125
 10463  001798  EC77  F011         	call	PL32	;call to abstracted procedure
 10464  00179C  EC1B  F025         	call	___lldiv	;wreg free
 10465  0017A0  EC73  F006         	call	PL20	;call to abstracted procedure
 10466  0017A4  51E8               	movf	(_loRa+232)& (0+255),w,b
 10467  0017A6  EC11  F02C         	call	_SwTimerSetTimeout
 10468                           
 10469                           ; BSR set to: 0
 10470                           ;lorawan_eu.c: 499: SwTimerStart(loRa.ackTimeoutTimerId);
 10471  0017AA  0102               	movlb	2	; () banked
 10472  0017AC  51E8               	movf	(_loRa+232)& (0+255),w,b
 10473  0017AE  EFC4  F025         	goto	_SwTimerStart
 10474  0017B2                     l14634:
 10475                           
 10476                           ; BSR set to: 2
 10477                           ;lorawan_eu.c: 501: else
 10478                           ;lorawan_eu.c: 502: {
 10479                           ;lorawan_eu.c: 503: ResetParametersForConfirmedTransmission ();
 10480  0017B2  EC71  F030         	call	_ResetParametersForConfirmedTransmission	;wreg free
 10481                           
 10482                           ; BSR set to: 2
 10483                           ;lorawan_eu.c: 504: if (rxPayload.RxAppData != (0))
 10484  0017B6  0101               	movlb	1	; () banked
 10485  0017B8  5179               	movf	_rxPayload& (0+255),w,b
 10486  0017BA  117A               	iorwf	(_rxPayload+1)& (0+255),w,b
 10487  0017BC  B4D8               	btfsc	status,2,c
 10488  0017BE  0012               	return	
 10489  0017C0                     l14638:
 10490                           
 10491                           ; BSR set to: 1
 10492                           ;lorawan_eu.c: 505: {
 10493                           ;lorawan_eu.c: 506: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
 10494  0017C0  D8B5               	call	PL48	;call to abstracted procedure
 10495  0017C2  6F63               	movwf	RxDataDone@status& (0+255),b
 10496  0017C4  0005               	push	
 10497  0017C6  0101               	movlb	1	; () banked
 10498  0017C8  6EFA               	movwf	pclath,c
 10499  0017CA  5179               	movf	_rxPayload& (0+255),w,b
 10500  0017CC  6EFD               	movwf	tosl,c
 10501  0017CE  517A               	movf	(_rxPayload+1)& (0+255),w,b
 10502  0017D0  6EFE               	movwf	tosh,c
 10503  0017D2  50F8               	movf	tblptru,w,c
 10504  0017D4  6EFF               	movwf	tosu,c
 10505  0017D6  50FA               	movf	pclath,w,c
 10506  0017D8  0012               	return		;indir
 10507  0017DA                     l14640:
 10508                           
 10509                           ; BSR set to: 2
 10510                           ;lorawan_eu.c: 511: else
 10511                           ;lorawan_eu.c: 512: {
 10512                           ;lorawan_eu.c: 513: if (loRa.counterRepetitionsUnconfirmedUplink <= loRa.maxRepetitionsU
      +                          nconfirmedUplink)
 10513  0017DA  51D8               	movf	(_loRa+216)& (0+255),w,b
 10514  0017DC  5DD6               	subwf	(_loRa+214)& (0+255),w,b
 10515  0017DE  E201 D081          	bnc	l14676
 10516                           
 10517                           ; BSR set to: 2
 10518                           ;lorawan_eu.c: 514: {
 10519                           ;lorawan_eu.c: 515: loRa.macStatus.macState = RETRANSMISSION_DELAY;
 10520  0017E2  D8AA               	call	PL274	;call to abstracted procedure
 10521                           
 10522                           ; BSR set to: 2
 10523                           ;lorawan_eu.c: 516: if (SelectChannelForTransmission (1) == OK)
 10524  0017E4  0E01               	movlw	1
 10525  0017E6  ECC4  F026         	call	_SelectChannelForTransmission
 10526  0017EA  0900               	iorlw	0
 10527  0017EC  E113               	bnz	l1227
 10528                           
 10529                           ; BSR set to: 0
 10530                           ;lorawan_eu.c: 517: {
 10531                           ;lorawan_eu.c: 519: if (RADIO_Transmit (&macBuffer[16], loRa.lastPacketLength) == OK)
 10532  0017EE  0EFF               	movlw	low (_macBuffer+16)
 10533  0017F0  EC7D  F025         	call	PL170	;call to abstracted procedure
 10534  0017F4  ECCE  F00E         	call	_RADIO_Transmit	;wreg free
 10535  0017F8  51A6               	movf	?_RADIO_Transmit& (0+255),w,b
 10536  0017FA  11A7               	iorwf	(?_RADIO_Transmit+1)& (0+255),w,b
 10537  0017FC  E104               	bnz	l14652
 10538                           
 10539                           ; BSR set to: 0
 10540                           ;lorawan_eu.c: 520: {
 10541                           ;lorawan_eu.c: 521: loRa.counterRepetitionsUnconfirmedUplink ++ ;
 10542  0017FE  0102               	movlb	2	; () banked
 10543  001800  2BD8               	incf	(_loRa+216)& (0+255),f,b
 10544                           
 10545                           ; BSR set to: 2
 10546                           ;lorawan_eu.c: 522: loRa.macStatus.macState = TRANSMISSION_OCCURRING;
 10547  001802  EF83  F025         	goto	PL270	;call to abstracted procedure
 10548  001806                     l14652:
 10549                           
 10550                           ; BSR set to: 0
 10551                           ;lorawan_eu.c: 524: else
 10552                           ;lorawan_eu.c: 526: {
 10553                           ;lorawan_eu.c: 527: ResetParametersForUnconfirmedTransmission ();
 10554  001806  ECC3  F030         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
 10555                           
 10556                           ; BSR set to: 2
 10557                           ;lorawan_eu.c: 528: if (rxPayload.RxAppData != (0))
 10558  00180A  0101               	movlb	1	; () banked
 10559  00180C  5179               	movf	_rxPayload& (0+255),w,b
 10560  00180E  117A               	iorwf	(_rxPayload+1)& (0+255),w,b
 10561  001810  E1D7               	bnz	l14638
 10562  001812  0012               	return	
 10563  001814                     l1227:
 10564                           
 10565                           ; BSR set to: 0
 10566                           ;lorawan_eu.c: 534: else
 10567                           ;lorawan_eu.c: 535: {
 10568                           ;lorawan_eu.c: 537: for (i = 0; i <= loRa.maxChannels; i ++)
 10569  001814  6BBF               	clrf	LORAWAN_RxTimeout@i& (0+255),b
 10570  001816  D03A               	goto	l14672
 10571  001818                     l14658:
 10572                           
 10573                           ; BSR set to: 2
 10574                           ;lorawan_eu.c: 538: {
 10575                           ;lorawan_eu.c: 539: if ( (Channels[i].status == 1) && (Channels[i].channelTimer != 0) &&
      +                           (Channels[i].channelTimer <= minim) && (loRa.currentDataRate >= Channels[i].dataRange.m
      +                          in) && (loRa.currentDataRate <= Channels[i].dataRange.max) )
 10576  001818  0100               	movlb	0	; () banked
 10577  00181A  51BF               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 10578  00181C  EC86  F021         	call	PL12	;call to abstracted procedure
 10579  001820  E133               	bnz	l14670
 10580                           
 10581                           ; BSR set to: 0
 10582  001822  51BF               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 10583  001824  EC51  F006         	call	PL4	;call to abstracted procedure
 10584  001828  ECBB  F00E         	call	PL130	;call to abstracted procedure
 10585  00182C  E02D               	bz	l14670
 10586                           
 10587                           ; BSR set to: 0
 10588  00182E  51BF               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 10589  001830  EC51  F006         	call	PL4	;call to abstracted procedure
 10590  001834  50DE               	movf	postinc2,w,c
 10591  001836  5DBB               	subwf	LORAWAN_RxTimeout@minim& (0+255),w,b
 10592  001838  50DE               	movf	postinc2,w,c
 10593  00183A  59BC               	subwfb	(LORAWAN_RxTimeout@minim+1)& (0+255),w,b
 10594  00183C  50DE               	movf	postinc2,w,c
 10595  00183E  59BD               	subwfb	(LORAWAN_RxTimeout@minim+2)& (0+255),w,b
 10596  001840  50DE               	movf	postinc2,w,c
 10597  001842  59BE               	subwfb	(LORAWAN_RxTimeout@minim+3)& (0+255),w,b
 10598  001844  E321               	bnc	l14670
 10599                           
 10600                           ; BSR set to: 0
 10601  001846  51BF               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 10602  001848  EC7E  F021         	call	PL6	;call to abstracted procedure
 10603  00184C  50DF               	movf	223,w,c
 10604  00184E  0B0F               	andlw	15
 10605  001850  6FB7               	movwf	??_LORAWAN_RxTimeout& (0+255),b
 10606  001852  51B7               	movf	??_LORAWAN_RxTimeout& (0+255),w,b
 10607  001854  0102               	movlb	2	; () banked
 10608  001856  5DDF               	subwf	(_loRa+223)& (0+255),w,b
 10609  001858  E317               	bnc	l14670
 10610                           
 10611                           ; BSR set to: 2
 10612  00185A  0100               	movlb	0	; () banked
 10613  00185C  51BF               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 10614  00185E  EC7E  F021         	call	PL6	;call to abstracted procedure
 10615  001862  38DF               	swapf	223,w,c
 10616  001864  0B0F               	andlw	15
 10617  001866  6FB7               	movwf	??_LORAWAN_RxTimeout& (0+255),b
 10618  001868  0102               	movlb	2	; () banked
 10619  00186A  51DF               	movf	(_loRa+223)& (0+255),w,b
 10620  00186C  0100               	movlb	0	; () banked
 10621  00186E  5DB7               	subwf	??_LORAWAN_RxTimeout& (0+255),w,b
 10622  001870  E30B               	bnc	l14670
 10623                           
 10624                           ; BSR set to: 0
 10625                           ;lorawan_eu.c: 540: {
 10626                           ;lorawan_eu.c: 541: minim = Channels[i].channelTimer;
 10627  001872  51BF               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 10628  001874  EC51  F006         	call	PL4	;call to abstracted procedure
 10629  001878  CFDE F0BB          	movff	postinc2,LORAWAN_RxTimeout@minim
 10630  00187C  CFDE F0BC          	movff	postinc2,LORAWAN_RxTimeout@minim+1
 10631  001880  CFDE F0BD          	movff	postinc2,LORAWAN_RxTimeout@minim+2
 10632  001884  CFDE F0BE          	movff	postinc2,LORAWAN_RxTimeout@minim+3
 10633  001888                     l14670:
 10634  001888  0100               	movlb	0	; () banked
 10635  00188A  2BBF               	incf	LORAWAN_RxTimeout@i& (0+255),f,b
 10636  00188C                     l14672:
 10637                           
 10638                           ; BSR set to: 0
 10639  00188C  51BF               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 10640  00188E  0102               	movlb	2	; () banked
 10641  001890  5DED               	subwf	(_loRa+237)& (0+255),w,b
 10642  001892  E2C2               	bc	l14658
 10643                           
 10644                           ; BSR set to: 2
 10645                           ;lorawan_eu.c: 542: }
 10646                           ;lorawan_eu.c: 543: }
 10647                           ;lorawan_eu.c: 544: SwTimerSetTimeout (loRa.unconfirmedRetransmisionTimerId, ( (((uint32
      +                          _t)(minim + 50)) << (12)) / 125UL ) );
 10648  001894  C0BB  F0B7         	movff	LORAWAN_RxTimeout@minim,??_LORAWAN_RxTimeout
 10649  001898  C0BC  F0B8         	movff	LORAWAN_RxTimeout@minim+1,??_LORAWAN_RxTimeout+1
 10650  00189C  C0BD  F0B9         	movff	LORAWAN_RxTimeout@minim+2,??_LORAWAN_RxTimeout+2
 10651  0018A0  C0BE  F0BA         	movff	LORAWAN_RxTimeout@minim+3,??_LORAWAN_RxTimeout+3
 10652  0018A4  0E0C               	movlw	12
 10653  0018A6                     u17145:
 10654  0018A6  90D8               	bcf	status,0,c
 10655  0018A8  0100               	movlb	0	; () banked
 10656  0018AA  D84B               	call	PL392	;call to abstracted procedure
 10657  0018AC  2EE8               	decfsz	wreg,f,c
 10658  0018AE  D7FB               	goto	u17145
 10659  0018B0  0E00               	movlw	0
 10660  0018B2  25B7               	addwf	??_LORAWAN_RxTimeout& (0+255),w,b
 10661  0018B4  6F60               	movwf	___lldiv@dividend& (0+255),b
 10662  0018B6  0E20               	movlw	32
 10663  0018B8  21B8               	addwfc	(??_LORAWAN_RxTimeout+1)& (0+255),w,b
 10664  0018BA  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
 10665  0018BC  0E03               	movlw	3
 10666  0018BE  21B9               	addwfc	(??_LORAWAN_RxTimeout+2)& (0+255),w,b
 10667  0018C0  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
 10668  0018C2  0E00               	movlw	0
 10669  0018C4  21BA               	addwfc	(??_LORAWAN_RxTimeout+3)& (0+255),w,b
 10670  0018C6  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
 10671  0018C8  0E7D               	movlw	125
 10672  0018CA  EC77  F011         	call	PL32	;call to abstracted procedure
 10673  0018CE  EC1B  F025         	call	___lldiv	;wreg free
 10674  0018D2  EC73  F006         	call	PL20	;call to abstracted procedure
 10675  0018D6  51EA               	movf	(_loRa+234)& (0+255),w,b
 10676  0018D8  EC11  F02C         	call	_SwTimerSetTimeout
 10677                           
 10678                           ;lorawan_eu.c: 545: SwTimerStart (loRa.unconfirmedRetransmisionTimerId);
 10679  0018DC  0102               	movlb	2	; () banked
 10680  0018DE  51EA               	movf	(_loRa+234)& (0+255),w,b
 10681  0018E0  EFC4  F025         	goto	_SwTimerStart
 10682  0018E4                     l14676:
 10683                           
 10684                           ; BSR set to: 2
 10685                           ;lorawan_eu.c: 548: else
 10686                           ;lorawan_eu.c: 549: {
 10687                           ;lorawan_eu.c: 550: ResetParametersForUnconfirmedTransmission ();
 10688  0018E4  ECC3  F030         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
 10689                           
 10690                           ; BSR set to: 2
 10691                           ;lorawan_eu.c: 551: if (rxPayload.RxAppData != (0))
 10692  0018E8  D831               	call	PL420	;call to abstracted procedure
 10693  0018EA  B4D8               	btfsc	status,2,c
 10694  0018EC  0012               	return	
 10695                           
 10696                           ; BSR set to: 1
 10697                           ;lorawan_eu.c: 552: {
 10698                           ;lorawan_eu.c: 553: rxPayload.RxAppData((0), 0, MAC_OK);
 10699  0018EE  D81E               	call	PL48	;call to abstracted procedure
 10700  0018F0  0E01               	movlw	1
 10701  0018F2  6F63               	movwf	RxDataDone@status& (0+255),b
 10702  0018F4  0005               	push	
 10703  0018F6  0101               	movlb	1	; () banked
 10704  0018F8  6EFA               	movwf	pclath,c
 10705  0018FA  5179               	movf	_rxPayload& (0+255),w,b
 10706  0018FC  6EFD               	movwf	tosl,c
 10707  0018FE  517A               	movf	(_rxPayload+1)& (0+255),w,b
 10708  001900  6EFE               	movwf	tosh,c
 10709  001902  50F8               	movf	tblptru,w,c
 10710  001904  6EFF               	movwf	tosu,c
 10711  001906  50FA               	movf	pclath,w,c
 10712  001908  0012               	return		;indir
 10713  00190A                     l14682:
 10714                           
 10715                           ; BSR set to: 2
 10716                           ;lorawan_eu.c: 560: else
 10717                           ;lorawan_eu.c: 561: {
 10718                           ;lorawan_eu.c: 563: if (rxPayload.RxAppData != (0))
 10719  00190A  D820               	call	PL420	;call to abstracted procedure
 10720  00190C  B4D8               	btfsc	status,2,c
 10721  00190E  0012               	return	
 10722                           
 10723                           ; BSR set to: 1
 10724                           ;lorawan_eu.c: 564: {
 10725                           ;lorawan_eu.c: 565: rxPayload.RxAppData((0), 0, RADIO_NOT_OK);
 10726  001910  D80D               	call	PL48	;call to abstracted procedure
 10727  001912  0E02               	movlw	2
 10728  001914  6F63               	movwf	RxDataDone@status& (0+255),b
 10729  001916  0005               	push	
 10730  001918  0101               	movlb	1	; () banked
 10731  00191A  6EFA               	movwf	pclath,c
 10732  00191C  5179               	movf	_rxPayload& (0+255),w,b
 10733  00191E  6EFD               	movwf	tosl,c
 10734  001920  517A               	movf	(_rxPayload+1)& (0+255),w,b
 10735  001922  6EFE               	movwf	tosh,c
 10736  001924  50F8               	movf	tblptru,w,c
 10737  001926  6EFF               	movwf	tosu,c
 10738  001928  50FA               	movf	pclath,w,c
 10739  00192A  0012               	return		;indir
 10740  00192C                     __end_of_LORAWAN_RxTimeout:
 10741                           	opt stack 0
 10742  00192C                     PL48:
 10743                           	opt stack 15
 10744  00192C  0E00               	movlw	0
 10745  00192E  0100               	movlb	0	; () banked
 10746  001930  6F60               	movwf	RxDataDone@pData& (0+255),b
 10747  001932  6F61               	movwf	(RxDataDone@pData+1)& (0+255),b
 10748  001934  6F62               	movwf	RxDataDone@dataLength& (0+255),b
 10749  001936  0C00               	retlw	0
 10750  001938                     __end_ofPL48:
 10751                           	opt stack 0
 10752  001938                     PL274:
 10753                           	opt stack 12
 10754  001938  5102               	movf	(_loRa+2)& (0+255),w,b
 10755  00193A  0BF0               	andlw	-16
 10756  00193C  0906               	iorlw	6
 10757  00193E  6F02               	movwf	(_loRa+2)& (0+255),b
 10758  001940  0012               	return	
 10759  001942                     __end_ofPL274:
 10760                           	opt stack 0
 10761  001942                     PL392:
 10762                           	opt stack 12
 10763  001942  37B7               	rlcf	??_LORAWAN_RxTimeout& (0+255),f,b
 10764  001944  37B8               	rlcf	(??_LORAWAN_RxTimeout+1)& (0+255),f,b
 10765  001946  37B9               	rlcf	(??_LORAWAN_RxTimeout+2)& (0+255),f,b
 10766  001948  37BA               	rlcf	(??_LORAWAN_RxTimeout+3)& (0+255),f,b
 10767  00194A  0012               	return	
 10768  00194C                     __end_ofPL392:
 10769                           	opt stack 0
 10770  00194C                     PL420:
 10771                           	opt stack 12
 10772  00194C  0101               	movlb	1	; () banked
 10773  00194E  5179               	movf	_rxPayload& (0+255),w,b
 10774  001950  117A               	iorwf	(_rxPayload+1)& (0+255),w,b
 10775  001952  0012               	return	
 10776  001954                     __end_ofPL420:
 10777                           	opt stack 0
 10778                           tosu	equ	0xFFF
 10779                           tosh	equ	0xFFE
 10780                           tosl	equ	0xFFD
 10781                           pclath	equ	0xFFA
 10782                           tblptru	equ	0xFF8
 10783                           tblptrh	equ	0xFF7
 10784                           tblptrl	equ	0xFF6
 10785                           tablat	equ	0xFF5
 10786                           prodh	equ	0xFF4
 10787                           prodl	equ	0xFF3
 10788                           intcon	equ	0xFF2
 10789                           indf0	equ	0xFEF
 10790                           postinc0	equ	0xFEE
 10791                           plusw0	equ	0xFEB
 10792                           fsr0h	equ	0xFEA
 10793                           fsr0l	equ	0xFE9
 10794                           wreg	equ	0xFE8
 10795                           postinc1	equ	0xFE6
 10796                           postdec1	equ	0xFE5
 10797                           plusw1	equ	0xFE3
 10798                           fsr1h	equ	0xFE2
 10799                           fsr1l	equ	0xFE1
 10800                           indf2	equ	0xFDF
 10801                           postinc2	equ	0xFDE
 10802                           postdec2	equ	0xFDD
 10803                           plusw2	equ	0xFDB
 10804                           fsr2h	equ	0xFDA
 10805                           fsr2l	equ	0xFD9
 10806                           status	equ	0xFD8
 10807                           
 10808 ;; *************** function _LORAWAN_RxDone *****************
 10809 ;; Defined at:
 10810 ;;		line 1121 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 10811 ;; Parameters:    Size  Location     Type
 10812 ;;  buffer          2  111[BANK1 ] PTR unsigned char 
 10813 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 10814 ;;  bufferLength    1  113[BANK1 ] unsigned char 
 10815 ;; Auto vars:     Size  Location     Type
 10816 ;;  hdr             2  151[BANK0 ] PTR struct .
 10817 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 10818 ;;  joinAccept      2  148[BANK0 ] PTR struct .
 10819 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 10820 ;;  computedMic     4  144[BANK0 ] unsigned long 
 10821 ;;  extractedMic    4  136[BANK0 ] unsigned long 
 10822 ;;  packet          2  142[BANK0 ] PTR unsigned char 
 10823 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), NULL(0), 
 10824 ;;  frmPayloadLe    1  150[BANK0 ] unsigned char 
 10825 ;;  temp            1  141[BANK0 ] unsigned char 
 10826 ;;  bufferIndex     1  140[BANK0 ] unsigned char 
 10827 ;;  mhdr            1  135[BANK0 ] struct .
 10828 ;;  channelIndex    1  134[BANK0 ] unsigned char 
 10829 ;;  fPort           1  133[BANK0 ] unsigned char 
 10830 ;; Return value:  Size  Location     Type
 10831 ;;                  1    wreg      enum E17354
 10832 ;; Registers used:
 10833 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+8, btemp+9, btemp+10, btemp+11, to
      +sl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10834 ;; Tracked objects:
 10835 ;;		On entry : 3F/1
 10836 ;;		On exit  : 3C/0
 10837 ;;		Unchanged: 0/0
 10838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10839 ;;      Params:         0       0       3       0       0       0       0       0       0
 10840 ;;      Locals:         0      20       0       0       0       0       0       0       0
 10841 ;;      Temps:          0       5       0       0       0       0       0       0       0
 10842 ;;      Totals:         0      25       3       0       0       0       0       0       0
 10843 ;;Total ram usage:       28 bytes
 10844 ;; Hardware stack levels used:    1
 10845 ;; Hardware stack levels required when called:   15
 10846 ;; This function calls:
 10847 ;;		_AESCmac
 10848 ;;		_AESEncodeLoRa
 10849 ;;		_AssembleEncryptionBlock
 10850 ;;		_CheckFlags
 10851 ;;		_CheckMcastFlags
 10852 ;;		_ComputeMic
 10853 ;;		_ComputeSessionKeys
 10854 ;;		_EncryptFRMPayload
 10855 ;;		_ExtractMic
 10856 ;;		_LORAWAN_EnterContinuousReceive
 10857 ;;		_LORAWAN_Send
 10858 ;;		_MacExecuteCommands
 10859 ;;		_RADIO_GetStatus
 10860 ;;		_RADIO_ReleaseData
 10861 ;;		_RxDataDone
 10862 ;;		_SearchAvailableChannel
 10863 ;;		_SetJoinFailState
 10864 ;;		_SetReceptionNotOkState
 10865 ;;		_StartReTxTimer
 10866 ;;		_SwTimerStop
 10867 ;;		_UpdateCfList
 10868 ;;		_UpdateDLSettings
 10869 ;;		_UpdateJoinSuccessState
 10870 ;;		_UpdateReceiveDelays
 10871 ;;		_UpdateRetransmissionAckTimeoutState
 10872 ;;		_memcpy
 10873 ;; This function is called by:
 10874 ;;		_RADIO_RxDone
 10875 ;;		_RADIO_FSKPayloadReady
 10876 ;; This function uses a non-reentrant model
 10877 ;;
 10878                           
 10879                           	psect	text56
 10880  000096                     __ptext56:
 10881                           	opt stack 0
 10882  000096                     _LORAWAN_RxDone:
 10883                           	opt stack 12
 10884                           
 10885                           ; BSR set to: 1
 10886                           ;lorawan.c: 1123: uint32_t computedMic, extractedMic;
 10887                           ;lorawan.c: 1124: Mhdr_t mhdr;
 10888                           ;lorawan.c: 1125: uint8_t fPort, bufferIndex, channelIndex;
 10889                           ;lorawan.c: 1126: uint8_t frmPayloadLength;
 10890                           ;lorawan.c: 1127: uint8_t *packet;
 10891                           ;lorawan.c: 1128: uint8_t temp;
 10892                           ;lorawan.c: 1130: RADIO_ReleaseData();
 10893                           
 10894                           ;incstack = 0
 10895  000096  EC0D  F031         	call	_RADIO_ReleaseData	;wreg free
 10896                           
 10897                           ; BSR set to: 1
 10898                           ;lorawan.c: 1132: if (loRa.macStatus.macPause == 0)
 10899  00009A  0102               	movlb	2	; () banked
 10900  00009C  B103               	btfsc	(_loRa+3)& (0+255),0,b
 10901  00009E  D2E8               	goto	l14506
 10902                           
 10903                           ; BSR set to: 2
 10904                           ;lorawan.c: 1133: {
 10905                           ;lorawan.c: 1134: mhdr.value = buffer[0];
 10906  0000A0  DBCF               	call	PL234	;call to abstracted procedure
 10907  0000A2  0100               	movlb	0	; () banked
 10908  0000A4  6FE7               	movwf	LORAWAN_RxDone@mhdr& (0+255),b
 10909                           
 10910                           ; BSR set to: 0
 10911                           ;lorawan.c: 1135: if ( (mhdr.bits.mType == FRAME_TYPE_JOIN_ACCEPT) && (loRa.activationPa
      +                          rameters.activationType == 0) )
 10912  0000A6  39E7               	swapf	LORAWAN_RxDone@mhdr& (0+255),w,b
 10913  0000A8  32E8               	rrcf	wreg,f,c
 10914  0000AA  0B07               	andlw	7
 10915  0000AC  06E8               	decf	wreg,f,c
 10916  0000AE  E001 D09A          	bnz	l14178
 10917                           
 10918                           ; BSR set to: 0
 10919  0000B2  0102               	movlb	2	; () banked
 10920  0000B4  511D               	movf	(_loRa+29)& (0+255),w,b
 10921  0000B6  E001 D096          	bnz	l14178
 10922                           
 10923                           ; BSR set to: 2
 10924                           ;lorawan.c: 1136: {
 10925                           ;lorawan.c: 1137: temp = bufferLength - 1;
 10926  0000BA  0101               	movlb	1	; () banked
 10927  0000BC  0571               	decf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 10928  0000BE  0100               	movlb	0	; () banked
 10929  0000C0  6FED               	movwf	LORAWAN_RxDone@temp& (0+255),b
 10930                           
 10931                           ;lorawan.c: 1138: while (temp > 0)
 10932  0000C2  D01A               	goto	l14134
 10933  0000C4                     l14128:
 10934                           
 10935                           ; BSR set to: 0
 10936                           ;lorawan.c: 1139: {
 10937                           ;lorawan.c: 1141: AESEncodeLoRa (&buffer[bufferLength - temp], loRa.activationParameters
      +                          .applicationKey);
 10938  0000C4  0101               	movlb	1	; () banked
 10939  0000C6  5171               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 10940  0000C8  256F               	addwf	LORAWAN_RxDone@buffer& (0+255),w,b
 10941  0000CA  0100               	movlb	0	; () banked
 10942  0000CC  6FE0               	movwf	??_LORAWAN_RxDone& (0+255),b
 10943  0000CE  0E00               	movlw	0
 10944  0000D0  0101               	movlb	1	; () banked
 10945  0000D2  2170               	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),w,b
 10946  0000D4  0100               	movlb	0	; () banked
 10947  0000D6  6FE1               	movwf	(??_LORAWAN_RxDone+1)& (0+255),b
 10948  0000D8  51ED               	movf	LORAWAN_RxDone@temp& (0+255),w,b
 10949  0000DA  5DE0               	subwf	??_LORAWAN_RxDone& (0+255),w,b
 10950  0000DC  6F8C               	movwf	AESEncodeLoRa@block& (0+255),b
 10951  0000DE  51E1               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 10952  0000E0  A0D8               	btfss	status,0,c
 10953  0000E2  05E1               	decf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 10954  0000E4  EC5B  F026         	call	PL240	;call to abstracted procedure
 10955  0000E8  EC51  F02E         	call	_AESEncodeLoRa	;wreg free
 10956                           
 10957                           ; BSR set to: 0
 10958                           ;lorawan.c: 1142: if (temp > 16)
 10959  0000EC  0E10               	movlw	16
 10960  0000EE  65ED               	cpfsgt	LORAWAN_RxDone@temp& (0+255),b
 10961  0000F0  D002               	goto	l636
 10962                           
 10963                           ; BSR set to: 0
 10964                           ;lorawan.c: 1143: {
 10965                           ;lorawan.c: 1144: temp -= 16;
 10966  0000F2  5FED               	subwf	LORAWAN_RxDone@temp& (0+255),f,b
 10967                           
 10968                           ;lorawan.c: 1145: }
 10969  0000F4  D001               	goto	l14134
 10970  0000F6                     l636:
 10971                           
 10972                           ; BSR set to: 0
 10973                           ;lorawan.c: 1146: else
 10974                           ;lorawan.c: 1147: {
 10975                           ;lorawan.c: 1148: temp = 0;
 10976  0000F6  6BED               	clrf	LORAWAN_RxDone@temp& (0+255),b
 10977  0000F8                     l14134:
 10978                           
 10979                           ; BSR set to: 0
 10980  0000F8  51ED               	movf	LORAWAN_RxDone@temp& (0+255),w,b
 10981  0000FA  E1E4               	bnz	l14128
 10982                           
 10983                           ; BSR set to: 0
 10984                           ;lorawan.c: 1149: }
 10985                           ;lorawan.c: 1150: }
 10986                           ;lorawan.c: 1153: computedMic = ComputeMic (loRa.activationParameters.applicationKey, bu
      +                          ffer, bufferLength - sizeof(extractedMic));
 10987  0000FC  EC84  F017         	call	PL348	;call to abstracted procedure
 10988  000100  C16F  F168         	movff	LORAWAN_RxDone@buffer,ComputeMic@buffer
 10989  000104  C170  F169         	movff	LORAWAN_RxDone@buffer+1,ComputeMic@buffer+1
 10990  000108  5171               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 10991  00010A  0FFC               	addlw	252
 10992  00010C  6F6A               	movwf	ComputeMic@bufferLength& (0+255),b
 10993  00010E  ECB9  F02A         	call	_ComputeMic	;wreg free
 10994  000112  C166  F0F0         	movff	?_ComputeMic,LORAWAN_RxDone@computedMic
 10995  000116  C167  F0F1         	movff	?_ComputeMic+1,LORAWAN_RxDone@computedMic+1
 10996  00011A  C168  F0F2         	movff	?_ComputeMic+2,LORAWAN_RxDone@computedMic+2
 10997  00011E  C169  F0F3         	movff	?_ComputeMic+3,LORAWAN_RxDone@computedMic+3
 10998                           
 10999                           ; BSR set to: 0
 11000                           ;lorawan.c: 1154: extractedMic = ExtractMic (buffer, bufferLength);
 11001  000122  DB71               	call	PL188	;call to abstracted procedure
 11002  000124  EC40  F02B         	call	_ExtractMic	;wreg free
 11003  000128  DB2B               	call	PL126	;call to abstracted procedure
 11004                           
 11005                           ; BSR set to: 0
 11006                           ;lorawan.c: 1155: if (extractedMic != computedMic)
 11007  00012A  51F0               	movf	LORAWAN_RxDone@computedMic& (0+255),w,b
 11008  00012C  19E8               	xorwf	LORAWAN_RxDone@extractedMic& (0+255),w,b
 11009  00012E  E109               	bnz	u16000
 11010  000130  51F1               	movf	(LORAWAN_RxDone@computedMic+1)& (0+255),w,b
 11011  000132  19E9               	xorwf	(LORAWAN_RxDone@extractedMic+1)& (0+255),w,b
 11012  000134  E106               	bnz	u16000
 11013  000136  51F2               	movf	(LORAWAN_RxDone@computedMic+2)& (0+255),w,b
 11014  000138  19EA               	xorwf	(LORAWAN_RxDone@extractedMic+2)& (0+255),w,b
 11015  00013A  E103               	bnz	u16000
 11016  00013C  51F3               	movf	(LORAWAN_RxDone@computedMic+3)& (0+255),w,b
 11017  00013E  19EB               	xorwf	(LORAWAN_RxDone@extractedMic+3)& (0+255),w,b
 11018  000140  E00F               	bz	l14152
 11019  000142                     u16000:
 11020                           
 11021                           ; BSR set to: 0
 11022                           ;lorawan.c: 1156: {
 11023                           ;lorawan.c: 1157: if ((loRa.macStatus.macState == RX2_OPEN) || ((loRa.macStatus.macState
      +                           == RX1_OPEN) && (loRa.rx2DelayExpired)))
 11024  000142  EC8E  F026         	call	PL384	;call to abstracted procedure
 11025  000146  E102 EFDA  F02D    	bz	_SetJoinFailState
 11026                           
 11027                           ; BSR set to: 2
 11028  00014C  5102               	movf	(_loRa+2)& (0+255),w,b
 11029  00014E  0B0F               	andlw	15
 11030  000150  0A03               	xorlw	3
 11031  000152  A4D8               	btfss	status,2,c
 11032  000154  0012               	return	
 11033                           
 11034                           ; BSR set to: 2
 11035  000156  51F1               	movf	(_loRa+241)& (0+255),w,b
 11036  000158  B4D8               	btfsc	status,2,c
 11037  00015A  0012               	return	
 11038                           
 11039                           ; BSR set to: 2
 11040                           ;lorawan.c: 1158: {
 11041                           ;lorawan.c: 1159: SetJoinFailState();
 11042  00015C  EFDA  F02D         	goto	_SetJoinFailState	;wreg free
 11043  000160                     l14152:
 11044                           
 11045                           ; BSR set to: 0
 11046                           ;lorawan.c: 1163: }
 11047                           ;lorawan.c: 1166: if (loRa.macStatus.macState == RX1_OPEN)
 11048  000160  0102               	movlb	2	; () banked
 11049  000162  5102               	movf	(_loRa+2)& (0+255),w,b
 11050  000164  0B0F               	andlw	15
 11051  000166  0A03               	xorlw	3
 11052  000168  E103               	bnz	l14156
 11053                           
 11054                           ; BSR set to: 2
 11055                           ;lorawan.c: 1167: {
 11056                           ;lorawan.c: 1168: SwTimerStop (loRa.joinAccept2TimerId);
 11057  00016A  51E3               	movf	(_loRa+227)& (0+255),w,b
 11058  00016C  EC68  F030         	call	_SwTimerStop
 11059  000170                     l14156:
 11060                           
 11061                           ;lorawan.c: 1169: }
 11062                           ;lorawan.c: 1171: JoinAccept_t *joinAccept;
 11063                           ;lorawan.c: 1172: joinAccept = (JoinAccept_t*)buffer;
 11064  000170  C16F  F0F4         	movff	LORAWAN_RxDone@buffer,LORAWAN_RxDone@joinAccept
 11065  000174  C170  F0F5         	movff	LORAWAN_RxDone@buffer+1,LORAWAN_RxDone@joinAccept+1
 11066                           
 11067                           ;lorawan.c: 1174: loRa.activationParameters.deviceAddress.value = joinAccept->members.de
      +                          viceAddress.value;
 11068  000178  0100               	movlb	0	; () banked
 11069  00017A  EE20 F007          	lfsr	2,7
 11070  00017E  DB74               	call	PL276	;call to abstracted procedure
 11071  000180  CFDE F21E          	movff	postinc2,_loRa+30
 11072  000184  CFDE F21F          	movff	postinc2,_loRa+31
 11073  000188  CFDE F220          	movff	postinc2,_loRa+32
 11074  00018C  CFDE F221          	movff	postinc2,_loRa+33
 11075                           
 11076                           ; BSR set to: 0
 11077                           ;lorawan.c: 1176: UpdateReceiveDelays (joinAccept->members.rxDelay & 0x0F);
 11078  000190  EE20 F00C          	lfsr	2,12
 11079  000194  DB69               	call	PL276	;call to abstracted procedure
 11080  000196  50DF               	movf	indf2,w,c
 11081  000198  0B0F               	andlw	15
 11082  00019A  EC48  F02C         	call	_UpdateReceiveDelays
 11083                           
 11084                           ; BSR set to: 2
 11085                           ;lorawan.c: 1178: UpdateDLSettings(joinAccept->members.DLSettings.bits.rx2DataRate, join
      +                          Accept->members.DLSettings.bits.rx1DROffset);
 11086  00019E  0100               	movlb	0	; () banked
 11087  0001A0  EE20 F00B          	lfsr	2,11
 11088  0001A4  DB61               	call	PL276	;call to abstracted procedure
 11089  0001A6  38DF               	swapf	223,w,c
 11090  0001A8  0B07               	andlw	7
 11091  0001AA  6F60               	movwf	UpdateDLSettings@dlRx1DrOffset& (0+255),b
 11092  0001AC  EE20 F00B          	lfsr	2,11
 11093  0001B0  DB5B               	call	PL276	;call to abstracted procedure
 11094  0001B2  50DF               	movf	223,w,c
 11095  0001B4  0B0F               	andlw	15
 11096  0001B6  EC89  F02F         	call	_UpdateDLSettings
 11097                           
 11098                           ; BSR set to: 0
 11099                           ;lorawan.c: 1180: UpdateCfList (bufferLength, joinAccept);
 11100  0001BA  C0F4  F09C         	movff	LORAWAN_RxDone@joinAccept,UpdateCfList@joinAccept
 11101  0001BE  C0F5  F09D         	movff	LORAWAN_RxDone@joinAccept+1,UpdateCfList@joinAccept+1
 11102  0001C2  0101               	movlb	1	; () banked
 11103  0001C4  5171               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 11104  0001C6  EC92  F014         	call	_UpdateCfList
 11105                           
 11106                           ;lorawan.c: 1182: ComputeSessionKeys (joinAccept);
 11107  0001CA  C0F4  F0A0         	movff	LORAWAN_RxDone@joinAccept,ComputeSessionKeys@joinAcceptBuffer
 11108  0001CE  C0F5  F0A1         	movff	LORAWAN_RxDone@joinAccept+1,ComputeSessionKeys@joinAcceptBuffer+1
 11109  0001D2  EC2D  F026         	call	_ComputeSessionKeys	;wreg free
 11110                           
 11111                           ; BSR set to: 0
 11112                           ;lorawan.c: 1184: UpdateJoinSuccessState(0);
 11113  0001D6  6AE6               	clrf	postinc1,c
 11114  0001D8  ECBB  F01D         	call	_UpdateJoinSuccessState	;wreg free
 11115                           
 11116                           ; BSR set to: 1
 11117                           ;lorawan.c: 1186: loRa.fCntUp.value = 0;
 11118  0001DC  0102               	movlb	2	; () banked
 11119  0001DE  EC7E  F014         	call	PL356	;call to abstracted procedure
 11120                           
 11121                           ; BSR set to: 2
 11122                           ;lorawan.c: 1187: loRa.fCntDown.value = 0;
 11123  0001E2  EF8D  F014         	goto	PL410	;call to abstracted procedure
 11124  0001E6                     l14178:
 11125                           
 11126                           ;lorawan.c: 1191: else if ( (mhdr.bits.mType == FRAME_TYPE_DATA_UNCONFIRMED_DOWN) || (mh
      +                          dr.bits.mType == FRAME_TYPE_DATA_CONFIRMED_DOWN) )
 11127  0001E6  0100               	movlb	0	; () banked
 11128  0001E8  39E7               	swapf	LORAWAN_RxDone@mhdr& (0+255),w,b
 11129  0001EA  32E8               	rrcf	wreg,f,c
 11130  0001EC  0B07               	andlw	7
 11131  0001EE  0A03               	xorlw	3
 11132  0001F0  E007               	bz	l648
 11133                           
 11134                           ; BSR set to: 0
 11135  0001F2  39E7               	swapf	LORAWAN_RxDone@mhdr& (0+255),w,b
 11136  0001F4  32E8               	rrcf	wreg,f,c
 11137  0001F6  0B07               	andlw	7
 11138  0001F8  0A05               	xorlw	5
 11139  0001FA  E002 EF61  F026    	bnz	_SetReceptionNotOkState
 11140  000200                     l648:
 11141                           
 11142                           ; BSR set to: 0
 11143                           ;lorawan.c: 1192: {
 11144                           ;lorawan.c: 1193: loRa.crtMacCmdIndex = 0;
 11145  000200  0102               	movlb	2	; () banked
 11146  000202  6BA7               	clrf	(_loRa+167)& (0+255),b
 11147                           
 11148                           ; BSR set to: 2
 11149                           ;lorawan.c: 1195: Hdr_t *hdr;
 11150                           ;lorawan.c: 1196: hdr=(Hdr_t*)buffer;
 11151  000204  C16F  F0F7         	movff	LORAWAN_RxDone@buffer,LORAWAN_RxDone@hdr
 11152  000208  C170  F0F8         	movff	LORAWAN_RxDone@buffer+1,LORAWAN_RxDone@hdr+1
 11153                           
 11154                           ;lorawan.c: 1199: if ( (CLASS_C == loRa.deviceClass) && (hdr->members.devAddr.value == l
      +                          oRa.activationParameters.mcastDeviceAddress.value) && (1 == loRa.macStatus.mcastEnable) 
      +                          )
 11155  00020C  0E02               	movlw	2
 11156  00020E  1912               	xorwf	(_loRa+18)& (0+255),w,b
 11157  000210  E001 D0D5          	bnz	l14296
 11158                           
 11159                           ; BSR set to: 2
 11160  000214  DB11               	call	PL222	;call to abstracted procedure
 11161  000216  DA6C               	call	PL42	;call to abstracted procedure
 11162  000218  0102               	movlb	2	; () banked
 11163  00021A  5162               	movf	(_loRa+98)& (0+255),w,b
 11164  00021C  18DE               	xorwf	postinc2,w,c
 11165  00021E  E109               	bnz	u16081
 11166  000220  5163               	movf	(_loRa+99)& (0+255),w,b
 11167  000222  18DE               	xorwf	postinc2,w,c
 11168  000224  E106               	bnz	u16081
 11169  000226  5164               	movf	(_loRa+100)& (0+255),w,b
 11170  000228  18DE               	xorwf	postinc2,w,c
 11171  00022A  E103               	bnz	u16081
 11172  00022C  5165               	movf	(_loRa+101)& (0+255),w,b
 11173  00022E  18DE               	xorwf	postinc2,w,c
 11174  000230  A4D8               	btfss	status,2,c
 11175  000232                     u16081:
 11176  000232  D0C5               	goto	l14296
 11177                           
 11178                           ; BSR set to: 2
 11179  000234  A504               	btfss	(_loRa+4)& (0+255),2,b
 11180  000236  D0C3               	goto	l14296
 11181                           
 11182                           ; BSR set to: 2
 11183                           ;lorawan.c: 1200: {
 11184                           ;lorawan.c: 1202: if (0 == CheckMcastFlags(hdr))
 11185  000238  C0F7  F060         	movff	LORAWAN_RxDone@hdr,CheckMcastFlags@hdr
 11186  00023C  C0F8  F061         	movff	LORAWAN_RxDone@hdr+1,CheckMcastFlags@hdr+1
 11187  000240  EC3D  F028         	call	_CheckMcastFlags	;wreg free
 11188  000244  0900               	iorlw	0
 11189  000246  E104               	bnz	l14196
 11190  000248                     l14190:
 11191                           
 11192                           ;lorawan.c: 1203: {
 11193                           ;lorawan.c: 1204: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 11194  000248  0102               	movlb	2	; () banked
 11195  00024A  DB1A               	call	PL316	;call to abstracted procedure
 11196                           
 11197                           ; BSR set to: 2
 11198                           ;lorawan.c: 1205: LORAWAN_EnterContinuousReceive();
 11199  00024C  EF93  F026         	goto	_LORAWAN_EnterContinuousReceive	;wreg free
 11200  000250                     l14196:
 11201                           
 11202                           ;lorawan.c: 1207: }
 11203                           ;lorawan.c: 1209: AssembleEncryptionBlock (1, hdr->members.fCnt, bufferLength - sizeof (
      +                          computedMic), 0x49, 1);
 11204  000250  DA36               	call	PL24	;call to abstracted procedure
 11205  000252  CFDE F0E0          	movff	postinc2,??_LORAWAN_RxDone
 11206  000256  DA7B               	call	PL110	;call to abstracted procedure
 11207  000258  0E01               	movlw	1
 11208  00025A  6F70               	movwf	AssembleEncryptionBlock@multicastStatus& (0+255),b
 11209  00025C  EC8F  F021         	call	_AssembleEncryptionBlock
 11210                           
 11211                           ;lorawan.c: 1210: memcpy (&radioBuffer[0], aesBuffer, sizeof (aesBuffer));
 11212  000260  DABC               	call	PL162	;call to abstracted procedure
 11213  000262  DA85               	call	PL124	;call to abstracted procedure
 11214  000264  EC94  F028         	call	_memcpy	;wreg free
 11215                           
 11216                           ;lorawan.c: 1211: memcpy (&radioBuffer[16], buffer, bufferLength-sizeof(computedMic));
 11217  000268  DA4D               	call	PL90	;call to abstracted procedure
 11218  00026A  EC94  F028         	call	_memcpy	;wreg free
 11219                           
 11220                           ; BSR set to: 0
 11221                           ;lorawan.c: 1212: AESCmac(loRa.activationParameters.mcastNetworkSessionKey, aesBuffer, &
      +                          radioBuffer[0], bufferLength - sizeof(computedMic) + sizeof (aesBuffer));
 11222  00026E  0E66               	movlw	low (_loRa+102)
 11223  000270  6FC8               	movwf	AESCmac@key& (0+255),b
 11224  000272  0E02               	movlw	high (_loRa+102)
 11225  000274  6FC9               	movwf	(AESCmac@key+1)& (0+255),b
 11226  000276  0EB5               	movlw	low _aesBuffer
 11227  000278  DA9B               	call	PL148	;call to abstracted procedure
 11228  00027A  ECD2  F008         	call	_AESCmac	;wreg free
 11229                           
 11230                           ; BSR set to: 0
 11231                           ;lorawan.c: 1214: memcpy(&computedMic, aesBuffer, sizeof(computedMic));
 11232  00027E  0EF0               	movlw	low LORAWAN_RxDone@computedMic
 11233  000280  DA5C               	call	PL98	;call to abstracted procedure
 11234  000282  EC94  F028         	call	_memcpy	;wreg free
 11235                           
 11236                           ; BSR set to: 0
 11237                           ;lorawan.c: 1215: extractedMic = ExtractMic (&buffer[0], bufferLength);
 11238  000286  DABF               	call	PL188	;call to abstracted procedure
 11239  000288  EC40  F02B         	call	_ExtractMic	;wreg free
 11240  00028C  DA79               	call	PL126	;call to abstracted procedure
 11241                           
 11242                           ; BSR set to: 0
 11243                           ;lorawan.c: 1217: if (computedMic != extractedMic)
 11244  00028E  51E8               	movf	LORAWAN_RxDone@extractedMic& (0+255),w,b
 11245  000290  19F0               	xorwf	LORAWAN_RxDone@computedMic& (0+255),w,b
 11246  000292  E1DA               	bnz	l14190
 11247  000294  51E9               	movf	(LORAWAN_RxDone@extractedMic+1)& (0+255),w,b
 11248  000296  19F1               	xorwf	(LORAWAN_RxDone@computedMic+1)& (0+255),w,b
 11249  000298  E1D7               	bnz	l14190
 11250  00029A  51EA               	movf	(LORAWAN_RxDone@extractedMic+2)& (0+255),w,b
 11251  00029C  19F2               	xorwf	(LORAWAN_RxDone@computedMic+2)& (0+255),w,b
 11252  00029E  E1D4               	bnz	l14190
 11253  0002A0  51EB               	movf	(LORAWAN_RxDone@extractedMic+3)& (0+255),w,b
 11254  0002A2  19F3               	xorwf	(LORAWAN_RxDone@computedMic+3)& (0+255),w,b
 11255  0002A4  E1D1               	bnz	l14190
 11256                           
 11257                           ; BSR set to: 0
 11258                           ;lorawan.c: 1222: }
 11259                           ;lorawan.c: 1224: if (hdr->members.fCnt >= loRa.fMcastCntDown.members.valueLow)
 11260  0002A6  DA13               	call	PL26	;call to abstracted procedure
 11261  0002A8  510E               	movf	(_loRa+14)& (0+255),w,b
 11262  0002AA  5CDE               	subwf	postinc2,w,c
 11263  0002AC  510F               	movf	(_loRa+15)& (0+255),w,b
 11264  0002AE  58DE               	subwfb	postinc2,w,c
 11265  0002B0  E322               	bnc	l14230
 11266                           
 11267                           ; BSR set to: 2
 11268                           ;lorawan.c: 1225: {
 11269                           ;lorawan.c: 1226: if ( (hdr->members.fCnt - loRa.fMcastCntDown.members.valueLow) > loRa.
      +                          protocolParameters.maxMultiFcntGap )
 11270  0002B2  DA05               	call	PL24	;call to abstracted procedure
 11271  0002B4  DACB               	call	PL258	;call to abstracted procedure
 11272  0002B6  510E               	movf	(_loRa+14)& (0+255),w,b
 11273  0002B8  0100               	movlb	0	; () banked
 11274  0002BA  5FE0               	subwf	??_LORAWAN_RxDone& (0+255),f,b
 11275  0002BC  0102               	movlb	2	; () banked
 11276  0002BE  510F               	movf	(_loRa+15)& (0+255),w,b
 11277  0002C0  DAF4               	call	PL428	;call to abstracted procedure
 11278  0002C2  5D9E               	subwf	(_loRa+158)& (0+255),w,b
 11279  0002C4  0100               	movlb	0	; () banked
 11280  0002C6  51E1               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 11281  0002C8  0102               	movlb	2	; () banked
 11282  0002CA  599F               	subwfb	(_loRa+159)& (0+255),w,b
 11283  0002CC  E20E               	bc	l14228
 11284  0002CE                     l14216:
 11285                           
 11286                           ; BSR set to: 2
 11287                           ;lorawan.c: 1227: {
 11288                           ;lorawan.c: 1228: if (rxPayload.RxAppData != (0))
 11289  0002CE  0101               	movlb	1	; () banked
 11290  0002D0  5179               	movf	_rxPayload& (0+255),w,b
 11291  0002D2  117A               	iorwf	(_rxPayload+1)& (0+255),w,b
 11292  0002D4  E0B9               	bz	l14190
 11293                           
 11294                           ; BSR set to: 1
 11295                           ;lorawan.c: 1229: {
 11296                           ;lorawan.c: 1230: rxPayload.RxAppData ((0), 0, MCAST_RE_KEYING_NEEDED);
 11297  0002D6  EC96  F00C         	call	PL48	;call to abstracted procedure
 11298  0002DA  0E05               	movlw	5
 11299  0002DC  6F63               	movwf	RxDataDone@status& (0+255),b
 11300  0002DE  D801               	call	u16158
 11301  0002E0  D7B3               	goto	l14190
 11302  0002E2                     u16158:
 11303  0002E2  0005               	push	
 11304  0002E4  0101               	movlb	1	; () banked
 11305  0002E6  6EFA               	movwf	pclath,c
 11306  0002E8  D062               	goto	L6
 11307  0002EA                     l14228:
 11308                           
 11309                           ; BSR set to: 2
 11310                           ;lorawan.c: 1237: else
 11311                           ;lorawan.c: 1238: {
 11312                           ;lorawan.c: 1239: loRa.fMcastCntDown.members.valueLow = hdr->members.fCnt;
 11313  0002EA  D9E9               	call	PL24	;call to abstracted procedure
 11314  0002EC  CFDE F20E          	movff	postinc2,_loRa+14
 11315  0002F0  CFDD F20F          	movff	postdec2,_loRa+15
 11316  0002F4  D00D               	goto	l14248
 11317  0002F6                     l14230:
 11318                           
 11319                           ; BSR set to: 2
 11320                           ;lorawan.c: 1242: else
 11321                           ;lorawan.c: 1243: {
 11322                           ;lorawan.c: 1244: if ( (0 == hdr->members.fCnt) && (0xFFFF == loRa.fMcastCntDown.members
      +                          .valueLow) )
 11323  0002F6  D9E3               	call	PL24	;call to abstracted procedure
 11324  0002F8  50DE               	movf	postinc2,w,c
 11325  0002FA  10DE               	iorwf	postinc2,w,c
 11326  0002FC  E1E8               	bnz	l14216
 11327                           
 11328                           ; BSR set to: 0
 11329  0002FE  0102               	movlb	2	; () banked
 11330  000300  290E               	incf	(_loRa+14)& (0+255),w,b
 11331  000302  E1E5               	bnz	l14216
 11332  000304  290F               	incf	(_loRa+15)& (0+255),w,b
 11333  000306  E1E3               	bnz	l14216
 11334                           
 11335                           ; BSR set to: 2
 11336                           ;lorawan.c: 1245: {
 11337                           ;lorawan.c: 1246: loRa.fMcastCntDown.members.valueLow = 0;
 11338  000308  6B0E               	clrf	(_loRa+14)& (0+255),b
 11339  00030A  6B0F               	clrf	(_loRa+15)& (0+255),b
 11340                           
 11341                           ; BSR set to: 2
 11342                           ;lorawan.c: 1247: loRa.fMcastCntDown.members.valueHigh ++;
 11343  00030C  4B10               	infsnz	(_loRa+16)& (0+255),f,b
 11344  00030E  2B11               	incf	(_loRa+17)& (0+255),f,b
 11345  000310                     l14248:
 11346                           
 11347                           ;lorawan.c: 1259: }
 11348                           ;lorawan.c: 1260: }
 11349                           ;lorawan.c: 1262: if (loRa.fMcastCntDown.value == (4294967295UL))
 11350  000310  0102               	movlb	2	; () banked
 11351  000312  290E               	incf	(_loRa+14)& (0+255),w,b
 11352  000314  E107               	bnz	l14260
 11353  000316  290F               	incf	(_loRa+15)& (0+255),w,b
 11354  000318  E105               	bnz	l14260
 11355  00031A  2910               	incf	(_loRa+16)& (0+255),w,b
 11356  00031C  E103               	bnz	l14260
 11357  00031E  2911               	incf	(_loRa+17)& (0+255),w,b
 11358  000320  E101               	bnz	l14260
 11359  000322  D7D5               	goto	l14216
 11360  000324                     l14260:
 11361                           
 11362                           ; BSR set to: 2
 11363                           ;lorawan.c: 1272: }
 11364                           ;lorawan.c: 1274: if (CLASS_C_RX2_1_OPEN == loRa.macStatus.macState)
 11365  000324  5102               	movf	(_loRa+2)& (0+255),w,b
 11366  000326  0B0F               	andlw	15
 11367  000328  0A08               	xorlw	8
 11368  00032A  E108               	bnz	l14264
 11369                           
 11370                           ; BSR set to: 2
 11371                           ;lorawan.c: 1275: {
 11372                           ;lorawan.c: 1276: SwTimerStop (loRa.receiveWindow1TimerId);
 11373  00032C  51E4               	movf	(_loRa+228)& (0+255),w,b
 11374  00032E  EC68  F030         	call	_SwTimerStop
 11375                           
 11376                           ;lorawan.c: 1277: SwTimerStop (loRa.receiveWindow2TimerId);
 11377  000332  0102               	movlb	2	; () banked
 11378  000334  51E5               	movf	(_loRa+229)& (0+255),w,b
 11379  000336  EC68  F030         	call	_SwTimerStop
 11380                           
 11381                           ;lorawan.c: 1278: }
 11382  00033A  D007               	goto	l14268
 11383  00033C                     l14264:
 11384                           
 11385                           ; BSR set to: 2
 11386                           ;lorawan.c: 1279: else if (RX1_OPEN == loRa.macStatus.macState)
 11387  00033C  5102               	movf	(_loRa+2)& (0+255),w,b
 11388  00033E  0B0F               	andlw	15
 11389  000340  0A03               	xorlw	3
 11390  000342  E103               	bnz	l14268
 11391                           
 11392                           ; BSR set to: 2
 11393                           ;lorawan.c: 1280: {
 11394                           ;lorawan.c: 1281: SwTimerStop (loRa.receiveWindow2TimerId);
 11395  000344  51E5               	movf	(_loRa+229)& (0+255),w,b
 11396  000346  EC68  F030         	call	_SwTimerStop
 11397  00034A                     l14268:
 11398                           
 11399                           ;lorawan.c: 1282: }
 11400                           ;lorawan.c: 1284: buffer = buffer + 8;
 11401  00034A  DA9F               	call	PL336	;call to abstracted procedure
 11402                           
 11403                           ; BSR set to: 1
 11404                           ;lorawan.c: 1286: if ( (sizeof(extractedMic) + hdr->members.fCtrl.fOptsLen + 8) != buffe
      +                          rLength)
 11405  00034C  D9D6               	call	PL60	;call to abstracted procedure
 11406  00034E  D9C7               	call	PL34	;call to abstracted procedure
 11407  000350  DA6A               	call	PL220	;call to abstracted procedure
 11408  000352  E103               	bnz	u16230
 11409  000354  51E1               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 11410  000356  19E3               	xorwf	(??_LORAWAN_RxDone+3)& (0+255),w,b
 11411  000358  E01E               	bz	l665
 11412  00035A                     u16230:
 11413                           
 11414                           ; BSR set to: 0
 11415                           ;lorawan.c: 1287: {
 11416                           ;lorawan.c: 1288: fPort = *(buffer++);
 11417  00035A  DA72               	call	PL234	;call to abstracted procedure
 11418  00035C  6FE5               	movwf	LORAWAN_RxDone@fPort& (0+255),b
 11419                           
 11420                           ; BSR set to: 0
 11421  00035E  0101               	movlb	1	; () banked
 11422  000360  4B6F               	infsnz	LORAWAN_RxDone@buffer& (0+255),f,b
 11423  000362  2B70               	incf	(LORAWAN_RxDone@buffer+1)& (0+255),f,b
 11424                           
 11425                           ; BSR set to: 1
 11426                           ;lorawan.c: 1290: frmPayloadLength = bufferLength - 8 - sizeof (extractedMic);
 11427  000364  5171               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 11428  000366  0FF4               	addlw	244
 11429  000368  0100               	movlb	0	; () banked
 11430  00036A  6FF6               	movwf	LORAWAN_RxDone@frmPayloadLength& (0+255),b
 11431                           
 11432                           ; BSR set to: 0
 11433                           ;lorawan.c: 1291: bufferIndex = 16 + 9;
 11434  00036C  0E19               	movlw	25
 11435  00036E  6FEC               	movwf	LORAWAN_RxDone@bufferIndex& (0+255),b
 11436                           
 11437                           ; BSR set to: 0
 11438                           ;lorawan.c: 1293: EncryptFRMPayload (buffer, frmPayloadLength - 1, 1, loRa.fMcastCntDown
      +                          .value, loRa.activationParameters.mcastApplicationSessionKey, bufferIndex, radioBuffer, 
      +                          1);
 11439  000370  DA10               	call	PL128	;call to abstracted procedure
 11440  000372  C20E  F0A4         	movff	_loRa+14,EncryptFRMPayload@frameCounter
 11441  000376  C20F  F0A5         	movff	_loRa+15,EncryptFRMPayload@frameCounter+1
 11442  00037A  C210  F0A6         	movff	_loRa+16,EncryptFRMPayload@frameCounter+2
 11443  00037E  C211  F0A7         	movff	_loRa+17,EncryptFRMPayload@frameCounter+3
 11444  000382  0E76               	movlw	low (_loRa+118)
 11445  000384  6FA8               	movwf	EncryptFRMPayload@key& (0+255),b
 11446  000386  0E02               	movlw	high (_loRa+118)
 11447  000388  DA20               	call	PL152	;call to abstracted procedure
 11448  00038A  0E01               	movlw	1
 11449  00038C  6FAD               	movwf	EncryptFRMPayload@multicastStatus& (0+255),b
 11450  00038E  ECDD  F015         	call	_EncryptFRMPayload	;wreg free
 11451                           
 11452                           ; BSR set to: 0
 11453                           ;lorawan.c: 1294: packet = buffer - 1;
 11454  000392  DA27               	call	PL184	;call to abstracted procedure
 11455                           
 11456                           ;lorawan.c: 1295: }
 11457  000394  D001               	goto	l666
 11458  000396                     l665:
 11459                           
 11460                           ; BSR set to: 0
 11461                           ;lorawan.c: 1296: else
 11462                           ;lorawan.c: 1297: {
 11463                           ;lorawan.c: 1298: frmPayloadLength = 0;
 11464                           
 11465                           ;lorawan.c: 1299: packet = (0);
 11466  000396  DA8E               	call	PL450	;call to abstracted procedure
 11467  000398                     l666:
 11468                           
 11469                           ; BSR set to: 0
 11470                           ;lorawan.c: 1300: }
 11471                           ;lorawan.c: 1302: loRa.macStatus.rxDone = 1;
 11472  000398  0102               	movlb	2	; () banked
 11473  00039A  8303               	bsf	(_loRa+3)& (0+255),1,b
 11474                           
 11475                           ; BSR set to: 2
 11476                           ;lorawan.c: 1303: loRa.macStatus.macState = IDLE;
 11477                           
 11478                           ; BSR set to: 2
 11479                           ;lorawan.c: 1305: if (rxPayload.RxAppData != (0))
 11480  00039C  DA03               	call	PL142	;call to abstracted procedure
 11481  00039E  E101 D753          	bz	l14190
 11482                           
 11483                           ; BSR set to: 1
 11484                           ;lorawan.c: 1306: {
 11485                           ;lorawan.c: 1307: rxPayload.RxAppData (packet, frmPayloadLength, MAC_OK);
 11486  0003A2  D9C1               	call	PL96	;call to abstracted procedure
 11487  0003A4  D801               	call	u16258
 11488  0003A6  D750               	goto	l14190
 11489  0003A8                     u16258:
 11490  0003A8  0005               	push	
 11491  0003AA  0101               	movlb	1	; () banked
 11492  0003AC  6EFA               	movwf	pclath,c
 11493  0003AE                     L6:
 11494  0003AE  5179               	movf	_rxPayload& (0+255),w,b
 11495  0003B0  6EFD               	movwf	tosl,c
 11496  0003B2  517A               	movf	(_rxPayload+1)& (0+255),w,b
 11497  0003B4  6EFE               	movwf	tosh,c
 11498  0003B6  50F8               	movf	tblptru,w,c
 11499  0003B8  6EFF               	movwf	tosu,c
 11500  0003BA  50FA               	movf	pclath,w,c
 11501  0003BC  0012               	return		;indir
 11502  0003BE                     l14296:
 11503                           
 11504                           ; BSR set to: 2
 11505                           ;lorawan.c: 1313: }
 11506                           ;lorawan.c: 1316: if (hdr->members.devAddr.value != loRa.activationParameters.deviceAddr
      +                          ess.value)
 11507  0003BE  DA3C               	call	PL222	;call to abstracted procedure
 11508  0003C0  D997               	call	PL42	;call to abstracted procedure
 11509  0003C2  0102               	movlb	2	; () banked
 11510  0003C4  511E               	movf	(_loRa+30)& (0+255),w,b
 11511  0003C6  18DE               	xorwf	postinc2,w,c
 11512  0003C8  E109               	bnz	u16260
 11513  0003CA  511F               	movf	(_loRa+31)& (0+255),w,b
 11514  0003CC  18DE               	xorwf	postinc2,w,c
 11515  0003CE  E106               	bnz	u16260
 11516  0003D0  5120               	movf	(_loRa+32)& (0+255),w,b
 11517  0003D2  18DE               	xorwf	postinc2,w,c
 11518  0003D4  E103               	bnz	u16260
 11519  0003D6  5121               	movf	(_loRa+33)& (0+255),w,b
 11520  0003D8  18DE               	xorwf	postinc2,w,c
 11521  0003DA  E008               	bz	l14308
 11522  0003DC                     u16260:
 11523                           
 11524                           ; BSR set to: 2
 11525                           ;lorawan.c: 1317: {
 11526                           ;lorawan.c: 1318: SetReceptionNotOkState();
 11527  0003DC  EC61  F026         	call	_SetReceptionNotOkState	;wreg free
 11528  0003E0                     l14300:
 11529                           
 11530                           ;lorawan.c: 1319: if (CLASS_C == loRa.deviceClass)
 11531  0003E0  0E02               	movlw	2
 11532  0003E2  0102               	movlb	2	; () banked
 11533  0003E4                     L7:
 11534  0003E4  1912               	xorwf	(_loRa+18)& (0+255),w,b
 11535  0003E6  E101 D72F          	bz	l14190
 11536  0003EA  0012               	return	
 11537  0003EC                     l14308:
 11538                           
 11539                           ; BSR set to: 2
 11540                           ;lorawan.c: 1325: }
 11541                           ;lorawan.c: 1327: AssembleEncryptionBlock (1, hdr->members.fCnt, bufferLength - sizeof (
      +                          computedMic), 0x49, 0);
 11542  0003EC  D968               	call	PL24	;call to abstracted procedure
 11543  0003EE  CFDE F0E0          	movff	postinc2,??_LORAWAN_RxDone
 11544  0003F2  D9AD               	call	PL110	;call to abstracted procedure
 11545  0003F4  6B70               	clrf	AssembleEncryptionBlock@multicastStatus& (0+255),b
 11546  0003F6  0E01               	movlw	1
 11547  0003F8  EC8F  F021         	call	_AssembleEncryptionBlock
 11548                           
 11549                           ;lorawan.c: 1328: memcpy (&radioBuffer[0], aesBuffer, sizeof (aesBuffer));
 11550  0003FC  D9EE               	call	PL162	;call to abstracted procedure
 11551  0003FE  D9B7               	call	PL124	;call to abstracted procedure
 11552  000400  EC94  F028         	call	_memcpy	;wreg free
 11553                           
 11554                           ;lorawan.c: 1329: memcpy (&radioBuffer[16], buffer, bufferLength-sizeof(computedMic));
 11555  000404  D97F               	call	PL90	;call to abstracted procedure
 11556  000406  EC94  F028         	call	_memcpy	;wreg free
 11557                           
 11558                           ; BSR set to: 0
 11559                           ;lorawan.c: 1330: AESCmac(loRa.activationParameters.networkSessionKey, aesBuffer, &radio
      +                          Buffer[0], bufferLength - sizeof(computedMic) + sizeof (aesBuffer));
 11560  00040A  EC73  F00B         	call	PL212	;call to abstracted procedure
 11561  00040E  D9D0               	call	PL148	;call to abstracted procedure
 11562  000410  ECD2  F008         	call	_AESCmac	;wreg free
 11563                           
 11564                           ; BSR set to: 0
 11565                           ;lorawan.c: 1332: memcpy(&computedMic, aesBuffer, sizeof(computedMic));
 11566  000414  0EF0               	movlw	low LORAWAN_RxDone@computedMic
 11567  000416  D991               	call	PL98	;call to abstracted procedure
 11568  000418  EC94  F028         	call	_memcpy	;wreg free
 11569                           
 11570                           ; BSR set to: 0
 11571                           ;lorawan.c: 1333: extractedMic = ExtractMic (&buffer[0], bufferLength);
 11572  00041C  D9F4               	call	PL188	;call to abstracted procedure
 11573  00041E  EC40  F02B         	call	_ExtractMic	;wreg free
 11574  000422  D9AE               	call	PL126	;call to abstracted procedure
 11575                           
 11576                           ; BSR set to: 0
 11577                           ;lorawan.c: 1336: if (computedMic != extractedMic)
 11578  000424  51E8               	movf	LORAWAN_RxDone@extractedMic& (0+255),w,b
 11579  000426  19F0               	xorwf	LORAWAN_RxDone@computedMic& (0+255),w,b
 11580  000428  E109               	bnz	u16280
 11581  00042A  51E9               	movf	(LORAWAN_RxDone@extractedMic+1)& (0+255),w,b
 11582  00042C  19F1               	xorwf	(LORAWAN_RxDone@computedMic+1)& (0+255),w,b
 11583  00042E  E106               	bnz	u16280
 11584  000430  51EA               	movf	(LORAWAN_RxDone@extractedMic+2)& (0+255),w,b
 11585  000432  19F2               	xorwf	(LORAWAN_RxDone@computedMic+2)& (0+255),w,b
 11586  000434  E103               	bnz	u16280
 11587  000436  51EB               	movf	(LORAWAN_RxDone@extractedMic+3)& (0+255),w,b
 11588  000438  19F3               	xorwf	(LORAWAN_RxDone@computedMic+3)& (0+255),w,b
 11589  00043A  E003               	bz	l14328
 11590  00043C                     u16280:
 11591                           
 11592                           ; BSR set to: 0
 11593                           ;lorawan.c: 1337: {
 11594                           ;lorawan.c: 1338: SetReceptionNotOkState();
 11595  00043C  EC61  F026         	call	_SetReceptionNotOkState	;wreg free
 11596  000440  D7CF               	goto	l14300
 11597  000442                     l14328:
 11598                           
 11599                           ; BSR set to: 0
 11600                           ;lorawan.c: 1345: }
 11601                           ;lorawan.c: 1348: if (hdr->members.fCnt >= loRa.fCntDown.members.valueLow)
 11602  000442  D945               	call	PL26	;call to abstracted procedure
 11603  000444  510A               	movf	(_loRa+10)& (0+255),w,b
 11604  000446  5CDE               	subwf	postinc2,w,c
 11605  000448  510B               	movf	(_loRa+11)& (0+255),w,b
 11606  00044A  58DE               	subwfb	postinc2,w,c
 11607  00044C  E329               	bnc	l14358
 11608                           
 11609                           ; BSR set to: 2
 11610                           ;lorawan.c: 1349: {
 11611                           ;lorawan.c: 1350: if ((hdr->members.fCnt - loRa.fCntDown.members.valueLow) > loRa.protoc
      +                          olParameters.maxFcntGap)
 11612  00044E  D937               	call	PL24	;call to abstracted procedure
 11613  000450  D9FD               	call	PL258	;call to abstracted procedure
 11614  000452  510A               	movf	(_loRa+10)& (0+255),w,b
 11615  000454  0100               	movlb	0	; () banked
 11616  000456  5FE0               	subwf	??_LORAWAN_RxDone& (0+255),f,b
 11617  000458  0102               	movlb	2	; () banked
 11618  00045A  510B               	movf	(_loRa+11)& (0+255),w,b
 11619  00045C  DA26               	call	PL428	;call to abstracted procedure
 11620  00045E  5D9C               	subwf	(_loRa+156)& (0+255),w,b
 11621  000460  0100               	movlb	0	; () banked
 11622  000462  51E1               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 11623  000464  0102               	movlb	2	; () banked
 11624  000466  599D               	subwfb	(_loRa+157)& (0+255),w,b
 11625  000468  E218               	bc	l14356
 11626                           
 11627                           ; BSR set to: 2
 11628                           ;lorawan.c: 1351: {
 11629                           ;lorawan.c: 1352: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 0;
 11630  00046A  9100               	bcf	_loRa& (0+255),0,b
 11631                           
 11632                           ; BSR set to: 2
 11633                           ;lorawan.c: 1353: loRa.macStatus.macState = IDLE;
 11634                           
 11635                           ; BSR set to: 2
 11636                           ;lorawan.c: 1354: if (rxPayload.RxAppData != (0))
 11637  00046C  D99B               	call	PL142	;call to abstracted procedure
 11638  00046E  E012               	bz	l14342
 11639                           
 11640                           ; BSR set to: 1
 11641                           ;lorawan.c: 1355: {
 11642                           ;lorawan.c: 1356: loRa.lorawanMacStatus.synchronization = 0;
 11643  000470  0102               	movlb	2	; () banked
 11644  000472  9B00               	bcf	_loRa& (0+255),5,b
 11645                           
 11646                           ; BSR set to: 2
 11647                           ;lorawan.c: 1357: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
 11648  000474  EC96  F00C         	call	PL48	;call to abstracted procedure
 11649  000478  6F63               	movwf	RxDataDone@status& (0+255),b
 11650  00047A  D801               	call	u16338
 11651  00047C  D00B               	goto	l14342
 11652  00047E                     u16338:
 11653  00047E  0005               	push	
 11654  000480  0101               	movlb	1	; () banked
 11655  000482  6EFA               	movwf	pclath,c
 11656  000484  5179               	movf	_rxPayload& (0+255),w,b
 11657  000486  6EFD               	movwf	tosl,c
 11658  000488  517A               	movf	(_rxPayload+1)& (0+255),w,b
 11659  00048A  6EFE               	movwf	tosh,c
 11660  00048C  50F8               	movf	tblptru,w,c
 11661  00048E  6EFF               	movwf	tosu,c
 11662  000490  50FA               	movf	pclath,w,c
 11663  000492  0012               	return		;indir
 11664  000494                     l14342:
 11665                           
 11666                           ; BSR set to: 1
 11667                           ;lorawan.c: 1358: }
 11668                           ;lorawan.c: 1359: loRa.macStatus.rxDone = 0;
 11669  000494  0102               	movlb	2	; () banked
 11670  000496  9303               	bcf	(_loRa+3)& (0+255),1,b
 11671  000498  D01E               	goto	l14378
 11672  00049A                     l14356:
 11673                           
 11674                           ; BSR set to: 2
 11675                           ;lorawan.c: 1370: else
 11676                           ;lorawan.c: 1371: {
 11677                           ;lorawan.c: 1372: loRa.fCntDown.members.valueLow = hdr->members.fCnt;
 11678  00049A  D911               	call	PL24	;call to abstracted procedure
 11679  00049C  D9FC               	call	PL386	;call to abstracted procedure
 11680  00049E  D012               	goto	l14376
 11681  0004A0                     l14358:
 11682                           
 11683                           ; BSR set to: 2
 11684                           ;lorawan.c: 1375: else
 11685                           ;lorawan.c: 1376: {
 11686                           ;lorawan.c: 1377: if((hdr->members.fCnt == 0) && (loRa.fCntDown.members.valueLow == 0xFF
      +                          FF))
 11687  0004A0  D90E               	call	PL24	;call to abstracted procedure
 11688  0004A2  50DE               	movf	postinc2,w,c
 11689  0004A4  10DE               	iorwf	postinc2,w,c
 11690  0004A6  E10B               	bnz	l14366
 11691                           
 11692                           ; BSR set to: 0
 11693  0004A8  0102               	movlb	2	; () banked
 11694  0004AA  290A               	incf	(_loRa+10)& (0+255),w,b
 11695  0004AC  E108               	bnz	l14366
 11696  0004AE  290B               	incf	(_loRa+11)& (0+255),w,b
 11697  0004B0  E106               	bnz	l14366
 11698                           
 11699                           ; BSR set to: 2
 11700                           ;lorawan.c: 1378: {
 11701                           ;lorawan.c: 1380: loRa.fCntDown.members.valueLow = hdr->members.fCnt;
 11702  0004B2  D905               	call	PL24	;call to abstracted procedure
 11703  0004B4  D9F0               	call	PL386	;call to abstracted procedure
 11704                           
 11705                           ; BSR set to: 0
 11706                           ;lorawan.c: 1381: loRa.fCntDown.members.valueHigh ++;
 11707  0004B6  0102               	movlb	2	; () banked
 11708  0004B8  4B0C               	infsnz	(_loRa+12)& (0+255),f,b
 11709  0004BA  2B0D               	incf	(_loRa+13)& (0+255),f,b
 11710                           
 11711                           ;lorawan.c: 1382: }
 11712  0004BC  D003               	goto	l14376
 11713  0004BE                     l14366:
 11714                           
 11715                           ;lorawan.c: 1383: else
 11716                           ;lorawan.c: 1384: {
 11717                           ;lorawan.c: 1385: SetReceptionNotOkState();
 11718  0004BE  EC61  F026         	call	_SetReceptionNotOkState	;wreg free
 11719  0004C2  D78E               	goto	l14300
 11720  0004C4                     l14376:
 11721                           
 11722                           ;lorawan.c: 1393: }
 11723                           ;lorawan.c: 1394: }
 11724                           ;lorawan.c: 1396: if (loRa.fCntDown.value == (4294967295UL))
 11725  0004C4  0102               	movlb	2	; () banked
 11726  0004C6  290A               	incf	(_loRa+10)& (0+255),w,b
 11727  0004C8  E109               	bnz	l14388
 11728  0004CA  290B               	incf	(_loRa+11)& (0+255),w,b
 11729  0004CC  E107               	bnz	l14388
 11730  0004CE  290C               	incf	(_loRa+12)& (0+255),w,b
 11731  0004D0  E105               	bnz	l14388
 11732  0004D2  290D               	incf	(_loRa+13)& (0+255),w,b
 11733  0004D4  E103               	bnz	l14388
 11734  0004D6                     l14378:
 11735                           
 11736                           ; BSR set to: 2
 11737                           ;lorawan.c: 1397: {
 11738                           ;lorawan.c: 1400: loRa.macStatus.rejoinNeeded = 1;
 11739  0004D6  8304               	bsf	(_loRa+4)& (0+255),1,b
 11740                           
 11741                           ; BSR set to: 2
 11742                           ;lorawan.c: 1401: if (CLASS_C == loRa.deviceClass)
 11743  0004D8  0E02               	movlw	2
 11744  0004DA  D784               	goto	L7
 11745  0004DC                     l14388:
 11746                           
 11747                           ; BSR set to: 2
 11748                           ;lorawan.c: 1407: }
 11749                           ;lorawan.c: 1410: if (loRa.macStatus.macState == RX1_OPEN)
 11750  0004DC  5102               	movf	(_loRa+2)& (0+255),w,b
 11751  0004DE  0B0F               	andlw	15
 11752  0004E0  0A03               	xorlw	3
 11753  0004E2  E103               	bnz	l14392
 11754                           
 11755                           ; BSR set to: 2
 11756                           ;lorawan.c: 1411: {
 11757                           ;lorawan.c: 1412: SwTimerStop (loRa.receiveWindow2TimerId);
 11758  0004E4  51E5               	movf	(_loRa+229)& (0+255),w,b
 11759  0004E6  EC68  F030         	call	_SwTimerStop
 11760  0004EA                     l14392:
 11761                           
 11762                           ;lorawan.c: 1413: }
 11763                           ;lorawan.c: 1415: loRa.counterRepetitionsUnconfirmedUplink = 1;
 11764  0004EA  0E01               	movlw	1
 11765  0004EC  0102               	movlb	2	; () banked
 11766  0004EE  6FD8               	movwf	(_loRa+216)& (0+255),b
 11767                           
 11768                           ; BSR set to: 2
 11769                           ;lorawan.c: 1417: CheckFlags (hdr);
 11770  0004F0  C0F7  F060         	movff	LORAWAN_RxDone@hdr,CheckFlags@hdr
 11771  0004F4  C0F8  F061         	movff	LORAWAN_RxDone@hdr+1,CheckFlags@hdr+1
 11772  0004F8  EC4B  F02A         	call	_CheckFlags	;wreg free
 11773                           
 11774                           ;lorawan.c: 1419: if (hdr->members.fCtrl.fOptsLen != 0)
 11775  0004FC  0100               	movlb	0	; () banked
 11776  0004FE  D8EF               	call	PL34	;call to abstracted procedure
 11777  000500  E00C               	bz	l14400
 11778                           
 11779                           ; BSR set to: 0
 11780                           ;lorawan.c: 1420: {
 11781                           ;lorawan.c: 1421: buffer = MacExecuteCommands(hdr->members.MacCommands, hdr->members.fCt
      +                          rl.fOptsLen);
 11782  000502  0E08               	movlw	8
 11783  000504  25F7               	addwf	LORAWAN_RxDone@hdr& (0+255),w,b
 11784  000506  6FA4               	movwf	MacExecuteCommands@buffer& (0+255),b
 11785  000508  0E00               	movlw	0
 11786  00050A  21F8               	addwfc	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11787  00050C  6FA5               	movwf	(MacExecuteCommands@buffer+1)& (0+255),b
 11788  00050E  D8E7               	call	PL34	;call to abstracted procedure
 11789  000510  6FA6               	movwf	MacExecuteCommands@fOptsLen& (0+255),b
 11790  000512  EC5F  F012         	call	_MacExecuteCommands	;wreg free
 11791  000516  D9C4               	call	PL400	;call to abstracted procedure
 11792                           
 11793                           ;lorawan.c: 1422: }
 11794  000518  D001               	goto	l14402
 11795  00051A                     l14400:
 11796                           
 11797                           ; BSR set to: 0
 11798                           ;lorawan.c: 1423: else
 11799                           ;lorawan.c: 1424: {
 11800                           ;lorawan.c: 1425: buffer = buffer + 8;
 11801  00051A  D9B7               	call	PL336	;call to abstracted procedure
 11802  00051C                     l14402:
 11803                           
 11804                           ;lorawan.c: 1426: }
 11805                           ;lorawan.c: 1427: if ( (sizeof(extractedMic) + hdr->members.fCtrl.fOptsLen + 8) != buffe
      +                          rLength)
 11806  00051C  0101               	movlb	1	; () banked
 11807  00051E  D8ED               	call	PL60	;call to abstracted procedure
 11808  000520  D8DE               	call	PL34	;call to abstracted procedure
 11809  000522  D981               	call	PL220	;call to abstracted procedure
 11810  000524  E103               	bnz	u16420
 11811  000526  51E1               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 11812  000528  19E3               	xorwf	(??_LORAWAN_RxDone+3)& (0+255),w,b
 11813  00052A  E040               	bz	l686
 11814  00052C                     u16420:
 11815                           
 11816                           ; BSR set to: 0
 11817                           ;lorawan.c: 1428: {
 11818                           ;lorawan.c: 1429: fPort = *(buffer++);
 11819  00052C  D989               	call	PL234	;call to abstracted procedure
 11820  00052E  6FE5               	movwf	LORAWAN_RxDone@fPort& (0+255),b
 11821                           
 11822                           ; BSR set to: 0
 11823  000530  0101               	movlb	1	; () banked
 11824  000532  4B6F               	infsnz	LORAWAN_RxDone@buffer& (0+255),f,b
 11825  000534  2B70               	incf	(LORAWAN_RxDone@buffer+1)& (0+255),f,b
 11826                           
 11827                           ; BSR set to: 1
 11828                           ;lorawan.c: 1431: frmPayloadLength = bufferLength - 8 - hdr->members.fCtrl.fOptsLen - si
      +                          zeof (extractedMic);
 11829  000536  0100               	movlb	0	; () banked
 11830  000538  D8D2               	call	PL34	;call to abstracted procedure
 11831  00053A  6FE0               	movwf	??_LORAWAN_RxDone& (0+255),b
 11832  00053C  51E0               	movf	??_LORAWAN_RxDone& (0+255),w,b
 11833  00053E  0101               	movlb	1	; () banked
 11834  000540  5D71               	subwf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 11835  000542  0FF4               	addlw	244
 11836  000544  0100               	movlb	0	; () banked
 11837  000546  6FF6               	movwf	LORAWAN_RxDone@frmPayloadLength& (0+255),b
 11838                           
 11839                           ; BSR set to: 0
 11840                           ;lorawan.c: 1432: bufferIndex = 16 + 8 + hdr->members.fCtrl.fOptsLen + sizeof (fPort);
 11841  000548  D8CA               	call	PL34	;call to abstracted procedure
 11842  00054A  0F19               	addlw	25
 11843  00054C  6FEC               	movwf	LORAWAN_RxDone@bufferIndex& (0+255),b
 11844                           
 11845                           ; BSR set to: 0
 11846                           ;lorawan.c: 1434: if (fPort != 0)
 11847  00054E  51E5               	movf	LORAWAN_RxDone@fPort& (0+255),w,b
 11848  000550  E00A               	bz	l14418
 11849                           
 11850                           ; BSR set to: 0
 11851                           ;lorawan.c: 1435: {
 11852                           ;lorawan.c: 1436: EncryptFRMPayload (buffer, frmPayloadLength - 1, 1, loRa.fCntDown.valu
      +                          e, loRa.activationParameters.applicationSessionKey, bufferIndex, radioBuffer, 0);
 11853  000552  D91F               	call	PL128	;call to abstracted procedure
 11854  000554  D95F               	call	PL218	;call to abstracted procedure
 11855  000556  EC8C  F00B         	call	PL416	;call to abstracted procedure
 11856  00055A  D937               	call	PL152	;call to abstracted procedure
 11857  00055C  6BAD               	clrf	EncryptFRMPayload@multicastStatus& (0+255),b
 11858  00055E  ECDD  F015         	call	_EncryptFRMPayload	;wreg free
 11859                           
 11860                           ; BSR set to: 0
 11861                           ;lorawan.c: 1437: packet = buffer - 1;
 11862  000562  D93F               	call	PL184	;call to abstracted procedure
 11863                           
 11864                           ;lorawan.c: 1438: }
 11865  000564  D024               	goto	l14428
 11866  000566                     l14418:
 11867                           
 11868                           ; BSR set to: 0
 11869                           ;lorawan.c: 1439: else
 11870                           ;lorawan.c: 1440: {
 11871                           ;lorawan.c: 1442: if(bufferLength > (13 + hdr->members.fCtrl.fOptsLen))
 11872  000566  0101               	movlb	1	; () banked
 11873  000568  D8C8               	call	PL60	;call to abstracted procedure
 11874  00056A  D8B9               	call	PL34	;call to abstracted procedure
 11875  00056C  6FE2               	movwf	(??_LORAWAN_RxDone+2)& (0+255),b
 11876  00056E  6BE3               	clrf	(??_LORAWAN_RxDone+3)& (0+255),b
 11877  000570  0E0D               	movlw	13
 11878  000572  27E2               	addwf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 11879  000574  0E00               	movlw	0
 11880  000576  23E3               	addwfc	(??_LORAWAN_RxDone+3)& (0+255),f,b
 11881  000578  51E0               	movf	??_LORAWAN_RxDone& (0+255),w,b
 11882  00057A  5DE2               	subwf	(??_LORAWAN_RxDone+2)& (0+255),w,b
 11883  00057C  51E3               	movf	(??_LORAWAN_RxDone+3)& (0+255),w,b
 11884  00057E  0A80               	xorlw	128
 11885  000580  6FE4               	movwf	(??_LORAWAN_RxDone+4)& (0+255),b
 11886  000582  51E1               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 11887  000584  0A80               	xorlw	128
 11888  000586  59E4               	subwfb	(??_LORAWAN_RxDone+4)& (0+255),w,b
 11889  000588  E211               	bc	l686
 11890                           
 11891                           ; BSR set to: 0
 11892                           ;lorawan.c: 1443: {
 11893                           ;lorawan.c: 1445: EncryptFRMPayload (buffer, frmPayloadLength - 1, 1, loRa.fCntDown.valu
      +                          e, loRa.activationParameters.networkSessionKey, bufferIndex, radioBuffer, 0);
 11894  00058A  D903               	call	PL128	;call to abstracted procedure
 11895  00058C  D943               	call	PL218	;call to abstracted procedure
 11896  00058E  EC88  F00B         	call	PL414	;call to abstracted procedure
 11897  000592  D91B               	call	PL152	;call to abstracted procedure
 11898  000594  6BAD               	clrf	EncryptFRMPayload@multicastStatus& (0+255),b
 11899  000596  ECDD  F015         	call	_EncryptFRMPayload	;wreg free
 11900                           
 11901                           ; BSR set to: 0
 11902                           ;lorawan.c: 1446: buffer = MacExecuteCommands(buffer, frmPayloadLength - 1 );
 11903  00059A  C16F  F0A4         	movff	LORAWAN_RxDone@buffer,MacExecuteCommands@buffer
 11904  00059E  C170  F0A5         	movff	LORAWAN_RxDone@buffer+1,MacExecuteCommands@buffer+1
 11905  0005A2  05F6               	decf	LORAWAN_RxDone@frmPayloadLength& (0+255),w,b
 11906  0005A4  6FA6               	movwf	MacExecuteCommands@fOptsLen& (0+255),b
 11907  0005A6  EC5F  F012         	call	_MacExecuteCommands	;wreg free
 11908  0005AA  D97A               	call	PL400	;call to abstracted procedure
 11909  0005AC                     l686:
 11910                           
 11911                           ; BSR set to: 0
 11912                           ;lorawan.c: 1453: else
 11913                           ;lorawan.c: 1454: {
 11914                           ;lorawan.c: 1455: frmPayloadLength = 0;
 11915                           
 11916                           ;lorawan.c: 1456: packet = (0);
 11917  0005AC  D983               	call	PL450	;call to abstracted procedure
 11918  0005AE                     l14428:
 11919                           
 11920                           ; BSR set to: 0
 11921                           ;lorawan.c: 1457: }
 11922                           ;lorawan.c: 1459: loRa.counterRepetitionsUnconfirmedUplink = 1;
 11923  0005AE  0E01               	movlw	1
 11924  0005B0  0102               	movlb	2	; () banked
 11925  0005B2  6FD8               	movwf	(_loRa+216)& (0+255),b
 11926                           
 11927                           ; BSR set to: 2
 11928                           ;lorawan.c: 1461: loRa.adrAckCnt = 0;
 11929  0005B4  6BD0               	clrf	(_loRa+208)& (0+255),b
 11930  0005B6  6BD1               	clrf	(_loRa+209)& (0+255),b
 11931                           
 11932                           ; BSR set to: 2
 11933                           ;lorawan.c: 1462: loRa.counterAdrAckDelay = 0;
 11934  0005B8  6BEE               	clrf	(_loRa+238)& (0+255),b
 11935                           
 11936                           ; BSR set to: 2
 11937                           ;lorawan.c: 1463: loRa.lorawanMacStatus.adrAckRequest = 0;
 11938  0005BA  9900               	bcf	_loRa& (0+255),4,b
 11939                           
 11940                           ; BSR set to: 2
 11941                           ;lorawan.c: 1465: loRa.macStatus.rxDone = 1;
 11942  0005BC  8303               	bsf	(_loRa+3)& (0+255),1,b
 11943                           
 11944                           ; BSR set to: 2
 11945                           ;lorawan.c: 1467: if ( loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage == 1 )
 11946  0005BE  A100               	btfss	_loRa& (0+255),0,b
 11947  0005C0  D034               	goto	l14472
 11948                           
 11949                           ; BSR set to: 2
 11950                           ;lorawan.c: 1468: {
 11951                           ;lorawan.c: 1469: if (hdr->members.fCtrl.ack == 1)
 11952  0005C2  0100               	movlb	0	; () banked
 11953  0005C4  EE20 F005          	lfsr	2,5
 11954  0005C8  D893               	call	PL42	;call to abstracted procedure
 11955  0005CA  AADF               	btfss	indf2,5,c
 11956  0005CC  D02B               	goto	l14470
 11957                           
 11958                           ; BSR set to: 0
 11959                           ;lorawan.c: 1470: {
 11960                           ;lorawan.c: 1471: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 0;
 11961  0005CE  0102               	movlb	2	; () banked
 11962  0005D0  9100               	bcf	_loRa& (0+255),0,b
 11963                           
 11964                           ; BSR set to: 2
 11965                           ;lorawan.c: 1472: loRa.macStatus.macState = IDLE;
 11966                           
 11967                           ; BSR set to: 2
 11968                           ;lorawan.c: 1473: if (rxPayload.RxAppData != (0))
 11969  0005D2  D8E8               	call	PL142	;call to abstracted procedure
 11970  0005D4  E010               	bz	l14452
 11971                           
 11972                           ; BSR set to: 1
 11973                           ;lorawan.c: 1474: {
 11974                           ;lorawan.c: 1475: loRa.lorawanMacStatus.synchronization = 0;
 11975  0005D6  0102               	movlb	2	; () banked
 11976  0005D8  9B00               	bcf	_loRa& (0+255),5,b
 11977                           
 11978                           ; BSR set to: 2
 11979                           ;lorawan.c: 1476: rxPayload.RxAppData (packet, frmPayloadLength, MAC_OK);
 11980  0005DA  D8A5               	call	PL96	;call to abstracted procedure
 11981  0005DC  D801               	call	u16488
 11982  0005DE  D00B               	goto	l14452
 11983  0005E0                     u16488:
 11984  0005E0  0005               	push	
 11985  0005E2  0101               	movlb	1	; () banked
 11986  0005E4  6EFA               	movwf	pclath,c
 11987  0005E6  5179               	movf	_rxPayload& (0+255),w,b
 11988  0005E8  6EFD               	movwf	tosl,c
 11989  0005EA  517A               	movf	(_rxPayload+1)& (0+255),w,b
 11990  0005EC  6EFE               	movwf	tosh,c
 11991  0005EE  50F8               	movf	tblptru,w,c
 11992  0005F0  6EFF               	movwf	tosu,c
 11993  0005F2  50FA               	movf	pclath,w,c
 11994  0005F4  0012               	return		;indir
 11995  0005F6                     l14452:
 11996                           
 11997                           ; BSR set to: 1
 11998                           ;lorawan.c: 1477: }
 11999                           ;lorawan.c: 1478: loRa.macStatus.rxDone = 0;
 12000  0005F6  0102               	movlb	2	; () banked
 12001  0005F8  9303               	bcf	(_loRa+3)& (0+255),1,b
 12002                           
 12003                           ; BSR set to: 2
 12004                           ;lorawan.c: 1479: if ( (loRa.macStatus.automaticReply == 1) && (loRa.lorawanMacStatus.sy
      +                          nchronization == 0) && ( (loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage == 1) |
      +                          | (loRa.lorawanMacStatus.fPending == 1) ) )
 12005  0005FA  BB02               	btfsc	(_loRa+2)& (0+255),5,b
 12006                           
 12007                           ; BSR set to: 2
 12008  0005FC  BB00               	btfsc	_loRa& (0+255),5,b
 12009  0005FE  D6F0               	goto	l14300
 12010                           
 12011                           ; BSR set to: 2
 12012  000600  B300               	btfsc	_loRa& (0+255),1,b
 12013  000602  D002               	goto	l14462
 12014                           
 12015                           ; BSR set to: 2
 12016  000604  A700               	btfss	_loRa& (0+255),3,b
 12017  000606  D6EC               	goto	l14300
 12018  000608                     l14462:
 12019                           
 12020                           ; BSR set to: 2
 12021                           ;lorawan.c: 1480: {
 12022                           ;lorawan.c: 1481: if (SearchAvailableChannel (loRa.maxChannels, 1, &channelIndex) == OK)
 12023  000608  D927               	call	PL264	;call to abstracted procedure
 12024  00060A  EC8C  F01F         	call	_SearchAvailableChannel
 12025  00060E  0900               	iorlw	0
 12026  000610  E106               	bnz	l14468
 12027                           
 12028                           ; BSR set to: 0
 12029                           ;lorawan.c: 1482: {
 12030                           ;lorawan.c: 1483: LORAWAN_Send (0, 0, 0, 0);
 12031  000612  D8F2               	call	PL186	;call to abstracted procedure
 12032  000614  EC7B  F01E         	call	_LORAWAN_Send
 12033  000618                     l14466:
 12034                           
 12035                           ;lorawan.c: 1484: loRa.lorawanMacStatus.fPending = 0;
 12036  000618  0102               	movlb	2	; () banked
 12037  00061A  9700               	bcf	_loRa& (0+255),3,b
 12038                           
 12039                           ;lorawan.c: 1485: }
 12040  00061C  D6E1               	goto	l14300
 12041  00061E                     l14468:
 12042                           
 12043                           ; BSR set to: 0
 12044                           ;lorawan.c: 1486: else
 12045                           ;lorawan.c: 1487: {
 12046                           ;lorawan.c: 1489: StartReTxTimer();
 12047  00061E  EC6D  F01A         	call	_StartReTxTimer	;wreg free
 12048  000622  D6DE               	goto	l14300
 12049  000624                     l14470:
 12050                           
 12051                           ; BSR set to: 0
 12052                           ;lorawan.c: 1494: else
 12053                           ;lorawan.c: 1495: {
 12054                           ;lorawan.c: 1496: UpdateRetransmissionAckTimeoutState ();
 12055  000624  ECBF  F028         	call	_UpdateRetransmissionAckTimeoutState	;wreg free
 12056  000628  D6DB               	goto	l14300
 12057  00062A                     l14472:
 12058                           
 12059                           ; BSR set to: 2
 12060                           ;lorawan.c: 1499: else
 12061                           ;lorawan.c: 1500: {
 12062                           ;lorawan.c: 1501: loRa.macStatus.macState = IDLE;
 12063                           
 12064                           ; BSR set to: 2
 12065                           ;lorawan.c: 1503: if (rxPayload.RxAppData != (0))
 12066  00062A  D8BC               	call	PL142	;call to abstracted procedure
 12067  00062C  E010               	bz	l14480
 12068                           
 12069                           ; BSR set to: 1
 12070                           ;lorawan.c: 1504: {
 12071                           ;lorawan.c: 1505: loRa.lorawanMacStatus.synchronization = 0;
 12072  00062E  0102               	movlb	2	; () banked
 12073  000630  9B00               	bcf	_loRa& (0+255),5,b
 12074                           
 12075                           ; BSR set to: 2
 12076                           ;lorawan.c: 1506: rxPayload.RxAppData (packet, frmPayloadLength, MAC_OK);
 12077  000632  D879               	call	PL96	;call to abstracted procedure
 12078  000634  D801               	call	u16558
 12079  000636  D00B               	goto	l14480
 12080  000638                     u16558:
 12081  000638  0005               	push	
 12082  00063A  0101               	movlb	1	; () banked
 12083  00063C  6EFA               	movwf	pclath,c
 12084  00063E  5179               	movf	_rxPayload& (0+255),w,b
 12085  000640  6EFD               	movwf	tosl,c
 12086  000642  517A               	movf	(_rxPayload+1)& (0+255),w,b
 12087  000644  6EFE               	movwf	tosh,c
 12088  000646  50F8               	movf	tblptru,w,c
 12089  000648  6EFF               	movwf	tosu,c
 12090  00064A  50FA               	movf	pclath,w,c
 12091  00064C  0012               	return		;indir
 12092  00064E                     l14480:
 12093                           
 12094                           ; BSR set to: 1
 12095                           ;lorawan.c: 1507: }
 12096                           ;lorawan.c: 1509: if ( (loRa.macStatus.automaticReply == 1) && (loRa.lorawanMacStatus.sy
      +                          nchronization == 0) && ( (loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage == 1) |
      +                          | (loRa.lorawanMacStatus.fPending == 1) ) )
 12097  00064E  0102               	movlb	2	; () banked
 12098  000650  BB02               	btfsc	(_loRa+2)& (0+255),5,b
 12099                           
 12100                           ; BSR set to: 2
 12101  000652  BB00               	btfsc	_loRa& (0+255),5,b
 12102  000654  D6C5               	goto	l14300
 12103                           
 12104                           ; BSR set to: 2
 12105  000656  B300               	btfsc	_loRa& (0+255),1,b
 12106  000658  D002               	goto	l14488
 12107                           
 12108                           ; BSR set to: 2
 12109  00065A  A700               	btfss	_loRa& (0+255),3,b
 12110  00065C  D6C1               	goto	l14300
 12111  00065E                     l14488:
 12112                           
 12113                           ; BSR set to: 2
 12114                           ;lorawan.c: 1510: {
 12115                           ;lorawan.c: 1511: if (SearchAvailableChannel (loRa.maxChannels, 1, &channelIndex) == OK)
 12116  00065E  D8FC               	call	PL264	;call to abstracted procedure
 12117  000660  EC8C  F01F         	call	_SearchAvailableChannel
 12118  000664  0900               	iorlw	0
 12119  000666  E1DB               	bnz	l14468
 12120                           
 12121                           ; BSR set to: 0
 12122                           ;lorawan.c: 1512: {
 12123                           ;lorawan.c: 1513: LORAWAN_Send (0, 0, 0, 0);
 12124  000668  D8C7               	call	PL186	;call to abstracted procedure
 12125  00066A  EC7B  F01E         	call	_LORAWAN_Send
 12126  00066E  D7D4               	goto	l14466
 12127  000670                     l14506:
 12128                           
 12129                           ; BSR set to: 2
 12130                           ;lorawan.c: 1537: else
 12131                           ;lorawan.c: 1538: {
 12132                           ;lorawan.c: 1540: if ( rxPayload.RxAppData != (0) )
 12133  000670  0101               	movlb	1	; () banked
 12134  000672  5179               	movf	_rxPayload& (0+255),w,b
 12135  000674  117A               	iorwf	(_rxPayload+1)& (0+255),w,b
 12136  000676  B4D8               	btfsc	status,2,c
 12137  000678  0012               	return	
 12138                           
 12139                           ; BSR set to: 1
 12140                           ;lorawan.c: 1541: {
 12141                           ;lorawan.c: 1542: if ((RADIO_GetStatus() & (1 << (3))) == 0)
 12142  00067A  EC0A  F031         	call	_RADIO_GetStatus	;wreg free
 12143  00067E  0100               	movlb	0	; () banked
 12144  000680  6FE0               	movwf	??_LORAWAN_RxDone& (0+255),b
 12145  000682  B7E0               	btfsc	??_LORAWAN_RxDone& (0+255),3,b
 12146  000684  D00E               	goto	l14512
 12147                           
 12148                           ; BSR set to: 0
 12149                           ;lorawan.c: 1543: {
 12150                           ;lorawan.c: 1544: rxPayload.RxAppData(buffer, bufferLength, RADIO_OK);
 12151  000686  D8F5               	call	PL298	;call to abstracted procedure
 12152  000688  0E03               	movlw	3
 12153  00068A  6F63               	movwf	RxDataDone@status& (0+255),b
 12154  00068C  0005               	push	
 12155  00068E  0101               	movlb	1	; () banked
 12156  000690  6EFA               	movwf	pclath,c
 12157  000692  5179               	movf	_rxPayload& (0+255),w,b
 12158  000694  6EFD               	movwf	tosl,c
 12159  000696  517A               	movf	(_rxPayload+1)& (0+255),w,b
 12160  000698  6EFE               	movwf	tosh,c
 12161  00069A  50F8               	movf	tblptru,w,c
 12162  00069C  6EFF               	movwf	tosu,c
 12163  00069E  50FA               	movf	pclath,w,c
 12164  0006A0  0012               	return		;indir
 12165  0006A2                     l14512:
 12166                           
 12167                           ; BSR set to: 0
 12168                           ;lorawan.c: 1546: else
 12169                           ;lorawan.c: 1547: {
 12170                           ;lorawan.c: 1548: rxPayload.RxAppData(buffer, bufferLength, RADIO_NOT_OK);
 12171  0006A2  D8E7               	call	PL298	;call to abstracted procedure
 12172  0006A4  0E02               	movlw	2
 12173  0006A6  6F63               	movwf	RxDataDone@status& (0+255),b
 12174  0006A8  0005               	push	
 12175  0006AA  0101               	movlb	1	; () banked
 12176  0006AC  6EFA               	movwf	pclath,c
 12177  0006AE  5179               	movf	_rxPayload& (0+255),w,b
 12178  0006B0  6EFD               	movwf	tosl,c
 12179  0006B2  517A               	movf	(_rxPayload+1)& (0+255),w,b
 12180  0006B4  6EFE               	movwf	tosh,c
 12181  0006B6  50F8               	movf	tblptru,w,c
 12182  0006B8  6EFF               	movwf	tosu,c
 12183  0006BA  50FA               	movf	pclath,w,c
 12184  0006BC  0012               	return		;indir
 12185  0006BE                     __end_of_LORAWAN_RxDone:
 12186                           	opt stack 0
 12187  0006BE                     PL24:
 12188                           	opt stack 12
 12189  0006BE  0100               	movlb	0	; () banked
 12190  0006C0  EE20 F006          	lfsr	2,6
 12191  0006C4  51F7               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12192  0006C6  26D9               	addwf	fsr2l,f,c
 12193  0006C8  51F8               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12194  0006CA  22DA               	addwfc	fsr2h,f,c
 12195  0006CC  0012               	return	
 12196  0006CE                     __end_ofPL24:
 12197                           	opt stack 0
 12198  0006CE                     PL26:
 12199                           	opt stack 12
 12200  0006CE  EE20 F006          	lfsr	2,6
 12201  0006D2  51F7               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12202  0006D4  26D9               	addwf	fsr2l,f,c
 12203  0006D6  51F8               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12204  0006D8  22DA               	addwfc	fsr2h,f,c
 12205  0006DA  0102               	movlb	2	; () banked
 12206  0006DC  0012               	return	
 12207  0006DE                     __end_ofPL26:
 12208                           	opt stack 0
 12209  0006DE                     PL34:
 12210                           	opt stack 12
 12211  0006DE  EE20 F005          	lfsr	2,5
 12212  0006E2  51F7               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12213  0006E4  26D9               	addwf	fsr2l,f,c
 12214  0006E6  51F8               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12215  0006E8  22DA               	addwfc	fsr2h,f,c
 12216  0006EA  50DF               	movf	223,w,c
 12217  0006EC  0B0F               	andlw	15
 12218  0006EE  0012               	return	
 12219  0006F0                     __end_ofPL34:
 12220                           	opt stack 0
 12221  0006F0                     PL42:
 12222                           	opt stack 12
 12223  0006F0  51F7               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12224  0006F2  26D9               	addwf	fsr2l,f,c
 12225  0006F4  51F8               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12226  0006F6  22DA               	addwfc	fsr2h,f,c
 12227  0006F8  0012               	return	
 12228  0006FA                     __end_ofPL42:
 12229                           	opt stack 0
 12230  0006FA                     PL60:
 12231                           	opt stack 12
 12232  0006FA  5171               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 12233  0006FC  0100               	movlb	0	; () banked
 12234  0006FE  6FE0               	movwf	??_LORAWAN_RxDone& (0+255),b
 12235  000700  6BE1               	clrf	(??_LORAWAN_RxDone+1)& (0+255),b
 12236  000702  0012               	return	
 12237  000704                     __end_ofPL60:
 12238                           	opt stack 0
 12239  000704                     PL90:
 12240                           	opt stack 12
 12241  000704  0EF0               	movlw	low (_radioBuffer+16)
 12242  000706  6F60               	movwf	memcpy@d1& (0+255),b
 12243  000708  0E04               	movlw	high (_radioBuffer+16)
 12244  00070A  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 12245  00070C  C16F  F062         	movff	LORAWAN_RxDone@buffer,memcpy@s1
 12246  000710  C170  F063         	movff	LORAWAN_RxDone@buffer+1,memcpy@s1+1
 12247  000714  0EFC               	movlw	252
 12248  000716  0101               	movlb	1	; () banked
 12249  000718  2571               	addwf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 12250  00071A  0100               	movlb	0	; () banked
 12251  00071C  6F64               	movwf	memcpy@n& (0+255),b
 12252  00071E  6B65               	clrf	(memcpy@n+1)& (0+255),b
 12253  000720  0EFF               	movlw	255
 12254  000722  2365               	addwfc	(memcpy@n+1)& (0+255),f,b
 12255  000724  0CFF               	retlw	255
 12256  000726                     __end_ofPL90:
 12257                           	opt stack 0
 12258  000726                     PL96:
 12259                           	opt stack 12
 12260  000726  C0EE  F060         	movff	LORAWAN_RxDone@packet,RxDataDone@pData
 12261  00072A  C0EF  F061         	movff	LORAWAN_RxDone@packet+1,RxDataDone@pData+1
 12262  00072E  C0F6  F062         	movff	LORAWAN_RxDone@frmPayloadLength,RxDataDone@dataLength
 12263  000732  0E01               	movlw	1
 12264  000734  0100               	movlb	0	; () banked
 12265  000736  6F63               	movwf	RxDataDone@status& (0+255),b
 12266  000738  0C01               	retlw	1
 12267  00073A                     __end_ofPL96:
 12268                           	opt stack 0
 12269  00073A                     PL98:
 12270                           	opt stack 12
 12271  00073A  6F60               	movwf	memcpy@d1& (0+255),b
 12272  00073C  6B61               	clrf	(memcpy@d1+1)& (0+255),b
 12273  00073E  0EB5               	movlw	low _aesBuffer
 12274  000740  6F62               	movwf	memcpy@s1& (0+255),b
 12275  000742  0E01               	movlw	high _aesBuffer
 12276  000744  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 12277  000746  6B65               	clrf	(memcpy@n+1)& (0+255),b
 12278  000748  0E04               	movlw	4
 12279  00074A  6F64               	movwf	memcpy@n& (0+255),b
 12280  00074C  0C04               	retlw	4
 12281  00074E                     __end_ofPL98:
 12282                           	opt stack 0
 12283  00074E                     PL110:
 12284                           	opt stack 12
 12285  00074E  CFDD F0E1          	movff	postdec2,??_LORAWAN_RxDone+1
 12286  000752  C0E0  F06A         	movff	??_LORAWAN_RxDone,AssembleEncryptionBlock@frameCounter
 12287  000756  C0E1  F06B         	movff	??_LORAWAN_RxDone+1,AssembleEncryptionBlock@frameCounter+1
 12288  00075A  6B6C               	clrf	(AssembleEncryptionBlock@frameCounter+2)& (0+255),b
 12289  00075C  6B6D               	clrf	(AssembleEncryptionBlock@frameCounter+3)& (0+255),b
 12290  00075E  0101               	movlb	1	; () banked
 12291  000760  5171               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 12292  000762  0FFC               	addlw	252
 12293  000764  0100               	movlb	0	; () banked
 12294  000766  6F6E               	movwf	AssembleEncryptionBlock@blockId& (0+255),b
 12295  000768  0E49               	movlw	73
 12296  00076A  6F6F               	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 12297  00076C  0C49               	retlw	73
 12298  00076E                     __end_ofPL110:
 12299                           	opt stack 0
 12300  00076E                     PL124:
 12301                           	opt stack 12
 12302  00076E  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 12303  000770  0EB5               	movlw	low _aesBuffer
 12304  000772  6F62               	movwf	memcpy@s1& (0+255),b
 12305  000774  0E01               	movlw	high _aesBuffer
 12306  000776  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 12307  000778  6B65               	clrf	(memcpy@n+1)& (0+255),b
 12308  00077A  0E10               	movlw	16
 12309  00077C  6F64               	movwf	memcpy@n& (0+255),b
 12310  00077E  0C10               	retlw	16
 12311  000780                     __end_ofPL124:
 12312                           	opt stack 0
 12313  000780                     PL126:
 12314                           	opt stack 12
 12315  000780  C06A  F0E8         	movff	?_ExtractMic,LORAWAN_RxDone@extractedMic
 12316  000784  C06B  F0E9         	movff	?_ExtractMic+1,LORAWAN_RxDone@extractedMic+1
 12317  000788  C06C  F0EA         	movff	?_ExtractMic+2,LORAWAN_RxDone@extractedMic+2
 12318  00078C  C06D  F0EB         	movff	?_ExtractMic+3,LORAWAN_RxDone@extractedMic+3
 12319  000790  0012               	return	
 12320  000792                     __end_ofPL126:
 12321                           	opt stack 0
 12322  000792                     PL128:
 12323                           	opt stack 12
 12324  000792  C16F  F0A0         	movff	LORAWAN_RxDone@buffer,EncryptFRMPayload@buffer
 12325  000796  C170  F0A1         	movff	LORAWAN_RxDone@buffer+1,EncryptFRMPayload@buffer+1
 12326  00079A  05F6               	decf	LORAWAN_RxDone@frmPayloadLength& (0+255),w,b
 12327  00079C  6FA2               	movwf	EncryptFRMPayload@bufferLength& (0+255),b
 12328  00079E  0E01               	movlw	1
 12329  0007A0  6FA3               	movwf	EncryptFRMPayload@dir& (0+255),b
 12330  0007A2  0C01               	retlw	1
 12331  0007A4                     __end_ofPL128:
 12332                           	opt stack 0
 12333  0007A4                     PL142:
 12334                           	opt stack 12
 12335  0007A4  0EF0               	movlw	-16
 12336  0007A6  1702               	andwf	(_loRa+2)& (0+255),f,b
 12337  0007A8  0101               	movlb	1	; () banked
 12338  0007AA  5179               	movf	_rxPayload& (0+255),w,b
 12339  0007AC  117A               	iorwf	(_rxPayload+1)& (0+255),w,b
 12340  0007AE  0012               	return	
 12341  0007B0                     __end_ofPL142:
 12342                           	opt stack 0
 12343  0007B0                     PL148:
 12344                           	opt stack 12
 12345  0007B0  6FCA               	movwf	AESCmac@output& (0+255),b
 12346  0007B2  0E01               	movlw	high _aesBuffer
 12347  0007B4  6FCB               	movwf	(AESCmac@output+1)& (0+255),b
 12348  0007B6  0EE0               	movlw	low _radioBuffer
 12349  0007B8  6FCC               	movwf	AESCmac@input& (0+255),b
 12350  0007BA  0E04               	movlw	high _radioBuffer
 12351  0007BC  6FCD               	movwf	(AESCmac@input+1)& (0+255),b
 12352  0007BE  0101               	movlb	1	; () banked
 12353  0007C0  5171               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 12354  0007C2  0F0C               	addlw	12
 12355  0007C4  0100               	movlb	0	; () banked
 12356  0007C6  6FCE               	movwf	AESCmac@size& (0+255),b
 12357  0007C8  0012               	return	
 12358  0007CA                     __end_ofPL148:
 12359                           	opt stack 0
 12360  0007CA                     PL152:
 12361                           	opt stack 12
 12362  0007CA  6FA9               	movwf	(EncryptFRMPayload@key+1)& (0+255),b
 12363  0007CC  C0EC  F0AA         	movff	LORAWAN_RxDone@bufferIndex,EncryptFRMPayload@macBufferIndex
 12364  0007D0  0EE0               	movlw	low _radioBuffer
 12365  0007D2  6FAB               	movwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),b
 12366  0007D4  0E04               	movlw	high _radioBuffer
 12367  0007D6  6FAC               	movwf	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),b
 12368  0007D8  0012               	return	
 12369  0007DA                     __end_ofPL152:
 12370                           	opt stack 0
 12371  0007DA                     PL162:
 12372                           	opt stack 12
 12373  0007DA  0EE0               	movlw	low _radioBuffer
 12374  0007DC  6F60               	movwf	memcpy@d1& (0+255),b
 12375  0007DE  0E04               	movlw	high _radioBuffer
 12376  0007E0  0012               	return	
 12377  0007E2                     __end_ofPL162:
 12378                           	opt stack 0
 12379  0007E2                     PL184:
 12380                           	opt stack 12
 12381  0007E2  0EFF               	movlw	255
 12382  0007E4  0101               	movlb	1	; () banked
 12383  0007E6  256F               	addwf	LORAWAN_RxDone@buffer& (0+255),w,b
 12384  0007E8  0100               	movlb	0	; () banked
 12385  0007EA  6FEE               	movwf	LORAWAN_RxDone@packet& (0+255),b
 12386  0007EC  0EFF               	movlw	255
 12387  0007EE  0101               	movlb	1	; () banked
 12388  0007F0  2170               	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),w,b
 12389  0007F2  0100               	movlb	0	; () banked
 12390  0007F4  6FEF               	movwf	(LORAWAN_RxDone@packet+1)& (0+255),b
 12391  0007F6  0012               	return	
 12392  0007F8                     __end_ofPL184:
 12393                           	opt stack 0
 12394  0007F8                     PL186:
 12395                           	opt stack 14
 12396  0007F8  0E00               	movlw	0
 12397  0007FA  0101               	movlb	1	; () banked
 12398  0007FC  6F6B               	movwf	LORAWAN_Send@port& (0+255),b
 12399  0007FE  6F6C               	movwf	LORAWAN_Send@buffer& (0+255),b
 12400  000800  6F6D               	movwf	(LORAWAN_Send@buffer+1)& (0+255),b
 12401  000802  6F6E               	movwf	LORAWAN_Send@bufferLength& (0+255),b
 12402  000804  0C00               	retlw	0
 12403  000806                     __end_ofPL186:
 12404                           	opt stack 0
 12405  000806                     PL188:
 12406                           	opt stack 12
 12407  000806  C16F  F06A         	movff	LORAWAN_RxDone@buffer,ExtractMic@buffer
 12408  00080A  C170  F06B         	movff	LORAWAN_RxDone@buffer+1,ExtractMic@buffer+1
 12409  00080E  C171  F06C         	movff	LORAWAN_RxDone@bufferLength,ExtractMic@bufferLength
 12410  000812  0012               	return	
 12411  000814                     __end_ofPL188:
 12412                           	opt stack 0
 12413  000814                     PL218:
 12414                           	opt stack 12
 12415  000814  C20A  F0A4         	movff	_loRa+10,EncryptFRMPayload@frameCounter
 12416  000818  C20B  F0A5         	movff	_loRa+11,EncryptFRMPayload@frameCounter+1
 12417  00081C  C20C  F0A6         	movff	_loRa+12,EncryptFRMPayload@frameCounter+2
 12418  000820  C20D  F0A7         	movff	_loRa+13,EncryptFRMPayload@frameCounter+3
 12419  000824  0012               	return	
 12420  000826                     __end_ofPL218:
 12421                           	opt stack 0
 12422  000826                     PL220:
 12423                           	opt stack 12
 12424  000826  6FE2               	movwf	(??_LORAWAN_RxDone+2)& (0+255),b
 12425  000828  6BE3               	clrf	(??_LORAWAN_RxDone+3)& (0+255),b
 12426  00082A  0E0C               	movlw	12
 12427  00082C  27E2               	addwf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 12428  00082E  0E00               	movlw	0
 12429  000830  23E3               	addwfc	(??_LORAWAN_RxDone+3)& (0+255),f,b
 12430  000832  51E0               	movf	??_LORAWAN_RxDone& (0+255),w,b
 12431  000834  19E2               	xorwf	(??_LORAWAN_RxDone+2)& (0+255),w,b
 12432  000836  0012               	return	
 12433  000838                     __end_ofPL220:
 12434                           	opt stack 0
 12435  000838                     PL222:
 12436                           	opt stack 12
 12437  000838  0100               	movlb	0	; () banked
 12438  00083A  EE20 F001          	lfsr	2,1
 12439  00083E  0012               	return	
 12440  000840                     __end_ofPL222:
 12441                           	opt stack 0
 12442  000840                     PL234:
 12443                           	opt stack 12
 12444  000840  C16F  FFD9         	movff	LORAWAN_RxDone@buffer,fsr2l
 12445  000844  C170  FFDA         	movff	LORAWAN_RxDone@buffer+1,fsr2h
 12446  000848  50DF               	movf	indf2,w,c
 12447  00084A  0012               	return	
 12448  00084C                     __end_ofPL234:
 12449                           	opt stack 0
 12450  00084C                     PL258:
 12451                           	opt stack 12
 12452  00084C  CFDE F0E0          	movff	postinc2,??_LORAWAN_RxDone
 12453  000850  CFDD F0E1          	movff	postdec2,??_LORAWAN_RxDone+1
 12454  000854  0102               	movlb	2	; () banked
 12455  000856  0012               	return	
 12456  000858                     __end_ofPL258:
 12457                           	opt stack 0
 12458  000858                     PL264:
 12459                           	opt stack 12
 12460  000858  0E01               	movlw	1
 12461  00085A  0100               	movlb	0	; () banked
 12462  00085C  6FA5               	movwf	SearchAvailableChannel@transmissionType& (0+255),b
 12463  00085E  0EE6               	movlw	low LORAWAN_RxDone@channelIndex
 12464  000860  6FA6               	movwf	SearchAvailableChannel@channelIndex& (0+255),b
 12465  000862  0102               	movlb	2	; () banked
 12466  000864  51ED               	movf	(_loRa+237)& (0+255),w,b
 12467  000866  0012               	return	
 12468  000868                     __end_ofPL264:
 12469                           	opt stack 0
 12470  000868                     PL276:
 12471                           	opt stack 12
 12472  000868  51F4               	movf	LORAWAN_RxDone@joinAccept& (0+255),w,b
 12473  00086A  26D9               	addwf	fsr2l,f,c
 12474  00086C  51F5               	movf	(LORAWAN_RxDone@joinAccept+1)& (0+255),w,b
 12475  00086E  22DA               	addwfc	fsr2h,f,c
 12476  000870  0012               	return	
 12477  000872                     __end_ofPL276:
 12478                           	opt stack 0
 12479  000872                     PL298:
 12480                           	opt stack 12
 12481  000872  C16F  F060         	movff	LORAWAN_RxDone@buffer,RxDataDone@pData
 12482  000876  C170  F061         	movff	LORAWAN_RxDone@buffer+1,RxDataDone@pData+1
 12483  00087A  C171  F062         	movff	LORAWAN_RxDone@bufferLength,RxDataDone@dataLength
 12484  00087E  0012               	return	
 12485  000880                     __end_ofPL298:
 12486                           	opt stack 0
 12487  000880                     PL316:
 12488                           	opt stack 12
 12489  000880  5102               	movf	(_loRa+2)& (0+255),w,b
 12490  000882  0BF0               	andlw	-16
 12491  000884  0909               	iorlw	9
 12492  000886  6F02               	movwf	(_loRa+2)& (0+255),b
 12493  000888  0012               	return	
 12494  00088A                     __end_ofPL316:
 12495                           	opt stack 0
 12496  00088A                     PL336:
 12497                           	opt stack 12
 12498  00088A  0E08               	movlw	8
 12499  00088C  0101               	movlb	1	; () banked
 12500  00088E  276F               	addwf	LORAWAN_RxDone@buffer& (0+255),f,b
 12501  000890  0E00               	movlw	0
 12502  000892  2370               	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),f,b
 12503  000894  0C00               	retlw	0
 12504  000896                     __end_ofPL336:
 12505                           	opt stack 0
 12506  000896                     PL386:
 12507                           	opt stack 12
 12508  000896  CFDE F20A          	movff	postinc2,_loRa+10
 12509  00089A  CFDD F20B          	movff	postdec2,_loRa+11
 12510  00089E  0012               	return	
 12511  0008A0                     __end_ofPL386:
 12512                           	opt stack 0
 12513  0008A0                     PL400:
 12514                           	opt stack 12
 12515  0008A0  C0A4  F16F         	movff	?_MacExecuteCommands,LORAWAN_RxDone@buffer
 12516  0008A4  C0A5  F170         	movff	?_MacExecuteCommands+1,LORAWAN_RxDone@buffer+1
 12517  0008A8  0012               	return	
 12518  0008AA                     __end_ofPL400:
 12519                           	opt stack 0
 12520  0008AA                     PL428:
 12521                           	opt stack 12
 12522  0008AA  0100               	movlb	0	; () banked
 12523  0008AC  5BE1               	subwfb	(??_LORAWAN_RxDone+1)& (0+255),f,b
 12524  0008AE  51E0               	movf	??_LORAWAN_RxDone& (0+255),w,b
 12525  0008B0  0102               	movlb	2	; () banked
 12526  0008B2  0012               	return	
 12527  0008B4                     __end_ofPL428:
 12528                           	opt stack 0
 12529  0008B4                     PL450:
 12530                           	opt stack 12
 12531  0008B4  6BF6               	clrf	LORAWAN_RxDone@frmPayloadLength& (0+255),b
 12532  0008B6  6BEE               	clrf	LORAWAN_RxDone@packet& (0+255),b
 12533  0008B8  6BEF               	clrf	(LORAWAN_RxDone@packet+1)& (0+255),b
 12534  0008BA  0012               	return	
 12535  0008BC                     __end_ofPL450:
 12536                           	opt stack 0
 12537                           tosu	equ	0xFFF
 12538                           tosh	equ	0xFFE
 12539                           tosl	equ	0xFFD
 12540                           pclath	equ	0xFFA
 12541                           tblptru	equ	0xFF8
 12542                           tblptrh	equ	0xFF7
 12543                           tblptrl	equ	0xFF6
 12544                           tablat	equ	0xFF5
 12545                           prodh	equ	0xFF4
 12546                           prodl	equ	0xFF3
 12547                           intcon	equ	0xFF2
 12548                           indf0	equ	0xFEF
 12549                           postinc0	equ	0xFEE
 12550                           plusw0	equ	0xFEB
 12551                           fsr0h	equ	0xFEA
 12552                           fsr0l	equ	0xFE9
 12553                           wreg	equ	0xFE8
 12554                           postinc1	equ	0xFE6
 12555                           postdec1	equ	0xFE5
 12556                           plusw1	equ	0xFE3
 12557                           fsr1h	equ	0xFE2
 12558                           fsr1l	equ	0xFE1
 12559                           indf2	equ	0xFDF
 12560                           postinc2	equ	0xFDE
 12561                           postdec2	equ	0xFDD
 12562                           plusw2	equ	0xFDB
 12563                           fsr2h	equ	0xFDA
 12564                           fsr2l	equ	0xFD9
 12565                           status	equ	0xFD8
 12566                           
 12567 ;; *************** function _UpdateRetransmissionAckTimeoutState *****************
 12568 ;; Defined at:
 12569 ;;		line 1034 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 12570 ;; Parameters:    Size  Location     Type
 12571 ;;		None
 12572 ;; Auto vars:     Size  Location     Type
 12573 ;;		None
 12574 ;; Return value:  Size  Location     Type
 12575 ;;                  1    wreg      void 
 12576 ;; Registers used:
 12577 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12578 ;; Tracked objects:
 12579 ;;		On entry : 3F/0
 12580 ;;		On exit  : 3F/0
 12581 ;;		Unchanged: 0/0
 12582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12583 ;;      Params:         0       0       0       0       0       0       0       0       0
 12584 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12585 ;;      Temps:          0       4       0       0       0       0       0       0       0
 12586 ;;      Totals:         0       4       0       0       0       0       0       0       0
 12587 ;;Total ram usage:        4 bytes
 12588 ;; Hardware stack levels used:    1
 12589 ;; Hardware stack levels required when called:   11
 12590 ;; This function calls:
 12591 ;;		_SwTimerSetTimeout
 12592 ;;		_SwTimerStart
 12593 ;;		___lldiv
 12594 ;; This function is called by:
 12595 ;;		_AckRetransmissionCallback
 12596 ;;		_LORAWAN_RxDone
 12597 ;; This function uses a non-reentrant model
 12598 ;;
 12599                           
 12600                           	psect	text57
 12601  00517E                     __ptext57:
 12602                           	opt stack 0
 12603  00517E                     _UpdateRetransmissionAckTimeoutState:
 12604                           	opt stack 16
 12605                           
 12606                           ; BSR set to: 0
 12607                           ;lorawan.c: 1036: loRa.macStatus.macState = RETRANSMISSION_DELAY;
 12608                           
 12609                           ;incstack = 0
 12610  00517E  0102               	movlb	2	; () banked
 12611  005180  EC9C  F00C         	call	PL274	;call to abstracted procedure
 12612                           
 12613                           ; BSR set to: 2
 12614                           ;lorawan.c: 1037: SwTimerSetTimeout(loRa.ackTimeoutTimerId, ( (((uint32_t)(loRa.protocol
      +                          Parameters.ackTimeout)) << (12)) / 125UL ));
 12615  005184  51A0               	movf	(_loRa+160)& (0+255),w,b
 12616  005186  0100               	movlb	0	; () banked
 12617  005188  6F90               	movwf	??_UpdateRetransmissionAckTimeoutState& (0+255),b
 12618  00518A  0102               	movlb	2	; () banked
 12619  00518C  51A1               	movf	(_loRa+161)& (0+255),w,b
 12620  00518E  0100               	movlb	0	; () banked
 12621  005190  6F91               	movwf	(??_UpdateRetransmissionAckTimeoutState+1)& (0+255),b
 12622  005192  6B92               	clrf	(??_UpdateRetransmissionAckTimeoutState+2)& (0+255),b
 12623  005194  6B93               	clrf	(??_UpdateRetransmissionAckTimeoutState+3)& (0+255),b
 12624  005196  0E0C               	movlw	12
 12625  005198                     u15525:
 12626  005198  90D8               	bcf	status,0,c
 12627  00519A  3790               	rlcf	??_UpdateRetransmissionAckTimeoutState& (0+255),f,b
 12628  00519C  3791               	rlcf	(??_UpdateRetransmissionAckTimeoutState+1)& (0+255),f,b
 12629  00519E  3792               	rlcf	(??_UpdateRetransmissionAckTimeoutState+2)& (0+255),f,b
 12630  0051A0  3793               	rlcf	(??_UpdateRetransmissionAckTimeoutState+3)& (0+255),f,b
 12631  0051A2  2EE8               	decfsz	wreg,f,c
 12632  0051A4  D7F9               	goto	u15525
 12633  0051A6  C090  F060         	movff	??_UpdateRetransmissionAckTimeoutState,___lldiv@dividend
 12634  0051AA  C091  F061         	movff	??_UpdateRetransmissionAckTimeoutState+1,___lldiv@dividend+1
 12635  0051AE  C092  F062         	movff	??_UpdateRetransmissionAckTimeoutState+2,___lldiv@dividend+2
 12636  0051B2  C093  F063         	movff	??_UpdateRetransmissionAckTimeoutState+3,___lldiv@dividend+3
 12637  0051B6  0E7D               	movlw	125
 12638  0051B8  EC77  F011         	call	PL32	;call to abstracted procedure
 12639  0051BC  EC1B  F025         	call	___lldiv	;wreg free
 12640  0051C0  EC73  F006         	call	PL20	;call to abstracted procedure
 12641  0051C4  51E8               	movf	(_loRa+232)& (0+255),w,b
 12642  0051C6  EC11  F02C         	call	_SwTimerSetTimeout
 12643                           
 12644                           ; BSR set to: 0
 12645                           ;lorawan.c: 1038: SwTimerStart(loRa.ackTimeoutTimerId);
 12646  0051CA  0102               	movlb	2	; () banked
 12647  0051CC  51E8               	movf	(_loRa+232)& (0+255),w,b
 12648  0051CE  EFC4  F025         	goto	_SwTimerStart
 12649  0051D2                     __end_of_UpdateRetransmissionAckTimeoutState:
 12650                           	opt stack 0
 12651                           tosu	equ	0xFFF
 12652                           tosh	equ	0xFFE
 12653                           tosl	equ	0xFFD
 12654                           pclath	equ	0xFFA
 12655                           tblptru	equ	0xFF8
 12656                           tblptrh	equ	0xFF7
 12657                           tblptrl	equ	0xFF6
 12658                           tablat	equ	0xFF5
 12659                           prodh	equ	0xFF4
 12660                           prodl	equ	0xFF3
 12661                           intcon	equ	0xFF2
 12662                           indf0	equ	0xFEF
 12663                           postinc0	equ	0xFEE
 12664                           plusw0	equ	0xFEB
 12665                           fsr0h	equ	0xFEA
 12666                           fsr0l	equ	0xFE9
 12667                           wreg	equ	0xFE8
 12668                           postinc1	equ	0xFE6
 12669                           postdec1	equ	0xFE5
 12670                           plusw1	equ	0xFE3
 12671                           fsr1h	equ	0xFE2
 12672                           fsr1l	equ	0xFE1
 12673                           indf2	equ	0xFDF
 12674                           postinc2	equ	0xFDE
 12675                           postdec2	equ	0xFDD
 12676                           plusw2	equ	0xFDB
 12677                           fsr2h	equ	0xFDA
 12678                           fsr2l	equ	0xFD9
 12679                           status	equ	0xFD8
 12680                           
 12681 ;; *************** function _UpdateDLSettings *****************
 12682 ;; Defined at:
 12683 ;;		line 888 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 12684 ;; Parameters:    Size  Location     Type
 12685 ;;  dlRx2Dr         1    wreg     unsigned char 
 12686 ;;  dlRx1DrOffse    1    0[BANK0 ] unsigned char 
 12687 ;; Auto vars:     Size  Location     Type
 12688 ;;  dlRx2Dr         1    1[BANK0 ] unsigned char 
 12689 ;; Return value:  Size  Location     Type
 12690 ;;                  1    wreg      void 
 12691 ;; Registers used:
 12692 ;;		wreg, status,2, status,0
 12693 ;; Tracked objects:
 12694 ;;		On entry : 3F/0
 12695 ;;		On exit  : 3F/0
 12696 ;;		Unchanged: 0/0
 12697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12698 ;;      Params:         0       1       0       0       0       0       0       0       0
 12699 ;;      Locals:         0       1       0       0       0       0       0       0       0
 12700 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12701 ;;      Totals:         0       2       0       0       0       0       0       0       0
 12702 ;;Total ram usage:        2 bytes
 12703 ;; Hardware stack levels used:    1
 12704 ;; Hardware stack levels required when called:    7
 12705 ;; This function calls:
 12706 ;;		Nothing
 12707 ;; This function is called by:
 12708 ;;		_LORAWAN_RxDone
 12709 ;; This function uses a non-reentrant model
 12710 ;;
 12711                           
 12712                           	psect	text58
 12713  005F12                     __ptext58:
 12714                           	opt stack 0
 12715  005F12                     _UpdateDLSettings:
 12716                           	opt stack 19
 12717                           
 12718                           ; BSR set to: 0
 12719                           ;incstack = 0
 12720                           ;UpdateDLSettings@dlRx2Dr stored from wreg
 12721  005F12  6F61               	movwf	UpdateDLSettings@dlRx2Dr& (0+255),b
 12722                           
 12723                           ;lorawan_eu.c: 890: if (dlRx2Dr <= 7)
 12724  005F14  0E08               	movlw	8
 12725  005F16  0100               	movlb	0	; () banked
 12726  005F18  6161               	cpfslt	UpdateDLSettings@dlRx2Dr& (0+255),b
 12727  005F1A  D002               	goto	l13920
 12728                           
 12729                           ; BSR set to: 0
 12730                           ;lorawan_eu.c: 891: {
 12731                           ;lorawan_eu.c: 892: loRa.receiveWindow2Parameters.dataRate = dlRx2Dr;
 12732  005F1C  C061  F21C         	movff	UpdateDLSettings@dlRx2Dr,_loRa+28
 12733  005F20                     l13920:
 12734                           
 12735                           ; BSR set to: 0
 12736                           ;lorawan_eu.c: 893: }
 12737                           ;lorawan_eu.c: 895: if (dlRx1DrOffset <= 5)
 12738  005F20  0E06               	movlw	6
 12739  005F22  6160               	cpfslt	UpdateDLSettings@dlRx1DrOffset& (0+255),b
 12740  005F24  0C06               	retlw	6
 12741                           
 12742                           ; BSR set to: 0
 12743                           ;lorawan_eu.c: 896: {
 12744                           ;lorawan_eu.c: 898: loRa.offset = dlRx1DrOffset;
 12745  005F26  C060  F2EF         	movff	UpdateDLSettings@dlRx1DrOffset,_loRa+239
 12746                           
 12747                           ; BSR set to: 0
 12748  005F2A  0C06               	retlw	6	;funcret
 12749  005F2C                     __end_of_UpdateDLSettings:
 12750                           	opt stack 0
 12751                           tosu	equ	0xFFF
 12752                           tosh	equ	0xFFE
 12753                           tosl	equ	0xFFD
 12754                           pclath	equ	0xFFA
 12755                           tblptru	equ	0xFF8
 12756                           tblptrh	equ	0xFF7
 12757                           tblptrl	equ	0xFF6
 12758                           tablat	equ	0xFF5
 12759                           prodh	equ	0xFF4
 12760                           prodl	equ	0xFF3
 12761                           intcon	equ	0xFF2
 12762                           indf0	equ	0xFEF
 12763                           postinc0	equ	0xFEE
 12764                           plusw0	equ	0xFEB
 12765                           fsr0h	equ	0xFEA
 12766                           fsr0l	equ	0xFE9
 12767                           wreg	equ	0xFE8
 12768                           postinc1	equ	0xFE6
 12769                           postdec1	equ	0xFE5
 12770                           plusw1	equ	0xFE3
 12771                           fsr1h	equ	0xFE2
 12772                           fsr1l	equ	0xFE1
 12773                           indf2	equ	0xFDF
 12774                           postinc2	equ	0xFDE
 12775                           postdec2	equ	0xFDD
 12776                           plusw2	equ	0xFDB
 12777                           fsr2h	equ	0xFDA
 12778                           fsr2l	equ	0xFD9
 12779                           status	equ	0xFD8
 12780                           
 12781 ;; *************** function _UpdateCfList *****************
 12782 ;; Defined at:
 12783 ;;		line 824 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 12784 ;; Parameters:    Size  Location     Type
 12785 ;;  bufferLength    1    wreg     unsigned char 
 12786 ;;  joinAccept      2   60[BANK0 ] PTR struct .
 12787 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 12788 ;; Auto vars:     Size  Location     Type
 12789 ;;  bufferLength    1   64[BANK0 ] unsigned char 
 12790 ;;  frequency       4   65[BANK0 ] unsigned long 
 12791 ;;  i               1   70[BANK0 ] unsigned char 
 12792 ;;  channelIndex    1   69[BANK0 ] unsigned char 
 12793 ;; Return value:  Size  Location     Type
 12794 ;;                  1    wreg      void 
 12795 ;; Registers used:
 12796 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12797 ;; Tracked objects:
 12798 ;;		On entry : 3F/1
 12799 ;;		On exit  : 3D/0
 12800 ;;		Unchanged: 0/0
 12801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12802 ;;      Params:         0       2       0       0       0       0       0       0       0
 12803 ;;      Locals:         0       7       0       0       0       0       0       0       0
 12804 ;;      Temps:          0       2       0       0       0       0       0       0       0
 12805 ;;      Totals:         0      11       0       0       0       0       0       0       0
 12806 ;;Total ram usage:       11 bytes
 12807 ;; Hardware stack levels used:    1
 12808 ;; Hardware stack levels required when called:    9
 12809 ;; This function calls:
 12810 ;;		_LORAWAN_SetChannelIdStatus
 12811 ;;		_ValidateFrequency
 12812 ;;		___lmul
 12813 ;;		_memcpy
 12814 ;; This function is called by:
 12815 ;;		_LORAWAN_RxDone
 12816 ;; This function uses a non-reentrant model
 12817 ;;
 12818                           
 12819                           	psect	text59
 12820  002924                     __ptext59:
 12821                           	opt stack 0
 12822  002924                     _UpdateCfList:
 12823                           	opt stack 17
 12824                           
 12825                           ; BSR set to: 0
 12826                           ;incstack = 0
 12827                           ;UpdateCfList@bufferLength stored from wreg
 12828  002924  0100               	movlb	0	; () banked
 12829  002926  6FA0               	movwf	UpdateCfList@bufferLength& (0+255),b
 12830                           
 12831                           ;lorawan_eu.c: 826: uint8_t i;
 12832                           ;lorawan_eu.c: 827: uint32_t frequency;
 12833                           ;lorawan_eu.c: 828: uint8_t channelIndex;
 12834                           ;lorawan_eu.c: 830: if ( (bufferLength == 33) )
 12835  002928  0E21               	movlw	33
 12836  00292A  19A0               	xorwf	UpdateCfList@bufferLength& (0+255),w,b
 12837  00292C  A4D8               	btfss	status,2,c
 12838  00292E  0012               	return	
 12839                           
 12840                           ; BSR set to: 0
 12841                           ;lorawan_eu.c: 831: {
 12842                           ;lorawan_eu.c: 833: channelIndex = 3;
 12843  002930  0E03               	movlw	3
 12844  002932  6FA5               	movwf	UpdateCfList@channelIndex& (0+255),b
 12845                           
 12846                           ; BSR set to: 0
 12847                           ;lorawan_eu.c: 835: for (i = 0; i < 5; i++ )
 12848  002934  6BA6               	clrf	UpdateCfList@i& (0+255),b
 12849  002936                     l1315:
 12850                           
 12851                           ; BSR set to: 0
 12852                           ;lorawan_eu.c: 836: {
 12853                           ;lorawan_eu.c: 837: frequency = 0;
 12854  002936  6BA1               	clrf	UpdateCfList@frequency& (0+255),b
 12855  002938  6BA2               	clrf	(UpdateCfList@frequency+1)& (0+255),b
 12856  00293A  6BA3               	clrf	(UpdateCfList@frequency+2)& (0+255),b
 12857  00293C  6BA4               	clrf	(UpdateCfList@frequency+3)& (0+255),b
 12858                           
 12859                           ; BSR set to: 0
 12860                           ;lorawan_eu.c: 838: memcpy (&frequency, joinAccept->members.cfList + 3*i, 3);
 12861  00293E  0EA1               	movlw	low UpdateCfList@frequency
 12862  002940  6F60               	movwf	memcpy@d1& (0+255),b
 12863  002942  6B61               	clrf	(memcpy@d1+1)& (0+255),b
 12864  002944  51A6               	movf	UpdateCfList@i& (0+255),w,b
 12865  002946  0D03               	mullw	3
 12866  002948  C09C  F09E         	movff	UpdateCfList@joinAccept,??_UpdateCfList
 12867  00294C  C09D  F09F         	movff	UpdateCfList@joinAccept+1,??_UpdateCfList+1
 12868  002950  50F3               	movf	prodl,w,c
 12869  002952  279E               	addwf	??_UpdateCfList& (0+255),f,b
 12870  002954  50F4               	movf	prodh,w,c
 12871  002956  239F               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 12872  002958  0E0D               	movlw	13
 12873  00295A  259E               	addwf	??_UpdateCfList& (0+255),w,b
 12874  00295C  6F62               	movwf	memcpy@s1& (0+255),b
 12875  00295E  0E00               	movlw	0
 12876  002960  219F               	addwfc	(??_UpdateCfList+1)& (0+255),w,b
 12877  002962  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 12878  002964  EC0D  F028         	call	PL436	;call to abstracted procedure
 12879  002968  EC94  F028         	call	_memcpy	;wreg free
 12880                           
 12881                           ; BSR set to: 0
 12882                           ;lorawan_eu.c: 839: frequency *= 100;
 12883  00296C  C0A1  F090         	movff	UpdateCfList@frequency,___lmul@multiplier
 12884  002970  C0A2  F091         	movff	UpdateCfList@frequency+1,___lmul@multiplier+1
 12885  002974  C0A3  F092         	movff	UpdateCfList@frequency+2,___lmul@multiplier+2
 12886  002978  C0A4  F093         	movff	UpdateCfList@frequency+3,___lmul@multiplier+3
 12887  00297C  0E64               	movlw	100
 12888  00297E  EC98  F006         	call	PL80	;call to abstracted procedure
 12889  002982  EC25  F02A         	call	___lmul	;wreg free
 12890  002986  C090  F0A1         	movff	?___lmul,UpdateCfList@frequency
 12891  00298A  C091  F0A2         	movff	?___lmul+1,UpdateCfList@frequency+1
 12892  00298E  C092  F0A3         	movff	?___lmul+2,UpdateCfList@frequency+2
 12893  002992  C093  F0A4         	movff	?___lmul+3,UpdateCfList@frequency+3
 12894                           
 12895                           ; BSR set to: 0
 12896                           ;lorawan_eu.c: 840: if (frequency != 0)
 12897  002996  51A1               	movf	UpdateCfList@frequency& (0+255),w,b
 12898  002998  11A2               	iorwf	(UpdateCfList@frequency+1)& (0+255),w,b
 12899  00299A  11A3               	iorwf	(UpdateCfList@frequency+2)& (0+255),w,b
 12900  00299C  11A4               	iorwf	(UpdateCfList@frequency+3)& (0+255),w,b
 12901  00299E  E044               	bz	l13948
 12902                           
 12903                           ; BSR set to: 0
 12904                           ;lorawan_eu.c: 841: {
 12905                           ;lorawan_eu.c: 842: if (ValidateFrequency (frequency) == OK)
 12906  0029A0  C0A1  F060         	movff	UpdateCfList@frequency,ValidateFrequency@frequencyNew
 12907  0029A4  C0A2  F061         	movff	UpdateCfList@frequency+1,ValidateFrequency@frequencyNew+1
 12908  0029A8  C0A3  F062         	movff	UpdateCfList@frequency+2,ValidateFrequency@frequencyNew+2
 12909  0029AC  C0A4  F063         	movff	UpdateCfList@frequency+3,ValidateFrequency@frequencyNew+3
 12910  0029B0  ECB5  F027         	call	_ValidateFrequency	;wreg free
 12911  0029B4  0900               	iorlw	0
 12912  0029B6  E13D               	bnz	l13950
 12913                           
 12914                           ; BSR set to: 0
 12915                           ;lorawan_eu.c: 843: {
 12916                           ;lorawan_eu.c: 844: Channels[i+channelIndex].frequency = frequency;
 12917  0029B8  D859               	call	PL82	;call to abstracted procedure
 12918  0029BA  50F3               	movf	prodl,w,c
 12919  0029BC  D842               	call	PL30	;call to abstracted procedure
 12920  0029BE  C0A1  FFDE         	movff	UpdateCfList@frequency,postinc2
 12921  0029C2  C0A2  FFDE         	movff	UpdateCfList@frequency+1,postinc2
 12922  0029C6  C0A3  FFDE         	movff	UpdateCfList@frequency+2,postinc2
 12923  0029CA  C0A4  FFDE         	movff	UpdateCfList@frequency+3,postinc2
 12924                           
 12925                           ;lorawan_eu.c: 845: Channels[i+channelIndex].dataRange.max = 5;
 12926  0029CE  51A6               	movf	UpdateCfList@i& (0+255),w,b
 12927  0029D0  0D0E               	mullw	14
 12928  0029D2  0E00               	movlw	low _Channels
 12929  0029D4  D842               	call	PL74	;call to abstracted procedure
 12930  0029D6  D835               	call	PL30	;call to abstracted procedure
 12931  0029D8  50DF               	movf	223,w,c
 12932  0029DA  0B0F               	andlw	-241
 12933  0029DC  0950               	iorlw	80
 12934  0029DE  6EDF               	movwf	223,c
 12935                           
 12936                           ;lorawan_eu.c: 846: Channels[i+channelIndex].dataRange.min = 0;
 12937  0029E0  0100               	movlb	0	; () banked
 12938  0029E2  51A6               	movf	UpdateCfList@i& (0+255),w,b
 12939  0029E4  0D0E               	mullw	14
 12940  0029E6  0E00               	movlw	low _Channels
 12941  0029E8  D838               	call	PL74	;call to abstracted procedure
 12942  0029EA  D82B               	call	PL30	;call to abstracted procedure
 12943  0029EC  0EF0               	movlw	-16
 12944  0029EE  16DF               	andwf	223,f,c
 12945                           
 12946                           ;lorawan_eu.c: 847: Channels[i+channelIndex].dutyCycle = 999;
 12947  0029F0  D83D               	call	PL82	;call to abstracted procedure
 12948  0029F2  0E06               	movlw	6
 12949  0029F4  279E               	addwf	??_UpdateCfList& (0+255),f,b
 12950  0029F6  0E00               	movlw	0
 12951  0029F8  239F               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 12952  0029FA  50F3               	movf	prodl,w,c
 12953  0029FC  D822               	call	PL30	;call to abstracted procedure
 12954  0029FE  0EE7               	movlw	231
 12955  002A00  6EDE               	movwf	postinc2,c
 12956  002A02  0E03               	movlw	3
 12957  002A04  6EDD               	movwf	postdec2,c
 12958                           
 12959                           ;lorawan_eu.c: 848: Channels[i+channelIndex].parametersDefined = 0xFF;
 12960  002A06  D832               	call	PL82	;call to abstracted procedure
 12961  002A08  0E0D               	movlw	13
 12962  002A0A  279E               	addwf	??_UpdateCfList& (0+255),f,b
 12963  002A0C  0E00               	movlw	0
 12964  002A0E  239F               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 12965  002A10  50F3               	movf	prodl,w,c
 12966  002A12  D817               	call	PL30	;call to abstracted procedure
 12967  002A14  68DF               	setf	indf2,c
 12968                           
 12969                           ; BSR set to: 0
 12970                           ;lorawan_eu.c: 849: LORAWAN_SetChannelIdStatus(i+channelIndex, 1);
 12971  002A16  0E01               	movlw	1
 12972  002A18  6F64               	movwf	LORAWAN_SetChannelIdStatus@statusNew& (0+255),b
 12973  002A1A  51A6               	movf	UpdateCfList@i& (0+255),w,b
 12974  002A1C  25A5               	addwf	UpdateCfList@channelIndex& (0+255),w,b
 12975  002A1E  EC11  F02D         	call	_LORAWAN_SetChannelIdStatus
 12976                           
 12977                           ;lorawan_eu.c: 850: loRa.macStatus.channelsModified = 1;
 12978  002A22  0102               	movlb	2	; () banked
 12979  002A24  8703               	bsf	(_loRa+3)& (0+255),3,b
 12980  002A26  D005               	goto	l13950
 12981  002A28                     l13948:
 12982                           
 12983                           ; BSR set to: 0
 12984                           ;lorawan_eu.c: 853: else
 12985                           ;lorawan_eu.c: 854: {
 12986                           ;lorawan_eu.c: 855: LORAWAN_SetChannelIdStatus(i+channelIndex, 0);
 12987  002A28  6B64               	clrf	LORAWAN_SetChannelIdStatus@statusNew& (0+255),b
 12988  002A2A  51A6               	movf	UpdateCfList@i& (0+255),w,b
 12989  002A2C  25A5               	addwf	UpdateCfList@channelIndex& (0+255),w,b
 12990  002A2E  EC11  F02D         	call	_LORAWAN_SetChannelIdStatus
 12991  002A32                     l13950:
 12992  002A32  0100               	movlb	0	; () banked
 12993  002A34  2BA6               	incf	UpdateCfList@i& (0+255),f,b
 12994                           
 12995                           ; BSR set to: 0
 12996  002A36  0E04               	movlw	4
 12997  002A38  65A6               	cpfsgt	UpdateCfList@i& (0+255),b
 12998  002A3A  D77D               	goto	l1315
 12999                           
 13000                           ; BSR set to: 0
 13001                           ;lorawan_eu.c: 856: }
 13002                           ;lorawan_eu.c: 857: }
 13003                           ;lorawan_eu.c: 859: loRa.macStatus.channelsModified = 1;
 13004  002A3C  0102               	movlb	2	; () banked
 13005  002A3E  8703               	bsf	(_loRa+3)& (0+255),3,b
 13006  002A40  0C04               	retlw	4	;funcret
 13007  002A42                     __end_of_UpdateCfList:
 13008                           	opt stack 0
 13009  002A42                     PL30:
 13010                           	opt stack 17
 13011  002A42  279E               	addwf	??_UpdateCfList& (0+255),f,b
 13012  002A44  50F4               	movf	prodh,w,c
 13013  002A46  239F               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 13014  002A48  51A5               	movf	UpdateCfList@channelIndex& (0+255),w,b
 13015  002A4A  0D0E               	mullw	14
 13016  002A4C  50F3               	movf	prodl,w,c
 13017  002A4E  259E               	addwf	??_UpdateCfList& (0+255),w,b
 13018  002A50  6ED9               	movwf	fsr2l,c
 13019  002A52  50F4               	movf	prodh,w,c
 13020  002A54  219F               	addwfc	(??_UpdateCfList+1)& (0+255),w,b
 13021  002A56  6EDA               	movwf	fsr2h,c
 13022  002A58  0012               	return	
 13023  002A5A                     __end_ofPL30:
 13024                           	opt stack 0
 13025  002A5A                     PL74:
 13026                           	opt stack 17
 13027  002A5A  6F9E               	movwf	??_UpdateCfList& (0+255),b
 13028  002A5C  0E04               	movlw	high _Channels
 13029  002A5E  6F9F               	movwf	(??_UpdateCfList+1)& (0+255),b
 13030  002A60  0E05               	movlw	5
 13031  002A62  279E               	addwf	??_UpdateCfList& (0+255),f,b
 13032  002A64  0E00               	movlw	0
 13033  002A66  239F               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 13034  002A68  50F3               	movf	prodl,w,c
 13035  002A6A  0012               	return	
 13036  002A6C                     __end_ofPL74:
 13037                           	opt stack 0
 13038  002A6C                     PL82:
 13039                           	opt stack 17
 13040  002A6C  51A6               	movf	UpdateCfList@i& (0+255),w,b
 13041  002A6E  0D0E               	mullw	14
 13042  002A70  0E00               	movlw	low _Channels
 13043  002A72  6F9E               	movwf	??_UpdateCfList& (0+255),b
 13044  002A74  0E04               	movlw	high _Channels
 13045  002A76  6F9F               	movwf	(??_UpdateCfList+1)& (0+255),b
 13046  002A78  0012               	return	
 13047  002A7A                     __end_ofPL82:
 13048                           	opt stack 0
 13049                           tosu	equ	0xFFF
 13050                           tosh	equ	0xFFE
 13051                           tosl	equ	0xFFD
 13052                           pclath	equ	0xFFA
 13053                           tblptru	equ	0xFF8
 13054                           tblptrh	equ	0xFF7
 13055                           tblptrl	equ	0xFF6
 13056                           tablat	equ	0xFF5
 13057                           prodh	equ	0xFF4
 13058                           prodl	equ	0xFF3
 13059                           intcon	equ	0xFF2
 13060                           indf0	equ	0xFEF
 13061                           postinc0	equ	0xFEE
 13062                           plusw0	equ	0xFEB
 13063                           fsr0h	equ	0xFEA
 13064                           fsr0l	equ	0xFE9
 13065                           wreg	equ	0xFE8
 13066                           postinc1	equ	0xFE6
 13067                           postdec1	equ	0xFE5
 13068                           plusw1	equ	0xFE3
 13069                           fsr1h	equ	0xFE2
 13070                           fsr1l	equ	0xFE1
 13071                           indf2	equ	0xFDF
 13072                           postinc2	equ	0xFDE
 13073                           postdec2	equ	0xFDD
 13074                           plusw2	equ	0xFDB
 13075                           fsr2h	equ	0xFDA
 13076                           fsr2l	equ	0xFD9
 13077                           status	equ	0xFD8
 13078                           
 13079 ;; *************** function _StartReTxTimer *****************
 13080 ;; Defined at:
 13081 ;;		line 902 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 13082 ;; Parameters:    Size  Location     Type
 13083 ;;		None
 13084 ;; Auto vars:     Size  Location     Type
 13085 ;;  minim           4   52[BANK0 ] unsigned long 
 13086 ;;  i               1   56[BANK0 ] unsigned char 
 13087 ;; Return value:  Size  Location     Type
 13088 ;;                  1    wreg      void 
 13089 ;; Registers used:
 13090 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13091 ;; Tracked objects:
 13092 ;;		On entry : 3E/0
 13093 ;;		On exit  : 3F/0
 13094 ;;		Unchanged: 0/0
 13095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13096 ;;      Params:         0       0       0       0       0       0       0       0       0
 13097 ;;      Locals:         0       5       0       0       0       0       0       0       0
 13098 ;;      Temps:          0       4       0       0       0       0       0       0       0
 13099 ;;      Totals:         0       9       0       0       0       0       0       0       0
 13100 ;;Total ram usage:        9 bytes
 13101 ;; Hardware stack levels used:    1
 13102 ;; Hardware stack levels required when called:   11
 13103 ;; This function calls:
 13104 ;;		_SwTimerSetTimeout
 13105 ;;		_SwTimerStart
 13106 ;;		___lldiv
 13107 ;; This function is called by:
 13108 ;;		_LORAWAN_RxDone
 13109 ;; This function uses a non-reentrant model
 13110 ;;
 13111                           
 13112                           	psect	text60
 13113  0034DA                     __ptext60:
 13114                           	opt stack 0
 13115  0034DA                     _StartReTxTimer:
 13116                           	opt stack 15
 13117                           
 13118                           ;lorawan_eu.c: 904: uint8_t i;
 13119                           ;lorawan_eu.c: 905: uint32_t minim = (4294967295UL);
 13120                           
 13121                           ;incstack = 0
 13122  0034DA  0100               	movlb	0	; () banked
 13123  0034DC  6994               	setf	StartReTxTimer@minim& (0+255),b
 13124  0034DE  6995               	setf	(StartReTxTimer@minim+1)& (0+255),b
 13125  0034E0  6996               	setf	(StartReTxTimer@minim+2)& (0+255),b
 13126  0034E2  6997               	setf	(StartReTxTimer@minim+3)& (0+255),b
 13127                           
 13128                           ;lorawan_eu.c: 907: for (i = 0; i <= loRa.maxChannels; i++)
 13129  0034E4  6B98               	clrf	StartReTxTimer@i& (0+255),b
 13130  0034E6  D03A               	goto	l14098
 13131  0034E8                     l14084:
 13132                           
 13133                           ; BSR set to: 2
 13134                           ;lorawan_eu.c: 908: {
 13135                           ;lorawan_eu.c: 909: if ( (Channels[i].status == 1) && (Channels[i].channelTimer != 0) &&
      +                           (Channels[i].channelTimer <= minim) && (loRa.currentDataRate >= Channels[i].dataRange.m
      +                          in) && (loRa.currentDataRate <= Channels[i].dataRange.max) )
 13136  0034E8  0100               	movlb	0	; () banked
 13137  0034EA  5198               	movf	StartReTxTimer@i& (0+255),w,b
 13138  0034EC  EC86  F021         	call	PL12	;call to abstracted procedure
 13139  0034F0  E133               	bnz	l14096
 13140                           
 13141                           ; BSR set to: 0
 13142  0034F2  5198               	movf	StartReTxTimer@i& (0+255),w,b
 13143  0034F4  EC51  F006         	call	PL4	;call to abstracted procedure
 13144  0034F8  ECBB  F00E         	call	PL130	;call to abstracted procedure
 13145  0034FC  E02D               	bz	l14096
 13146                           
 13147                           ; BSR set to: 0
 13148  0034FE  5198               	movf	StartReTxTimer@i& (0+255),w,b
 13149  003500  EC51  F006         	call	PL4	;call to abstracted procedure
 13150  003504  50DE               	movf	postinc2,w,c
 13151  003506  5D94               	subwf	StartReTxTimer@minim& (0+255),w,b
 13152  003508  50DE               	movf	postinc2,w,c
 13153  00350A  5995               	subwfb	(StartReTxTimer@minim+1)& (0+255),w,b
 13154  00350C  50DE               	movf	postinc2,w,c
 13155  00350E  5996               	subwfb	(StartReTxTimer@minim+2)& (0+255),w,b
 13156  003510  50DE               	movf	postinc2,w,c
 13157  003512  5997               	subwfb	(StartReTxTimer@minim+3)& (0+255),w,b
 13158  003514  E321               	bnc	l14096
 13159                           
 13160                           ; BSR set to: 0
 13161  003516  5198               	movf	StartReTxTimer@i& (0+255),w,b
 13162  003518  EC7E  F021         	call	PL6	;call to abstracted procedure
 13163  00351C  50DF               	movf	223,w,c
 13164  00351E  0B0F               	andlw	15
 13165  003520  6F90               	movwf	??_StartReTxTimer& (0+255),b
 13166  003522  5190               	movf	??_StartReTxTimer& (0+255),w,b
 13167  003524  0102               	movlb	2	; () banked
 13168  003526  5DDF               	subwf	(_loRa+223)& (0+255),w,b
 13169  003528  E317               	bnc	l14096
 13170                           
 13171                           ; BSR set to: 2
 13172  00352A  0100               	movlb	0	; () banked
 13173  00352C  5198               	movf	StartReTxTimer@i& (0+255),w,b
 13174  00352E  EC7E  F021         	call	PL6	;call to abstracted procedure
 13175  003532  38DF               	swapf	223,w,c
 13176  003534  0B0F               	andlw	15
 13177  003536  6F90               	movwf	??_StartReTxTimer& (0+255),b
 13178  003538  0102               	movlb	2	; () banked
 13179  00353A  51DF               	movf	(_loRa+223)& (0+255),w,b
 13180  00353C  0100               	movlb	0	; () banked
 13181  00353E  5D90               	subwf	??_StartReTxTimer& (0+255),w,b
 13182  003540  E30B               	bnc	l14096
 13183                           
 13184                           ; BSR set to: 0
 13185                           ;lorawan_eu.c: 910: {
 13186                           ;lorawan_eu.c: 911: minim = Channels[i].channelTimer;
 13187  003542  5198               	movf	StartReTxTimer@i& (0+255),w,b
 13188  003544  EC51  F006         	call	PL4	;call to abstracted procedure
 13189  003548  CFDE F094          	movff	postinc2,StartReTxTimer@minim
 13190  00354C  CFDE F095          	movff	postinc2,StartReTxTimer@minim+1
 13191  003550  CFDE F096          	movff	postinc2,StartReTxTimer@minim+2
 13192  003554  CFDE F097          	movff	postinc2,StartReTxTimer@minim+3
 13193  003558                     l14096:
 13194  003558  0100               	movlb	0	; () banked
 13195  00355A  2B98               	incf	StartReTxTimer@i& (0+255),f,b
 13196  00355C                     l14098:
 13197                           
 13198                           ; BSR set to: 0
 13199  00355C  5198               	movf	StartReTxTimer@i& (0+255),w,b
 13200  00355E  0102               	movlb	2	; () banked
 13201  003560  5DED               	subwf	(_loRa+237)& (0+255),w,b
 13202  003562  E2C2               	bc	l14084
 13203                           
 13204                           ; BSR set to: 2
 13205                           ;lorawan_eu.c: 912: }
 13206                           ;lorawan_eu.c: 913: }
 13207                           ;lorawan_eu.c: 914: loRa.macStatus.macState = RETRANSMISSION_DELAY;
 13208  003564  EC9C  F00C         	call	PL274	;call to abstracted procedure
 13209                           
 13210                           ; BSR set to: 2
 13211                           ;lorawan_eu.c: 915: SwTimerSetTimeout (loRa.automaticReplyTimerId, ( (((uint32_t)(minim)
      +                          ) << (12)) / 125UL ) );
 13212  003568  C094  F090         	movff	StartReTxTimer@minim,??_StartReTxTimer
 13213  00356C  C095  F091         	movff	StartReTxTimer@minim+1,??_StartReTxTimer+1
 13214  003570  C096  F092         	movff	StartReTxTimer@minim+2,??_StartReTxTimer+2
 13215  003574  C097  F093         	movff	StartReTxTimer@minim+3,??_StartReTxTimer+3
 13216  003578  0E0C               	movlw	12
 13217  00357A                     u15945:
 13218  00357A  90D8               	bcf	status,0,c
 13219  00357C  0100               	movlb	0	; () banked
 13220  00357E  3790               	rlcf	??_StartReTxTimer& (0+255),f,b
 13221  003580  3791               	rlcf	(??_StartReTxTimer+1)& (0+255),f,b
 13222  003582  3792               	rlcf	(??_StartReTxTimer+2)& (0+255),f,b
 13223  003584  3793               	rlcf	(??_StartReTxTimer+3)& (0+255),f,b
 13224  003586  2EE8               	decfsz	wreg,f,c
 13225  003588  D7F8               	goto	u15945
 13226  00358A  C090  F060         	movff	??_StartReTxTimer,___lldiv@dividend
 13227  00358E  C091  F061         	movff	??_StartReTxTimer+1,___lldiv@dividend+1
 13228  003592  C092  F062         	movff	??_StartReTxTimer+2,___lldiv@dividend+2
 13229  003596  C093  F063         	movff	??_StartReTxTimer+3,___lldiv@dividend+3
 13230  00359A  0E7D               	movlw	125
 13231  00359C  EC77  F011         	call	PL32	;call to abstracted procedure
 13232  0035A0  EC1B  F025         	call	___lldiv	;wreg free
 13233  0035A4  EC73  F006         	call	PL20	;call to abstracted procedure
 13234  0035A8  51E6               	movf	(_loRa+230)& (0+255),w,b
 13235  0035AA  EC11  F02C         	call	_SwTimerSetTimeout
 13236                           
 13237                           ; BSR set to: 0
 13238                           ;lorawan_eu.c: 916: SwTimerStart (loRa.automaticReplyTimerId);
 13239  0035AE  0102               	movlb	2	; () banked
 13240  0035B0  51E6               	movf	(_loRa+230)& (0+255),w,b
 13241  0035B2  EFC4  F025         	goto	_SwTimerStart
 13242  0035B6                     __end_of_StartReTxTimer:
 13243                           	opt stack 0
 13244                           tosu	equ	0xFFF
 13245                           tosh	equ	0xFFE
 13246                           tosl	equ	0xFFD
 13247                           pclath	equ	0xFFA
 13248                           tblptru	equ	0xFF8
 13249                           tblptrh	equ	0xFF7
 13250                           tblptrl	equ	0xFF6
 13251                           tablat	equ	0xFF5
 13252                           prodh	equ	0xFF4
 13253                           prodl	equ	0xFF3
 13254                           intcon	equ	0xFF2
 13255                           indf0	equ	0xFEF
 13256                           postinc0	equ	0xFEE
 13257                           plusw0	equ	0xFEB
 13258                           fsr0h	equ	0xFEA
 13259                           fsr0l	equ	0xFE9
 13260                           wreg	equ	0xFE8
 13261                           postinc1	equ	0xFE6
 13262                           postdec1	equ	0xFE5
 13263                           plusw1	equ	0xFE3
 13264                           fsr1h	equ	0xFE2
 13265                           fsr1l	equ	0xFE1
 13266                           indf2	equ	0xFDF
 13267                           postinc2	equ	0xFDE
 13268                           postdec2	equ	0xFDD
 13269                           plusw2	equ	0xFDB
 13270                           fsr2h	equ	0xFDA
 13271                           fsr2l	equ	0xFD9
 13272                           status	equ	0xFD8
 13273                           
 13274 ;; *************** function _SetReceptionNotOkState *****************
 13275 ;; Defined at:
 13276 ;;		line 1997 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 13277 ;; Parameters:    Size  Location     Type
 13278 ;;		None
 13279 ;; Auto vars:     Size  Location     Type
 13280 ;;		None
 13281 ;; Return value:  Size  Location     Type
 13282 ;;                  1    wreg      void 
 13283 ;; Registers used:
 13284 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13285 ;; Tracked objects:
 13286 ;;		On entry : 3D/2
 13287 ;;		On exit  : 3C/0
 13288 ;;		Unchanged: 0/0
 13289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13290 ;;      Params:         0       0       0       0       0       0       0       0       0
 13291 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13292 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13293 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13294 ;;Total ram usage:        0 bytes
 13295 ;; Hardware stack levels used:    1
 13296 ;; Hardware stack levels required when called:   14
 13297 ;; This function calls:
 13298 ;;		_LORAWAN_EnterContinuousReceive
 13299 ;;		_RxDataDone
 13300 ;; This function is called by:
 13301 ;;		_LORAWAN_RxDone
 13302 ;; This function uses a non-reentrant model
 13303 ;;
 13304                           
 13305                           	psect	text61
 13306  004CC2                     __ptext61:
 13307                           	opt stack 0
 13308  004CC2                     _SetReceptionNotOkState:
 13309                           	opt stack 0
 13310                           
 13311                           ;lorawan.c: 1999: if ( (loRa.macStatus.macState == RX2_OPEN) || ( (loRa.macStatus.macSta
      +                          te == RX1_OPEN) && (loRa.rx2DelayExpired) ) )
 13312                           
 13313                           ; BSR set to: 0
 13314                           ;incstack = 0
 13315  004CC2  D82C               	call	PL384	;call to abstracted procedure
 13316  004CC4  E006               	bz	l822
 13317                           
 13318                           ; BSR set to: 2
 13319  004CC6  5102               	movf	(_loRa+2)& (0+255),w,b
 13320  004CC8  0B0F               	andlw	15
 13321  004CCA  0A03               	xorlw	3
 13322  004CCC  E11F               	bnz	l14012
 13323                           
 13324                           ; BSR set to: 2
 13325  004CCE  51F1               	movf	(_loRa+241)& (0+255),w,b
 13326  004CD0  E01D               	bz	l14012
 13327  004CD2                     l822:
 13328                           
 13329                           ; BSR set to: 2
 13330                           ;lorawan.c: 2000: {
 13331                           ;lorawan.c: 2001: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 0;
 13332  004CD2  9100               	bcf	_loRa& (0+255),0,b
 13333                           
 13334                           ; BSR set to: 2
 13335                           ;lorawan.c: 2002: loRa.macStatus.macState = IDLE;
 13336  004CD4  0EF0               	movlw	-16
 13337  004CD6  1702               	andwf	(_loRa+2)& (0+255),f,b
 13338                           
 13339                           ;lorawan.c: 2004: if ((loRa.deviceClass == CLASS_A) && (rxPayload.RxAppData != (0)))
 13340  004CD8  5112               	movf	(_loRa+18)& (0+255),w,b
 13341  004CDA  E116               	bnz	l14010
 13342                           
 13343                           ; BSR set to: 2
 13344  004CDC  0101               	movlb	1	; () banked
 13345  004CDE  5179               	movf	_rxPayload& (0+255),w,b
 13346  004CE0  117A               	iorwf	(_rxPayload+1)& (0+255),w,b
 13347  004CE2  E012               	bz	l14010
 13348                           
 13349                           ; BSR set to: 1
 13350                           ;lorawan.c: 2005: {
 13351                           ;lorawan.c: 2006: loRa.lorawanMacStatus.synchronization = 0;
 13352  004CE4  0102               	movlb	2	; () banked
 13353  004CE6  9B00               	bcf	_loRa& (0+255),5,b
 13354                           
 13355                           ; BSR set to: 2
 13356                           ;lorawan.c: 2007: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
 13357  004CE8  EC96  F00C         	call	PL48	;call to abstracted procedure
 13358  004CEC  6F63               	movwf	RxDataDone@status& (0+255),b
 13359  004CEE  D801               	call	u15788
 13360  004CF0  D00B               	goto	l14010
 13361  004CF2                     u15788:
 13362  004CF2  0005               	push	
 13363  004CF4  0101               	movlb	1	; () banked
 13364  004CF6  6EFA               	movwf	pclath,c
 13365  004CF8  5179               	movf	_rxPayload& (0+255),w,b
 13366  004CFA  6EFD               	movwf	tosl,c
 13367  004CFC  517A               	movf	(_rxPayload+1)& (0+255),w,b
 13368  004CFE  6EFE               	movwf	tosh,c
 13369  004D00  50F8               	movf	tblptru,w,c
 13370  004D02  6EFF               	movwf	tosu,c
 13371  004D04  50FA               	movf	pclath,w,c
 13372  004D06  0012               	return		;indir
 13373  004D08                     l14010:
 13374                           
 13375                           ;lorawan.c: 2008: }
 13376                           ;lorawan.c: 2009: loRa.macStatus.rxDone = 0;
 13377  004D08  0102               	movlb	2	; () banked
 13378  004D0A  9303               	bcf	(_loRa+3)& (0+255),1,b
 13379  004D0C                     l14012:
 13380                           
 13381                           ; BSR set to: 2
 13382                           ;lorawan.c: 2010: }
 13383                           ;lorawan.c: 2012: if (loRa.deviceClass == CLASS_C)
 13384  004D0C  0E02               	movlw	2
 13385  004D0E  1912               	xorwf	(_loRa+18)& (0+255),w,b
 13386  004D10  A4D8               	btfss	status,2,c
 13387  004D12  0012               	return	
 13388                           
 13389                           ; BSR set to: 2
 13390                           ;lorawan.c: 2013: {
 13391                           ;lorawan.c: 2014: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 13392  004D14  EC40  F004         	call	PL316	;call to abstracted procedure
 13393                           
 13394                           ; BSR set to: 2
 13395                           ;lorawan.c: 2015: LORAWAN_EnterContinuousReceive();
 13396  004D18  EF93  F026         	goto	_LORAWAN_EnterContinuousReceive	;wreg free
 13397  004D1C                     __end_of_SetReceptionNotOkState:
 13398                           	opt stack 0
 13399  004D1C                     PL384:
 13400                           	opt stack 12
 13401  004D1C  0102               	movlb	2	; () banked
 13402  004D1E  5102               	movf	(_loRa+2)& (0+255),w,b
 13403  004D20  0B0F               	andlw	15
 13404  004D22  0A05               	xorlw	5
 13405  004D24  0012               	return	
 13406  004D26                     __end_ofPL384:
 13407                           	opt stack 0
 13408                           tosu	equ	0xFFF
 13409                           tosh	equ	0xFFE
 13410                           tosl	equ	0xFFD
 13411                           pclath	equ	0xFFA
 13412                           tblptru	equ	0xFF8
 13413                           tblptrh	equ	0xFF7
 13414                           tblptrl	equ	0xFF6
 13415                           tablat	equ	0xFF5
 13416                           prodh	equ	0xFF4
 13417                           prodl	equ	0xFF3
 13418                           intcon	equ	0xFF2
 13419                           indf0	equ	0xFEF
 13420                           postinc0	equ	0xFEE
 13421                           plusw0	equ	0xFEB
 13422                           fsr0h	equ	0xFEA
 13423                           fsr0l	equ	0xFE9
 13424                           wreg	equ	0xFE8
 13425                           postinc1	equ	0xFE6
 13426                           postdec1	equ	0xFE5
 13427                           plusw1	equ	0xFE3
 13428                           fsr1h	equ	0xFE2
 13429                           fsr1l	equ	0xFE1
 13430                           indf2	equ	0xFDF
 13431                           postinc2	equ	0xFDE
 13432                           postdec2	equ	0xFDD
 13433                           plusw2	equ	0xFDB
 13434                           fsr2h	equ	0xFDA
 13435                           fsr2l	equ	0xFD9
 13436                           status	equ	0xFD8
 13437                           
 13438 ;; *************** function _SetJoinFailState *****************
 13439 ;; Defined at:
 13440 ;;		line 1104 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 13441 ;; Parameters:    Size  Location     Type
 13442 ;;		None
 13443 ;; Auto vars:     Size  Location     Type
 13444 ;;		None
 13445 ;; Return value:  Size  Location     Type
 13446 ;;                  1    wreg      void 
 13447 ;; Registers used:
 13448 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
 13449 ;; Tracked objects:
 13450 ;;		On entry : 3F/2
 13451 ;;		On exit  : 3F/1
 13452 ;;		Unchanged: 0/0
 13453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13454 ;;      Params:         0       0       0       0       0       0       0       0       0
 13455 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13456 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13457 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13458 ;;Total ram usage:        0 bytes
 13459 ;; Hardware stack levels used:    1
 13460 ;; Hardware stack levels required when called:    8
 13461 ;; This function calls:
 13462 ;;		_RxJoinResponse
 13463 ;; This function is called by:
 13464 ;;		_LORAWAN_RxDone
 13465 ;;		_LORAWAN_RxTimeout
 13466 ;; This function uses a non-reentrant model
 13467 ;;
 13468                           
 13469                           	psect	text62
 13470  005BB4                     __ptext62:
 13471                           	opt stack 0
 13472  005BB4                     _SetJoinFailState:
 13473                           	opt stack 18
 13474                           
 13475                           ; BSR set to: 2
 13476                           ;lorawan.c: 1106: loRa.macStatus.networkJoined = 0;
 13477                           
 13478                           ;incstack = 0
 13479  005BB4  9902               	bcf	(_loRa+2)& (0+255),4,b
 13480                           
 13481                           ;lorawan.c: 1107: loRa.lorawanMacStatus.joining = 0;
 13482  005BB6  9500               	bcf	_loRa& (0+255),2,b
 13483                           
 13484                           ; BSR set to: 2
 13485                           ;lorawan.c: 1108: loRa.macStatus.macState = IDLE;
 13486  005BB8  0EF0               	movlw	-16
 13487  005BBA  1702               	andwf	(_loRa+2)& (0+255),f,b
 13488                           
 13489                           ; BSR set to: 2
 13490                           ;lorawan.c: 1109: if (rxPayload.RxJoinResponse != (0))
 13491  005BBC  0101               	movlb	1	; () banked
 13492  005BBE  517B               	movf	(_rxPayload+2)& (0+255),w,b
 13493  005BC0  117C               	iorwf	(_rxPayload+3)& (0+255),w,b
 13494  005BC2  B4D8               	btfsc	status,2,c
 13495  005BC4  0012               	return	
 13496                           
 13497                           ; BSR set to: 1
 13498                           ;lorawan.c: 1110: {
 13499                           ;lorawan.c: 1111: rxPayload.RxJoinResponse(0);
 13500  005BC6  EE21  F07B         	lfsr	2,_rxPayload+2
 13501  005BCA  0005               	push	
 13502  005BCC  6EFA               	movwf	pclath,c
 13503  005BCE  50DE               	movf	postinc2,w,c
 13504  005BD0  6EFD               	movwf	tosl,c
 13505  005BD2  50DE               	movf	postinc2,w,c
 13506  005BD4  6EFE               	movwf	tosh,c
 13507  005BD6  50F8               	movf	tblptru,w,c
 13508  005BD8  6EFF               	movwf	tosu,c
 13509  005BDA  50FA               	movf	pclath,w,c
 13510  005BDC  0C00               	retlw	0	;indir
 13511  005BDE                     __end_of_SetJoinFailState:
 13512                           	opt stack 0
 13513                           tosu	equ	0xFFF
 13514                           tosh	equ	0xFFE
 13515                           tosl	equ	0xFFD
 13516                           pclath	equ	0xFFA
 13517                           tblptru	equ	0xFF8
 13518                           tblptrh	equ	0xFF7
 13519                           tblptrl	equ	0xFF6
 13520                           tablat	equ	0xFF5
 13521                           prodh	equ	0xFF4
 13522                           prodl	equ	0xFF3
 13523                           intcon	equ	0xFF2
 13524                           indf0	equ	0xFEF
 13525                           postinc0	equ	0xFEE
 13526                           plusw0	equ	0xFEB
 13527                           fsr0h	equ	0xFEA
 13528                           fsr0l	equ	0xFE9
 13529                           wreg	equ	0xFE8
 13530                           postinc1	equ	0xFE6
 13531                           postdec1	equ	0xFE5
 13532                           plusw1	equ	0xFE3
 13533                           fsr1h	equ	0xFE2
 13534                           fsr1l	equ	0xFE1
 13535                           indf2	equ	0xFDF
 13536                           postinc2	equ	0xFDE
 13537                           postdec2	equ	0xFDD
 13538                           plusw2	equ	0xFDB
 13539                           fsr2h	equ	0xFDA
 13540                           fsr2l	equ	0xFD9
 13541                           status	equ	0xFD8
 13542                           
 13543 ;; *************** function _RxJoinResponse *****************
 13544 ;; Defined at:
 13545 ;;		line 124 in file "main.c"
 13546 ;; Parameters:    Size  Location     Type
 13547 ;;  status          1    wreg     unsigned char 
 13548 ;; Auto vars:     Size  Location     Type
 13549 ;;  status          1    0[COMRAM] unsigned char 
 13550 ;; Return value:  Size  Location     Type
 13551 ;;                  1    wreg      void 
 13552 ;; Registers used:
 13553 ;;		wreg, status,2
 13554 ;; Tracked objects:
 13555 ;;		On entry : 3F/1
 13556 ;;		On exit  : 3F/1
 13557 ;;		Unchanged: 0/0
 13558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13559 ;;      Params:         0       0       0       0       0       0       0       0       0
 13560 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13561 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13562 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13563 ;;Total ram usage:        0 bytes
 13564 ;; Hardware stack levels used:    1
 13565 ;; Hardware stack levels required when called:    7
 13566 ;; This function calls:
 13567 ;;		Nothing
 13568 ;; This function is called by:
 13569 ;;		_main
 13570 ;;		_UpdateJoinSuccessState
 13571 ;;		_SetJoinFailState
 13572 ;; This function uses a non-reentrant model
 13573 ;;
 13574                           
 13575                           	psect	text63
 13576  006208                     __ptext63:
 13577                           	opt stack 0
 13578  006208                     _RxJoinResponse:
 13579                           	opt stack 20
 13580                           
 13581                           ; BSR set to: 1
 13582                           ;main.c: 126: JoinedServer = 1;
 13583                           
 13584                           ; BSR set to: 1
 13585                           ;incstack = 0
 13586  006208  0E01               	movlw	1
 13587  00620A  6F7D               	movwf	_JoinedServer& (0+255),b
 13588                           
 13589                           ; BSR set to: 1
 13590  00620C  0C01               	retlw	1	;funcret
 13591  00620E                     __end_of_RxJoinResponse:
 13592                           	opt stack 0
 13593                           tosu	equ	0xFFF
 13594                           tosh	equ	0xFFE
 13595                           tosl	equ	0xFFD
 13596                           pclath	equ	0xFFA
 13597                           tblptru	equ	0xFF8
 13598                           tblptrh	equ	0xFF7
 13599                           tblptrl	equ	0xFF6
 13600                           tablat	equ	0xFF5
 13601                           prodh	equ	0xFF4
 13602                           prodl	equ	0xFF3
 13603                           intcon	equ	0xFF2
 13604                           indf0	equ	0xFEF
 13605                           postinc0	equ	0xFEE
 13606                           plusw0	equ	0xFEB
 13607                           fsr0h	equ	0xFEA
 13608                           fsr0l	equ	0xFE9
 13609                           wreg	equ	0xFE8
 13610                           postinc1	equ	0xFE6
 13611                           postdec1	equ	0xFE5
 13612                           plusw1	equ	0xFE3
 13613                           fsr1h	equ	0xFE2
 13614                           fsr1l	equ	0xFE1
 13615                           indf2	equ	0xFDF
 13616                           postinc2	equ	0xFDE
 13617                           postdec2	equ	0xFDD
 13618                           plusw2	equ	0xFDB
 13619                           fsr2h	equ	0xFDA
 13620                           fsr2l	equ	0xFD9
 13621                           status	equ	0xFD8
 13622                           
 13623 ;; *************** function _MacExecuteCommands *****************
 13624 ;; Defined at:
 13625 ;;		line 1575 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 13626 ;; Parameters:    Size  Location     Type
 13627 ;;  buffer          2   68[BANK0 ] PTR unsigned char 
 13628 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 13629 ;;  fOptsLen        1   70[BANK0 ] unsigned char 
 13630 ;; Auto vars:     Size  Location     Type
 13631 ;;  ptr             2   74[BANK0 ] PTR unsigned char 
 13632 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 13633 ;;  done            1   73[BANK0 ] unsigned char 
 13634 ;; Return value:  Size  Location     Type
 13635 ;;                  2   68[BANK0 ] PTR unsigned char 
 13636 ;; Registers used:
 13637 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13638 ;; Tracked objects:
 13639 ;;		On entry : 3F/0
 13640 ;;		On exit  : 3F/0
 13641 ;;		Unchanged: 0/0
 13642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13643 ;;      Params:         0       3       0       0       0       0       0       0       0
 13644 ;;      Locals:         0       3       0       0       0       0       0       0       0
 13645 ;;      Temps:          0       2       0       0       0       0       0       0       0
 13646 ;;      Totals:         0       8       0       0       0       0       0       0       0
 13647 ;;Total ram usage:        8 bytes
 13648 ;; Hardware stack levels used:    1
 13649 ;; Hardware stack levels required when called:   11
 13650 ;; This function calls:
 13651 ;;		_ExecuteDevStatus
 13652 ;;		_ExecuteDutyCycle
 13653 ;;		_ExecuteLinkAdr
 13654 ;;		_ExecuteLinkCheck
 13655 ;;		_ExecuteNewChannel
 13656 ;;		_ExecuteRxParamSetupReq
 13657 ;;		_ExecuteRxTimingSetup
 13658 ;; This function is called by:
 13659 ;;		_LORAWAN_RxDone
 13660 ;; This function uses a non-reentrant model
 13661 ;;
 13662                           
 13663                           	psect	text64
 13664  0024BE                     __ptext64:
 13665                           	opt stack 0
 13666  0024BE                     _MacExecuteCommands:
 13667                           	opt stack 15
 13668                           
 13669                           ; BSR set to: 0
 13670                           ;lorawan.c: 1577: bool done = 0;
 13671                           
 13672                           ; BSR set to: 1
 13673                           ;incstack = 0
 13674  0024BE  6BA9               	clrf	MacExecuteCommands@done& (0+255),b
 13675                           
 13676                           ; BSR set to: 0
 13677                           ;lorawan.c: 1578: uint8_t *ptr;
 13678                           ;lorawan.c: 1579: ptr = buffer;
 13679  0024C0  C0A4  F0AA         	movff	MacExecuteCommands@buffer,MacExecuteCommands@ptr
 13680  0024C4  C0A5  F0AB         	movff	MacExecuteCommands@buffer+1,MacExecuteCommands@ptr+1
 13681                           
 13682                           ;lorawan.c: 1580: while ( (ptr < ( buffer + fOptsLen )) && (done == 0) )
 13683  0024C8  D0A5               	goto	l14074
 13684  0024CA                     l14038:
 13685                           
 13686                           ; BSR set to: 0
 13687                           ;lorawan.c: 1581: {
 13688                           ;lorawan.c: 1583: loRa.macCommands[loRa.crtMacCmdIndex].channelMaskAck = 0;
 13689  0024CA  0102               	movlb	2	; () banked
 13690  0024CC  51A7               	movf	(_loRa+167)& (0+255),w,b
 13691  0024CE  ECCB  F015         	call	PL2	;call to abstracted procedure
 13692  0024D2  90DF               	bcf	indf2,0,c
 13693                           
 13694                           ;lorawan.c: 1584: loRa.macCommands[loRa.crtMacCmdIndex].dataRateAck = 0;
 13695  0024D4  51A7               	movf	(_loRa+167)& (0+255),w,b
 13696  0024D6  ECCB  F015         	call	PL2	;call to abstracted procedure
 13697  0024DA  92DF               	bcf	indf2,1,c
 13698                           
 13699                           ;lorawan.c: 1585: loRa.macCommands[loRa.crtMacCmdIndex].powerAck = 0;
 13700  0024DC  51A7               	movf	(_loRa+167)& (0+255),w,b
 13701  0024DE  ECCB  F015         	call	PL2	;call to abstracted procedure
 13702  0024E2  94DF               	bcf	indf2,2,c
 13703                           
 13704                           ;lorawan.c: 1586: loRa.macCommands[loRa.crtMacCmdIndex].channelAck = 0;
 13705  0024E4  51A7               	movf	(_loRa+167)& (0+255),w,b
 13706  0024E6  ECCB  F015         	call	PL2	;call to abstracted procedure
 13707  0024EA  96DF               	bcf	indf2,3,c
 13708                           
 13709                           ;lorawan.c: 1587: loRa.macCommands[loRa.crtMacCmdIndex].dataRateReceiveWindowAck = 0;
 13710  0024EC  51A7               	movf	(_loRa+167)& (0+255),w,b
 13711  0024EE  ECCB  F015         	call	PL2	;call to abstracted procedure
 13712  0024F2  98DF               	bcf	indf2,4,c
 13713                           
 13714                           ;lorawan.c: 1588: loRa.macCommands[loRa.crtMacCmdIndex].rx1DROffestAck = 0;
 13715  0024F4  51A7               	movf	(_loRa+167)& (0+255),w,b
 13716  0024F6  ECCB  F015         	call	PL2	;call to abstracted procedure
 13717  0024FA  9ADF               	bcf	indf2,5,c
 13718                           
 13719                           ;lorawan.c: 1589: loRa.macCommands[loRa.crtMacCmdIndex].dataRateRangeAck = 0;
 13720  0024FC  51A7               	movf	(_loRa+167)& (0+255),w,b
 13721  0024FE  ECCB  F015         	call	PL2	;call to abstracted procedure
 13722  002502  9CDF               	bcf	indf2,6,c
 13723                           
 13724                           ;lorawan.c: 1590: loRa.macCommands[loRa.crtMacCmdIndex].channelFrequencyAck = 0;
 13725  002504  51A7               	movf	(_loRa+167)& (0+255),w,b
 13726  002506  ECCB  F015         	call	PL2	;call to abstracted procedure
 13727  00250A  9EDF               	bcf	indf2,7,c
 13728                           
 13729                           ; BSR set to: 2
 13730                           ;lorawan.c: 1593: loRa.macCommands[loRa.crtMacCmdIndex].receivedCid = *ptr;
 13731  00250C  D897               	call	PL378	;call to abstracted procedure
 13732  00250E  51A7               	movf	(_loRa+167)& (0+255),w,b
 13733  002510  0D02               	mullw	2
 13734  002512  0EA8               	movlw	low (_loRa+168)
 13735  002514  24F3               	addwf	prodl,w,c
 13736  002516  6EE9               	movwf	fsr0l,c
 13737  002518  0E02               	movlw	high (_loRa+168)
 13738  00251A  20F4               	addwfc	prodh,w,c
 13739  00251C  ECB0  F010         	call	PL452	;call to abstracted procedure
 13740                           
 13741                           ;lorawan.c: 1595: switch (*ptr ++)
 13742  002520  D05B               	goto	l14066
 13743  002522                     l14042:
 13744                           
 13745                           ; BSR set to: 0
 13746                           ;lorawan.c: 1598: {
 13747                           ;lorawan.c: 1599: ptr = ExecuteLinkCheck (ptr );
 13748  002522  C0AA  F060         	movff	MacExecuteCommands@ptr,ExecuteLinkCheck@ptr
 13749  002526  C0AB  F061         	movff	MacExecuteCommands@ptr+1,ExecuteLinkCheck@ptr+1
 13750  00252A  EC82  F02D         	call	_ExecuteLinkCheck
 13751  00252E  C060  F0AA         	movff	?_ExecuteLinkCheck,MacExecuteCommands@ptr
 13752  002532  C061  F0AB         	movff	?_ExecuteLinkCheck+1,MacExecuteCommands@ptr+1
 13753  002536                     l14044:
 13754                           
 13755                           ; BSR set to: 0
 13756                           ;lorawan.c: 1601: loRa.macCommands[loRa.crtMacCmdIndex].receivedCid = 0xFF;
 13757  002536  0102               	movlb	2	; () banked
 13758  002538  51A7               	movf	(_loRa+167)& (0+255),w,b
 13759  00253A  ECA3  F010         	call	PL16	;call to abstracted procedure
 13760  00253E  68DF               	setf	indf2,c
 13761                           
 13762                           ;lorawan.c: 1602: } break;
 13763  002540  D05F               	goto	l14068
 13764  002542                     l14046:
 13765                           
 13766                           ; BSR set to: 0
 13767                           ;lorawan.c: 1605: {
 13768                           ;lorawan.c: 1606: ptr = ExecuteLinkAdr (ptr );
 13769  002542  C0AA  F06D         	movff	MacExecuteCommands@ptr,ExecuteLinkAdr@ptr
 13770  002546  C0AB  F06E         	movff	MacExecuteCommands@ptr+1,ExecuteLinkAdr@ptr+1
 13771  00254A  EC3D  F015         	call	_ExecuteLinkAdr	;wreg free
 13772  00254E  C06D  F0AA         	movff	?_ExecuteLinkAdr,MacExecuteCommands@ptr
 13773  002552  C06E  F0AB         	movff	?_ExecuteLinkAdr+1,MacExecuteCommands@ptr+1
 13774                           
 13775                           ;lorawan.c: 1607: } break;
 13776  002556  D054               	goto	l14068
 13777  002558                     l14048:
 13778                           
 13779                           ; BSR set to: 0
 13780                           ;lorawan.c: 1610: {
 13781                           ;lorawan.c: 1611: ptr = ExecuteDutyCycle(ptr);
 13782  002558  C0AA  F060         	movff	MacExecuteCommands@ptr,ExecuteDutyCycle@ptr
 13783  00255C  C0AB  F061         	movff	MacExecuteCommands@ptr+1,ExecuteDutyCycle@ptr+1
 13784  002560  EC8A  F029         	call	_ExecuteDutyCycle	;wreg free
 13785  002564  C060  F0AA         	movff	?_ExecuteDutyCycle,MacExecuteCommands@ptr
 13786  002568  C061  F0AB         	movff	?_ExecuteDutyCycle+1,MacExecuteCommands@ptr+1
 13787                           
 13788                           ;lorawan.c: 1612: } break;
 13789  00256C  D049               	goto	l14068
 13790  00256E                     l14050:
 13791                           
 13792                           ; BSR set to: 0
 13793                           ;lorawan.c: 1615: {
 13794                           ;lorawan.c: 1616: ptr = ExecuteRxParamSetupReq (ptr);
 13795  00256E  C0AA  F09C         	movff	MacExecuteCommands@ptr,ExecuteRxParamSetupReq@ptr
 13796  002572  C0AB  F09D         	movff	MacExecuteCommands@ptr+1,ExecuteRxParamSetupReq@ptr+1
 13797  002576  EC11  F018         	call	_ExecuteRxParamSetupReq	;wreg free
 13798  00257A  C09C  F0AA         	movff	?_ExecuteRxParamSetupReq,MacExecuteCommands@ptr
 13799  00257E  C09D  F0AB         	movff	?_ExecuteRxParamSetupReq+1,MacExecuteCommands@ptr+1
 13800                           
 13801                           ;lorawan.c: 1617: } break;
 13802  002582  D03E               	goto	l14068
 13803  002584                     l14052:
 13804                           
 13805                           ; BSR set to: 0
 13806                           ;lorawan.c: 1620: {
 13807                           ;lorawan.c: 1621: ptr = ExecuteDevStatus (ptr);
 13808  002584  C0AA  F060         	movff	MacExecuteCommands@ptr,ExecuteDevStatus@ptr
 13809  002588  C0AB  F061         	movff	MacExecuteCommands@ptr+1,ExecuteDevStatus@ptr+1
 13810  00258C  ECBE  F030         	call	_ExecuteDevStatus	;wreg free
 13811  002590  C060  F0AA         	movff	?_ExecuteDevStatus,MacExecuteCommands@ptr
 13812  002594  C061  F0AB         	movff	?_ExecuteDevStatus+1,MacExecuteCommands@ptr+1
 13813                           
 13814                           ;lorawan.c: 1622: } break;
 13815  002598  D033               	goto	l14068
 13816  00259A                     l14054:
 13817                           
 13818                           ; BSR set to: 0
 13819                           ;lorawan.c: 1625: {
 13820                           ;lorawan.c: 1626: ptr = ExecuteNewChannel (ptr);
 13821  00259A  C0AA  F09C         	movff	MacExecuteCommands@ptr,ExecuteNewChannel@ptr
 13822  00259E  C0AB  F09D         	movff	MacExecuteCommands@ptr+1,ExecuteNewChannel@ptr+1
 13823  0025A2  EC23  F013         	call	_ExecuteNewChannel	;wreg free
 13824  0025A6  C09C  F0AA         	movff	?_ExecuteNewChannel,MacExecuteCommands@ptr
 13825  0025AA  C09D  F0AB         	movff	?_ExecuteNewChannel+1,MacExecuteCommands@ptr+1
 13826                           
 13827                           ;lorawan.c: 1628: } break;
 13828  0025AE  D028               	goto	l14068
 13829  0025B0                     l14056:
 13830                           
 13831                           ; BSR set to: 0
 13832                           ;lorawan.c: 1631: {
 13833                           ;lorawan.c: 1632: ptr = ExecuteRxTimingSetup (ptr);
 13834  0025B0  C0AA  F067         	movff	MacExecuteCommands@ptr,ExecuteRxTimingSetup@ptr
 13835  0025B4  C0AB  F068         	movff	MacExecuteCommands@ptr+1,ExecuteRxTimingSetup@ptr+1
 13836  0025B8  EC9C  F02E         	call	_ExecuteRxTimingSetup	;wreg free
 13837  0025BC  C067  F0AA         	movff	?_ExecuteRxTimingSetup,MacExecuteCommands@ptr
 13838  0025C0  C068  F0AB         	movff	?_ExecuteRxTimingSetup+1,MacExecuteCommands@ptr+1
 13839                           
 13840                           ;lorawan.c: 1633: } break;
 13841  0025C4  D01D               	goto	l14068
 13842  0025C6                     l14058:
 13843                           
 13844                           ; BSR set to: 0
 13845                           ;lorawan.c: 1636: {
 13846                           ;lorawan.c: 1637: done = 1;
 13847  0025C6  0E01               	movlw	1
 13848  0025C8  6FA9               	movwf	MacExecuteCommands@done& (0+255),b
 13849                           
 13850                           ; BSR set to: 0
 13851                           ;lorawan.c: 1638: ptr = buffer + fOptsLen;
 13852  0025CA  51A6               	movf	MacExecuteCommands@fOptsLen& (0+255),w,b
 13853  0025CC  25A4               	addwf	MacExecuteCommands@buffer& (0+255),w,b
 13854  0025CE  6FAA               	movwf	MacExecuteCommands@ptr& (0+255),b
 13855  0025D0  0E00               	movlw	0
 13856  0025D2  21A5               	addwfc	(MacExecuteCommands@buffer+1)& (0+255),w,b
 13857  0025D4  6FAB               	movwf	(MacExecuteCommands@ptr+1)& (0+255),b
 13858  0025D6  D7AF               	goto	l14044
 13859  0025D8                     l14066:
 13860                           
 13861                           ; BSR set to: 2
 13862  0025D8  D831               	call	PL378	;call to abstracted procedure
 13863  0025DA  0100               	movlb	0	; () banked
 13864  0025DC  4BAA               	infsnz	MacExecuteCommands@ptr& (0+255),f,b
 13865  0025DE  2BAB               	incf	(MacExecuteCommands@ptr+1)& (0+255),f,b
 13866  0025E0  50DF               	movf	indf2,w,c
 13867                           
 13868                           ; Switch size 1, requested type "space"
 13869                           ; Number of cases is 7, Range of values is 2 to 8
 13870                           ; switch strategies available:
 13871                           ; Name         Instructions Cycles
 13872                           ; simple_byte           22    12 (average)
 13873                           ;	Chosen strategy is simple_byte
 13874  0025E2  0A02               	xorlw	2	; case 2
 13875  0025E4  E09E               	bz	l14042
 13876  0025E6  0A01               	xorlw	1	; case 3
 13877  0025E8  E0AC               	bz	l14046
 13878  0025EA  0A07               	xorlw	7	; case 4
 13879  0025EC  E0B5               	bz	l14048
 13880  0025EE  0A01               	xorlw	1	; case 5
 13881  0025F0  E0BE               	bz	l14050
 13882  0025F2  0A03               	xorlw	3	; case 6
 13883  0025F4  E0C7               	bz	l14052
 13884  0025F6  0A01               	xorlw	1	; case 7
 13885  0025F8  E0D0               	bz	l14054
 13886  0025FA  0A0F               	xorlw	15	; case 8
 13887  0025FC  E0D9               	bz	l14056
 13888  0025FE  D7E3               	goto	l14058
 13889  002600                     l14068:
 13890                           
 13891                           ;lorawan.c: 1643: if((loRa.macCommands[loRa.crtMacCmdIndex].receivedCid != 0xFF) &&
 13892                           ;lorawan.c: 1644: (loRa.crtMacCmdIndex < 16))
 13893  002600  0102               	movlb	2	; () banked
 13894  002602  51A7               	movf	(_loRa+167)& (0+255),w,b
 13895  002604  ECA3  F010         	call	PL16	;call to abstracted procedure
 13896  002608  28DE               	incf	postinc2,w,c
 13897  00260A  E004               	bz	l14074
 13898                           
 13899                           ; BSR set to: 2
 13900  00260C  0E10               	movlw	16
 13901  00260E  61A7               	cpfslt	(_loRa+167)& (0+255),b
 13902  002610  D001               	goto	l14074
 13903                           
 13904                           ; BSR set to: 2
 13905                           ;lorawan.c: 1645: {
 13906                           ;lorawan.c: 1646: loRa.crtMacCmdIndex ++;
 13907  002612  2BA7               	incf	(_loRa+167)& (0+255),f,b
 13908  002614                     l14074:
 13909  002614  0100               	movlb	0	; () banked
 13910  002616  51A6               	movf	MacExecuteCommands@fOptsLen& (0+255),w,b
 13911  002618  25A4               	addwf	MacExecuteCommands@buffer& (0+255),w,b
 13912  00261A  6FA7               	movwf	??_MacExecuteCommands& (0+255),b
 13913  00261C  0E00               	movlw	0
 13914  00261E  21A5               	addwfc	(MacExecuteCommands@buffer+1)& (0+255),w,b
 13915  002620  6FA8               	movwf	(??_MacExecuteCommands+1)& (0+255),b
 13916  002622  51A7               	movf	??_MacExecuteCommands& (0+255),w,b
 13917  002624  5DAA               	subwf	MacExecuteCommands@ptr& (0+255),w,b
 13918  002626  51A8               	movf	(??_MacExecuteCommands+1)& (0+255),w,b
 13919  002628  59AB               	subwfb	(MacExecuteCommands@ptr+1)& (0+255),w,b
 13920  00262A  E203               	bc	l14078
 13921                           
 13922                           ; BSR set to: 0
 13923  00262C  51A9               	movf	MacExecuteCommands@done& (0+255),w,b
 13924  00262E  E101 D74C          	bz	l14038
 13925  002632                     l14078:
 13926                           
 13927                           ; BSR set to: 0
 13928                           ;lorawan.c: 1647: }
 13929                           ;lorawan.c: 1648: }
 13930                           ;lorawan.c: 1649: return ptr;
 13931  002632  C0AA  F0A4         	movff	MacExecuteCommands@ptr,?_MacExecuteCommands
 13932  002636  C0AB  F0A5         	movff	MacExecuteCommands@ptr+1,?_MacExecuteCommands+1
 13933                           
 13934                           ; BSR set to: 0
 13935  00263A  0012               	return		;funcret
 13936  00263C                     __end_of_MacExecuteCommands:
 13937                           	opt stack 0
 13938  00263C                     PL378:
 13939                           	opt stack 15
 13940  00263C  C0AA  FFD9         	movff	MacExecuteCommands@ptr,fsr2l
 13941  002640  C0AB  FFDA         	movff	MacExecuteCommands@ptr+1,fsr2h
 13942  002644  0012               	return	
 13943  002646                     __end_ofPL378:
 13944                           	opt stack 0
 13945                           tosu	equ	0xFFF
 13946                           tosh	equ	0xFFE
 13947                           tosl	equ	0xFFD
 13948                           pclath	equ	0xFFA
 13949                           tblptru	equ	0xFF8
 13950                           tblptrh	equ	0xFF7
 13951                           tblptrl	equ	0xFF6
 13952                           tablat	equ	0xFF5
 13953                           prodh	equ	0xFF4
 13954                           prodl	equ	0xFF3
 13955                           intcon	equ	0xFF2
 13956                           indf0	equ	0xFEF
 13957                           postinc0	equ	0xFEE
 13958                           plusw0	equ	0xFEB
 13959                           fsr0h	equ	0xFEA
 13960                           fsr0l	equ	0xFE9
 13961                           wreg	equ	0xFE8
 13962                           postinc1	equ	0xFE6
 13963                           postdec1	equ	0xFE5
 13964                           plusw1	equ	0xFE3
 13965                           fsr1h	equ	0xFE2
 13966                           fsr1l	equ	0xFE1
 13967                           indf2	equ	0xFDF
 13968                           postinc2	equ	0xFDE
 13969                           postdec2	equ	0xFDD
 13970                           plusw2	equ	0xFDB
 13971                           fsr2h	equ	0xFDA
 13972                           fsr2l	equ	0xFD9
 13973                           status	equ	0xFD8
 13974                           
 13975 ;; *************** function _ExecuteRxTimingSetup *****************
 13976 ;; Defined at:
 13977 ;;		line 1659 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 13978 ;; Parameters:    Size  Location     Type
 13979 ;;  ptr             2    7[BANK0 ] PTR unsigned char 
 13980 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 13981 ;; Auto vars:     Size  Location     Type
 13982 ;;  delay           1    9[BANK0 ] unsigned char 
 13983 ;; Return value:  Size  Location     Type
 13984 ;;                  2    7[BANK0 ] PTR unsigned char 
 13985 ;; Registers used:
 13986 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13987 ;; Tracked objects:
 13988 ;;		On entry : 3F/0
 13989 ;;		On exit  : 3F/2
 13990 ;;		Unchanged: 0/0
 13991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13992 ;;      Params:         0       2       0       0       0       0       0       0       0
 13993 ;;      Locals:         0       1       0       0       0       0       0       0       0
 13994 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13995 ;;      Totals:         0       3       0       0       0       0       0       0       0
 13996 ;;Total ram usage:        3 bytes
 13997 ;; Hardware stack levels used:    1
 13998 ;; Hardware stack levels required when called:    9
 13999 ;; This function calls:
 14000 ;;		_UpdateReceiveDelays
 14001 ;; This function is called by:
 14002 ;;		_MacExecuteCommands
 14003 ;; This function uses a non-reentrant model
 14004 ;;
 14005                           
 14006                           	psect	text65
 14007  005D38                     __ptext65:
 14008                           	opt stack 0
 14009  005D38                     _ExecuteRxTimingSetup:
 14010                           	opt stack 16
 14011                           
 14012                           ; BSR set to: 0
 14013                           ;lorawan.c: 1661: uint8_t delay;
 14014                           ;lorawan.c: 1663: delay = (*ptr) & 0x0F;
 14015                           
 14016                           ; BSR set to: 0
 14017                           ;incstack = 0
 14018  005D38  C067  FFD9         	movff	ExecuteRxTimingSetup@ptr,fsr2l
 14019  005D3C  C068  FFDA         	movff	ExecuteRxTimingSetup@ptr+1,fsr2h
 14020  005D40  50DF               	movf	indf2,w,c
 14021  005D42  0B0F               	andlw	15
 14022  005D44  6F69               	movwf	ExecuteRxTimingSetup@delay& (0+255),b
 14023                           
 14024                           ; BSR set to: 0
 14025                           ;lorawan.c: 1664: ptr++;
 14026  005D46  4B67               	infsnz	ExecuteRxTimingSetup@ptr& (0+255),f,b
 14027  005D48  2B68               	incf	(ExecuteRxTimingSetup@ptr+1)& (0+255),f,b
 14028                           
 14029                           ; BSR set to: 0
 14030                           ;lorawan.c: 1666: UpdateReceiveDelays (delay);
 14031  005D4A  5169               	movf	ExecuteRxTimingSetup@delay& (0+255),w,b
 14032  005D4C  EC48  F02C         	call	_UpdateReceiveDelays
 14033                           
 14034                           ; BSR set to: 2
 14035                           ;lorawan.c: 1667: loRa.macStatus.rxTimingSetup = 1;
 14036  005D50  8104               	bsf	(_loRa+4)& (0+255),0,b
 14037                           
 14038                           ; BSR set to: 2
 14039                           ;lorawan.c: 1669: return ptr;
 14040  005D52  C067  F067         	movff	ExecuteRxTimingSetup@ptr,?_ExecuteRxTimingSetup
 14041  005D56  C068  F068         	movff	ExecuteRxTimingSetup@ptr+1,?_ExecuteRxTimingSetup+1
 14042                           
 14043                           ; BSR set to: 2
 14044  005D5A  0012               	return		;funcret
 14045  005D5C                     __end_of_ExecuteRxTimingSetup:
 14046                           	opt stack 0
 14047                           tosu	equ	0xFFF
 14048                           tosh	equ	0xFFE
 14049                           tosl	equ	0xFFD
 14050                           pclath	equ	0xFFA
 14051                           tblptru	equ	0xFF8
 14052                           tblptrh	equ	0xFF7
 14053                           tblptrl	equ	0xFF6
 14054                           tablat	equ	0xFF5
 14055                           prodh	equ	0xFF4
 14056                           prodl	equ	0xFF3
 14057                           intcon	equ	0xFF2
 14058                           indf0	equ	0xFEF
 14059                           postinc0	equ	0xFEE
 14060                           plusw0	equ	0xFEB
 14061                           fsr0h	equ	0xFEA
 14062                           fsr0l	equ	0xFE9
 14063                           wreg	equ	0xFE8
 14064                           postinc1	equ	0xFE6
 14065                           postdec1	equ	0xFE5
 14066                           plusw1	equ	0xFE3
 14067                           fsr1h	equ	0xFE2
 14068                           fsr1l	equ	0xFE1
 14069                           indf2	equ	0xFDF
 14070                           postinc2	equ	0xFDE
 14071                           postdec2	equ	0xFDD
 14072                           plusw2	equ	0xFDB
 14073                           fsr2h	equ	0xFDA
 14074                           fsr2l	equ	0xFD9
 14075                           status	equ	0xFD8
 14076                           
 14077 ;; *************** function _UpdateReceiveDelays *****************
 14078 ;; Defined at:
 14079 ;;		line 2026 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 14080 ;; Parameters:    Size  Location     Type
 14081 ;;  delay           1    wreg     unsigned char 
 14082 ;; Auto vars:     Size  Location     Type
 14083 ;;  delay           1    6[BANK0 ] unsigned char 
 14084 ;; Return value:  Size  Location     Type
 14085 ;;                  1    wreg      void 
 14086 ;; Registers used:
 14087 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 14088 ;; Tracked objects:
 14089 ;;		On entry : 3F/0
 14090 ;;		On exit  : 3F/2
 14091 ;;		Unchanged: 0/0
 14092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14093 ;;      Params:         0       0       0       0       0       0       0       0       0
 14094 ;;      Locals:         0       1       0       0       0       0       0       0       0
 14095 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14096 ;;      Totals:         0       1       0       0       0       0       0       0       0
 14097 ;;Total ram usage:        1 bytes
 14098 ;; Hardware stack levels used:    1
 14099 ;; Hardware stack levels required when called:    8
 14100 ;; This function calls:
 14101 ;;		___wmul
 14102 ;; This function is called by:
 14103 ;;		_LORAWAN_RxDone
 14104 ;;		_ExecuteRxTimingSetup
 14105 ;; This function uses a non-reentrant model
 14106 ;;
 14107                           
 14108                           	psect	text66
 14109  005890                     __ptext66:
 14110                           	opt stack 0
 14111  005890                     _UpdateReceiveDelays:
 14112                           	opt stack 18
 14113                           
 14114                           ; BSR set to: 2
 14115                           ;incstack = 0
 14116                           ;UpdateReceiveDelays@delay stored from wreg
 14117  005890  6F66               	movwf	UpdateReceiveDelays@delay& (0+255),b
 14118                           
 14119                           ;lorawan.c: 2028: loRa.protocolParameters.receiveDelay1 = 1000 * delay ;
 14120  005892  C066  F060         	movff	UpdateReceiveDelays@delay,___wmul@multiplier
 14121  005896  0100               	movlb	0	; () banked
 14122  005898  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 14123  00589A  0E03               	movlw	3
 14124  00589C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14125  00589E  0EE8               	movlw	232
 14126  0058A0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14127  0058A2  EC18  F02E         	call	___wmul	;wreg free
 14128  0058A6  C060  F294         	movff	?___wmul,_loRa+148
 14129  0058AA  C061  F295         	movff	?___wmul+1,_loRa+149
 14130                           
 14131                           ; BSR set to: 0
 14132                           ;lorawan.c: 2029: if (delay == 0)
 14133  0058AE  5166               	movf	UpdateReceiveDelays@delay& (0+255),w,b
 14134  0058B0  E102               	bnz	l12870
 14135                           
 14136                           ; BSR set to: 0
 14137                           ;lorawan.c: 2030: {
 14138                           ;lorawan.c: 2031: loRa.protocolParameters.receiveDelay1 = 1000;
 14139  0058B2  EC78  F014         	call	PL344	;call to abstracted procedure
 14140  0058B6                     l12870:
 14141                           
 14142                           ;lorawan.c: 2032: }
 14143                           ;lorawan.c: 2034: loRa.protocolParameters.receiveDelay2 = loRa.protocolParameters.receiv
      +                          eDelay1 + 1000;
 14144  0058B6  0EE8               	movlw	232
 14145  0058B8  0102               	movlb	2	; () banked
 14146  0058BA  2594               	addwf	(_loRa+148)& (0+255),w,b
 14147  0058BC  6F96               	movwf	(_loRa+150)& (0+255),b
 14148  0058BE  0E03               	movlw	3
 14149  0058C0  2195               	addwfc	(_loRa+149)& (0+255),w,b
 14150  0058C2  6F97               	movwf	(_loRa+151)& (0+255),b
 14151                           
 14152                           ; BSR set to: 2
 14153  0058C4  0012               	return		;funcret
 14154  0058C6                     __end_of_UpdateReceiveDelays:
 14155                           	opt stack 0
 14156                           tosu	equ	0xFFF
 14157                           tosh	equ	0xFFE
 14158                           tosl	equ	0xFFD
 14159                           pclath	equ	0xFFA
 14160                           tblptru	equ	0xFF8
 14161                           tblptrh	equ	0xFF7
 14162                           tblptrl	equ	0xFF6
 14163                           tablat	equ	0xFF5
 14164                           prodh	equ	0xFF4
 14165                           prodl	equ	0xFF3
 14166                           intcon	equ	0xFF2
 14167                           indf0	equ	0xFEF
 14168                           postinc0	equ	0xFEE
 14169                           plusw0	equ	0xFEB
 14170                           fsr0h	equ	0xFEA
 14171                           fsr0l	equ	0xFE9
 14172                           wreg	equ	0xFE8
 14173                           postinc1	equ	0xFE6
 14174                           postdec1	equ	0xFE5
 14175                           plusw1	equ	0xFE3
 14176                           fsr1h	equ	0xFE2
 14177                           fsr1l	equ	0xFE1
 14178                           indf2	equ	0xFDF
 14179                           postinc2	equ	0xFDE
 14180                           postdec2	equ	0xFDD
 14181                           plusw2	equ	0xFDB
 14182                           fsr2h	equ	0xFDA
 14183                           fsr2l	equ	0xFD9
 14184                           status	equ	0xFD8
 14185                           
 14186 ;; *************** function ___wmul *****************
 14187 ;; Defined at:
 14188 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
 14189 ;; Parameters:    Size  Location     Type
 14190 ;;  multiplier      2    0[BANK0 ] unsigned int 
 14191 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 14192 ;; Auto vars:     Size  Location     Type
 14193 ;;  product         2    4[BANK0 ] unsigned int 
 14194 ;; Return value:  Size  Location     Type
 14195 ;;                  2    0[BANK0 ] unsigned int 
 14196 ;; Registers used:
 14197 ;;		wreg, status,2, status,0, prodl, prodh
 14198 ;; Tracked objects:
 14199 ;;		On entry : 3F/0
 14200 ;;		On exit  : 3F/0
 14201 ;;		Unchanged: 0/0
 14202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14203 ;;      Params:         0       4       0       0       0       0       0       0       0
 14204 ;;      Locals:         0       2       0       0       0       0       0       0       0
 14205 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14206 ;;      Totals:         0       6       0       0       0       0       0       0       0
 14207 ;;Total ram usage:        6 bytes
 14208 ;; Hardware stack levels used:    1
 14209 ;; Hardware stack levels required when called:    7
 14210 ;; This function calls:
 14211 ;;		Nothing
 14212 ;; This function is called by:
 14213 ;;		_UpdateReceiveDelays
 14214 ;; This function uses a non-reentrant model
 14215 ;;
 14216                           
 14217                           	psect	text67
 14218  005C30                     __ptext67:
 14219                           	opt stack 0
 14220  005C30                     ___wmul:
 14221                           	opt stack 18
 14222                           
 14223                           ; BSR set to: 0
 14224                           
 14225                           ; BSR set to: 2
 14226                           ;incstack = 0
 14227  005C30  5160               	movf	___wmul@multiplier& (0+255),w,b
 14228  005C32  0362               	mulwf	___wmul@multiplicand& (0+255),b
 14229  005C34  CFF3 F064          	movff	prodl,___wmul@product
 14230  005C38  CFF4 F065          	movff	prodh,___wmul@product+1
 14231  005C3C  5160               	movf	___wmul@multiplier& (0+255),w,b
 14232  005C3E  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 14233  005C40  50F3               	movf	prodl,w,c
 14234  005C42  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 14235  005C44  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 14236  005C46  0362               	mulwf	___wmul@multiplicand& (0+255),b
 14237  005C48  50F3               	movf	prodl,w,c
 14238  005C4A  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 14239                           
 14240                           ; BSR set to: 0
 14241  005C4C  C064  F060         	movff	___wmul@product,?___wmul
 14242  005C50  C065  F061         	movff	___wmul@product+1,?___wmul+1
 14243                           
 14244                           ; BSR set to: 0
 14245  005C54  0012               	return		;funcret
 14246  005C56                     __end_of___wmul:
 14247                           	opt stack 0
 14248                           tosu	equ	0xFFF
 14249                           tosh	equ	0xFFE
 14250                           tosl	equ	0xFFD
 14251                           pclath	equ	0xFFA
 14252                           tblptru	equ	0xFF8
 14253                           tblptrh	equ	0xFF7
 14254                           tblptrl	equ	0xFF6
 14255                           tablat	equ	0xFF5
 14256                           prodh	equ	0xFF4
 14257                           prodl	equ	0xFF3
 14258                           intcon	equ	0xFF2
 14259                           indf0	equ	0xFEF
 14260                           postinc0	equ	0xFEE
 14261                           plusw0	equ	0xFEB
 14262                           fsr0h	equ	0xFEA
 14263                           fsr0l	equ	0xFE9
 14264                           wreg	equ	0xFE8
 14265                           postinc1	equ	0xFE6
 14266                           postdec1	equ	0xFE5
 14267                           plusw1	equ	0xFE3
 14268                           fsr1h	equ	0xFE2
 14269                           fsr1l	equ	0xFE1
 14270                           indf2	equ	0xFDF
 14271                           postinc2	equ	0xFDE
 14272                           postdec2	equ	0xFDD
 14273                           plusw2	equ	0xFDB
 14274                           fsr2h	equ	0xFDA
 14275                           fsr2l	equ	0xFD9
 14276                           status	equ	0xFD8
 14277                           
 14278 ;; *************** function _ExecuteRxParamSetupReq *****************
 14279 ;; Defined at:
 14280 ;;		line 740 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 14281 ;; Parameters:    Size  Location     Type
 14282 ;;  ptr             2   60[BANK0 ] PTR unsigned char 
 14283 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 14284 ;; Auto vars:     Size  Location     Type
 14285 ;;  frequency       4   62[BANK0 ] unsigned long 
 14286 ;;  dlSettings      1   66[BANK0 ] struct .
 14287 ;; Return value:  Size  Location     Type
 14288 ;;                  2   60[BANK0 ] PTR unsigned char 
 14289 ;; Registers used:
 14290 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14291 ;; Tracked objects:
 14292 ;;		On entry : 3F/0
 14293 ;;		On exit  : 3F/2
 14294 ;;		Unchanged: 0/0
 14295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14296 ;;      Params:         0       2       0       0       0       0       0       0       0
 14297 ;;      Locals:         0       5       0       0       0       0       0       0       0
 14298 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14299 ;;      Totals:         0       7       0       0       0       0       0       0       0
 14300 ;;Total ram usage:        7 bytes
 14301 ;; Hardware stack levels used:    1
 14302 ;; Hardware stack levels required when called:    8
 14303 ;; This function calls:
 14304 ;;		_UpdateReceiveWindow2Parameters
 14305 ;;		_ValidateDataRate
 14306 ;;		_ValidateFrequency
 14307 ;;		_ValidateRxOffset
 14308 ;;		___lmul
 14309 ;; This function is called by:
 14310 ;;		_MacExecuteCommands
 14311 ;; This function uses a non-reentrant model
 14312 ;;
 14313                           
 14314                           	psect	text68
 14315  003022                     __ptext68:
 14316                           	opt stack 0
 14317  003022                     _ExecuteRxParamSetupReq:
 14318                           	opt stack 0
 14319                           
 14320                           ; BSR set to: 0
 14321                           ;lorawan_eu.c: 747: dlSettings.value = *(ptr++);
 14322                           
 14323                           ; BSR set to: 0
 14324                           
 14325                           ; BSR set to: 0
 14326                           ;incstack = 0
 14327  003022  D87D               	call	PL390	;call to abstracted procedure
 14328  003024  50DF               	movf	indf2,w,c
 14329  003026  6FA2               	movwf	ExecuteRxParamSetupReq@dlSettings& (0+255),b
 14330                           
 14331                           ; BSR set to: 0
 14332  003028  4B9C               	infsnz	ExecuteRxParamSetupReq@ptr& (0+255),f,b
 14333  00302A  2B9D               	incf	(ExecuteRxParamSetupReq@ptr+1)& (0+255),f,b
 14334                           
 14335                           ; BSR set to: 0
 14336                           ;lorawan_eu.c: 749: frequency = (*((uint32_t*)ptr)) & 0x00FFFFFF;
 14337  00302C  D878               	call	PL390	;call to abstracted procedure
 14338  00302E  0EFF               	movlw	255
 14339  003030  14DE               	andwf	postinc2,w,c
 14340  003032  6F9E               	movwf	ExecuteRxParamSetupReq@frequency& (0+255),b
 14341  003034  0EFF               	movlw	255
 14342  003036  14DE               	andwf	postinc2,w,c
 14343  003038  6F9F               	movwf	(ExecuteRxParamSetupReq@frequency+1)& (0+255),b
 14344  00303A  0EFF               	movlw	255
 14345  00303C  14DE               	andwf	postinc2,w,c
 14346  00303E  6FA0               	movwf	(ExecuteRxParamSetupReq@frequency+2)& (0+255),b
 14347  003040  0E00               	movlw	0
 14348  003042  14DE               	andwf	postinc2,w,c
 14349  003044  6FA1               	movwf	(ExecuteRxParamSetupReq@frequency+3)& (0+255),b
 14350                           
 14351                           ; BSR set to: 0
 14352                           ;lorawan_eu.c: 750: frequency = frequency * 100;
 14353  003046  C09E  F090         	movff	ExecuteRxParamSetupReq@frequency,___lmul@multiplier
 14354  00304A  C09F  F091         	movff	ExecuteRxParamSetupReq@frequency+1,___lmul@multiplier+1
 14355  00304E  C0A0  F092         	movff	ExecuteRxParamSetupReq@frequency+2,___lmul@multiplier+2
 14356  003052  C0A1  F093         	movff	ExecuteRxParamSetupReq@frequency+3,___lmul@multiplier+3
 14357  003056  0E64               	movlw	100
 14358  003058  EC98  F006         	call	PL80	;call to abstracted procedure
 14359  00305C  EC25  F02A         	call	___lmul	;wreg free
 14360  003060  C090  F09E         	movff	?___lmul,ExecuteRxParamSetupReq@frequency
 14361  003064  C091  F09F         	movff	?___lmul+1,ExecuteRxParamSetupReq@frequency+1
 14362  003068  C092  F0A0         	movff	?___lmul+2,ExecuteRxParamSetupReq@frequency+2
 14363  00306C  C093  F0A1         	movff	?___lmul+3,ExecuteRxParamSetupReq@frequency+3
 14364                           
 14365                           ; BSR set to: 0
 14366                           ;lorawan_eu.c: 751: ptr = ptr + 3;
 14367  003070  0E03               	movlw	3
 14368  003072  279C               	addwf	ExecuteRxParamSetupReq@ptr& (0+255),f,b
 14369  003074  0E00               	movlw	0
 14370  003076  239D               	addwfc	(ExecuteRxParamSetupReq@ptr+1)& (0+255),f,b
 14371                           
 14372                           ; BSR set to: 0
 14373                           ;lorawan_eu.c: 753: if (ValidateFrequency (frequency) == OK)
 14374  003078  C09E  F060         	movff	ExecuteRxParamSetupReq@frequency,ValidateFrequency@frequencyNew
 14375  00307C  C09F  F061         	movff	ExecuteRxParamSetupReq@frequency+1,ValidateFrequency@frequencyNew+1
 14376  003080  C0A0  F062         	movff	ExecuteRxParamSetupReq@frequency+2,ValidateFrequency@frequencyNew+2
 14377  003084  C0A1  F063         	movff	ExecuteRxParamSetupReq@frequency+3,ValidateFrequency@frequencyNew+3
 14378  003088  ECB5  F027         	call	_ValidateFrequency	;wreg free
 14379  00308C  0900               	iorlw	0
 14380  00308E  E105               	bnz	l13660
 14381                           
 14382                           ; BSR set to: 0
 14383                           ;lorawan_eu.c: 754: {
 14384                           ;lorawan_eu.c: 755: loRa.macCommands[loRa.crtMacCmdIndex].channelAck = 1;
 14385  003090  0102               	movlb	2	; () banked
 14386  003092  51A7               	movf	(_loRa+167)& (0+255),w,b
 14387  003094  ECCB  F015         	call	PL2	;call to abstracted procedure
 14388  003098  86DF               	bsf	indf2,3,c
 14389  00309A                     l13660:
 14390                           
 14391                           ;lorawan_eu.c: 756: }
 14392                           ;lorawan_eu.c: 758: if (ValidateDataRate (dlSettings.bits.rx2DataRate) == OK)
 14393  00309A  0100               	movlb	0	; () banked
 14394  00309C  51A2               	movf	ExecuteRxParamSetupReq@dlSettings& (0+255),w,b
 14395  00309E  0B0F               	andlw	15
 14396  0030A0  EC39  F030         	call	_ValidateDataRate
 14397  0030A4  0900               	iorlw	0
 14398  0030A6  E105               	bnz	l13664
 14399                           
 14400                           ; BSR set to: 0
 14401                           ;lorawan_eu.c: 759: {
 14402                           ;lorawan_eu.c: 760: loRa.macCommands[loRa.crtMacCmdIndex].dataRateReceiveWindowAck = 1;
 14403  0030A8  0102               	movlb	2	; () banked
 14404  0030AA  51A7               	movf	(_loRa+167)& (0+255),w,b
 14405  0030AC  ECCB  F015         	call	PL2	;call to abstracted procedure
 14406  0030B0  88DF               	bsf	indf2,4,c
 14407  0030B2                     l13664:
 14408                           
 14409                           ;lorawan_eu.c: 761: }
 14410                           ;lorawan_eu.c: 763: if (ValidateRxOffset (dlSettings.bits.rx1DROffset) == OK)
 14411  0030B2  0100               	movlb	0	; () banked
 14412  0030B4  39A2               	swapf	ExecuteRxParamSetupReq@dlSettings& (0+255),w,b
 14413  0030B6  0B07               	andlw	7
 14414  0030B8  EC2F  F030         	call	_ValidateRxOffset
 14415  0030BC  0900               	iorlw	0
 14416  0030BE  E105               	bnz	l1291
 14417                           
 14418                           ; BSR set to: 0
 14419                           ;lorawan_eu.c: 764: {
 14420                           ;lorawan_eu.c: 765: loRa.macCommands[loRa.crtMacCmdIndex].rx1DROffestAck = 1;
 14421  0030C0  0102               	movlb	2	; () banked
 14422  0030C2  51A7               	movf	(_loRa+167)& (0+255),w,b
 14423  0030C4  ECCB  F015         	call	PL2	;call to abstracted procedure
 14424  0030C8  8ADF               	bsf	indf2,5,c
 14425  0030CA                     l1291:
 14426                           
 14427                           ;lorawan_eu.c: 766: }
 14428                           ;lorawan_eu.c: 768: if ( (loRa.macCommands[loRa.crtMacCmdIndex].dataRateReceiveWindowAck
      +                           == 1) && (loRa.macCommands[loRa.crtMacCmdIndex].channelAck == 1) && (loRa.macCommands[l
      +                          oRa.crtMacCmdIndex].rx1DROffestAck == 1))
 14429  0030CA  0102               	movlb	2	; () banked
 14430  0030CC  51A7               	movf	(_loRa+167)& (0+255),w,b
 14431  0030CE  ECCB  F015         	call	PL2	;call to abstracted procedure
 14432  0030D2  A8DF               	btfss	indf2,4,c
 14433  0030D4  D01F               	goto	l13678
 14434                           
 14435                           ; BSR set to: 2
 14436  0030D6  51A7               	movf	(_loRa+167)& (0+255),w,b
 14437  0030D8  ECCB  F015         	call	PL2	;call to abstracted procedure
 14438  0030DC  A6DF               	btfss	indf2,3,c
 14439  0030DE  D01A               	goto	l13678
 14440                           
 14441                           ; BSR set to: 2
 14442  0030E0  51A7               	movf	(_loRa+167)& (0+255),w,b
 14443  0030E2  ECCB  F015         	call	PL2	;call to abstracted procedure
 14444  0030E6  AADF               	btfss	indf2,5,c
 14445  0030E8  D015               	goto	l13678
 14446                           
 14447                           ; BSR set to: 2
 14448                           ;lorawan_eu.c: 769: {
 14449                           ;lorawan_eu.c: 770: loRa.offset = dlSettings.bits.rx1DROffset;
 14450  0030EA  0100               	movlb	0	; () banked
 14451  0030EC  39A2               	swapf	ExecuteRxParamSetupReq@dlSettings& (0+255),w,b
 14452  0030EE  0B07               	andlw	7
 14453  0030F0  0102               	movlb	2	; () banked
 14454  0030F2  6FEF               	movwf	(_loRa+239)& (0+255),b
 14455                           
 14456                           ; BSR set to: 2
 14457                           ;lorawan_eu.c: 771: UpdateReceiveWindow2Parameters (frequency, dlSettings.bits.rx2DataRa
      +                          te);
 14458  0030F4  C09E  F060         	movff	ExecuteRxParamSetupReq@frequency,UpdateReceiveWindow2Parameters@frequency
 14459  0030F8  C09F  F061         	movff	ExecuteRxParamSetupReq@frequency+1,UpdateReceiveWindow2Parameters@frequency+1
 14460  0030FC  C0A0  F062         	movff	ExecuteRxParamSetupReq@frequency+2,UpdateReceiveWindow2Parameters@frequency+2
 14461  003100  C0A1  F063         	movff	ExecuteRxParamSetupReq@frequency+3,UpdateReceiveWindow2Parameters@frequency+3
 14462  003104  0100               	movlb	0	; () banked
 14463  003106  51A2               	movf	ExecuteRxParamSetupReq@dlSettings& (0+255),w,b
 14464  003108  0B0F               	andlw	15
 14465  00310A  6F64               	movwf	UpdateReceiveWindow2Parameters@dataRate& (0+255),b
 14466  00310C  EC0E  F030         	call	_UpdateReceiveWindow2Parameters	;wreg free
 14467                           
 14468                           ; BSR set to: 0
 14469                           ;lorawan_eu.c: 772: loRa.macStatus.secondReceiveWindowModified = 1;
 14470  003110  0102               	movlb	2	; () banked
 14471  003112  8F03               	bsf	(_loRa+3)& (0+255),7,b
 14472  003114                     l13678:
 14473                           
 14474                           ; BSR set to: 2
 14475                           ;lorawan_eu.c: 773: }
 14476                           ;lorawan_eu.c: 775: return ptr;
 14477  003114  C09C  F09C         	movff	ExecuteRxParamSetupReq@ptr,?_ExecuteRxParamSetupReq
 14478  003118  C09D  F09D         	movff	ExecuteRxParamSetupReq@ptr+1,?_ExecuteRxParamSetupReq+1
 14479                           
 14480                           ; BSR set to: 2
 14481  00311C  0012               	return		;funcret
 14482  00311E                     __end_of_ExecuteRxParamSetupReq:
 14483                           	opt stack 0
 14484  00311E                     PL390:
 14485                           	opt stack 17
 14486  00311E  C09C  FFD9         	movff	ExecuteRxParamSetupReq@ptr,fsr2l
 14487  003122  C09D  FFDA         	movff	ExecuteRxParamSetupReq@ptr+1,fsr2h
 14488  003126  0012               	return	
 14489  003128                     __end_ofPL390:
 14490                           	opt stack 0
 14491                           tosu	equ	0xFFF
 14492                           tosh	equ	0xFFE
 14493                           tosl	equ	0xFFD
 14494                           pclath	equ	0xFFA
 14495                           tblptru	equ	0xFF8
 14496                           tblptrh	equ	0xFF7
 14497                           tblptrl	equ	0xFF6
 14498                           tablat	equ	0xFF5
 14499                           prodh	equ	0xFF4
 14500                           prodl	equ	0xFF3
 14501                           intcon	equ	0xFF2
 14502                           indf0	equ	0xFEF
 14503                           postinc0	equ	0xFEE
 14504                           plusw0	equ	0xFEB
 14505                           fsr0h	equ	0xFEA
 14506                           fsr0l	equ	0xFE9
 14507                           wreg	equ	0xFE8
 14508                           postinc1	equ	0xFE6
 14509                           postdec1	equ	0xFE5
 14510                           plusw1	equ	0xFE3
 14511                           fsr1h	equ	0xFE2
 14512                           fsr1l	equ	0xFE1
 14513                           indf2	equ	0xFDF
 14514                           postinc2	equ	0xFDE
 14515                           postdec2	equ	0xFDD
 14516                           plusw2	equ	0xFDB
 14517                           fsr2h	equ	0xFDA
 14518                           fsr2l	equ	0xFD9
 14519                           status	equ	0xFD8
 14520                           
 14521 ;; *************** function _ValidateRxOffset *****************
 14522 ;; Defined at:
 14523 ;;		line 1076 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 14524 ;; Parameters:    Size  Location     Type
 14525 ;;  rxOffset        1    wreg     unsigned char 
 14526 ;; Auto vars:     Size  Location     Type
 14527 ;;  rxOffset        1    0[BANK0 ] unsigned char 
 14528 ;;  result          1    1[BANK0 ] enum E17413
 14529 ;; Return value:  Size  Location     Type
 14530 ;;                  1    wreg      enum E17413
 14531 ;; Registers used:
 14532 ;;		wreg, status,2, status,0
 14533 ;; Tracked objects:
 14534 ;;		On entry : 3F/0
 14535 ;;		On exit  : 3F/0
 14536 ;;		Unchanged: 0/0
 14537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14538 ;;      Params:         0       0       0       0       0       0       0       0       0
 14539 ;;      Locals:         0       2       0       0       0       0       0       0       0
 14540 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14541 ;;      Totals:         0       2       0       0       0       0       0       0       0
 14542 ;;Total ram usage:        2 bytes
 14543 ;; Hardware stack levels used:    1
 14544 ;; Hardware stack levels required when called:    7
 14545 ;; This function calls:
 14546 ;;		Nothing
 14547 ;; This function is called by:
 14548 ;;		_ExecuteRxParamSetupReq
 14549 ;; This function uses a non-reentrant model
 14550 ;;
 14551                           
 14552                           	psect	text69
 14553  00605E                     __ptext69:
 14554                           	opt stack 0
 14555  00605E                     _ValidateRxOffset:
 14556                           	opt stack 17
 14557                           
 14558                           ; BSR set to: 2
 14559                           ;incstack = 0
 14560                           ;ValidateRxOffset@rxOffset stored from wreg
 14561  00605E  6F60               	movwf	ValidateRxOffset@rxOffset& (0+255),b
 14562                           
 14563                           ;lorawan_eu.c: 1078: LorawanError_t result = OK;
 14564  006060  0100               	movlb	0	; () banked
 14565  006062  6B61               	clrf	ValidateRxOffset@result& (0+255),b
 14566                           
 14567                           ; BSR set to: 0
 14568                           ;lorawan_eu.c: 1080: if (rxOffset > 5)
 14569  006064  0E05               	movlw	5
 14570  006066  6560               	cpfsgt	ValidateRxOffset@rxOffset& (0+255),b
 14571  006068  D002               	goto	l1387
 14572                           
 14573                           ; BSR set to: 0
 14574                           ;lorawan_eu.c: 1081: {
 14575                           ;lorawan_eu.c: 1082: result = INVALID_PARAMETER;
 14576  00606A  0E03               	movlw	3
 14577  00606C  6F61               	movwf	ValidateRxOffset@result& (0+255),b
 14578  00606E                     l1387:
 14579                           
 14580                           ; BSR set to: 0
 14581                           ;lorawan_eu.c: 1083: }
 14582                           ;lorawan_eu.c: 1085: return result;
 14583  00606E  5161               	movf	ValidateRxOffset@result& (0+255),w,b
 14584                           
 14585                           ; BSR set to: 0
 14586  006070  0012               	return		;funcret
 14587  006072                     __end_of_ValidateRxOffset:
 14588                           	opt stack 0
 14589                           tosu	equ	0xFFF
 14590                           tosh	equ	0xFFE
 14591                           tosl	equ	0xFFD
 14592                           pclath	equ	0xFFA
 14593                           tblptru	equ	0xFF8
 14594                           tblptrh	equ	0xFF7
 14595                           tblptrl	equ	0xFF6
 14596                           tablat	equ	0xFF5
 14597                           prodh	equ	0xFF4
 14598                           prodl	equ	0xFF3
 14599                           intcon	equ	0xFF2
 14600                           indf0	equ	0xFEF
 14601                           postinc0	equ	0xFEE
 14602                           plusw0	equ	0xFEB
 14603                           fsr0h	equ	0xFEA
 14604                           fsr0l	equ	0xFE9
 14605                           wreg	equ	0xFE8
 14606                           postinc1	equ	0xFE6
 14607                           postdec1	equ	0xFE5
 14608                           plusw1	equ	0xFE3
 14609                           fsr1h	equ	0xFE2
 14610                           fsr1l	equ	0xFE1
 14611                           indf2	equ	0xFDF
 14612                           postinc2	equ	0xFDE
 14613                           postdec2	equ	0xFDD
 14614                           plusw2	equ	0xFDB
 14615                           fsr2h	equ	0xFDA
 14616                           fsr2l	equ	0xFD9
 14617                           status	equ	0xFD8
 14618                           
 14619 ;; *************** function _UpdateReceiveWindow2Parameters *****************
 14620 ;; Defined at:
 14621 ;;		line 1084 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 14622 ;; Parameters:    Size  Location     Type
 14623 ;;  frequency       4    0[BANK0 ] unsigned long 
 14624 ;;  dataRate        1    4[BANK0 ] unsigned char 
 14625 ;; Auto vars:     Size  Location     Type
 14626 ;;		None
 14627 ;; Return value:  Size  Location     Type
 14628 ;;                  1    wreg      void 
 14629 ;; Registers used:
 14630 ;;		None
 14631 ;; Tracked objects:
 14632 ;;		On entry : 3F/0
 14633 ;;		On exit  : 3F/0
 14634 ;;		Unchanged: 3F/0
 14635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14636 ;;      Params:         0       5       0       0       0       0       0       0       0
 14637 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14638 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14639 ;;      Totals:         0       5       0       0       0       0       0       0       0
 14640 ;;Total ram usage:        5 bytes
 14641 ;; Hardware stack levels used:    1
 14642 ;; Hardware stack levels required when called:    7
 14643 ;; This function calls:
 14644 ;;		Nothing
 14645 ;; This function is called by:
 14646 ;;		_ExecuteRxParamSetupReq
 14647 ;; This function uses a non-reentrant model
 14648 ;;
 14649                           
 14650                           	psect	text70
 14651  00601C                     __ptext70:
 14652                           	opt stack 0
 14653  00601C                     _UpdateReceiveWindow2Parameters:
 14654                           	opt stack 17
 14655                           
 14656                           ; BSR set to: 0
 14657                           ;lorawan.c: 1086: loRa.receiveWindow2Parameters.dataRate = dataRate;
 14658                           
 14659                           ; BSR set to: 0
 14660                           ;incstack = 0
 14661  00601C  C064  F21C         	movff	UpdateReceiveWindow2Parameters@dataRate,_loRa+28
 14662                           
 14663                           ;lorawan.c: 1087: loRa.receiveWindow2Parameters.frequency = frequency;
 14664  006020  C060  F218         	movff	UpdateReceiveWindow2Parameters@frequency,_loRa+24
 14665  006024  C061  F219         	movff	UpdateReceiveWindow2Parameters@frequency+1,_loRa+25
 14666  006028  C062  F21A         	movff	UpdateReceiveWindow2Parameters@frequency+2,_loRa+26
 14667  00602C  C063  F21B         	movff	UpdateReceiveWindow2Parameters@frequency+3,_loRa+27
 14668                           
 14669                           ; BSR set to: 0
 14670  006030  0012               	return		;funcret
 14671  006032                     __end_of_UpdateReceiveWindow2Parameters:
 14672                           	opt stack 0
 14673                           tosu	equ	0xFFF
 14674                           tosh	equ	0xFFE
 14675                           tosl	equ	0xFFD
 14676                           pclath	equ	0xFFA
 14677                           tblptru	equ	0xFF8
 14678                           tblptrh	equ	0xFF7
 14679                           tblptrl	equ	0xFF6
 14680                           tablat	equ	0xFF5
 14681                           prodh	equ	0xFF4
 14682                           prodl	equ	0xFF3
 14683                           intcon	equ	0xFF2
 14684                           indf0	equ	0xFEF
 14685                           postinc0	equ	0xFEE
 14686                           plusw0	equ	0xFEB
 14687                           fsr0h	equ	0xFEA
 14688                           fsr0l	equ	0xFE9
 14689                           wreg	equ	0xFE8
 14690                           postinc1	equ	0xFE6
 14691                           postdec1	equ	0xFE5
 14692                           plusw1	equ	0xFE3
 14693                           fsr1h	equ	0xFE2
 14694                           fsr1l	equ	0xFE1
 14695                           indf2	equ	0xFDF
 14696                           postinc2	equ	0xFDE
 14697                           postdec2	equ	0xFDD
 14698                           plusw2	equ	0xFDB
 14699                           fsr2h	equ	0xFDA
 14700                           fsr2l	equ	0xFD9
 14701                           status	equ	0xFD8
 14702                           
 14703 ;; *************** function _ExecuteNewChannel *****************
 14704 ;; Defined at:
 14705 ;;		line 677 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 14706 ;; Parameters:    Size  Location     Type
 14707 ;;  ptr             2   60[BANK0 ] PTR unsigned char 
 14708 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 14709 ;; Auto vars:     Size  Location     Type
 14710 ;;  frequency       4   63[BANK0 ] unsigned long 
 14711 ;;  channelIndex    1   67[BANK0 ] unsigned char 
 14712 ;;  drRange         1   62[BANK0 ] struct .
 14713 ;; Return value:  Size  Location     Type
 14714 ;;                  2   60[BANK0 ] PTR unsigned char 
 14715 ;; Registers used:
 14716 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14717 ;; Tracked objects:
 14718 ;;		On entry : 3F/0
 14719 ;;		On exit  : 3F/2
 14720 ;;		Unchanged: 0/0
 14721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14722 ;;      Params:         0       2       0       0       0       0       0       0       0
 14723 ;;      Locals:         0       6       0       0       0       0       0       0       0
 14724 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14725 ;;      Totals:         0       8       0       0       0       0       0       0       0
 14726 ;;Total ram usage:        8 bytes
 14727 ;; Hardware stack levels used:    1
 14728 ;; Hardware stack levels required when called:    9
 14729 ;; This function calls:
 14730 ;;		_LORAWAN_SetChannelIdStatus
 14731 ;;		_UpdateChannelIdStatus
 14732 ;;		_UpdateDataRange
 14733 ;;		_UpdateDutyCycle
 14734 ;;		_UpdateFrequency
 14735 ;;		_ValidateChannelId
 14736 ;;		_ValidateDataRange
 14737 ;;		_ValidateFrequency
 14738 ;;		___lmul
 14739 ;; This function is called by:
 14740 ;;		_MacExecuteCommands
 14741 ;; This function uses a non-reentrant model
 14742 ;;
 14743                           
 14744                           	psect	text71
 14745  002646                     __ptext71:
 14746                           	opt stack 0
 14747  002646                     _ExecuteNewChannel:
 14748                           	opt stack 0
 14749                           
 14750                           ; BSR set to: 0
 14751                           ;lorawan_eu.c: 683: channelIndex = *(ptr++);
 14752                           
 14753                           ; BSR set to: 0
 14754                           
 14755                           ; BSR set to: 0
 14756                           ;incstack = 0
 14757  002646  D8AF               	call	PL318	;call to abstracted procedure
 14758  002648  50DF               	movf	indf2,w,c
 14759  00264A  6FA3               	movwf	ExecuteNewChannel@channelIndex& (0+255),b
 14760                           
 14761                           ; BSR set to: 0
 14762  00264C  4B9C               	infsnz	ExecuteNewChannel@ptr& (0+255),f,b
 14763  00264E  2B9D               	incf	(ExecuteNewChannel@ptr+1)& (0+255),f,b
 14764                           
 14765                           ; BSR set to: 0
 14766                           ;lorawan_eu.c: 685: frequency = (*((uint32_t*)ptr)) & 0x00FFFFFF;
 14767  002650  D8AA               	call	PL318	;call to abstracted procedure
 14768  002652  0EFF               	movlw	255
 14769  002654  14DE               	andwf	postinc2,w,c
 14770  002656  6F9F               	movwf	ExecuteNewChannel@frequency& (0+255),b
 14771  002658  0EFF               	movlw	255
 14772  00265A  14DE               	andwf	postinc2,w,c
 14773  00265C  6FA0               	movwf	(ExecuteNewChannel@frequency+1)& (0+255),b
 14774  00265E  0EFF               	movlw	255
 14775  002660  14DE               	andwf	postinc2,w,c
 14776  002662  6FA1               	movwf	(ExecuteNewChannel@frequency+2)& (0+255),b
 14777  002664  0E00               	movlw	0
 14778  002666  14DE               	andwf	postinc2,w,c
 14779  002668  6FA2               	movwf	(ExecuteNewChannel@frequency+3)& (0+255),b
 14780                           
 14781                           ; BSR set to: 0
 14782                           ;lorawan_eu.c: 686: frequency = frequency * 100;
 14783  00266A  C09F  F090         	movff	ExecuteNewChannel@frequency,___lmul@multiplier
 14784  00266E  C0A0  F091         	movff	ExecuteNewChannel@frequency+1,___lmul@multiplier+1
 14785  002672  C0A1  F092         	movff	ExecuteNewChannel@frequency+2,___lmul@multiplier+2
 14786  002676  C0A2  F093         	movff	ExecuteNewChannel@frequency+3,___lmul@multiplier+3
 14787  00267A  0E64               	movlw	100
 14788  00267C  EC98  F006         	call	PL80	;call to abstracted procedure
 14789  002680  EC25  F02A         	call	___lmul	;wreg free
 14790  002684  C090  F09F         	movff	?___lmul,ExecuteNewChannel@frequency
 14791  002688  C091  F0A0         	movff	?___lmul+1,ExecuteNewChannel@frequency+1
 14792  00268C  C092  F0A1         	movff	?___lmul+2,ExecuteNewChannel@frequency+2
 14793  002690  C093  F0A2         	movff	?___lmul+3,ExecuteNewChannel@frequency+3
 14794                           
 14795                           ; BSR set to: 0
 14796                           ;lorawan_eu.c: 687: ptr = ptr + 3;
 14797  002694  0E03               	movlw	3
 14798  002696  279C               	addwf	ExecuteNewChannel@ptr& (0+255),f,b
 14799  002698  0E00               	movlw	0
 14800  00269A  239D               	addwfc	(ExecuteNewChannel@ptr+1)& (0+255),f,b
 14801                           
 14802                           ; BSR set to: 0
 14803                           ;lorawan_eu.c: 689: drRange.value = *(ptr++);
 14804  00269C  D884               	call	PL318	;call to abstracted procedure
 14805  00269E  50DF               	movf	indf2,w,c
 14806  0026A0  6F9E               	movwf	ExecuteNewChannel@drRange& (0+255),b
 14807                           
 14808                           ; BSR set to: 0
 14809  0026A2  4B9C               	infsnz	ExecuteNewChannel@ptr& (0+255),f,b
 14810  0026A4  2B9D               	incf	(ExecuteNewChannel@ptr+1)& (0+255),f,b
 14811                           
 14812                           ; BSR set to: 0
 14813                           ;lorawan_eu.c: 691: if (ValidateChannelId (channelIndex, 0) == OK)
 14814  0026A6  6B60               	clrf	ValidateChannelId@allowedForDefaultChannels& (0+255),b
 14815  0026A8  51A3               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14816  0026AA  EC22  F02F         	call	_ValidateChannelId
 14817  0026AE  0900               	iorlw	0
 14818  0026B0  E11E               	bnz	l1274
 14819                           
 14820                           ; BSR set to: 0
 14821                           ;lorawan_eu.c: 692: {
 14822                           ;lorawan_eu.c: 693: if ( (ValidateFrequency (frequency) == OK) || (frequency == 0) )
 14823  0026B2  C09F  F060         	movff	ExecuteNewChannel@frequency,ValidateFrequency@frequencyNew
 14824  0026B6  C0A0  F061         	movff	ExecuteNewChannel@frequency+1,ValidateFrequency@frequencyNew+1
 14825  0026BA  C0A1  F062         	movff	ExecuteNewChannel@frequency+2,ValidateFrequency@frequencyNew+2
 14826  0026BE  C0A2  F063         	movff	ExecuteNewChannel@frequency+3,ValidateFrequency@frequencyNew+3
 14827  0026C2  ECB5  F027         	call	_ValidateFrequency	;wreg free
 14828  0026C6  0900               	iorlw	0
 14829  0026C8  E002               	bz	l13708
 14830                           
 14831                           ; BSR set to: 0
 14832  0026CA  D872               	call	PL324	;call to abstracted procedure
 14833  0026CC  E105               	bnz	l13710
 14834  0026CE                     l13708:
 14835                           
 14836                           ; BSR set to: 0
 14837                           ;lorawan_eu.c: 694: {
 14838                           ;lorawan_eu.c: 695: loRa.macCommands[loRa.crtMacCmdIndex].channelFrequencyAck = 1;
 14839  0026CE  0102               	movlb	2	; () banked
 14840  0026D0  51A7               	movf	(_loRa+167)& (0+255),w,b
 14841  0026D2  ECCB  F015         	call	PL2	;call to abstracted procedure
 14842  0026D6  8EDF               	bsf	indf2,7,c
 14843  0026D8                     l13710:
 14844                           
 14845                           ;lorawan_eu.c: 696: }
 14846                           ;lorawan_eu.c: 698: if (ValidateDataRange (drRange.value) == OK)
 14847  0026D8  0100               	movlb	0	; () banked
 14848  0026DA  519E               	movf	ExecuteNewChannel@drRange& (0+255),w,b
 14849  0026DC  EC7E  F02C         	call	_ValidateDataRange
 14850  0026E0  0900               	iorlw	0
 14851  0026E2  E105               	bnz	l1274
 14852                           
 14853                           ; BSR set to: 0
 14854                           ;lorawan_eu.c: 699: {
 14855                           ;lorawan_eu.c: 700: loRa.macCommands[loRa.crtMacCmdIndex].dataRateRangeAck = 1;
 14856  0026E4  0102               	movlb	2	; () banked
 14857  0026E6  51A7               	movf	(_loRa+167)& (0+255),w,b
 14858  0026E8  ECCB  F015         	call	PL2	;call to abstracted procedure
 14859  0026EC  8CDF               	bsf	indf2,6,c
 14860  0026EE                     l1274:
 14861                           
 14862                           ;lorawan_eu.c: 701: }
 14863                           ;lorawan_eu.c: 702: }
 14864                           ;lorawan_eu.c: 704: if ( (loRa.macCommands[loRa.crtMacCmdIndex].channelFrequencyAck == 1
      +                          ) && (loRa.macCommands[loRa.crtMacCmdIndex].dataRateRangeAck == 1) )
 14865  0026EE  0102               	movlb	2	; () banked
 14866  0026F0  51A7               	movf	(_loRa+167)& (0+255),w,b
 14867  0026F2  ECCB  F015         	call	PL2	;call to abstracted procedure
 14868  0026F6  AEDF               	btfss	indf2,7,c
 14869  0026F8  D040               	goto	l13732
 14870                           
 14871                           ; BSR set to: 2
 14872  0026FA  51A7               	movf	(_loRa+167)& (0+255),w,b
 14873  0026FC  ECCB  F015         	call	PL2	;call to abstracted procedure
 14874  002700  ACDF               	btfss	indf2,6,c
 14875  002702  D03B               	goto	l13732
 14876                           
 14877                           ; BSR set to: 2
 14878                           ;lorawan_eu.c: 705: {
 14879                           ;lorawan_eu.c: 706: if (loRa.lastUsedChannelIndex < 16)
 14880  002704  0E10               	movlw	16
 14881  002706  61DA               	cpfslt	(_loRa+218)& (0+255),b
 14882  002708  D019               	goto	l13724
 14883                           
 14884                           ; BSR set to: 2
 14885                           ;lorawan_eu.c: 707: {
 14886                           ;lorawan_eu.c: 708: if (frequency != 0)
 14887  00270A  0100               	movlb	0	; () banked
 14888  00270C  D851               	call	PL324	;call to abstracted procedure
 14889  00270E  E011               	bz	l13722
 14890                           
 14891                           ; BSR set to: 0
 14892                           ;lorawan_eu.c: 709: {
 14893                           ;lorawan_eu.c: 710: UpdateFrequency (channelIndex, frequency);
 14894  002710  D839               	call	PL204	;call to abstracted procedure
 14895  002712  EC2B  F02E         	call	_UpdateFrequency
 14896                           
 14897                           ;lorawan_eu.c: 711: UpdateDataRange (channelIndex, drRange.value);
 14898  002716  C09E  F060         	movff	ExecuteNewChannel@drRange,UpdateDataRange@dataRangeNew
 14899  00271A  51A3               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14900  00271C  EC3B  F021         	call	_UpdateDataRange
 14901                           
 14902                           ;lorawan_eu.c: 712: UpdateDutyCycle (channelIndex, 302);
 14903  002720  D83B               	call	PL282	;call to abstracted procedure
 14904  002722  EC6C  F02D         	call	_UpdateDutyCycle
 14905                           
 14906                           ;lorawan_eu.c: 713: UpdateChannelIdStatus (channelIndex, 1);
 14907  002726  0E01               	movlw	1
 14908  002728  6F60               	movwf	UpdateChannelIdStatus@statusNew& (0+255),b
 14909  00272A  51A3               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14910  00272C  EC57  F01D         	call	_UpdateChannelIdStatus
 14911                           
 14912                           ;lorawan_eu.c: 714: }
 14913  002730  D022               	goto	l13730
 14914  002732                     l13722:
 14915                           
 14916                           ; BSR set to: 0
 14917                           ;lorawan_eu.c: 715: else
 14918                           ;lorawan_eu.c: 716: {
 14919                           ;lorawan_eu.c: 717: LORAWAN_SetChannelIdStatus (channelIndex, 0);
 14920  002732  6B64               	clrf	LORAWAN_SetChannelIdStatus@statusNew& (0+255),b
 14921  002734  51A3               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14922  002736  EC11  F02D         	call	_LORAWAN_SetChannelIdStatus
 14923  00273A  D01D               	goto	l13730
 14924  00273C                     l13724:
 14925                           
 14926                           ; BSR set to: 2
 14927                           ;lorawan_eu.c: 720: else
 14928                           ;lorawan_eu.c: 721: {
 14929                           ;lorawan_eu.c: 722: if (frequency != 0)
 14930  00273C  0100               	movlb	0	; () banked
 14931  00273E  D838               	call	PL324	;call to abstracted procedure
 14932  002740  E015               	bz	l13728
 14933                           
 14934                           ; BSR set to: 0
 14935                           ;lorawan_eu.c: 723: {
 14936                           ;lorawan_eu.c: 724: UpdateFrequency (channelIndex + 16, frequency);
 14937  002742  D820               	call	PL204	;call to abstracted procedure
 14938  002744  0F10               	addlw	16
 14939  002746  EC2B  F02E         	call	_UpdateFrequency
 14940                           
 14941                           ;lorawan_eu.c: 725: UpdateDataRange (channelIndex + 16, drRange.value);
 14942  00274A  C09E  F060         	movff	ExecuteNewChannel@drRange,UpdateDataRange@dataRangeNew
 14943  00274E  51A3               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14944  002750  0F10               	addlw	16
 14945  002752  EC3B  F021         	call	_UpdateDataRange
 14946                           
 14947                           ;lorawan_eu.c: 726: UpdateDutyCycle (channelIndex + 16, 302);
 14948  002756  D820               	call	PL282	;call to abstracted procedure
 14949  002758  0F10               	addlw	16
 14950  00275A  EC6C  F02D         	call	_UpdateDutyCycle
 14951                           
 14952                           ;lorawan_eu.c: 727: UpdateChannelIdStatus (channelIndex + 16, 1);
 14953  00275E  0E01               	movlw	1
 14954  002760  6F60               	movwf	UpdateChannelIdStatus@statusNew& (0+255),b
 14955  002762  51A3               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14956  002764  0F10               	addlw	16
 14957  002766  EC57  F01D         	call	_UpdateChannelIdStatus
 14958                           
 14959                           ;lorawan_eu.c: 728: }
 14960  00276A  D005               	goto	l13730
 14961  00276C                     l13728:
 14962                           
 14963                           ; BSR set to: 0
 14964                           ;lorawan_eu.c: 729: else
 14965                           ;lorawan_eu.c: 730: {
 14966                           ;lorawan_eu.c: 731: LORAWAN_SetChannelIdStatus (channelIndex + 16, 0);
 14967  00276C  6B64               	clrf	LORAWAN_SetChannelIdStatus@statusNew& (0+255),b
 14968  00276E  51A3               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14969  002770  0F10               	addlw	16
 14970  002772  EC11  F02D         	call	_LORAWAN_SetChannelIdStatus
 14971  002776                     l13730:
 14972                           
 14973                           ;lorawan_eu.c: 732: }
 14974                           ;lorawan_eu.c: 733: }
 14975                           ;lorawan_eu.c: 735: loRa.macStatus.channelsModified = 1;
 14976  002776  0102               	movlb	2	; () banked
 14977  002778  8703               	bsf	(_loRa+3)& (0+255),3,b
 14978  00277A                     l13732:
 14979                           
 14980                           ; BSR set to: 2
 14981                           ;lorawan_eu.c: 736: }
 14982                           ;lorawan_eu.c: 737: return ptr;
 14983  00277A  C09C  F09C         	movff	ExecuteNewChannel@ptr,?_ExecuteNewChannel
 14984  00277E  C09D  F09D         	movff	ExecuteNewChannel@ptr+1,?_ExecuteNewChannel+1
 14985                           
 14986                           ; BSR set to: 2
 14987  002782  0012               	return		;funcret
 14988  002784                     __end_of_ExecuteNewChannel:
 14989                           	opt stack 0
 14990  002784                     PL204:
 14991                           	opt stack 16
 14992  002784  C09F  F060         	movff	ExecuteNewChannel@frequency,UpdateFrequency@frequencyNew
 14993  002788  C0A0  F061         	movff	ExecuteNewChannel@frequency+1,UpdateFrequency@frequencyNew+1
 14994  00278C  C0A1  F062         	movff	ExecuteNewChannel@frequency+2,UpdateFrequency@frequencyNew+2
 14995  002790  C0A2  F063         	movff	ExecuteNewChannel@frequency+3,UpdateFrequency@frequencyNew+3
 14996  002794  51A3               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14997  002796  0012               	return	
 14998  002798                     __end_ofPL204:
 14999                           	opt stack 0
 15000  002798                     PL282:
 15001                           	opt stack 16
 15002  002798  0E01               	movlw	1
 15003  00279A  0100               	movlb	0	; () banked
 15004  00279C  6F61               	movwf	(UpdateDutyCycle@dutyCycleNew+1)& (0+255),b
 15005  00279E  0E2E               	movlw	46
 15006  0027A0  6F60               	movwf	UpdateDutyCycle@dutyCycleNew& (0+255),b
 15007  0027A2  51A3               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 15008  0027A4  0012               	return	
 15009  0027A6                     __end_ofPL282:
 15010                           	opt stack 0
 15011  0027A6                     PL318:
 15012                           	opt stack 16
 15013  0027A6  C09C  FFD9         	movff	ExecuteNewChannel@ptr,fsr2l
 15014  0027AA  C09D  FFDA         	movff	ExecuteNewChannel@ptr+1,fsr2h
 15015  0027AE  0012               	return	
 15016  0027B0                     __end_ofPL318:
 15017                           	opt stack 0
 15018  0027B0                     PL324:
 15019                           	opt stack 16
 15020  0027B0  519F               	movf	ExecuteNewChannel@frequency& (0+255),w,b
 15021  0027B2  11A0               	iorwf	(ExecuteNewChannel@frequency+1)& (0+255),w,b
 15022  0027B4  11A1               	iorwf	(ExecuteNewChannel@frequency+2)& (0+255),w,b
 15023  0027B6  11A2               	iorwf	(ExecuteNewChannel@frequency+3)& (0+255),w,b
 15024  0027B8  0012               	return	
 15025  0027BA                     __end_ofPL324:
 15026                           	opt stack 0
 15027                           tosu	equ	0xFFF
 15028                           tosh	equ	0xFFE
 15029                           tosl	equ	0xFFD
 15030                           pclath	equ	0xFFA
 15031                           tblptru	equ	0xFF8
 15032                           tblptrh	equ	0xFF7
 15033                           tblptrl	equ	0xFF6
 15034                           tablat	equ	0xFF5
 15035                           prodh	equ	0xFF4
 15036                           prodl	equ	0xFF3
 15037                           intcon	equ	0xFF2
 15038                           indf0	equ	0xFEF
 15039                           postinc0	equ	0xFEE
 15040                           plusw0	equ	0xFEB
 15041                           fsr0h	equ	0xFEA
 15042                           fsr0l	equ	0xFE9
 15043                           wreg	equ	0xFE8
 15044                           postinc1	equ	0xFE6
 15045                           postdec1	equ	0xFE5
 15046                           plusw1	equ	0xFE3
 15047                           fsr1h	equ	0xFE2
 15048                           fsr1l	equ	0xFE1
 15049                           indf2	equ	0xFDF
 15050                           postinc2	equ	0xFDE
 15051                           postdec2	equ	0xFDD
 15052                           plusw2	equ	0xFDB
 15053                           fsr2h	equ	0xFDA
 15054                           fsr2l	equ	0xFD9
 15055                           status	equ	0xFD8
 15056                           
 15057 ;; *************** function _ValidateFrequency *****************
 15058 ;; Defined at:
 15059 ;;		line 1088 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 15060 ;; Parameters:    Size  Location     Type
 15061 ;;  frequencyNew    4    0[BANK0 ] unsigned long 
 15062 ;; Auto vars:     Size  Location     Type
 15063 ;;  result          1    4[BANK0 ] enum E17413
 15064 ;; Return value:  Size  Location     Type
 15065 ;;                  1    wreg      enum E17413
 15066 ;; Registers used:
 15067 ;;		wreg, status,2, status,0
 15068 ;; Tracked objects:
 15069 ;;		On entry : 3F/0
 15070 ;;		On exit  : 3F/0
 15071 ;;		Unchanged: 0/0
 15072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15073 ;;      Params:         0       4       0       0       0       0       0       0       0
 15074 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15075 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15076 ;;      Totals:         0       5       0       0       0       0       0       0       0
 15077 ;;Total ram usage:        5 bytes
 15078 ;; Hardware stack levels used:    1
 15079 ;; Hardware stack levels required when called:    7
 15080 ;; This function calls:
 15081 ;;		Nothing
 15082 ;; This function is called by:
 15083 ;;		_ExecuteNewChannel
 15084 ;;		_ExecuteRxParamSetupReq
 15085 ;;		_UpdateCfList
 15086 ;; This function uses a non-reentrant model
 15087 ;;
 15088                           
 15089                           	psect	text72
 15090  004F6A                     __ptext72:
 15091                           	opt stack 0
 15092  004F6A                     _ValidateFrequency:
 15093                           	opt stack 18
 15094                           
 15095                           ; BSR set to: 0
 15096                           ;lorawan_eu.c: 1090: LorawanError_t result = OK;
 15097                           
 15098                           ; BSR set to: 2
 15099                           ;incstack = 0
 15100  004F6A  6B64               	clrf	ValidateFrequency@result& (0+255),b
 15101                           
 15102                           ; BSR set to: 0
 15103                           ;lorawan_eu.c: 1092: if(ISM_EU868 == loRa.ismBand)
 15104  004F6C  0102               	movlb	2	; () banked
 15105  004F6E  51A4               	movf	(_loRa+164)& (0+255),w,b
 15106  004F70  E116               	bnz	l13172
 15107                           
 15108                           ; BSR set to: 2
 15109                           ;lorawan_eu.c: 1093: {
 15110                           ;lorawan_eu.c: 1094: if ( (frequencyNew > 870000000) || (frequencyNew < 863000000) )
 15111  004F72  0E81               	movlw	129
 15112  004F74  0100               	movlb	0	; () banked
 15113  004F76  5D60               	subwf	ValidateFrequency@frequencyNew& (0+255),w,b
 15114  004F78  0E25               	movlw	37
 15115  004F7A  5961               	subwfb	(ValidateFrequency@frequencyNew+1)& (0+255),w,b
 15116  004F7C  0EDB               	movlw	219
 15117  004F7E  5962               	subwfb	(ValidateFrequency@frequencyNew+2)& (0+255),w,b
 15118  004F80  0E33               	movlw	51
 15119  004F82  5963               	subwfb	(ValidateFrequency@frequencyNew+3)& (0+255),w,b
 15120  004F84  E209               	bc	l13170
 15121                           
 15122                           ; BSR set to: 0
 15123  004F86  0EC0               	movlw	192
 15124  004F88  5D60               	subwf	ValidateFrequency@frequencyNew& (0+255),w,b
 15125  004F8A  0E55               	movlw	85
 15126  004F8C  5961               	subwfb	(ValidateFrequency@frequencyNew+1)& (0+255),w,b
 15127  004F8E  0E70               	movlw	112
 15128  004F90  5962               	subwfb	(ValidateFrequency@frequencyNew+2)& (0+255),w,b
 15129  004F92  0E33               	movlw	51
 15130  004F94  5963               	subwfb	(ValidateFrequency@frequencyNew+3)& (0+255),w,b
 15131  004F96  E215               	bc	l1395
 15132  004F98                     l13170:
 15133                           
 15134                           ; BSR set to: 0
 15135                           ;lorawan_eu.c: 1095: {
 15136                           ;lorawan_eu.c: 1096: result = INVALID_PARAMETER ;
 15137  004F98  0E03               	movlw	3
 15138  004F9A  6F64               	movwf	ValidateFrequency@result& (0+255),b
 15139  004F9C  D012               	goto	l1395
 15140  004F9E                     l13172:
 15141                           
 15142                           ; BSR set to: 2
 15143                           ;lorawan_eu.c: 1099: else
 15144                           ;lorawan_eu.c: 1100: {
 15145                           ;lorawan_eu.c: 1101: if ( (frequencyNew > 434790000) || (frequencyNew < 433050000) )
 15146  004F9E  0E71               	movlw	113
 15147  004FA0  0100               	movlb	0	; () banked
 15148  004FA2  5D60               	subwf	ValidateFrequency@frequencyNew& (0+255),w,b
 15149  004FA4  0E5E               	movlw	94
 15150  004FA6  5961               	subwfb	(ValidateFrequency@frequencyNew+1)& (0+255),w,b
 15151  004FA8  0EEA               	movlw	234
 15152  004FAA  5962               	subwfb	(ValidateFrequency@frequencyNew+2)& (0+255),w,b
 15153  004FAC  0E19               	movlw	25
 15154  004FAE  5963               	subwfb	(ValidateFrequency@frequencyNew+3)& (0+255),w,b
 15155  004FB0  E2F3               	bc	l13170
 15156                           
 15157                           ; BSR set to: 0
 15158  004FB2  0E90               	movlw	144
 15159  004FB4  5D60               	subwf	ValidateFrequency@frequencyNew& (0+255),w,b
 15160  004FB6  0ED1               	movlw	209
 15161  004FB8  5961               	subwfb	(ValidateFrequency@frequencyNew+1)& (0+255),w,b
 15162  004FBA  0ECF               	movlw	207
 15163  004FBC  5962               	subwfb	(ValidateFrequency@frequencyNew+2)& (0+255),w,b
 15164  004FBE  0E19               	movlw	25
 15165  004FC0  D7E9               	goto	L9
 15166  004FC2                     l1395:
 15167                           
 15168                           ; BSR set to: 0
 15169                           ;lorawan_eu.c: 1104: }
 15170                           ;lorawan_eu.c: 1105: }
 15171                           ;lorawan_eu.c: 1107: return result;
 15172  004FC2  5164               	movf	ValidateFrequency@result& (0+255),w,b
 15173                           
 15174                           ; BSR set to: 0
 15175  004FC4  0012               	return		;funcret
 15176  004FC6                     __end_of_ValidateFrequency:
 15177                           	opt stack 0
 15178                           tosu	equ	0xFFF
 15179                           tosh	equ	0xFFE
 15180                           tosl	equ	0xFFD
 15181                           pclath	equ	0xFFA
 15182                           tblptru	equ	0xFF8
 15183                           tblptrh	equ	0xFF7
 15184                           tblptrl	equ	0xFF6
 15185                           tablat	equ	0xFF5
 15186                           prodh	equ	0xFF4
 15187                           prodl	equ	0xFF3
 15188                           intcon	equ	0xFF2
 15189                           indf0	equ	0xFEF
 15190                           postinc0	equ	0xFEE
 15191                           plusw0	equ	0xFEB
 15192                           fsr0h	equ	0xFEA
 15193                           fsr0l	equ	0xFE9
 15194                           wreg	equ	0xFE8
 15195                           postinc1	equ	0xFE6
 15196                           postdec1	equ	0xFE5
 15197                           plusw1	equ	0xFE3
 15198                           fsr1h	equ	0xFE2
 15199                           fsr1l	equ	0xFE1
 15200                           indf2	equ	0xFDF
 15201                           postinc2	equ	0xFDE
 15202                           postdec2	equ	0xFDD
 15203                           plusw2	equ	0xFDB
 15204                           fsr2h	equ	0xFDA
 15205                           fsr2l	equ	0xFD9
 15206                           status	equ	0xFD8
 15207                           
 15208 ;; *************** function _ValidateDataRange *****************
 15209 ;; Defined at:
 15210 ;;		line 1110 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 15211 ;; Parameters:    Size  Location     Type
 15212 ;;  dataRangeNew    1    wreg     unsigned char 
 15213 ;; Auto vars:     Size  Location     Type
 15214 ;;  dataRangeNew    1    3[BANK0 ] unsigned char 
 15215 ;;  dataRateMin     1    5[BANK0 ] unsigned char 
 15216 ;;  dataRateMax     1    4[BANK0 ] unsigned char 
 15217 ;;  result          1    2[BANK0 ] enum E17413
 15218 ;; Return value:  Size  Location     Type
 15219 ;;                  1    wreg      enum E17413
 15220 ;; Registers used:
 15221 ;;		wreg, status,2, status,0, cstack
 15222 ;; Tracked objects:
 15223 ;;		On entry : 3F/0
 15224 ;;		On exit  : 3F/0
 15225 ;;		Unchanged: 0/0
 15226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15227 ;;      Params:         0       0       0       0       0       0       0       0       0
 15228 ;;      Locals:         0       4       0       0       0       0       0       0       0
 15229 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15230 ;;      Totals:         0       4       0       0       0       0       0       0       0
 15231 ;;Total ram usage:        4 bytes
 15232 ;; Hardware stack levels used:    1
 15233 ;; Hardware stack levels required when called:    8
 15234 ;; This function calls:
 15235 ;;		_ValidateDataRate
 15236 ;; This function is called by:
 15237 ;;		_ExecuteNewChannel
 15238 ;; This function uses a non-reentrant model
 15239 ;;
 15240                           
 15241                           	psect	text73
 15242  0058FC                     __ptext73:
 15243                           	opt stack 0
 15244  0058FC                     _ValidateDataRange:
 15245                           	opt stack 16
 15246                           
 15247                           ; BSR set to: 0
 15248                           ;incstack = 0
 15249                           ;ValidateDataRange@dataRangeNew stored from wreg
 15250  0058FC  6F63               	movwf	ValidateDataRange@dataRangeNew& (0+255),b
 15251                           
 15252                           ;lorawan_eu.c: 1112: LorawanError_t result = OK;
 15253  0058FE  0100               	movlb	0	; () banked
 15254  005900  6B62               	clrf	ValidateDataRange@result& (0+255),b
 15255                           
 15256                           ; BSR set to: 0
 15257                           ;lorawan_eu.c: 1113: uint8_t dataRateMax, dataRateMin;
 15258                           ;lorawan_eu.c: 1115: dataRateMin = dataRangeNew & 0x0F;
 15259  005902  5163               	movf	ValidateDataRange@dataRangeNew& (0+255),w,b
 15260  005904  0B0F               	andlw	15
 15261  005906  6F65               	movwf	ValidateDataRange@dataRateMin& (0+255),b
 15262                           
 15263                           ;lorawan_eu.c: 1116: dataRateMax = (dataRangeNew & 0xF0) >> (4);
 15264  005908  3963               	swapf	ValidateDataRange@dataRangeNew& (0+255),w,b
 15265  00590A  0B0F               	andlw	15
 15266  00590C  6F64               	movwf	ValidateDataRange@dataRateMax& (0+255),b
 15267                           
 15268                           ; BSR set to: 0
 15269                           ;lorawan_eu.c: 1118: if ( (ValidateDataRate (dataRateMax) != OK) || (ValidateDataRate (d
      +                          ataRateMin) != OK ) || (dataRateMax < dataRateMin) )
 15270  00590E  5164               	movf	ValidateDataRange@dataRateMax& (0+255),w,b
 15271  005910  EC39  F030         	call	_ValidateDataRate
 15272  005914  0900               	iorlw	0
 15273  005916  E108               	bnz	l13190
 15274                           
 15275                           ; BSR set to: 0
 15276  005918  5165               	movf	ValidateDataRange@dataRateMin& (0+255),w,b
 15277  00591A  EC39  F030         	call	_ValidateDataRate
 15278  00591E  0900               	iorlw	0
 15279  005920  E103               	bnz	l13190
 15280                           
 15281                           ; BSR set to: 0
 15282  005922  5165               	movf	ValidateDataRange@dataRateMin& (0+255),w,b
 15283  005924  5D64               	subwf	ValidateDataRange@dataRateMax& (0+255),w,b
 15284  005926  E202               	bc	l1402
 15285  005928                     l13190:
 15286                           
 15287                           ; BSR set to: 0
 15288                           ;lorawan_eu.c: 1119: {
 15289                           ;lorawan_eu.c: 1120: result = INVALID_PARAMETER;
 15290  005928  0E03               	movlw	3
 15291  00592A  6F62               	movwf	ValidateDataRange@result& (0+255),b
 15292  00592C                     l1402:
 15293                           
 15294                           ; BSR set to: 0
 15295                           ;lorawan_eu.c: 1121: }
 15296                           ;lorawan_eu.c: 1122: return result;
 15297  00592C  5162               	movf	ValidateDataRange@result& (0+255),w,b
 15298                           
 15299                           ; BSR set to: 0
 15300  00592E  0012               	return		;funcret
 15301  005930                     __end_of_ValidateDataRange:
 15302                           	opt stack 0
 15303                           tosu	equ	0xFFF
 15304                           tosh	equ	0xFFE
 15305                           tosl	equ	0xFFD
 15306                           pclath	equ	0xFFA
 15307                           tblptru	equ	0xFF8
 15308                           tblptrh	equ	0xFF7
 15309                           tblptrl	equ	0xFF6
 15310                           tablat	equ	0xFF5
 15311                           prodh	equ	0xFF4
 15312                           prodl	equ	0xFF3
 15313                           intcon	equ	0xFF2
 15314                           indf0	equ	0xFEF
 15315                           postinc0	equ	0xFEE
 15316                           plusw0	equ	0xFEB
 15317                           fsr0h	equ	0xFEA
 15318                           fsr0l	equ	0xFE9
 15319                           wreg	equ	0xFE8
 15320                           postinc1	equ	0xFE6
 15321                           postdec1	equ	0xFE5
 15322                           plusw1	equ	0xFE3
 15323                           fsr1h	equ	0xFE2
 15324                           fsr1l	equ	0xFE1
 15325                           indf2	equ	0xFDF
 15326                           postinc2	equ	0xFDE
 15327                           postdec2	equ	0xFDD
 15328                           plusw2	equ	0xFDB
 15329                           fsr2h	equ	0xFDA
 15330                           fsr2l	equ	0xFD9
 15331                           status	equ	0xFD8
 15332                           
 15333 ;; *************** function _UpdateFrequency *****************
 15334 ;; Defined at:
 15335 ;;		line 1154 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 15336 ;; Parameters:    Size  Location     Type
 15337 ;;  channelId       1    wreg     unsigned char 
 15338 ;;  frequencyNew    4    0[BANK0 ] unsigned long 
 15339 ;; Auto vars:     Size  Location     Type
 15340 ;;  channelId       1    4[BANK0 ] unsigned char 
 15341 ;; Return value:  Size  Location     Type
 15342 ;;                  1    wreg      void 
 15343 ;; Registers used:
 15344 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15345 ;; Tracked objects:
 15346 ;;		On entry : 3F/0
 15347 ;;		On exit  : 3F/0
 15348 ;;		Unchanged: 0/0
 15349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15350 ;;      Params:         0       4       0       0       0       0       0       0       0
 15351 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15352 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15353 ;;      Totals:         0       5       0       0       0       0       0       0       0
 15354 ;;Total ram usage:        5 bytes
 15355 ;; Hardware stack levels used:    1
 15356 ;; Hardware stack levels required when called:    7
 15357 ;; This function calls:
 15358 ;;		Nothing
 15359 ;; This function is called by:
 15360 ;;		_ExecuteNewChannel
 15361 ;; This function uses a non-reentrant model
 15362 ;;
 15363                           
 15364                           	psect	text74
 15365  005C56                     __ptext74:
 15366                           	opt stack 0
 15367  005C56                     _UpdateFrequency:
 15368                           	opt stack 17
 15369                           
 15370                           ; BSR set to: 0
 15371                           ;incstack = 0
 15372                           ;UpdateFrequency@channelId stored from wreg
 15373  005C56  6F64               	movwf	UpdateFrequency@channelId& (0+255),b
 15374                           
 15375                           ;lorawan_eu.c: 1156: Channels[channelId].frequency = frequencyNew;
 15376  005C58  0100               	movlb	0	; () banked
 15377  005C5A  5164               	movf	UpdateFrequency@channelId& (0+255),w,b
 15378  005C5C  ECED  F026         	call	PL252	;call to abstracted procedure
 15379  005C60  C060  FFDE         	movff	UpdateFrequency@frequencyNew,postinc2
 15380  005C64  C061  FFDE         	movff	UpdateFrequency@frequencyNew+1,postinc2
 15381  005C68  C062  FFDE         	movff	UpdateFrequency@frequencyNew+2,postinc2
 15382  005C6C  C063  FFDE         	movff	UpdateFrequency@frequencyNew+3,postinc2
 15383                           
 15384                           ;lorawan_eu.c: 1157: Channels[channelId].parametersDefined |= 0X01;
 15385  005C70  5164               	movf	UpdateFrequency@channelId& (0+255),w,b
 15386  005C72  EC7A  F02D         	call	PL68	;call to abstracted procedure
 15387  005C76  0E00               	movlw	0
 15388  005C78  80DB               	bsf	plusw2,0,c
 15389                           
 15390                           ; BSR set to: 0
 15391  005C7A  0C00               	retlw	0	;funcret
 15392  005C7C                     __end_of_UpdateFrequency:
 15393                           	opt stack 0
 15394                           tosu	equ	0xFFF
 15395                           tosh	equ	0xFFE
 15396                           tosl	equ	0xFFD
 15397                           pclath	equ	0xFFA
 15398                           tblptru	equ	0xFF8
 15399                           tblptrh	equ	0xFF7
 15400                           tblptrl	equ	0xFF6
 15401                           tablat	equ	0xFF5
 15402                           prodh	equ	0xFF4
 15403                           prodl	equ	0xFF3
 15404                           intcon	equ	0xFF2
 15405                           indf0	equ	0xFEF
 15406                           postinc0	equ	0xFEE
 15407                           plusw0	equ	0xFEB
 15408                           fsr0h	equ	0xFEA
 15409                           fsr0l	equ	0xFE9
 15410                           wreg	equ	0xFE8
 15411                           postinc1	equ	0xFE6
 15412                           postdec1	equ	0xFE5
 15413                           plusw1	equ	0xFE3
 15414                           fsr1h	equ	0xFE2
 15415                           fsr1l	equ	0xFE1
 15416                           indf2	equ	0xFDF
 15417                           postinc2	equ	0xFDE
 15418                           postdec2	equ	0xFDD
 15419                           plusw2	equ	0xFDB
 15420                           fsr2h	equ	0xFDA
 15421                           fsr2l	equ	0xFD9
 15422                           status	equ	0xFD8
 15423                           
 15424 ;; *************** function _UpdateDutyCycle *****************
 15425 ;; Defined at:
 15426 ;;		line 1160 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 15427 ;; Parameters:    Size  Location     Type
 15428 ;;  channelId       1    wreg     unsigned char 
 15429 ;;  dutyCycleNew    2    0[BANK0 ] unsigned int 
 15430 ;; Auto vars:     Size  Location     Type
 15431 ;;  channelId       1    2[BANK0 ] unsigned char 
 15432 ;; Return value:  Size  Location     Type
 15433 ;;                  1    wreg      void 
 15434 ;; Registers used:
 15435 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15436 ;; Tracked objects:
 15437 ;;		On entry : 3F/0
 15438 ;;		On exit  : 3F/0
 15439 ;;		Unchanged: 0/0
 15440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15441 ;;      Params:         0       2       0       0       0       0       0       0       0
 15442 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15443 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15444 ;;      Totals:         0       3       0       0       0       0       0       0       0
 15445 ;;Total ram usage:        3 bytes
 15446 ;; Hardware stack levels used:    1
 15447 ;; Hardware stack levels required when called:    7
 15448 ;; This function calls:
 15449 ;;		Nothing
 15450 ;; This function is called by:
 15451 ;;		_ExecuteNewChannel
 15452 ;; This function uses a non-reentrant model
 15453 ;;
 15454                           
 15455                           	psect	text75
 15456  005AD8                     __ptext75:
 15457                           	opt stack 0
 15458  005AD8                     _UpdateDutyCycle:
 15459                           	opt stack 17
 15460                           
 15461                           ; BSR set to: 0
 15462                           ;incstack = 0
 15463                           ;UpdateDutyCycle@channelId stored from wreg
 15464  005AD8  6F62               	movwf	UpdateDutyCycle@channelId& (0+255),b
 15465                           
 15466                           ;lorawan_eu.c: 1162: Channels[channelId].dutyCycle = dutyCycleNew;
 15467  005ADA  0100               	movlb	0	; () banked
 15468  005ADC  5162               	movf	UpdateDutyCycle@channelId& (0+255),w,b
 15469  005ADE  ECAD  F006         	call	PL92	;call to abstracted procedure
 15470  005AE2  C060  FFDE         	movff	UpdateDutyCycle@dutyCycleNew,postinc2
 15471  005AE6  C061  FFDD         	movff	UpdateDutyCycle@dutyCycleNew+1,postdec2
 15472                           
 15473                           ;lorawan_eu.c: 1163: Channels[channelId].parametersDefined |= 0x04;
 15474  005AEA  5162               	movf	UpdateDutyCycle@channelId& (0+255),w,b
 15475  005AEC  D803               	call	PL68	;call to abstracted procedure
 15476  005AEE  0E00               	movlw	0
 15477  005AF0  84DB               	bsf	plusw2,2,c
 15478                           
 15479                           ; BSR set to: 0
 15480  005AF2  0C00               	retlw	0	;funcret
 15481  005AF4                     __end_of_UpdateDutyCycle:
 15482                           	opt stack 0
 15483  005AF4                     PL68:
 15484                           	opt stack 17
 15485  005AF4  0D0E               	mullw	14
 15486  005AF6  0E0D               	movlw	low (_Channels+13)
 15487  005AF8  24F3               	addwf	prodl,w,c
 15488  005AFA  6ED9               	movwf	fsr2l,c
 15489  005AFC  0E04               	movlw	high (_Channels+13)
 15490  005AFE  20F4               	addwfc	prodh,w,c
 15491  005B00  6EDA               	movwf	fsr2h,c
 15492  005B02  0012               	return	
 15493  005B04                     __end_ofPL68:
 15494                           	opt stack 0
 15495                           tosu	equ	0xFFF
 15496                           tosh	equ	0xFFE
 15497                           tosl	equ	0xFFD
 15498                           pclath	equ	0xFFA
 15499                           tblptru	equ	0xFF8
 15500                           tblptrh	equ	0xFF7
 15501                           tblptrl	equ	0xFF6
 15502                           tablat	equ	0xFF5
 15503                           prodh	equ	0xFF4
 15504                           prodl	equ	0xFF3
 15505                           intcon	equ	0xFF2
 15506                           indf0	equ	0xFEF
 15507                           postinc0	equ	0xFEE
 15508                           plusw0	equ	0xFEB
 15509                           fsr0h	equ	0xFEA
 15510                           fsr0l	equ	0xFE9
 15511                           wreg	equ	0xFE8
 15512                           postinc1	equ	0xFE6
 15513                           postdec1	equ	0xFE5
 15514                           plusw1	equ	0xFE3
 15515                           fsr1h	equ	0xFE2
 15516                           fsr1l	equ	0xFE1
 15517                           indf2	equ	0xFDF
 15518                           postinc2	equ	0xFDE
 15519                           postdec2	equ	0xFDD
 15520                           plusw2	equ	0xFDB
 15521                           fsr2h	equ	0xFDA
 15522                           fsr2l	equ	0xFD9
 15523                           status	equ	0xFD8
 15524                           
 15525 ;; *************** function _UpdateDataRange *****************
 15526 ;; Defined at:
 15527 ;;		line 1009 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 15528 ;; Parameters:    Size  Location     Type
 15529 ;;  channelId       1    wreg     unsigned char 
 15530 ;;  dataRangeNew    1    0[BANK0 ] unsigned char 
 15531 ;; Auto vars:     Size  Location     Type
 15532 ;;  channelId       1    2[BANK0 ] unsigned char 
 15533 ;;  i               1    3[BANK0 ] unsigned char 
 15534 ;; Return value:  Size  Location     Type
 15535 ;;                  1    wreg      void 
 15536 ;; Registers used:
 15537 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15538 ;; Tracked objects:
 15539 ;;		On entry : 3F/0
 15540 ;;		On exit  : 3F/2
 15541 ;;		Unchanged: 0/0
 15542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15543 ;;      Params:         0       1       0       0       0       0       0       0       0
 15544 ;;      Locals:         0       2       0       0       0       0       0       0       0
 15545 ;;      Temps:          0       1       0       0       0       0       0       0       0
 15546 ;;      Totals:         0       4       0       0       0       0       0       0       0
 15547 ;;Total ram usage:        4 bytes
 15548 ;; Hardware stack levels used:    1
 15549 ;; Hardware stack levels required when called:    7
 15550 ;; This function calls:
 15551 ;;		Nothing
 15552 ;; This function is called by:
 15553 ;;		_ExecuteNewChannel
 15554 ;; This function uses a non-reentrant model
 15555 ;;
 15556                           
 15557                           	psect	text76
 15558  004276                     __ptext76:
 15559                           	opt stack 0
 15560  004276                     _UpdateDataRange:
 15561                           	opt stack 17
 15562                           
 15563                           ; BSR set to: 0
 15564                           ;incstack = 0
 15565                           ;UpdateDataRange@channelId stored from wreg
 15566  004276  6F62               	movwf	UpdateDataRange@channelId& (0+255),b
 15567                           
 15568                           ;lorawan_eu.c: 1011: uint8_t i;
 15569                           ;lorawan_eu.c: 1014: loRa.minDataRate = 7;
 15570  004278  0E07               	movlw	7
 15571  00427A  0102               	movlb	2	; () banked
 15572  00427C  6FEB               	movwf	(_loRa+235)& (0+255),b
 15573                           
 15574                           ; BSR set to: 2
 15575                           ;lorawan_eu.c: 1015: loRa.maxDataRate = 0;
 15576  00427E  6BEC               	clrf	(_loRa+236)& (0+255),b
 15577                           
 15578                           ; BSR set to: 2
 15579                           ;lorawan_eu.c: 1017: Channels[channelId].dataRange.value = dataRangeNew;
 15580  004280  0100               	movlb	0	; () banked
 15581  004282  5162               	movf	UpdateDataRange@channelId& (0+255),w,b
 15582  004284  D83B               	call	PL6	;call to abstracted procedure
 15583  004286  C060  FFDF         	movff	UpdateDataRange@dataRangeNew,indf2
 15584                           
 15585                           ; BSR set to: 0
 15586                           ;lorawan_eu.c: 1018: Channels[channelId].parametersDefined |= 0X02;
 15587  00428A  5162               	movf	UpdateDataRange@channelId& (0+255),w,b
 15588  00428C  EC7A  F02D         	call	PL68	;call to abstracted procedure
 15589  004290  0E00               	movlw	0
 15590  004292  82DB               	bsf	plusw2,1,c
 15591                           
 15592                           ; BSR set to: 0
 15593                           ;lorawan_eu.c: 1019: for (i=0; i < loRa.maxChannels; i++)
 15594  004294  6B63               	clrf	UpdateDataRange@i& (0+255),b
 15595  004296  D023               	goto	l13216
 15596  004298                     l13204:
 15597                           
 15598                           ; BSR set to: 0
 15599                           ;lorawan_eu.c: 1020: {
 15600                           ;lorawan_eu.c: 1021: if ( (Channels[i].dataRange.min < loRa.minDataRate) && (Channels[i]
      +                          .status == 1) )
 15601  004298  5163               	movf	UpdateDataRange@i& (0+255),w,b
 15602  00429A  D830               	call	PL6	;call to abstracted procedure
 15603  00429C  50DF               	movf	223,w,c
 15604  00429E  0B0F               	andlw	15
 15605  0042A0  0100               	movlb	0	; () banked
 15606  0042A2  6F61               	movwf	??_UpdateDataRange& (0+255),b
 15607  0042A4  0102               	movlb	2	; () banked
 15608  0042A6  51EB               	movf	(_loRa+235)& (0+255),w,b
 15609  0042A8  0100               	movlb	0	; () banked
 15610  0042AA  5D61               	subwf	??_UpdateDataRange& (0+255),w,b
 15611  0042AC  E207               	bc	l1368
 15612                           
 15613                           ; BSR set to: 0
 15614  0042AE  5163               	movf	UpdateDataRange@i& (0+255),w,b
 15615  0042B0  D82D               	call	PL12	;call to abstracted procedure
 15616  0042B2  E104               	bnz	l1368
 15617                           
 15618                           ; BSR set to: 0
 15619                           ;lorawan_eu.c: 1022: {
 15620                           ;lorawan_eu.c: 1023: loRa.minDataRate = Channels[i].dataRange.min;
 15621  0042B4  5163               	movf	UpdateDataRange@i& (0+255),w,b
 15622  0042B6  D822               	call	PL6	;call to abstracted procedure
 15623  0042B8  ECB2  F01D         	call	PL326	;call to abstracted procedure
 15624  0042BC                     l1368:
 15625                           
 15626                           ;lorawan_eu.c: 1024: }
 15627                           ;lorawan_eu.c: 1025: if ( (Channels[i].dataRange.max > loRa.maxDataRate) && (Channels[i]
      +                          .status == 1) )
 15628  0042BC  0100               	movlb	0	; () banked
 15629  0042BE  5163               	movf	UpdateDataRange@i& (0+255),w,b
 15630  0042C0  D81D               	call	PL6	;call to abstracted procedure
 15631  0042C2  ECB7  F01D         	call	PL440	;call to abstracted procedure
 15632  0042C6  61EC               	cpfslt	(_loRa+236)& (0+255),b
 15633  0042C8  D008               	goto	l13214
 15634                           
 15635                           ; BSR set to: 2
 15636  0042CA  0100               	movlb	0	; () banked
 15637  0042CC  5163               	movf	UpdateDataRange@i& (0+255),w,b
 15638  0042CE  D81E               	call	PL12	;call to abstracted procedure
 15639  0042D0  E104               	bnz	l13214
 15640                           
 15641                           ; BSR set to: 0
 15642                           ;lorawan_eu.c: 1026: {
 15643                           ;lorawan_eu.c: 1027: loRa.maxDataRate = Channels[i].dataRange.max;
 15644  0042D2  5163               	movf	UpdateDataRange@i& (0+255),w,b
 15645  0042D4  D813               	call	PL6	;call to abstracted procedure
 15646  0042D6  ECAD  F01D         	call	PL322	;call to abstracted procedure
 15647  0042DA                     l13214:
 15648  0042DA  0100               	movlb	0	; () banked
 15649  0042DC  2B63               	incf	UpdateDataRange@i& (0+255),f,b
 15650  0042DE                     l13216:
 15651                           
 15652                           ; BSR set to: 0
 15653  0042DE  0102               	movlb	2	; () banked
 15654  0042E0  51ED               	movf	(_loRa+237)& (0+255),w,b
 15655  0042E2  0100               	movlb	0	; () banked
 15656  0042E4  5D63               	subwf	UpdateDataRange@i& (0+255),w,b
 15657  0042E6  E3D8               	bnc	l13204
 15658                           
 15659                           ; BSR set to: 0
 15660                           ;lorawan_eu.c: 1028: }
 15661                           ;lorawan_eu.c: 1029: }
 15662                           ;lorawan_eu.c: 1031: if (loRa.currentDataRate > loRa.maxDataRate)
 15663  0042E8  0102               	movlb	2	; () banked
 15664  0042EA  51DF               	movf	(_loRa+223)& (0+255),w,b
 15665  0042EC  5DEC               	subwf	(_loRa+236)& (0+255),w,b
 15666  0042EE  E302 EFA7  F01D    	bc	PL302
 15667                           
 15668                           ; BSR set to: 2
 15669                           ;lorawan_eu.c: 1032: {
 15670                           ;lorawan_eu.c: 1033: loRa.currentDataRate = loRa.maxDataRate;
 15671  0042F4  C2EC  F2DF         	movff	_loRa+236,_loRa+223
 15672  0042F8                     l13222:
 15673                           
 15674                           ; BSR set to: 2
 15675                           ;lorawan_eu.c: 1034: }
 15676                           ;lorawan_eu.c: 1036: if (loRa.currentDataRate < loRa.minDataRate)
 15677                           
 15678                           ; BSR set to: 2
 15679                           ;lorawan_eu.c: 1037: {
 15680                           ;lorawan_eu.c: 1038: loRa.currentDataRate = loRa.minDataRate;
 15681                           
 15682                           ; BSR set to: 2
 15683  0042F8  EFA7  F01D         	goto	PL302	;call to abstracted procedure
 15684  0042FC                     __end_of_UpdateDataRange:
 15685                           	opt stack 0
 15686  0042FC                     PL6:
 15687                           	opt stack 12
 15688  0042FC  0D0E               	mullw	14
 15689  0042FE  0E05               	movlw	low (_Channels+5)
 15690  004300  24F3               	addwf	prodl,w,c
 15691  004302  6ED9               	movwf	fsr2l,c
 15692  004304  0E04               	movlw	high (_Channels+5)
 15693  004306  20F4               	addwfc	prodh,w,c
 15694  004308  6EDA               	movwf	fsr2h,c
 15695  00430A  0012               	return	
 15696  00430C                     __end_ofPL6:
 15697                           	opt stack 0
 15698  00430C                     PL12:
 15699                           	opt stack 17
 15700  00430C  0D0E               	mullw	14
 15701  00430E  0E04               	movlw	low (_Channels+4)
 15702  004310  24F3               	addwf	prodl,w,c
 15703  004312  6ED9               	movwf	fsr2l,c
 15704  004314  0E04               	movlw	high (_Channels+4)
 15705  004316  20F4               	addwfc	prodh,w,c
 15706  004318  6EDA               	movwf	fsr2h,c
 15707  00431A  04DE               	decf	postinc2,w,c
 15708  00431C  0012               	return	
 15709  00431E                     __end_ofPL12:
 15710                           	opt stack 0
 15711                           tosu	equ	0xFFF
 15712                           tosh	equ	0xFFE
 15713                           tosl	equ	0xFFD
 15714                           pclath	equ	0xFFA
 15715                           tblptru	equ	0xFF8
 15716                           tblptrh	equ	0xFF7
 15717                           tblptrl	equ	0xFF6
 15718                           tablat	equ	0xFF5
 15719                           prodh	equ	0xFF4
 15720                           prodl	equ	0xFF3
 15721                           intcon	equ	0xFF2
 15722                           indf0	equ	0xFEF
 15723                           postinc0	equ	0xFEE
 15724                           plusw0	equ	0xFEB
 15725                           fsr0h	equ	0xFEA
 15726                           fsr0l	equ	0xFE9
 15727                           wreg	equ	0xFE8
 15728                           postinc1	equ	0xFE6
 15729                           postdec1	equ	0xFE5
 15730                           plusw1	equ	0xFE3
 15731                           fsr1h	equ	0xFE2
 15732                           fsr1l	equ	0xFE1
 15733                           indf2	equ	0xFDF
 15734                           postinc2	equ	0xFDE
 15735                           postdec2	equ	0xFDD
 15736                           plusw2	equ	0xFDB
 15737                           fsr2h	equ	0xFDA
 15738                           fsr2l	equ	0xFD9
 15739                           status	equ	0xFD8
 15740                           
 15741 ;; *************** function _LORAWAN_SetChannelIdStatus *****************
 15742 ;; Defined at:
 15743 ;;		line 282 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 15744 ;; Parameters:    Size  Location     Type
 15745 ;;  channelId       1    wreg     unsigned char 
 15746 ;;  statusNew       1    4[BANK0 ] unsigned char 
 15747 ;; Auto vars:     Size  Location     Type
 15748 ;;  channelId       1    6[BANK0 ] unsigned char 
 15749 ;;  result          1    0        enum E17413
 15750 ;; Return value:  Size  Location     Type
 15751 ;;                  1    wreg      enum E17413
 15752 ;; Registers used:
 15753 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15754 ;; Tracked objects:
 15755 ;;		On entry : 3F/0
 15756 ;;		On exit  : 3D/0
 15757 ;;		Unchanged: 0/0
 15758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15759 ;;      Params:         0       1       0       0       0       0       0       0       0
 15760 ;;      Locals:         0       2       0       0       0       0       0       0       0
 15761 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15762 ;;      Totals:         0       3       0       0       0       0       0       0       0
 15763 ;;Total ram usage:        3 bytes
 15764 ;; Hardware stack levels used:    1
 15765 ;; Hardware stack levels required when called:    8
 15766 ;; This function calls:
 15767 ;;		_UpdateChannelIdStatus
 15768 ;;		_ValidateChannelId
 15769 ;; This function is called by:
 15770 ;;		_ExecuteNewChannel
 15771 ;;		_UpdateCfList
 15772 ;; This function uses a non-reentrant model
 15773 ;;
 15774                           
 15775                           	psect	text77
 15776  005A22                     __ptext77:
 15777                           	opt stack 0
 15778  005A22                     _LORAWAN_SetChannelIdStatus:
 15779                           	opt stack 17
 15780                           
 15781                           ; BSR set to: 2
 15782                           ;incstack = 0
 15783                           ;LORAWAN_SetChannelIdStatus@channelId stored from wreg
 15784  005A22  6F66               	movwf	LORAWAN_SetChannelIdStatus@channelId& (0+255),b
 15785                           
 15786                           ;lorawan_eu.c: 287: if (ValidateChannelId (channelId, 1) != OK)
 15787  005A24  0E01               	movlw	1
 15788  005A26  0100               	movlb	0	; () banked
 15789  005A28  6F60               	movwf	ValidateChannelId@allowedForDefaultChannels& (0+255),b
 15790  005A2A  5166               	movf	LORAWAN_SetChannelIdStatus@channelId& (0+255),w,b
 15791  005A2C  EC22  F02F         	call	_ValidateChannelId
 15792  005A30  0900               	iorlw	0
 15793  005A32  E001               	bz	l13232
 15794                           
 15795                           ; BSR set to: 0
 15796                           ;lorawan_eu.c: 290: }
 15797  005A34  0012               	return	
 15798  005A36                     l13232:
 15799                           
 15800                           ; BSR set to: 0
 15801                           ;lorawan_eu.c: 292: else
 15802                           ;lorawan_eu.c: 293: {
 15803                           ;lorawan_eu.c: 294: if ( (Channels[channelId].parametersDefined & (0X01 | 0X02 | 0x04) )
      +                           == (0X01 | 0X02 | 0x04) )
 15804  005A36  5166               	movf	LORAWAN_SetChannelIdStatus@channelId& (0+255),w,b
 15805  005A38  EC7A  F02D         	call	PL68	;call to abstracted procedure
 15806  005A3C  50DF               	movf	indf2,w,c
 15807  005A3E  0B07               	andlw	7
 15808  005A40  0A07               	xorlw	7
 15809  005A42  A4D8               	btfss	status,2,c
 15810  005A44  0012               	return	
 15811                           
 15812                           ; BSR set to: 0
 15813                           ;lorawan_eu.c: 295: {
 15814                           ;lorawan_eu.c: 296: UpdateChannelIdStatus (channelId, statusNew);
 15815  005A46  C064  F060         	movff	LORAWAN_SetChannelIdStatus@statusNew,UpdateChannelIdStatus@statusNew
 15816  005A4A  5166               	movf	LORAWAN_SetChannelIdStatus@channelId& (0+255),w,b
 15817  005A4C  EF57  F01D         	goto	_UpdateChannelIdStatus
 15818  005A50                     __end_of_LORAWAN_SetChannelIdStatus:
 15819                           	opt stack 0
 15820                           tosu	equ	0xFFF
 15821                           tosh	equ	0xFFE
 15822                           tosl	equ	0xFFD
 15823                           pclath	equ	0xFFA
 15824                           tblptru	equ	0xFF8
 15825                           tblptrh	equ	0xFF7
 15826                           tblptrl	equ	0xFF6
 15827                           tablat	equ	0xFF5
 15828                           prodh	equ	0xFF4
 15829                           prodl	equ	0xFF3
 15830                           intcon	equ	0xFF2
 15831                           indf0	equ	0xFEF
 15832                           postinc0	equ	0xFEE
 15833                           plusw0	equ	0xFEB
 15834                           fsr0h	equ	0xFEA
 15835                           fsr0l	equ	0xFE9
 15836                           wreg	equ	0xFE8
 15837                           postinc1	equ	0xFE6
 15838                           postdec1	equ	0xFE5
 15839                           plusw1	equ	0xFE3
 15840                           fsr1h	equ	0xFE2
 15841                           fsr1l	equ	0xFE1
 15842                           indf2	equ	0xFDF
 15843                           postinc2	equ	0xFDE
 15844                           postdec2	equ	0xFDD
 15845                           plusw2	equ	0xFDB
 15846                           fsr2h	equ	0xFDA
 15847                           fsr2l	equ	0xFD9
 15848                           status	equ	0xFD8
 15849                           
 15850 ;; *************** function _ValidateChannelId *****************
 15851 ;; Defined at:
 15852 ;;		line 1125 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 15853 ;; Parameters:    Size  Location     Type
 15854 ;;  channelId       1    wreg     unsigned char 
 15855 ;;  allowedForDe    1    0[BANK0 ] unsigned char 
 15856 ;; Auto vars:     Size  Location     Type
 15857 ;;  channelId       1    2[BANK0 ] unsigned char 
 15858 ;;  result          1    1[BANK0 ] enum E17413
 15859 ;; Return value:  Size  Location     Type
 15860 ;;                  1    wreg      enum E17413
 15861 ;; Registers used:
 15862 ;;		wreg, status,2, status,0
 15863 ;; Tracked objects:
 15864 ;;		On entry : 3F/0
 15865 ;;		On exit  : 3F/0
 15866 ;;		Unchanged: 0/0
 15867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15868 ;;      Params:         0       1       0       0       0       0       0       0       0
 15869 ;;      Locals:         0       2       0       0       0       0       0       0       0
 15870 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15871 ;;      Totals:         0       3       0       0       0       0       0       0       0
 15872 ;;Total ram usage:        3 bytes
 15873 ;; Hardware stack levels used:    1
 15874 ;; Hardware stack levels required when called:    7
 15875 ;; This function calls:
 15876 ;;		Nothing
 15877 ;; This function is called by:
 15878 ;;		_LORAWAN_SetChannelIdStatus
 15879 ;;		_ExecuteNewChannel
 15880 ;; This function uses a non-reentrant model
 15881 ;;
 15882                           
 15883                           	psect	text78
 15884  005E44                     __ptext78:
 15885                           	opt stack 0
 15886  005E44                     _ValidateChannelId:
 15887                           	opt stack 17
 15888                           
 15889                           ;incstack = 0
 15890                           ;ValidateChannelId@channelId stored from wreg
 15891  005E44  6F62               	movwf	ValidateChannelId@channelId& (0+255),b
 15892                           
 15893                           ;lorawan_eu.c: 1127: LorawanError_t result = OK;
 15894  005E46  0100               	movlb	0	; () banked
 15895  005E48  6B61               	clrf	ValidateChannelId@result& (0+255),b
 15896                           
 15897                           ; BSR set to: 0
 15898                           ;lorawan_eu.c: 1129: if ( (channelId >= 16) || ( (allowedForDefaultChannels == 0) && (ch
      +                          annelId < 3) ) )
 15899  005E4A  0E10               	movlw	16
 15900  005E4C  6162               	cpfslt	ValidateChannelId@channelId& (0+255),b
 15901  005E4E  D005               	goto	l12534
 15902                           
 15903                           ; BSR set to: 0
 15904  005E50  5160               	movf	ValidateChannelId@allowedForDefaultChannels& (0+255),w,b
 15905  005E52  E105               	bnz	l1408
 15906                           
 15907                           ; BSR set to: 0
 15908  005E54  0E03               	movlw	3
 15909  005E56  6162               	cpfslt	ValidateChannelId@channelId& (0+255),b
 15910  005E58  D002               	goto	l1408
 15911  005E5A                     l12534:
 15912                           
 15913                           ; BSR set to: 0
 15914                           ;lorawan_eu.c: 1130: {
 15915                           ;lorawan_eu.c: 1131: result = INVALID_PARAMETER ;
 15916  005E5A  0E03               	movlw	3
 15917  005E5C  6F61               	movwf	ValidateChannelId@result& (0+255),b
 15918  005E5E                     l1408:
 15919                           
 15920                           ; BSR set to: 0
 15921                           ;lorawan_eu.c: 1132: }
 15922                           ;lorawan_eu.c: 1134: return result;
 15923  005E5E  5161               	movf	ValidateChannelId@result& (0+255),w,b
 15924                           
 15925                           ; BSR set to: 0
 15926  005E60  0012               	return		;funcret
 15927  005E62                     __end_of_ValidateChannelId:
 15928                           	opt stack 0
 15929                           tosu	equ	0xFFF
 15930                           tosh	equ	0xFFE
 15931                           tosl	equ	0xFFD
 15932                           pclath	equ	0xFFA
 15933                           tblptru	equ	0xFF8
 15934                           tblptrh	equ	0xFF7
 15935                           tblptrl	equ	0xFF6
 15936                           tablat	equ	0xFF5
 15937                           prodh	equ	0xFF4
 15938                           prodl	equ	0xFF3
 15939                           intcon	equ	0xFF2
 15940                           indf0	equ	0xFEF
 15941                           postinc0	equ	0xFEE
 15942                           plusw0	equ	0xFEB
 15943                           fsr0h	equ	0xFEA
 15944                           fsr0l	equ	0xFE9
 15945                           wreg	equ	0xFE8
 15946                           postinc1	equ	0xFE6
 15947                           postdec1	equ	0xFE5
 15948                           plusw1	equ	0xFE3
 15949                           fsr1h	equ	0xFE2
 15950                           fsr1l	equ	0xFE1
 15951                           indf2	equ	0xFDF
 15952                           postinc2	equ	0xFDE
 15953                           postdec2	equ	0xFDD
 15954                           plusw2	equ	0xFDB
 15955                           fsr2h	equ	0xFDA
 15956                           fsr2l	equ	0xFD9
 15957                           status	equ	0xFD8
 15958                           
 15959 ;; *************** function _ExecuteLinkCheck *****************
 15960 ;; Defined at:
 15961 ;;		line 1652 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 15962 ;; Parameters:    Size  Location     Type
 15963 ;;  ptr             2    0[BANK0 ] PTR unsigned char 
 15964 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 15965 ;; Auto vars:     Size  Location     Type
 15966 ;;		None
 15967 ;; Return value:  Size  Location     Type
 15968 ;;                  2    0[BANK0 ] PTR unsigned char 
 15969 ;; Registers used:
 15970 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15971 ;; Tracked objects:
 15972 ;;		On entry : 3F/0
 15973 ;;		On exit  : 3F/0
 15974 ;;		Unchanged: 0/0
 15975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15976 ;;      Params:         0       2       0       0       0       0       0       0       0
 15977 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15978 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15979 ;;      Totals:         0       2       0       0       0       0       0       0       0
 15980 ;;Total ram usage:        2 bytes
 15981 ;; Hardware stack levels used:    1
 15982 ;; Hardware stack levels required when called:    7
 15983 ;; This function calls:
 15984 ;;		Nothing
 15985 ;; This function is called by:
 15986 ;;		_MacExecuteCommands
 15987 ;; This function uses a non-reentrant model
 15988 ;;
 15989                           
 15990                           	psect	text79
 15991  005B04                     __ptext79:
 15992                           	opt stack 0
 15993  005B04                     _ExecuteLinkCheck:
 15994                           	opt stack 0
 15995                           
 15996                           ; BSR set to: 0
 15997                           ;lorawan.c: 1654: loRa.linkCheckMargin = *(ptr++);
 15998                           
 15999                           ; BSR set to: 0
 16000                           ;incstack = 0
 16001  005B04  D80E               	call	PL304	;call to abstracted procedure
 16002  005B06  6FDD               	movwf	(_loRa+221)& (0+255),b
 16003                           
 16004                           ; BSR set to: 2
 16005  005B08  0100               	movlb	0	; () banked
 16006  005B0A  4B60               	infsnz	ExecuteLinkCheck@ptr& (0+255),f,b
 16007  005B0C  2B61               	incf	(ExecuteLinkCheck@ptr+1)& (0+255),f,b
 16008                           
 16009                           ; BSR set to: 0
 16010                           ;lorawan.c: 1655: loRa.linkCheckGwCnt = *(ptr++);
 16011  005B0E  D809               	call	PL304	;call to abstracted procedure
 16012  005B10  6FDE               	movwf	(_loRa+222)& (0+255),b
 16013  005B12  0100               	movlb	0	; () banked
 16014  005B14  4B60               	infsnz	ExecuteLinkCheck@ptr& (0+255),f,b
 16015  005B16  2B61               	incf	(ExecuteLinkCheck@ptr+1)& (0+255),f,b
 16016                           
 16017                           ; BSR set to: 0
 16018                           ;lorawan.c: 1656: return ptr;
 16019  005B18  C060  F060         	movff	ExecuteLinkCheck@ptr,?_ExecuteLinkCheck
 16020  005B1C  C061  F061         	movff	ExecuteLinkCheck@ptr+1,?_ExecuteLinkCheck+1
 16021                           
 16022                           ; BSR set to: 0
 16023  005B20  0012               	return		;funcret
 16024  005B22                     __end_of_ExecuteLinkCheck:
 16025                           	opt stack 0
 16026  005B22                     PL304:
 16027                           	opt stack 18
 16028  005B22  C060  FFD9         	movff	ExecuteLinkCheck@ptr,fsr2l
 16029  005B26  C061  FFDA         	movff	ExecuteLinkCheck@ptr+1,fsr2h
 16030  005B2A  50DF               	movf	indf2,w,c
 16031  005B2C  0102               	movlb	2	; () banked
 16032  005B2E  0012               	return	
 16033  005B30                     __end_ofPL304:
 16034                           	opt stack 0
 16035                           tosu	equ	0xFFF
 16036                           tosh	equ	0xFFE
 16037                           tosl	equ	0xFFD
 16038                           pclath	equ	0xFFA
 16039                           tblptru	equ	0xFF8
 16040                           tblptrh	equ	0xFF7
 16041                           tblptrl	equ	0xFF6
 16042                           tablat	equ	0xFF5
 16043                           prodh	equ	0xFF4
 16044                           prodl	equ	0xFF3
 16045                           intcon	equ	0xFF2
 16046                           indf0	equ	0xFEF
 16047                           postinc0	equ	0xFEE
 16048                           plusw0	equ	0xFEB
 16049                           fsr0h	equ	0xFEA
 16050                           fsr0l	equ	0xFE9
 16051                           wreg	equ	0xFE8
 16052                           postinc1	equ	0xFE6
 16053                           postdec1	equ	0xFE5
 16054                           plusw1	equ	0xFE3
 16055                           fsr1h	equ	0xFE2
 16056                           fsr1l	equ	0xFE1
 16057                           indf2	equ	0xFDF
 16058                           postinc2	equ	0xFDE
 16059                           postdec2	equ	0xFDD
 16060                           plusw2	equ	0xFDB
 16061                           fsr2h	equ	0xFDA
 16062                           fsr2l	equ	0xFD9
 16063                           status	equ	0xFD8
 16064                           
 16065 ;; *************** function _ExecuteLinkAdr *****************
 16066 ;; Defined at:
 16067 ;;		line 613 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16068 ;; Parameters:    Size  Location     Type
 16069 ;;  ptr             2   13[BANK0 ] PTR unsigned char 
 16070 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 16071 ;; Auto vars:     Size  Location     Type
 16072 ;;  redundancy      2   19[BANK0 ] PTR struct .
 16073 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 16074 ;;  channelMask     2   16[BANK0 ] unsigned int 
 16075 ;;  dataRate        1   21[BANK0 ] unsigned char 
 16076 ;;  txPower         1   18[BANK0 ] unsigned char 
 16077 ;; Return value:  Size  Location     Type
 16078 ;;                  2   13[BANK0 ] PTR unsigned char 
 16079 ;; Registers used:
 16080 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16081 ;; Tracked objects:
 16082 ;;		On entry : 3F/0
 16083 ;;		On exit  : 3F/2
 16084 ;;		Unchanged: 0/0
 16085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16086 ;;      Params:         0       2       0       0       0       0       0       0       0
 16087 ;;      Locals:         0       6       0       0       0       0       0       0       0
 16088 ;;      Temps:          0       1       0       0       0       0       0       0       0
 16089 ;;      Totals:         0       9       0       0       0       0       0       0       0
 16090 ;;Total ram usage:        9 bytes
 16091 ;; Hardware stack levels used:    1
 16092 ;; Hardware stack levels required when called:   10
 16093 ;; This function calls:
 16094 ;;		_EnableChannels
 16095 ;;		_UpdateCurrentDataRate
 16096 ;;		_UpdateTxPower
 16097 ;;		_ValidateChannelMask
 16098 ;;		_ValidateChannelMaskCntl
 16099 ;;		_ValidateDataRate
 16100 ;;		_ValidateTxPower
 16101 ;; This function is called by:
 16102 ;;		_MacExecuteCommands
 16103 ;; This function uses a non-reentrant model
 16104 ;;
 16105                           
 16106                           	psect	text80
 16107  002A7A                     __ptext80:
 16108                           	opt stack 0
 16109  002A7A                     _ExecuteLinkAdr:
 16110                           	opt stack 0
 16111                           
 16112                           ; BSR set to: 0
 16113                           ;lorawan_eu.c: 615: uint8_t txPower, dataRate;
 16114                           ;lorawan_eu.c: 616: uint16_t channelMask;
 16115                           ;lorawan_eu.c: 618: txPower = *(ptr) & 0x0F;
 16116                           
 16117                           ; BSR set to: 0
 16118                           ;incstack = 0
 16119  002A7A  D89A               	call	PL320	;call to abstracted procedure
 16120  002A7C  50DF               	movf	indf2,w,c
 16121  002A7E  0B0F               	andlw	15
 16122  002A80  6F72               	movwf	ExecuteLinkAdr@txPower& (0+255),b
 16123                           
 16124                           ;lorawan_eu.c: 619: dataRate = ( *(ptr) & 0xF0 ) >> (4);
 16125  002A82  D896               	call	PL320	;call to abstracted procedure
 16126  002A84  50DF               	movf	indf2,w,c
 16127  002A86  6F6F               	movwf	??_ExecuteLinkAdr& (0+255),b
 16128  002A88  396F               	swapf	??_ExecuteLinkAdr& (0+255),w,b
 16129  002A8A  0B0F               	andlw	15
 16130  002A8C  6F75               	movwf	ExecuteLinkAdr@dataRate& (0+255),b
 16131                           
 16132                           ; BSR set to: 0
 16133                           ;lorawan_eu.c: 620: ptr++;
 16134  002A8E  4B6D               	infsnz	ExecuteLinkAdr@ptr& (0+255),f,b
 16135  002A90  2B6E               	incf	(ExecuteLinkAdr@ptr+1)& (0+255),f,b
 16136                           
 16137                           ; BSR set to: 0
 16138                           ;lorawan_eu.c: 621: channelMask = (*((uint16_t*)ptr));
 16139  002A92  D88E               	call	PL320	;call to abstracted procedure
 16140  002A94  CFDE F070          	movff	postinc2,ExecuteLinkAdr@channelMask
 16141  002A98  CFDD F071          	movff	postdec2,ExecuteLinkAdr@channelMask+1
 16142                           
 16143                           ; BSR set to: 0
 16144                           ;lorawan_eu.c: 622: ptr = ptr + sizeof (channelMask);
 16145  002A9C  0E02               	movlw	2
 16146  002A9E  276D               	addwf	ExecuteLinkAdr@ptr& (0+255),f,b
 16147  002AA0  0E00               	movlw	0
 16148  002AA2  236E               	addwfc	(ExecuteLinkAdr@ptr+1)& (0+255),f,b
 16149                           
 16150                           ; BSR set to: 0
 16151                           ;lorawan_eu.c: 623: Redundancy_t *redundancy;
 16152                           ;lorawan_eu.c: 624: redundancy = (Redundancy_t*)(ptr++);
 16153  002AA4  C06D  F073         	movff	ExecuteLinkAdr@ptr,ExecuteLinkAdr@redundancy
 16154  002AA8  C06E  F074         	movff	ExecuteLinkAdr@ptr+1,ExecuteLinkAdr@redundancy+1
 16155                           
 16156                           ; BSR set to: 0
 16157  002AAC  4B6D               	infsnz	ExecuteLinkAdr@ptr& (0+255),f,b
 16158  002AAE  2B6E               	incf	(ExecuteLinkAdr@ptr+1)& (0+255),f,b
 16159                           
 16160                           ; BSR set to: 0
 16161                           ;lorawan_eu.c: 626: if (1 == loRa.macStatus.adr)
 16162  002AB0  0102               	movlb	2	; () banked
 16163  002AB2  AD02               	btfss	(_loRa+2)& (0+255),6,b
 16164  002AB4  D062               	goto	l13622
 16165                           
 16166                           ; BSR set to: 2
 16167                           ;lorawan_eu.c: 627: {
 16168                           ;lorawan_eu.c: 628: if ( (ValidateChannelMaskCntl(redundancy->chMaskCntl) == OK) && (Val
      +                          idateChannelMask(channelMask) == OK) )
 16169  002AB6  D877               	call	PL268	;call to abstracted procedure
 16170  002AB8  0100               	movlb	0	; () banked
 16171  002ABA  38DF               	swapf	223,w,c
 16172  002ABC  0B07               	andlw	7
 16173  002ABE  ECD3  F02F         	call	_ValidateChannelMaskCntl
 16174  002AC2  0900               	iorlw	0
 16175  002AC4  E10C               	bnz	l13590
 16176                           
 16177                           ; BSR set to: 0
 16178  002AC6  C070  F060         	movff	ExecuteLinkAdr@channelMask,ValidateChannelMask@channelMask
 16179  002ACA  C071  F061         	movff	ExecuteLinkAdr@channelMask+1,ValidateChannelMask@channelMask+1
 16180  002ACE  EC28  F02D         	call	_ValidateChannelMask	;wreg free
 16181  002AD2  0900               	iorlw	0
 16182  002AD4  E104               	bnz	l13590
 16183                           
 16184                           ; BSR set to: 0
 16185                           ;lorawan_eu.c: 629: {
 16186                           ;lorawan_eu.c: 630: loRa.macCommands[loRa.crtMacCmdIndex].channelMaskAck = 1;
 16187  002AD6  0102               	movlb	2	; () banked
 16188  002AD8  51A7               	movf	(_loRa+167)& (0+255),w,b
 16189  002ADA  D85D               	call	PL2	;call to abstracted procedure
 16190  002ADC  80DF               	bsf	indf2,0,c
 16191  002ADE                     l13590:
 16192                           
 16193                           ;lorawan_eu.c: 631: }
 16194                           ;lorawan_eu.c: 633: if ( (ValidateDataRate (dataRate) == OK) && (dataRate >= loRa.minDat
      +                          aRate) && (dataRate <= loRa.maxDataRate) )
 16195  002ADE  0100               	movlb	0	; () banked
 16196  002AE0  5175               	movf	ExecuteLinkAdr@dataRate& (0+255),w,b
 16197  002AE2  EC39  F030         	call	_ValidateDataRate
 16198  002AE6  0900               	iorlw	0
 16199  002AE8  E10C               	bnz	l13598
 16200                           
 16201                           ; BSR set to: 0
 16202  002AEA  0102               	movlb	2	; () banked
 16203  002AEC  51EB               	movf	(_loRa+235)& (0+255),w,b
 16204  002AEE  0100               	movlb	0	; () banked
 16205  002AF0  5D75               	subwf	ExecuteLinkAdr@dataRate& (0+255),w,b
 16206  002AF2  E307               	bnc	l13598
 16207                           
 16208                           ; BSR set to: 0
 16209  002AF4  5175               	movf	ExecuteLinkAdr@dataRate& (0+255),w,b
 16210  002AF6  0102               	movlb	2	; () banked
 16211  002AF8  5DEC               	subwf	(_loRa+236)& (0+255),w,b
 16212  002AFA  E303               	bnc	l13598
 16213                           
 16214                           ; BSR set to: 2
 16215                           ;lorawan_eu.c: 634: {
 16216                           ;lorawan_eu.c: 635: loRa.macCommands[loRa.crtMacCmdIndex].dataRateAck = 1;
 16217  002AFC  51A7               	movf	(_loRa+167)& (0+255),w,b
 16218  002AFE  D84B               	call	PL2	;call to abstracted procedure
 16219  002B00  82DF               	bsf	indf2,1,c
 16220  002B02                     l13598:
 16221                           
 16222                           ;lorawan_eu.c: 636: }
 16223                           ;lorawan_eu.c: 638: if (ValidateTxPower (txPower) == OK)
 16224  002B02  0100               	movlb	0	; () banked
 16225  002B04  5172               	movf	ExecuteLinkAdr@txPower& (0+255),w,b
 16226  002B06  ECC0  F02E         	call	_ValidateTxPower
 16227  002B0A  0900               	iorlw	0
 16228  002B0C  E104               	bnz	l1263
 16229                           
 16230                           ; BSR set to: 0
 16231                           ;lorawan_eu.c: 639: {
 16232                           ;lorawan_eu.c: 640: loRa.macCommands[loRa.crtMacCmdIndex].powerAck = 1;
 16233  002B0E  0102               	movlb	2	; () banked
 16234  002B10  51A7               	movf	(_loRa+167)& (0+255),w,b
 16235  002B12  D841               	call	PL2	;call to abstracted procedure
 16236  002B14  84DF               	bsf	indf2,2,c
 16237  002B16                     l1263:
 16238                           
 16239                           ;lorawan_eu.c: 641: }
 16240                           ;lorawan_eu.c: 643: if ( (loRa.macCommands[loRa.crtMacCmdIndex].powerAck == 1) && (loRa.
      +                          macCommands[loRa.crtMacCmdIndex].dataRateAck == 1) && (loRa.macCommands[loRa.crtMacCmdIn
      +                          dex].channelMaskAck == 1) )
 16241  002B16  0102               	movlb	2	; () banked
 16242  002B18  51A7               	movf	(_loRa+167)& (0+255),w,b
 16243  002B1A  D83D               	call	PL2	;call to abstracted procedure
 16244  002B1C  A4DF               	btfss	indf2,2,c
 16245  002B1E  D036               	goto	l13624
 16246                           
 16247                           ; BSR set to: 2
 16248  002B20  51A7               	movf	(_loRa+167)& (0+255),w,b
 16249  002B22  D839               	call	PL2	;call to abstracted procedure
 16250  002B24  A2DF               	btfss	indf2,1,c
 16251  002B26  D032               	goto	l13624
 16252                           
 16253                           ; BSR set to: 2
 16254  002B28  51A7               	movf	(_loRa+167)& (0+255),w,b
 16255  002B2A  D835               	call	PL2	;call to abstracted procedure
 16256  002B2C  A0DF               	btfss	indf2,0,c
 16257  002B2E  D02E               	goto	l13624
 16258                           
 16259                           ; BSR set to: 2
 16260                           ;lorawan_eu.c: 644: {
 16261                           ;lorawan_eu.c: 645: EnableChannels (channelMask, redundancy->chMaskCntl);
 16262  002B30  C070  F06A         	movff	ExecuteLinkAdr@channelMask,EnableChannels@channelMask
 16263  002B34  C071  F06B         	movff	ExecuteLinkAdr@channelMask+1,EnableChannels@channelMask+1
 16264  002B38  D836               	call	PL268	;call to abstracted procedure
 16265  002B3A  0100               	movlb	0	; () banked
 16266  002B3C  38DF               	swapf	223,w,c
 16267  002B3E  0B07               	andlw	7
 16268  002B40  6F6C               	movwf	EnableChannels@channelMaskCntl& (0+255),b
 16269  002B42  EC19  F030         	call	_EnableChannels	;wreg free
 16270                           
 16271                           ; BSR set to: 0
 16272                           ;lorawan_eu.c: 647: UpdateTxPower (txPower);
 16273  002B46  5172               	movf	ExecuteLinkAdr@txPower& (0+255),w,b
 16274  002B48  ECE5  F030         	call	_UpdateTxPower
 16275                           
 16276                           ;lorawan_eu.c: 648: loRa.macStatus.txPowerModified = 1;
 16277  002B4C  0102               	movlb	2	; () banked
 16278  002B4E  8903               	bsf	(_loRa+3)& (0+255),4,b
 16279                           
 16280                           ; BSR set to: 2
 16281                           ;lorawan_eu.c: 649: UpdateCurrentDataRate (dataRate);
 16282  002B50  0100               	movlb	0	; () banked
 16283  002B52  5175               	movf	ExecuteLinkAdr@dataRate& (0+255),w,b
 16284  002B54  ECE9  F030         	call	_UpdateCurrentDataRate
 16285                           
 16286                           ;lorawan_eu.c: 651: if (redundancy->nbRep == 0)
 16287  002B58  D826               	call	PL268	;call to abstracted procedure
 16288  002B5A  0100               	movlb	0	; () banked
 16289  002B5C  50DF               	movf	223,w,c
 16290  002B5E  0B0F               	andlw	15
 16291  002B60  E103               	bnz	l13618
 16292                           
 16293                           ; BSR set to: 0
 16294                           ;lorawan_eu.c: 652: {
 16295                           ;lorawan_eu.c: 653: loRa.maxRepetitionsUnconfirmedUplink = 0;
 16296  002B62  0102               	movlb	2	; () banked
 16297  002B64  6BD6               	clrf	(_loRa+214)& (0+255),b
 16298                           
 16299                           ;lorawan_eu.c: 654: }
 16300  002B66  D007               	goto	l13620
 16301  002B68                     l13618:
 16302                           
 16303                           ; BSR set to: 0
 16304                           ;lorawan_eu.c: 655: else
 16305                           ;lorawan_eu.c: 656: {
 16306                           ;lorawan_eu.c: 657: loRa.maxRepetitionsUnconfirmedUplink = redundancy->nbRep - 1;
 16307  002B68  D81E               	call	PL268	;call to abstracted procedure
 16308  002B6A  50DF               	movf	223,w,c
 16309  002B6C  0B0F               	andlw	15
 16310  002B6E  6F6F               	movwf	??_ExecuteLinkAdr& (0+255),b
 16311  002B70  056F               	decf	??_ExecuteLinkAdr& (0+255),w,b
 16312  002B72  0102               	movlb	2	; () banked
 16313  002B74  6FD6               	movwf	(_loRa+214)& (0+255),b
 16314  002B76                     l13620:
 16315                           
 16316                           ; BSR set to: 2
 16317                           ;lorawan_eu.c: 658: }
 16318                           ;lorawan_eu.c: 659: loRa.macStatus.nbRepModified = 1;
 16319  002B76  8B03               	bsf	(_loRa+3)& (0+255),5,b
 16320  002B78  D009               	goto	l13624
 16321  002B7A                     l13622:
 16322                           
 16323                           ; BSR set to: 2
 16324                           ;lorawan_eu.c: 662: else
 16325                           ;lorawan_eu.c: 663: {
 16326                           ;lorawan_eu.c: 664: loRa.macCommands[loRa.crtMacCmdIndex].channelMaskAck = 0;
 16327  002B7A  51A7               	movf	(_loRa+167)& (0+255),w,b
 16328  002B7C  D80C               	call	PL2	;call to abstracted procedure
 16329  002B7E  90DF               	bcf	indf2,0,c
 16330                           
 16331                           ;lorawan_eu.c: 665: loRa.macCommands[loRa.crtMacCmdIndex].dataRateAck = 0;
 16332  002B80  51A7               	movf	(_loRa+167)& (0+255),w,b
 16333  002B82  D809               	call	PL2	;call to abstracted procedure
 16334  002B84  92DF               	bcf	indf2,1,c
 16335                           
 16336                           ;lorawan_eu.c: 666: loRa.macCommands[loRa.crtMacCmdIndex].powerAck = 0;
 16337  002B86  51A7               	movf	(_loRa+167)& (0+255),w,b
 16338  002B88  D806               	call	PL2	;call to abstracted procedure
 16339  002B8A  94DF               	bcf	indf2,2,c
 16340  002B8C                     l13624:
 16341                           
 16342                           ; BSR set to: 2
 16343                           ;lorawan_eu.c: 667: }
 16344                           ;lorawan_eu.c: 669: return ptr;
 16345  002B8C  C06D  F06D         	movff	ExecuteLinkAdr@ptr,?_ExecuteLinkAdr
 16346  002B90  C06E  F06E         	movff	ExecuteLinkAdr@ptr+1,?_ExecuteLinkAdr+1
 16347                           
 16348                           ; BSR set to: 2
 16349  002B94  0012               	return		;funcret
 16350  002B96                     __end_of_ExecuteLinkAdr:
 16351                           	opt stack 0
 16352  002B96                     PL2:
 16353                           	opt stack 15
 16354  002B96  0D02               	mullw	2
 16355  002B98  0EA9               	movlw	low (_loRa+169)
 16356  002B9A  24F3               	addwf	prodl,w,c
 16357  002B9C  6ED9               	movwf	fsr2l,c
 16358  002B9E  0E02               	movlw	high (_loRa+169)
 16359  002BA0  20F4               	addwfc	prodh,w,c
 16360  002BA2  6EDA               	movwf	fsr2h,c
 16361  002BA4  0012               	return	
 16362  002BA6                     __end_ofPL2:
 16363                           	opt stack 0
 16364  002BA6                     PL268:
 16365                           	opt stack 15
 16366  002BA6  C073  FFD9         	movff	ExecuteLinkAdr@redundancy,fsr2l
 16367  002BAA  C074  FFDA         	movff	ExecuteLinkAdr@redundancy+1,fsr2h
 16368  002BAE  0012               	return	
 16369  002BB0                     __end_ofPL268:
 16370                           	opt stack 0
 16371  002BB0                     PL320:
 16372                           	opt stack 15
 16373  002BB0  C06D  FFD9         	movff	ExecuteLinkAdr@ptr,fsr2l
 16374  002BB4  C06E  FFDA         	movff	ExecuteLinkAdr@ptr+1,fsr2h
 16375  002BB8  0012               	return	
 16376  002BBA                     __end_ofPL320:
 16377                           	opt stack 0
 16378                           tosu	equ	0xFFF
 16379                           tosh	equ	0xFFE
 16380                           tosl	equ	0xFFD
 16381                           pclath	equ	0xFFA
 16382                           tblptru	equ	0xFF8
 16383                           tblptrh	equ	0xFF7
 16384                           tblptrl	equ	0xFF6
 16385                           tablat	equ	0xFF5
 16386                           prodh	equ	0xFF4
 16387                           prodl	equ	0xFF3
 16388                           intcon	equ	0xFF2
 16389                           indf0	equ	0xFEF
 16390                           postinc0	equ	0xFEE
 16391                           plusw0	equ	0xFEB
 16392                           fsr0h	equ	0xFEA
 16393                           fsr0l	equ	0xFE9
 16394                           wreg	equ	0xFE8
 16395                           postinc1	equ	0xFE6
 16396                           postdec1	equ	0xFE5
 16397                           plusw1	equ	0xFE3
 16398                           fsr1h	equ	0xFE2
 16399                           fsr1l	equ	0xFE1
 16400                           indf2	equ	0xFDF
 16401                           postinc2	equ	0xFDE
 16402                           postdec2	equ	0xFDD
 16403                           plusw2	equ	0xFDB
 16404                           fsr2h	equ	0xFDA
 16405                           fsr2l	equ	0xFD9
 16406                           status	equ	0xFD8
 16407                           
 16408 ;; *************** function _ValidateTxPower *****************
 16409 ;; Defined at:
 16410 ;;		line 582 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16411 ;; Parameters:    Size  Location     Type
 16412 ;;  txPowerNew      1    wreg     unsigned char 
 16413 ;; Auto vars:     Size  Location     Type
 16414 ;;  txPowerNew      1    1[BANK0 ] unsigned char 
 16415 ;;  result          1    0[BANK0 ] enum E17413
 16416 ;; Return value:  Size  Location     Type
 16417 ;;                  1    wreg      enum E17354
 16418 ;; Registers used:
 16419 ;;		wreg, status,2, status,0
 16420 ;; Tracked objects:
 16421 ;;		On entry : 3F/0
 16422 ;;		On exit  : 3F/0
 16423 ;;		Unchanged: 0/0
 16424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16425 ;;      Params:         0       0       0       0       0       0       0       0       0
 16426 ;;      Locals:         0       2       0       0       0       0       0       0       0
 16427 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16428 ;;      Totals:         0       2       0       0       0       0       0       0       0
 16429 ;;Total ram usage:        2 bytes
 16430 ;; Hardware stack levels used:    1
 16431 ;; Hardware stack levels required when called:    7
 16432 ;; This function calls:
 16433 ;;		Nothing
 16434 ;; This function is called by:
 16435 ;;		_ExecuteLinkAdr
 16436 ;; This function uses a non-reentrant model
 16437 ;;
 16438                           
 16439                           	psect	text81
 16440  005D80                     __ptext81:
 16441                           	opt stack 0
 16442  005D80                     _ValidateTxPower:
 16443                           	opt stack 17
 16444                           
 16445                           ; BSR set to: 2
 16446                           ;incstack = 0
 16447                           ;ValidateTxPower@txPowerNew stored from wreg
 16448  005D80  6F61               	movwf	ValidateTxPower@txPowerNew& (0+255),b
 16449                           
 16450                           ;lorawan_eu.c: 584: LorawanError_t result = OK;
 16451  005D82  0100               	movlb	0	; () banked
 16452  005D84  6B60               	clrf	ValidateTxPower@result& (0+255),b
 16453                           
 16454                           ; BSR set to: 0
 16455                           ;lorawan_eu.c: 586: if (((ISM_EU868 == loRa.ismBand) && (0 == txPowerNew)) || (txPowerNe
      +                          w > 5))
 16456  005D86  0102               	movlb	2	; () banked
 16457  005D88  51A4               	movf	(_loRa+164)& (0+255),w,b
 16458  005D8A  E103               	bnz	l12738
 16459                           
 16460                           ; BSR set to: 2
 16461  005D8C  0100               	movlb	0	; () banked
 16462  005D8E  5161               	movf	ValidateTxPower@txPowerNew& (0+255),w,b
 16463  005D90  E004               	bz	l12740
 16464  005D92                     l12738:
 16465  005D92  0E05               	movlw	5
 16466  005D94  0100               	movlb	0	; () banked
 16467  005D96  6561               	cpfsgt	ValidateTxPower@txPowerNew& (0+255),b
 16468  005D98  D002               	goto	l1247
 16469  005D9A                     l12740:
 16470                           
 16471                           ; BSR set to: 0
 16472                           ;lorawan_eu.c: 587: {
 16473                           ;lorawan_eu.c: 588: result = INVALID_PARAMETER;
 16474  005D9A  0E03               	movlw	3
 16475  005D9C  6F60               	movwf	ValidateTxPower@result& (0+255),b
 16476  005D9E                     l1247:
 16477                           
 16478                           ; BSR set to: 0
 16479                           ;lorawan_eu.c: 589: }
 16480                           ;lorawan_eu.c: 591: return result;
 16481  005D9E  5160               	movf	ValidateTxPower@result& (0+255),w,b
 16482                           
 16483                           ; BSR set to: 0
 16484  005DA0  0012               	return		;funcret
 16485  005DA2                     __end_of_ValidateTxPower:
 16486                           	opt stack 0
 16487                           tosu	equ	0xFFF
 16488                           tosh	equ	0xFFE
 16489                           tosl	equ	0xFFD
 16490                           pclath	equ	0xFFA
 16491                           tblptru	equ	0xFF8
 16492                           tblptrh	equ	0xFF7
 16493                           tblptrl	equ	0xFF6
 16494                           tablat	equ	0xFF5
 16495                           prodh	equ	0xFF4
 16496                           prodl	equ	0xFF3
 16497                           intcon	equ	0xFF2
 16498                           indf0	equ	0xFEF
 16499                           postinc0	equ	0xFEE
 16500                           plusw0	equ	0xFEB
 16501                           fsr0h	equ	0xFEA
 16502                           fsr0l	equ	0xFE9
 16503                           wreg	equ	0xFE8
 16504                           postinc1	equ	0xFE6
 16505                           postdec1	equ	0xFE5
 16506                           plusw1	equ	0xFE3
 16507                           fsr1h	equ	0xFE2
 16508                           fsr1l	equ	0xFE1
 16509                           indf2	equ	0xFDF
 16510                           postinc2	equ	0xFDE
 16511                           postdec2	equ	0xFDD
 16512                           plusw2	equ	0xFDB
 16513                           fsr2h	equ	0xFDA
 16514                           fsr2l	equ	0xFD9
 16515                           status	equ	0xFD8
 16516                           
 16517 ;; *************** function _ValidateDataRate *****************
 16518 ;; Defined at:
 16519 ;;		line 570 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16520 ;; Parameters:    Size  Location     Type
 16521 ;;  dataRate        1    wreg     unsigned char 
 16522 ;; Auto vars:     Size  Location     Type
 16523 ;;  dataRate        1    0[BANK0 ] unsigned char 
 16524 ;;  result          1    1[BANK0 ] enum E17413
 16525 ;; Return value:  Size  Location     Type
 16526 ;;                  1    wreg      enum E17354
 16527 ;; Registers used:
 16528 ;;		wreg, status,2, status,0
 16529 ;; Tracked objects:
 16530 ;;		On entry : 3F/0
 16531 ;;		On exit  : 3F/0
 16532 ;;		Unchanged: 0/0
 16533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16534 ;;      Params:         0       0       0       0       0       0       0       0       0
 16535 ;;      Locals:         0       2       0       0       0       0       0       0       0
 16536 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16537 ;;      Totals:         0       2       0       0       0       0       0       0       0
 16538 ;;Total ram usage:        2 bytes
 16539 ;; Hardware stack levels used:    1
 16540 ;; Hardware stack levels required when called:    7
 16541 ;; This function calls:
 16542 ;;		Nothing
 16543 ;; This function is called by:
 16544 ;;		_ExecuteLinkAdr
 16545 ;;		_ExecuteRxParamSetupReq
 16546 ;;		_ValidateDataRange
 16547 ;; This function uses a non-reentrant model
 16548 ;;
 16549                           
 16550                           	psect	text82
 16551  006072                     __ptext82:
 16552                           	opt stack 0
 16553  006072                     _ValidateDataRate:
 16554                           	opt stack 17
 16555                           
 16556                           ; BSR set to: 0
 16557                           ;incstack = 0
 16558                           ;ValidateDataRate@dataRate stored from wreg
 16559  006072  6F60               	movwf	ValidateDataRate@dataRate& (0+255),b
 16560                           
 16561                           ;lorawan_eu.c: 572: LorawanError_t result = OK;
 16562  006074  0100               	movlb	0	; () banked
 16563  006076  6B61               	clrf	ValidateDataRate@result& (0+255),b
 16564                           
 16565                           ; BSR set to: 0
 16566                           ;lorawan_eu.c: 574: if ( dataRate > 7 )
 16567  006078  0E07               	movlw	7
 16568  00607A  6560               	cpfsgt	ValidateDataRate@dataRate& (0+255),b
 16569  00607C  D002               	goto	l1243
 16570                           
 16571                           ; BSR set to: 0
 16572                           ;lorawan_eu.c: 575: {
 16573                           ;lorawan_eu.c: 576: result = INVALID_PARAMETER;
 16574  00607E  0E03               	movlw	3
 16575  006080  6F61               	movwf	ValidateDataRate@result& (0+255),b
 16576  006082                     l1243:
 16577                           
 16578                           ; BSR set to: 0
 16579                           ;lorawan_eu.c: 577: }
 16580                           ;lorawan_eu.c: 579: return result;
 16581  006082  5161               	movf	ValidateDataRate@result& (0+255),w,b
 16582                           
 16583                           ; BSR set to: 0
 16584  006084  0012               	return		;funcret
 16585  006086                     __end_of_ValidateDataRate:
 16586                           	opt stack 0
 16587                           tosu	equ	0xFFF
 16588                           tosh	equ	0xFFE
 16589                           tosl	equ	0xFFD
 16590                           pclath	equ	0xFFA
 16591                           tblptru	equ	0xFF8
 16592                           tblptrh	equ	0xFF7
 16593                           tblptrl	equ	0xFF6
 16594                           tablat	equ	0xFF5
 16595                           prodh	equ	0xFF4
 16596                           prodl	equ	0xFF3
 16597                           intcon	equ	0xFF2
 16598                           indf0	equ	0xFEF
 16599                           postinc0	equ	0xFEE
 16600                           plusw0	equ	0xFEB
 16601                           fsr0h	equ	0xFEA
 16602                           fsr0l	equ	0xFE9
 16603                           wreg	equ	0xFE8
 16604                           postinc1	equ	0xFE6
 16605                           postdec1	equ	0xFE5
 16606                           plusw1	equ	0xFE3
 16607                           fsr1h	equ	0xFE2
 16608                           fsr1l	equ	0xFE1
 16609                           indf2	equ	0xFDF
 16610                           postinc2	equ	0xFDE
 16611                           postdec2	equ	0xFDD
 16612                           plusw2	equ	0xFDB
 16613                           fsr2h	equ	0xFDA
 16614                           fsr2l	equ	0xFD9
 16615                           status	equ	0xFD8
 16616                           
 16617 ;; *************** function _ValidateChannelMaskCntl *****************
 16618 ;; Defined at:
 16619 ;;		line 1137 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16620 ;; Parameters:    Size  Location     Type
 16621 ;;  channelMaskC    1    wreg     unsigned char 
 16622 ;; Auto vars:     Size  Location     Type
 16623 ;;  channelMaskC    1    1[BANK0 ] unsigned char 
 16624 ;;  result          1    0[BANK0 ] enum E17413
 16625 ;; Return value:  Size  Location     Type
 16626 ;;                  1    wreg      enum E17413
 16627 ;; Registers used:
 16628 ;;		wreg, status,2, status,0
 16629 ;; Tracked objects:
 16630 ;;		On entry : 3F/0
 16631 ;;		On exit  : 3F/0
 16632 ;;		Unchanged: 0/0
 16633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16634 ;;      Params:         0       0       0       0       0       0       0       0       0
 16635 ;;      Locals:         0       2       0       0       0       0       0       0       0
 16636 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16637 ;;      Totals:         0       2       0       0       0       0       0       0       0
 16638 ;;Total ram usage:        2 bytes
 16639 ;; Hardware stack levels used:    1
 16640 ;; Hardware stack levels required when called:    7
 16641 ;; This function calls:
 16642 ;;		Nothing
 16643 ;; This function is called by:
 16644 ;;		_ExecuteLinkAdr
 16645 ;; This function uses a non-reentrant model
 16646 ;;
 16647                           
 16648                           	psect	text83
 16649  005FA6                     __ptext83:
 16650                           	opt stack 0
 16651  005FA6                     _ValidateChannelMaskCntl:
 16652                           	opt stack 17
 16653                           
 16654                           ; BSR set to: 0
 16655                           ;incstack = 0
 16656                           ;ValidateChannelMaskCntl@channelMaskCntl stored from wreg
 16657  005FA6  6F61               	movwf	ValidateChannelMaskCntl@channelMaskCntl& (0+255),b
 16658                           
 16659                           ;lorawan_eu.c: 1139: LorawanError_t result = OK;
 16660  005FA8  0100               	movlb	0	; () banked
 16661  005FAA  6B60               	clrf	ValidateChannelMaskCntl@result& (0+255),b
 16662                           
 16663                           ; BSR set to: 0
 16664                           ;lorawan_eu.c: 1141: if ( (channelMaskCntl != 0) && (channelMaskCntl != 6) )
 16665  005FAC  5161               	movf	ValidateChannelMaskCntl@channelMaskCntl& (0+255),w,b
 16666  005FAE  E005               	bz	l1414
 16667                           
 16668                           ; BSR set to: 0
 16669  005FB0  0E06               	movlw	6
 16670  005FB2  1961               	xorwf	ValidateChannelMaskCntl@channelMaskCntl& (0+255),w,b
 16671  005FB4  E002               	bz	l1414
 16672                           
 16673                           ; BSR set to: 0
 16674                           ;lorawan_eu.c: 1142: {
 16675                           ;lorawan_eu.c: 1143: result = INVALID_PARAMETER;
 16676  005FB6  0E03               	movlw	3
 16677  005FB8  6F60               	movwf	ValidateChannelMaskCntl@result& (0+255),b
 16678  005FBA                     l1414:
 16679                           
 16680                           ; BSR set to: 0
 16681                           ;lorawan_eu.c: 1144: }
 16682                           ;lorawan_eu.c: 1146: return result;
 16683  005FBA  5160               	movf	ValidateChannelMaskCntl@result& (0+255),w,b
 16684                           
 16685                           ; BSR set to: 0
 16686  005FBC  0012               	return		;funcret
 16687  005FBE                     __end_of_ValidateChannelMaskCntl:
 16688                           	opt stack 0
 16689                           tosu	equ	0xFFF
 16690                           tosh	equ	0xFFE
 16691                           tosl	equ	0xFFD
 16692                           pclath	equ	0xFFA
 16693                           tblptru	equ	0xFF8
 16694                           tblptrh	equ	0xFF7
 16695                           tblptrl	equ	0xFF6
 16696                           tablat	equ	0xFF5
 16697                           prodh	equ	0xFF4
 16698                           prodl	equ	0xFF3
 16699                           intcon	equ	0xFF2
 16700                           indf0	equ	0xFEF
 16701                           postinc0	equ	0xFEE
 16702                           plusw0	equ	0xFEB
 16703                           fsr0h	equ	0xFEA
 16704                           fsr0l	equ	0xFE9
 16705                           wreg	equ	0xFE8
 16706                           postinc1	equ	0xFE6
 16707                           postdec1	equ	0xFE5
 16708                           plusw1	equ	0xFE3
 16709                           fsr1h	equ	0xFE2
 16710                           fsr1l	equ	0xFE1
 16711                           indf2	equ	0xFDF
 16712                           postinc2	equ	0xFDE
 16713                           postdec2	equ	0xFDD
 16714                           plusw2	equ	0xFDB
 16715                           fsr2h	equ	0xFDA
 16716                           fsr2l	equ	0xFD9
 16717                           status	equ	0xFD8
 16718                           
 16719 ;; *************** function _ValidateChannelMask *****************
 16720 ;; Defined at:
 16721 ;;		line 1166 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16722 ;; Parameters:    Size  Location     Type
 16723 ;;  channelMask     2    0[BANK0 ] unsigned int 
 16724 ;; Auto vars:     Size  Location     Type
 16725 ;;  i               1    2[BANK0 ] unsigned char 
 16726 ;; Return value:  Size  Location     Type
 16727 ;;                  1    wreg      enum E17413
 16728 ;; Registers used:
 16729 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16730 ;; Tracked objects:
 16731 ;;		On entry : 3F/0
 16732 ;;		On exit  : 3F/0
 16733 ;;		Unchanged: 0/0
 16734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16735 ;;      Params:         0       2       0       0       0       0       0       0       0
 16736 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16737 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16738 ;;      Totals:         0       3       0       0       0       0       0       0       0
 16739 ;;Total ram usage:        3 bytes
 16740 ;; Hardware stack levels used:    1
 16741 ;; Hardware stack levels required when called:    7
 16742 ;; This function calls:
 16743 ;;		Nothing
 16744 ;; This function is called by:
 16745 ;;		_ExecuteLinkAdr
 16746 ;; This function uses a non-reentrant model
 16747 ;;
 16748                           
 16749                           	psect	text84
 16750  005A50                     __ptext84:
 16751                           	opt stack 0
 16752  005A50                     _ValidateChannelMask:
 16753                           	opt stack 17
 16754                           
 16755                           ; BSR set to: 0
 16756                           ;lorawan_eu.c: 1170: if(channelMask != 0x0000U)
 16757                           
 16758                           ; BSR set to: 0
 16759                           
 16760                           ; BSR set to: 0
 16761                           ;incstack = 0
 16762  005A50  5160               	movf	ValidateChannelMask@channelMask& (0+255),w,b
 16763  005A52  1161               	iorwf	(ValidateChannelMask@channelMask+1)& (0+255),w,b
 16764  005A54  B4D8               	btfsc	status,2,c
 16765  005A56  0C03               	retlw	3
 16766                           
 16767                           ; BSR set to: 0
 16768                           ;lorawan_eu.c: 1171: {
 16769                           ;lorawan_eu.c: 1172: for (i = 0; i < 16; i++)
 16770  005A58  6B62               	clrf	ValidateChannelMask@i& (0+255),b
 16771  005A5A                     l1428:
 16772                           
 16773                           ; BSR set to: 0
 16774                           ;lorawan_eu.c: 1173: {
 16775                           ;lorawan_eu.c: 1174: if ( ( (channelMask & (1 << (0))) == (1 << (0))) && ( (Channels[i].
      +                          parametersDefined & (0X01 | 0X02 | 0x04) ) != (0X01 | 0X02 | 0x04) ) )
 16776  005A5A  A160               	btfss	ValidateChannelMask@channelMask& (0+255),0,b
 16777  005A5C  D008               	goto	l13272
 16778                           
 16779                           ; BSR set to: 0
 16780  005A5E  5162               	movf	ValidateChannelMask@i& (0+255),w,b
 16781  005A60  EC7A  F02D         	call	PL68	;call to abstracted procedure
 16782  005A64  50DF               	movf	indf2,w,c
 16783  005A66  0B07               	andlw	7
 16784  005A68  0A07               	xorlw	7
 16785  005A6A  E001               	bz	l13272
 16786                           
 16787                           ; BSR set to: 0
 16788                           ;lorawan_eu.c: 1175: {
 16789                           ;lorawan_eu.c: 1176: return INVALID_PARAMETER;
 16790  005A6C  0C03               	retlw	3
 16791  005A6E                     l13272:
 16792                           
 16793                           ; BSR set to: 0
 16794                           ;lorawan_eu.c: 1178: else
 16795                           ;lorawan_eu.c: 1179: {
 16796                           ;lorawan_eu.c: 1180: channelMask = channelMask >> (1);
 16797  005A6E  90D8               	bcf	status,0,c
 16798  005A70  3361               	rrcf	(ValidateChannelMask@channelMask+1)& (0+255),f,b
 16799  005A72  3360               	rrcf	ValidateChannelMask@channelMask& (0+255),f,b
 16800                           
 16801                           ; BSR set to: 0
 16802  005A74  2B62               	incf	ValidateChannelMask@i& (0+255),f,b
 16803                           
 16804                           ; BSR set to: 0
 16805  005A76  0E0F               	movlw	15
 16806  005A78  6562               	cpfsgt	ValidateChannelMask@i& (0+255),b
 16807  005A7A  D7EF               	goto	l1428
 16808  005A7C  0C00               	retlw	0
 16809  005A7E                     __end_of_ValidateChannelMask:
 16810                           	opt stack 0
 16811                           tosu	equ	0xFFF
 16812                           tosh	equ	0xFFE
 16813                           tosl	equ	0xFFD
 16814                           pclath	equ	0xFFA
 16815                           tblptru	equ	0xFF8
 16816                           tblptrh	equ	0xFF7
 16817                           tblptrl	equ	0xFF6
 16818                           tablat	equ	0xFF5
 16819                           prodh	equ	0xFF4
 16820                           prodl	equ	0xFF3
 16821                           intcon	equ	0xFF2
 16822                           indf0	equ	0xFEF
 16823                           postinc0	equ	0xFEE
 16824                           plusw0	equ	0xFEB
 16825                           fsr0h	equ	0xFEA
 16826                           fsr0l	equ	0xFE9
 16827                           wreg	equ	0xFE8
 16828                           postinc1	equ	0xFE6
 16829                           postdec1	equ	0xFE5
 16830                           plusw1	equ	0xFE3
 16831                           fsr1h	equ	0xFE2
 16832                           fsr1l	equ	0xFE1
 16833                           indf2	equ	0xFDF
 16834                           postinc2	equ	0xFDE
 16835                           postdec2	equ	0xFDD
 16836                           plusw2	equ	0xFDB
 16837                           fsr2h	equ	0xFDA
 16838                           fsr2l	equ	0xFD9
 16839                           status	equ	0xFD8
 16840                           
 16841 ;; *************** function _UpdateTxPower *****************
 16842 ;; Defined at:
 16843 ;;		line 1029 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 16844 ;; Parameters:    Size  Location     Type
 16845 ;;  txPowerNew      1    wreg     unsigned char 
 16846 ;; Auto vars:     Size  Location     Type
 16847 ;;  txPowerNew      1    0[BANK0 ] unsigned char 
 16848 ;; Return value:  Size  Location     Type
 16849 ;;                  1    wreg      void 
 16850 ;; Registers used:
 16851 ;;		wreg
 16852 ;; Tracked objects:
 16853 ;;		On entry : 3F/0
 16854 ;;		On exit  : 0/0
 16855 ;;		Unchanged: 0/0
 16856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16857 ;;      Params:         0       0       0       0       0       0       0       0       0
 16858 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16859 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16860 ;;      Totals:         0       1       0       0       0       0       0       0       0
 16861 ;;Total ram usage:        1 bytes
 16862 ;; Hardware stack levels used:    1
 16863 ;; Hardware stack levels required when called:    7
 16864 ;; This function calls:
 16865 ;;		Nothing
 16866 ;; This function is called by:
 16867 ;;		_ExecuteLinkAdr
 16868 ;; This function uses a non-reentrant model
 16869 ;;
 16870                           
 16871                           	psect	text85
 16872  0061CA                     __ptext85:
 16873                           	opt stack 0
 16874  0061CA                     _UpdateTxPower:
 16875                           	opt stack 17
 16876                           
 16877                           ; BSR set to: 0
 16878                           ;incstack = 0
 16879                           ;UpdateTxPower@txPowerNew stored from wreg
 16880  0061CA  6F60               	movwf	UpdateTxPower@txPowerNew& (0+255),b
 16881                           
 16882                           ;lorawan.c: 1031: loRa.txPower = txPowerNew;
 16883  0061CC  C060  F2E1         	movff	UpdateTxPower@txPowerNew,_loRa+225
 16884  0061D0  0012               	return		;funcret
 16885  0061D2                     __end_of_UpdateTxPower:
 16886                           	opt stack 0
 16887                           tosu	equ	0xFFF
 16888                           tosh	equ	0xFFE
 16889                           tosl	equ	0xFFD
 16890                           pclath	equ	0xFFA
 16891                           tblptru	equ	0xFF8
 16892                           tblptrh	equ	0xFF7
 16893                           tblptrl	equ	0xFF6
 16894                           tablat	equ	0xFF5
 16895                           prodh	equ	0xFF4
 16896                           prodl	equ	0xFF3
 16897                           intcon	equ	0xFF2
 16898                           indf0	equ	0xFEF
 16899                           postinc0	equ	0xFEE
 16900                           plusw0	equ	0xFEB
 16901                           fsr0h	equ	0xFEA
 16902                           fsr0l	equ	0xFE9
 16903                           wreg	equ	0xFE8
 16904                           postinc1	equ	0xFE6
 16905                           postdec1	equ	0xFE5
 16906                           plusw1	equ	0xFE3
 16907                           fsr1h	equ	0xFE2
 16908                           fsr1l	equ	0xFE1
 16909                           indf2	equ	0xFDF
 16910                           postinc2	equ	0xFDE
 16911                           postdec2	equ	0xFDD
 16912                           plusw2	equ	0xFDB
 16913                           fsr2h	equ	0xFDA
 16914                           fsr2l	equ	0xFD9
 16915                           status	equ	0xFD8
 16916                           
 16917 ;; *************** function _UpdateCurrentDataRate *****************
 16918 ;; Defined at:
 16919 ;;		line 1024 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 16920 ;; Parameters:    Size  Location     Type
 16921 ;;  valueNew        1    wreg     unsigned char 
 16922 ;; Auto vars:     Size  Location     Type
 16923 ;;  valueNew        1    0[BANK0 ] unsigned char 
 16924 ;; Return value:  Size  Location     Type
 16925 ;;                  1    wreg      void 
 16926 ;; Registers used:
 16927 ;;		wreg
 16928 ;; Tracked objects:
 16929 ;;		On entry : 3F/0
 16930 ;;		On exit  : 0/0
 16931 ;;		Unchanged: 0/0
 16932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16933 ;;      Params:         0       0       0       0       0       0       0       0       0
 16934 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16935 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16936 ;;      Totals:         0       1       0       0       0       0       0       0       0
 16937 ;;Total ram usage:        1 bytes
 16938 ;; Hardware stack levels used:    1
 16939 ;; Hardware stack levels required when called:    7
 16940 ;; This function calls:
 16941 ;;		Nothing
 16942 ;; This function is called by:
 16943 ;;		_ExecuteLinkAdr
 16944 ;; This function uses a non-reentrant model
 16945 ;;
 16946                           
 16947                           	psect	text86
 16948  0061D2                     __ptext86:
 16949                           	opt stack 0
 16950  0061D2                     _UpdateCurrentDataRate:
 16951                           	opt stack 17
 16952                           
 16953                           ;incstack = 0
 16954                           ;UpdateCurrentDataRate@valueNew stored from wreg
 16955  0061D2  6F60               	movwf	UpdateCurrentDataRate@valueNew& (0+255),b
 16956                           
 16957                           ;lorawan.c: 1026: loRa.currentDataRate = valueNew;
 16958  0061D4  C060  F2DF         	movff	UpdateCurrentDataRate@valueNew,_loRa+223
 16959  0061D8  0012               	return		;funcret
 16960  0061DA                     __end_of_UpdateCurrentDataRate:
 16961                           	opt stack 0
 16962                           tosu	equ	0xFFF
 16963                           tosh	equ	0xFFE
 16964                           tosl	equ	0xFFD
 16965                           pclath	equ	0xFFA
 16966                           tblptru	equ	0xFF8
 16967                           tblptrh	equ	0xFF7
 16968                           tblptrl	equ	0xFF6
 16969                           tablat	equ	0xFF5
 16970                           prodh	equ	0xFF4
 16971                           prodl	equ	0xFF3
 16972                           intcon	equ	0xFF2
 16973                           indf0	equ	0xFEF
 16974                           postinc0	equ	0xFEE
 16975                           plusw0	equ	0xFEB
 16976                           fsr0h	equ	0xFEA
 16977                           fsr0l	equ	0xFE9
 16978                           wreg	equ	0xFE8
 16979                           postinc1	equ	0xFE6
 16980                           postdec1	equ	0xFE5
 16981                           plusw1	equ	0xFE3
 16982                           fsr1h	equ	0xFE2
 16983                           fsr1l	equ	0xFE1
 16984                           indf2	equ	0xFDF
 16985                           postinc2	equ	0xFDE
 16986                           postdec2	equ	0xFDD
 16987                           plusw2	equ	0xFDB
 16988                           fsr2h	equ	0xFDA
 16989                           fsr2l	equ	0xFD9
 16990                           status	equ	0xFD8
 16991                           
 16992 ;; *************** function _EnableChannels *****************
 16993 ;; Defined at:
 16994 ;;		line 1149 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16995 ;; Parameters:    Size  Location     Type
 16996 ;;  channelMask     2   10[BANK0 ] unsigned int 
 16997 ;;  channelMaskC    1   12[BANK0 ] unsigned char 
 16998 ;; Auto vars:     Size  Location     Type
 16999 ;;		None
 17000 ;; Return value:  Size  Location     Type
 17001 ;;                  1    wreg      void 
 17002 ;; Registers used:
 17003 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17004 ;; Tracked objects:
 17005 ;;		On entry : 3F/0
 17006 ;;		On exit  : 3F/0
 17007 ;;		Unchanged: 0/0
 17008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17009 ;;      Params:         0       3       0       0       0       0       0       0       0
 17010 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17011 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17012 ;;      Totals:         0       3       0       0       0       0       0       0       0
 17013 ;;Total ram usage:        3 bytes
 17014 ;; Hardware stack levels used:    1
 17015 ;; Hardware stack levels required when called:    9
 17016 ;; This function calls:
 17017 ;;		_EnableChannels1
 17018 ;; This function is called by:
 17019 ;;		_ExecuteLinkAdr
 17020 ;; This function uses a non-reentrant model
 17021 ;;
 17022                           
 17023                           	psect	text87
 17024  006032                     __ptext87:
 17025                           	opt stack 0
 17026  006032                     _EnableChannels:
 17027                           	opt stack 15
 17028                           
 17029                           ; BSR set to: 0
 17030                           ;lorawan_eu.c: 1151: EnableChannels1 (channelMask, channelMaskCntl, 0, 16);
 17031                           
 17032                           ;incstack = 0
 17033  006032  C06A  F064         	movff	EnableChannels@channelMask,EnableChannels1@channelMask
 17034  006036  C06B  F065         	movff	EnableChannels@channelMask+1,EnableChannels1@channelMask+1
 17035  00603A  C06C  F066         	movff	EnableChannels@channelMaskCntl,EnableChannels1@channelMaskCntl
 17036  00603E  6B67               	clrf	EnableChannels1@channelIndexMin& (0+255),b
 17037  006040  0E10               	movlw	16
 17038  006042  6F68               	movwf	EnableChannels1@channelIndexMax& (0+255),b
 17039  006044  EF11  F028         	goto	_EnableChannels1	;wreg free
 17040  006048                     __end_of_EnableChannels:
 17041                           	opt stack 0
 17042                           tosu	equ	0xFFF
 17043                           tosh	equ	0xFFE
 17044                           tosl	equ	0xFFD
 17045                           pclath	equ	0xFFA
 17046                           tblptru	equ	0xFF8
 17047                           tblptrh	equ	0xFF7
 17048                           tblptrl	equ	0xFF6
 17049                           tablat	equ	0xFF5
 17050                           prodh	equ	0xFF4
 17051                           prodl	equ	0xFF3
 17052                           intcon	equ	0xFF2
 17053                           indf0	equ	0xFEF
 17054                           postinc0	equ	0xFEE
 17055                           plusw0	equ	0xFEB
 17056                           fsr0h	equ	0xFEA
 17057                           fsr0l	equ	0xFE9
 17058                           wreg	equ	0xFE8
 17059                           postinc1	equ	0xFE6
 17060                           postdec1	equ	0xFE5
 17061                           plusw1	equ	0xFE3
 17062                           fsr1h	equ	0xFE2
 17063                           fsr1l	equ	0xFE1
 17064                           indf2	equ	0xFDF
 17065                           postinc2	equ	0xFDE
 17066                           postdec2	equ	0xFDD
 17067                           plusw2	equ	0xFDB
 17068                           fsr2h	equ	0xFDA
 17069                           fsr2l	equ	0xFD9
 17070                           status	equ	0xFD8
 17071                           
 17072 ;; *************** function _EnableChannels1 *****************
 17073 ;; Defined at:
 17074 ;;		line 1193 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 17075 ;; Parameters:    Size  Location     Type
 17076 ;;  channelMask     2    4[BANK0 ] unsigned int 
 17077 ;;  channelMaskC    1    6[BANK0 ] unsigned char 
 17078 ;;  channelIndex    1    7[BANK0 ] unsigned char 
 17079 ;;  channelIndex    1    8[BANK0 ] unsigned char 
 17080 ;; Auto vars:     Size  Location     Type
 17081 ;;  i               1    9[BANK0 ] unsigned char 
 17082 ;; Return value:  Size  Location     Type
 17083 ;;                  1    wreg      void 
 17084 ;; Registers used:
 17085 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17086 ;; Tracked objects:
 17087 ;;		On entry : 3F/0
 17088 ;;		On exit  : 3F/0
 17089 ;;		Unchanged: 0/0
 17090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17091 ;;      Params:         0       5       0       0       0       0       0       0       0
 17092 ;;      Locals:         0       1       0       0       0       0       0       0       0
 17093 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17094 ;;      Totals:         0       6       0       0       0       0       0       0       0
 17095 ;;Total ram usage:        6 bytes
 17096 ;; Hardware stack levels used:    1
 17097 ;; Hardware stack levels required when called:    8
 17098 ;; This function calls:
 17099 ;;		_UpdateChannelIdStatus
 17100 ;; This function is called by:
 17101 ;;		_EnableChannels
 17102 ;; This function uses a non-reentrant model
 17103 ;;
 17104                           
 17105                           	psect	text88
 17106  005022                     __ptext88:
 17107                           	opt stack 0
 17108  005022                     _EnableChannels1:
 17109                           	opt stack 15
 17110                           
 17111                           ; BSR set to: 0
 17112                           ;lorawan_eu.c: 1195: uint8_t i;
 17113                           ;lorawan_eu.c: 1197: if (channelMaskCntl == 6)
 17114                           
 17115                           ; BSR set to: 0
 17116                           ;incstack = 0
 17117  005022  0E06               	movlw	6
 17118  005024  1966               	xorwf	EnableChannels1@channelMaskCntl& (0+255),w,b
 17119  005026  E10C               	bnz	l12548
 17120                           
 17121                           ; BSR set to: 0
 17122                           ;lorawan_eu.c: 1198: {
 17123                           ;lorawan_eu.c: 1199: for ( i = channelIndexMin; i < channelIndexMax; i++ )
 17124  005028  C067  F069         	movff	EnableChannels1@channelIndexMin,EnableChannels1@i
 17125  00502C  D005               	goto	l12546
 17126  00502E                     l12542:
 17127                           
 17128                           ; BSR set to: 0
 17129                           ;lorawan_eu.c: 1200: {
 17130                           ;lorawan_eu.c: 1201: UpdateChannelIdStatus (i, 1);
 17131  00502E  D821               	call	PL446	;call to abstracted procedure
 17132  005030  EC57  F01D         	call	_UpdateChannelIdStatus
 17133                           
 17134                           ; BSR set to: 2
 17135  005034  0100               	movlb	0	; () banked
 17136  005036  2B69               	incf	EnableChannels1@i& (0+255),f,b
 17137  005038                     l12546:
 17138                           
 17139                           ; BSR set to: 0
 17140  005038  5168               	movf	EnableChannels1@channelIndexMax& (0+255),w,b
 17141  00503A  5D69               	subwf	EnableChannels1@i& (0+255),w,b
 17142  00503C  E3F8               	bnc	l12542
 17143  00503E  0012               	return	
 17144  005040                     l12548:
 17145                           
 17146                           ; BSR set to: 0
 17147                           ;lorawan_eu.c: 1204: else if (channelMaskCntl == 0)
 17148  005040  5166               	movf	EnableChannels1@channelMaskCntl& (0+255),w,b
 17149  005042  A4D8               	btfss	status,2,c
 17150  005044  0012               	return	
 17151                           
 17152                           ; BSR set to: 0
 17153                           ;lorawan_eu.c: 1205: {
 17154                           ;lorawan_eu.c: 1206: for ( i = channelIndexMin; i < channelIndexMax; i++ )
 17155  005046  C067  F069         	movff	EnableChannels1@channelIndexMin,EnableChannels1@i
 17156  00504A  D00F               	goto	l12560
 17157  00504C                     l1443:
 17158                           
 17159                           ; BSR set to: 0
 17160                           ;lorawan_eu.c: 1207: {
 17161                           ;lorawan_eu.c: 1208: if ( channelMask & (1 << (0)) == (1 << (0)))
 17162  00504C  A164               	btfss	EnableChannels1@channelMask& (0+255),0,b
 17163  00504E  D004               	goto	l12554
 17164                           
 17165                           ; BSR set to: 0
 17166                           ;lorawan_eu.c: 1209: {
 17167                           ;lorawan_eu.c: 1210: UpdateChannelIdStatus (i, 1);
 17168  005050  D810               	call	PL446	;call to abstracted procedure
 17169  005052  EC57  F01D         	call	_UpdateChannelIdStatus
 17170                           
 17171                           ;lorawan_eu.c: 1211: }
 17172  005056  D004               	goto	l12556
 17173  005058                     l12554:
 17174                           
 17175                           ; BSR set to: 0
 17176                           ;lorawan_eu.c: 1212: else
 17177                           ;lorawan_eu.c: 1213: {
 17178                           ;lorawan_eu.c: 1214: UpdateChannelIdStatus (i, 0);
 17179  005058  6B60               	clrf	UpdateChannelIdStatus@statusNew& (0+255),b
 17180  00505A  5169               	movf	EnableChannels1@i& (0+255),w,b
 17181  00505C  EC57  F01D         	call	_UpdateChannelIdStatus
 17182  005060                     l12556:
 17183                           
 17184                           ; BSR set to: 2
 17185                           ;lorawan_eu.c: 1215: }
 17186                           ;lorawan_eu.c: 1216: channelMask = channelMask >> (1);
 17187  005060  0100               	movlb	0	; () banked
 17188  005062  90D8               	bcf	status,0,c
 17189  005064  3365               	rrcf	(EnableChannels1@channelMask+1)& (0+255),f,b
 17190  005066  3364               	rrcf	EnableChannels1@channelMask& (0+255),f,b
 17191                           
 17192                           ; BSR set to: 0
 17193  005068  2B69               	incf	EnableChannels1@i& (0+255),f,b
 17194  00506A                     l12560:
 17195                           
 17196                           ; BSR set to: 0
 17197  00506A  5168               	movf	EnableChannels1@channelIndexMax& (0+255),w,b
 17198  00506C  5D69               	subwf	EnableChannels1@i& (0+255),w,b
 17199  00506E  E3EE               	bnc	l1443
 17200                           
 17201                           ; BSR set to: 0
 17202  005070  0012               	return		;funcret
 17203  005072                     __end_of_EnableChannels1:
 17204                           	opt stack 0
 17205  005072                     PL446:
 17206                           	opt stack 15
 17207  005072  0E01               	movlw	1
 17208  005074  6F60               	movwf	UpdateChannelIdStatus@statusNew& (0+255),b
 17209  005076  5169               	movf	EnableChannels1@i& (0+255),w,b
 17210  005078  0012               	return	
 17211  00507A                     __end_ofPL446:
 17212                           	opt stack 0
 17213                           tosu	equ	0xFFF
 17214                           tosh	equ	0xFFE
 17215                           tosl	equ	0xFFD
 17216                           pclath	equ	0xFFA
 17217                           tblptru	equ	0xFF8
 17218                           tblptrh	equ	0xFF7
 17219                           tblptrl	equ	0xFF6
 17220                           tablat	equ	0xFF5
 17221                           prodh	equ	0xFF4
 17222                           prodl	equ	0xFF3
 17223                           intcon	equ	0xFF2
 17224                           indf0	equ	0xFEF
 17225                           postinc0	equ	0xFEE
 17226                           plusw0	equ	0xFEB
 17227                           fsr0h	equ	0xFEA
 17228                           fsr0l	equ	0xFE9
 17229                           wreg	equ	0xFE8
 17230                           postinc1	equ	0xFE6
 17231                           postdec1	equ	0xFE5
 17232                           plusw1	equ	0xFE3
 17233                           fsr1h	equ	0xFE2
 17234                           fsr1l	equ	0xFE1
 17235                           indf2	equ	0xFDF
 17236                           postinc2	equ	0xFDE
 17237                           postdec2	equ	0xFDD
 17238                           plusw2	equ	0xFDB
 17239                           fsr2h	equ	0xFDA
 17240                           fsr2l	equ	0xFD9
 17241                           status	equ	0xFD8
 17242                           
 17243 ;; *************** function _UpdateChannelIdStatus *****************
 17244 ;; Defined at:
 17245 ;;		line 1042 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 17246 ;; Parameters:    Size  Location     Type
 17247 ;;  channelId       1    wreg     unsigned char 
 17248 ;;  statusNew       1    0[BANK0 ] unsigned char 
 17249 ;; Auto vars:     Size  Location     Type
 17250 ;;  channelId       1    2[BANK0 ] unsigned char 
 17251 ;;  i               1    3[BANK0 ] unsigned char 
 17252 ;; Return value:  Size  Location     Type
 17253 ;;                  1    wreg      void 
 17254 ;; Registers used:
 17255 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17256 ;; Tracked objects:
 17257 ;;		On entry : 3F/0
 17258 ;;		On exit  : 3F/2
 17259 ;;		Unchanged: 0/0
 17260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17261 ;;      Params:         0       1       0       0       0       0       0       0       0
 17262 ;;      Locals:         0       2       0       0       0       0       0       0       0
 17263 ;;      Temps:          0       1       0       0       0       0       0       0       0
 17264 ;;      Totals:         0       4       0       0       0       0       0       0       0
 17265 ;;Total ram usage:        4 bytes
 17266 ;; Hardware stack levels used:    1
 17267 ;; Hardware stack levels required when called:    7
 17268 ;; This function calls:
 17269 ;;		Nothing
 17270 ;; This function is called by:
 17271 ;;		_LORAWAN_SetChannelIdStatus
 17272 ;;		_ExecuteNewChannel
 17273 ;;		_EnableChannels1
 17274 ;; This function uses a non-reentrant model
 17275 ;;
 17276                           
 17277                           	psect	text89
 17278  003AAE                     __ptext89:
 17279                           	opt stack 0
 17280  003AAE                     _UpdateChannelIdStatus:
 17281                           	opt stack 17
 17282                           
 17283                           ; BSR set to: 0
 17284                           ;incstack = 0
 17285                           ;UpdateChannelIdStatus@channelId stored from wreg
 17286  003AAE  6F62               	movwf	UpdateChannelIdStatus@channelId& (0+255),b
 17287                           
 17288                           ;lorawan_eu.c: 1044: uint8_t i;
 17289                           ;lorawan_eu.c: 1046: Channels[channelId].status = statusNew;
 17290  003AB0  0100               	movlb	0	; () banked
 17291  003AB2  5162               	movf	UpdateChannelIdStatus@channelId& (0+255),w,b
 17292  003AB4  0D0E               	mullw	14
 17293  003AB6  D83F               	call	PL18	;call to abstracted procedure
 17294  003AB8  C060  FFDF         	movff	UpdateChannelIdStatus@statusNew,indf2
 17295                           
 17296                           ;lorawan_eu.c: 1047: if(Channels[channelId].status == 0)
 17297  003ABC  5162               	movf	UpdateChannelIdStatus@channelId& (0+255),w,b
 17298  003ABE  0D0E               	mullw	14
 17299  003AC0  D83A               	call	PL18	;call to abstracted procedure
 17300  003AC2  50DF               	movf	indf2,w,c
 17301  003AC4  E104               	bnz	l12140
 17302                           
 17303                           ; BSR set to: 0
 17304                           ;lorawan_eu.c: 1048: {
 17305                           ;lorawan_eu.c: 1050: Channels[channelId].channelTimer = 0;
 17306  003AC6  5162               	movf	UpdateChannelIdStatus@channelId& (0+255),w,b
 17307  003AC8  EC51  F006         	call	PL4	;call to abstracted procedure
 17308  003ACC  D83B               	call	PL182	;call to abstracted procedure
 17309  003ACE                     l12140:
 17310                           
 17311                           ; BSR set to: 0
 17312                           ;lorawan_eu.c: 1051: }
 17313                           ;lorawan_eu.c: 1053: for (i = 0; i < loRa.maxChannels; i++)
 17314  003ACE  6B63               	clrf	UpdateChannelIdStatus@i& (0+255),b
 17315  003AD0  D026               	goto	l12154
 17316  003AD2                     l12142:
 17317                           
 17318                           ; BSR set to: 0
 17319                           ;lorawan_eu.c: 1054: {
 17320                           ;lorawan_eu.c: 1055: if ( (Channels[i].dataRange.min < loRa.minDataRate) && (Channels[i]
      +                          .status == 1) )
 17321  003AD2  5163               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 17322  003AD4  EC7E  F021         	call	PL6	;call to abstracted procedure
 17323  003AD8  50DF               	movf	223,w,c
 17324  003ADA  0B0F               	andlw	15
 17325  003ADC  0100               	movlb	0	; () banked
 17326  003ADE  6F61               	movwf	??_UpdateChannelIdStatus& (0+255),b
 17327  003AE0  0102               	movlb	2	; () banked
 17328  003AE2  51EB               	movf	(_loRa+235)& (0+255),w,b
 17329  003AE4  0100               	movlb	0	; () banked
 17330  003AE6  5D61               	subwf	??_UpdateChannelIdStatus& (0+255),w,b
 17331  003AE8  E208               	bc	l1379
 17332                           
 17333                           ; BSR set to: 0
 17334  003AEA  5163               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 17335  003AEC  EC86  F021         	call	PL12	;call to abstracted procedure
 17336  003AF0  E104               	bnz	l1379
 17337                           
 17338                           ; BSR set to: 0
 17339                           ;lorawan_eu.c: 1056: {
 17340                           ;lorawan_eu.c: 1057: loRa.minDataRate = Channels[i].dataRange.min;
 17341  003AF2  5163               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 17342  003AF4  EC7E  F021         	call	PL6	;call to abstracted procedure
 17343  003AF8  D835               	call	PL326	;call to abstracted procedure
 17344  003AFA                     l1379:
 17345                           
 17346                           ;lorawan_eu.c: 1058: }
 17347                           ;lorawan_eu.c: 1059: if ( (Channels[i].dataRange.max > loRa.maxDataRate) && (Channels[i]
      +                          .status == 1) )
 17348  003AFA  0100               	movlb	0	; () banked
 17349  003AFC  5163               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 17350  003AFE  EC7E  F021         	call	PL6	;call to abstracted procedure
 17351  003B02  D835               	call	PL440	;call to abstracted procedure
 17352  003B04  61EC               	cpfslt	(_loRa+236)& (0+255),b
 17353  003B06  D009               	goto	l12152
 17354                           
 17355                           ; BSR set to: 2
 17356  003B08  0100               	movlb	0	; () banked
 17357  003B0A  5163               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 17358  003B0C  EC86  F021         	call	PL12	;call to abstracted procedure
 17359  003B10  E104               	bnz	l12152
 17360                           
 17361                           ; BSR set to: 0
 17362                           ;lorawan_eu.c: 1060: {
 17363                           ;lorawan_eu.c: 1061: loRa.maxDataRate = Channels[i].dataRange.max;
 17364  003B12  5163               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 17365  003B14  EC7E  F021         	call	PL6	;call to abstracted procedure
 17366  003B18  D820               	call	PL322	;call to abstracted procedure
 17367  003B1A                     l12152:
 17368  003B1A  0100               	movlb	0	; () banked
 17369  003B1C  2B63               	incf	UpdateChannelIdStatus@i& (0+255),f,b
 17370  003B1E                     l12154:
 17371                           
 17372                           ; BSR set to: 0
 17373  003B1E  0102               	movlb	2	; () banked
 17374  003B20  51ED               	movf	(_loRa+237)& (0+255),w,b
 17375  003B22  0100               	movlb	0	; () banked
 17376  003B24  5D63               	subwf	UpdateChannelIdStatus@i& (0+255),w,b
 17377  003B26  E3D5               	bnc	l12142
 17378                           
 17379                           ; BSR set to: 0
 17380                           ;lorawan_eu.c: 1062: }
 17381                           ;lorawan_eu.c: 1063: }
 17382                           ;lorawan_eu.c: 1065: if (loRa.currentDataRate > loRa.maxDataRate)
 17383  003B28  0102               	movlb	2	; () banked
 17384  003B2A  51DF               	movf	(_loRa+223)& (0+255),w,b
 17385  003B2C  5DEC               	subwf	(_loRa+236)& (0+255),w,b
 17386  003B2E  E20F               	bc	PL302
 17387                           
 17388                           ; BSR set to: 2
 17389                           ;lorawan_eu.c: 1066: {
 17390                           ;lorawan_eu.c: 1067: loRa.currentDataRate = loRa.maxDataRate;
 17391  003B30  C2EC  F2DF         	movff	_loRa+236,_loRa+223
 17392  003B34                     l12160:
 17393                           
 17394                           ; BSR set to: 2
 17395                           ;lorawan_eu.c: 1068: }
 17396                           ;lorawan_eu.c: 1070: if (loRa.currentDataRate < loRa.minDataRate)
 17397                           
 17398                           ; BSR set to: 2
 17399                           ;lorawan_eu.c: 1071: {
 17400                           ;lorawan_eu.c: 1072: loRa.currentDataRate = loRa.minDataRate;
 17401                           
 17402                           ; BSR set to: 2
 17403  003B34  D00C               	goto	PL302	;call to abstracted procedure
 17404  003B36                     __end_of_UpdateChannelIdStatus:
 17405                           	opt stack 0
 17406  003B36                     PL18:
 17407                           	opt stack 17
 17408  003B36  0E04               	movlw	low (_Channels+4)
 17409  003B38  24F3               	addwf	prodl,w,c
 17410  003B3A  6ED9               	movwf	fsr2l,c
 17411  003B3C  0E04               	movlw	high (_Channels+4)
 17412  003B3E  20F4               	addwfc	prodh,w,c
 17413  003B40  6EDA               	movwf	fsr2h,c
 17414  003B42  0012               	return	
 17415  003B44                     __end_ofPL18:
 17416                           	opt stack 0
 17417  003B44                     PL182:
 17418                           	opt stack 17
 17419  003B44  6ADE               	clrf	postinc2,c
 17420  003B46  6ADE               	clrf	postinc2,c
 17421  003B48  6ADE               	clrf	postinc2,c
 17422  003B4A  6ADD               	clrf	postdec2,c
 17423  003B4C  0012               	return	
 17424  003B4E                     __end_ofPL182:
 17425                           	opt stack 0
 17426  003B4E                     PL302:
 17427                           	opt stack 17
 17428  003B4E  51EB               	movf	(_loRa+235)& (0+255),w,b
 17429  003B50  5DDF               	subwf	(_loRa+223)& (0+255),w,b
 17430  003B52  A0D8               	btfss	status,0,c
 17431  003B54  C2EB  F2DF         	movff	_loRa+235,_loRa+223
 17432  003B58  0012               	return		;funcret
 17433  003B5A                     __end_ofPL302:
 17434                           	opt stack 0
 17435  003B5A                     PL322:
 17436                           	opt stack 17
 17437  003B5A  38DF               	swapf	223,w,c
 17438  003B5C  0B0F               	andlw	15
 17439  003B5E  0102               	movlb	2	; () banked
 17440  003B60  6FEC               	movwf	(_loRa+236)& (0+255),b
 17441  003B62  0012               	return	
 17442  003B64                     __end_ofPL322:
 17443                           	opt stack 0
 17444  003B64                     PL326:
 17445                           	opt stack 17
 17446  003B64  50DF               	movf	223,w,c
 17447  003B66  0B0F               	andlw	15
 17448  003B68  0102               	movlb	2	; () banked
 17449  003B6A  6FEB               	movwf	(_loRa+235)& (0+255),b
 17450  003B6C  0012               	return	
 17451  003B6E                     __end_ofPL326:
 17452                           	opt stack 0
 17453  003B6E                     PL440:
 17454                           	opt stack 17
 17455  003B6E  38DF               	swapf	223,w,c
 17456  003B70  0B0F               	andlw	15
 17457  003B72  0102               	movlb	2	; () banked
 17458  003B74  0012               	return	
 17459  003B76                     __end_ofPL440:
 17460                           	opt stack 0
 17461                           tosu	equ	0xFFF
 17462                           tosh	equ	0xFFE
 17463                           tosl	equ	0xFFD
 17464                           pclath	equ	0xFFA
 17465                           tblptru	equ	0xFF8
 17466                           tblptrh	equ	0xFF7
 17467                           tblptrl	equ	0xFF6
 17468                           tablat	equ	0xFF5
 17469                           prodh	equ	0xFF4
 17470                           prodl	equ	0xFF3
 17471                           intcon	equ	0xFF2
 17472                           indf0	equ	0xFEF
 17473                           postinc0	equ	0xFEE
 17474                           plusw0	equ	0xFEB
 17475                           fsr0h	equ	0xFEA
 17476                           fsr0l	equ	0xFE9
 17477                           wreg	equ	0xFE8
 17478                           postinc1	equ	0xFE6
 17479                           postdec1	equ	0xFE5
 17480                           plusw1	equ	0xFE3
 17481                           fsr1h	equ	0xFE2
 17482                           fsr1l	equ	0xFE1
 17483                           indf2	equ	0xFDF
 17484                           postinc2	equ	0xFDE
 17485                           postdec2	equ	0xFDD
 17486                           plusw2	equ	0xFDB
 17487                           fsr2h	equ	0xFDA
 17488                           fsr2l	equ	0xFD9
 17489                           status	equ	0xFD8
 17490                           
 17491 ;; *************** function _ExecuteDutyCycle *****************
 17492 ;; Defined at:
 17493 ;;		line 594 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 17494 ;; Parameters:    Size  Location     Type
 17495 ;;  ptr             2    0[BANK0 ] PTR unsigned char 
 17496 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 17497 ;; Auto vars:     Size  Location     Type
 17498 ;;  maxDCycle       1    5[BANK0 ] unsigned char 
 17499 ;; Return value:  Size  Location     Type
 17500 ;;                  2    0[BANK0 ] PTR unsigned char 
 17501 ;; Registers used:
 17502 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17503 ;; Tracked objects:
 17504 ;;		On entry : 3F/0
 17505 ;;		On exit  : 3D/0
 17506 ;;		Unchanged: 0/0
 17507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17508 ;;      Params:         0       2       0       0       0       0       0       0       0
 17509 ;;      Locals:         0       1       0       0       0       0       0       0       0
 17510 ;;      Temps:          0       3       0       0       0       0       0       0       0
 17511 ;;      Totals:         0       6       0       0       0       0       0       0       0
 17512 ;;Total ram usage:        6 bytes
 17513 ;; Hardware stack levels used:    1
 17514 ;; Hardware stack levels required when called:    7
 17515 ;; This function calls:
 17516 ;;		Nothing
 17517 ;; This function is called by:
 17518 ;;		_MacExecuteCommands
 17519 ;; This function uses a non-reentrant model
 17520 ;;
 17521                           
 17522                           	psect	text90
 17523  005314                     __ptext90:
 17524                           	opt stack 0
 17525  005314                     _ExecuteDutyCycle:
 17526                           	opt stack 18
 17527                           
 17528                           ; BSR set to: 0
 17529                           ;lorawan_eu.c: 596: uint8_t maxDCycle;
 17530                           ;lorawan_eu.c: 598: maxDCycle = *(ptr++);
 17531                           
 17532                           ; BSR set to: 2
 17533                           ;incstack = 0
 17534  005314  C060  FFD9         	movff	ExecuteDutyCycle@ptr,fsr2l
 17535  005318  C061  FFDA         	movff	ExecuteDutyCycle@ptr+1,fsr2h
 17536  00531C  50DF               	movf	indf2,w,c
 17537  00531E  6F65               	movwf	ExecuteDutyCycle@maxDCycle& (0+255),b
 17538                           
 17539                           ; BSR set to: 0
 17540  005320  4B60               	infsnz	ExecuteDutyCycle@ptr& (0+255),f,b
 17541  005322  2B61               	incf	(ExecuteDutyCycle@ptr+1)& (0+255),f,b
 17542                           
 17543                           ; BSR set to: 0
 17544                           ;lorawan_eu.c: 599: if (maxDCycle < 15)
 17545  005324  0E0F               	movlw	15
 17546  005326  6165               	cpfslt	ExecuteDutyCycle@maxDCycle& (0+255),b
 17547  005328  D012               	goto	l1255
 17548                           
 17549                           ; BSR set to: 0
 17550                           ;lorawan_eu.c: 600: {
 17551                           ;lorawan_eu.c: 601: loRa.prescaler = 1 << maxDCycle;
 17552  00532A  C065  F062         	movff	ExecuteDutyCycle@maxDCycle,??_ExecuteDutyCycle
 17553  00532E  0E01               	movlw	1
 17554  005330  6F63               	movwf	(??_ExecuteDutyCycle+1)& (0+255),b
 17555  005332  6B64               	clrf	(??_ExecuteDutyCycle+2)& (0+255),b
 17556  005334  2B62               	incf	??_ExecuteDutyCycle& (0+255),f,b
 17557  005336  D003               	goto	u15154
 17558  005338                     u15155:
 17559  005338  90D8               	bcf	status,0,c
 17560  00533A  3763               	rlcf	(??_ExecuteDutyCycle+1)& (0+255),f,b
 17561  00533C  3764               	rlcf	(??_ExecuteDutyCycle+2)& (0+255),f,b
 17562  00533E                     u15154:
 17563  00533E  2F62               	decfsz	??_ExecuteDutyCycle& (0+255),f,b
 17564  005340  D7FB               	goto	u15155
 17565  005342  C063  F2DB         	movff	??_ExecuteDutyCycle+1,_loRa+219
 17566  005346  C064  F2DC         	movff	??_ExecuteDutyCycle+2,_loRa+220
 17567                           
 17568                           ;lorawan_eu.c: 602: loRa.macStatus.prescalerModified = 1;
 17569  00534A  0102               	movlb	2	; () banked
 17570  00534C  8D03               	bsf	(_loRa+3)& (0+255),6,b
 17571  00534E                     l1255:
 17572                           
 17573                           ;lorawan_eu.c: 603: }
 17574                           ;lorawan_eu.c: 605: if (maxDCycle == 255)
 17575  00534E  0100               	movlb	0	; () banked
 17576  005350  2965               	incf	ExecuteDutyCycle@maxDCycle& (0+255),w,b
 17577  005352  E102               	bnz	l13640
 17578                           
 17579                           ; BSR set to: 0
 17580                           ;lorawan_eu.c: 606: {
 17581                           ;lorawan_eu.c: 607: loRa.macStatus.silentImmediately = 1;
 17582  005354  0102               	movlb	2	; () banked
 17583  005356  8F02               	bsf	(_loRa+2)& (0+255),7,b
 17584  005358                     l13640:
 17585                           
 17586                           ;lorawan_eu.c: 608: }
 17587                           ;lorawan_eu.c: 610: return ptr;
 17588  005358  C060  F060         	movff	ExecuteDutyCycle@ptr,?_ExecuteDutyCycle
 17589  00535C  C061  F061         	movff	ExecuteDutyCycle@ptr+1,?_ExecuteDutyCycle+1
 17590  005360  0012               	return		;funcret
 17591  005362                     __end_of_ExecuteDutyCycle:
 17592                           	opt stack 0
 17593                           tosu	equ	0xFFF
 17594                           tosh	equ	0xFFE
 17595                           tosl	equ	0xFFD
 17596                           pclath	equ	0xFFA
 17597                           tblptru	equ	0xFF8
 17598                           tblptrh	equ	0xFF7
 17599                           tblptrl	equ	0xFF6
 17600                           tablat	equ	0xFF5
 17601                           prodh	equ	0xFF4
 17602                           prodl	equ	0xFF3
 17603                           intcon	equ	0xFF2
 17604                           indf0	equ	0xFEF
 17605                           postinc0	equ	0xFEE
 17606                           plusw0	equ	0xFEB
 17607                           fsr0h	equ	0xFEA
 17608                           fsr0l	equ	0xFE9
 17609                           wreg	equ	0xFE8
 17610                           postinc1	equ	0xFE6
 17611                           postdec1	equ	0xFE5
 17612                           plusw1	equ	0xFE3
 17613                           fsr1h	equ	0xFE2
 17614                           fsr1l	equ	0xFE1
 17615                           indf2	equ	0xFDF
 17616                           postinc2	equ	0xFDE
 17617                           postdec2	equ	0xFDD
 17618                           plusw2	equ	0xFDB
 17619                           fsr2h	equ	0xFDA
 17620                           fsr2l	equ	0xFD9
 17621                           status	equ	0xFD8
 17622                           
 17623 ;; *************** function _ExecuteDevStatus *****************
 17624 ;; Defined at:
 17625 ;;		line 672 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 17626 ;; Parameters:    Size  Location     Type
 17627 ;;  ptr             2    0[BANK0 ] PTR unsigned char 
 17628 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 17629 ;; Auto vars:     Size  Location     Type
 17630 ;;		None
 17631 ;; Return value:  Size  Location     Type
 17632 ;;                  2    0[BANK0 ] PTR unsigned char 
 17633 ;; Registers used:
 17634 ;;		wreg, status,2, status,0
 17635 ;; Tracked objects:
 17636 ;;		On entry : 3F/0
 17637 ;;		On exit  : 3F/0
 17638 ;;		Unchanged: 3F/0
 17639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17640 ;;      Params:         0       2       0       0       0       0       0       0       0
 17641 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17642 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17643 ;;      Totals:         0       2       0       0       0       0       0       0       0
 17644 ;;Total ram usage:        2 bytes
 17645 ;; Hardware stack levels used:    1
 17646 ;; Hardware stack levels required when called:    7
 17647 ;; This function calls:
 17648 ;;		Nothing
 17649 ;; This function is called by:
 17650 ;;		_MacExecuteCommands
 17651 ;; This function uses a non-reentrant model
 17652 ;;
 17653                           
 17654                           	psect	text91
 17655  00617C                     __ptext91:
 17656                           	opt stack 0
 17657  00617C                     _ExecuteDevStatus:
 17658                           	opt stack 18
 17659                           
 17660                           ; BSR set to: 0
 17661                           ;lorawan_eu.c: 674: return ptr;
 17662                           
 17663                           ;incstack = 0
 17664  00617C  C060  F060         	movff	ExecuteDevStatus@ptr,?_ExecuteDevStatus
 17665  006180  C061  F061         	movff	ExecuteDevStatus@ptr+1,?_ExecuteDevStatus+1
 17666                           
 17667                           ; BSR set to: 0
 17668  006184  0012               	return		;funcret
 17669  006186                     __end_of_ExecuteDevStatus:
 17670                           	opt stack 0
 17671                           tosu	equ	0xFFF
 17672                           tosh	equ	0xFFE
 17673                           tosl	equ	0xFFD
 17674                           pclath	equ	0xFFA
 17675                           tblptru	equ	0xFF8
 17676                           tblptrh	equ	0xFF7
 17677                           tblptrl	equ	0xFF6
 17678                           tablat	equ	0xFF5
 17679                           prodh	equ	0xFF4
 17680                           prodl	equ	0xFF3
 17681                           intcon	equ	0xFF2
 17682                           indf0	equ	0xFEF
 17683                           postinc0	equ	0xFEE
 17684                           plusw0	equ	0xFEB
 17685                           fsr0h	equ	0xFEA
 17686                           fsr0l	equ	0xFE9
 17687                           wreg	equ	0xFE8
 17688                           postinc1	equ	0xFE6
 17689                           postdec1	equ	0xFE5
 17690                           plusw1	equ	0xFE3
 17691                           fsr1h	equ	0xFE2
 17692                           fsr1l	equ	0xFE1
 17693                           indf2	equ	0xFDF
 17694                           postinc2	equ	0xFDE
 17695                           postdec2	equ	0xFDD
 17696                           plusw2	equ	0xFDB
 17697                           fsr2h	equ	0xFDA
 17698                           fsr2l	equ	0xFD9
 17699                           status	equ	0xFD8
 17700                           
 17701 ;; *************** function _LORAWAN_Send *****************
 17702 ;; Defined at:
 17703 ;;		line 185 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 17704 ;; Parameters:    Size  Location     Type
 17705 ;;  confirmed       1    wreg     enum E17381
 17706 ;;  port            1  107[BANK1 ] unsigned char 
 17707 ;;  buffer          2  108[BANK1 ] PTR void 
 17708 ;;		 -> payload(2), NULL(0), 
 17709 ;;  bufferLength    1  110[BANK1 ] unsigned char 
 17710 ;; Auto vars:     Size  Location     Type
 17711 ;;  confirmed       1  127[BANK0 ] enum E17381
 17712 ;;  result          1  126[BANK0 ] enum E17354
 17713 ;; Return value:  Size  Location     Type
 17714 ;;                  1    wreg      enum E17354
 17715 ;; Registers used:
 17716 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17717 ;; Tracked objects:
 17718 ;;		On entry : 3F/1
 17719 ;;		On exit  : 3C/0
 17720 ;;		Unchanged: 0/0
 17721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17722 ;;      Params:         0       0       4       0       0       0       0       0       0
 17723 ;;      Locals:         0       2       0       0       0       0       0       0       0
 17724 ;;      Temps:          0       1       0       0       0       0       0       0       0
 17725 ;;      Totals:         0       3       4       0       0       0       0       0       0
 17726 ;;Total ram usage:        7 bytes
 17727 ;; Hardware stack levels used:    1
 17728 ;; Hardware stack levels required when called:   13
 17729 ;; This function calls:
 17730 ;;		_AssemblePacket
 17731 ;;		_LORAWAN_GetMaxPayloadSize
 17732 ;;		_RADIO_ReceiveStop
 17733 ;;		_RADIO_Transmit
 17734 ;;		_SelectChannelForTransmission
 17735 ;; This function is called by:
 17736 ;;		_AutomaticReplyCallback
 17737 ;;		_LORAWAN_RxDone
 17738 ;;		_sendPacket
 17739 ;; This function uses a non-reentrant model
 17740 ;;
 17741                           
 17742                           	psect	text92
 17743  003CF6                     __ptext92:
 17744                           	opt stack 0
 17745  003CF6                     _LORAWAN_Send:
 17746                           	opt stack 16
 17747                           
 17748                           ; BSR set to: 0
 17749                           ;incstack = 0
 17750                           ;LORAWAN_Send@confirmed stored from wreg
 17751  003CF6  0100               	movlb	0	; () banked
 17752  003CF8  6FDF               	movwf	LORAWAN_Send@confirmed& (0+255),b
 17753                           
 17754                           ;lorawan.c: 187: LorawanError_t result;
 17755                           ;lorawan.c: 189: if (loRa.macStatus.macPause == 1)
 17756  003CFA  0102               	movlb	2	; () banked
 17757  003CFC  A103               	btfss	(_loRa+3)& (0+255),0,b
 17758                           
 17759                           ; BSR set to: 2
 17760                           ;lorawan.c: 192: }
 17761                           ;lorawan.c: 194: if (loRa.macStatus.silentImmediately == 1)
 17762  003CFE  BF02               	btfsc	(_loRa+2)& (0+255),7,b
 17763  003D00  0012               	return	
 17764                           
 17765                           ; BSR set to: 2
 17766                           ;lorawan.c: 197: }
 17767                           ;lorawan.c: 199: if (loRa.macStatus.networkJoined == 0)
 17768  003D02  A902               	btfss	(_loRa+2)& (0+255),4,b
 17769  003D04  0012               	return	
 17770                           
 17771                           ; BSR set to: 2
 17772                           ;lorawan.c: 202: }
 17773                           ;lorawan.c: 204: if ( (port < 1) && (bufferLength != 0) )
 17774  003D06  0101               	movlb	1	; () banked
 17775  003D08  516B               	movf	LORAWAN_Send@port& (0+255),w,b
 17776  003D0A  E103               	bnz	l13780
 17777                           
 17778                           ; BSR set to: 1
 17779  003D0C  516E               	movf	LORAWAN_Send@bufferLength& (0+255),w,b
 17780  003D0E  E001               	bz	l13780
 17781  003D10  0012               	return	
 17782  003D12                     l13780:
 17783                           
 17784                           ; BSR set to: 1
 17785                           ;lorawan.c: 207: }
 17786                           ;lorawan.c: 210: if (bufferLength > LORAWAN_GetMaxPayloadSize ())
 17787  003D12  ECF5  F02B         	call	_LORAWAN_GetMaxPayloadSize	;wreg free
 17788  003D16  6FDD               	movwf	??_LORAWAN_Send& (0+255),b
 17789  003D18  0101               	movlb	1	; () banked
 17790  003D1A  516E               	movf	LORAWAN_Send@bufferLength& (0+255),w,b
 17791  003D1C  0100               	movlb	0	; () banked
 17792  003D1E  5DDD               	subwf	??_LORAWAN_Send& (0+255),w,b
 17793  003D20  E201               	bc	l13784
 17794  003D22  0012               	return	
 17795  003D24                     l13784:
 17796                           
 17797                           ; BSR set to: 0
 17798                           ;lorawan.c: 213: }
 17799                           ;lorawan.c: 215: if (loRa.fCntUp.value == (4294967295UL))
 17800  003D24  0102               	movlb	2	; () banked
 17801  003D26  2906               	incf	(_loRa+6)& (0+255),w,b
 17802  003D28  E108               	bnz	l13788
 17803  003D2A  2907               	incf	(_loRa+7)& (0+255),w,b
 17804  003D2C  E106               	bnz	l13788
 17805  003D2E  2908               	incf	(_loRa+8)& (0+255),w,b
 17806  003D30  E104               	bnz	l13788
 17807  003D32  2909               	incf	(_loRa+9)& (0+255),w,b
 17808  003D34  E102               	bnz	l13788
 17809                           
 17810                           ; BSR set to: 2
 17811                           ;lorawan.c: 216: {
 17812                           ;lorawan.c: 218: loRa.macStatus.rejoinNeeded = 1;
 17813  003D36  8304               	bsf	(_loRa+4)& (0+255),1,b
 17814                           
 17815                           ;lorawan.c: 219: return FRAME_COUNTER_ERROR_REJOIN_NEEDED;
 17816                           ;	Return value of _LORAWAN_Send is never used
 17817  003D38  0012               	return	
 17818  003D3A                     l13788:
 17819                           
 17820                           ; BSR set to: 2
 17821                           ;lorawan.c: 220: }
 17822                           ;lorawan.c: 222: if ((loRa.macStatus.macState != IDLE) && (CLASS_A == loRa.deviceClass))
 17823  003D3A  5102               	movf	(_loRa+2)& (0+255),w,b
 17824  003D3C  0B0F               	andlw	15
 17825  003D3E  E003               	bz	l13794
 17826                           
 17827                           ; BSR set to: 2
 17828  003D40  5112               	movf	(_loRa+18)& (0+255),w,b
 17829  003D42  E101               	bnz	l13794
 17830  003D44  0012               	return	
 17831  003D46                     l13794:
 17832                           
 17833                           ; BSR set to: 2
 17834                           ;lorawan.c: 225: }
 17835                           ;lorawan.c: 227: result = SelectChannelForTransmission (1);
 17836  003D46  0E01               	movlw	1
 17837  003D48  ECC4  F026         	call	_SelectChannelForTransmission
 17838  003D4C  6FDE               	movwf	LORAWAN_Send@result& (0+255),b
 17839                           
 17840                           ; BSR set to: 0
 17841                           ;lorawan.c: 228: if (result != OK)
 17842  003D4E  51DE               	movf	LORAWAN_Send@result& (0+255),w,b
 17843  003D50  E001               	bz	l13802
 17844  003D52  0012               	return	
 17845  003D54                     l13802:
 17846                           
 17847                           ; BSR set to: 0
 17848                           ;lorawan.c: 232: else
 17849                           ;lorawan.c: 233: {
 17850                           ;lorawan.c: 234: if (CLASS_C == loRa.deviceClass)
 17851  003D54  0E02               	movlw	2
 17852  003D56  0102               	movlb	2	; () banked
 17853  003D58  1912               	xorwf	(_loRa+18)& (0+255),w,b
 17854  003D5A  E102               	bnz	l13806
 17855                           
 17856                           ; BSR set to: 2
 17857                           ;lorawan.c: 235: {
 17858                           ;lorawan.c: 236: RADIO_ReceiveStop();
 17859  003D5C  ECDF  F02F         	call	_RADIO_ReceiveStop	;wreg free
 17860  003D60                     l13806:
 17861                           
 17862                           ;lorawan.c: 237: }
 17863                           ;lorawan.c: 239: AssemblePacket (confirmed, port, buffer, bufferLength);
 17864  003D60  C16B  F166         	movff	LORAWAN_Send@port,AssemblePacket@port
 17865  003D64  C16C  F167         	movff	LORAWAN_Send@buffer,AssemblePacket@buffer
 17866  003D68  C16D  F168         	movff	LORAWAN_Send@buffer+1,AssemblePacket@buffer+1
 17867  003D6C  C16E  F169         	movff	LORAWAN_Send@bufferLength,AssemblePacket@bufferLength
 17868  003D70  0101               	movlb	1	; () banked
 17869  003D72  6B6A               	clrf	(AssemblePacket@bufferLength+1)& (0+255),b
 17870  003D74  0100               	movlb	0	; () banked
 17871  003D76  51DF               	movf	LORAWAN_Send@confirmed& (0+255),w,b
 17872  003D78  EC3E  F00A         	call	_AssemblePacket
 17873                           
 17874                           ; BSR set to: 2
 17875                           ;lorawan.c: 241: if (RADIO_Transmit (&macBuffer[16], loRa.lastPacketLength) == OK)
 17876  003D7C  0EFF               	movlw	low (_macBuffer+16)
 17877  003D7E  0100               	movlb	0	; () banked
 17878  003D80  EC7D  F025         	call	PL170	;call to abstracted procedure
 17879  003D84  ECCE  F00E         	call	_RADIO_Transmit	;wreg free
 17880  003D88  51A6               	movf	?_RADIO_Transmit& (0+255),w,b
 17881  003D8A  11A7               	iorwf	(?_RADIO_Transmit+1)& (0+255),w,b
 17882  003D8C  A4D8               	btfss	status,2,c
 17883  003D8E  0012               	return	
 17884                           
 17885                           ; BSR set to: 0
 17886                           ;lorawan.c: 242: {
 17887                           ;lorawan.c: 243: loRa.fCntUp.value ++;
 17888  003D90  0102               	movlb	2	; () banked
 17889  003D92  2B06               	incf	(_loRa+6)& (0+255),f,b
 17890  003D94  0E00               	movlw	0
 17891  003D96  2307               	addwfc	(_loRa+7)& (0+255),f,b
 17892  003D98  2308               	addwfc	(_loRa+8)& (0+255),f,b
 17893  003D9A  2309               	addwfc	(_loRa+9)& (0+255),f,b
 17894                           
 17895                           ;lorawan.c: 245: if (CNF == confirmed)
 17896  003D9C  0100               	movlb	0	; () banked
 17897  003D9E  05DF               	decf	LORAWAN_Send@confirmed& (0+255),w,b
 17898  003DA0  E102               	bnz	l261
 17899                           
 17900                           ; BSR set to: 0
 17901                           ;lorawan.c: 246: {
 17902                           ;lorawan.c: 247: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 1;
 17903  003DA2  0102               	movlb	2	; () banked
 17904  003DA4  8100               	bsf	_loRa& (0+255),0,b
 17905  003DA6                     l261:
 17906                           
 17907                           ;lorawan.c: 248: }
 17908                           ;lorawan.c: 249: loRa.lorawanMacStatus.synchronization = 1;
 17909  003DA6  0102               	movlb	2	; () banked
 17910  003DA8  8B00               	bsf	_loRa& (0+255),5,b
 17911                           
 17912                           ; BSR set to: 2
 17913                           ;lorawan.c: 250: loRa.macStatus.macState = TRANSMISSION_OCCURRING;
 17914  003DAA  EF83  F025         	goto	PL270	;call to abstracted procedure
 17915  003DAE                     __end_of_LORAWAN_Send:
 17916                           	opt stack 0
 17917                           tosu	equ	0xFFF
 17918                           tosh	equ	0xFFE
 17919                           tosl	equ	0xFFD
 17920                           pclath	equ	0xFFA
 17921                           tblptru	equ	0xFF8
 17922                           tblptrh	equ	0xFF7
 17923                           tblptrl	equ	0xFF6
 17924                           tablat	equ	0xFF5
 17925                           prodh	equ	0xFF4
 17926                           prodl	equ	0xFF3
 17927                           intcon	equ	0xFF2
 17928                           indf0	equ	0xFEF
 17929                           postinc0	equ	0xFEE
 17930                           plusw0	equ	0xFEB
 17931                           fsr0h	equ	0xFEA
 17932                           fsr0l	equ	0xFE9
 17933                           wreg	equ	0xFE8
 17934                           postinc1	equ	0xFE6
 17935                           postdec1	equ	0xFE5
 17936                           plusw1	equ	0xFE3
 17937                           fsr1h	equ	0xFE2
 17938                           fsr1l	equ	0xFE1
 17939                           indf2	equ	0xFDF
 17940                           postinc2	equ	0xFDE
 17941                           postdec2	equ	0xFDD
 17942                           plusw2	equ	0xFDB
 17943                           fsr2h	equ	0xFDA
 17944                           fsr2l	equ	0xFD9
 17945                           status	equ	0xFD8
 17946                           
 17947 ;; *************** function _LORAWAN_GetMaxPayloadSize *****************
 17948 ;; Defined at:
 17949 ;;		line 1556 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 17950 ;; Parameters:    Size  Location     Type
 17951 ;;		None
 17952 ;; Auto vars:     Size  Location     Type
 17953 ;;  result          1   10[BANK0 ] unsigned char 
 17954 ;;  macCommandsL    1    9[BANK0 ] unsigned char 
 17955 ;; Return value:  Size  Location     Type
 17956 ;;                  1    wreg      unsigned char 
 17957 ;; Registers used:
 17958 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17959 ;; Tracked objects:
 17960 ;;		On entry : 3C/2
 17961 ;;		On exit  : 3F/0
 17962 ;;		Unchanged: 0/0
 17963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17964 ;;      Params:         0       0       0       0       0       0       0       0       0
 17965 ;;      Locals:         0       2       0       0       0       0       0       0       0
 17966 ;;      Temps:          0       1       0       0       0       0       0       0       0
 17967 ;;      Totals:         0       3       0       0       0       0       0       0       0
 17968 ;;Total ram usage:        3 bytes
 17969 ;; Hardware stack levels used:    1
 17970 ;; Hardware stack levels required when called:    8
 17971 ;; This function calls:
 17972 ;;		_CountfOptsLength
 17973 ;; This function is called by:
 17974 ;;		_LORAWAN_Send
 17975 ;;		_AckRetransmissionCallback
 17976 ;; This function uses a non-reentrant model
 17977 ;;
 17978                           
 17979                           	psect	text93
 17980  0057EA                     __ptext93:
 17981                           	opt stack 0
 17982  0057EA                     _LORAWAN_GetMaxPayloadSize:
 17983                           	opt stack 20
 17984                           
 17985                           ;lorawan.c: 1559: uint8_t macCommandsLength;
 17986                           ;lorawan.c: 1561: macCommandsLength = CountfOptsLength();
 17987                           
 17988                           ;incstack = 0
 17989  0057EA  EC2C  F024         	call	_CountfOptsLength	;wreg free
 17990  0057EE  6F69               	movwf	LORAWAN_GetMaxPayloadSize@macCommandsLength& (0+255),b
 17991                           
 17992                           ; BSR set to: 0
 17993                           ;lorawan.c: 1563: if (loRa.crtMacCmdIndex == 0)
 17994  0057F0  0102               	movlb	2	; () banked
 17995  0057F2  51A7               	movf	(_loRa+167)& (0+255),w,b
 17996  0057F4  E104               	bnz	l13426
 17997                           
 17998                           ; BSR set to: 2
 17999                           ;lorawan.c: 1564: {
 18000                           ;lorawan.c: 1565: result = maxPayloadSize[loRa.currentDataRate];
 18001  0057F6  D80D               	call	PL272	;call to abstracted procedure
 18002  0057F8  CFF5 F06A          	movff	tablat,LORAWAN_GetMaxPayloadSize@result
 18003                           
 18004                           ;lorawan.c: 1566: }
 18005  0057FC  D007               	goto	l13428
 18006  0057FE                     l13426:
 18007                           
 18008                           ; BSR set to: 2
 18009                           ;lorawan.c: 1567: else
 18010                           ;lorawan.c: 1568: {
 18011                           ;lorawan.c: 1569: result = maxPayloadSize[loRa.currentDataRate] - macCommandsLength ;
 18012  0057FE  D809               	call	PL272	;call to abstracted procedure
 18013  005800  CFF5 F068          	movff	tablat,??_LORAWAN_GetMaxPayloadSize
 18014  005804  0100               	movlb	0	; () banked
 18015  005806  5169               	movf	LORAWAN_GetMaxPayloadSize@macCommandsLength& (0+255),w,b
 18016  005808  5D68               	subwf	??_LORAWAN_GetMaxPayloadSize& (0+255),w,b
 18017  00580A  6F6A               	movwf	LORAWAN_GetMaxPayloadSize@result& (0+255),b
 18018  00580C                     l13428:
 18019                           
 18020                           ;lorawan.c: 1570: }
 18021                           ;lorawan.c: 1572: return result;
 18022  00580C  0100               	movlb	0	; () banked
 18023  00580E  516A               	movf	LORAWAN_GetMaxPayloadSize@result& (0+255),w,b
 18024                           
 18025                           ; BSR set to: 0
 18026  005810  0012               	return		;funcret
 18027  005812                     __end_of_LORAWAN_GetMaxPayloadSize:
 18028                           	opt stack 0
 18029  005812                     PL272:
 18030                           	opt stack 20
 18031  005812  0E7D               	movlw	low _maxPayloadSize
 18032  005814  25DF               	addwf	(_loRa+223)& (0+255),w,b
 18033  005816  6EF6               	movwf	tblptrl,c
 18034  005818  6AF7               	clrf	tblptrh,c
 18035  00581A  0E7F               	movlw	high _maxPayloadSize
 18036  00581C  22F7               	addwfc	tblptrh,f,c
 18037  00581E                     	if	0	;There are less than 3 active tblptr bytes
 18038  00581E                     	endif
 18039  00581E  0008               	tblrd		*
 18040  005820  0012               	return	
 18041  005822                     __end_ofPL272:
 18042                           	opt stack 0
 18043                           tosu	equ	0xFFF
 18044                           tosh	equ	0xFFE
 18045                           tosl	equ	0xFFD
 18046                           pclath	equ	0xFFA
 18047                           tblptru	equ	0xFF8
 18048                           tblptrh	equ	0xFF7
 18049                           tblptrl	equ	0xFF6
 18050                           tablat	equ	0xFF5
 18051                           prodh	equ	0xFF4
 18052                           prodl	equ	0xFF3
 18053                           intcon	equ	0xFF2
 18054                           indf0	equ	0xFEF
 18055                           postinc0	equ	0xFEE
 18056                           plusw0	equ	0xFEB
 18057                           fsr0h	equ	0xFEA
 18058                           fsr0l	equ	0xFE9
 18059                           wreg	equ	0xFE8
 18060                           postinc1	equ	0xFE6
 18061                           postdec1	equ	0xFE5
 18062                           plusw1	equ	0xFE3
 18063                           fsr1h	equ	0xFE2
 18064                           fsr1l	equ	0xFE1
 18065                           indf2	equ	0xFDF
 18066                           postinc2	equ	0xFDE
 18067                           postdec2	equ	0xFDD
 18068                           plusw2	equ	0xFDB
 18069                           fsr2h	equ	0xFDA
 18070                           fsr2l	equ	0xFD9
 18071                           status	equ	0xFD8
 18072                           
 18073 ;; *************** function _AssemblePacket *****************
 18074 ;; Defined at:
 18075 ;;		line 1672 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 18076 ;; Parameters:    Size  Location     Type
 18077 ;;  confirmed       1    wreg     unsigned char 
 18078 ;;  port            1  102[BANK1 ] unsigned char 
 18079 ;;  buffer          2  103[BANK1 ] PTR unsigned char 
 18080 ;;		 -> payload(2), NULL(0), 
 18081 ;;  bufferLength    2  105[BANK1 ] unsigned int 
 18082 ;; Auto vars:     Size  Location     Type
 18083 ;;  confirmed       1  120[BANK0 ] unsigned char 
 18084 ;;  bufferIndex     1  124[BANK0 ] unsigned char 
 18085 ;;  macCmdIdx       1  123[BANK0 ] unsigned char 
 18086 ;;  fCtrl           1  122[BANK0 ] struct .
 18087 ;;  mhdr            1  121[BANK0 ] struct .
 18088 ;; Return value:  Size  Location     Type
 18089 ;;                  1    wreg      void 
 18090 ;; Registers used:
 18091 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18092 ;; Tracked objects:
 18093 ;;		On entry : 3F/0
 18094 ;;		On exit  : 3F/2
 18095 ;;		Unchanged: 0/0
 18096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18097 ;;      Params:         0       0       5       0       0       0       0       0       0
 18098 ;;      Locals:         0       5       0       0       0       0       0       0       0
 18099 ;;      Temps:          0       2       0       0       0       0       0       0       0
 18100 ;;      Totals:         0       7       5       0       0       0       0       0       0
 18101 ;;Total ram usage:       12 bytes
 18102 ;; Hardware stack levels used:    1
 18103 ;; Hardware stack levels required when called:   12
 18104 ;; This function calls:
 18105 ;;		_AESCmac
 18106 ;;		_AssembleEncryptionBlock
 18107 ;;		_CountfOptsLength
 18108 ;;		_EncryptFRMPayload
 18109 ;;		_FindSmallestDataRate
 18110 ;;		_IncludeMacCommandsResponse
 18111 ;;		_memcpy
 18112 ;;		_memset
 18113 ;; This function is called by:
 18114 ;;		_LORAWAN_Send
 18115 ;; This function uses a non-reentrant model
 18116 ;;
 18117                           
 18118                           	psect	text94
 18119  00147C                     __ptext94:
 18120                           	opt stack 0
 18121  00147C                     _AssemblePacket:
 18122                           	opt stack 16
 18123                           
 18124                           ; BSR set to: 0
 18125                           ;incstack = 0
 18126                           ;AssemblePacket@confirmed stored from wreg
 18127  00147C  6FD8               	movwf	AssemblePacket@confirmed& (0+255),b
 18128                           
 18129                           ;lorawan.c: 1674: Mhdr_t mhdr;
 18130                           ;lorawan.c: 1675: uint8_t bufferIndex = 16;
 18131  00147E  0E10               	movlw	16
 18132  001480  0100               	movlb	0	; () banked
 18133  001482  6FDC               	movwf	AssemblePacket@bufferIndex& (0+255),b
 18134                           
 18135                           ; BSR set to: 0
 18136                           ;lorawan.c: 1676: FCtrl_t fCtrl;
 18137                           ;lorawan.c: 1677: uint8_t macCmdIdx = 0;
 18138  001484  6BDB               	clrf	AssemblePacket@macCmdIdx& (0+255),b
 18139                           
 18140                           ; BSR set to: 0
 18141                           ;lorawan.c: 1679: memset (&mhdr, 0, sizeof (mhdr) );
 18142  001486  0ED9               	movlw	low AssemblePacket@mhdr
 18143  001488  6F60               	movwf	memset@p1& (0+255),b
 18144  00148A  6B61               	clrf	(memset@p1+1)& (0+255),b
 18145  00148C  6B63               	clrf	(memset@c+1)& (0+255),b
 18146  00148E  6B62               	clrf	memset@c& (0+255),b
 18147  001490  6B65               	clrf	(memset@n+1)& (0+255),b
 18148  001492  0E01               	movlw	1
 18149  001494  6F64               	movwf	memset@n& (0+255),b
 18150  001496  ECEF  F02D         	call	_memset	;wreg free
 18151                           
 18152                           ; BSR set to: 0
 18153                           ;lorawan.c: 1680: memset (&macBuffer[0], 0, sizeof (macBuffer) );
 18154  00149A  EC68  F017         	call	PL166	;call to abstracted procedure
 18155  00149E  ECEF  F02D         	call	_memset	;wreg free
 18156                           
 18157                           ; BSR set to: 0
 18158                           ;lorawan.c: 1681: memset (aesBuffer, 0, sizeof (aesBuffer) );
 18159  0014A2  ECD1  F021         	call	PL196	;call to abstracted procedure
 18160  0014A6  ECC4  F021         	call	PL140	;call to abstracted procedure
 18161  0014AA  ECEF  F02D         	call	_memset	;wreg free
 18162                           
 18163                           ; BSR set to: 0
 18164                           ;lorawan.c: 1683: if (confirmed == 1)
 18165  0014AE  05D8               	decf	AssemblePacket@confirmed& (0+255),w,b
 18166  0014B0  E107               	bnz	l13448
 18167                           
 18168                           ; BSR set to: 0
 18169                           ;lorawan.c: 1684: {
 18170                           ;lorawan.c: 1685: mhdr.bits.mType = FRAME_TYPE_DATA_CONFIRMED_UP;
 18171  0014B2  51D9               	movf	AssemblePacket@mhdr& (0+255),w,b
 18172  0014B4  0B1F               	andlw	-225
 18173  0014B6  0980               	iorlw	128
 18174  0014B8  6FD9               	movwf	AssemblePacket@mhdr& (0+255),b
 18175                           
 18176                           ; BSR set to: 0
 18177                           ;lorawan.c: 1686: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 1;
 18178  0014BA  0102               	movlb	2	; () banked
 18179  0014BC  8100               	bsf	_loRa& (0+255),0,b
 18180                           
 18181                           ;lorawan.c: 1687: }
 18182  0014BE  D004               	goto	l746
 18183  0014C0                     l13448:
 18184                           
 18185                           ; BSR set to: 0
 18186                           ;lorawan.c: 1688: else
 18187                           ;lorawan.c: 1689: {
 18188                           ;lorawan.c: 1690: mhdr.bits.mType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 18189  0014C0  51D9               	movf	AssemblePacket@mhdr& (0+255),w,b
 18190  0014C2  0B1F               	andlw	-225
 18191  0014C4  0940               	iorlw	64
 18192  0014C6  6FD9               	movwf	AssemblePacket@mhdr& (0+255),b
 18193  0014C8                     l746:
 18194                           
 18195                           ;lorawan.c: 1691: }
 18196                           ;lorawan.c: 1692: mhdr.bits.major = 0;
 18197  0014C8  0EFC               	movlw	-4
 18198  0014CA  0100               	movlb	0	; () banked
 18199  0014CC  17D9               	andwf	AssemblePacket@mhdr& (0+255),f,b
 18200                           
 18201                           ;lorawan.c: 1693: mhdr.bits.rfu = 0;
 18202  0014CE  0EE3               	movlw	-29
 18203  0014D0  17D9               	andwf	AssemblePacket@mhdr& (0+255),f,b
 18204                           
 18205                           ; BSR set to: 0
 18206                           ;lorawan.c: 1694: macBuffer[bufferIndex++] = mhdr.value;
 18207  0014D2  0EEF               	movlw	low _macBuffer
 18208  0014D4  D917               	call	PL238	;call to abstracted procedure
 18209  0014D6  C0D9  FFDF         	movff	AssemblePacket@mhdr,indf2
 18210                           
 18211                           ; BSR set to: 0
 18212  0014DA  2BDC               	incf	AssemblePacket@bufferIndex& (0+255),f,b
 18213                           
 18214                           ; BSR set to: 0
 18215                           ;lorawan.c: 1696: memcpy (&macBuffer[bufferIndex], loRa.activationParameters.deviceAddre
      +                          ss.buffer, sizeof (loRa.activationParameters.deviceAddress.buffer) );
 18216  0014DC  0EEF               	movlw	low _macBuffer
 18217  0014DE  D8F3               	call	PL176	;call to abstracted procedure
 18218  0014E0  ECD6  F021         	call	PL246	;call to abstracted procedure
 18219  0014E4  ECBF  F021         	call	PL132	;call to abstracted procedure
 18220  0014E8  EC94  F028         	call	_memcpy	;wreg free
 18221                           
 18222                           ; BSR set to: 0
 18223                           ;lorawan.c: 1697: bufferIndex = bufferIndex + sizeof(loRa.activationParameters.deviceAdd
      +                          ress.buffer);
 18224  0014EC  0E04               	movlw	4
 18225  0014EE  27DC               	addwf	AssemblePacket@bufferIndex& (0+255),f,b
 18226                           
 18227                           ; BSR set to: 0
 18228                           ;lorawan.c: 1699: fCtrl.value = 0;
 18229  0014F0  6BDA               	clrf	AssemblePacket@fCtrl& (0+255),b
 18230                           
 18231                           ; BSR set to: 0
 18232                           ;lorawan.c: 1701: if (loRa.macStatus.adr == 1)
 18233  0014F2  0102               	movlb	2	; () banked
 18234  0014F4  AD02               	btfss	(_loRa+2)& (0+255),6,b
 18235  0014F6  D030               	goto	l747
 18236                           
 18237                           ; BSR set to: 2
 18238                           ;lorawan.c: 1702: {
 18239                           ;lorawan.c: 1703: fCtrl.adr = 1;
 18240  0014F8  0100               	movlb	0	; () banked
 18241  0014FA  8FDA               	bsf	AssemblePacket@fCtrl& (0+255),7,b
 18242                           
 18243                           ; BSR set to: 0
 18244                           ;lorawan.c: 1704: if(loRa.currentDataRate > loRa.minDataRate)
 18245  0014FC  0102               	movlb	2	; () banked
 18246  0014FE  51DF               	movf	(_loRa+223)& (0+255),w,b
 18247  001500  5DEB               	subwf	(_loRa+235)& (0+255),w,b
 18248  001502  E229               	bc	l748
 18249                           
 18250                           ; BSR set to: 2
 18251                           ;lorawan.c: 1705: {
 18252                           ;lorawan.c: 1706: fCtrl.adrAckReq = 1;
 18253  001504  0100               	movlb	0	; () banked
 18254  001506  8DDA               	bsf	AssemblePacket@fCtrl& (0+255),6,b
 18255                           
 18256                           ;lorawan.c: 1707: loRa.lorawanMacStatus.adrAckRequest = 1;
 18257  001508  0102               	movlb	2	; () banked
 18258  00150A  8900               	bsf	_loRa& (0+255),4,b
 18259                           
 18260                           ; BSR set to: 2
 18261                           ;lorawan.c: 1708: loRa.adrAckCnt ++;
 18262  00150C  4BD0               	infsnz	(_loRa+208)& (0+255),f,b
 18263  00150E  2BD1               	incf	(_loRa+209)& (0+255),f,b
 18264                           
 18265                           ; BSR set to: 2
 18266                           ;lorawan.c: 1710: if ( loRa.adrAckCnt == loRa.protocolParameters.adrAckLimit )
 18267  001510  51A2               	movf	(_loRa+162)& (0+255),w,b
 18268  001512  19D0               	xorwf	(_loRa+208)& (0+255),w,b
 18269  001514  11D1               	iorwf	(_loRa+209)& (0+255),w,b
 18270  001516  E102               	bnz	l13474
 18271                           
 18272                           ; BSR set to: 2
 18273                           ;lorawan.c: 1711: {
 18274                           ;lorawan.c: 1712: loRa.counterAdrAckDelay = 0;
 18275  001518  6BEE               	clrf	(_loRa+238)& (0+255),b
 18276  00151A  D01A               	goto	L11
 18277  00151C                     l13474:
 18278                           
 18279                           ; BSR set to: 2
 18280                           ;lorawan.c: 1716: else
 18281                           ;lorawan.c: 1717: {
 18282                           ;lorawan.c: 1718: if (loRa.adrAckCnt > loRa.protocolParameters.adrAckLimit)
 18283  00151C  51A2               	movf	(_loRa+162)& (0+255),w,b
 18284  00151E  0100               	movlb	0	; () banked
 18285  001520  6FD6               	movwf	??_AssemblePacket& (0+255),b
 18286  001522  6BD7               	clrf	(??_AssemblePacket+1)& (0+255),b
 18287  001524  0102               	movlb	2	; () banked
 18288  001526  51D0               	movf	(_loRa+208)& (0+255),w,b
 18289  001528  0100               	movlb	0	; () banked
 18290  00152A  5DD6               	subwf	??_AssemblePacket& (0+255),w,b
 18291  00152C  0102               	movlb	2	; () banked
 18292  00152E  51D1               	movf	(_loRa+209)& (0+255),w,b
 18293  001530  0100               	movlb	0	; () banked
 18294  001532  59D7               	subwfb	(??_AssemblePacket+1)& (0+255),w,b
 18295  001534  E20E               	bc	l751
 18296                           
 18297                           ; BSR set to: 0
 18298                           ;lorawan.c: 1719: {
 18299                           ;lorawan.c: 1721: loRa.counterAdrAckDelay ++ ;
 18300  001536  0102               	movlb	2	; () banked
 18301  001538  2BEE               	incf	(_loRa+238)& (0+255),f,b
 18302                           
 18303                           ; BSR set to: 2
 18304                           ;lorawan.c: 1724: if (loRa.counterAdrAckDelay > loRa.protocolParameters.adrAckDelay)
 18305  00153A  51EE               	movf	(_loRa+238)& (0+255),w,b
 18306  00153C  5DA3               	subwf	(_loRa+163)& (0+255),w,b
 18307  00153E  E20C               	bc	l747
 18308                           
 18309                           ; BSR set to: 2
 18310                           ;lorawan.c: 1725: {
 18311                           ;lorawan.c: 1726: loRa.counterAdrAckDelay = 0;
 18312  001540  6BEE               	clrf	(_loRa+238)& (0+255),b
 18313                           
 18314                           ; BSR set to: 2
 18315                           ;lorawan.c: 1728: if(0 == FindSmallestDataRate())
 18316  001542  EC66  F023         	call	_FindSmallestDataRate	;wreg free
 18317  001546  0900               	iorlw	0
 18318  001548  E107               	bnz	l747
 18319                           
 18320                           ; BSR set to: 0
 18321                           ;lorawan.c: 1729: {
 18322                           ;lorawan.c: 1731: loRa.adrAckCnt = 0;
 18323  00154A  0102               	movlb	2	; () banked
 18324  00154C  6BD0               	clrf	(_loRa+208)& (0+255),b
 18325  00154E  6BD1               	clrf	(_loRa+209)& (0+255),b
 18326  001550                     L11:
 18327                           
 18328                           ;lorawan.c: 1732: fCtrl.adrAckReq = 0;
 18329  001550  0100               	movlb	0	; () banked
 18330  001552                     l751:
 18331                           
 18332                           ; BSR set to: 0
 18333                           ;lorawan.c: 1737: else
 18334                           ;lorawan.c: 1738: {
 18335                           ;lorawan.c: 1739: fCtrl.adrAckReq = 0;
 18336  001552  9DDA               	bcf	AssemblePacket@fCtrl& (0+255),6,b
 18337                           
 18338                           ;lorawan.c: 1740: loRa.lorawanMacStatus.adrAckRequest = 0;
 18339  001554  0102               	movlb	2	; () banked
 18340  001556                     l748:
 18341                           
 18342                           ; BSR set to: 2
 18343                           ;lorawan.c: 1744: else
 18344                           ;lorawan.c: 1745: {
 18345                           ;lorawan.c: 1746: loRa.lorawanMacStatus.adrAckRequest = 0;
 18346  001556  9900               	bcf	_loRa& (0+255),4,b
 18347  001558                     l747:
 18348                           
 18349                           ;lorawan.c: 1747: }
 18350                           ;lorawan.c: 1748: }
 18351                           ;lorawan.c: 1750: if (loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage == 1)
 18352  001558  0102               	movlb	2	; () banked
 18353  00155A  A300               	btfss	_loRa& (0+255),1,b
 18354  00155C  D004               	goto	l756
 18355                           
 18356                           ; BSR set to: 2
 18357                           ;lorawan.c: 1751: {
 18358                           ;lorawan.c: 1752: fCtrl.ack = 1;
 18359  00155E  0100               	movlb	0	; () banked
 18360  001560  8BDA               	bsf	AssemblePacket@fCtrl& (0+255),5,b
 18361                           
 18362                           ;lorawan.c: 1753: loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage = 0;
 18363  001562  0102               	movlb	2	; () banked
 18364  001564  9300               	bcf	_loRa& (0+255),1,b
 18365  001566                     l756:
 18366                           
 18367                           ; BSR set to: 2
 18368                           ;lorawan.c: 1754: }
 18369                           ;lorawan.c: 1756: fCtrl.fPending = 0;
 18370  001566  0100               	movlb	0	; () banked
 18371  001568  99DA               	bcf	AssemblePacket@fCtrl& (0+255),4,b
 18372                           
 18373                           ; BSR set to: 0
 18374                           ;lorawan.c: 1758: if ( (loRa.crtMacCmdIndex == 0) || (bufferLength == 0) )
 18375  00156A  0102               	movlb	2	; () banked
 18376  00156C  51A7               	movf	(_loRa+167)& (0+255),w,b
 18377  00156E  E004               	bz	l13492
 18378                           
 18379                           ; BSR set to: 2
 18380  001570  0101               	movlb	1	; () banked
 18381  001572  5169               	movf	AssemblePacket@bufferLength& (0+255),w,b
 18382  001574  116A               	iorwf	(AssemblePacket@bufferLength+1)& (0+255),w,b
 18383  001576  E104               	bnz	l13494
 18384  001578                     l13492:
 18385                           
 18386                           ;lorawan.c: 1759: {
 18387                           ;lorawan.c: 1760: fCtrl.fOptsLen = 0;
 18388  001578  0EF0               	movlw	-16
 18389  00157A  0100               	movlb	0	; () banked
 18390  00157C  17DA               	andwf	AssemblePacket@fCtrl& (0+255),f,b
 18391                           
 18392                           ;lorawan.c: 1761: }
 18393  00157E  D007               	goto	l13496
 18394  001580                     l13494:
 18395                           
 18396                           ; BSR set to: 1
 18397                           ;lorawan.c: 1763: else
 18398                           ;lorawan.c: 1764: {
 18399                           ;lorawan.c: 1765: fCtrl.fOptsLen = CountfOptsLength();
 18400  001580  EC2C  F024         	call	_CountfOptsLength	;wreg free
 18401  001584  6FD6               	movwf	??_AssemblePacket& (0+255),b
 18402  001586  19DA               	xorwf	AssemblePacket@fCtrl& (0+255),w,b
 18403  001588  0BF0               	andlw	-16
 18404  00158A  19D6               	xorwf	??_AssemblePacket& (0+255),w,b
 18405  00158C  6FDA               	movwf	AssemblePacket@fCtrl& (0+255),b
 18406  00158E                     l13496:
 18407                           
 18408                           ; BSR set to: 0
 18409                           ;lorawan.c: 1766: }
 18410                           ;lorawan.c: 1767: macBuffer[bufferIndex++] = fCtrl.value;
 18411  00158E  0EEF               	movlw	low _macBuffer
 18412  001590  D8B9               	call	PL238	;call to abstracted procedure
 18413  001592  C0DA  FFDF         	movff	AssemblePacket@fCtrl,indf2
 18414                           
 18415                           ; BSR set to: 0
 18416  001596  2BDC               	incf	AssemblePacket@bufferIndex& (0+255),f,b
 18417                           
 18418                           ; BSR set to: 0
 18419                           ;lorawan.c: 1769: memcpy (&macBuffer[bufferIndex], &loRa.fCntUp.members.valueLow, sizeof
      +                           (loRa.fCntUp.members.valueLow) );
 18420  001598  0EEF               	movlw	low _macBuffer
 18421  00159A  D895               	call	PL176	;call to abstracted procedure
 18422  00159C  0E06               	movlw	low (_loRa+6)
 18423  00159E  6F62               	movwf	memcpy@s1& (0+255),b
 18424  0015A0  0E02               	movlw	high (_loRa+6)
 18425  0015A2  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 18426  0015A4  6B65               	clrf	(memcpy@n+1)& (0+255),b
 18427  0015A6  0E02               	movlw	2
 18428  0015A8  6F64               	movwf	memcpy@n& (0+255),b
 18429  0015AA  EC94  F028         	call	_memcpy	;wreg free
 18430                           
 18431                           ; BSR set to: 0
 18432                           ;lorawan.c: 1771: bufferIndex = bufferIndex + sizeof(loRa.fCntUp.members.valueLow);
 18433  0015AE  0E02               	movlw	2
 18434  0015B0  27DC               	addwf	AssemblePacket@bufferIndex& (0+255),f,b
 18435                           
 18436                           ; BSR set to: 0
 18437                           ;lorawan.c: 1773: if ( (loRa.crtMacCmdIndex != 0) && (bufferLength != 0) )
 18438  0015B2  0102               	movlb	2	; () banked
 18439  0015B4  51A7               	movf	(_loRa+167)& (0+255),w,b
 18440  0015B6  E00F               	bz	l13510
 18441                           
 18442                           ; BSR set to: 2
 18443  0015B8  0101               	movlb	1	; () banked
 18444  0015BA  5169               	movf	AssemblePacket@bufferLength& (0+255),w,b
 18445  0015BC  116A               	iorwf	(AssemblePacket@bufferLength+1)& (0+255),w,b
 18446  0015BE  E00B               	bz	l13510
 18447                           
 18448                           ; BSR set to: 1
 18449                           ;lorawan.c: 1774: {
 18450                           ;lorawan.c: 1775: IncludeMacCommandsResponse (macBuffer, &bufferIndex, 1);
 18451  0015C0  0EEF               	movlw	low _macBuffer
 18452  0015C2  0100               	movlb	0	; () banked
 18453  0015C4  6F60               	movwf	IncludeMacCommandsResponse@macBuffer& (0+255),b
 18454  0015C6  0E05               	movlw	high _macBuffer
 18455  0015C8  6F61               	movwf	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),b
 18456  0015CA  0EDC               	movlw	low AssemblePacket@bufferIndex
 18457  0015CC  6F62               	movwf	IncludeMacCommandsResponse@pBufferIndex& (0+255),b
 18458  0015CE  0E01               	movlw	1
 18459  0015D0  6F63               	movwf	IncludeMacCommandsResponse@bIncludeInFopts& (0+255),b
 18460  0015D2  ECC2  F00F         	call	_IncludeMacCommandsResponse	;wreg free
 18461  0015D6                     l13510:
 18462                           
 18463                           ;lorawan.c: 1776: }
 18464                           ;lorawan.c: 1778: macBuffer[bufferIndex++] = port;
 18465  0015D6  0EEF               	movlw	low _macBuffer
 18466  0015D8  0100               	movlb	0	; () banked
 18467  0015DA  D894               	call	PL238	;call to abstracted procedure
 18468  0015DC  C166  FFDF         	movff	AssemblePacket@port,indf2
 18469                           
 18470                           ; BSR set to: 0
 18471  0015E0  2BDC               	incf	AssemblePacket@bufferIndex& (0+255),f,b
 18472                           
 18473                           ; BSR set to: 0
 18474                           ;lorawan.c: 1780: if (bufferLength != 0)
 18475  0015E2  0101               	movlb	1	; () banked
 18476  0015E4  5169               	movf	AssemblePacket@bufferLength& (0+255),w,b
 18477  0015E6  116A               	iorwf	(AssemblePacket@bufferLength+1)& (0+255),w,b
 18478  0015E8  E01C               	bz	l13522
 18479                           
 18480                           ; BSR set to: 1
 18481                           ;lorawan.c: 1781: {
 18482                           ;lorawan.c: 1782: memcpy (&macBuffer[bufferIndex], buffer, bufferLength);
 18483  0015EA  0EEF               	movlw	low _macBuffer
 18484  0015EC  0100               	movlb	0	; () banked
 18485  0015EE  D86B               	call	PL176	;call to abstracted procedure
 18486  0015F0  C167  F062         	movff	AssemblePacket@buffer,memcpy@s1
 18487  0015F4  C168  F063         	movff	AssemblePacket@buffer+1,memcpy@s1+1
 18488  0015F8  C169  F064         	movff	AssemblePacket@bufferLength,memcpy@n
 18489  0015FC  C16A  F065         	movff	AssemblePacket@bufferLength+1,memcpy@n+1
 18490  001600  EC94  F028         	call	_memcpy	;wreg free
 18491                           
 18492                           ; BSR set to: 0
 18493                           ;lorawan.c: 1783: EncryptFRMPayload (buffer, bufferLength, 0, loRa.fCntUp.value, loRa.ac
      +                          tivationParameters.applicationSessionKey, bufferIndex, macBuffer, 0);
 18494  001604  C167  F0A0         	movff	AssemblePacket@buffer,EncryptFRMPayload@buffer
 18495  001608  C168  F0A1         	movff	AssemblePacket@buffer+1,EncryptFRMPayload@buffer+1
 18496  00160C  C169  F0A2         	movff	AssemblePacket@bufferLength,EncryptFRMPayload@bufferLength
 18497  001610  D860               	call	PL198	;call to abstracted procedure
 18498  001612  D882               	call	PL416	;call to abstracted procedure
 18499  001614  D86E               	call	PL216	;call to abstracted procedure
 18500  001616  ECDD  F015         	call	_EncryptFRMPayload	;wreg free
 18501                           
 18502                           ; BSR set to: 0
 18503                           ;lorawan.c: 1784: bufferIndex = bufferIndex + bufferLength;
 18504  00161A  0101               	movlb	1	; () banked
 18505  00161C  5169               	movf	AssemblePacket@bufferLength& (0+255),w,b
 18506  00161E  0100               	movlb	0	; () banked
 18507  001620  D019               	goto	L10
 18508  001622                     l13522:
 18509                           
 18510                           ; BSR set to: 1
 18511                           ;lorawan.c: 1786: else if ( (loRa.crtMacCmdIndex > 0) )
 18512  001622  0102               	movlb	2	; () banked
 18513  001624  51A7               	movf	(_loRa+167)& (0+255),w,b
 18514  001626  E017               	bz	l13528
 18515                           
 18516                           ; BSR set to: 2
 18517                           ;lorawan.c: 1787: {
 18518                           ;lorawan.c: 1790: IncludeMacCommandsResponse (radioBuffer, &macCmdIdx, 0 );
 18519  001628  0EE0               	movlw	low _radioBuffer
 18520  00162A  0100               	movlb	0	; () banked
 18521  00162C  6F60               	movwf	IncludeMacCommandsResponse@macBuffer& (0+255),b
 18522  00162E  0E04               	movlw	high _radioBuffer
 18523  001630  6F61               	movwf	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),b
 18524  001632  0EDB               	movlw	low AssemblePacket@macCmdIdx
 18525  001634  6F62               	movwf	IncludeMacCommandsResponse@pBufferIndex& (0+255),b
 18526  001636  6B63               	clrf	IncludeMacCommandsResponse@bIncludeInFopts& (0+255),b
 18527  001638  ECC2  F00F         	call	_IncludeMacCommandsResponse	;wreg free
 18528                           
 18529                           ;lorawan.c: 1791: EncryptFRMPayload (radioBuffer, macCmdIdx, 0, loRa.fCntUp.value, loRa.
      +                          activationParameters.networkSessionKey, bufferIndex, macBuffer, 0);
 18530  00163C  0EE0               	movlw	low _radioBuffer
 18531  00163E  6FA0               	movwf	EncryptFRMPayload@buffer& (0+255),b
 18532  001640  0E04               	movlw	high _radioBuffer
 18533  001642  6FA1               	movwf	(EncryptFRMPayload@buffer+1)& (0+255),b
 18534  001644  C0DB  F0A2         	movff	AssemblePacket@macCmdIdx,EncryptFRMPayload@bufferLength
 18535  001648  D844               	call	PL198	;call to abstracted procedure
 18536  00164A  D862               	call	PL414	;call to abstracted procedure
 18537  00164C  D852               	call	PL216	;call to abstracted procedure
 18538  00164E  ECDD  F015         	call	_EncryptFRMPayload	;wreg free
 18539                           
 18540                           ; BSR set to: 0
 18541                           ;lorawan.c: 1792: bufferIndex = bufferIndex + macCmdIdx;
 18542  001652  51DB               	movf	AssemblePacket@macCmdIdx& (0+255),w,b
 18543  001654                     L10:
 18544  001654  27DC               	addwf	AssemblePacket@bufferIndex& (0+255),f,b
 18545  001656                     l13528:
 18546                           
 18547                           ;lorawan.c: 1793: }
 18548                           ;lorawan.c: 1795: AssembleEncryptionBlock (0, loRa.fCntUp.value, bufferIndex - 16, 0x49,
      +                           0);
 18549  001656  C206  F06A         	movff	_loRa+6,AssembleEncryptionBlock@frameCounter
 18550  00165A  C207  F06B         	movff	_loRa+7,AssembleEncryptionBlock@frameCounter+1
 18551  00165E  C208  F06C         	movff	_loRa+8,AssembleEncryptionBlock@frameCounter+2
 18552  001662  C209  F06D         	movff	_loRa+9,AssembleEncryptionBlock@frameCounter+3
 18553  001666  0100               	movlb	0	; () banked
 18554  001668  51DC               	movf	AssemblePacket@bufferIndex& (0+255),w,b
 18555  00166A  0FF0               	addlw	240
 18556  00166C  6F6E               	movwf	AssembleEncryptionBlock@blockId& (0+255),b
 18557  00166E  0E49               	movlw	73
 18558  001670  6F6F               	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 18559  001672  0E00               	movlw	0
 18560  001674  6B70               	clrf	AssembleEncryptionBlock@multicastStatus& (0+255),b
 18561  001676  EC8F  F021         	call	_AssembleEncryptionBlock
 18562                           
 18563                           ; BSR set to: 0
 18564                           ;lorawan.c: 1796: memcpy (&macBuffer[0], aesBuffer, sizeof (aesBuffer));
 18565  00167A  0EEF               	movlw	low _macBuffer
 18566  00167C  6F60               	movwf	memcpy@d1& (0+255),b
 18567  00167E  0E05               	movlw	high _macBuffer
 18568  001680  ECB7  F003         	call	PL124	;call to abstracted procedure
 18569  001684  EC94  F028         	call	_memcpy	;wreg free
 18570                           
 18571                           ; BSR set to: 0
 18572                           ;lorawan.c: 1798: AESCmac (loRa.activationParameters.networkSessionKey, aesBuffer, macBu
      +                          ffer, bufferIndex );
 18573  001688  D82E               	call	PL212	;call to abstracted procedure
 18574  00168A  6FCA               	movwf	AESCmac@output& (0+255),b
 18575  00168C  0E01               	movlw	high _aesBuffer
 18576  00168E  6FCB               	movwf	(AESCmac@output+1)& (0+255),b
 18577  001690  0EEF               	movlw	low _macBuffer
 18578  001692  6FCC               	movwf	AESCmac@input& (0+255),b
 18579  001694  0E05               	movlw	high _macBuffer
 18580  001696  6FCD               	movwf	(AESCmac@input+1)& (0+255),b
 18581  001698  C0DC  F0CE         	movff	AssemblePacket@bufferIndex,AESCmac@size
 18582  00169C  ECD2  F008         	call	_AESCmac	;wreg free
 18583                           
 18584                           ; BSR set to: 0
 18585                           ;lorawan.c: 1800: memcpy (&macBuffer[bufferIndex], aesBuffer, 4);
 18586  0016A0  0EEF               	movlw	low _macBuffer
 18587  0016A2  D811               	call	PL176	;call to abstracted procedure
 18588  0016A4  0EB5               	movlw	low _aesBuffer
 18589  0016A6  6F62               	movwf	memcpy@s1& (0+255),b
 18590  0016A8  0E01               	movlw	high _aesBuffer
 18591  0016AA  ECBF  F021         	call	PL132	;call to abstracted procedure
 18592  0016AE  EC94  F028         	call	_memcpy	;wreg free
 18593                           
 18594                           ; BSR set to: 0
 18595                           ;lorawan.c: 1801: bufferIndex = bufferIndex + 4;
 18596  0016B2  0E04               	movlw	4
 18597  0016B4  27DC               	addwf	AssemblePacket@bufferIndex& (0+255),f,b
 18598                           
 18599                           ; BSR set to: 0
 18600                           ;lorawan.c: 1803: loRa.lastPacketLength = bufferIndex - 16;
 18601  0016B6  0EF0               	movlw	240
 18602  0016B8  25DC               	addwf	AssemblePacket@bufferIndex& (0+255),w,b
 18603  0016BA  0102               	movlb	2	; () banked
 18604  0016BC  6FD4               	movwf	(_loRa+212)& (0+255),b
 18605  0016BE  6BD5               	clrf	(_loRa+213)& (0+255),b
 18606  0016C0  0EFF               	movlw	255
 18607  0016C2  23D5               	addwfc	(_loRa+213)& (0+255),f,b
 18608                           
 18609                           ; BSR set to: 2
 18610  0016C4  0CFF               	retlw	255	;funcret
 18611  0016C6                     __end_of_AssemblePacket:
 18612                           	opt stack 0
 18613  0016C6                     PL176:
 18614                           	opt stack 16
 18615  0016C6  25DC               	addwf	AssemblePacket@bufferIndex& (0+255),w,b
 18616  0016C8  6F60               	movwf	memcpy@d1& (0+255),b
 18617  0016CA  6B61               	clrf	(memcpy@d1+1)& (0+255),b
 18618  0016CC  0E05               	movlw	high _macBuffer
 18619  0016CE  2361               	addwfc	(memcpy@d1+1)& (0+255),f,b
 18620  0016D0  0012               	return	
 18621  0016D2                     __end_ofPL176:
 18622                           	opt stack 0
 18623  0016D2                     PL198:
 18624                           	opt stack 16
 18625  0016D2  6BA3               	clrf	EncryptFRMPayload@dir& (0+255),b
 18626  0016D4  C206  F0A4         	movff	_loRa+6,EncryptFRMPayload@frameCounter
 18627  0016D8  C207  F0A5         	movff	_loRa+7,EncryptFRMPayload@frameCounter+1
 18628  0016DC  C208  F0A6         	movff	_loRa+8,EncryptFRMPayload@frameCounter+2
 18629  0016E0  C209  F0A7         	movff	_loRa+9,EncryptFRMPayload@frameCounter+3
 18630  0016E4  0012               	return	
 18631  0016E6                     __end_ofPL198:
 18632                           	opt stack 0
 18633  0016E6                     PL212:
 18634                           	opt stack 12
 18635  0016E6  0E22               	movlw	low (_loRa+34)
 18636  0016E8  6FC8               	movwf	AESCmac@key& (0+255),b
 18637  0016EA  0E02               	movlw	high (_loRa+34)
 18638  0016EC  6FC9               	movwf	(AESCmac@key+1)& (0+255),b
 18639  0016EE  0EB5               	movlw	low _aesBuffer
 18640  0016F0  0012               	return	
 18641  0016F2                     __end_ofPL212:
 18642                           	opt stack 0
 18643  0016F2                     PL216:
 18644                           	opt stack 16
 18645  0016F2  6FA9               	movwf	(EncryptFRMPayload@key+1)& (0+255),b
 18646  0016F4  C0DC  F0AA         	movff	AssemblePacket@bufferIndex,EncryptFRMPayload@macBufferIndex
 18647  0016F8  0EEF               	movlw	low _macBuffer
 18648  0016FA  6FAB               	movwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),b
 18649  0016FC  0E05               	movlw	high _macBuffer
 18650  0016FE  6FAC               	movwf	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),b
 18651  001700  6BAD               	clrf	EncryptFRMPayload@multicastStatus& (0+255),b
 18652  001702  0012               	return	
 18653  001704                     __end_ofPL216:
 18654                           	opt stack 0
 18655  001704                     PL238:
 18656                           	opt stack 16
 18657  001704  25DC               	addwf	AssemblePacket@bufferIndex& (0+255),w,b
 18658  001706  6ED9               	movwf	fsr2l,c
 18659  001708  6ADA               	clrf	fsr2h,c
 18660  00170A  0E05               	movlw	high _macBuffer
 18661  00170C  22DA               	addwfc	fsr2h,f,c
 18662  00170E  0012               	return	
 18663  001710                     __end_ofPL238:
 18664                           	opt stack 0
 18665  001710                     PL414:
 18666                           	opt stack 12
 18667  001710  0E22               	movlw	low (_loRa+34)
 18668  001712  6FA8               	movwf	EncryptFRMPayload@key& (0+255),b
 18669  001714  0E02               	movlw	high (_loRa+34)
 18670  001716  0012               	return	
 18671  001718                     __end_ofPL414:
 18672                           	opt stack 0
 18673  001718                     PL416:
 18674                           	opt stack 12
 18675  001718  0E32               	movlw	low (_loRa+50)
 18676  00171A  6FA8               	movwf	EncryptFRMPayload@key& (0+255),b
 18677  00171C  0E02               	movlw	high (_loRa+50)
 18678  00171E  0012               	return	
 18679  001720                     __end_ofPL416:
 18680                           	opt stack 0
 18681                           tosu	equ	0xFFF
 18682                           tosh	equ	0xFFE
 18683                           tosl	equ	0xFFD
 18684                           pclath	equ	0xFFA
 18685                           tblptru	equ	0xFF8
 18686                           tblptrh	equ	0xFF7
 18687                           tblptrl	equ	0xFF6
 18688                           tablat	equ	0xFF5
 18689                           prodh	equ	0xFF4
 18690                           prodl	equ	0xFF3
 18691                           intcon	equ	0xFF2
 18692                           indf0	equ	0xFEF
 18693                           postinc0	equ	0xFEE
 18694                           plusw0	equ	0xFEB
 18695                           fsr0h	equ	0xFEA
 18696                           fsr0l	equ	0xFE9
 18697                           wreg	equ	0xFE8
 18698                           postinc1	equ	0xFE6
 18699                           postdec1	equ	0xFE5
 18700                           plusw1	equ	0xFE3
 18701                           fsr1h	equ	0xFE2
 18702                           fsr1l	equ	0xFE1
 18703                           indf2	equ	0xFDF
 18704                           postinc2	equ	0xFDE
 18705                           postdec2	equ	0xFDD
 18706                           plusw2	equ	0xFDB
 18707                           fsr2h	equ	0xFDA
 18708                           fsr2l	equ	0xFD9
 18709                           status	equ	0xFD8
 18710                           
 18711 ;; *************** function _IncludeMacCommandsResponse *****************
 18712 ;; Defined at:
 18713 ;;		line 1845 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 18714 ;; Parameters:    Size  Location     Type
 18715 ;;  macBuffer       2    0[BANK0 ] PTR unsigned char 
 18716 ;;		 -> radioBuffer(271), macBuffer(271), 
 18717 ;;  pBufferIndex    1    2[BANK0 ] PTR unsigned char 
 18718 ;;		 -> AssemblePacket@macCmdIdx(1), AssemblePacket@bufferIndex(1), 
 18719 ;;  bIncludeInFo    1    3[BANK0 ] unsigned char 
 18720 ;; Auto vars:     Size  Location     Type
 18721 ;;  bufferIndex     1   11[BANK0 ] unsigned char 
 18722 ;;  i               1   10[BANK0 ] unsigned char 
 18723 ;; Return value:  Size  Location     Type
 18724 ;;                  1    wreg      void 
 18725 ;; Registers used:
 18726 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18727 ;; Tracked objects:
 18728 ;;		On entry : 3F/0
 18729 ;;		On exit  : 3F/0
 18730 ;;		Unchanged: 0/0
 18731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18732 ;;      Params:         0       4       0       0       0       0       0       0       0
 18733 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18734 ;;      Temps:          0       6       0       0       0       0       0       0       0
 18735 ;;      Totals:         0      12       0       0       0       0       0       0       0
 18736 ;;Total ram usage:       12 bytes
 18737 ;; Hardware stack levels used:    1
 18738 ;; Hardware stack levels required when called:    8
 18739 ;; This function calls:
 18740 ;;		_RADIO_GetPacketSnr
 18741 ;; This function is called by:
 18742 ;;		_AssemblePacket
 18743 ;; This function uses a non-reentrant model
 18744 ;;
 18745                           
 18746                           	psect	text95
 18747  001F84                     __ptext95:
 18748                           	opt stack 0
 18749  001F84                     _IncludeMacCommandsResponse:
 18750                           	opt stack 0
 18751                           
 18752                           ; BSR set to: 0
 18753                           ;lorawan.c: 1848: uint8_t bufferIndex = *pBufferIndex;
 18754                           
 18755                           ; BSR set to: 0
 18756                           
 18757                           ; BSR set to: 2
 18758                           ;incstack = 0
 18759  001F84  D8E8               	call	PL394	;call to abstracted procedure
 18760  001F86  6F6B               	movwf	IncludeMacCommandsResponse@bufferIndex& (0+255),b
 18761                           
 18762                           ; BSR set to: 0
 18763                           ;lorawan.c: 1850: for(i = 0; i < loRa.crtMacCmdIndex ; i++)
 18764  001F88  6B6A               	clrf	IncludeMacCommandsResponse@i& (0+255),b
 18765  001F8A  D0CA               	goto	l13158
 18766  001F8C                     l13062:
 18767                           
 18768                           ; BSR set to: 0
 18769                           ;lorawan.c: 1851: {
 18770                           ;lorawan.c: 1852: if((bIncludeInFopts) && (loRa.macCommands[i].receivedCid != 0xFF))
 18771  001F8C  5163               	movf	IncludeMacCommandsResponse@bIncludeInFopts& (0+255),w,b
 18772  001F8E  E101 D0B4          	bz	l13154
 18773                           
 18774                           ; BSR set to: 0
 18775  001F92  516A               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18776  001F94  D8D8               	call	PL16	;call to abstracted procedure
 18777  001F96  28DE               	incf	postinc2,w,c
 18778  001F98  E101 D0AF          	bz	l13154
 18779                           
 18780                           ; BSR set to: 0
 18781                           ;lorawan.c: 1853: {
 18782                           ;lorawan.c: 1854: if((bufferIndex - (*pBufferIndex) + macEndDevCmdReplyLen[loRa.macComma
      +                          nds[i].receivedCid - 2]) > 0x0F)
 18783  001F9C  0EFE               	movlw	254
 18784  001F9E  6F64               	movwf	??_IncludeMacCommandsResponse& (0+255),b
 18785  001FA0  6965               	setf	(??_IncludeMacCommandsResponse+1)& (0+255),b
 18786  001FA2  516A               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18787  001FA4  D8D0               	call	PL16	;call to abstracted procedure
 18788  001FA6  50DF               	movf	indf2,w,c
 18789  001FA8  6F66               	movwf	(??_IncludeMacCommandsResponse+2)& (0+255),b
 18790  001FAA  6B67               	clrf	(??_IncludeMacCommandsResponse+3)& (0+255),b
 18791  001FAC  5164               	movf	??_IncludeMacCommandsResponse& (0+255),w,b
 18792  001FAE  2766               	addwf	(??_IncludeMacCommandsResponse+2)& (0+255),f,b
 18793  001FB0  5165               	movf	(??_IncludeMacCommandsResponse+1)& (0+255),w,b
 18794  001FB2  2367               	addwfc	(??_IncludeMacCommandsResponse+3)& (0+255),f,b
 18795  001FB4  0E9B               	movlw	low _macEndDevCmdReplyLen
 18796  001FB6  2566               	addwf	(??_IncludeMacCommandsResponse+2)& (0+255),w,b
 18797  001FB8  6EF6               	movwf	tblptrl,c
 18798  001FBA  0E7F               	movlw	high _macEndDevCmdReplyLen
 18799  001FBC  2167               	addwfc	(??_IncludeMacCommandsResponse+3)& (0+255),w,b
 18800  001FBE  6EF7               	movwf	tblptrh,c
 18801  001FC0                     	if	0	;There are less than 3 active tblptr bytes
 18802  001FC0                     	endif
 18803  001FC0  0008               	tblrd		*
 18804  001FC2  50F5               	movf	tablat,w,c
 18805  001FC4  C06B  F068         	movff	IncludeMacCommandsResponse@bufferIndex,??_IncludeMacCommandsResponse+4
 18806  001FC8  6B69               	clrf	(??_IncludeMacCommandsResponse+5)& (0+255),b
 18807  001FCA  2768               	addwf	(??_IncludeMacCommandsResponse+4)& (0+255),f,b
 18808  001FCC  0E00               	movlw	0
 18809  001FCE  2369               	addwfc	(??_IncludeMacCommandsResponse+5)& (0+255),f,b
 18810  001FD0  D8C2               	call	PL394	;call to abstracted procedure
 18811  001FD2  5F68               	subwf	(??_IncludeMacCommandsResponse+4)& (0+255),f,b
 18812  001FD4  0E00               	movlw	0
 18813  001FD6  5B69               	subwfb	(??_IncludeMacCommandsResponse+5)& (0+255),f,b
 18814  001FD8  BF69               	btfsc	(??_IncludeMacCommandsResponse+5)& (0+255),7,b
 18815  001FDA  D08F               	goto	l13154
 18816  001FDC  5169               	movf	(??_IncludeMacCommandsResponse+5)& (0+255),w,b
 18817  001FDE  E105               	bnz	u14370
 18818  001FE0  0E10               	movlw	16
 18819  001FE2  5D68               	subwf	(??_IncludeMacCommandsResponse+4)& (0+255),w,b
 18820  001FE4  E301 D0A2          	bc	l13160
 18821  001FE8  D088               	goto	l13154
 18822  001FEA                     u14370:
 18823  001FEA  D0A0               	goto	l13160
 18824  001FEC                     l13070:
 18825                           
 18826                           ; BSR set to: 0
 18827                           ;lorawan.c: 1862: {
 18828                           ;lorawan.c: 1863: macBuffer[bufferIndex++] = LINK_ADR_CID;
 18829  001FEC  D8A5               	call	PL14	;call to abstracted procedure
 18830  001FEE  0E03               	movlw	3
 18831  001FF0  6EDF               	movwf	indf2,c
 18832                           
 18833                           ; BSR set to: 0
 18834  001FF2  2B6B               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 18835                           
 18836                           ; BSR set to: 0
 18837                           ;lorawan.c: 1864: macBuffer[bufferIndex] = 0x00;
 18838  001FF4  D8A1               	call	PL14	;call to abstracted procedure
 18839  001FF6  6ADF               	clrf	indf2,c
 18840                           
 18841                           ; BSR set to: 0
 18842                           ;lorawan.c: 1865: if (loRa.macCommands[i].channelMaskAck == 1)
 18843  001FF8  516A               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18844  001FFA  ECCB  F015         	call	PL2	;call to abstracted procedure
 18845  001FFE  A0DF               	btfss	indf2,0,c
 18846  002000  D004               	goto	l13080
 18847                           
 18848                           ; BSR set to: 2
 18849                           ;lorawan.c: 1866: {
 18850                           ;lorawan.c: 1867: macBuffer[bufferIndex] |= 0x01;
 18851  002002  0100               	movlb	0	; () banked
 18852  002004  D899               	call	PL14	;call to abstracted procedure
 18853  002006  0E00               	movlw	0
 18854  002008  80DB               	bsf	plusw2,0,c
 18855  00200A                     l13080:
 18856                           
 18857                           ;lorawan.c: 1868: }
 18858                           ;lorawan.c: 1870: if (loRa.macCommands[i].dataRateAck == 1)
 18859  00200A  0100               	movlb	0	; () banked
 18860  00200C  516A               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18861  00200E  ECCB  F015         	call	PL2	;call to abstracted procedure
 18862  002012  A2DF               	btfss	indf2,1,c
 18863  002014  D003               	goto	l13084
 18864                           
 18865                           ; BSR set to: 2
 18866                           ;lorawan.c: 1871: {
 18867                           ;lorawan.c: 1872: macBuffer[bufferIndex] |= 0x02;
 18868  002016  D890               	call	PL14	;call to abstracted procedure
 18869  002018  0E00               	movlw	0
 18870  00201A  82DB               	bsf	plusw2,1,c
 18871  00201C                     l13084:
 18872                           
 18873                           ;lorawan.c: 1873: }
 18874                           ;lorawan.c: 1875: if (loRa.macCommands[i].powerAck == 1)
 18875  00201C  0100               	movlb	0	; () banked
 18876  00201E  516A               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18877  002020  ECCB  F015         	call	PL2	;call to abstracted procedure
 18878  002024  A4DF               	btfss	indf2,2,c
 18879  002026  D004               	goto	l13088
 18880  002028                     l13086:
 18881                           
 18882                           ; BSR set to: 2
 18883                           ;lorawan.c: 1876: {
 18884                           ;lorawan.c: 1877: macBuffer[bufferIndex] |= 0x04;
 18885  002028  0100               	movlb	0	; () banked
 18886  00202A  D886               	call	PL14	;call to abstracted procedure
 18887  00202C  0E00               	movlw	0
 18888  00202E  84DB               	bsf	plusw2,2,c
 18889  002030                     l13088:
 18890                           
 18891                           ;lorawan.c: 1878: }
 18892                           ;lorawan.c: 1879: bufferIndex ++;
 18893  002030  0100               	movlb	0	; () banked
 18894  002032  2B6B               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 18895                           
 18896                           ;lorawan.c: 1880: }
 18897                           ;lorawan.c: 1881: break;
 18898  002034  D074               	goto	l13156
 18899  002036                     l13090:
 18900                           
 18901                           ; BSR set to: 0
 18902                           ;lorawan.c: 1884: {
 18903                           ;lorawan.c: 1885: macBuffer[bufferIndex++] = RX2_SETUP_CID;
 18904  002036  D880               	call	PL14	;call to abstracted procedure
 18905  002038  0E05               	movlw	5
 18906  00203A  6EDF               	movwf	indf2,c
 18907                           
 18908                           ; BSR set to: 0
 18909  00203C  2B6B               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 18910                           
 18911                           ; BSR set to: 0
 18912                           ;lorawan.c: 1886: macBuffer[bufferIndex] = 0x00;
 18913  00203E  D87C               	call	PL14	;call to abstracted procedure
 18914  002040  6ADF               	clrf	indf2,c
 18915                           
 18916                           ; BSR set to: 0
 18917                           ;lorawan.c: 1887: if (loRa.macCommands[i].channelAck == 1)
 18918  002042  516A               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18919  002044  ECCB  F015         	call	PL2	;call to abstracted procedure
 18920  002048  A6DF               	btfss	indf2,3,c
 18921  00204A  D004               	goto	l13100
 18922                           
 18923                           ; BSR set to: 2
 18924                           ;lorawan.c: 1888: {
 18925                           ;lorawan.c: 1889: macBuffer[bufferIndex] |= 0x01;
 18926  00204C  0100               	movlb	0	; () banked
 18927  00204E  D874               	call	PL14	;call to abstracted procedure
 18928  002050  0E00               	movlw	0
 18929  002052  80DB               	bsf	plusw2,0,c
 18930  002054                     l13100:
 18931                           
 18932                           ;lorawan.c: 1890: }
 18933                           ;lorawan.c: 1892: if (loRa.macCommands[i].dataRateReceiveWindowAck == 1)
 18934  002054  0100               	movlb	0	; () banked
 18935  002056  516A               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18936  002058  ECCB  F015         	call	PL2	;call to abstracted procedure
 18937  00205C  A8DF               	btfss	indf2,4,c
 18938  00205E  D003               	goto	l13104
 18939                           
 18940                           ; BSR set to: 2
 18941                           ;lorawan.c: 1893: {
 18942                           ;lorawan.c: 1894: macBuffer[bufferIndex] |= 0x02;
 18943  002060  D86B               	call	PL14	;call to abstracted procedure
 18944  002062  0E00               	movlw	0
 18945  002064  82DB               	bsf	plusw2,1,c
 18946  002066                     l13104:
 18947                           
 18948                           ;lorawan.c: 1895: }
 18949                           ;lorawan.c: 1897: if (loRa.macCommands[i].rx1DROffestAck == 1)
 18950  002066  0100               	movlb	0	; () banked
 18951  002068  516A               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18952  00206A  ECCB  F015         	call	PL2	;call to abstracted procedure
 18953  00206E  AADF               	btfss	indf2,5,c
 18954  002070  D7DF               	goto	l13088
 18955  002072  D7DA               	goto	l13086
 18956  002074                     l13110:
 18957                           
 18958                           ; BSR set to: 0
 18959                           ;lorawan.c: 1907: {
 18960                           ;lorawan.c: 1908: macBuffer[bufferIndex++] = DEV_STATUS_CID;
 18961  002074  D861               	call	PL14	;call to abstracted procedure
 18962  002076  0E06               	movlw	6
 18963  002078  6EDF               	movwf	indf2,c
 18964                           
 18965                           ; BSR set to: 0
 18966  00207A  2B6B               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 18967                           
 18968                           ; BSR set to: 0
 18969                           ;lorawan.c: 1909: macBuffer[bufferIndex++] = loRa.batteryLevel;
 18970  00207C  D85D               	call	PL14	;call to abstracted procedure
 18971  00207E  C2E0  FFDF         	movff	_loRa+224,indf2
 18972  002082  2B6B               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 18973                           
 18974                           ; BSR set to: 0
 18975                           ;lorawan.c: 1910: if ((RADIO_GetPacketSnr() < -32) || (RADIO_GetPacketSnr() > 31))
 18976  002084  EC07  F031         	call	_RADIO_GetPacketSnr	;wreg free
 18977  002088  0A80               	xorlw	128
 18978  00208A  0FA0               	addlw	160
 18979  00208C  E305               	bnc	l13120
 18980                           
 18981                           ; BSR set to: 1
 18982  00208E  EC07  F031         	call	_RADIO_GetPacketSnr	;wreg free
 18983  002092  0A80               	xorlw	128
 18984  002094  0F60               	addlw	-160
 18985  002096  E304               	bnc	l13124
 18986  002098                     l13120:
 18987                           
 18988                           ; BSR set to: 1
 18989                           ;lorawan.c: 1911: {
 18990                           ;lorawan.c: 1912: macBuffer[bufferIndex++] = 0x20;
 18991  002098  0100               	movlb	0	; () banked
 18992  00209A  D84E               	call	PL14	;call to abstracted procedure
 18993  00209C  0E20               	movlw	32
 18994  00209E  D005               	goto	L12
 18995  0020A0                     l13124:
 18996                           
 18997                           ; BSR set to: 1
 18998                           ;lorawan.c: 1914: else
 18999                           ;lorawan.c: 1915: {
 19000                           ;lorawan.c: 1916: macBuffer[bufferIndex++] = ((uint8_t)RADIO_GetPacketSnr() & 0x3F);
 19001  0020A0  0100               	movlb	0	; () banked
 19002  0020A2  D84A               	call	PL14	;call to abstracted procedure
 19003  0020A4  EC07  F031         	call	_RADIO_GetPacketSnr	;wreg free
 19004  0020A8  0B3F               	andlw	63
 19005  0020AA                     L12:
 19006  0020AA  6EDF               	movwf	indf2,c
 19007  0020AC  D7C1               	goto	l13088
 19008  0020AE                     l13128:
 19009                           
 19010                           ; BSR set to: 0
 19011                           ;lorawan.c: 1922: {
 19012                           ;lorawan.c: 1923: macBuffer[bufferIndex++] = NEW_CHANNEL_CID;
 19013  0020AE  D844               	call	PL14	;call to abstracted procedure
 19014  0020B0  0E07               	movlw	7
 19015  0020B2  6EDF               	movwf	indf2,c
 19016                           
 19017                           ; BSR set to: 0
 19018  0020B4  2B6B               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 19019                           
 19020                           ; BSR set to: 0
 19021                           ;lorawan.c: 1924: macBuffer[bufferIndex] = 0x00;
 19022  0020B6  D840               	call	PL14	;call to abstracted procedure
 19023  0020B8  6ADF               	clrf	indf2,c
 19024                           
 19025                           ; BSR set to: 0
 19026                           ;lorawan.c: 1925: if (loRa.macCommands[i].channelFrequencyAck == 1)
 19027  0020BA  516A               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 19028  0020BC  ECCB  F015         	call	PL2	;call to abstracted procedure
 19029  0020C0  AEDF               	btfss	indf2,7,c
 19030  0020C2  D004               	goto	l13138
 19031                           
 19032                           ; BSR set to: 2
 19033                           ;lorawan.c: 1926: {
 19034                           ;lorawan.c: 1927: macBuffer[bufferIndex] |= 0x01;
 19035  0020C4  0100               	movlb	0	; () banked
 19036  0020C6  D838               	call	PL14	;call to abstracted procedure
 19037  0020C8  0E00               	movlw	0
 19038  0020CA  80DB               	bsf	plusw2,0,c
 19039  0020CC                     l13138:
 19040                           
 19041                           ;lorawan.c: 1928: }
 19042                           ;lorawan.c: 1930: if (loRa.macCommands[i].dataRateRangeAck == 1)
 19043  0020CC  0100               	movlb	0	; () banked
 19044  0020CE  516A               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 19045  0020D0  ECCB  F015         	call	PL2	;call to abstracted procedure
 19046  0020D4  ACDF               	btfss	indf2,6,c
 19047  0020D6  D7AC               	goto	l13088
 19048                           
 19049                           ; BSR set to: 2
 19050                           ;lorawan.c: 1931: {
 19051                           ;lorawan.c: 1932: macBuffer[bufferIndex] |= 0x02;
 19052  0020D8  D82F               	call	PL14	;call to abstracted procedure
 19053  0020DA  0E00               	movlw	0
 19054  0020DC  82DB               	bsf	plusw2,1,c
 19055  0020DE  D7A8               	goto	l13088
 19056  0020E0                     l798:
 19057                           
 19058                           ; BSR set to: 0
 19059                           ;lorawan.c: 1939: {
 19060                           ;lorawan.c: 1940: loRa.linkCheckMargin = 255;
 19061  0020E0  0102               	movlb	2	; () banked
 19062  0020E2  69DD               	setf	(_loRa+221)& (0+255),b
 19063                           
 19064                           ;lorawan.c: 1941: loRa.linkCheckGwCnt = 0;
 19065  0020E4  6BDE               	clrf	(_loRa+222)& (0+255),b
 19066  0020E6                     l13144:
 19067                           
 19068                           ;lorawan.c: 1942: macBuffer[bufferIndex++] = loRa.macCommands[i].receivedCid;
 19069  0020E6  0100               	movlb	0	; () banked
 19070  0020E8  516A               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 19071  0020EA  D82D               	call	PL16	;call to abstracted procedure
 19072  0020EC  516B               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 19073  0020EE  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 19074  0020F0  6EE9               	movwf	fsr0l,c
 19075  0020F2  0E00               	movlw	0
 19076  0020F4  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 19077  0020F6  D834               	call	PL452	;call to abstracted procedure
 19078  0020F8  D79B               	goto	l13088
 19079  0020FA                     l13154:
 19080                           
 19081                           ; BSR set to: 0
 19082  0020FA  516A               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 19083  0020FC  D824               	call	PL16	;call to abstracted procedure
 19084  0020FE  50DF               	movf	indf2,w,c
 19085                           
 19086                           ; Switch size 1, requested type "space"
 19087                           ; Number of cases is 7, Range of values is 2 to 8
 19088                           ; switch strategies available:
 19089                           ; Name         Instructions Cycles
 19090                           ; simple_byte           22    12 (average)
 19091                           ;	Chosen strategy is simple_byte
 19092  002100  0A02               	xorlw	2	; case 2
 19093  002102  E0EE               	bz	l798
 19094  002104  0A01               	xorlw	1	; case 3
 19095  002106  E101 D771          	bz	l13070
 19096  00210A  0A07               	xorlw	7	; case 4
 19097  00210C  E0EC               	bz	l13144
 19098  00210E  0A01               	xorlw	1	; case 5
 19099  002110  E092               	bz	l13090
 19100  002112  0A03               	xorlw	3	; case 6
 19101  002114  E0AF               	bz	l13110
 19102  002116  0A01               	xorlw	1	; case 7
 19103  002118  E0CA               	bz	l13128
 19104  00211A  0A0F               	xorlw	15	; case 8
 19105  00211C  E0E4               	bz	l13144
 19106  00211E                     l13156:
 19107                           
 19108                           ; BSR set to: 0
 19109  00211E  2B6A               	incf	IncludeMacCommandsResponse@i& (0+255),f,b
 19110  002120                     l13158:
 19111                           
 19112                           ; BSR set to: 0
 19113  002120  0102               	movlb	2	; () banked
 19114  002122  51A7               	movf	(_loRa+167)& (0+255),w,b
 19115  002124  0100               	movlb	0	; () banked
 19116  002126  5D6A               	subwf	IncludeMacCommandsResponse@i& (0+255),w,b
 19117  002128  E201 D730          	bnc	l13062
 19118  00212C                     l13160:
 19119                           
 19120                           ; BSR set to: 0
 19121                           ;lorawan.c: 1957: }
 19122                           ;lorawan.c: 1959: *pBufferIndex = bufferIndex;
 19123  00212C  5162               	movf	IncludeMacCommandsResponse@pBufferIndex& (0+255),w,b
 19124  00212E  6ED9               	movwf	fsr2l,c
 19125  002130  6ADA               	clrf	fsr2h,c
 19126  002132  C06B  FFDF         	movff	IncludeMacCommandsResponse@bufferIndex,indf2
 19127                           
 19128                           ; BSR set to: 0
 19129  002136  0012               	return		;funcret
 19130  002138                     __end_of_IncludeMacCommandsResponse:
 19131                           	opt stack 0
 19132  002138                     PL14:
 19133                           	opt stack 19
 19134  002138  516B               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 19135  00213A  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 19136  00213C  6ED9               	movwf	fsr2l,c
 19137  00213E  0E00               	movlw	0
 19138  002140  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 19139  002142  6EDA               	movwf	fsr2h,c
 19140  002144  0012               	return	
 19141  002146                     __end_ofPL14:
 19142                           	opt stack 0
 19143  002146                     PL16:
 19144                           	opt stack 17
 19145  002146  0D02               	mullw	2
 19146  002148  0EA8               	movlw	low (_loRa+168)
 19147  00214A  24F3               	addwf	prodl,w,c
 19148  00214C  6ED9               	movwf	fsr2l,c
 19149  00214E  0E02               	movlw	high (_loRa+168)
 19150  002150  20F4               	addwfc	prodh,w,c
 19151  002152  6EDA               	movwf	fsr2h,c
 19152  002154  0012               	return	
 19153  002156                     __end_ofPL16:
 19154                           	opt stack 0
 19155  002156                     PL394:
 19156                           	opt stack 19
 19157  002156  5162               	movf	IncludeMacCommandsResponse@pBufferIndex& (0+255),w,b
 19158  002158  6ED9               	movwf	fsr2l,c
 19159  00215A  6ADA               	clrf	fsr2h,c
 19160  00215C  50DF               	movf	indf2,w,c
 19161  00215E  0012               	return	
 19162  002160                     __end_ofPL394:
 19163                           	opt stack 0
 19164  002160                     PL452:
 19165                           	opt stack 15
 19166  002160  6EEA               	movwf	fsr0h,c
 19167  002162  CFDF FFEF          	movff	indf2,indf0
 19168  002166  0012               	return	
 19169  002168                     __end_ofPL452:
 19170                           	opt stack 0
 19171                           tosu	equ	0xFFF
 19172                           tosh	equ	0xFFE
 19173                           tosl	equ	0xFFD
 19174                           pclath	equ	0xFFA
 19175                           tblptru	equ	0xFF8
 19176                           tblptrh	equ	0xFF7
 19177                           tblptrl	equ	0xFF6
 19178                           tablat	equ	0xFF5
 19179                           prodh	equ	0xFF4
 19180                           prodl	equ	0xFF3
 19181                           intcon	equ	0xFF2
 19182                           indf0	equ	0xFEF
 19183                           postinc0	equ	0xFEE
 19184                           plusw0	equ	0xFEB
 19185                           fsr0h	equ	0xFEA
 19186                           fsr0l	equ	0xFE9
 19187                           wreg	equ	0xFE8
 19188                           postinc1	equ	0xFE6
 19189                           postdec1	equ	0xFE5
 19190                           plusw1	equ	0xFE3
 19191                           fsr1h	equ	0xFE2
 19192                           fsr1l	equ	0xFE1
 19193                           indf2	equ	0xFDF
 19194                           postinc2	equ	0xFDE
 19195                           postdec2	equ	0xFDD
 19196                           plusw2	equ	0xFDB
 19197                           fsr2h	equ	0xFDA
 19198                           fsr2l	equ	0xFD9
 19199                           status	equ	0xFD8
 19200                           
 19201 ;; *************** function _RADIO_GetPacketSnr *****************
 19202 ;; Defined at:
 19203 ;;		line 1429 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 19204 ;; Parameters:    Size  Location     Type
 19205 ;;		None
 19206 ;; Auto vars:     Size  Location     Type
 19207 ;;		None
 19208 ;; Return value:  Size  Location     Type
 19209 ;;                  1    wreg      char 
 19210 ;; Registers used:
 19211 ;;		wreg, status,2
 19212 ;; Tracked objects:
 19213 ;;		On entry : 3E/0
 19214 ;;		On exit  : 3F/1
 19215 ;;		Unchanged: 0/0
 19216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19217 ;;      Params:         0       0       0       0       0       0       0       0       0
 19218 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19219 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19220 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19221 ;;Total ram usage:        0 bytes
 19222 ;; Hardware stack levels used:    1
 19223 ;; Hardware stack levels required when called:    7
 19224 ;; This function calls:
 19225 ;;		Nothing
 19226 ;; This function is called by:
 19227 ;;		_IncludeMacCommandsResponse
 19228 ;; This function uses a non-reentrant model
 19229 ;;
 19230                           
 19231                           	psect	text96
 19232  00620E                     __ptext96:
 19233                           	opt stack 0
 19234  00620E                     _RADIO_GetPacketSnr:
 19235                           	opt stack 19
 19236                           
 19237                           ;radio_driver_SX1276.c: 1431: return RadioConfiguration.packetSNR;
 19238                           
 19239                           ; BSR set to: 0
 19240                           ;incstack = 0
 19241  00620E  0101               	movlb	1	; () banked
 19242  006210  51B1               	movf	(_RadioConfiguration+50)& (0+255),w,b
 19243                           
 19244                           ; BSR set to: 1
 19245  006212  0012               	return		;funcret
 19246  006214                     __end_of_RADIO_GetPacketSnr:
 19247                           	opt stack 0
 19248                           tosu	equ	0xFFF
 19249                           tosh	equ	0xFFE
 19250                           tosl	equ	0xFFD
 19251                           pclath	equ	0xFFA
 19252                           tblptru	equ	0xFF8
 19253                           tblptrh	equ	0xFF7
 19254                           tblptrl	equ	0xFF6
 19255                           tablat	equ	0xFF5
 19256                           prodh	equ	0xFF4
 19257                           prodl	equ	0xFF3
 19258                           intcon	equ	0xFF2
 19259                           indf0	equ	0xFEF
 19260                           postinc0	equ	0xFEE
 19261                           plusw0	equ	0xFEB
 19262                           fsr0h	equ	0xFEA
 19263                           fsr0l	equ	0xFE9
 19264                           wreg	equ	0xFE8
 19265                           postinc1	equ	0xFE6
 19266                           postdec1	equ	0xFE5
 19267                           plusw1	equ	0xFE3
 19268                           fsr1h	equ	0xFE2
 19269                           fsr1l	equ	0xFE1
 19270                           indf2	equ	0xFDF
 19271                           postinc2	equ	0xFDE
 19272                           postdec2	equ	0xFDD
 19273                           plusw2	equ	0xFDB
 19274                           fsr2h	equ	0xFDA
 19275                           fsr2l	equ	0xFD9
 19276                           status	equ	0xFD8
 19277                           
 19278 ;; *************** function _FindSmallestDataRate *****************
 19279 ;; Defined at:
 19280 ;;		line 1963 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 19281 ;; Parameters:    Size  Location     Type
 19282 ;;		None
 19283 ;; Auto vars:     Size  Location     Type
 19284 ;;  dataRate        1    3[BANK0 ] unsigned char 
 19285 ;;  i               1    2[BANK0 ] unsigned char 
 19286 ;;  found           1    1[BANK0 ] unsigned char 
 19287 ;; Return value:  Size  Location     Type
 19288 ;;                  1    wreg      unsigned char 
 19289 ;; Registers used:
 19290 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19291 ;; Tracked objects:
 19292 ;;		On entry : 3F/2
 19293 ;;		On exit  : 3F/0
 19294 ;;		Unchanged: 0/0
 19295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19296 ;;      Params:         0       0       0       0       0       0       0       0       0
 19297 ;;      Locals:         0       3       0       0       0       0       0       0       0
 19298 ;;      Temps:          0       1       0       0       0       0       0       0       0
 19299 ;;      Totals:         0       4       0       0       0       0       0       0       0
 19300 ;;Total ram usage:        4 bytes
 19301 ;; Hardware stack levels used:    1
 19302 ;; Hardware stack levels required when called:    7
 19303 ;; This function calls:
 19304 ;;		Nothing
 19305 ;; This function is called by:
 19306 ;;		_AckRetransmissionCallback
 19307 ;;		_AssemblePacket
 19308 ;; This function uses a non-reentrant model
 19309 ;;
 19310                           
 19311                           	psect	text97
 19312  0046CC                     __ptext97:
 19313                           	opt stack 0
 19314  0046CC                     _FindSmallestDataRate:
 19315                           	opt stack 20
 19316                           
 19317                           ; BSR set to: 2
 19318                           ;lorawan.c: 1966: bool found = 0;
 19319                           
 19320                           ; BSR set to: 1
 19321                           ;incstack = 0
 19322  0046CC  0100               	movlb	0	; () banked
 19323  0046CE  6B61               	clrf	FindSmallestDataRate@found& (0+255),b
 19324                           
 19325                           ; BSR set to: 0
 19326                           ;lorawan.c: 1968: if (loRa.currentDataRate > loRa.minDataRate)
 19327  0046D0  0102               	movlb	2	; () banked
 19328  0046D2  51DF               	movf	(_loRa+223)& (0+255),w,b
 19329  0046D4  5DEB               	subwf	(_loRa+235)& (0+255),w,b
 19330  0046D6  E23A               	bc	l12858
 19331                           
 19332                           ; BSR set to: 2
 19333                           ;lorawan.c: 1969: {
 19334                           ;lorawan.c: 1970: dataRate = loRa.currentDataRate - 1;
 19335  0046D8  05DF               	decf	(_loRa+223)& (0+255),w,b
 19336  0046DA  0100               	movlb	0	; () banked
 19337  0046DC  6F63               	movwf	FindSmallestDataRate@dataRate& (0+255),b
 19338                           
 19339                           ;lorawan.c: 1972: while ( (found == 0) && (dataRate >= loRa.minDataRate) )
 19340  0046DE  D02A               	goto	l12850
 19341  0046E0                     l807:
 19342                           
 19343                           ; BSR set to: 0
 19344                           ;lorawan.c: 1973: {
 19345                           ;lorawan.c: 1974: for ( i = 0; i < loRa.maxChannels; i++ )
 19346  0046E0  6B62               	clrf	FindSmallestDataRate@i& (0+255),b
 19347  0046E2  D01B               	goto	l12842
 19348  0046E4                     l12832:
 19349                           
 19350                           ; BSR set to: 0
 19351                           ;lorawan.c: 1975: {
 19352                           ;lorawan.c: 1976: if ( (dataRate >= Channels[i].dataRange.min) && (dataRate <= Channels[
      +                          i].dataRange.max ) && ( Channels[i].status == 1 ) )
 19353  0046E4  5162               	movf	FindSmallestDataRate@i& (0+255),w,b
 19354  0046E6  EC7E  F021         	call	PL6	;call to abstracted procedure
 19355  0046EA  50DF               	movf	223,w,c
 19356  0046EC  0B0F               	andlw	15
 19357  0046EE  0100               	movlb	0	; () banked
 19358  0046F0  6F60               	movwf	??_FindSmallestDataRate& (0+255),b
 19359  0046F2  5160               	movf	??_FindSmallestDataRate& (0+255),w,b
 19360  0046F4  5D63               	subwf	FindSmallestDataRate@dataRate& (0+255),w,b
 19361  0046F6  E310               	bnc	l12840
 19362                           
 19363                           ; BSR set to: 0
 19364  0046F8  5162               	movf	FindSmallestDataRate@i& (0+255),w,b
 19365  0046FA  EC7E  F021         	call	PL6	;call to abstracted procedure
 19366  0046FE  38DF               	swapf	223,w,c
 19367  004700  0B0F               	andlw	15
 19368  004702  6F60               	movwf	??_FindSmallestDataRate& (0+255),b
 19369  004704  5163               	movf	FindSmallestDataRate@dataRate& (0+255),w,b
 19370  004706  5D60               	subwf	??_FindSmallestDataRate& (0+255),w,b
 19371  004708  E307               	bnc	l12840
 19372                           
 19373                           ; BSR set to: 0
 19374  00470A  5162               	movf	FindSmallestDataRate@i& (0+255),w,b
 19375  00470C  EC86  F021         	call	PL12	;call to abstracted procedure
 19376  004710  E103               	bnz	l12840
 19377                           
 19378                           ; BSR set to: 0
 19379                           ;lorawan.c: 1977: {
 19380                           ;lorawan.c: 1978: found = 1;
 19381  004712  0E01               	movlw	1
 19382  004714  6F61               	movwf	FindSmallestDataRate@found& (0+255),b
 19383                           
 19384                           ;lorawan.c: 1979: break;
 19385  004716  D006               	goto	l12844
 19386  004718                     l12840:
 19387                           
 19388                           ; BSR set to: 0
 19389  004718  2B62               	incf	FindSmallestDataRate@i& (0+255),f,b
 19390  00471A                     l12842:
 19391                           
 19392                           ; BSR set to: 0
 19393  00471A  0102               	movlb	2	; () banked
 19394  00471C  51ED               	movf	(_loRa+237)& (0+255),w,b
 19395  00471E  0100               	movlb	0	; () banked
 19396  004720  5D62               	subwf	FindSmallestDataRate@i& (0+255),w,b
 19397  004722  E3E0               	bnc	l12832
 19398  004724                     l12844:
 19399                           
 19400                           ; BSR set to: 0
 19401                           ;lorawan.c: 1980: }
 19402                           ;lorawan.c: 1981: }
 19403                           ;lorawan.c: 1982: if ( (found == 0) && (dataRate > loRa.minDataRate) )
 19404  004724  5161               	movf	FindSmallestDataRate@found& (0+255),w,b
 19405  004726  E106               	bnz	l12850
 19406                           
 19407                           ; BSR set to: 0
 19408  004728  5163               	movf	FindSmallestDataRate@dataRate& (0+255),w,b
 19409  00472A  0102               	movlb	2	; () banked
 19410  00472C  5DEB               	subwf	(_loRa+235)& (0+255),w,b
 19411  00472E  E202               	bc	l12850
 19412                           
 19413                           ; BSR set to: 2
 19414                           ;lorawan.c: 1983: {
 19415                           ;lorawan.c: 1984: dataRate = dataRate - 1;
 19416  004730  0100               	movlb	0	; () banked
 19417  004732  0763               	decf	FindSmallestDataRate@dataRate& (0+255),f,b
 19418  004734                     l12850:
 19419  004734  0100               	movlb	0	; () banked
 19420  004736  5161               	movf	FindSmallestDataRate@found& (0+255),w,b
 19421  004738  E105               	bnz	l12854
 19422                           
 19423                           ; BSR set to: 0
 19424  00473A  0102               	movlb	2	; () banked
 19425  00473C  51EB               	movf	(_loRa+235)& (0+255),w,b
 19426  00473E  0100               	movlb	0	; () banked
 19427  004740  5D63               	subwf	FindSmallestDataRate@dataRate& (0+255),w,b
 19428  004742  E2CE               	bc	l807
 19429  004744                     l12854:
 19430                           
 19431                           ; BSR set to: 0
 19432                           ;lorawan.c: 1985: }
 19433                           ;lorawan.c: 1986: }
 19434                           ;lorawan.c: 1988: if (found == 1)
 19435  004744  0561               	decf	FindSmallestDataRate@found& (0+255),w,b
 19436  004746  E102               	bnz	l12858
 19437                           
 19438                           ; BSR set to: 0
 19439                           ;lorawan.c: 1989: {
 19440                           ;lorawan.c: 1990: loRa.currentDataRate = dataRate;
 19441  004748  C063  F2DF         	movff	FindSmallestDataRate@dataRate,_loRa+223
 19442  00474C                     l12858:
 19443                           
 19444                           ;lorawan.c: 1991: }
 19445                           ;lorawan.c: 1992: }
 19446                           ;lorawan.c: 1994: return found;
 19447  00474C  0100               	movlb	0	; () banked
 19448  00474E  5161               	movf	FindSmallestDataRate@found& (0+255),w,b
 19449                           
 19450                           ; BSR set to: 0
 19451  004750  0012               	return		;funcret
 19452  004752                     __end_of_FindSmallestDataRate:
 19453                           	opt stack 0
 19454                           tosu	equ	0xFFF
 19455                           tosh	equ	0xFFE
 19456                           tosl	equ	0xFFD
 19457                           pclath	equ	0xFFA
 19458                           tblptru	equ	0xFF8
 19459                           tblptrh	equ	0xFF7
 19460                           tblptrl	equ	0xFF6
 19461                           tablat	equ	0xFF5
 19462                           prodh	equ	0xFF4
 19463                           prodl	equ	0xFF3
 19464                           intcon	equ	0xFF2
 19465                           indf0	equ	0xFEF
 19466                           postinc0	equ	0xFEE
 19467                           plusw0	equ	0xFEB
 19468                           fsr0h	equ	0xFEA
 19469                           fsr0l	equ	0xFE9
 19470                           wreg	equ	0xFE8
 19471                           postinc1	equ	0xFE6
 19472                           postdec1	equ	0xFE5
 19473                           plusw1	equ	0xFE3
 19474                           fsr1h	equ	0xFE2
 19475                           fsr1l	equ	0xFE1
 19476                           indf2	equ	0xFDF
 19477                           postinc2	equ	0xFDE
 19478                           postdec2	equ	0xFDD
 19479                           plusw2	equ	0xFDB
 19480                           fsr2h	equ	0xFDA
 19481                           fsr2l	equ	0xFD9
 19482                           status	equ	0xFD8
 19483                           
 19484 ;; *************** function _EncryptFRMPayload *****************
 19485 ;; Defined at:
 19486 ;;		line 2205 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 19487 ;; Parameters:    Size  Location     Type
 19488 ;;  buffer          2   64[BANK0 ] PTR unsigned char 
 19489 ;;		 -> payload(2), radioBuffer(271), LORAWAN_RxDone@hdr(2), NULL(0), 
 19490 ;;  bufferLength    1   66[BANK0 ] unsigned char 
 19491 ;;  dir             1   67[BANK0 ] unsigned char 
 19492 ;;  frameCounter    4   68[BANK0 ] unsigned long 
 19493 ;;  key             2   72[BANK0 ] PTR unsigned char 
 19494 ;;		 -> loRa.activationParameters(105), loRa(245), 
 19495 ;;  macBufferInd    1   74[BANK0 ] unsigned char 
 19496 ;;  bufferToBeEn    2   75[BANK0 ] PTR unsigned char 
 19497 ;;		 -> radioBuffer(271), macBuffer(271), 
 19498 ;;  multicastSta    1   77[BANK0 ] unsigned char 
 19499 ;; Auto vars:     Size  Location     Type
 19500 ;;  j               1   85[BANK0 ] unsigned char 
 19501 ;;  i               1   84[BANK0 ] unsigned char 
 19502 ;;  k               1   83[BANK0 ] unsigned char 
 19503 ;; Return value:  Size  Location     Type
 19504 ;;                  1    wreg      void 
 19505 ;; Registers used:
 19506 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19507 ;; Tracked objects:
 19508 ;;		On entry : 3F/0
 19509 ;;		On exit  : 3F/0
 19510 ;;		Unchanged: 0/0
 19511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19512 ;;      Params:         0      14       0       0       0       0       0       0       0
 19513 ;;      Locals:         0       3       0       0       0       0       0       0       0
 19514 ;;      Temps:          0       5       0       0       0       0       0       0       0
 19515 ;;      Totals:         0      22       0       0       0       0       0       0       0
 19516 ;;Total ram usage:       22 bytes
 19517 ;; Hardware stack levels used:    1
 19518 ;; Hardware stack levels required when called:   10
 19519 ;; This function calls:
 19520 ;;		_AESEncodeLoRa
 19521 ;;		_AssembleEncryptionBlock
 19522 ;; This function is called by:
 19523 ;;		_LORAWAN_RxDone
 19524 ;;		_AssemblePacket
 19525 ;; This function uses a non-reentrant model
 19526 ;;
 19527                           
 19528                           	psect	text98
 19529  002BBA                     __ptext98:
 19530                           	opt stack 0
 19531  002BBA                     _EncryptFRMPayload:
 19532                           	opt stack 17
 19533                           
 19534                           ; BSR set to: 0
 19535                           
 19536                           ; BSR set to: 0
 19537                           ;incstack = 0
 19538  002BBA  6BB4               	clrf	EncryptFRMPayload@i& (0+255),b
 19539  002BBC  6BB5               	clrf	EncryptFRMPayload@j& (0+255),b
 19540                           
 19541                           ; BSR set to: 0
 19542                           ;lorawan.c: 2209: k = bufferLength / 16;
 19543  002BBE  39A2               	swapf	EncryptFRMPayload@bufferLength& (0+255),w,b
 19544  002BC0  0B0F               	andlw	15
 19545  002BC2  6FB3               	movwf	EncryptFRMPayload@k& (0+255),b
 19546                           
 19547                           ; BSR set to: 0
 19548                           ;lorawan.c: 2210: for (i = 1; i <= k; i++)
 19549  002BC4  0E01               	movlw	1
 19550  002BC6  6FB4               	movwf	EncryptFRMPayload@i& (0+255),b
 19551  002BC8  D031               	goto	l12984
 19552  002BCA                     l12966:
 19553                           
 19554                           ; BSR set to: 0
 19555                           ;lorawan.c: 2211: {
 19556                           ;lorawan.c: 2212: AssembleEncryptionBlock (dir, frameCounter, i, 0x01, multicastStatus);
 19557  002BCA  D85B               	call	PL106	;call to abstracted procedure
 19558  002BCC  EC8F  F021         	call	_AssembleEncryptionBlock
 19559                           
 19560                           ;lorawan.c: 2213: AESEncodeLoRa(aesBuffer, key);
 19561  002BD0  D868               	call	PL210	;call to abstracted procedure
 19562  002BD2  EC51  F02E         	call	_AESEncodeLoRa	;wreg free
 19563                           
 19564                           ; BSR set to: 0
 19565                           ;lorawan.c: 2215: for (j = 0; j < 16; j++)
 19566  002BD6  6BB5               	clrf	EncryptFRMPayload@j& (0+255),b
 19567  002BD8                     l12974:
 19568                           
 19569                           ; BSR set to: 0
 19570                           ;lorawan.c: 2216: {
 19571                           ;lorawan.c: 2217: bufferToBeEncrypted[macBufferIndex++] = aesBuffer[j] ^ buffer[16*(i-1)
      +                           + j];
 19572  002BD8  D875               	call	PL300	;call to abstracted procedure
 19573  002BDA  51B4               	movf	EncryptFRMPayload@i& (0+255),w,b
 19574  002BDC  6FAE               	movwf	??_EncryptFRMPayload& (0+255),b
 19575  002BDE  6BAF               	clrf	(??_EncryptFRMPayload+1)& (0+255),b
 19576  002BE0  3BAE               	swapf	??_EncryptFRMPayload& (0+255),f,b
 19577  002BE2  3BAF               	swapf	(??_EncryptFRMPayload+1)& (0+255),f,b
 19578  002BE4  0EF0               	movlw	240
 19579  002BE6  17AF               	andwf	(??_EncryptFRMPayload+1)& (0+255),f,b
 19580  002BE8  51AE               	movf	??_EncryptFRMPayload& (0+255),w,b
 19581  002BEA  0B0F               	andlw	15
 19582  002BEC  13AF               	iorwf	(??_EncryptFRMPayload+1)& (0+255),f,b
 19583  002BEE  0EF0               	movlw	240
 19584  002BF0  17AE               	andwf	??_EncryptFRMPayload& (0+255),f,b
 19585  002BF2  C0A0  F0B0         	movff	EncryptFRMPayload@buffer,??_EncryptFRMPayload+2
 19586  002BF6  C0A1  F0B1         	movff	EncryptFRMPayload@buffer+1,??_EncryptFRMPayload+3
 19587  002BFA  51AE               	movf	??_EncryptFRMPayload& (0+255),w,b
 19588  002BFC  27B0               	addwf	(??_EncryptFRMPayload+2)& (0+255),f,b
 19589  002BFE  51AF               	movf	(??_EncryptFRMPayload+1)& (0+255),w,b
 19590  002C00  23B1               	addwfc	(??_EncryptFRMPayload+3)& (0+255),f,b
 19591  002C02  51B5               	movf	EncryptFRMPayload@j& (0+255),w,b
 19592  002C04  27B0               	addwf	(??_EncryptFRMPayload+2)& (0+255),f,b
 19593  002C06  0E00               	movlw	0
 19594  002C08  23B1               	addwfc	(??_EncryptFRMPayload+3)& (0+255),f,b
 19595  002C0A  0EF0               	movlw	240
 19596  002C0C  25B0               	addwf	(??_EncryptFRMPayload+2)& (0+255),w,b
 19597  002C0E  6EE9               	movwf	fsr0l,c
 19598  002C10  0EFF               	movlw	255
 19599  002C12  21B1               	addwfc	(??_EncryptFRMPayload+3)& (0+255),w,b
 19600  002C14  6EEA               	movwf	fsr0h,c
 19601  002C16  50EF               	movf	indf0,w,c
 19602  002C18  6FB2               	movwf	(??_EncryptFRMPayload+4)& (0+255),b
 19603  002C1A  D84C               	call	PL280	;call to abstracted procedure
 19604  002C1C  19B2               	xorwf	(??_EncryptFRMPayload+4)& (0+255),w,b
 19605  002C1E  6EDF               	movwf	indf2,c
 19606                           
 19607                           ; BSR set to: 0
 19608  002C20  2BAA               	incf	EncryptFRMPayload@macBufferIndex& (0+255),f,b
 19609                           
 19610                           ; BSR set to: 0
 19611  002C22  2BB5               	incf	EncryptFRMPayload@j& (0+255),f,b
 19612                           
 19613                           ; BSR set to: 0
 19614  002C24  0E0F               	movlw	15
 19615  002C26  65B5               	cpfsgt	EncryptFRMPayload@j& (0+255),b
 19616  002C28  D7D7               	goto	l12974
 19617                           
 19618                           ; BSR set to: 0
 19619  002C2A  2BB4               	incf	EncryptFRMPayload@i& (0+255),f,b
 19620  002C2C                     l12984:
 19621                           
 19622                           ; BSR set to: 0
 19623  002C2C  51B4               	movf	EncryptFRMPayload@i& (0+255),w,b
 19624  002C2E  5DB3               	subwf	EncryptFRMPayload@k& (0+255),w,b
 19625  002C30  E2CC               	bc	l12966
 19626                           
 19627                           ; BSR set to: 0
 19628                           ;lorawan.c: 2218: }
 19629                           ;lorawan.c: 2219: }
 19630                           ;lorawan.c: 2221: if ( (bufferLength % 16) != 0 )
 19631  002C32  D84F               	call	PL362	;call to abstracted procedure
 19632  002C34  B4D8               	btfsc	status,2,c
 19633  002C36  0C0F               	retlw	15
 19634                           
 19635                           ; BSR set to: 0
 19636                           ;lorawan.c: 2222: {
 19637                           ;lorawan.c: 2223: AssembleEncryptionBlock (dir, frameCounter, i, 0x01, multicastStatus);
 19638  002C38  D824               	call	PL106	;call to abstracted procedure
 19639  002C3A  EC8F  F021         	call	_AssembleEncryptionBlock
 19640                           
 19641                           ;lorawan.c: 2224: AESEncodeLoRa (aesBuffer, key);
 19642  002C3E  D831               	call	PL210	;call to abstracted procedure
 19643  002C40  EC51  F02E         	call	_AESEncodeLoRa	;wreg free
 19644                           
 19645                           ; BSR set to: 0
 19646                           ;lorawan.c: 2226: for (j = 0; j < (bufferLength % 16); j++)
 19647  002C44  6BB5               	clrf	EncryptFRMPayload@j& (0+255),b
 19648  002C46  D018               	goto	l12998
 19649  002C48                     l12992:
 19650                           
 19651                           ; BSR set to: 0
 19652                           ;lorawan.c: 2227: {
 19653                           ;lorawan.c: 2228: bufferToBeEncrypted[macBufferIndex++] = aesBuffer[j] ^ buffer[(16*k) +
      +                           j];
 19654  002C48  D83D               	call	PL300	;call to abstracted procedure
 19655  002C4A  51B3               	movf	EncryptFRMPayload@k& (0+255),w,b
 19656  002C4C  0D10               	mullw	16
 19657  002C4E  C0A0  F0AE         	movff	EncryptFRMPayload@buffer,??_EncryptFRMPayload
 19658  002C52  C0A1  F0AF         	movff	EncryptFRMPayload@buffer+1,??_EncryptFRMPayload+1
 19659  002C56  50F3               	movf	prodl,w,c
 19660  002C58  27AE               	addwf	??_EncryptFRMPayload& (0+255),f,b
 19661  002C5A  50F4               	movf	prodh,w,c
 19662  002C5C  23AF               	addwfc	(??_EncryptFRMPayload+1)& (0+255),f,b
 19663  002C5E  51B5               	movf	EncryptFRMPayload@j& (0+255),w,b
 19664  002C60  25AE               	addwf	??_EncryptFRMPayload& (0+255),w,b
 19665  002C62  6EE9               	movwf	fsr0l,c
 19666  002C64  0E00               	movlw	0
 19667  002C66  21AF               	addwfc	(??_EncryptFRMPayload+1)& (0+255),w,b
 19668  002C68  6EEA               	movwf	fsr0h,c
 19669  002C6A  50EF               	movf	indf0,w,c
 19670  002C6C  6FB0               	movwf	(??_EncryptFRMPayload+2)& (0+255),b
 19671  002C6E  D822               	call	PL280	;call to abstracted procedure
 19672  002C70  19B0               	xorwf	(??_EncryptFRMPayload+2)& (0+255),w,b
 19673  002C72  6EDF               	movwf	indf2,c
 19674                           
 19675                           ; BSR set to: 0
 19676  002C74  2BAA               	incf	EncryptFRMPayload@macBufferIndex& (0+255),f,b
 19677                           
 19678                           ; BSR set to: 0
 19679  002C76  2BB5               	incf	EncryptFRMPayload@j& (0+255),f,b
 19680  002C78                     l12998:
 19681                           
 19682                           ; BSR set to: 0
 19683  002C78  D82C               	call	PL362	;call to abstracted procedure
 19684  002C7A  51AE               	movf	??_EncryptFRMPayload& (0+255),w,b
 19685  002C7C  5DB5               	subwf	EncryptFRMPayload@j& (0+255),w,b
 19686  002C7E  E3E4               	bnc	l12992
 19687                           
 19688                           ; BSR set to: 0
 19689  002C80  0012               	return		;funcret
 19690  002C82                     __end_of_EncryptFRMPayload:
 19691                           	opt stack 0
 19692  002C82                     PL106:
 19693                           	opt stack 17
 19694  002C82  C0A4  F06A         	movff	EncryptFRMPayload@frameCounter,AssembleEncryptionBlock@frameCounter
 19695  002C86  C0A5  F06B         	movff	EncryptFRMPayload@frameCounter+1,AssembleEncryptionBlock@frameCounter+1
 19696  002C8A  C0A6  F06C         	movff	EncryptFRMPayload@frameCounter+2,AssembleEncryptionBlock@frameCounter+2
 19697  002C8E  C0A7  F06D         	movff	EncryptFRMPayload@frameCounter+3,AssembleEncryptionBlock@frameCounter+3
 19698  002C92  C0B4  F06E         	movff	EncryptFRMPayload@i,AssembleEncryptionBlock@blockId
 19699  002C96  0E01               	movlw	1
 19700  002C98  6F6F               	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 19701  002C9A  C0AD  F070         	movff	EncryptFRMPayload@multicastStatus,AssembleEncryptionBlock@multicastStatus
 19702  002C9E  51A3               	movf	EncryptFRMPayload@dir& (0+255),w,b
 19703  002CA0  0012               	return	
 19704  002CA2                     __end_ofPL106:
 19705                           	opt stack 0
 19706  002CA2                     PL210:
 19707                           	opt stack 17
 19708  002CA2  0EB5               	movlw	low _aesBuffer
 19709  002CA4  6F8C               	movwf	AESEncodeLoRa@block& (0+255),b
 19710  002CA6  0E01               	movlw	high _aesBuffer
 19711  002CA8  6F8D               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 19712  002CAA  C0A8  F08E         	movff	EncryptFRMPayload@key,AESEncodeLoRa@key
 19713  002CAE  C0A9  F08F         	movff	EncryptFRMPayload@key+1,AESEncodeLoRa@key+1
 19714  002CB2  0012               	return	
 19715  002CB4                     __end_ofPL210:
 19716                           	opt stack 0
 19717  002CB4                     PL280:
 19718                           	opt stack 17
 19719  002CB4  0EB5               	movlw	low _aesBuffer
 19720  002CB6  25B5               	addwf	EncryptFRMPayload@j& (0+255),w,b
 19721  002CB8  6EE9               	movwf	fsr0l,c
 19722  002CBA  6AEA               	clrf	fsr0h,c
 19723  002CBC  0E01               	movlw	high _aesBuffer
 19724  002CBE  22EA               	addwfc	fsr0h,f,c
 19725  002CC0  50EF               	movf	indf0,w,c
 19726  002CC2  0012               	return	
 19727  002CC4                     __end_ofPL280:
 19728                           	opt stack 0
 19729  002CC4                     PL300:
 19730                           	opt stack 17
 19731  002CC4  51AA               	movf	EncryptFRMPayload@macBufferIndex& (0+255),w,b
 19732  002CC6  25AB               	addwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),w,b
 19733  002CC8  6ED9               	movwf	fsr2l,c
 19734  002CCA  0E00               	movlw	0
 19735  002CCC  21AC               	addwfc	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),w,b
 19736  002CCE  6EDA               	movwf	fsr2h,c
 19737  002CD0  0012               	return	
 19738  002CD2                     __end_ofPL300:
 19739                           	opt stack 0
 19740  002CD2                     PL362:
 19741                           	opt stack 17
 19742  002CD2  C0A2  F0AE         	movff	EncryptFRMPayload@bufferLength,??_EncryptFRMPayload
 19743  002CD6  0E0F               	movlw	15
 19744  002CD8  17AE               	andwf	??_EncryptFRMPayload& (0+255),f,b
 19745  002CDA  0C0F               	retlw	15
 19746  002CDC                     __end_ofPL362:
 19747                           	opt stack 0
 19748                           tosu	equ	0xFFF
 19749                           tosh	equ	0xFFE
 19750                           tosl	equ	0xFFD
 19751                           pclath	equ	0xFFA
 19752                           tblptru	equ	0xFF8
 19753                           tblptrh	equ	0xFF7
 19754                           tblptrl	equ	0xFF6
 19755                           tablat	equ	0xFF5
 19756                           prodh	equ	0xFF4
 19757                           prodl	equ	0xFF3
 19758                           intcon	equ	0xFF2
 19759                           indf0	equ	0xFEF
 19760                           postinc0	equ	0xFEE
 19761                           plusw0	equ	0xFEB
 19762                           fsr0h	equ	0xFEA
 19763                           fsr0l	equ	0xFE9
 19764                           wreg	equ	0xFE8
 19765                           postinc1	equ	0xFE6
 19766                           postdec1	equ	0xFE5
 19767                           plusw1	equ	0xFE3
 19768                           fsr1h	equ	0xFE2
 19769                           fsr1l	equ	0xFE1
 19770                           indf2	equ	0xFDF
 19771                           postinc2	equ	0xFDE
 19772                           postdec2	equ	0xFDD
 19773                           plusw2	equ	0xFDB
 19774                           fsr2h	equ	0xFDA
 19775                           fsr2l	equ	0xFD9
 19776                           status	equ	0xFD8
 19777                           
 19778 ;; *************** function _AssembleEncryptionBlock *****************
 19779 ;; Defined at:
 19780 ;;		line 2156 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 19781 ;; Parameters:    Size  Location     Type
 19782 ;;  dir             1    wreg     unsigned char 
 19783 ;;  frameCounter    4   10[BANK0 ] unsigned long 
 19784 ;;  blockId         1   14[BANK0 ] unsigned char 
 19785 ;;  firstByte       1   15[BANK0 ] unsigned char 
 19786 ;;  multicastSta    1   16[BANK0 ] unsigned char 
 19787 ;; Auto vars:     Size  Location     Type
 19788 ;;  dir             1   17[BANK0 ] unsigned char 
 19789 ;;  bufferIndex     1   18[BANK0 ] unsigned char 
 19790 ;; Return value:  Size  Location     Type
 19791 ;;                  1    wreg      void 
 19792 ;; Registers used:
 19793 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19794 ;; Tracked objects:
 19795 ;;		On entry : 3F/0
 19796 ;;		On exit  : 3F/0
 19797 ;;		Unchanged: 0/0
 19798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19799 ;;      Params:         0       7       0       0       0       0       0       0       0
 19800 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19801 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19802 ;;      Totals:         0       9       0       0       0       0       0       0       0
 19803 ;;Total ram usage:        9 bytes
 19804 ;; Hardware stack levels used:    1
 19805 ;; Hardware stack levels required when called:    8
 19806 ;; This function calls:
 19807 ;;		_memcpy
 19808 ;;		_memset
 19809 ;; This function is called by:
 19810 ;;		_LORAWAN_RxDone
 19811 ;;		_AssemblePacket
 19812 ;;		_EncryptFRMPayload
 19813 ;; This function uses a non-reentrant model
 19814 ;;
 19815                           
 19816                           	psect	text99
 19817  00431E                     __ptext99:
 19818                           	opt stack 0
 19819  00431E                     _AssembleEncryptionBlock:
 19820                           	opt stack 18
 19821                           
 19822                           ; BSR set to: 0
 19823                           ;incstack = 0
 19824                           ;AssembleEncryptionBlock@dir stored from wreg
 19825  00431E  6F71               	movwf	AssembleEncryptionBlock@dir& (0+255),b
 19826                           
 19827                           ;lorawan.c: 2158: uint8_t bufferIndex = 0;
 19828  004320  0100               	movlb	0	; () banked
 19829  004322  6B72               	clrf	AssembleEncryptionBlock@bufferIndex& (0+255),b
 19830                           
 19831                           ; BSR set to: 0
 19832                           ;lorawan.c: 2160: memset (aesBuffer, 0, sizeof (aesBuffer));
 19833  004324  D83E               	call	PL196	;call to abstracted procedure
 19834  004326  D830               	call	PL140	;call to abstracted procedure
 19835  004328  ECEF  F02D         	call	_memset	;wreg free
 19836                           
 19837                           ; BSR set to: 0
 19838                           ;lorawan.c: 2162: aesBuffer[bufferIndex] = firstByte;
 19839  00432C  C06F  F1B5         	movff	AssembleEncryptionBlock@firstByte,_aesBuffer
 19840                           
 19841                           ; BSR set to: 0
 19842                           ;lorawan.c: 2164: bufferIndex = bufferIndex + 5;
 19843  004330  0E05               	movlw	5
 19844  004332  2772               	addwf	AssembleEncryptionBlock@bufferIndex& (0+255),f,b
 19845                           
 19846                           ; BSR set to: 0
 19847                           ;lorawan.c: 2166: aesBuffer[bufferIndex++] = dir;
 19848  004334  D83F               	call	PL310	;call to abstracted procedure
 19849  004336  C071  FFDF         	movff	AssembleEncryptionBlock@dir,indf2
 19850                           
 19851                           ; BSR set to: 0
 19852  00433A  2B72               	incf	AssembleEncryptionBlock@bufferIndex& (0+255),f,b
 19853                           
 19854                           ; BSR set to: 0
 19855                           ;lorawan.c: 2168: if (0 == multicastStatus)
 19856  00433C  5170               	movf	AssembleEncryptionBlock@multicastStatus& (0+255),w,b
 19857  00433E  E108               	bnz	l12450
 19858                           
 19859                           ; BSR set to: 0
 19860                           ;lorawan.c: 2169: {
 19861                           ;lorawan.c: 2170: memcpy (&aesBuffer[bufferIndex], &loRa.activationParameters.deviceAddr
      +                          ess, sizeof (loRa.activationParameters.deviceAddress));
 19862  004340  D829               	call	PL190	;call to abstracted procedure
 19863  004342  D834               	call	PL246	;call to abstracted procedure
 19864  004344  D81C               	call	PL132	;call to abstracted procedure
 19865  004346  EC94  F028         	call	_memcpy	;wreg free
 19866  00434A                     l12448:
 19867                           
 19868                           ; BSR set to: 0
 19869                           ;lorawan.c: 2171: bufferIndex = bufferIndex + sizeof (loRa.activationParameters.deviceAd
      +                          dress);
 19870  00434A  0E04               	movlw	4
 19871  00434C  2772               	addwf	AssembleEncryptionBlock@bufferIndex& (0+255),f,b
 19872                           
 19873                           ;lorawan.c: 2172: }
 19874  00434E  D008               	goto	l12454
 19875  004350                     l12450:
 19876                           
 19877                           ; BSR set to: 0
 19878                           ;lorawan.c: 2173: else
 19879                           ;lorawan.c: 2174: {
 19880                           ;lorawan.c: 2175: memcpy (&aesBuffer[bufferIndex], &loRa.activationParameters.mcastDevic
      +                          eAddress, sizeof (loRa.activationParameters.mcastDeviceAddress));
 19881  004350  D821               	call	PL190	;call to abstracted procedure
 19882  004352  0E62               	movlw	low (_loRa+98)
 19883  004354  6F62               	movwf	memcpy@s1& (0+255),b
 19884  004356  0E02               	movlw	high (_loRa+98)
 19885  004358  D812               	call	PL132	;call to abstracted procedure
 19886  00435A  EC94  F028         	call	_memcpy	;wreg free
 19887  00435E  D7F5               	goto	l12448
 19888  004360                     l12454:
 19889                           
 19890                           ; BSR set to: 0
 19891                           ;lorawan.c: 2177: }
 19892                           ;lorawan.c: 2179: memcpy (&aesBuffer[bufferIndex], &frameCounter, sizeof (frameCounter))
      +                          ;
 19893  004360  D819               	call	PL190	;call to abstracted procedure
 19894  004362  0E6A               	movlw	low AssembleEncryptionBlock@frameCounter
 19895  004364  6F62               	movwf	memcpy@s1& (0+255),b
 19896  004366  6B63               	clrf	(memcpy@s1+1)& (0+255),b
 19897  004368  EC78  F017         	call	PL250	;call to abstracted procedure
 19898  00436C  EC94  F028         	call	_memcpy	;wreg free
 19899                           
 19900                           ;lorawan.c: 2180: bufferIndex = bufferIndex + sizeof (frameCounter) ;
 19901  004370  0E04               	movlw	4
 19902  004372  2772               	addwf	AssembleEncryptionBlock@bufferIndex& (0+255),f,b
 19903                           
 19904                           ; BSR set to: 0
 19905                           ;lorawan.c: 2182: bufferIndex ++;
 19906  004374  2B72               	incf	AssembleEncryptionBlock@bufferIndex& (0+255),f,b
 19907                           
 19908                           ; BSR set to: 0
 19909                           ;lorawan.c: 2184: aesBuffer[bufferIndex] = blockId;
 19910  004376  D81E               	call	PL310	;call to abstracted procedure
 19911  004378  C06E  FFDF         	movff	AssembleEncryptionBlock@blockId,indf2
 19912                           
 19913                           ; BSR set to: 0
 19914  00437C  0012               	return		;funcret
 19915  00437E                     __end_of_AssembleEncryptionBlock:
 19916                           	opt stack 0
 19917  00437E                     PL132:
 19918                           	opt stack 16
 19919  00437E  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 19920  004380  6B65               	clrf	(memcpy@n+1)& (0+255),b
 19921  004382  0E04               	movlw	4
 19922  004384  6F64               	movwf	memcpy@n& (0+255),b
 19923  004386  0C04               	retlw	4
 19924  004388                     __end_ofPL132:
 19925                           	opt stack 0
 19926  004388                     PL140:
 19927                           	opt stack 16
 19928  004388  6B63               	clrf	(memset@c+1)& (0+255),b
 19929  00438A  6B62               	clrf	memset@c& (0+255),b
 19930  00438C  6B65               	clrf	(memset@n+1)& (0+255),b
 19931  00438E  0E10               	movlw	16
 19932  004390  6F64               	movwf	memset@n& (0+255),b
 19933  004392  0C10               	retlw	16
 19934  004394                     __end_ofPL140:
 19935                           	opt stack 0
 19936  004394                     PL190:
 19937                           	opt stack 18
 19938  004394  0EB5               	movlw	low _aesBuffer
 19939  004396  2572               	addwf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 19940  004398  6F60               	movwf	memcpy@d1& (0+255),b
 19941  00439A  6B61               	clrf	(memcpy@d1+1)& (0+255),b
 19942  00439C  0E01               	movlw	high _aesBuffer
 19943  00439E  2361               	addwfc	(memcpy@d1+1)& (0+255),f,b
 19944  0043A0  0012               	return	
 19945  0043A2                     __end_ofPL190:
 19946                           	opt stack 0
 19947  0043A2                     PL196:
 19948                           	opt stack 16
 19949  0043A2  0EB5               	movlw	low _aesBuffer
 19950  0043A4  6F60               	movwf	memset@p1& (0+255),b
 19951  0043A6  0E01               	movlw	high _aesBuffer
 19952  0043A8  6F61               	movwf	(memset@p1+1)& (0+255),b
 19953  0043AA  0012               	return	
 19954  0043AC                     __end_ofPL196:
 19955                           	opt stack 0
 19956  0043AC                     PL246:
 19957                           	opt stack 16
 19958  0043AC  0E1E               	movlw	low (_loRa+30)
 19959  0043AE  6F62               	movwf	memcpy@s1& (0+255),b
 19960  0043B0  0E02               	movlw	high (_loRa+30)
 19961  0043B2  0012               	return	
 19962  0043B4                     __end_ofPL246:
 19963                           	opt stack 0
 19964  0043B4                     PL310:
 19965                           	opt stack 18
 19966  0043B4  0EB5               	movlw	low _aesBuffer
 19967  0043B6  2572               	addwf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 19968  0043B8  6ED9               	movwf	fsr2l,c
 19969  0043BA  6ADA               	clrf	fsr2h,c
 19970  0043BC  0E01               	movlw	high _aesBuffer
 19971  0043BE  22DA               	addwfc	fsr2h,f,c
 19972  0043C0  0012               	return	
 19973  0043C2                     __end_ofPL310:
 19974                           	opt stack 0
 19975                           tosu	equ	0xFFF
 19976                           tosh	equ	0xFFE
 19977                           tosl	equ	0xFFD
 19978                           pclath	equ	0xFFA
 19979                           tblptru	equ	0xFF8
 19980                           tblptrh	equ	0xFF7
 19981                           tblptrl	equ	0xFF6
 19982                           tablat	equ	0xFF5
 19983                           prodh	equ	0xFF4
 19984                           prodl	equ	0xFF3
 19985                           intcon	equ	0xFF2
 19986                           indf0	equ	0xFEF
 19987                           postinc0	equ	0xFEE
 19988                           plusw0	equ	0xFEB
 19989                           fsr0h	equ	0xFEA
 19990                           fsr0l	equ	0xFE9
 19991                           wreg	equ	0xFE8
 19992                           postinc1	equ	0xFE6
 19993                           postdec1	equ	0xFE5
 19994                           plusw1	equ	0xFE3
 19995                           fsr1h	equ	0xFE2
 19996                           fsr1l	equ	0xFE1
 19997                           indf2	equ	0xFDF
 19998                           postinc2	equ	0xFDE
 19999                           postdec2	equ	0xFDD
 20000                           plusw2	equ	0xFDB
 20001                           fsr2h	equ	0xFDA
 20002                           fsr2l	equ	0xFD9
 20003                           status	equ	0xFD8
 20004                           
 20005 ;; *************** function _CountfOptsLength *****************
 20006 ;; Defined at:
 20007 ;;		line 2134 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 20008 ;; Parameters:    Size  Location     Type
 20009 ;;		None
 20010 ;; Auto vars:     Size  Location     Type
 20011 ;;  i               1    7[BANK0 ] unsigned char 
 20012 ;;  macCommandLe    1    6[BANK0 ] unsigned char 
 20013 ;; Return value:  Size  Location     Type
 20014 ;;                  1    wreg      unsigned char 
 20015 ;; Registers used:
 20016 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 20017 ;; Tracked objects:
 20018 ;;		On entry : 3C/2
 20019 ;;		On exit  : 3F/0
 20020 ;;		Unchanged: 0/0
 20021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20022 ;;      Params:         0       0       0       0       0       0       0       0       0
 20023 ;;      Locals:         0       2       0       0       0       0       0       0       0
 20024 ;;      Temps:          0       6       0       0       0       0       0       0       0
 20025 ;;      Totals:         0       8       0       0       0       0       0       0       0
 20026 ;;Total ram usage:        8 bytes
 20027 ;; Hardware stack levels used:    1
 20028 ;; Hardware stack levels required when called:    7
 20029 ;; This function calls:
 20030 ;;		Nothing
 20031 ;; This function is called by:
 20032 ;;		_LORAWAN_GetMaxPayloadSize
 20033 ;;		_AssemblePacket
 20034 ;; This function uses a non-reentrant model
 20035 ;;
 20036                           
 20037                           	psect	text100
 20038  004858                     __ptext100:
 20039                           	opt stack 0
 20040  004858                     _CountfOptsLength:
 20041                           	opt stack 20
 20042                           
 20043                           ;lorawan.c: 2136: uint8_t i, macCommandLength=0;
 20044                           
 20045                           ; BSR set to: 0
 20046                           ;incstack = 0
 20047  004858  0100               	movlb	0	; () banked
 20048  00485A  6B66               	clrf	CountfOptsLength@macCommandLength& (0+255),b
 20049                           
 20050                           ;lorawan.c: 2138: for (i = 0; i < loRa.crtMacCmdIndex; i++)
 20051  00485C  6B67               	clrf	CountfOptsLength@i& (0+255),b
 20052  00485E  D01C               	goto	l13050
 20053  004860                     l13042:
 20054                           
 20055                           ; BSR set to: 0
 20056                           ;lorawan.c: 2139: {
 20057                           ;lorawan.c: 2140: if(loRa.macCommands[i].receivedCid != 0xFF)
 20058  004860  5167               	movf	CountfOptsLength@i& (0+255),w,b
 20059  004862  ECA3  F010         	call	PL16	;call to abstracted procedure
 20060  004866  28DE               	incf	postinc2,w,c
 20061  004868  E016               	bz	l13048
 20062                           
 20063                           ; BSR set to: 0
 20064                           ;lorawan.c: 2141: {
 20065                           ;lorawan.c: 2142: if((macCommandLength + macEndDevCmdReplyLen[loRa.macCommands[i].receiv
      +                          edCid - 2]) <= 0x0F)
 20066  00486A  D81D               	call	PL56	;call to abstracted procedure
 20067  00486C  ECA3  F010         	call	PL16	;call to abstracted procedure
 20068  004870  D81F               	call	PL112	;call to abstracted procedure
 20069  004872  C066  F064         	movff	CountfOptsLength@macCommandLength,??_CountfOptsLength+4
 20070  004876  6B65               	clrf	(??_CountfOptsLength+5)& (0+255),b
 20071  004878  2764               	addwf	(??_CountfOptsLength+4)& (0+255),f,b
 20072  00487A  0E00               	movlw	0
 20073  00487C  2365               	addwfc	(??_CountfOptsLength+5)& (0+255),f,b
 20074  00487E  BF65               	btfsc	(??_CountfOptsLength+5)& (0+255),7,b
 20075  004880  D005               	goto	l13046
 20076  004882  5165               	movf	(??_CountfOptsLength+5)& (0+255),w,b
 20077  004884  E10E               	bnz	l13052
 20078  004886  0E10               	movlw	16
 20079  004888  5D64               	subwf	(??_CountfOptsLength+4)& (0+255),w,b
 20080  00488A  E20B               	bc	l13052
 20081  00488C                     l13046:
 20082                           
 20083                           ; BSR set to: 0
 20084                           ;lorawan.c: 2143: {
 20085                           ;lorawan.c: 2144: macCommandLength += macEndDevCmdReplyLen[loRa.macCommands[i].receivedC
      +                          id - 2];
 20086  00488C  D80C               	call	PL56	;call to abstracted procedure
 20087  00488E  ECA3  F010         	call	PL16	;call to abstracted procedure
 20088  004892  D80E               	call	PL112	;call to abstracted procedure
 20089  004894  2766               	addwf	CountfOptsLength@macCommandLength& (0+255),f,b
 20090  004896                     l13048:
 20091                           
 20092                           ; BSR set to: 0
 20093  004896  2B67               	incf	CountfOptsLength@i& (0+255),f,b
 20094  004898                     l13050:
 20095                           
 20096                           ; BSR set to: 0
 20097  004898  0102               	movlb	2	; () banked
 20098  00489A  51A7               	movf	(_loRa+167)& (0+255),w,b
 20099  00489C  0100               	movlb	0	; () banked
 20100  00489E  5D67               	subwf	CountfOptsLength@i& (0+255),w,b
 20101  0048A0  E3DF               	bnc	l13042
 20102  0048A2                     l13052:
 20103                           
 20104                           ; BSR set to: 0
 20105                           ;lorawan.c: 2149: }
 20106                           ;lorawan.c: 2150: }
 20107                           ;lorawan.c: 2151: }
 20108                           ;lorawan.c: 2153: return macCommandLength;
 20109  0048A2  5166               	movf	CountfOptsLength@macCommandLength& (0+255),w,b
 20110                           
 20111                           ; BSR set to: 0
 20112  0048A4  0012               	return		;funcret
 20113  0048A6                     __end_of_CountfOptsLength:
 20114                           	opt stack 0
 20115  0048A6                     PL56:
 20116                           	opt stack 20
 20117  0048A6  0EFE               	movlw	254
 20118  0048A8  6F60               	movwf	??_CountfOptsLength& (0+255),b
 20119  0048AA  6961               	setf	(??_CountfOptsLength+1)& (0+255),b
 20120  0048AC  5167               	movf	CountfOptsLength@i& (0+255),w,b
 20121  0048AE  0012               	return	
 20122  0048B0                     __end_ofPL56:
 20123                           	opt stack 0
 20124  0048B0                     PL112:
 20125                           	opt stack 20
 20126  0048B0  50DF               	movf	indf2,w,c
 20127  0048B2  6F62               	movwf	(??_CountfOptsLength+2)& (0+255),b
 20128  0048B4  6B63               	clrf	(??_CountfOptsLength+3)& (0+255),b
 20129  0048B6  5160               	movf	??_CountfOptsLength& (0+255),w,b
 20130  0048B8  2762               	addwf	(??_CountfOptsLength+2)& (0+255),f,b
 20131  0048BA  5161               	movf	(??_CountfOptsLength+1)& (0+255),w,b
 20132  0048BC  2363               	addwfc	(??_CountfOptsLength+3)& (0+255),f,b
 20133  0048BE  0E9B               	movlw	low _macEndDevCmdReplyLen
 20134  0048C0  2562               	addwf	(??_CountfOptsLength+2)& (0+255),w,b
 20135  0048C2  6EF6               	movwf	tblptrl,c
 20136  0048C4  0E7F               	movlw	high _macEndDevCmdReplyLen
 20137  0048C6  2163               	addwfc	(??_CountfOptsLength+3)& (0+255),w,b
 20138  0048C8  6EF7               	movwf	tblptrh,c
 20139  0048CA                     	if	0	;There are less than 3 active tblptr bytes
 20140  0048CA                     	endif
 20141  0048CA  0008               	tblrd		*
 20142  0048CC  50F5               	movf	tablat,w,c
 20143  0048CE  0012               	return	
 20144  0048D0                     __end_ofPL112:
 20145                           	opt stack 0
 20146                           tosu	equ	0xFFF
 20147                           tosh	equ	0xFFE
 20148                           tosl	equ	0xFFD
 20149                           pclath	equ	0xFFA
 20150                           tblptru	equ	0xFF8
 20151                           tblptrh	equ	0xFF7
 20152                           tblptrl	equ	0xFF6
 20153                           tablat	equ	0xFF5
 20154                           prodh	equ	0xFF4
 20155                           prodl	equ	0xFF3
 20156                           intcon	equ	0xFF2
 20157                           indf0	equ	0xFEF
 20158                           postinc0	equ	0xFEE
 20159                           plusw0	equ	0xFEB
 20160                           fsr0h	equ	0xFEA
 20161                           fsr0l	equ	0xFE9
 20162                           wreg	equ	0xFE8
 20163                           postinc1	equ	0xFE6
 20164                           postdec1	equ	0xFE5
 20165                           plusw1	equ	0xFE3
 20166                           fsr1h	equ	0xFE2
 20167                           fsr1l	equ	0xFE1
 20168                           indf2	equ	0xFDF
 20169                           postinc2	equ	0xFDE
 20170                           postdec2	equ	0xFDD
 20171                           plusw2	equ	0xFDB
 20172                           fsr2h	equ	0xFDA
 20173                           fsr2l	equ	0xFD9
 20174                           status	equ	0xFD8
 20175                           
 20176 ;; *************** function _ExtractMic *****************
 20177 ;; Defined at:
 20178 ;;		line 2187 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 20179 ;; Parameters:    Size  Location     Type
 20180 ;;  buffer          2   10[BANK0 ] PTR unsigned char 
 20181 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 20182 ;;  bufferLength    1   12[BANK0 ] unsigned char 
 20183 ;; Auto vars:     Size  Location     Type
 20184 ;;  mic             4   16[BANK0 ] unsigned long 
 20185 ;; Return value:  Size  Location     Type
 20186 ;;                  4   10[BANK0 ] unsigned long 
 20187 ;; Registers used:
 20188 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20189 ;; Tracked objects:
 20190 ;;		On entry : 3F/0
 20191 ;;		On exit  : 3F/0
 20192 ;;		Unchanged: 0/0
 20193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20194 ;;      Params:         0       4       0       0       0       0       0       0       0
 20195 ;;      Locals:         0       4       0       0       0       0       0       0       0
 20196 ;;      Temps:          0       2       0       0       0       0       0       0       0
 20197 ;;      Totals:         0      10       0       0       0       0       0       0       0
 20198 ;;Total ram usage:       10 bytes
 20199 ;; Hardware stack levels used:    1
 20200 ;; Hardware stack levels required when called:    8
 20201 ;; This function calls:
 20202 ;;		_memcpy
 20203 ;; This function is called by:
 20204 ;;		_LORAWAN_RxDone
 20205 ;; This function uses a non-reentrant model
 20206 ;;
 20207                           
 20208                           	psect	text101
 20209  005680                     __ptext101:
 20210                           	opt stack 0
 20211  005680                     _ExtractMic:
 20212                           	opt stack 18
 20213                           
 20214                           ; BSR set to: 0
 20215                           ;lorawan.c: 2189: uint32_t mic = 0;
 20216                           
 20217                           ; BSR set to: 0
 20218                           ;incstack = 0
 20219  005680  6B70               	clrf	ExtractMic@mic& (0+255),b
 20220  005682  6B71               	clrf	(ExtractMic@mic+1)& (0+255),b
 20221  005684  6B72               	clrf	(ExtractMic@mic+2)& (0+255),b
 20222  005686  6B73               	clrf	(ExtractMic@mic+3)& (0+255),b
 20223                           
 20224                           ; BSR set to: 0
 20225                           ;lorawan.c: 2190: memcpy (&mic, &buffer[bufferLength - 4], sizeof (mic));
 20226  005688  0E70               	movlw	low ExtractMic@mic
 20227  00568A  6F60               	movwf	memcpy@d1& (0+255),b
 20228  00568C  6B61               	clrf	(memcpy@d1+1)& (0+255),b
 20229  00568E  516C               	movf	ExtractMic@bufferLength& (0+255),w,b
 20230  005690  256A               	addwf	ExtractMic@buffer& (0+255),w,b
 20231  005692  6F6E               	movwf	??_ExtractMic& (0+255),b
 20232  005694  0E00               	movlw	0
 20233  005696  216B               	addwfc	(ExtractMic@buffer+1)& (0+255),w,b
 20234  005698  6F6F               	movwf	(??_ExtractMic+1)& (0+255),b
 20235  00569A  0EFC               	movlw	252
 20236  00569C  256E               	addwf	??_ExtractMic& (0+255),w,b
 20237  00569E  6F62               	movwf	memcpy@s1& (0+255),b
 20238  0056A0  0EFF               	movlw	255
 20239  0056A2  216F               	addwfc	(??_ExtractMic+1)& (0+255),w,b
 20240  0056A4  ECBF  F021         	call	PL132	;call to abstracted procedure
 20241  0056A8  EC94  F028         	call	_memcpy	;wreg free
 20242                           
 20243                           ; BSR set to: 0
 20244                           ;lorawan.c: 2191: return mic;
 20245  0056AC  C070  F06A         	movff	ExtractMic@mic,?_ExtractMic
 20246  0056B0  C071  F06B         	movff	ExtractMic@mic+1,?_ExtractMic+1
 20247  0056B4  C072  F06C         	movff	ExtractMic@mic+2,?_ExtractMic+2
 20248  0056B8  C073  F06D         	movff	ExtractMic@mic+3,?_ExtractMic+3
 20249                           
 20250                           ; BSR set to: 0
 20251  0056BC  0012               	return		;funcret
 20252  0056BE                     __end_of_ExtractMic:
 20253                           	opt stack 0
 20254                           tosu	equ	0xFFF
 20255                           tosh	equ	0xFFE
 20256                           tosl	equ	0xFFD
 20257                           pclath	equ	0xFFA
 20258                           tblptru	equ	0xFF8
 20259                           tblptrh	equ	0xFF7
 20260                           tblptrl	equ	0xFF6
 20261                           tablat	equ	0xFF5
 20262                           prodh	equ	0xFF4
 20263                           prodl	equ	0xFF3
 20264                           intcon	equ	0xFF2
 20265                           indf0	equ	0xFEF
 20266                           postinc0	equ	0xFEE
 20267                           plusw0	equ	0xFEB
 20268                           fsr0h	equ	0xFEA
 20269                           fsr0l	equ	0xFE9
 20270                           wreg	equ	0xFE8
 20271                           postinc1	equ	0xFE6
 20272                           postdec1	equ	0xFE5
 20273                           plusw1	equ	0xFE3
 20274                           fsr1h	equ	0xFE2
 20275                           fsr1l	equ	0xFE1
 20276                           indf2	equ	0xFDF
 20277                           postinc2	equ	0xFDE
 20278                           postdec2	equ	0xFDD
 20279                           plusw2	equ	0xFDB
 20280                           fsr2h	equ	0xFDA
 20281                           fsr2l	equ	0xFD9
 20282                           status	equ	0xFD8
 20283                           
 20284 ;; *************** function _ComputeSessionKeys *****************
 20285 ;; Defined at:
 20286 ;;		line 2062 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 20287 ;; Parameters:    Size  Location     Type
 20288 ;;  joinAcceptBu    2   64[BANK0 ] PTR struct .
 20289 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 20290 ;; Auto vars:     Size  Location     Type
 20291 ;;		None
 20292 ;; Return value:  Size  Location     Type
 20293 ;;                  1    wreg      void 
 20294 ;; Registers used:
 20295 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20296 ;; Tracked objects:
 20297 ;;		On entry : 3D/0
 20298 ;;		On exit  : 3F/0
 20299 ;;		Unchanged: 0/0
 20300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20301 ;;      Params:         0       2       0       0       0       0       0       0       0
 20302 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20303 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20304 ;;      Totals:         0       2       0       0       0       0       0       0       0
 20305 ;;Total ram usage:        2 bytes
 20306 ;; Hardware stack levels used:    1
 20307 ;; Hardware stack levels required when called:   10
 20308 ;; This function calls:
 20309 ;;		_AESEncodeLoRa
 20310 ;;		_PrepareSessionKeys
 20311 ;; This function is called by:
 20312 ;;		_LORAWAN_RxDone
 20313 ;; This function uses a non-reentrant model
 20314 ;;
 20315                           
 20316                           	psect	text102
 20317  004C5A                     __ptext102:
 20318                           	opt stack 0
 20319  004C5A                     _ComputeSessionKeys:
 20320                           	opt stack 16
 20321                           
 20322                           ;lorawan.c: 2064: PrepareSessionKeys(loRa.activationParameters.applicationSessionKey, jo
      +                          inAcceptBuffer->members.appNonce, joinAcceptBuffer->members.networkId);
 20323                           
 20324                           ; BSR set to: 0
 20325                           ;incstack = 0
 20326  004C5A  0E32               	movlw	low (_loRa+50)
 20327  004C5C  0100               	movlb	0	; () banked
 20328  004C5E  6F6A               	movwf	PrepareSessionKeys@sessionKey& (0+255),b
 20329  004C60  0E02               	movlw	high (_loRa+50)
 20330  004C62  D81C               	call	PL150	;call to abstracted procedure
 20331  004C64  ECE3  F027         	call	_PrepareSessionKeys	;wreg free
 20332                           
 20333                           ; BSR set to: 0
 20334                           ;lorawan.c: 2065: loRa.activationParameters.applicationSessionKey[0] = 0x02;
 20335  004C68  0E02               	movlw	2
 20336  004C6A  0102               	movlb	2	; () banked
 20337  004C6C  6F32               	movwf	(_loRa+50)& (0+255),b
 20338                           
 20339                           ; BSR set to: 2
 20340                           ;lorawan.c: 2066: AESEncodeLoRa(loRa.activationParameters.applicationSessionKey, loRa.ac
      +                          tivationParameters.applicationKey);
 20341  004C6E  0E32               	movlw	low (_loRa+50)
 20342  004C70  0100               	movlb	0	; () banked
 20343  004C72  6F8C               	movwf	AESEncodeLoRa@block& (0+255),b
 20344  004C74  0E02               	movlw	high (_loRa+50)
 20345  004C76  D81F               	call	PL240	;call to abstracted procedure
 20346  004C78  EC51  F02E         	call	_AESEncodeLoRa	;wreg free
 20347                           
 20348                           ; BSR set to: 0
 20349                           ;lorawan.c: 2068: PrepareSessionKeys(loRa.activationParameters.networkSessionKey, joinAc
      +                          ceptBuffer->members.appNonce, joinAcceptBuffer->members.networkId);
 20350  004C7C  0E22               	movlw	low (_loRa+34)
 20351  004C7E  6F6A               	movwf	PrepareSessionKeys@sessionKey& (0+255),b
 20352  004C80  0E02               	movlw	high (_loRa+34)
 20353  004C82  D80C               	call	PL150	;call to abstracted procedure
 20354  004C84  ECE3  F027         	call	_PrepareSessionKeys	;wreg free
 20355                           
 20356                           ; BSR set to: 0
 20357                           ;lorawan.c: 2069: loRa.activationParameters.networkSessionKey[0] = 0x01;
 20358  004C88  0E01               	movlw	1
 20359  004C8A  0102               	movlb	2	; () banked
 20360  004C8C  6F22               	movwf	(_loRa+34)& (0+255),b
 20361                           
 20362                           ;lorawan.c: 2070: AESEncodeLoRa(loRa.activationParameters.networkSessionKey, loRa.activa
      +                          tionParameters.applicationKey);
 20363  004C8E  0E22               	movlw	low (_loRa+34)
 20364  004C90  0100               	movlb	0	; () banked
 20365  004C92  6F8C               	movwf	AESEncodeLoRa@block& (0+255),b
 20366  004C94  0E02               	movlw	high (_loRa+34)
 20367  004C96  D80F               	call	PL240	;call to abstracted procedure
 20368  004C98  EF51  F02E         	goto	_AESEncodeLoRa	;wreg free
 20369  004C9C                     __end_of_ComputeSessionKeys:
 20370                           	opt stack 0
 20371  004C9C                     PL150:
 20372                           	opt stack 16
 20373  004C9C  6F6B               	movwf	(PrepareSessionKeys@sessionKey+1)& (0+255),b
 20374  004C9E  29A0               	incf	ComputeSessionKeys@joinAcceptBuffer& (0+255),w,b
 20375  004CA0  6F6C               	movwf	PrepareSessionKeys@appNonce& (0+255),b
 20376  004CA2  0E00               	movlw	0
 20377  004CA4  21A1               	addwfc	(ComputeSessionKeys@joinAcceptBuffer+1)& (0+255),w,b
 20378  004CA6  6F6D               	movwf	(PrepareSessionKeys@appNonce+1)& (0+255),b
 20379  004CA8  0E04               	movlw	4
 20380  004CAA  25A0               	addwf	ComputeSessionKeys@joinAcceptBuffer& (0+255),w,b
 20381  004CAC  6F6E               	movwf	PrepareSessionKeys@networkId& (0+255),b
 20382  004CAE  0E00               	movlw	0
 20383  004CB0  21A1               	addwfc	(ComputeSessionKeys@joinAcceptBuffer+1)& (0+255),w,b
 20384  004CB2  6F6F               	movwf	(PrepareSessionKeys@networkId+1)& (0+255),b
 20385  004CB4  0012               	return	
 20386  004CB6                     __end_ofPL150:
 20387                           	opt stack 0
 20388  004CB6                     PL240:
 20389                           	opt stack 12
 20390  004CB6  6F8D               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 20391  004CB8  0E42               	movlw	low (_loRa+66)
 20392  004CBA  6F8E               	movwf	AESEncodeLoRa@key& (0+255),b
 20393  004CBC  0E02               	movlw	high (_loRa+66)
 20394  004CBE  6F8F               	movwf	(AESEncodeLoRa@key+1)& (0+255),b
 20395  004CC0  0012               	return	
 20396  004CC2                     __end_ofPL240:
 20397                           	opt stack 0
 20398                           tosu	equ	0xFFF
 20399                           tosh	equ	0xFFE
 20400                           tosl	equ	0xFFD
 20401                           pclath	equ	0xFFA
 20402                           tblptru	equ	0xFF8
 20403                           tblptrh	equ	0xFF7
 20404                           tblptrl	equ	0xFF6
 20405                           tablat	equ	0xFF5
 20406                           prodh	equ	0xFF4
 20407                           prodl	equ	0xFF3
 20408                           intcon	equ	0xFF2
 20409                           indf0	equ	0xFEF
 20410                           postinc0	equ	0xFEE
 20411                           plusw0	equ	0xFEB
 20412                           fsr0h	equ	0xFEA
 20413                           fsr0l	equ	0xFE9
 20414                           wreg	equ	0xFE8
 20415                           postinc1	equ	0xFE6
 20416                           postdec1	equ	0xFE5
 20417                           plusw1	equ	0xFE3
 20418                           fsr1h	equ	0xFE2
 20419                           fsr1l	equ	0xFE1
 20420                           indf2	equ	0xFDF
 20421                           postinc2	equ	0xFDE
 20422                           postdec2	equ	0xFDD
 20423                           plusw2	equ	0xFDB
 20424                           fsr2h	equ	0xFDA
 20425                           fsr2l	equ	0xFD9
 20426                           status	equ	0xFD8
 20427                           
 20428 ;; *************** function _PrepareSessionKeys *****************
 20429 ;; Defined at:
 20430 ;;		line 2045 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 20431 ;; Parameters:    Size  Location     Type
 20432 ;;  sessionKey      2   10[BANK0 ] PTR unsigned char 
 20433 ;;		 -> loRa.activationParameters(105), loRa(245), 
 20434 ;;  appNonce        2   12[BANK0 ] PTR unsigned char 
 20435 ;;		 -> ComputeSessionKeys@joinAcceptBuffer(2), radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 20436 ;;  networkId       2   14[BANK0 ] PTR unsigned char 
 20437 ;;		 -> ComputeSessionKeys@joinAcceptBuffer(2), radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 20438 ;; Auto vars:     Size  Location     Type
 20439 ;;  index           1   16[BANK0 ] unsigned char 
 20440 ;; Return value:  Size  Location     Type
 20441 ;;                  1    wreg      void 
 20442 ;; Registers used:
 20443 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20444 ;; Tracked objects:
 20445 ;;		On entry : 3F/0
 20446 ;;		On exit  : 3F/0
 20447 ;;		Unchanged: 0/0
 20448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20449 ;;      Params:         0       6       0       0       0       0       0       0       0
 20450 ;;      Locals:         0       1       0       0       0       0       0       0       0
 20451 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20452 ;;      Totals:         0       7       0       0       0       0       0       0       0
 20453 ;;Total ram usage:        7 bytes
 20454 ;; Hardware stack levels used:    1
 20455 ;; Hardware stack levels required when called:    8
 20456 ;; This function calls:
 20457 ;;		_memcpy
 20458 ;;		_memset
 20459 ;; This function is called by:
 20460 ;;		_ComputeSessionKeys
 20461 ;; This function uses a non-reentrant model
 20462 ;;
 20463                           
 20464                           	psect	text103
 20465  004FC6                     __ptext103:
 20466                           	opt stack 0
 20467  004FC6                     _PrepareSessionKeys:
 20468                           	opt stack 17
 20469                           
 20470                           ; BSR set to: 0
 20471                           ;lorawan.c: 2047: uint8_t index = 0;
 20472                           
 20473                           ; BSR set to: 0
 20474                           ;incstack = 0
 20475  004FC6  6B70               	clrf	PrepareSessionKeys@index& (0+255),b
 20476                           
 20477                           ; BSR set to: 0
 20478                           ;lorawan.c: 2049: memset (&sessionKey[index], 0, sizeof(aesBuffer));
 20479  004FC8  C06A  F060         	movff	PrepareSessionKeys@sessionKey,memset@p1
 20480  004FCC  C06B  F061         	movff	PrepareSessionKeys@sessionKey+1,memset@p1+1
 20481  004FD0  ECC4  F021         	call	PL140	;call to abstracted procedure
 20482  004FD4  ECEF  F02D         	call	_memset	;wreg free
 20483                           
 20484                           ; BSR set to: 0
 20485                           ;lorawan.c: 2050: index ++;
 20486  004FD8  2B70               	incf	PrepareSessionKeys@index& (0+255),f,b
 20487                           
 20488                           ; BSR set to: 0
 20489                           ;lorawan.c: 2052: memcpy(&sessionKey[index], appNonce, 3);
 20490  004FDA  D818               	call	PL192	;call to abstracted procedure
 20491  004FDC  C06C  F062         	movff	PrepareSessionKeys@appNonce,memcpy@s1
 20492  004FE0  C06D  F063         	movff	PrepareSessionKeys@appNonce+1,memcpy@s1+1
 20493  004FE4  D81A               	call	PL436	;call to abstracted procedure
 20494  004FE6  EC94  F028         	call	_memcpy	;wreg free
 20495                           
 20496                           ; BSR set to: 0
 20497                           ;lorawan.c: 2053: index = index + 3;
 20498  004FEA  0E03               	movlw	3
 20499  004FEC  2770               	addwf	PrepareSessionKeys@index& (0+255),f,b
 20500                           
 20501                           ; BSR set to: 0
 20502                           ;lorawan.c: 2055: memcpy(&sessionKey[index], networkId, 3);
 20503  004FEE  D80E               	call	PL192	;call to abstracted procedure
 20504  004FF0  C06E  F062         	movff	PrepareSessionKeys@networkId,memcpy@s1
 20505  004FF4  C06F  F063         	movff	PrepareSessionKeys@networkId+1,memcpy@s1+1
 20506  004FF8  D810               	call	PL436	;call to abstracted procedure
 20507  004FFA  EC94  F028         	call	_memcpy	;wreg free
 20508                           
 20509                           ; BSR set to: 0
 20510                           ;lorawan.c: 2056: index = index + 3;
 20511  004FFE  0E03               	movlw	3
 20512  005000  2770               	addwf	PrepareSessionKeys@index& (0+255),f,b
 20513                           
 20514                           ; BSR set to: 0
 20515                           ;lorawan.c: 2058: memcpy(&sessionKey[index], &loRa.devNonce, sizeof(loRa.devNonce) );
 20516  005002  D804               	call	PL192	;call to abstracted procedure
 20517  005004  EC7C  F017         	call	PL262	;call to abstracted procedure
 20518  005008  EF94  F028         	goto	_memcpy	;wreg free
 20519  00500C                     __end_of_PrepareSessionKeys:
 20520                           	opt stack 0
 20521  00500C                     PL192:
 20522                           	opt stack 17
 20523  00500C  5170               	movf	PrepareSessionKeys@index& (0+255),w,b
 20524  00500E  256A               	addwf	PrepareSessionKeys@sessionKey& (0+255),w,b
 20525  005010  6F60               	movwf	memcpy@d1& (0+255),b
 20526  005012  0E00               	movlw	0
 20527  005014  216B               	addwfc	(PrepareSessionKeys@sessionKey+1)& (0+255),w,b
 20528  005016  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 20529  005018  0012               	return	
 20530  00501A                     __end_ofPL192:
 20531                           	opt stack 0
 20532  00501A                     PL436:
 20533                           	opt stack 17
 20534  00501A  6B65               	clrf	(memcpy@n+1)& (0+255),b
 20535  00501C  0E03               	movlw	3
 20536  00501E  6F64               	movwf	memcpy@n& (0+255),b
 20537  005020  0C03               	retlw	3
 20538  005022                     __end_ofPL436:
 20539                           	opt stack 0
 20540                           tosu	equ	0xFFF
 20541                           tosh	equ	0xFFE
 20542                           tosl	equ	0xFFD
 20543                           pclath	equ	0xFFA
 20544                           tblptru	equ	0xFF8
 20545                           tblptrh	equ	0xFF7
 20546                           tblptrl	equ	0xFF6
 20547                           tablat	equ	0xFF5
 20548                           prodh	equ	0xFF4
 20549                           prodl	equ	0xFF3
 20550                           intcon	equ	0xFF2
 20551                           indf0	equ	0xFEF
 20552                           postinc0	equ	0xFEE
 20553                           plusw0	equ	0xFEB
 20554                           fsr0h	equ	0xFEA
 20555                           fsr0l	equ	0xFE9
 20556                           wreg	equ	0xFE8
 20557                           postinc1	equ	0xFE6
 20558                           postdec1	equ	0xFE5
 20559                           plusw1	equ	0xFE3
 20560                           fsr1h	equ	0xFE2
 20561                           fsr1l	equ	0xFE1
 20562                           indf2	equ	0xFDF
 20563                           postinc2	equ	0xFDE
 20564                           postdec2	equ	0xFDD
 20565                           plusw2	equ	0xFDB
 20566                           fsr2h	equ	0xFDA
 20567                           fsr2l	equ	0xFD9
 20568                           status	equ	0xFD8
 20569                           
 20570 ;; *************** function _CheckMcastFlags *****************
 20571 ;; Defined at:
 20572 ;;		line 2097 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 20573 ;; Parameters:    Size  Location     Type
 20574 ;;  hdr             2    0[BANK0 ] PTR struct .
 20575 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 20576 ;; Auto vars:     Size  Location     Type
 20577 ;;		None
 20578 ;; Return value:  Size  Location     Type
 20579 ;;                  1    wreg      unsigned char 
 20580 ;; Registers used:
 20581 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20582 ;; Tracked objects:
 20583 ;;		On entry : 3F/2
 20584 ;;		On exit  : 3D/0
 20585 ;;		Unchanged: 0/0
 20586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20587 ;;      Params:         0       2       0       0       0       0       0       0       0
 20588 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20589 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20590 ;;      Totals:         0       2       0       0       0       0       0       0       0
 20591 ;;Total ram usage:        2 bytes
 20592 ;; Hardware stack levels used:    1
 20593 ;; Hardware stack levels required when called:    7
 20594 ;; This function calls:
 20595 ;;		Nothing
 20596 ;; This function is called by:
 20597 ;;		_LORAWAN_RxDone
 20598 ;; This function uses a non-reentrant model
 20599 ;;
 20600                           
 20601                           	psect	text104
 20602  00507A                     __ptext104:
 20603                           	opt stack 0
 20604  00507A                     _CheckMcastFlags:
 20605                           	opt stack 19
 20606                           
 20607                           ; BSR set to: 2
 20608                           ;lorawan.c: 2109: if ((0 != hdr->members.fCtrl.ack) || (0 != hdr->members.fCtrl.adrAckRe
      +                          q) || (FRAME_TYPE_DATA_UNCONFIRMED_DOWN != hdr->members.mhdr.bits.mType))
 20609                           
 20610                           ; BSR set to: 0
 20611                           ;incstack = 0
 20612  00507A  0100               	movlb	0	; () banked
 20613  00507C  D823               	call	PL136	;call to abstracted procedure
 20614  00507E  BADF               	btfsc	indf2,5,c
 20615  005080  0C00               	retlw	0
 20616                           
 20617                           ; BSR set to: 0
 20618  005082  D820               	call	PL136	;call to abstracted procedure
 20619  005084  BCDF               	btfsc	indf2,6,c
 20620  005086  0C00               	retlw	0
 20621                           
 20622                           ; BSR set to: 0
 20623  005088  C060  FFD9         	movff	CheckMcastFlags@hdr,fsr2l
 20624  00508C  C061  FFDA         	movff	CheckMcastFlags@hdr+1,fsr2h
 20625  005090  38DF               	swapf	223,w,c
 20626  005092  32E8               	rrcf	wreg,f,c
 20627  005094  0B07               	andlw	7
 20628  005096  0A03               	xorlw	3
 20629  005098  E001               	bz	l13974
 20630                           
 20631                           ; BSR set to: 0
 20632                           ;lorawan.c: 2110: {
 20633                           ;lorawan.c: 2111: return 0;
 20634  00509A  0C00               	retlw	0
 20635  00509C                     l13974:
 20636                           
 20637                           ; BSR set to: 0
 20638                           ;lorawan.c: 2112: }
 20639                           ;lorawan.c: 2114: if (0 != hdr->members.fCtrl.fOptsLen)
 20640  00509C  D813               	call	PL136	;call to abstracted procedure
 20641  00509E  50DF               	movf	223,w,c
 20642  0050A0  0B0F               	andlw	15
 20643  0050A2  E001               	bz	l13982
 20644  0050A4  0C00               	retlw	0
 20645  0050A6                     l13982:
 20646                           
 20647                           ; BSR set to: 0
 20648                           ;lorawan.c: 2118: else
 20649                           ;lorawan.c: 2119: {
 20650                           ;lorawan.c: 2120: if ( 0 == *(((uint8_t *)hdr) + 8))
 20651  0050A6  EE20 F008          	lfsr	2,8
 20652  0050AA  5160               	movf	CheckMcastFlags@hdr& (0+255),w,b
 20653  0050AC  26D9               	addwf	fsr2l,f,c
 20654  0050AE  5161               	movf	(CheckMcastFlags@hdr+1)& (0+255),w,b
 20655  0050B0  22DA               	addwfc	fsr2h,f,c
 20656  0050B2  50DF               	movf	indf2,w,c
 20657  0050B4  E101               	bnz	l13988
 20658  0050B6  0C00               	retlw	0
 20659  0050B8                     l13988:
 20660                           
 20661                           ; BSR set to: 0
 20662                           ;lorawan.c: 2123: }
 20663                           ;lorawan.c: 2124: }
 20664                           ;lorawan.c: 2126: if (hdr->members.fCtrl.fPending == 1)
 20665  0050B8  D805               	call	PL136	;call to abstracted procedure
 20666  0050BA  A8DF               	btfss	indf2,4,c
 20667  0050BC  0C01               	retlw	1
 20668                           
 20669                           ; BSR set to: 0
 20670                           ;lorawan.c: 2127: {
 20671                           ;lorawan.c: 2128: loRa.lorawanMacStatus.fPending = 1;
 20672  0050BE  0102               	movlb	2	; () banked
 20673  0050C0  8700               	bsf	_loRa& (0+255),3,b
 20674                           
 20675                           ;lorawan.c: 2129: }
 20676                           ;lorawan.c: 2131: return 1;
 20677  0050C2  0C01               	retlw	1	;funcret
 20678  0050C4                     __end_of_CheckMcastFlags:
 20679                           	opt stack 0
 20680  0050C4                     PL136:
 20681                           	opt stack 19
 20682  0050C4  EE20 F005          	lfsr	2,5
 20683  0050C8  5160               	movf	CheckMcastFlags@hdr& (0+255),w,b
 20684  0050CA  26D9               	addwf	fsr2l,f,c
 20685  0050CC  5161               	movf	(CheckMcastFlags@hdr+1)& (0+255),w,b
 20686  0050CE  22DA               	addwfc	fsr2h,f,c
 20687  0050D0  0012               	return	
 20688  0050D2                     __end_ofPL136:
 20689                           	opt stack 0
 20690                           tosu	equ	0xFFF
 20691                           tosh	equ	0xFFE
 20692                           tosl	equ	0xFFD
 20693                           pclath	equ	0xFFA
 20694                           tblptru	equ	0xFF8
 20695                           tblptrh	equ	0xFF7
 20696                           tblptrl	equ	0xFF6
 20697                           tablat	equ	0xFF5
 20698                           prodh	equ	0xFF4
 20699                           prodl	equ	0xFF3
 20700                           intcon	equ	0xFF2
 20701                           indf0	equ	0xFEF
 20702                           postinc0	equ	0xFEE
 20703                           plusw0	equ	0xFEB
 20704                           fsr0h	equ	0xFEA
 20705                           fsr0l	equ	0xFE9
 20706                           wreg	equ	0xFE8
 20707                           postinc1	equ	0xFE6
 20708                           postdec1	equ	0xFE5
 20709                           plusw1	equ	0xFE3
 20710                           fsr1h	equ	0xFE2
 20711                           fsr1l	equ	0xFE1
 20712                           indf2	equ	0xFDF
 20713                           postinc2	equ	0xFDE
 20714                           postdec2	equ	0xFDD
 20715                           plusw2	equ	0xFDB
 20716                           fsr2h	equ	0xFDA
 20717                           fsr2l	equ	0xFD9
 20718                           status	equ	0xFD8
 20719                           
 20720 ;; *************** function _CheckFlags *****************
 20721 ;; Defined at:
 20722 ;;		line 2074 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 20723 ;; Parameters:    Size  Location     Type
 20724 ;;  hdr             2    0[BANK0 ] PTR struct .
 20725 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 20726 ;; Auto vars:     Size  Location     Type
 20727 ;;		None
 20728 ;; Return value:  Size  Location     Type
 20729 ;;                  1    wreg      void 
 20730 ;; Registers used:
 20731 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20732 ;; Tracked objects:
 20733 ;;		On entry : 3F/2
 20734 ;;		On exit  : 3D/0
 20735 ;;		Unchanged: 0/0
 20736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20737 ;;      Params:         0       2       0       0       0       0       0       0       0
 20738 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20739 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20740 ;;      Totals:         0       2       0       0       0       0       0       0       0
 20741 ;;Total ram usage:        2 bytes
 20742 ;; Hardware stack levels used:    1
 20743 ;; Hardware stack levels required when called:    7
 20744 ;; This function calls:
 20745 ;;		Nothing
 20746 ;; This function is called by:
 20747 ;;		_LORAWAN_RxDone
 20748 ;; This function uses a non-reentrant model
 20749 ;;
 20750                           
 20751                           	psect	text105
 20752  005496                     __ptext105:
 20753                           	opt stack 0
 20754  005496                     _CheckFlags:
 20755                           	opt stack 0
 20756                           
 20757                           ; BSR set to: 2
 20758                           ;lorawan.c: 2076: if (hdr->members.fCtrl.adr == 1)
 20759                           
 20760                           ;incstack = 0
 20761  005496  D81C               	call	PL154	;call to abstracted procedure
 20762  005498  AEDF               	btfss	indf2,7,c
 20763  00549A  D002               	goto	l14022
 20764                           
 20765                           ; BSR set to: 0
 20766                           ;lorawan.c: 2077: {
 20767                           ;lorawan.c: 2078: loRa.macStatus.adr = 1;
 20768  00549C  0102               	movlb	2	; () banked
 20769  00549E  8D02               	bsf	(_loRa+2)& (0+255),6,b
 20770  0054A0                     l14022:
 20771                           
 20772                           ;lorawan.c: 2079: }
 20773                           ;lorawan.c: 2081: if (hdr->members.fCtrl.fPending == 1)
 20774  0054A0  D817               	call	PL154	;call to abstracted procedure
 20775  0054A2  A8DF               	btfss	indf2,4,c
 20776  0054A4  D002               	goto	l14026
 20777                           
 20778                           ; BSR set to: 0
 20779                           ;lorawan.c: 2082: {
 20780                           ;lorawan.c: 2083: loRa.lorawanMacStatus.fPending = 1;
 20781  0054A6  0102               	movlb	2	; () banked
 20782  0054A8  8700               	bsf	_loRa& (0+255),3,b
 20783  0054AA                     l14026:
 20784                           
 20785                           ;lorawan.c: 2084: }
 20786                           ;lorawan.c: 2086: if (hdr->members.fCtrl.adrAckReq == 1)
 20787  0054AA  D812               	call	PL154	;call to abstracted procedure
 20788  0054AC  ACDF               	btfss	indf2,6,c
 20789  0054AE  D002               	goto	l14030
 20790                           
 20791                           ; BSR set to: 0
 20792                           ;lorawan.c: 2087: {
 20793                           ;lorawan.c: 2088: loRa.lorawanMacStatus.adrAckRequest = 1;
 20794  0054B0  0102               	movlb	2	; () banked
 20795  0054B2  8900               	bsf	_loRa& (0+255),4,b
 20796  0054B4                     l14030:
 20797                           
 20798                           ;lorawan.c: 2089: }
 20799                           ;lorawan.c: 2091: if (hdr->members.mhdr.bits.mType == FRAME_TYPE_DATA_CONFIRMED_DOWN)
 20800  0054B4  C060  FFD9         	movff	CheckFlags@hdr,fsr2l
 20801  0054B8  C061  FFDA         	movff	CheckFlags@hdr+1,fsr2h
 20802  0054BC  0100               	movlb	0	; () banked
 20803  0054BE  38DF               	swapf	223,w,c
 20804  0054C0  32E8               	rrcf	wreg,f,c
 20805  0054C2  0B07               	andlw	7
 20806  0054C4  0A05               	xorlw	5
 20807  0054C6  A4D8               	btfss	status,2,c
 20808  0054C8  0012               	return	
 20809                           
 20810                           ; BSR set to: 0
 20811                           ;lorawan.c: 2092: {
 20812                           ;lorawan.c: 2093: loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage = 1;
 20813  0054CA  0102               	movlb	2	; () banked
 20814  0054CC  8300               	bsf	_loRa& (0+255),1,b
 20815  0054CE  0012               	return		;funcret
 20816  0054D0                     __end_of_CheckFlags:
 20817                           	opt stack 0
 20818  0054D0                     PL154:
 20819                           	opt stack 19
 20820  0054D0  0100               	movlb	0	; () banked
 20821  0054D2  EE20 F005          	lfsr	2,5
 20822  0054D6  5160               	movf	CheckFlags@hdr& (0+255),w,b
 20823  0054D8  26D9               	addwf	fsr2l,f,c
 20824  0054DA  5161               	movf	(CheckFlags@hdr+1)& (0+255),w,b
 20825  0054DC  22DA               	addwfc	fsr2h,f,c
 20826  0054DE  0012               	return	
 20827  0054E0                     __end_ofPL154:
 20828                           	opt stack 0
 20829                           tosu	equ	0xFFF
 20830                           tosh	equ	0xFFE
 20831                           tosl	equ	0xFFD
 20832                           pclath	equ	0xFFA
 20833                           tblptru	equ	0xFF8
 20834                           tblptrh	equ	0xFF7
 20835                           tblptrl	equ	0xFF6
 20836                           tablat	equ	0xFF5
 20837                           prodh	equ	0xFF4
 20838                           prodl	equ	0xFF3
 20839                           intcon	equ	0xFF2
 20840                           indf0	equ	0xFEF
 20841                           postinc0	equ	0xFEE
 20842                           plusw0	equ	0xFEB
 20843                           fsr0h	equ	0xFEA
 20844                           fsr0l	equ	0xFE9
 20845                           wreg	equ	0xFE8
 20846                           postinc1	equ	0xFE6
 20847                           postdec1	equ	0xFE5
 20848                           plusw1	equ	0xFE3
 20849                           fsr1h	equ	0xFE2
 20850                           fsr1l	equ	0xFE1
 20851                           indf2	equ	0xFDF
 20852                           postinc2	equ	0xFDE
 20853                           postdec2	equ	0xFDD
 20854                           plusw2	equ	0xFDB
 20855                           fsr2h	equ	0xFDA
 20856                           fsr2l	equ	0xFD9
 20857                           status	equ	0xFD8
 20858                           
 20859 ;; *************** function _RADIO_FSKPacketSent *****************
 20860 ;; Defined at:
 20861 ;;		line 1093 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 20862 ;; Parameters:    Size  Location     Type
 20863 ;;		None
 20864 ;; Auto vars:     Size  Location     Type
 20865 ;;  timeOnAir       4  116[BANK0 ] unsigned long 
 20866 ;;  irqFlags        1  124[BANK0 ] unsigned char 
 20867 ;; Return value:  Size  Location     Type
 20868 ;;                  1    wreg      void 
 20869 ;; Registers used:
 20870 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20871 ;; Tracked objects:
 20872 ;;		On entry : 3F/1
 20873 ;;		On exit  : 3C/0
 20874 ;;		Unchanged: 0/0
 20875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20876 ;;      Params:         0       0       0       0       0       0       0       0       0
 20877 ;;      Locals:         0       9       0       0       0       0       0       0       0
 20878 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20879 ;;      Totals:         0       9       0       0       0       0       0       0       0
 20880 ;;Total ram usage:        9 bytes
 20881 ;; Hardware stack levels used:    1
 20882 ;; Hardware stack levels required when called:   15
 20883 ;; This function calls:
 20884 ;;		_LORAWAN_TxDone
 20885 ;;		_RADIO_RegisterRead
 20886 ;;		_RADIO_WriteMode
 20887 ;;		_SwTimerReadValue
 20888 ;;		_SwTimerStop
 20889 ;;		___lmul
 20890 ;; This function is called by:
 20891 ;;		_RADIO_DIO0
 20892 ;; This function uses a non-reentrant model
 20893 ;;
 20894                           
 20895                           	psect	text106
 20896  003228                     __ptext106:
 20897                           	opt stack 0
 20898  003228                     _RADIO_FSKPacketSent:
 20899                           	opt stack 13
 20900                           
 20901                           ; BSR set to: 1
 20902                           ;radio_driver_SX1276.c: 1095: uint8_t irqFlags;
 20903                           ;radio_driver_SX1276.c: 1096: uint32_t timeOnAir;
 20904                           ;radio_driver_SX1276.c: 1098: irqFlags = RADIO_RegisterRead(0x3F);
 20905                           
 20906                           ;incstack = 0
 20907  003228  0E3F               	movlw	63
 20908  00322A  EC64  F02E         	call	_RADIO_RegisterRead
 20909  00322E  6FDC               	movwf	RADIO_FSKPacketSent@irqFlags& (0+255),b
 20910                           
 20911                           ; BSR set to: 0
 20912                           ;radio_driver_SX1276.c: 1099: if ((1<<(3)) == (irqFlags & (1<<(3))))
 20913  003230  A7DC               	btfss	RADIO_FSKPacketSent@irqFlags& (0+255),3,b
 20914  003232  0012               	return	
 20915                           
 20916                           ; BSR set to: 0
 20917                           ;radio_driver_SX1276.c: 1100: {
 20918                           ;radio_driver_SX1276.c: 1101: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
 20919  003234  D85C               	call	PL248	;call to abstracted procedure
 20920  003236  ECDB  F01A         	call	_RADIO_WriteMode
 20921                           
 20922                           ;radio_driver_SX1276.c: 1102: RadioConfiguration.flags &= ~(1 << (0));
 20923  00323A  0101               	movlb	1	; () banked
 20924  00323C  91A2               	bcf	(_RadioConfiguration+35)& (0+255),0,b
 20925                           
 20926                           ; BSR set to: 1
 20927                           ;radio_driver_SX1276.c: 1104: SwTimerStop(RadioConfiguration.watchdogTimerId);
 20928  00323E  51A8               	movf	(_RadioConfiguration+41)& (0+255),w,b
 20929  003240  EC68  F030         	call	_SwTimerStop
 20930                           
 20931                           ; BSR set to: 0
 20932                           ;radio_driver_SX1276.c: 1106: if ((RadioConfiguration.flags & (1 << (4))) == 0)
 20933  003244  0101               	movlb	1	; () banked
 20934  003246  B9A2               	btfsc	(_RadioConfiguration+35)& (0+255),4,b
 20935  003248  0012               	return	
 20936                           
 20937                           ; BSR set to: 1
 20938                           ;radio_driver_SX1276.c: 1107: {
 20939                           ;radio_driver_SX1276.c: 1108: timeOnAir = ((uint32_t)20000) - ((SwTimerReadValue(RadioCo
      +                          nfiguration.timeOnAirTimerId)) < 0x00DFAC1FUL ? ( (((uint32_t)(SwTimerReadValue(RadioCon
      +                          figuration.timeOnAirTimerId))) * 125UL) >> (12) ) : ( (((uint32_t)(SwTimerReadValue(Radi
      +                          oConfiguration.t
 20940  00324A  51A6               	movf	(_RadioConfiguration+39)& (0+255),w,b
 20941  00324C  EC98  F02C         	call	_SwTimerReadValue
 20942  003250  518A               	movf	(?_SwTimerReadValue+3)& (0+255),w,b
 20943  003252  E102               	bnz	u17930
 20944  003254  D851               	call	PL294	;call to abstracted procedure
 20945  003256  E30D               	bnc	l15156
 20946  003258                     u17930:
 20947                           
 20948                           ; BSR set to: 0
 20949  003258  0101               	movlb	1	; () banked
 20950  00325A  51A6               	movf	(_RadioConfiguration+39)& (0+255),w,b
 20951  00325C  EC98  F02C         	call	_SwTimerReadValue
 20952  003260  0E0D               	movlw	13
 20953  003262  D001               	goto	u17940
 20954  003264                     u17945:
 20955  003264  D850               	call	PL330	;call to abstracted procedure
 20956  003266                     u17940:
 20957  003266  2EE8               	decfsz	wreg,f,c
 20958  003268  D7FD               	goto	u17945
 20959  00326A  D82D               	call	PL36	;call to abstracted procedure
 20960  00326C  EC25  F02A         	call	___lmul	;wreg free
 20961  003270  D00C               	goto	L13
 20962  003272                     l15156:
 20963                           
 20964                           ; BSR set to: 0
 20965  003272  0101               	movlb	1	; () banked
 20966  003274  51A6               	movf	(_RadioConfiguration+39)& (0+255),w,b
 20967  003276  EC98  F02C         	call	_SwTimerReadValue
 20968  00327A  D825               	call	PL36	;call to abstracted procedure
 20969  00327C  EC25  F02A         	call	___lmul	;wreg free
 20970  003280  0E0D               	movlw	13
 20971  003282  D001               	goto	u17950
 20972  003284                     u17955:
 20973  003284  D82E               	call	PL242	;call to abstracted procedure
 20974  003286                     u17950:
 20975  003286  2EE8               	decfsz	wreg,f,c
 20976  003288  D7FD               	goto	u17955
 20977  00328A                     L13:
 20978  00328A  C090  F0D8         	movff	?___lmul,_RADIO_FSKPacketSent$2509
 20979  00328E  C091  F0D9         	movff	?___lmul+1,_RADIO_FSKPacketSent$2509+1
 20980  003292  C092  F0DA         	movff	?___lmul+2,_RADIO_FSKPacketSent$2509+2
 20981  003296  C093  F0DB         	movff	?___lmul+3,_RADIO_FSKPacketSent$2509+3
 20982                           
 20983                           ; BSR set to: 0
 20984  00329A  51D8               	movf	_RADIO_FSKPacketSent$2509& (0+255),w,b
 20985  00329C  0820               	sublw	32
 20986  00329E  6FD4               	movwf	RADIO_FSKPacketSent@timeOnAir& (0+255),b
 20987  0032A0  0E4E               	movlw	78
 20988  0032A2  55D9               	subfwb	(_RADIO_FSKPacketSent$2509+1)& (0+255),w,b
 20989  0032A4  6FD5               	movwf	(RADIO_FSKPacketSent@timeOnAir+1)& (0+255),b
 20990  0032A6  0E00               	movlw	0
 20991  0032A8  55DA               	subfwb	(_RADIO_FSKPacketSent$2509+2)& (0+255),w,b
 20992  0032AA  6FD6               	movwf	(RADIO_FSKPacketSent@timeOnAir+2)& (0+255),b
 20993  0032AC  0E00               	movlw	0
 20994  0032AE  55DB               	subfwb	(_RADIO_FSKPacketSent$2509+3)& (0+255),w,b
 20995  0032B0  6FD7               	movwf	(RADIO_FSKPacketSent@timeOnAir+3)& (0+255),b
 20996                           
 20997                           ; BSR set to: 0
 20998                           ;radio_driver_SX1276.c: 1109: SwTimerStop(RadioConfiguration.timeOnAirTimerId);
 20999  0032B2  0101               	movlb	1	; () banked
 21000  0032B4  51A6               	movf	(_RadioConfiguration+39)& (0+255),w,b
 21001  0032B6  EC68  F030         	call	_SwTimerStop
 21002                           
 21003                           ; BSR set to: 0
 21004                           ;radio_driver_SX1276.c: 1110: LORAWAN_TxDone((uint16_t)timeOnAir);
 21005  0032BA  C0D4  F0B0         	movff	RADIO_FSKPacketSent@timeOnAir,LORAWAN_TxDone@timeOnAir
 21006  0032BE  C0D5  F0B1         	movff	RADIO_FSKPacketSent@timeOnAir+1,LORAWAN_TxDone@timeOnAir+1
 21007  0032C2  EF5E  F004         	goto	_LORAWAN_TxDone	;wreg free
 21008  0032C6                     __end_of_RADIO_FSKPacketSent:
 21009                           	opt stack 0
 21010  0032C6                     PL36:
 21011                           	opt stack 13
 21012  0032C6  C087  F090         	movff	?_SwTimerReadValue,___lmul@multiplier
 21013  0032CA  C088  F091         	movff	?_SwTimerReadValue+1,___lmul@multiplier+1
 21014  0032CE  C089  F092         	movff	?_SwTimerReadValue+2,___lmul@multiplier+2
 21015  0032D2  C08A  F093         	movff	?_SwTimerReadValue+3,___lmul@multiplier+3
 21016  0032D6  0E7D               	movlw	125
 21017  0032D8  6F94               	movwf	___lmul@multiplicand& (0+255),b
 21018  0032DA  6B95               	clrf	(___lmul@multiplicand+1)& (0+255),b
 21019  0032DC  6B96               	clrf	(___lmul@multiplicand+2)& (0+255),b
 21020  0032DE  6B97               	clrf	(___lmul@multiplicand+3)& (0+255),b
 21021  0032E0  0C7D               	retlw	125
 21022  0032E2                     __end_ofPL36:
 21023                           	opt stack 0
 21024  0032E2                     PL242:
 21025                           	opt stack 13
 21026  0032E2  90D8               	bcf	status,0,c
 21027  0032E4  3393               	rrcf	(?___lmul+3)& (0+255),f,b
 21028  0032E6  3392               	rrcf	(?___lmul+2)& (0+255),f,b
 21029  0032E8  3391               	rrcf	(?___lmul+1)& (0+255),f,b
 21030  0032EA  3390               	rrcf	?___lmul& (0+255),f,b
 21031  0032EC  0012               	return	
 21032  0032EE                     __end_ofPL242:
 21033                           	opt stack 0
 21034  0032EE                     PL248:
 21035                           	opt stack 12
 21036  0032EE  C197  F065         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 21037  0032F2  0E00               	movlw	0
 21038  0032F4  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 21039  0032F6  0C00               	retlw	0
 21040  0032F8                     __end_ofPL248:
 21041                           	opt stack 0
 21042  0032F8                     PL294:
 21043                           	opt stack 13
 21044  0032F8  0E1F               	movlw	31
 21045  0032FA  5D87               	subwf	?_SwTimerReadValue& (0+255),w,b
 21046  0032FC  0EAC               	movlw	172
 21047  0032FE  5988               	subwfb	(?_SwTimerReadValue+1)& (0+255),w,b
 21048  003300  0EDF               	movlw	223
 21049  003302  5989               	subwfb	(?_SwTimerReadValue+2)& (0+255),w,b
 21050  003304  0012               	return	
 21051  003306                     __end_ofPL294:
 21052                           	opt stack 0
 21053  003306                     PL330:
 21054                           	opt stack 13
 21055  003306  90D8               	bcf	status,0,c
 21056  003308  338A               	rrcf	(?_SwTimerReadValue+3)& (0+255),f,b
 21057  00330A  3389               	rrcf	(?_SwTimerReadValue+2)& (0+255),f,b
 21058  00330C  3388               	rrcf	(?_SwTimerReadValue+1)& (0+255),f,b
 21059  00330E  3387               	rrcf	?_SwTimerReadValue& (0+255),f,b
 21060  003310  0012               	return	
 21061  003312                     __end_ofPL330:
 21062                           	opt stack 0
 21063                           tosu	equ	0xFFF
 21064                           tosh	equ	0xFFE
 21065                           tosl	equ	0xFFD
 21066                           pclath	equ	0xFFA
 21067                           tblptru	equ	0xFF8
 21068                           tblptrh	equ	0xFF7
 21069                           tblptrl	equ	0xFF6
 21070                           tablat	equ	0xFF5
 21071                           prodh	equ	0xFF4
 21072                           prodl	equ	0xFF3
 21073                           intcon	equ	0xFF2
 21074                           indf0	equ	0xFEF
 21075                           postinc0	equ	0xFEE
 21076                           plusw0	equ	0xFEB
 21077                           fsr0h	equ	0xFEA
 21078                           fsr0l	equ	0xFE9
 21079                           wreg	equ	0xFE8
 21080                           postinc1	equ	0xFE6
 21081                           postdec1	equ	0xFE5
 21082                           plusw1	equ	0xFE3
 21083                           fsr1h	equ	0xFE2
 21084                           fsr1l	equ	0xFE1
 21085                           indf2	equ	0xFDF
 21086                           postinc2	equ	0xFDE
 21087                           postdec2	equ	0xFDD
 21088                           plusw2	equ	0xFDB
 21089                           fsr2h	equ	0xFDA
 21090                           fsr2l	equ	0xFD9
 21091                           status	equ	0xFD8
 21092                           
 21093 ;; *************** function _LORAWAN_TxDone *****************
 21094 ;; Defined at:
 21095 ;;		line 365 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 21096 ;; Parameters:    Size  Location     Type
 21097 ;;  timeOnAir       2   80[BANK0 ] unsigned int 
 21098 ;; Auto vars:     Size  Location     Type
 21099 ;;  minim           4  111[BANK0 ] unsigned long 
 21100 ;;  ticks           4  107[BANK0 ] unsigned long 
 21101 ;;  delta           4   99[BANK0 ] unsigned long 
 21102 ;;  i               1  115[BANK0 ] unsigned char 
 21103 ;;  found           1   98[BANK0 ] unsigned char 
 21104 ;; Return value:  Size  Location     Type
 21105 ;;                  1    wreg      void 
 21106 ;; Registers used:
 21107 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21108 ;; Tracked objects:
 21109 ;;		On entry : 3E/1
 21110 ;;		On exit  : 3C/0
 21111 ;;		Unchanged: 0/0
 21112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21113 ;;      Params:         0       2       0       0       0       0       0       0       0
 21114 ;;      Locals:         0      26       0       0       0       0       0       0       0
 21115 ;;      Temps:          0       8       0       0       0       0       0       0       0
 21116 ;;      Totals:         0      36       0       0       0       0       0       0       0
 21117 ;;Total ram usage:       36 bytes
 21118 ;; Hardware stack levels used:    1
 21119 ;; Hardware stack levels required when called:   14
 21120 ;; This function calls:
 21121 ;;		_LORAWAN_EnterContinuousReceive
 21122 ;;		_RADIO_GetStatus
 21123 ;;		_RxDataDone
 21124 ;;		_SwTimerIsRunning
 21125 ;;		_SwTimerReadValue
 21126 ;;		_SwTimerSetTimeout
 21127 ;;		_SwTimerStart
 21128 ;;		_SwTimerStop
 21129 ;;		___lldiv
 21130 ;;		___lmul
 21131 ;; This function is called by:
 21132 ;;		_RADIO_TxDone
 21133 ;;		_RADIO_FSKPacketSent
 21134 ;;		_RADIO_WatchdogTimeout
 21135 ;; This function uses a non-reentrant model
 21136 ;;
 21137                           
 21138                           	psect	text107
 21139  0008BC                     __ptext107:
 21140                           	opt stack 0
 21141  0008BC                     _LORAWAN_TxDone:
 21142                           	opt stack 13
 21143                           
 21144                           ;lorawan_eu.c: 367: if (loRa.macStatus.macPause == 0)
 21145                           
 21146                           ;incstack = 0
 21147  0008BC  0102               	movlb	2	; () banked
 21148  0008BE  B103               	btfsc	(_loRa+3)& (0+255),0,b
 21149  0008C0  D1C6               	goto	l14602
 21150                           
 21151                           ; BSR set to: 2
 21152                           ;lorawan_eu.c: 368: {
 21153                           ;lorawan_eu.c: 369: bool found = 0;
 21154  0008C2  0100               	movlb	0	; () banked
 21155  0008C4  6BC2               	clrf	LORAWAN_TxDone@found& (0+255),b
 21156                           
 21157                           ;lorawan_eu.c: 370: uint8_t i;
 21158                           ;lorawan_eu.c: 371: uint32_t delta = 0, minim = (4294967295UL), ticks;
 21159  0008C6  6BC3               	clrf	LORAWAN_TxDone@delta& (0+255),b
 21160  0008C8  6BC4               	clrf	(LORAWAN_TxDone@delta+1)& (0+255),b
 21161  0008CA  6BC5               	clrf	(LORAWAN_TxDone@delta+2)& (0+255),b
 21162  0008CC  6BC6               	clrf	(LORAWAN_TxDone@delta+3)& (0+255),b
 21163  0008CE  69CF               	setf	LORAWAN_TxDone@minim& (0+255),b
 21164  0008D0  69D0               	setf	(LORAWAN_TxDone@minim+1)& (0+255),b
 21165  0008D2  69D1               	setf	(LORAWAN_TxDone@minim+2)& (0+255),b
 21166  0008D4  69D2               	setf	(LORAWAN_TxDone@minim+3)& (0+255),b
 21167                           
 21168                           ;lorawan_eu.c: 374: loRa.rx2DelayExpired = 0;
 21169  0008D6  0102               	movlb	2	; () banked
 21170  0008D8  6BF1               	clrf	(_loRa+241)& (0+255),b
 21171                           
 21172                           ; BSR set to: 2
 21173                           ;lorawan_eu.c: 376: loRa.macStatus.macState = BEFORE_RX1;
 21174  0008DA  5102               	movf	(_loRa+2)& (0+255),w,b
 21175  0008DC  0BF0               	andlw	-16
 21176  0008DE  0902               	iorlw	2
 21177  0008E0  6F02               	movwf	(_loRa+2)& (0+255),b
 21178                           
 21179                           ; BSR set to: 2
 21180                           ;lorawan_eu.c: 378: i = loRa.lastUsedChannelIndex;
 21181  0008E2  C2DA  F0D3         	movff	_loRa+218,LORAWAN_TxDone@i
 21182                           
 21183                           ; BSR set to: 2
 21184                           ;lorawan_eu.c: 381: if (loRa.lorawanMacStatus.joining == 1)
 21185  0008E6  A500               	btfss	_loRa& (0+255),2,b
 21186  0008E8  D032               	goto	l14536
 21187                           
 21188                           ; BSR set to: 2
 21189                           ;lorawan_eu.c: 382: {
 21190                           ;lorawan_eu.c: 383: SwTimerSetTimeout(loRa.joinAccept1TimerId, ( (((uint32_t)(loRa.proto
      +                          colParameters.joinAcceptDelay1 + rxWindowOffset[loRa.receiveWindow1Parameters.dataRate])
      +                          ) << (12)) / 125UL ));
 21191  0008EA  0E75               	movlw	low _rxWindowOffset
 21192  0008EC  2517               	addwf	(_loRa+23)& (0+255),w,b
 21193  0008EE  DA2D               	call	PL86	;call to abstracted procedure
 21194  0008F0  5198               	movf	(_loRa+152)& (0+255),w,b
 21195  0008F2  DA23               	call	PL84	;call to abstracted procedure
 21196  0008F4  2199               	addwfc	(_loRa+153)& (0+255),w,b
 21197  0008F6  D9DD               	call	PL8	;call to abstracted procedure
 21198  0008F8  EC1B  F025         	call	___lldiv	;wreg free
 21199  0008FC  D9F4               	call	PL20	;call to abstracted procedure
 21200  0008FE  51E2               	movf	(_loRa+226)& (0+255),w,b
 21201  000900  EC11  F02C         	call	_SwTimerSetTimeout
 21202                           
 21203                           ;lorawan_eu.c: 384: SwTimerSetTimeout(loRa.joinAccept2TimerId, ( (((uint32_t)(loRa.proto
      +                          colParameters.joinAcceptDelay2 + rxWindowOffset[loRa.receiveWindow2Parameters.dataRate])
      +                          ) << (12)) / 125UL ));
 21204  000904  DA32               	call	PL180	;call to abstracted procedure
 21205  000906  DA21               	call	PL86	;call to abstracted procedure
 21206  000908  519A               	movf	(_loRa+154)& (0+255),w,b
 21207  00090A  DA17               	call	PL84	;call to abstracted procedure
 21208  00090C  219B               	addwfc	(_loRa+155)& (0+255),w,b
 21209  00090E  D9D1               	call	PL8	;call to abstracted procedure
 21210  000910  EC1B  F025         	call	___lldiv	;wreg free
 21211  000914  D9E8               	call	PL20	;call to abstracted procedure
 21212  000916  51E3               	movf	(_loRa+227)& (0+255),w,b
 21213  000918  EC11  F02C         	call	_SwTimerSetTimeout
 21214                           
 21215                           ; BSR set to: 0
 21216                           ;lorawan_eu.c: 385: SwTimerStart(loRa.joinAccept1TimerId);
 21217  00091C  0102               	movlb	2	; () banked
 21218  00091E  51E2               	movf	(_loRa+226)& (0+255),w,b
 21219  000920  ECC4  F025         	call	_SwTimerStart
 21220                           
 21221                           ; BSR set to: 0
 21222                           ;lorawan_eu.c: 386: SwTimerStart(loRa.joinAccept2TimerId);
 21223  000924  0102               	movlb	2	; () banked
 21224  000926  51E3               	movf	(_loRa+227)& (0+255),w,b
 21225  000928  ECC4  F025         	call	_SwTimerStart
 21226                           
 21227                           ; BSR set to: 0
 21228                           ;lorawan_eu.c: 388: Channels[i].channelTimer = ((uint32_t)timeOnAir) * (((uint32_t)3029 
      +                          + 1) * ((uint32_t)loRa.prescaler) - 1);
 21229  00092C  C2DB  F090         	movff	_loRa+219,___lmul@multiplier
 21230  000930  C2DC  F091         	movff	_loRa+220,___lmul@multiplier+1
 21231  000934  6B92               	clrf	(___lmul@multiplier+2)& (0+255),b
 21232  000936  6B93               	clrf	(___lmul@multiplier+3)& (0+255),b
 21233  000938  0ED6               	movlw	214
 21234  00093A  6F94               	movwf	___lmul@multiplicand& (0+255),b
 21235  00093C  0E0B               	movlw	11
 21236  00093E  ECC5  F008         	call	PL438	;call to abstracted procedure
 21237  000942  EC25  F02A         	call	___lmul	;wreg free
 21238                           
 21239                           ; BSR set to: 0
 21240                           ;lorawan_eu.c: 388: Channels[i].channelTimer = ((uint32_t)timeOnAir) * (((uint32_t)3029 
      +                          + 1) * ((uint32_t)loRa.prescaler) - 1);
 21241  000946  D9D9               	call	PL54	;call to abstracted procedure
 21242  000948  EC25  F02A         	call	___lmul	;wreg free
 21243  00094C  D046               	goto	L14
 21244  00094E                     l14536:
 21245                           
 21246                           ; BSR set to: 2
 21247                           ;lorawan_eu.c: 390: else
 21248                           ;lorawan_eu.c: 391: {
 21249                           ;lorawan_eu.c: 392: SwTimerSetTimeout(loRa.receiveWindow1TimerId, ( (((uint32_t)(loRa.pr
      +                          otocolParameters.receiveDelay1 + rxWindowOffset[loRa.receiveWindow1Parameters.dataRate])
      +                          ) << (12)) / 125UL ));
 21250  00094E  0E75               	movlw	low _rxWindowOffset
 21251  000950  2517               	addwf	(_loRa+23)& (0+255),w,b
 21252  000952  D9FB               	call	PL86	;call to abstracted procedure
 21253  000954  5194               	movf	(_loRa+148)& (0+255),w,b
 21254  000956  D9F1               	call	PL84	;call to abstracted procedure
 21255  000958  2195               	addwfc	(_loRa+149)& (0+255),w,b
 21256  00095A  D9AB               	call	PL8	;call to abstracted procedure
 21257  00095C  EC1B  F025         	call	___lldiv	;wreg free
 21258  000960  D9C2               	call	PL20	;call to abstracted procedure
 21259  000962  51E4               	movf	(_loRa+228)& (0+255),w,b
 21260  000964  EC11  F02C         	call	_SwTimerSetTimeout
 21261                           
 21262                           ;lorawan_eu.c: 393: SwTimerSetTimeout(loRa.receiveWindow2TimerId, ( (((uint32_t)(loRa.pr
      +                          otocolParameters.receiveDelay2 + rxWindowOffset[loRa.receiveWindow2Parameters.dataRate])
      +                          ) << (12)) / 125UL ));
 21263  000968  DA00               	call	PL180	;call to abstracted procedure
 21264  00096A  D9EF               	call	PL86	;call to abstracted procedure
 21265  00096C  5196               	movf	(_loRa+150)& (0+255),w,b
 21266  00096E  D9E5               	call	PL84	;call to abstracted procedure
 21267  000970  2197               	addwfc	(_loRa+151)& (0+255),w,b
 21268  000972  D99F               	call	PL8	;call to abstracted procedure
 21269  000974  EC1B  F025         	call	___lldiv	;wreg free
 21270  000978  D9B6               	call	PL20	;call to abstracted procedure
 21271  00097A  51E5               	movf	(_loRa+229)& (0+255),w,b
 21272  00097C  EC11  F02C         	call	_SwTimerSetTimeout
 21273                           
 21274                           ; BSR set to: 0
 21275                           ;lorawan_eu.c: 394: SwTimerStart(loRa.receiveWindow1TimerId);
 21276  000980  0102               	movlb	2	; () banked
 21277  000982  51E4               	movf	(_loRa+228)& (0+255),w,b
 21278  000984  ECC4  F025         	call	_SwTimerStart
 21279                           
 21280                           ; BSR set to: 0
 21281                           ;lorawan_eu.c: 395: if (CLASS_A == loRa.deviceClass)
 21282  000988  0102               	movlb	2	; () banked
 21283  00098A  5112               	movf	(_loRa+18)& (0+255),w,b
 21284  00098C  E103               	bnz	l1186
 21285                           
 21286                           ; BSR set to: 2
 21287                           ;lorawan_eu.c: 396: {
 21288                           ;lorawan_eu.c: 397: SwTimerStart(loRa.receiveWindow2TimerId);
 21289  00098E  51E5               	movf	(_loRa+229)& (0+255),w,b
 21290  000990  ECC4  F025         	call	_SwTimerStart
 21291  000994                     l1186:
 21292                           
 21293                           ;lorawan_eu.c: 398: }
 21294                           ;lorawan_eu.c: 400: Channels[i].channelTimer = ((uint32_t)timeOnAir) * (((uint32_t)Chann
      +                          els[i].dutyCycle + 1) * ((uint32_t)loRa.prescaler) - 1);
 21295  000994  0100               	movlb	0	; () banked
 21296  000996  51D3               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21297  000998  D9E0               	call	PL92	;call to abstracted procedure
 21298  00099A  CFDE F0B2          	movff	postinc2,??_LORAWAN_TxDone
 21299  00099E  CFDD F0B3          	movff	postdec2,??_LORAWAN_TxDone+1
 21300  0009A2  51B2               	movf	??_LORAWAN_TxDone& (0+255),w,b
 21301  0009A4  6FB4               	movwf	(??_LORAWAN_TxDone+2)& (0+255),b
 21302  0009A6  51B3               	movf	(??_LORAWAN_TxDone+1)& (0+255),w,b
 21303  0009A8  6FB5               	movwf	(??_LORAWAN_TxDone+3)& (0+255),b
 21304  0009AA  6BB6               	clrf	(??_LORAWAN_TxDone+4)& (0+255),b
 21305  0009AC  6BB7               	clrf	(??_LORAWAN_TxDone+5)& (0+255),b
 21306  0009AE  29B4               	incf	(??_LORAWAN_TxDone+2)& (0+255),w,b
 21307  0009B0  6F90               	movwf	___lmul@multiplier& (0+255),b
 21308  0009B2  0E00               	movlw	0
 21309  0009B4  21B5               	addwfc	(??_LORAWAN_TxDone+3)& (0+255),w,b
 21310  0009B6  6F91               	movwf	(___lmul@multiplier+1)& (0+255),b
 21311  0009B8  0E00               	movlw	0
 21312  0009BA  21B6               	addwfc	(??_LORAWAN_TxDone+4)& (0+255),w,b
 21313  0009BC  6F92               	movwf	(___lmul@multiplier+2)& (0+255),b
 21314  0009BE  0E00               	movlw	0
 21315  0009C0  21B7               	addwfc	(??_LORAWAN_TxDone+5)& (0+255),w,b
 21316  0009C2  6F93               	movwf	(___lmul@multiplier+3)& (0+255),b
 21317  0009C4  C2DB  F094         	movff	_loRa+219,___lmul@multiplicand
 21318  0009C8  C2DC  F095         	movff	_loRa+220,___lmul@multiplicand+1
 21319  0009CC  6B96               	clrf	(___lmul@multiplicand+2)& (0+255),b
 21320  0009CE  6B97               	clrf	(___lmul@multiplicand+3)& (0+255),b
 21321  0009D0  EC25  F02A         	call	___lmul	;wreg free
 21322                           
 21323                           ;lorawan_eu.c: 398: }
 21324                           ;lorawan_eu.c: 400: Channels[i].channelTimer = ((uint32_t)timeOnAir) * (((uint32_t)Chann
      +                          els[i].dutyCycle + 1) * ((uint32_t)loRa.prescaler) - 1);
 21325  0009D4  D992               	call	PL54	;call to abstracted procedure
 21326  0009D6  EC25  F02A         	call	___lmul	;wreg free
 21327  0009DA                     L14:
 21328  0009DA  51D3               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21329  0009DC  D962               	call	PL4	;call to abstracted procedure
 21330  0009DE  C090  FFDE         	movff	?___lmul,postinc2
 21331  0009E2  C091  FFDE         	movff	?___lmul+1,postinc2
 21332  0009E6  C092  FFDE         	movff	?___lmul+2,postinc2
 21333  0009EA  C093  FFDE         	movff	?___lmul+3,postinc2
 21334                           
 21335                           ; BSR set to: 0
 21336                           ;lorawan_eu.c: 401: }
 21337                           ;lorawan_eu.c: 403: if(SwTimerIsRunning(loRa.dutyCycleTimerId))
 21338  0009EE  0102               	movlb	2	; () banked
 21339  0009F0  51E9               	movf	(_loRa+233)& (0+255),w,b
 21340  0009F2  EC24  F030         	call	_SwTimerIsRunning
 21341  0009F6  0900               	iorlw	0
 21342  0009F8  E065               	bz	l14554
 21343                           
 21344                           ; BSR set to: 0
 21345                           ;lorawan_eu.c: 404: {
 21346                           ;lorawan_eu.c: 405: SwTimerStop(loRa.dutyCycleTimerId);
 21347  0009FA  0102               	movlb	2	; () banked
 21348  0009FC  51E9               	movf	(_loRa+233)& (0+255),w,b
 21349  0009FE  EC68  F030         	call	_SwTimerStop
 21350                           
 21351                           ;lorawan_eu.c: 407: ticks = SwTimerReadValue (loRa.dutyCycleTimerId);
 21352  000A02  0102               	movlb	2	; () banked
 21353  000A04  51E9               	movf	(_loRa+233)& (0+255),w,b
 21354  000A06  EC98  F02C         	call	_SwTimerReadValue
 21355  000A0A  C087  F0CB         	movff	?_SwTimerReadValue,LORAWAN_TxDone@ticks
 21356  000A0E  C088  F0CC         	movff	?_SwTimerReadValue+1,LORAWAN_TxDone@ticks+1
 21357  000A12  C089  F0CD         	movff	?_SwTimerReadValue+2,LORAWAN_TxDone@ticks+2
 21358  000A16  C08A  F0CE         	movff	?_SwTimerReadValue+3,LORAWAN_TxDone@ticks+3
 21359                           
 21360                           ; BSR set to: 0
 21361                           ;lorawan_eu.c: 408: delta = loRa.lastTimerValue - ((ticks) < 0x00DFAC1FUL ? ( (((uint32_
      +                          t)(ticks)) * 125UL) >> (12) ) : ( (((uint32_t)(ticks)) >> (12)) * 125UL ) );
 21362  000A1A  51CE               	movf	(LORAWAN_TxDone@ticks+3)& (0+255),w,b
 21363  000A1C  E107               	bnz	u16740
 21364  000A1E  0E1F               	movlw	31
 21365  000A20  5DCB               	subwf	LORAWAN_TxDone@ticks& (0+255),w,b
 21366  000A22  0EAC               	movlw	172
 21367  000A24  59CC               	subwfb	(LORAWAN_TxDone@ticks+1)& (0+255),w,b
 21368  000A26  0EDF               	movlw	223
 21369  000A28  59CD               	subwfb	(LORAWAN_TxDone@ticks+2)& (0+255),w,b
 21370  000A2A  E31E               	bnc	l14550
 21371  000A2C                     u16740:
 21372                           
 21373                           ; BSR set to: 0
 21374  000A2C  C0CB  F0B2         	movff	LORAWAN_TxDone@ticks,??_LORAWAN_TxDone
 21375  000A30  C0CC  F0B3         	movff	LORAWAN_TxDone@ticks+1,??_LORAWAN_TxDone+1
 21376  000A34  C0CD  F0B4         	movff	LORAWAN_TxDone@ticks+2,??_LORAWAN_TxDone+2
 21377  000A38  C0CE  F0B5         	movff	LORAWAN_TxDone@ticks+3,??_LORAWAN_TxDone+3
 21378  000A3C  0E0D               	movlw	13
 21379  000A3E  D005               	goto	u16750
 21380  000A40                     u16755:
 21381  000A40  90D8               	bcf	status,0,c
 21382  000A42  33B5               	rrcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 21383  000A44  33B4               	rrcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 21384  000A46  33B3               	rrcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 21385  000A48  33B2               	rrcf	??_LORAWAN_TxDone& (0+255),f,b
 21386  000A4A                     u16750:
 21387  000A4A  2EE8               	decfsz	wreg,f,c
 21388  000A4C  D7F9               	goto	u16755
 21389  000A4E  C0B2  F090         	movff	??_LORAWAN_TxDone,___lmul@multiplier
 21390  000A52  C0B3  F091         	movff	??_LORAWAN_TxDone+1,___lmul@multiplier+1
 21391  000A56  C0B4  F092         	movff	??_LORAWAN_TxDone+2,___lmul@multiplier+2
 21392  000A5A  C0B5  F093         	movff	??_LORAWAN_TxDone+3,___lmul@multiplier+3
 21393  000A5E  0E7D               	movlw	125
 21394  000A60  D967               	call	PL80	;call to abstracted procedure
 21395  000A62  EC25  F02A         	call	___lmul	;wreg free
 21396  000A66  D012               	goto	L15
 21397  000A68                     l14550:
 21398                           
 21399                           ; BSR set to: 0
 21400  000A68  C0CB  F090         	movff	LORAWAN_TxDone@ticks,___lmul@multiplier
 21401  000A6C  C0CC  F091         	movff	LORAWAN_TxDone@ticks+1,___lmul@multiplier+1
 21402  000A70  C0CD  F092         	movff	LORAWAN_TxDone@ticks+2,___lmul@multiplier+2
 21403  000A74  C0CE  F093         	movff	LORAWAN_TxDone@ticks+3,___lmul@multiplier+3
 21404  000A78  0E7D               	movlw	125
 21405  000A7A  D95A               	call	PL80	;call to abstracted procedure
 21406  000A7C  EC25  F02A         	call	___lmul	;wreg free
 21407  000A80  0E0D               	movlw	13
 21408  000A82  D002               	goto	u16760
 21409  000A84                     u16765:
 21410  000A84  EC71  F019         	call	PL242	;call to abstracted procedure
 21411  000A88                     u16760:
 21412  000A88  2EE8               	decfsz	wreg,f,c
 21413  000A8A  D7FC               	goto	u16765
 21414  000A8C                     L15:
 21415  000A8C  C090  F0BA         	movff	?___lmul,_LORAWAN_TxDone$1988
 21416  000A90  C091  F0BB         	movff	?___lmul+1,_LORAWAN_TxDone$1988+1
 21417  000A94  C092  F0BC         	movff	?___lmul+2,_LORAWAN_TxDone$1988+2
 21418  000A98  C093  F0BD         	movff	?___lmul+3,_LORAWAN_TxDone$1988+3
 21419                           
 21420                           ; BSR set to: 0
 21421  000A9C  51BA               	movf	_LORAWAN_TxDone$1988& (0+255),w,b
 21422  000A9E  0102               	movlb	2	; () banked
 21423  000AA0  5DC8               	subwf	(_loRa+200)& (0+255),w,b
 21424  000AA2  0100               	movlb	0	; () banked
 21425  000AA4  6FC3               	movwf	LORAWAN_TxDone@delta& (0+255),b
 21426  000AA6  51BB               	movf	(_LORAWAN_TxDone$1988+1)& (0+255),w,b
 21427  000AA8  0102               	movlb	2	; () banked
 21428  000AAA  59C9               	subwfb	(_loRa+201)& (0+255),w,b
 21429  000AAC  0100               	movlb	0	; () banked
 21430  000AAE  6FC4               	movwf	(LORAWAN_TxDone@delta+1)& (0+255),b
 21431  000AB0  51BC               	movf	(_LORAWAN_TxDone$1988+2)& (0+255),w,b
 21432  000AB2  0102               	movlb	2	; () banked
 21433  000AB4  59CA               	subwfb	(_loRa+202)& (0+255),w,b
 21434  000AB6  0100               	movlb	0	; () banked
 21435  000AB8  6FC5               	movwf	(LORAWAN_TxDone@delta+2)& (0+255),b
 21436  000ABA  51BD               	movf	(_LORAWAN_TxDone$1988+3)& (0+255),w,b
 21437  000ABC  0102               	movlb	2	; () banked
 21438  000ABE  59CB               	subwfb	(_loRa+203)& (0+255),w,b
 21439  000AC0  0100               	movlb	0	; () banked
 21440  000AC2  6FC6               	movwf	(LORAWAN_TxDone@delta+3)& (0+255),b
 21441  000AC4                     l14554:
 21442                           
 21443                           ; BSR set to: 0
 21444                           ;lorawan_eu.c: 409: }
 21445                           ;lorawan_eu.c: 411: for (i=0; i < 16; i++)
 21446  000AC4  6BD3               	clrf	LORAWAN_TxDone@i& (0+255),b
 21447  000AC6                     l14560:
 21448                           
 21449                           ; BSR set to: 0
 21450                           ;lorawan_eu.c: 412: {
 21451                           ;lorawan_eu.c: 413: if ((Channels[i].status == 1) && ( Channels[i].channelTimer != 0 ))
 21452  000AC6  51D3               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21453  000AC8  EC86  F021         	call	PL12	;call to abstracted procedure
 21454  000ACC  E157               	bnz	l14578
 21455                           
 21456                           ; BSR set to: 0
 21457  000ACE  51D3               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21458  000AD0  D8E8               	call	PL4	;call to abstracted procedure
 21459  000AD2  ECBB  F00E         	call	PL130	;call to abstracted procedure
 21460  000AD6  E052               	bz	l14578
 21461                           
 21462                           ; BSR set to: 0
 21463                           ;lorawan_eu.c: 414: {
 21464                           ;lorawan_eu.c: 415: if( i != loRa.lastUsedChannelIndex )
 21465  000AD8  51D3               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21466  000ADA  0102               	movlb	2	; () banked
 21467  000ADC  19DA               	xorwf	(_loRa+218)& (0+255),w,b
 21468  000ADE  E031               	bz	l1195
 21469                           
 21470                           ; BSR set to: 2
 21471                           ;lorawan_eu.c: 416: {
 21472                           ;lorawan_eu.c: 417: if (Channels[i].channelTimer > delta)
 21473  000AE0  0100               	movlb	0	; () banked
 21474  000AE2  51D3               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21475  000AE4  D8DE               	call	PL4	;call to abstracted procedure
 21476  000AE6  50DE               	movf	postinc2,w,c
 21477  000AE8  5DC3               	subwf	LORAWAN_TxDone@delta& (0+255),w,b
 21478  000AEA  50DE               	movf	postinc2,w,c
 21479  000AEC  59C4               	subwfb	(LORAWAN_TxDone@delta+1)& (0+255),w,b
 21480  000AEE  50DE               	movf	postinc2,w,c
 21481  000AF0  59C5               	subwfb	(LORAWAN_TxDone@delta+2)& (0+255),w,b
 21482  000AF2  50DE               	movf	postinc2,w,c
 21483  000AF4  59C6               	subwfb	(LORAWAN_TxDone@delta+3)& (0+255),w,b
 21484  000AF6  E221               	bc	l14570
 21485                           
 21486                           ; BSR set to: 0
 21487                           ;lorawan_eu.c: 418: {
 21488                           ;lorawan_eu.c: 419: Channels[i].channelTimer = Channels[i].channelTimer - delta;
 21489  000AF8  51D3               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21490  000AFA  D8D3               	call	PL4	;call to abstracted procedure
 21491  000AFC  CFDE F0B2          	movff	postinc2,??_LORAWAN_TxDone
 21492  000B00  CFDE F0B3          	movff	postinc2,??_LORAWAN_TxDone+1
 21493  000B04  CFDE F0B4          	movff	postinc2,??_LORAWAN_TxDone+2
 21494  000B08  CFDE F0B5          	movff	postinc2,??_LORAWAN_TxDone+3
 21495  000B0C  51C3               	movf	LORAWAN_TxDone@delta& (0+255),w,b
 21496  000B0E  5DB2               	subwf	??_LORAWAN_TxDone& (0+255),w,b
 21497  000B10  6FB6               	movwf	(??_LORAWAN_TxDone+4)& (0+255),b
 21498  000B12  51C4               	movf	(LORAWAN_TxDone@delta+1)& (0+255),w,b
 21499  000B14  59B3               	subwfb	(??_LORAWAN_TxDone+1)& (0+255),w,b
 21500  000B16  6FB7               	movwf	(??_LORAWAN_TxDone+5)& (0+255),b
 21501  000B18  51C5               	movf	(LORAWAN_TxDone@delta+2)& (0+255),w,b
 21502  000B1A  59B4               	subwfb	(??_LORAWAN_TxDone+2)& (0+255),w,b
 21503  000B1C  6FB8               	movwf	(??_LORAWAN_TxDone+6)& (0+255),b
 21504  000B1E  51C6               	movf	(LORAWAN_TxDone@delta+3)& (0+255),w,b
 21505  000B20  59B5               	subwfb	(??_LORAWAN_TxDone+3)& (0+255),w,b
 21506  000B22  6FB9               	movwf	(??_LORAWAN_TxDone+7)& (0+255),b
 21507  000B24  51D3               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21508  000B26  D8BD               	call	PL4	;call to abstracted procedure
 21509  000B28  C0B6  FFDE         	movff	??_LORAWAN_TxDone+4,postinc2
 21510  000B2C  C0B7  FFDE         	movff	??_LORAWAN_TxDone+5,postinc2
 21511  000B30  C0B8  FFDE         	movff	??_LORAWAN_TxDone+6,postinc2
 21512  000B34  C0B9  FFDE         	movff	??_LORAWAN_TxDone+7,postinc2
 21513                           
 21514                           ;lorawan_eu.c: 420: }
 21515  000B38  D004               	goto	l1195
 21516  000B3A                     l14570:
 21517                           
 21518                           ; BSR set to: 0
 21519                           ;lorawan_eu.c: 421: else
 21520                           ;lorawan_eu.c: 422: {
 21521                           ;lorawan_eu.c: 423: Channels[i].channelTimer = 0;
 21522  000B3A  51D3               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21523  000B3C  D8B2               	call	PL4	;call to abstracted procedure
 21524  000B3E  ECA2  F01D         	call	PL182	;call to abstracted procedure
 21525  000B42                     l1195:
 21526                           
 21527                           ;lorawan_eu.c: 424: }
 21528                           ;lorawan_eu.c: 425: }
 21529                           ;lorawan_eu.c: 426: if ( (Channels[i].channelTimer <= minim) && (Channels[i].channelTime
      +                          r !=0) )
 21530  000B42  0100               	movlb	0	; () banked
 21531  000B44  51D3               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21532  000B46  D8AD               	call	PL4	;call to abstracted procedure
 21533  000B48  50DE               	movf	postinc2,w,c
 21534  000B4A  5DCF               	subwf	LORAWAN_TxDone@minim& (0+255),w,b
 21535  000B4C  50DE               	movf	postinc2,w,c
 21536  000B4E  59D0               	subwfb	(LORAWAN_TxDone@minim+1)& (0+255),w,b
 21537  000B50  50DE               	movf	postinc2,w,c
 21538  000B52  59D1               	subwfb	(LORAWAN_TxDone@minim+2)& (0+255),w,b
 21539  000B54  50DE               	movf	postinc2,w,c
 21540  000B56  59D2               	subwfb	(LORAWAN_TxDone@minim+3)& (0+255),w,b
 21541  000B58  E311               	bnc	l14578
 21542                           
 21543                           ; BSR set to: 0
 21544  000B5A  51D3               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21545  000B5C  D8A2               	call	PL4	;call to abstracted procedure
 21546  000B5E  ECBB  F00E         	call	PL130	;call to abstracted procedure
 21547  000B62  E00C               	bz	l14578
 21548                           
 21549                           ; BSR set to: 0
 21550                           ;lorawan_eu.c: 427: {
 21551                           ;lorawan_eu.c: 428: minim = Channels[i].channelTimer;
 21552  000B64  51D3               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21553  000B66  D89D               	call	PL4	;call to abstracted procedure
 21554  000B68  CFDE F0CF          	movff	postinc2,LORAWAN_TxDone@minim
 21555  000B6C  CFDE F0D0          	movff	postinc2,LORAWAN_TxDone@minim+1
 21556  000B70  CFDE F0D1          	movff	postinc2,LORAWAN_TxDone@minim+2
 21557  000B74  CFDE F0D2          	movff	postinc2,LORAWAN_TxDone@minim+3
 21558                           
 21559                           ; BSR set to: 0
 21560                           ;lorawan_eu.c: 429: found = 1;
 21561  000B78  0E01               	movlw	1
 21562  000B7A  6FC2               	movwf	LORAWAN_TxDone@found& (0+255),b
 21563  000B7C                     l14578:
 21564                           
 21565                           ; BSR set to: 0
 21566  000B7C  2BD3               	incf	LORAWAN_TxDone@i& (0+255),f,b
 21567                           
 21568                           ; BSR set to: 0
 21569  000B7E  0E0F               	movlw	15
 21570  000B80  65D3               	cpfsgt	LORAWAN_TxDone@i& (0+255),b
 21571  000B82  D7A1               	goto	l14560
 21572                           
 21573                           ; BSR set to: 0
 21574                           ;lorawan_eu.c: 430: }
 21575                           ;lorawan_eu.c: 431: }
 21576                           ;lorawan_eu.c: 432: }
 21577                           ;lorawan_eu.c: 433: if (found == 1)
 21578  000B84  05C2               	decf	LORAWAN_TxDone@found& (0+255),w,b
 21579  000B86  E158               	bnz	l14596
 21580                           
 21581                           ; BSR set to: 0
 21582                           ;lorawan_eu.c: 434: {
 21583                           ;lorawan_eu.c: 435: loRa.lastTimerValue = minim;
 21584  000B88  C0CF  F2C8         	movff	LORAWAN_TxDone@minim,_loRa+200
 21585  000B8C  C0D0  F2C9         	movff	LORAWAN_TxDone@minim+1,_loRa+201
 21586  000B90  C0D1  F2CA         	movff	LORAWAN_TxDone@minim+2,_loRa+202
 21587  000B94  C0D2  F2CB         	movff	LORAWAN_TxDone@minim+3,_loRa+203
 21588                           
 21589                           ; BSR set to: 0
 21590                           ;lorawan_eu.c: 436: SwTimerSetTimeout (loRa.dutyCycleTimerId, ((minim) < 0x000FFFFFUL ? 
      +                          ( (((uint32_t)(minim)) << (12)) / 125UL ) : ( (((uint32_t)(minim)) / 125UL) << (12) ) ))
      +                          ;
 21591  000B98  51D2               	movf	(LORAWAN_TxDone@minim+3)& (0+255),w,b
 21592  000B9A  E106               	bnz	u16850
 21593  000B9C  29CF               	incf	LORAWAN_TxDone@minim& (0+255),w,b
 21594  000B9E  0EFF               	movlw	255
 21595  000BA0  59D0               	subwfb	(LORAWAN_TxDone@minim+1)& (0+255),w,b
 21596  000BA2  0E0F               	movlw	15
 21597  000BA4  59D1               	subwfb	(LORAWAN_TxDone@minim+2)& (0+255),w,b
 21598  000BA6  E313               	bnc	l14590
 21599  000BA8                     u16850:
 21600                           
 21601                           ; BSR set to: 0
 21602  000BA8  C0CF  F060         	movff	LORAWAN_TxDone@minim,___lldiv@dividend
 21603  000BAC  C0D0  F061         	movff	LORAWAN_TxDone@minim+1,___lldiv@dividend+1
 21604  000BB0  C0D1  F062         	movff	LORAWAN_TxDone@minim+2,___lldiv@dividend+2
 21605  000BB4  C0D2  F063         	movff	LORAWAN_TxDone@minim+3,___lldiv@dividend+3
 21606  000BB8  0E7D               	movlw	125
 21607  000BBA  EC77  F011         	call	PL32	;call to abstracted procedure
 21608  000BBE  EC1B  F025         	call	___lldiv	;wreg free
 21609  000BC2  0E0C               	movlw	12
 21610  000BC4                     u16865:
 21611  000BC4  EC85  F011         	call	PL172	;call to abstracted procedure
 21612  000BC8  2EE8               	decfsz	wreg,f,c
 21613  000BCA  D7FC               	goto	u16865
 21614  000BCC  D01D               	goto	L16
 21615  000BCE                     l14590:
 21616                           
 21617                           ; BSR set to: 0
 21618  000BCE  C0CF  F0B2         	movff	LORAWAN_TxDone@minim,??_LORAWAN_TxDone
 21619  000BD2  C0D0  F0B3         	movff	LORAWAN_TxDone@minim+1,??_LORAWAN_TxDone+1
 21620  000BD6  C0D1  F0B4         	movff	LORAWAN_TxDone@minim+2,??_LORAWAN_TxDone+2
 21621  000BDA  C0D2  F0B5         	movff	LORAWAN_TxDone@minim+3,??_LORAWAN_TxDone+3
 21622  000BDE  0E0C               	movlw	12
 21623  000BE0                     u16875:
 21624  000BE0  90D8               	bcf	status,0,c
 21625  000BE2  37B2               	rlcf	??_LORAWAN_TxDone& (0+255),f,b
 21626  000BE4  37B3               	rlcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 21627  000BE6  37B4               	rlcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 21628  000BE8  37B5               	rlcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 21629  000BEA  2EE8               	decfsz	wreg,f,c
 21630  000BEC  D7F9               	goto	u16875
 21631  000BEE  C0B2  F060         	movff	??_LORAWAN_TxDone,___lldiv@dividend
 21632  000BF2  C0B3  F061         	movff	??_LORAWAN_TxDone+1,___lldiv@dividend+1
 21633  000BF6  C0B4  F062         	movff	??_LORAWAN_TxDone+2,___lldiv@dividend+2
 21634  000BFA  C0B5  F063         	movff	??_LORAWAN_TxDone+3,___lldiv@dividend+3
 21635  000BFE  0E7D               	movlw	125
 21636  000C00  EC77  F011         	call	PL32	;call to abstracted procedure
 21637  000C04  EC1B  F025         	call	___lldiv	;wreg free
 21638  000C08                     L16:
 21639  000C08  C060  F0BE         	movff	?___lldiv,_LORAWAN_TxDone$1989
 21640  000C0C  C061  F0BF         	movff	?___lldiv+1,_LORAWAN_TxDone$1989+1
 21641  000C10  C062  F0C0         	movff	?___lldiv+2,_LORAWAN_TxDone$1989+2
 21642  000C14  C063  F0C1         	movff	?___lldiv+3,_LORAWAN_TxDone$1989+3
 21643                           
 21644                           ; BSR set to: 0
 21645  000C18  C0BE  F06D         	movff	_LORAWAN_TxDone$1989,SwTimerSetTimeout@timeout
 21646  000C1C  C0BF  F06E         	movff	_LORAWAN_TxDone$1989+1,SwTimerSetTimeout@timeout+1
 21647  000C20  C0C0  F06F         	movff	_LORAWAN_TxDone$1989+2,SwTimerSetTimeout@timeout+2
 21648  000C24  C0C1  F070         	movff	_LORAWAN_TxDone$1989+3,SwTimerSetTimeout@timeout+3
 21649  000C28  0102               	movlb	2	; () banked
 21650  000C2A  51E9               	movf	(_loRa+233)& (0+255),w,b
 21651  000C2C  EC11  F02C         	call	_SwTimerSetTimeout
 21652                           
 21653                           ; BSR set to: 0
 21654                           ;lorawan_eu.c: 437: SwTimerStart (loRa.dutyCycleTimerId);
 21655  000C30  0102               	movlb	2	; () banked
 21656  000C32  51E9               	movf	(_loRa+233)& (0+255),w,b
 21657  000C34  ECC4  F025         	call	_SwTimerStart
 21658  000C38                     l14596:
 21659                           
 21660                           ; BSR set to: 0
 21661                           ;lorawan_eu.c: 438: }
 21662                           ;lorawan_eu.c: 439: if (CLASS_C == loRa.deviceClass)
 21663  000C38  0E02               	movlw	2
 21664  000C3A  0102               	movlb	2	; () banked
 21665  000C3C  1912               	xorwf	(_loRa+18)& (0+255),w,b
 21666  000C3E  A4D8               	btfss	status,2,c
 21667  000C40  0012               	return	
 21668                           
 21669                           ; BSR set to: 2
 21670                           ;lorawan_eu.c: 440: {
 21671                           ;lorawan_eu.c: 441: loRa.macStatus.macState = CLASS_C_RX2_1_OPEN;
 21672  000C42  5102               	movf	(_loRa+2)& (0+255),w,b
 21673  000C44  0BF0               	andlw	-16
 21674  000C46  0908               	iorlw	8
 21675  000C48  6F02               	movwf	(_loRa+2)& (0+255),b
 21676                           
 21677                           ; BSR set to: 2
 21678                           ;lorawan_eu.c: 442: LORAWAN_EnterContinuousReceive();
 21679  000C4A  EF93  F026         	goto	_LORAWAN_EnterContinuousReceive	;wreg free
 21680  000C4E                     l14602:
 21681                           
 21682                           ; BSR set to: 2
 21683                           ;lorawan_eu.c: 445: else
 21684                           ;lorawan_eu.c: 446: {
 21685                           ;lorawan_eu.c: 447: if ((RADIO_GetStatus() & (1 << (4))) != 0)
 21686  000C4E  EC0A  F031         	call	_RADIO_GetStatus	;wreg free
 21687  000C52  0100               	movlb	0	; () banked
 21688  000C54  6FB2               	movwf	??_LORAWAN_TxDone& (0+255),b
 21689  000C56  A9B2               	btfss	??_LORAWAN_TxDone& (0+255),4,b
 21690  000C58  D011               	goto	l14606
 21691                           
 21692                           ; BSR set to: 0
 21693                           ;lorawan_eu.c: 448: {
 21694                           ;lorawan_eu.c: 450: rxPayload.RxAppData( (0), 0, RADIO_NOT_OK );
 21695  000C5A  0E00               	movlw	0
 21696  000C5C  6F60               	movwf	RxDataDone@pData& (0+255),b
 21697  000C5E  6F61               	movwf	(RxDataDone@pData+1)& (0+255),b
 21698  000C60  6F62               	movwf	RxDataDone@dataLength& (0+255),b
 21699  000C62  0E02               	movlw	2
 21700  000C64  6F63               	movwf	RxDataDone@status& (0+255),b
 21701  000C66  0005               	push	
 21702  000C68  0101               	movlb	1	; () banked
 21703  000C6A  6EFA               	movwf	pclath,c
 21704  000C6C  5179               	movf	_rxPayload& (0+255),w,b
 21705  000C6E  6EFD               	movwf	tosl,c
 21706  000C70  517A               	movf	(_rxPayload+1)& (0+255),w,b
 21707  000C72  6EFE               	movwf	tosh,c
 21708  000C74  50F8               	movf	tblptru,w,c
 21709  000C76  6EFF               	movwf	tosu,c
 21710  000C78  50FA               	movf	pclath,w,c
 21711  000C7A  0012               	return		;indir
 21712  000C7C                     l14606:
 21713                           
 21714                           ; BSR set to: 0
 21715                           ;lorawan_eu.c: 452: else
 21716                           ;lorawan_eu.c: 453: {
 21717                           ;lorawan_eu.c: 455: if ( rxPayload.RxAppData != (0) )
 21718  000C7C  ECA6  F00C         	call	PL420	;call to abstracted procedure
 21719  000C80  B4D8               	btfsc	status,2,c
 21720  000C82  0012               	return	
 21721                           
 21722                           ; BSR set to: 1
 21723                           ;lorawan_eu.c: 456: {
 21724                           ;lorawan_eu.c: 457: rxPayload.RxAppData( (0), 0, RADIO_OK );
 21725  000C84  EC96  F00C         	call	PL48	;call to abstracted procedure
 21726  000C88  0E03               	movlw	3
 21727  000C8A  6F63               	movwf	RxDataDone@status& (0+255),b
 21728  000C8C  0005               	push	
 21729  000C8E  0101               	movlb	1	; () banked
 21730  000C90  6EFA               	movwf	pclath,c
 21731  000C92  5179               	movf	_rxPayload& (0+255),w,b
 21732  000C94  6EFD               	movwf	tosl,c
 21733  000C96  517A               	movf	(_rxPayload+1)& (0+255),w,b
 21734  000C98  6EFE               	movwf	tosh,c
 21735  000C9A  50F8               	movf	tblptru,w,c
 21736  000C9C  6EFF               	movwf	tosu,c
 21737  000C9E  50FA               	movf	pclath,w,c
 21738  000CA0  0012               	return		;indir
 21739  000CA2                     __end_of_LORAWAN_TxDone:
 21740                           	opt stack 0
 21741  000CA2                     PL4:
 21742                           	opt stack 17
 21743  000CA2  0D0E               	mullw	14
 21744  000CA4  0E08               	movlw	low (_Channels+8)
 21745  000CA6  24F3               	addwf	prodl,w,c
 21746  000CA8  6ED9               	movwf	fsr2l,c
 21747  000CAA  0E04               	movlw	high (_Channels+8)
 21748  000CAC  20F4               	addwfc	prodh,w,c
 21749  000CAE  6EDA               	movwf	fsr2h,c
 21750  000CB0  0012               	return	
 21751  000CB2                     __end_ofPL4:
 21752                           	opt stack 0
 21753  000CB2                     PL8:
 21754                           	opt stack 13
 21755  000CB2  0100               	movlb	0	; () banked
 21756  000CB4  6FB4               	movwf	(??_LORAWAN_TxDone+2)& (0+255),b
 21757  000CB6  6BB5               	clrf	(??_LORAWAN_TxDone+3)& (0+255),b
 21758  000CB8  6BB6               	clrf	(??_LORAWAN_TxDone+4)& (0+255),b
 21759  000CBA  0E0C               	movlw	12
 21760  000CBC                     u16685:
 21761  000CBC  90D8               	bcf	status,0,c
 21762  000CBE  37B3               	rlcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 21763  000CC0  37B4               	rlcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 21764  000CC2  37B5               	rlcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 21765  000CC4  37B6               	rlcf	(??_LORAWAN_TxDone+4)& (0+255),f,b
 21766  000CC6  2EE8               	decfsz	wreg,f,c
 21767  000CC8  D7F9               	goto	u16685
 21768  000CCA  C0B3  F060         	movff	??_LORAWAN_TxDone+1,___lldiv@dividend
 21769  000CCE  C0B4  F061         	movff	??_LORAWAN_TxDone+2,___lldiv@dividend+1
 21770  000CD2  C0B5  F062         	movff	??_LORAWAN_TxDone+3,___lldiv@dividend+2
 21771  000CD6  C0B6  F063         	movff	??_LORAWAN_TxDone+4,___lldiv@dividend+3
 21772  000CDA  0E7D               	movlw	125
 21773  000CDC  6F64               	movwf	___lldiv@divisor& (0+255),b
 21774  000CDE  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 21775  000CE0  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 21776  000CE2  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 21777  000CE4  0C7D               	retlw	125
 21778  000CE6                     __end_ofPL8:
 21779                           	opt stack 0
 21780  000CE6                     PL20:
 21781                           	opt stack 12
 21782  000CE6  C060  F06D         	movff	?___lldiv,SwTimerSetTimeout@timeout
 21783  000CEA  C061  F06E         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 21784  000CEE  C062  F06F         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 21785  000CF2  C063  F070         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 21786  000CF6  0102               	movlb	2	; () banked
 21787  000CF8  0012               	return	
 21788  000CFA                     __end_ofPL20:
 21789                           	opt stack 0
 21790  000CFA                     PL54:
 21791                           	opt stack 13
 21792  000CFA  0EFF               	movlw	255
 21793  000CFC  2590               	addwf	?___lmul& (0+255),w,b
 21794  000CFE  6FC7               	movwf	_LORAWAN_TxDone$5058& (0+255),b
 21795  000D00  0EFF               	movlw	255
 21796  000D02  2191               	addwfc	(?___lmul+1)& (0+255),w,b
 21797  000D04  6FC8               	movwf	(_LORAWAN_TxDone$5058+1)& (0+255),b
 21798  000D06  0EFF               	movlw	255
 21799  000D08  2192               	addwfc	(?___lmul+2)& (0+255),w,b
 21800  000D0A  6FC9               	movwf	(_LORAWAN_TxDone$5058+2)& (0+255),b
 21801  000D0C  0EFF               	movlw	255
 21802  000D0E  2193               	addwfc	(?___lmul+3)& (0+255),w,b
 21803  000D10  6FCA               	movwf	(_LORAWAN_TxDone$5058+3)& (0+255),b
 21804  000D12  C0C7  F090         	movff	_LORAWAN_TxDone$5058,___lmul@multiplier
 21805  000D16  C0C8  F091         	movff	_LORAWAN_TxDone$5058+1,___lmul@multiplier+1
 21806  000D1A  C0C9  F092         	movff	_LORAWAN_TxDone$5058+2,___lmul@multiplier+2
 21807  000D1E  C0CA  F093         	movff	_LORAWAN_TxDone$5058+3,___lmul@multiplier+3
 21808  000D22  C0B0  F094         	movff	LORAWAN_TxDone@timeOnAir,___lmul@multiplicand
 21809  000D26  C0B1  F095         	movff	LORAWAN_TxDone@timeOnAir+1,___lmul@multiplicand+1
 21810  000D2A  6B96               	clrf	(___lmul@multiplicand+2)& (0+255),b
 21811  000D2C  6B97               	clrf	(___lmul@multiplicand+3)& (0+255),b
 21812  000D2E  0012               	return	
 21813  000D30                     __end_ofPL54:
 21814                           	opt stack 0
 21815  000D30                     PL80:
 21816                           	opt stack 17
 21817  000D30  6F94               	movwf	___lmul@multiplicand& (0+255),b
 21818  000D32  6B95               	clrf	(___lmul@multiplicand+1)& (0+255),b
 21819  000D34  6B96               	clrf	(___lmul@multiplicand+2)& (0+255),b
 21820  000D36  6B97               	clrf	(___lmul@multiplicand+3)& (0+255),b
 21821  000D38  0012               	return	
 21822  000D3A                     __end_ofPL80:
 21823                           	opt stack 0
 21824  000D3A                     PL84:
 21825                           	opt stack 13
 21826  000D3A  0100               	movlb	0	; () banked
 21827  000D3C  25B2               	addwf	??_LORAWAN_TxDone& (0+255),w,b
 21828  000D3E  6FB3               	movwf	(??_LORAWAN_TxDone+1)& (0+255),b
 21829  000D40  0E00               	movlw	0
 21830  000D42  BFB2               	btfsc	??_LORAWAN_TxDone& (0+255),7,b
 21831  000D44  0EFF               	movlw	255
 21832  000D46  0102               	movlb	2	; () banked
 21833  000D48  0012               	return	
 21834  000D4A                     __end_ofPL84:
 21835                           	opt stack 0
 21836  000D4A                     PL86:
 21837                           	opt stack 13
 21838  000D4A  6EF6               	movwf	tblptrl,c
 21839  000D4C  6AF7               	clrf	tblptrh,c
 21840  000D4E  0E7F               	movlw	high _rxWindowOffset
 21841  000D50  22F7               	addwfc	tblptrh,f,c
 21842  000D52                     	if	0	;There are less than 3 active tblptr bytes
 21843  000D52                     	endif
 21844  000D52  0008               	tblrd		*
 21845  000D54  CFF5 F0B2          	movff	tablat,??_LORAWAN_TxDone
 21846  000D58  0012               	return	
 21847  000D5A                     __end_ofPL86:
 21848                           	opt stack 0
 21849  000D5A                     PL92:
 21850                           	opt stack 17
 21851  000D5A  0D0E               	mullw	14
 21852  000D5C  0E06               	movlw	low (_Channels+6)
 21853  000D5E  24F3               	addwf	prodl,w,c
 21854  000D60  6ED9               	movwf	fsr2l,c
 21855  000D62  0E04               	movlw	high (_Channels+6)
 21856  000D64  20F4               	addwfc	prodh,w,c
 21857  000D66  6EDA               	movwf	fsr2h,c
 21858  000D68  0012               	return	
 21859  000D6A                     __end_ofPL92:
 21860                           	opt stack 0
 21861  000D6A                     PL180:
 21862                           	opt stack 13
 21863  000D6A  0E75               	movlw	low _rxWindowOffset
 21864  000D6C  0102               	movlb	2	; () banked
 21865  000D6E  251C               	addwf	(_loRa+28)& (0+255),w,b
 21866  000D70  0012               	return	
 21867  000D72                     __end_ofPL180:
 21868                           	opt stack 0
 21869                           tosu	equ	0xFFF
 21870                           tosh	equ	0xFFE
 21871                           tosl	equ	0xFFD
 21872                           pclath	equ	0xFFA
 21873                           tblptru	equ	0xFF8
 21874                           tblptrh	equ	0xFF7
 21875                           tblptrl	equ	0xFF6
 21876                           tablat	equ	0xFF5
 21877                           prodh	equ	0xFF4
 21878                           prodl	equ	0xFF3
 21879                           intcon	equ	0xFF2
 21880                           indf0	equ	0xFEF
 21881                           postinc0	equ	0xFEE
 21882                           plusw0	equ	0xFEB
 21883                           fsr0h	equ	0xFEA
 21884                           fsr0l	equ	0xFE9
 21885                           wreg	equ	0xFE8
 21886                           postinc1	equ	0xFE6
 21887                           postdec1	equ	0xFE5
 21888                           plusw1	equ	0xFE3
 21889                           fsr1h	equ	0xFE2
 21890                           fsr1l	equ	0xFE1
 21891                           indf2	equ	0xFDF
 21892                           postinc2	equ	0xFDE
 21893                           postdec2	equ	0xFDD
 21894                           plusw2	equ	0xFDB
 21895                           fsr2h	equ	0xFDA
 21896                           fsr2l	equ	0xFD9
 21897                           status	equ	0xFD8
 21898                           
 21899 ;; *************** function _SwTimerReadValue *****************
 21900 ;; Defined at:
 21901 ;;		line 193 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 21902 ;; Parameters:    Size  Location     Type
 21903 ;;  timerId         1    wreg     unsigned char 
 21904 ;; Auto vars:     Size  Location     Type
 21905 ;;  timerId         1   47[BANK0 ] unsigned char 
 21906 ;;  ticksCount      4   43[BANK0 ] unsigned long 
 21907 ;; Return value:  Size  Location     Type
 21908 ;;                  4   39[BANK0 ] unsigned long 
 21909 ;; Registers used:
 21910 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21911 ;; Tracked objects:
 21912 ;;		On entry : 3C/1
 21913 ;;		On exit  : 3F/0
 21914 ;;		Unchanged: 0/0
 21915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21916 ;;      Params:         0       4       0       0       0       0       0       0       0
 21917 ;;      Locals:         0       5       0       0       0       0       0       0       0
 21918 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21919 ;;      Totals:         0       9       0       0       0       0       0       0       0
 21920 ;;Total ram usage:        9 bytes
 21921 ;; Hardware stack levels used:    1
 21922 ;; Hardware stack levels required when called:   10
 21923 ;; This function calls:
 21924 ;;		_SwTimersInterrupt
 21925 ;; This function is called by:
 21926 ;;		_LORAWAN_TxDone
 21927 ;;		_RADIO_TxDone
 21928 ;;		_RADIO_FSKPacketSent
 21929 ;; This function uses a non-reentrant model
 21930 ;;
 21931                           
 21932                           	psect	text108
 21933  005930                     __ptext108:
 21934                           	opt stack 0
 21935  005930                     _SwTimerReadValue:
 21936                           	opt stack 16
 21937                           
 21938                           ;incstack = 0
 21939                           ;SwTimerReadValue@timerId stored from wreg
 21940  005930  0100               	movlb	0	; () banked
 21941  005932  6F8F               	movwf	SwTimerReadValue@timerId& (0+255),b
 21942                           
 21943                           ;sw_timer.c: 195: uint32_t ticksCount;
 21944                           ;sw_timer.c: 197: (INTCONbits.GIE = 0);
 21945  005934  9EF2               	bcf	intcon,7,c	;volatile
 21946                           
 21947                           ;sw_timer.c: 200: SwTimersInterrupt();
 21948  005936  EC32  F01F         	call	_SwTimersInterrupt	;wreg free
 21949                           
 21950                           ; BSR set to: 0
 21951                           ;sw_timer.c: 201: ticksCount = swTimers[timerId].ticksRemaining;
 21952  00593A  518F               	movf	SwTimerReadValue@timerId& (0+255),w,b
 21953  00593C  EC84  F01F         	call	PL10	;call to abstracted procedure
 21954  005940  CFDE F08B          	movff	postinc2,SwTimerReadValue@ticksCount
 21955  005944  CFDE F08C          	movff	postinc2,SwTimerReadValue@ticksCount+1
 21956  005948  CFDE F08D          	movff	postinc2,SwTimerReadValue@ticksCount+2
 21957  00594C  CFDE F08E          	movff	postinc2,SwTimerReadValue@ticksCount+3
 21958                           
 21959                           ; BSR set to: 0
 21960                           ;sw_timer.c: 202: (INTCONbits.GIE = 1);
 21961  005950  8EF2               	bsf	intcon,7,c	;volatile
 21962                           
 21963                           ; BSR set to: 0
 21964                           ;sw_timer.c: 204: return ticksCount;
 21965  005952  C08B  F087         	movff	SwTimerReadValue@ticksCount,?_SwTimerReadValue
 21966  005956  C08C  F088         	movff	SwTimerReadValue@ticksCount+1,?_SwTimerReadValue+1
 21967  00595A  C08D  F089         	movff	SwTimerReadValue@ticksCount+2,?_SwTimerReadValue+2
 21968  00595E  C08E  F08A         	movff	SwTimerReadValue@ticksCount+3,?_SwTimerReadValue+3
 21969                           
 21970                           ; BSR set to: 0
 21971  005962  0012               	return		;funcret
 21972  005964                     __end_of_SwTimerReadValue:
 21973                           	opt stack 0
 21974                           tosu	equ	0xFFF
 21975                           tosh	equ	0xFFE
 21976                           tosl	equ	0xFFD
 21977                           pclath	equ	0xFFA
 21978                           tblptru	equ	0xFF8
 21979                           tblptrh	equ	0xFF7
 21980                           tblptrl	equ	0xFF6
 21981                           tablat	equ	0xFF5
 21982                           prodh	equ	0xFF4
 21983                           prodl	equ	0xFF3
 21984                           intcon	equ	0xFF2
 21985                           indf0	equ	0xFEF
 21986                           postinc0	equ	0xFEE
 21987                           plusw0	equ	0xFEB
 21988                           fsr0h	equ	0xFEA
 21989                           fsr0l	equ	0xFE9
 21990                           wreg	equ	0xFE8
 21991                           postinc1	equ	0xFE6
 21992                           postdec1	equ	0xFE5
 21993                           plusw1	equ	0xFE3
 21994                           fsr1h	equ	0xFE2
 21995                           fsr1l	equ	0xFE1
 21996                           indf2	equ	0xFDF
 21997                           postinc2	equ	0xFDE
 21998                           postdec2	equ	0xFDD
 21999                           plusw2	equ	0xFDB
 22000                           fsr2h	equ	0xFDA
 22001                           fsr2l	equ	0xFD9
 22002                           status	equ	0xFD8
 22003                           
 22004 ;; *************** function _SwTimerIsRunning *****************
 22005 ;; Defined at:
 22006 ;;		line 207 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 22007 ;; Parameters:    Size  Location     Type
 22008 ;;  timerId         1    wreg     unsigned char 
 22009 ;; Auto vars:     Size  Location     Type
 22010 ;;  timerId         1    0[BANK0 ] unsigned char 
 22011 ;;  isRunning       1    1[BANK0 ] unsigned char 
 22012 ;; Return value:  Size  Location     Type
 22013 ;;                  1    wreg      unsigned char 
 22014 ;; Registers used:
 22015 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22016 ;; Tracked objects:
 22017 ;;		On entry : 3F/2
 22018 ;;		On exit  : 3F/0
 22019 ;;		Unchanged: 0/0
 22020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22021 ;;      Params:         0       0       0       0       0       0       0       0       0
 22022 ;;      Locals:         0       2       0       0       0       0       0       0       0
 22023 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22024 ;;      Totals:         0       2       0       0       0       0       0       0       0
 22025 ;;Total ram usage:        2 bytes
 22026 ;; Hardware stack levels used:    1
 22027 ;; Hardware stack levels required when called:    7
 22028 ;; This function calls:
 22029 ;;		Nothing
 22030 ;; This function is called by:
 22031 ;;		_LORAWAN_TxDone
 22032 ;; This function uses a non-reentrant model
 22033 ;;
 22034                           
 22035                           	psect	text109
 22036  006048                     __ptext109:
 22037                           	opt stack 0
 22038  006048                     _SwTimerIsRunning:
 22039                           	opt stack 19
 22040                           
 22041                           ; BSR set to: 0
 22042                           ;incstack = 0
 22043                           ;SwTimerIsRunning@timerId stored from wreg
 22044  006048  0100               	movlb	0	; () banked
 22045  00604A  6F60               	movwf	SwTimerIsRunning@timerId& (0+255),b
 22046                           
 22047                           ;sw_timer.c: 209: uint8_t isRunning;
 22048                           ;sw_timer.c: 211: (INTCONbits.GIE = 0);
 22049  00604C  9EF2               	bcf	intcon,7,c	;volatile
 22050                           
 22051                           ;sw_timer.c: 212: isRunning = swTimers[timerId].running;
 22052  00604E  5160               	movf	SwTimerIsRunning@timerId& (0+255),w,b
 22053  006050  ECDB  F023         	call	PL40	;call to abstracted procedure
 22054  006054  50DF               	movf	indf2,w,c
 22055  006056  6F61               	movwf	SwTimerIsRunning@isRunning& (0+255),b
 22056                           
 22057                           ; BSR set to: 0
 22058                           ;sw_timer.c: 213: (INTCONbits.GIE = 1);
 22059  006058  8EF2               	bsf	intcon,7,c	;volatile
 22060                           
 22061                           ; BSR set to: 0
 22062                           ;sw_timer.c: 215: return isRunning;
 22063  00605A  5161               	movf	SwTimerIsRunning@isRunning& (0+255),w,b
 22064                           
 22065                           ; BSR set to: 0
 22066  00605C  0012               	return		;funcret
 22067  00605E                     __end_of_SwTimerIsRunning:
 22068                           	opt stack 0
 22069                           tosu	equ	0xFFF
 22070                           tosh	equ	0xFFE
 22071                           tosl	equ	0xFFD
 22072                           pclath	equ	0xFFA
 22073                           tblptru	equ	0xFF8
 22074                           tblptrh	equ	0xFF7
 22075                           tblptrl	equ	0xFF6
 22076                           tablat	equ	0xFF5
 22077                           prodh	equ	0xFF4
 22078                           prodl	equ	0xFF3
 22079                           intcon	equ	0xFF2
 22080                           indf0	equ	0xFEF
 22081                           postinc0	equ	0xFEE
 22082                           plusw0	equ	0xFEB
 22083                           fsr0h	equ	0xFEA
 22084                           fsr0l	equ	0xFE9
 22085                           wreg	equ	0xFE8
 22086                           postinc1	equ	0xFE6
 22087                           postdec1	equ	0xFE5
 22088                           plusw1	equ	0xFE3
 22089                           fsr1h	equ	0xFE2
 22090                           fsr1l	equ	0xFE1
 22091                           indf2	equ	0xFDF
 22092                           postinc2	equ	0xFDE
 22093                           postdec2	equ	0xFDD
 22094                           plusw2	equ	0xFDB
 22095                           fsr2h	equ	0xFDA
 22096                           fsr2l	equ	0xFD9
 22097                           status	equ	0xFD8
 22098                           
 22099 ;; *************** function _RADIO_GetStatus *****************
 22100 ;; Defined at:
 22101 ;;		line 1116 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 22102 ;; Parameters:    Size  Location     Type
 22103 ;;		None
 22104 ;; Auto vars:     Size  Location     Type
 22105 ;;		None
 22106 ;; Return value:  Size  Location     Type
 22107 ;;                  1    wreg      unsigned char 
 22108 ;; Registers used:
 22109 ;;		wreg, status,2
 22110 ;; Tracked objects:
 22111 ;;		On entry : 3C/2
 22112 ;;		On exit  : 3F/1
 22113 ;;		Unchanged: 0/0
 22114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22115 ;;      Params:         0       0       0       0       0       0       0       0       0
 22116 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22117 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22118 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22119 ;;Total ram usage:        0 bytes
 22120 ;; Hardware stack levels used:    1
 22121 ;; Hardware stack levels required when called:    7
 22122 ;; This function calls:
 22123 ;;		Nothing
 22124 ;; This function is called by:
 22125 ;;		_LORAWAN_ReceiveWindow2Callback
 22126 ;;		_LORAWAN_RxDone
 22127 ;;		_LORAWAN_TxDone
 22128 ;; This function uses a non-reentrant model
 22129 ;;
 22130                           
 22131                           	psect	text110
 22132  006214                     __ptext110:
 22133                           	opt stack 0
 22134  006214                     _RADIO_GetStatus:
 22135                           	opt stack 19
 22136                           
 22137                           ;radio_driver_SX1276.c: 1118: return RadioConfiguration.flags;
 22138                           
 22139                           ; BSR set to: 0
 22140                           ;incstack = 0
 22141  006214  0101               	movlb	1	; () banked
 22142  006216  51A2               	movf	(_RadioConfiguration+35)& (0+255),w,b
 22143                           
 22144                           ; BSR set to: 1
 22145  006218  0012               	return		;funcret
 22146  00621A                     __end_of_RADIO_GetStatus:
 22147                           	opt stack 0
 22148                           tosu	equ	0xFFF
 22149                           tosh	equ	0xFFE
 22150                           tosl	equ	0xFFD
 22151                           pclath	equ	0xFFA
 22152                           tblptru	equ	0xFF8
 22153                           tblptrh	equ	0xFF7
 22154                           tblptrl	equ	0xFF6
 22155                           tablat	equ	0xFF5
 22156                           prodh	equ	0xFF4
 22157                           prodl	equ	0xFF3
 22158                           intcon	equ	0xFF2
 22159                           indf0	equ	0xFEF
 22160                           postinc0	equ	0xFEE
 22161                           plusw0	equ	0xFEB
 22162                           fsr0h	equ	0xFEA
 22163                           fsr0l	equ	0xFE9
 22164                           wreg	equ	0xFE8
 22165                           postinc1	equ	0xFE6
 22166                           postdec1	equ	0xFE5
 22167                           plusw1	equ	0xFE3
 22168                           fsr1h	equ	0xFE2
 22169                           fsr1l	equ	0xFE1
 22170                           indf2	equ	0xFDF
 22171                           postinc2	equ	0xFDE
 22172                           postdec2	equ	0xFDD
 22173                           plusw2	equ	0xFDB
 22174                           fsr2h	equ	0xFDA
 22175                           fsr2l	equ	0xFD9
 22176                           status	equ	0xFD8
 22177                           
 22178 ;; *************** function _LORAWAN_EnterContinuousReceive *****************
 22179 ;; Defined at:
 22180 ;;		line 915 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 22181 ;; Parameters:    Size  Location     Type
 22182 ;;		None
 22183 ;; Auto vars:     Size  Location     Type
 22184 ;;		None
 22185 ;; Return value:  Size  Location     Type
 22186 ;;                  1    wreg      void 
 22187 ;; Registers used:
 22188 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22189 ;; Tracked objects:
 22190 ;;		On entry : 3F/2
 22191 ;;		On exit  : 3E/0
 22192 ;;		Unchanged: 0/0
 22193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22194 ;;      Params:         0       0       0       0       0       0       0       0       0
 22195 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22196 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22197 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22198 ;;Total ram usage:        0 bytes
 22199 ;; Hardware stack levels used:    1
 22200 ;; Hardware stack levels required when called:   13
 22201 ;; This function calls:
 22202 ;;		_ConfigureRadioRx
 22203 ;;		_RADIO_ReceiveStart
 22204 ;;		_RADIO_ReceiveStop
 22205 ;;		_RADIO_ReleaseData
 22206 ;;		_ResetParametersForConfirmedTransmission
 22207 ;;		_ResetParametersForUnconfirmedTransmission
 22208 ;;		_RxDataDone
 22209 ;; This function is called by:
 22210 ;;		_LORAWAN_ReceiveWindow2Callback
 22211 ;;		_LORAWAN_RxDone
 22212 ;;		_SetReceptionNotOkState
 22213 ;;		_LORAWAN_TxDone
 22214 ;; This function uses a non-reentrant model
 22215 ;;
 22216                           
 22217                           	psect	text111
 22218  004D26                     __ptext111:
 22219                           	opt stack 0
 22220  004D26                     _LORAWAN_EnterContinuousReceive:
 22221                           	opt stack 13
 22222                           
 22223                           ; BSR set to: 2
 22224                           ;lorawan.c: 917: RADIO_ReceiveStop();
 22225                           
 22226                           ; BSR set to: 1
 22227                           ;incstack = 0
 22228  004D26  ECDF  F02F         	call	_RADIO_ReceiveStop	;wreg free
 22229                           
 22230                           ; BSR set to: 1
 22231                           ;lorawan.c: 918: RADIO_ReleaseData();
 22232  004D2A  EC0D  F031         	call	_RADIO_ReleaseData	;wreg free
 22233                           
 22234                           ; BSR set to: 1
 22235                           ;lorawan.c: 920: ConfigureRadioRx(loRa.receiveWindow2Parameters.dataRate, loRa.receiveWi
      +                          ndow2Parameters.frequency);
 22236  004D2E  D821               	call	PL168	;call to abstracted procedure
 22237  004D30  EC3E  F02E         	call	_ConfigureRadioRx
 22238                           
 22239                           ;lorawan.c: 922: if (RADIO_ReceiveStart(0) != OK)
 22240  004D34  0100               	movlb	0	; () banked
 22241  004D36  6BA7               	clrf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),b
 22242  004D38  6BA6               	clrf	RADIO_ReceiveStart@rxWindowSize& (0+255),b
 22243  004D3A  ECB4  F010         	call	_RADIO_ReceiveStart	;wreg free
 22244  004D3E  51A6               	movf	?_RADIO_ReceiveStart& (0+255),w,b
 22245  004D40  11A7               	iorwf	(?_RADIO_ReceiveStart+1)& (0+255),w,b
 22246  004D42  B4D8               	btfsc	status,2,c
 22247  004D44  0012               	return	
 22248                           
 22249                           ; BSR set to: 0
 22250                           ;lorawan.c: 923: {
 22251                           ;lorawan.c: 924: ResetParametersForConfirmedTransmission ();
 22252  004D46  EC71  F030         	call	_ResetParametersForConfirmedTransmission	;wreg free
 22253                           
 22254                           ;lorawan.c: 925: ResetParametersForUnconfirmedTransmission ();
 22255  004D4A  ECC3  F030         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
 22256                           
 22257                           ; BSR set to: 2
 22258                           ;lorawan.c: 926: loRa.macStatus.macState = IDLE;
 22259                           
 22260                           ; BSR set to: 2
 22261                           ;lorawan.c: 927: if (rxPayload.RxAppData != (0))
 22262  004D4E  ECD2  F003         	call	PL142	;call to abstracted procedure
 22263  004D52  B4D8               	btfsc	status,2,c
 22264  004D54  0012               	return	
 22265                           
 22266                           ; BSR set to: 1
 22267                           ;lorawan.c: 928: {
 22268                           ;lorawan.c: 929: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
 22269  004D56  EC96  F00C         	call	PL48	;call to abstracted procedure
 22270  004D5A  6F63               	movwf	RxDataDone@status& (0+255),b
 22271  004D5C  0005               	push	
 22272  004D5E  0101               	movlb	1	; () banked
 22273  004D60  6EFA               	movwf	pclath,c
 22274  004D62  5179               	movf	_rxPayload& (0+255),w,b
 22275  004D64  6EFD               	movwf	tosl,c
 22276  004D66  517A               	movf	(_rxPayload+1)& (0+255),w,b
 22277  004D68  6EFE               	movwf	tosh,c
 22278  004D6A  50F8               	movf	tblptru,w,c
 22279  004D6C  6EFF               	movwf	tosu,c
 22280  004D6E  50FA               	movf	pclath,w,c
 22281  004D70  0012               	return		;indir
 22282  004D72                     __end_of_LORAWAN_EnterContinuousReceive:
 22283                           	opt stack 0
 22284  004D72                     PL168:
 22285                           	opt stack 12
 22286  004D72  C218  F072         	movff	_loRa+24,ConfigureRadioRx@freq
 22287  004D76  C219  F073         	movff	_loRa+25,ConfigureRadioRx@freq+1
 22288  004D7A  C21A  F074         	movff	_loRa+26,ConfigureRadioRx@freq+2
 22289  004D7E  C21B  F075         	movff	_loRa+27,ConfigureRadioRx@freq+3
 22290  004D82  0102               	movlb	2	; () banked
 22291  004D84  511C               	movf	(_loRa+28)& (0+255),w,b
 22292  004D86  0012               	return	
 22293  004D88                     __end_ofPL168:
 22294                           	opt stack 0
 22295                           tosu	equ	0xFFF
 22296                           tosh	equ	0xFFE
 22297                           tosl	equ	0xFFD
 22298                           pclath	equ	0xFFA
 22299                           tblptru	equ	0xFF8
 22300                           tblptrh	equ	0xFF7
 22301                           tblptrl	equ	0xFF6
 22302                           tablat	equ	0xFF5
 22303                           prodh	equ	0xFF4
 22304                           prodl	equ	0xFF3
 22305                           intcon	equ	0xFF2
 22306                           indf0	equ	0xFEF
 22307                           postinc0	equ	0xFEE
 22308                           plusw0	equ	0xFEB
 22309                           fsr0h	equ	0xFEA
 22310                           fsr0l	equ	0xFE9
 22311                           wreg	equ	0xFE8
 22312                           postinc1	equ	0xFE6
 22313                           postdec1	equ	0xFE5
 22314                           plusw1	equ	0xFE3
 22315                           fsr1h	equ	0xFE2
 22316                           fsr1l	equ	0xFE1
 22317                           indf2	equ	0xFDF
 22318                           postinc2	equ	0xFDE
 22319                           postdec2	equ	0xFDD
 22320                           plusw2	equ	0xFDB
 22321                           fsr2h	equ	0xFDA
 22322                           fsr2l	equ	0xFD9
 22323                           status	equ	0xFD8
 22324                           
 22325 ;; *************** function _RxDataDone *****************
 22326 ;; Defined at:
 22327 ;;		line 120 in file "main.c"
 22328 ;; Parameters:    Size  Location     Type
 22329 ;;  pData           2    0[BANK0 ] PTR unsigned char 
 22330 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), NULL(0), 
 22331 ;;  dataLength      1    2[BANK0 ] unsigned char 
 22332 ;;  status          1    3[BANK0 ] enum E17484
 22333 ;; Auto vars:     Size  Location     Type
 22334 ;;		None
 22335 ;; Return value:  Size  Location     Type
 22336 ;;                  1    wreg      void 
 22337 ;; Registers used:
 22338 ;;		None
 22339 ;; Tracked objects:
 22340 ;;		On entry : 3F/1
 22341 ;;		On exit  : 3F/1
 22342 ;;		Unchanged: 3F/0
 22343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22344 ;;      Params:         0       4       0       0       0       0       0       0       0
 22345 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22346 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22347 ;;      Totals:         0       4       0       0       0       0       0       0       0
 22348 ;;Total ram usage:        4 bytes
 22349 ;; Hardware stack levels used:    1
 22350 ;; Hardware stack levels required when called:    7
 22351 ;; This function calls:
 22352 ;;		Nothing
 22353 ;; This function is called by:
 22354 ;;		_main
 22355 ;;		_LORAWAN_EnterContinuousReceive
 22356 ;;		_LORAWAN_ReceiveWindow2Callback
 22357 ;;		_SetReceptionNotOkState
 22358 ;;		_LORAWAN_RxDone
 22359 ;;		_LORAWAN_TxDone
 22360 ;;		_LORAWAN_RxTimeout
 22361 ;;		_AckRetransmissionCallback
 22362 ;;		_UnconfirmedTransmissionCallback
 22363 ;; This function uses a non-reentrant model
 22364 ;;
 22365                           
 22366                           	psect	text112
 22367  006266                     __ptext112:
 22368                           	opt stack 0
 22369  006266                     _RxDataDone:
 22370                           	opt stack 20
 22371                           
 22372                           ; BSR set to: 1
 22373                           
 22374                           ;incstack = 0
 22375  006266  0012               	return		;funcret
 22376  006268                     __end_of_RxDataDone:
 22377                           	opt stack 0
 22378                           tosu	equ	0xFFF
 22379                           tosh	equ	0xFFE
 22380                           tosl	equ	0xFFD
 22381                           pclath	equ	0xFFA
 22382                           tblptru	equ	0xFF8
 22383                           tblptrh	equ	0xFF7
 22384                           tblptrl	equ	0xFF6
 22385                           tablat	equ	0xFF5
 22386                           prodh	equ	0xFF4
 22387                           prodl	equ	0xFF3
 22388                           intcon	equ	0xFF2
 22389                           indf0	equ	0xFEF
 22390                           postinc0	equ	0xFEE
 22391                           plusw0	equ	0xFEB
 22392                           fsr0h	equ	0xFEA
 22393                           fsr0l	equ	0xFE9
 22394                           wreg	equ	0xFE8
 22395                           postinc1	equ	0xFE6
 22396                           postdec1	equ	0xFE5
 22397                           plusw1	equ	0xFE3
 22398                           fsr1h	equ	0xFE2
 22399                           fsr1l	equ	0xFE1
 22400                           indf2	equ	0xFDF
 22401                           postinc2	equ	0xFDE
 22402                           postdec2	equ	0xFDD
 22403                           plusw2	equ	0xFDB
 22404                           fsr2h	equ	0xFDA
 22405                           fsr2l	equ	0xFD9
 22406                           status	equ	0xFD8
 22407                           
 22408 ;; *************** function _ResetParametersForUnconfirmedTransmission *****************
 22409 ;; Defined at:
 22410 ;;		line 1097 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 22411 ;; Parameters:    Size  Location     Type
 22412 ;;		None
 22413 ;; Auto vars:     Size  Location     Type
 22414 ;;		None
 22415 ;; Return value:  Size  Location     Type
 22416 ;;                  1    wreg      void 
 22417 ;; Registers used:
 22418 ;;		wreg, status,2
 22419 ;; Tracked objects:
 22420 ;;		On entry : 3D/0
 22421 ;;		On exit  : 3F/2
 22422 ;;		Unchanged: 0/0
 22423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22424 ;;      Params:         0       0       0       0       0       0       0       0       0
 22425 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22426 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22427 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22428 ;;Total ram usage:        0 bytes
 22429 ;; Hardware stack levels used:    1
 22430 ;; Hardware stack levels required when called:    7
 22431 ;; This function calls:
 22432 ;;		Nothing
 22433 ;; This function is called by:
 22434 ;;		_LORAWAN_ReceiveWindow2Callback
 22435 ;;		_LORAWAN_EnterContinuousReceive
 22436 ;;		_UnconfirmedTransmissionCallback
 22437 ;;		_LORAWAN_RxTimeout
 22438 ;; This function uses a non-reentrant model
 22439 ;;
 22440                           
 22441                           	psect	text113
 22442  006186                     __ptext113:
 22443                           	opt stack 0
 22444  006186                     _ResetParametersForUnconfirmedTransmission:
 22445                           	opt stack 0
 22446                           
 22447                           ;lorawan.c: 1099: loRa.macStatus.macState = IDLE;
 22448                           
 22449                           ; BSR set to: 1
 22450                           ;incstack = 0
 22451                           
 22452                           ;lorawan.c: 1100: loRa.counterRepetitionsUnconfirmedUplink = 1;
 22453  006186  EC75  F030         	call	PL412	;call to abstracted procedure
 22454  00618A  6FD8               	movwf	(_loRa+216)& (0+255),b
 22455                           
 22456                           ; BSR set to: 2
 22457                           ;lorawan.c: 1101: loRa.crtMacCmdIndex = 0;
 22458  00618C  6BA7               	clrf	(_loRa+167)& (0+255),b
 22459                           
 22460                           ; BSR set to: 2
 22461  00618E  0012               	return		;funcret
 22462  006190                     __end_of_ResetParametersForUnconfirmedTransmission:
 22463                           	opt stack 0
 22464                           tosu	equ	0xFFF
 22465                           tosh	equ	0xFFE
 22466                           tosl	equ	0xFFD
 22467                           pclath	equ	0xFFA
 22468                           tblptru	equ	0xFF8
 22469                           tblptrh	equ	0xFF7
 22470                           tblptrl	equ	0xFF6
 22471                           tablat	equ	0xFF5
 22472                           prodh	equ	0xFF4
 22473                           prodl	equ	0xFF3
 22474                           intcon	equ	0xFF2
 22475                           indf0	equ	0xFEF
 22476                           postinc0	equ	0xFEE
 22477                           plusw0	equ	0xFEB
 22478                           fsr0h	equ	0xFEA
 22479                           fsr0l	equ	0xFE9
 22480                           wreg	equ	0xFE8
 22481                           postinc1	equ	0xFE6
 22482                           postdec1	equ	0xFE5
 22483                           plusw1	equ	0xFE3
 22484                           fsr1h	equ	0xFE2
 22485                           fsr1l	equ	0xFE1
 22486                           indf2	equ	0xFDF
 22487                           postinc2	equ	0xFDE
 22488                           postdec2	equ	0xFDD
 22489                           plusw2	equ	0xFDB
 22490                           fsr2h	equ	0xFDA
 22491                           fsr2l	equ	0xFD9
 22492                           status	equ	0xFD8
 22493                           
 22494 ;; *************** function _ResetParametersForConfirmedTransmission *****************
 22495 ;; Defined at:
 22496 ;;		line 1090 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 22497 ;; Parameters:    Size  Location     Type
 22498 ;;		None
 22499 ;; Auto vars:     Size  Location     Type
 22500 ;;		None
 22501 ;; Return value:  Size  Location     Type
 22502 ;;                  1    wreg      void 
 22503 ;; Registers used:
 22504 ;;		wreg, status,2
 22505 ;; Tracked objects:
 22506 ;;		On entry : 3D/2
 22507 ;;		On exit  : 3F/2
 22508 ;;		Unchanged: 0/0
 22509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22510 ;;      Params:         0       0       0       0       0       0       0       0       0
 22511 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22512 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22513 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22514 ;;Total ram usage:        0 bytes
 22515 ;; Hardware stack levels used:    1
 22516 ;; Hardware stack levels required when called:    7
 22517 ;; This function calls:
 22518 ;;		Nothing
 22519 ;; This function is called by:
 22520 ;;		_LORAWAN_ReceiveWindow2Callback
 22521 ;;		_LORAWAN_EnterContinuousReceive
 22522 ;;		_AckRetransmissionCallback
 22523 ;;		_LORAWAN_RxTimeout
 22524 ;; This function uses a non-reentrant model
 22525 ;;
 22526                           
 22527                           	psect	text114
 22528  0060E2                     __ptext114:
 22529                           	opt stack 0
 22530  0060E2                     _ResetParametersForConfirmedTransmission:
 22531                           	opt stack 0
 22532                           
 22533                           ;lorawan.c: 1092: loRa.macStatus.macState = IDLE;
 22534                           
 22535                           ; BSR set to: 2
 22536                           ;incstack = 0
 22537                           
 22538                           ;lorawan.c: 1093: loRa.counterRepetitionsConfirmedUplink = 1;
 22539  0060E2  D803               	call	PL412	;call to abstracted procedure
 22540  0060E4  6FD9               	movwf	(_loRa+217)& (0+255),b
 22541                           
 22542                           ; BSR set to: 2
 22543                           ;lorawan.c: 1094: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 0;
 22544  0060E6  9100               	bcf	_loRa& (0+255),0,b
 22545                           
 22546                           ; BSR set to: 2
 22547  0060E8  0C01               	retlw	1	;funcret
 22548  0060EA                     __end_of_ResetParametersForConfirmedTransmission:
 22549                           	opt stack 0
 22550  0060EA                     PL412:
 22551                           	opt stack 20
 22552  0060EA  0EF0               	movlw	-16
 22553  0060EC  0102               	movlb	2	; () banked
 22554  0060EE  1702               	andwf	(_loRa+2)& (0+255),f,b
 22555  0060F0  0C01               	retlw	1
 22556  0060F2                     __end_ofPL412:
 22557                           	opt stack 0
 22558                           tosu	equ	0xFFF
 22559                           tosh	equ	0xFFE
 22560                           tosl	equ	0xFFD
 22561                           pclath	equ	0xFFA
 22562                           tblptru	equ	0xFF8
 22563                           tblptrh	equ	0xFF7
 22564                           tblptrl	equ	0xFF6
 22565                           tablat	equ	0xFF5
 22566                           prodh	equ	0xFF4
 22567                           prodl	equ	0xFF3
 22568                           intcon	equ	0xFF2
 22569                           indf0	equ	0xFEF
 22570                           postinc0	equ	0xFEE
 22571                           plusw0	equ	0xFEB
 22572                           fsr0h	equ	0xFEA
 22573                           fsr0l	equ	0xFE9
 22574                           wreg	equ	0xFE8
 22575                           postinc1	equ	0xFE6
 22576                           postdec1	equ	0xFE5
 22577                           plusw1	equ	0xFE3
 22578                           fsr1h	equ	0xFE2
 22579                           fsr1l	equ	0xFE1
 22580                           indf2	equ	0xFDF
 22581                           postinc2	equ	0xFDE
 22582                           postdec2	equ	0xFDD
 22583                           plusw2	equ	0xFDB
 22584                           fsr2h	equ	0xFDA
 22585                           fsr2l	equ	0xFD9
 22586                           status	equ	0xFD8
 22587                           
 22588 ;; *************** function _RADIO_ReleaseData *****************
 22589 ;; Defined at:
 22590 ;;		line 1134 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 22591 ;; Parameters:    Size  Location     Type
 22592 ;;		None
 22593 ;; Auto vars:     Size  Location     Type
 22594 ;;		None
 22595 ;; Return value:  Size  Location     Type
 22596 ;;                  1    wreg      void 
 22597 ;; Registers used:
 22598 ;;		status,2, status,0
 22599 ;; Tracked objects:
 22600 ;;		On entry : 3C/2
 22601 ;;		On exit  : 3F/1
 22602 ;;		Unchanged: 0/0
 22603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22604 ;;      Params:         0       0       0       0       0       0       0       0       0
 22605 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22606 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22607 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22608 ;;Total ram usage:        0 bytes
 22609 ;; Hardware stack levels used:    1
 22610 ;; Hardware stack levels required when called:    7
 22611 ;; This function calls:
 22612 ;;		Nothing
 22613 ;; This function is called by:
 22614 ;;		_LORAWAN_ReceiveWindow1Callback
 22615 ;;		_LORAWAN_ReceiveWindow2Callback
 22616 ;;		_LORAWAN_EnterContinuousReceive
 22617 ;;		_LORAWAN_RxDone
 22618 ;; This function uses a non-reentrant model
 22619 ;;
 22620                           
 22621                           	psect	text115
 22622  00621A                     __ptext115:
 22623                           	opt stack 0
 22624  00621A                     _RADIO_ReleaseData:
 22625                           	opt stack 18
 22626                           
 22627                           ;radio_driver_SX1276.c: 1136: RadioConfiguration.flags &= ~(1 << (2));
 22628                           
 22629                           ; BSR set to: 2
 22630                           ;incstack = 0
 22631  00621A  0101               	movlb	1	; () banked
 22632  00621C  95A2               	bcf	(_RadioConfiguration+35)& (0+255),2,b
 22633                           
 22634                           ; BSR set to: 1
 22635  00621E  0012               	return		;funcret
 22636  006220                     __end_of_RADIO_ReleaseData:
 22637                           	opt stack 0
 22638                           tosu	equ	0xFFF
 22639                           tosh	equ	0xFFE
 22640                           tosl	equ	0xFFD
 22641                           pclath	equ	0xFFA
 22642                           tblptru	equ	0xFF8
 22643                           tblptrh	equ	0xFF7
 22644                           tblptrl	equ	0xFF6
 22645                           tablat	equ	0xFF5
 22646                           prodh	equ	0xFF4
 22647                           prodl	equ	0xFF3
 22648                           intcon	equ	0xFF2
 22649                           indf0	equ	0xFEF
 22650                           postinc0	equ	0xFEE
 22651                           plusw0	equ	0xFEB
 22652                           fsr0h	equ	0xFEA
 22653                           fsr0l	equ	0xFE9
 22654                           wreg	equ	0xFE8
 22655                           postinc1	equ	0xFE6
 22656                           postdec1	equ	0xFE5
 22657                           plusw1	equ	0xFE3
 22658                           fsr1h	equ	0xFE2
 22659                           fsr1l	equ	0xFE1
 22660                           indf2	equ	0xFDF
 22661                           postinc2	equ	0xFDE
 22662                           postdec2	equ	0xFDD
 22663                           plusw2	equ	0xFDB
 22664                           fsr2h	equ	0xFDA
 22665                           fsr2l	equ	0xFD9
 22666                           status	equ	0xFD8
 22667                           
 22668 ;; *************** function _RADIO_ReceiveStop *****************
 22669 ;; Defined at:
 22670 ;;		line 951 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 22671 ;; Parameters:    Size  Location     Type
 22672 ;;		None
 22673 ;; Auto vars:     Size  Location     Type
 22674 ;;		None
 22675 ;; Return value:  Size  Location     Type
 22676 ;;                  1    wreg      void 
 22677 ;; Registers used:
 22678 ;;		wreg, status,2, status,0, cstack
 22679 ;; Tracked objects:
 22680 ;;		On entry : 3F/2
 22681 ;;		On exit  : 3F/1
 22682 ;;		Unchanged: 0/0
 22683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22684 ;;      Params:         0       0       0       0       0       0       0       0       0
 22685 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22686 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22687 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22688 ;;Total ram usage:        0 bytes
 22689 ;; Hardware stack levels used:    1
 22690 ;; Hardware stack levels required when called:   11
 22691 ;; This function calls:
 22692 ;;		_RADIO_WriteMode
 22693 ;; This function is called by:
 22694 ;;		_LORAWAN_Send
 22695 ;;		_LORAWAN_ReceiveWindow1Callback
 22696 ;;		_LORAWAN_ReceiveWindow2Callback
 22697 ;;		_LORAWAN_EnterContinuousReceive
 22698 ;; This function uses a non-reentrant model
 22699 ;;
 22700                           
 22701                           	psect	text116
 22702  005FBE                     __ptext116:
 22703                           	opt stack 0
 22704  005FBE                     _RADIO_ReceiveStop:
 22705                           	opt stack 17
 22706                           
 22707                           ; BSR set to: 2
 22708                           ;radio_driver_SX1276.c: 953: if ((1 << (1)) == RadioConfiguration.flags)
 22709                           
 22710                           ; BSR set to: 1
 22711                           ;incstack = 0
 22712  005FBE  0E02               	movlw	2
 22713  005FC0  0101               	movlb	1	; () banked
 22714  005FC2  19A2               	xorwf	(_RadioConfiguration+35)& (0+255),w,b
 22715  005FC4  A4D8               	btfss	status,2,c
 22716  005FC6  0012               	return	
 22717                           
 22718                           ; BSR set to: 1
 22719                           ;radio_driver_SX1276.c: 954: {
 22720                           ;radio_driver_SX1276.c: 955: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation, 
      +                          0);
 22721  005FC8  EC66  F02D         	call	PL78	;call to abstracted procedure
 22722  005FCC  ECDB  F01A         	call	_RADIO_WriteMode
 22723                           
 22724                           ;radio_driver_SX1276.c: 956: RadioConfiguration.flags &= ~(1 << (1));
 22725  005FD0  0101               	movlb	1	; () banked
 22726  005FD2  93A2               	bcf	(_RadioConfiguration+35)& (0+255),1,b
 22727                           
 22728                           ; BSR set to: 1
 22729  005FD4  0012               	return		;funcret
 22730  005FD6                     __end_of_RADIO_ReceiveStop:
 22731                           	opt stack 0
 22732                           tosu	equ	0xFFF
 22733                           tosh	equ	0xFFE
 22734                           tosl	equ	0xFFD
 22735                           pclath	equ	0xFFA
 22736                           tblptru	equ	0xFF8
 22737                           tblptrh	equ	0xFF7
 22738                           tblptrl	equ	0xFF6
 22739                           tablat	equ	0xFF5
 22740                           prodh	equ	0xFF4
 22741                           prodl	equ	0xFF3
 22742                           intcon	equ	0xFF2
 22743                           indf0	equ	0xFEF
 22744                           postinc0	equ	0xFEE
 22745                           plusw0	equ	0xFEB
 22746                           fsr0h	equ	0xFEA
 22747                           fsr0l	equ	0xFE9
 22748                           wreg	equ	0xFE8
 22749                           postinc1	equ	0xFE6
 22750                           postdec1	equ	0xFE5
 22751                           plusw1	equ	0xFE3
 22752                           fsr1h	equ	0xFE2
 22753                           fsr1l	equ	0xFE1
 22754                           indf2	equ	0xFDF
 22755                           postinc2	equ	0xFDE
 22756                           postdec2	equ	0xFDD
 22757                           plusw2	equ	0xFDB
 22758                           fsr2h	equ	0xFDA
 22759                           fsr2l	equ	0xFD9
 22760                           status	equ	0xFD8
 22761                           
 22762 ;; *************** function _RADIO_ReceiveStart *****************
 22763 ;; Defined at:
 22764 ;;		line 875 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 22765 ;; Parameters:    Size  Location     Type
 22766 ;;  rxWindowSize    2   70[BANK0 ] unsigned int 
 22767 ;; Auto vars:     Size  Location     Type
 22768 ;;		None
 22769 ;; Return value:  Size  Location     Type
 22770 ;;                  2   70[BANK0 ] enum E17895
 22771 ;; Registers used:
 22772 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22773 ;; Tracked objects:
 22774 ;;		On entry : 3F/0
 22775 ;;		On exit  : 3F/0
 22776 ;;		Unchanged: 0/0
 22777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22778 ;;      Params:         0       2       0       0       0       0       0       0       0
 22779 ;;      Locals:         0       4       0       0       0       0       0       0       0
 22780 ;;      Temps:          0       4       0       0       0       0       0       0       0
 22781 ;;      Totals:         0      10       0       0       0       0       0       0       0
 22782 ;;Total ram usage:       10 bytes
 22783 ;; Hardware stack levels used:    1
 22784 ;; Hardware stack levels required when called:   12
 22785 ;; This function calls:
 22786 ;;		_RADIO_RegisterWrite
 22787 ;;		_RADIO_WriteConfiguration
 22788 ;;		_RADIO_WriteMode
 22789 ;;		_SwTimerSetTimeout
 22790 ;;		_SwTimerStart
 22791 ;;		___lldiv
 22792 ;; This function is called by:
 22793 ;;		_LORAWAN_ReceiveWindow1Callback
 22794 ;;		_LORAWAN_ReceiveWindow2Callback
 22795 ;;		_LORAWAN_EnterContinuousReceive
 22796 ;; This function uses a non-reentrant model
 22797 ;;
 22798                           
 22799                           	psect	text117
 22800  002168                     __ptext117:
 22801                           	opt stack 0
 22802  002168                     _RADIO_ReceiveStart:
 22803                           	opt stack 13
 22804                           
 22805                           ; BSR set to: 0
 22806                           ;radio_driver_SX1276.c: 877: if ((RadioConfiguration.flags & (1 << (2))) != 0)
 22807                           
 22808                           ; BSR set to: 1
 22809                           ;incstack = 0
 22810  002168  0101               	movlb	1	; () banked
 22811  00216A  A5A2               	btfss	(_RadioConfiguration+35)& (0+255),2,b
 22812  00216C  D006               	goto	l12766
 22813                           
 22814                           ; BSR set to: 1
 22815                           ;radio_driver_SX1276.c: 878: {
 22816                           ;radio_driver_SX1276.c: 879: return ERR_BUFFER_LOCKED;
 22817  00216E  0E80               	movlw	128
 22818  002170  0100               	movlb	0	; () banked
 22819  002172  6FA7               	movwf	(?_RADIO_ReceiveStart+1)& (0+255),b
 22820  002174  0E03               	movlw	3
 22821  002176  6FA6               	movwf	?_RADIO_ReceiveStart& (0+255),b
 22822  002178  0C03               	retlw	3
 22823  00217A                     l12766:
 22824                           
 22825                           ; BSR set to: 1
 22826                           ;radio_driver_SX1276.c: 880: }
 22827                           ;radio_driver_SX1276.c: 882: if ((RadioConfiguration.flags & ((1 << (0)) | (1 << (1)))) 
      +                          != 0)
 22828  00217A  C1A2  F0A8         	movff	_RadioConfiguration+35,??_RADIO_ReceiveStart
 22829  00217E  0E03               	movlw	3
 22830  002180  0100               	movlb	0	; () banked
 22831  002182  17A8               	andwf	??_RADIO_ReceiveStart& (0+255),f,b
 22832  002184  E005               	bz	l12772
 22833                           
 22834                           ; BSR set to: 0
 22835                           ;radio_driver_SX1276.c: 883: {
 22836                           ;radio_driver_SX1276.c: 884: return ERR_RADIO_BUSY;
 22837  002186  0E80               	movlw	128
 22838  002188  6FA7               	movwf	(?_RADIO_ReceiveStart+1)& (0+255),b
 22839  00218A  0E04               	movlw	4
 22840  00218C  6FA6               	movwf	?_RADIO_ReceiveStart& (0+255),b
 22841  00218E  0C04               	retlw	4
 22842  002190                     l12772:
 22843                           
 22844                           ; BSR set to: 0
 22845                           ;radio_driver_SX1276.c: 885: }
 22846                           ;radio_driver_SX1276.c: 887: if (0 == rxWindowSize)
 22847  002190  51A6               	movf	RADIO_ReceiveStart@rxWindowSize& (0+255),w,b
 22848  002192  11A7               	iorwf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),w,b
 22849  002194  E105               	bnz	l12776
 22850                           
 22851                           ; BSR set to: 0
 22852                           ;radio_driver_SX1276.c: 888: {
 22853                           ;radio_driver_SX1276.c: 889: RADIO_WriteConfiguration(4);
 22854  002196  ECBD  F00F         	call	PL418	;call to abstracted procedure
 22855  00219A  ECB9  F006         	call	_RADIO_WriteConfiguration	;wreg free
 22856                           
 22857                           ;radio_driver_SX1276.c: 890: }
 22858  00219E  D006               	goto	l12778
 22859  0021A0                     l12776:
 22860                           
 22861                           ; BSR set to: 0
 22862                           ;radio_driver_SX1276.c: 891: else
 22863                           ;radio_driver_SX1276.c: 892: {
 22864                           ;radio_driver_SX1276.c: 893: RADIO_WriteConfiguration(rxWindowSize);
 22865  0021A0  C0A6  F09C         	movff	RADIO_ReceiveStart@rxWindowSize,RADIO_WriteConfiguration@symbolTimeout
 22866  0021A4  C0A7  F09D         	movff	RADIO_ReceiveStart@rxWindowSize+1,RADIO_WriteConfiguration@symbolTimeout+1
 22867  0021A8  ECB9  F006         	call	_RADIO_WriteConfiguration	;wreg free
 22868  0021AC                     l12778:
 22869                           
 22870                           ;radio_driver_SX1276.c: 894: }
 22871                           ;radio_driver_SX1276.c: 896: if (MODULATION_LORA == RadioConfiguration.modulation)
 22872  0021AC  0101               	movlb	1	; () banked
 22873  0021AE  0597               	decf	(_RadioConfiguration+24)& (0+255),w,b
 22874  0021B0  E10E               	bnz	l12782
 22875                           
 22876                           ; BSR set to: 1
 22877                           ;radio_driver_SX1276.c: 897: {
 22878                           ;radio_driver_SX1276.c: 900: RADIO_RegisterWrite(0x22, 0x01);
 22879  0021B2  0E01               	movlw	1
 22880  0021B4  0100               	movlb	0	; () banked
 22881  0021B6  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 22882  0021B8  0E22               	movlw	34
 22883  0021BA  EC31  F02F         	call	_RADIO_RegisterWrite
 22884                           
 22885                           ;radio_driver_SX1276.c: 906: RADIO_RegisterWrite(0x40, 0x00);
 22886  0021BE  D8B0               	call	PL430	;call to abstracted procedure
 22887  0021C0  EC31  F02F         	call	_RADIO_RegisterWrite
 22888                           
 22889                           ;radio_driver_SX1276.c: 907: RADIO_RegisterWrite(0x41, 0x00);
 22890  0021C4  ECBA  F00F         	call	PL376	;call to abstracted procedure
 22891  0021C8  EC31  F02F         	call	_RADIO_RegisterWrite
 22892                           
 22893                           ;radio_driver_SX1276.c: 908: }
 22894  0021CC  D011               	goto	l12784
 22895  0021CE                     l12782:
 22896                           
 22897                           ; BSR set to: 1
 22898                           ;radio_driver_SX1276.c: 909: else
 22899                           ;radio_driver_SX1276.c: 910: {
 22900                           ;radio_driver_SX1276.c: 911: RADIO_RegisterWrite(0x12, RadioConfiguration.rxBw);
 22901  0021CE  C1B3  F062         	movff	_RadioConfiguration+52,RADIO_RegisterWrite@value
 22902  0021D2  0E12               	movlw	18
 22903  0021D4  EC31  F02F         	call	_RADIO_RegisterWrite
 22904                           
 22905                           ;radio_driver_SX1276.c: 912: RADIO_RegisterWrite(0x13, RadioConfiguration.afcBw);
 22906  0021D8  C1B4  F062         	movff	_RadioConfiguration+53,RADIO_RegisterWrite@value
 22907  0021DC  0E13               	movlw	19
 22908  0021DE  EC31  F02F         	call	_RADIO_RegisterWrite
 22909                           
 22910                           ;radio_driver_SX1276.c: 915: RADIO_RegisterWrite(0x40, 0x00);
 22911  0021E2  D89E               	call	PL430	;call to abstracted procedure
 22912  0021E4  EC31  F02F         	call	_RADIO_RegisterWrite
 22913                           
 22914                           ;radio_driver_SX1276.c: 916: RADIO_RegisterWrite(0x41, 0x00);
 22915  0021E8  ECBA  F00F         	call	PL376	;call to abstracted procedure
 22916  0021EC  EC31  F02F         	call	_RADIO_RegisterWrite
 22917  0021F0                     l12784:
 22918                           
 22919                           ;radio_driver_SX1276.c: 917: }
 22920                           ;radio_driver_SX1276.c: 919: RadioConfiguration.flags |= (1 << (1));
 22921  0021F0  0101               	movlb	1	; () banked
 22922  0021F2  83A2               	bsf	(_RadioConfiguration+35)& (0+255),1,b
 22923                           
 22924                           ; BSR set to: 1
 22925                           ;radio_driver_SX1276.c: 920: RadioConfiguration.flags &= ~((1 << (4)) | (1 << (3)));
 22926  0021F4  0EE7               	movlw	231
 22927  0021F6  17A2               	andwf	(_RadioConfiguration+35)& (0+255),f,b
 22928                           
 22929                           ; BSR set to: 1
 22930                           ;radio_driver_SX1276.c: 924: if (0 == rxWindowSize)
 22931  0021F8  0100               	movlb	0	; () banked
 22932  0021FA  51A6               	movf	RADIO_ReceiveStart@rxWindowSize& (0+255),w,b
 22933  0021FC  11A7               	iorwf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),w,b
 22934  0021FE  E106               	bnz	l12792
 22935                           
 22936                           ; BSR set to: 0
 22937                           ;radio_driver_SX1276.c: 925: {
 22938                           ;radio_driver_SX1276.c: 926: RADIO_WriteMode(MODE_RXCONT, RadioConfiguration.modulation,
      +                           0);
 22939  002200  EC77  F019         	call	PL248	;call to abstracted procedure
 22940  002204  0E05               	movlw	5
 22941  002206  ECDB  F01A         	call	_RADIO_WriteMode
 22942                           
 22943                           ;radio_driver_SX1276.c: 927: }
 22944  00220A  D031               	goto	l12802
 22945  00220C                     l12792:
 22946                           
 22947                           ; BSR set to: 0
 22948                           ;radio_driver_SX1276.c: 928: else
 22949                           ;radio_driver_SX1276.c: 929: {
 22950                           ;radio_driver_SX1276.c: 930: if (MODULATION_LORA == RadioConfiguration.modulation)
 22951  00220C  0101               	movlb	1	; () banked
 22952  00220E  0597               	decf	(_RadioConfiguration+24)& (0+255),w,b
 22953  002210  E109               	bnz	l12796
 22954                           
 22955                           ; BSR set to: 1
 22956                           ;radio_driver_SX1276.c: 931: {
 22957                           ;radio_driver_SX1276.c: 932: RADIO_WriteMode(MODE_RXSINGLE, MODULATION_LORA, 0);
 22958  002212  0E01               	movlw	1
 22959  002214  0100               	movlb	0	; () banked
 22960  002216  6F65               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 22961  002218  0E00               	movlw	0
 22962  00221A  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 22963  00221C  0E06               	movlw	6
 22964  00221E  ECDB  F01A         	call	_RADIO_WriteMode
 22965                           
 22966                           ;radio_driver_SX1276.c: 933: }
 22967  002222  D025               	goto	l12802
 22968  002224                     l12796:
 22969                           
 22970                           ; BSR set to: 1
 22971                           ;radio_driver_SX1276.c: 934: else
 22972                           ;radio_driver_SX1276.c: 935: {
 22973                           ;radio_driver_SX1276.c: 936: RADIO_WriteMode(MODE_RXCONT, MODULATION_FSK, 0);
 22974  002224  0E00               	movlw	0
 22975  002226  EC99  F024         	call	PL370	;call to abstracted procedure
 22976  00222A  ECDB  F01A         	call	_RADIO_WriteMode
 22977                           
 22978                           ;radio_driver_SX1276.c: 937: SwTimerSetTimeout(RadioConfiguration.fskRxWindowTimerId, ( 
      +                          (((uint32_t)(rxWindowSize)) << (12)) / 125UL ));
 22979  00222E  0100               	movlb	0	; () banked
 22980  002230  51A6               	movf	RADIO_ReceiveStart@rxWindowSize& (0+255),w,b
 22981  002232  6FA8               	movwf	??_RADIO_ReceiveStart& (0+255),b
 22982  002234  51A7               	movf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),w,b
 22983  002236  6FA9               	movwf	(??_RADIO_ReceiveStart+1)& (0+255),b
 22984  002238  6BAA               	clrf	(??_RADIO_ReceiveStart+2)& (0+255),b
 22985  00223A  6BAB               	clrf	(??_RADIO_ReceiveStart+3)& (0+255),b
 22986  00223C  0E0C               	movlw	12
 22987  00223E                     u13885:
 22988  00223E  90D8               	bcf	status,0,c
 22989  002240  D86A               	call	PL358	;call to abstracted procedure
 22990  002242  2EE8               	decfsz	wreg,f,c
 22991  002244  D7FC               	goto	u13885
 22992  002246  D858               	call	PL134	;call to abstracted procedure
 22993  002248  D852               	call	PL32	;call to abstracted procedure
 22994  00224A  EC1B  F025         	call	___lldiv	;wreg free
 22995  00224E  C060  F06D         	movff	?___lldiv,SwTimerSetTimeout@timeout
 22996  002252  C061  F06E         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 22997  002256  C062  F06F         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 22998  00225A  C063  F070         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 22999  00225E  0101               	movlb	1	; () banked
 23000  002260  51A7               	movf	(_RadioConfiguration+40)& (0+255),w,b
 23001  002262  EC11  F02C         	call	_SwTimerSetTimeout
 23002                           
 23003                           ; BSR set to: 0
 23004                           ;radio_driver_SX1276.c: 938: SwTimerStart(RadioConfiguration.fskRxWindowTimerId);
 23005  002266  0101               	movlb	1	; () banked
 23006  002268  51A7               	movf	(_RadioConfiguration+40)& (0+255),w,b
 23007  00226A  ECC4  F025         	call	_SwTimerStart
 23008  00226E                     l12802:
 23009                           
 23010                           ;radio_driver_SX1276.c: 939: }
 23011                           ;radio_driver_SX1276.c: 940: }
 23012                           ;radio_driver_SX1276.c: 942: if (0 != RadioConfiguration.watchdogTimerTimeout)
 23013  00226E  ECAE  F00F         	call	PL342	;call to abstracted procedure
 23014  002272  E039               	bz	l12814
 23015                           
 23016                           ; BSR set to: 1
 23017                           ;radio_driver_SX1276.c: 943: {
 23018                           ;radio_driver_SX1276.c: 944: SwTimerSetTimeout(RadioConfiguration.watchdogTimerId, ((Rad
      +                          ioConfiguration.watchdogTimerTimeout) < 0x000FFFFFUL ? ( (((uint32_t)(RadioConfiguration
      +                          .watchdogTimerTimeout)) << (12)) / 125UL ) : ( (((uint32_t)(RadioConfiguration.watchdogT
      +                          imerTimeout)) /
 23019  002274  51AC               	movf	(_RadioConfiguration+45)& (0+255),w,b
 23020  002276  E103               	bnz	u13900
 23021  002278  ECA8  F00F         	call	PL334	;call to abstracted procedure
 23022  00227C  E30A               	bnc	l12808
 23023  00227E                     u13900:
 23024                           
 23025                           ; BSR set to: 1
 23026  00227E  EC9E  F00F         	call	PL114	;call to abstracted procedure
 23027  002282  D835               	call	PL32	;call to abstracted procedure
 23028  002284  EC1B  F025         	call	___lldiv	;wreg free
 23029  002288  0E0C               	movlw	12
 23030  00228A                     u13915:
 23031  00228A  D83F               	call	PL172	;call to abstracted procedure
 23032  00228C  2EE8               	decfsz	wreg,f,c
 23033  00228E  D7FD               	goto	u13915
 23034  002290  D012               	goto	L17
 23035  002292                     l12808:
 23036                           
 23037                           ; BSR set to: 1
 23038  002292  C1A9  F0A8         	movff	_RadioConfiguration+42,??_RADIO_ReceiveStart
 23039  002296  C1AA  F0A9         	movff	_RadioConfiguration+43,??_RADIO_ReceiveStart+1
 23040  00229A  C1AB  F0AA         	movff	_RadioConfiguration+44,??_RADIO_ReceiveStart+2
 23041  00229E  C1AC  F0AB         	movff	_RadioConfiguration+45,??_RADIO_ReceiveStart+3
 23042  0022A2  0E0C               	movlw	12
 23043  0022A4                     u13925:
 23044  0022A4  90D8               	bcf	status,0,c
 23045  0022A6  0100               	movlb	0	; () banked
 23046  0022A8  D836               	call	PL358	;call to abstracted procedure
 23047  0022AA  2EE8               	decfsz	wreg,f,c
 23048  0022AC  D7FB               	goto	u13925
 23049  0022AE  D824               	call	PL134	;call to abstracted procedure
 23050  0022B0  D81E               	call	PL32	;call to abstracted procedure
 23051  0022B2  EC1B  F025         	call	___lldiv	;wreg free
 23052  0022B6                     L17:
 23053  0022B6  C060  F0AC         	movff	?___lldiv,_RADIO_ReceiveStart$2491
 23054  0022BA  C061  F0AD         	movff	?___lldiv+1,_RADIO_ReceiveStart$2491+1
 23055  0022BE  C062  F0AE         	movff	?___lldiv+2,_RADIO_ReceiveStart$2491+2
 23056  0022C2  C063  F0AF         	movff	?___lldiv+3,_RADIO_ReceiveStart$2491+3
 23057                           
 23058                           ; BSR set to: 0
 23059  0022C6  C0AC  F06D         	movff	_RADIO_ReceiveStart$2491,SwTimerSetTimeout@timeout
 23060  0022CA  C0AD  F06E         	movff	_RADIO_ReceiveStart$2491+1,SwTimerSetTimeout@timeout+1
 23061  0022CE  C0AE  F06F         	movff	_RADIO_ReceiveStart$2491+2,SwTimerSetTimeout@timeout+2
 23062  0022D2  C0AF  F070         	movff	_RADIO_ReceiveStart$2491+3,SwTimerSetTimeout@timeout+3
 23063  0022D6  0101               	movlb	1	; () banked
 23064  0022D8  51A8               	movf	(_RadioConfiguration+41)& (0+255),w,b
 23065  0022DA  EC11  F02C         	call	_SwTimerSetTimeout
 23066                           
 23067                           ; BSR set to: 0
 23068                           ;radio_driver_SX1276.c: 945: SwTimerStart(RadioConfiguration.watchdogTimerId);
 23069  0022DE  0101               	movlb	1	; () banked
 23070  0022E0  51A8               	movf	(_RadioConfiguration+41)& (0+255),w,b
 23071  0022E2  ECC4  F025         	call	_SwTimerStart
 23072  0022E6                     l12814:
 23073                           
 23074                           ;radio_driver_SX1276.c: 946: }
 23075                           ;radio_driver_SX1276.c: 947: return ERR_NONE;
 23076  0022E6  0100               	movlb	0	; () banked
 23077  0022E8  6BA6               	clrf	?_RADIO_ReceiveStart& (0+255),b
 23078  0022EA  6BA7               	clrf	(?_RADIO_ReceiveStart+1)& (0+255),b
 23079                           
 23080                           ; BSR set to: 0
 23081  0022EC  0012               	return		;funcret
 23082  0022EE                     __end_of_RADIO_ReceiveStart:
 23083                           	opt stack 0
 23084  0022EE                     PL32:
 23085                           	opt stack 17
 23086  0022EE  6F64               	movwf	___lldiv@divisor& (0+255),b
 23087  0022F0  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 23088  0022F2  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 23089  0022F4  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 23090  0022F6  0012               	return	
 23091  0022F8                     __end_ofPL32:
 23092                           	opt stack 0
 23093  0022F8                     PL134:
 23094                           	opt stack 13
 23095  0022F8  C0A8  F060         	movff	??_RADIO_ReceiveStart,___lldiv@dividend
 23096  0022FC  C0A9  F061         	movff	??_RADIO_ReceiveStart+1,___lldiv@dividend+1
 23097  002300  C0AA  F062         	movff	??_RADIO_ReceiveStart+2,___lldiv@dividend+2
 23098  002304  C0AB  F063         	movff	??_RADIO_ReceiveStart+3,___lldiv@dividend+3
 23099  002308  0C7D               	retlw	125
 23100  00230A                     __end_ofPL134:
 23101                           	opt stack 0
 23102  00230A                     PL172:
 23103                           	opt stack 13
 23104  00230A  90D8               	bcf	status,0,c
 23105  00230C  3760               	rlcf	?___lldiv& (0+255),f,b
 23106  00230E  3761               	rlcf	(?___lldiv+1)& (0+255),f,b
 23107  002310  3762               	rlcf	(?___lldiv+2)& (0+255),f,b
 23108  002312  3763               	rlcf	(?___lldiv+3)& (0+255),f,b
 23109  002314  0012               	return	
 23110  002316                     __end_ofPL172:
 23111                           	opt stack 0
 23112  002316                     PL358:
 23113                           	opt stack 13
 23114  002316  37A8               	rlcf	??_RADIO_ReceiveStart& (0+255),f,b
 23115  002318  37A9               	rlcf	(??_RADIO_ReceiveStart+1)& (0+255),f,b
 23116  00231A  37AA               	rlcf	(??_RADIO_ReceiveStart+2)& (0+255),f,b
 23117  00231C  37AB               	rlcf	(??_RADIO_ReceiveStart+3)& (0+255),f,b
 23118  00231E  0012               	return	
 23119  002320                     __end_ofPL358:
 23120                           	opt stack 0
 23121  002320                     PL430:
 23122                           	opt stack 13
 23123  002320  0100               	movlb	0	; () banked
 23124  002322  6B62               	clrf	RADIO_RegisterWrite@value& (0+255),b
 23125  002324  0C40               	retlw	64
 23126  002326                     __end_ofPL430:
 23127                           	opt stack 0
 23128                           tosu	equ	0xFFF
 23129                           tosh	equ	0xFFE
 23130                           tosl	equ	0xFFD
 23131                           pclath	equ	0xFFA
 23132                           tblptru	equ	0xFF8
 23133                           tblptrh	equ	0xFF7
 23134                           tblptrl	equ	0xFF6
 23135                           tablat	equ	0xFF5
 23136                           prodh	equ	0xFF4
 23137                           prodl	equ	0xFF3
 23138                           intcon	equ	0xFF2
 23139                           indf0	equ	0xFEF
 23140                           postinc0	equ	0xFEE
 23141                           plusw0	equ	0xFEB
 23142                           fsr0h	equ	0xFEA
 23143                           fsr0l	equ	0xFE9
 23144                           wreg	equ	0xFE8
 23145                           postinc1	equ	0xFE6
 23146                           postdec1	equ	0xFE5
 23147                           plusw1	equ	0xFE3
 23148                           fsr1h	equ	0xFE2
 23149                           fsr1l	equ	0xFE1
 23150                           indf2	equ	0xFDF
 23151                           postinc2	equ	0xFDE
 23152                           postdec2	equ	0xFDD
 23153                           plusw2	equ	0xFDB
 23154                           fsr2h	equ	0xFDA
 23155                           fsr2l	equ	0xFD9
 23156                           status	equ	0xFD8
 23157                           
 23158 ;; *************** function _ConfigureRadioRx *****************
 23159 ;; Defined at:
 23160 ;;		line 2019 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 23161 ;; Parameters:    Size  Location     Type
 23162 ;;  dataRate        1    wreg     unsigned char 
 23163 ;;  freq            4   18[BANK0 ] unsigned long 
 23164 ;; Auto vars:     Size  Location     Type
 23165 ;;  dataRate        1   22[BANK0 ] unsigned char 
 23166 ;; Return value:  Size  Location     Type
 23167 ;;                  1    wreg      void 
 23168 ;; Registers used:
 23169 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23170 ;; Tracked objects:
 23171 ;;		On entry : 3F/2
 23172 ;;		On exit  : 0/0
 23173 ;;		Unchanged: 0/0
 23174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23175 ;;      Params:         0       4       0       0       0       0       0       0       0
 23176 ;;      Locals:         0       1       0       0       0       0       0       0       0
 23177 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23178 ;;      Totals:         0       5       0       0       0       0       0       0       0
 23179 ;;Total ram usage:        5 bytes
 23180 ;; Hardware stack levels used:    1
 23181 ;; Hardware stack levels required when called:   10
 23182 ;; This function calls:
 23183 ;;		_ConfigureRadio
 23184 ;;		_RADIO_SetCRC
 23185 ;;		_RADIO_SetIQInverted
 23186 ;; This function is called by:
 23187 ;;		_LORAWAN_ReceiveWindow1Callback
 23188 ;;		_LORAWAN_ReceiveWindow2Callback
 23189 ;;		_LORAWAN_EnterContinuousReceive
 23190 ;; This function uses a non-reentrant model
 23191 ;;
 23192                           
 23193                           	psect	text118
 23194  005C7C                     __ptext118:
 23195                           	opt stack 0
 23196  005C7C                     _ConfigureRadioRx:
 23197                           	opt stack 15
 23198                           
 23199                           ; BSR set to: 0
 23200                           ;incstack = 0
 23201                           ;ConfigureRadioRx@dataRate stored from wreg
 23202  005C7C  0100               	movlb	0	; () banked
 23203  005C7E  6F76               	movwf	ConfigureRadioRx@dataRate& (0+255),b
 23204                           
 23205                           ;lorawan.c: 2021: ConfigureRadio(dataRate, freq);
 23206  005C80  C072  F06D         	movff	ConfigureRadioRx@freq,ConfigureRadio@freq
 23207  005C84  C073  F06E         	movff	ConfigureRadioRx@freq+1,ConfigureRadio@freq+1
 23208  005C88  C074  F06F         	movff	ConfigureRadioRx@freq+2,ConfigureRadio@freq+2
 23209  005C8C  C075  F070         	movff	ConfigureRadioRx@freq+3,ConfigureRadio@freq+3
 23210  005C90  5176               	movf	ConfigureRadioRx@dataRate& (0+255),w,b
 23211  005C92  ECE0  F024         	call	_ConfigureRadio
 23212                           
 23213                           ;lorawan.c: 2022: RADIO_SetCRC(0);
 23214  005C96  0E00               	movlw	0
 23215  005C98  ECCD  F030         	call	_RADIO_SetCRC
 23216                           
 23217                           ;lorawan.c: 2023: RADIO_SetIQInverted(1);
 23218  005C9C  0E01               	movlw	1
 23219  005C9E  EFC8  F030         	goto	_RADIO_SetIQInverted
 23220  005CA2                     __end_of_ConfigureRadioRx:
 23221                           	opt stack 0
 23222                           tosu	equ	0xFFF
 23223                           tosh	equ	0xFFE
 23224                           tosl	equ	0xFFD
 23225                           pclath	equ	0xFFA
 23226                           tblptru	equ	0xFF8
 23227                           tblptrh	equ	0xFF7
 23228                           tblptrl	equ	0xFF6
 23229                           tablat	equ	0xFF5
 23230                           prodh	equ	0xFF4
 23231                           prodl	equ	0xFF3
 23232                           intcon	equ	0xFF2
 23233                           indf0	equ	0xFEF
 23234                           postinc0	equ	0xFEE
 23235                           plusw0	equ	0xFEB
 23236                           fsr0h	equ	0xFEA
 23237                           fsr0l	equ	0xFE9
 23238                           wreg	equ	0xFE8
 23239                           postinc1	equ	0xFE6
 23240                           postdec1	equ	0xFE5
 23241                           plusw1	equ	0xFE3
 23242                           fsr1h	equ	0xFE2
 23243                           fsr1l	equ	0xFE1
 23244                           indf2	equ	0xFDF
 23245                           postinc2	equ	0xFDE
 23246                           postdec2	equ	0xFDD
 23247                           plusw2	equ	0xFDB
 23248                           fsr2h	equ	0xFDA
 23249                           fsr2l	equ	0xFD9
 23250                           status	equ	0xFD8
 23251                           
 23252 ;; *************** function _INTERRUPT_GetDioStatus *****************
 23253 ;; Defined at:
 23254 ;;		line 48 in file "mcc_generated_files/LoRaWAN/interrupt_manager_lora_addons.c"
 23255 ;; Parameters:    Size  Location     Type
 23256 ;;		None
 23257 ;; Auto vars:     Size  Location     Type
 23258 ;;  a               1    0[BANK0 ] unsigned char 
 23259 ;; Return value:  Size  Location     Type
 23260 ;;                  1    wreg      unsigned char 
 23261 ;; Registers used:
 23262 ;;		wreg, status,2
 23263 ;; Tracked objects:
 23264 ;;		On entry : 3F/0
 23265 ;;		On exit  : 3F/0
 23266 ;;		Unchanged: 0/0
 23267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23268 ;;      Params:         0       0       0       0       0       0       0       0       0
 23269 ;;      Locals:         0       1       0       0       0       0       0       0       0
 23270 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23271 ;;      Totals:         0       1       0       0       0       0       0       0       0
 23272 ;;Total ram usage:        1 bytes
 23273 ;; Hardware stack levels used:    1
 23274 ;; Hardware stack levels required when called:    7
 23275 ;; This function calls:
 23276 ;;		Nothing
 23277 ;; This function is called by:
 23278 ;;		_LORAWAN_Mainloop
 23279 ;; This function uses a non-reentrant model
 23280 ;;
 23281                           
 23282                           	psect	text119
 23283  0060F2                     __ptext119:
 23284                           	opt stack 0
 23285  0060F2                     _INTERRUPT_GetDioStatus:
 23286                           	opt stack 22
 23287                           
 23288                           ; BSR set to: 0
 23289                           ;interrupt_manager_lora_addons.c: 50: uint8_t a;
 23290                           ;interrupt_manager_lora_addons.c: 51: (INTCONbits.GIE = 0);
 23291                           
 23292                           ;incstack = 0
 23293  0060F2  9EF2               	bcf	intcon,7,c	;volatile
 23294                           
 23295                           ;interrupt_manager_lora_addons.c: 52: a = dioStatus;
 23296  0060F4  C045  F060         	movff	_dioStatus,INTERRUPT_GetDioStatus@a	;volatile
 23297                           
 23298                           ;interrupt_manager_lora_addons.c: 53: dioStatus = 0;
 23299  0060F8  6A45               	clrf	_dioStatus,c	;volatile
 23300                           
 23301                           ;interrupt_manager_lora_addons.c: 54: (INTCONbits.GIE = 1);
 23302  0060FA  8EF2               	bsf	intcon,7,c	;volatile
 23303                           
 23304                           ; BSR set to: 0
 23305                           ;interrupt_manager_lora_addons.c: 55: return a;
 23306  0060FC  5160               	movf	INTERRUPT_GetDioStatus@a& (0+255),w,b
 23307                           
 23308                           ; BSR set to: 0
 23309  0060FE  0012               	return		;funcret
 23310  006100                     __end_of_INTERRUPT_GetDioStatus:
 23311                           	opt stack 0
 23312                           tosu	equ	0xFFF
 23313                           tosh	equ	0xFFE
 23314                           tosl	equ	0xFFD
 23315                           pclath	equ	0xFFA
 23316                           tblptru	equ	0xFF8
 23317                           tblptrh	equ	0xFF7
 23318                           tblptrl	equ	0xFF6
 23319                           tablat	equ	0xFF5
 23320                           prodh	equ	0xFF4
 23321                           prodl	equ	0xFF3
 23322                           intcon	equ	0xFF2
 23323                           indf0	equ	0xFEF
 23324                           postinc0	equ	0xFEE
 23325                           plusw0	equ	0xFEB
 23326                           fsr0h	equ	0xFEA
 23327                           fsr0l	equ	0xFE9
 23328                           wreg	equ	0xFE8
 23329                           postinc1	equ	0xFE6
 23330                           postdec1	equ	0xFE5
 23331                           plusw1	equ	0xFE3
 23332                           fsr1h	equ	0xFE2
 23333                           fsr1l	equ	0xFE1
 23334                           indf2	equ	0xFDF
 23335                           postinc2	equ	0xFDE
 23336                           postdec2	equ	0xFDD
 23337                           plusw2	equ	0xFDB
 23338                           fsr2h	equ	0xFDA
 23339                           fsr2l	equ	0xFD9
 23340                           status	equ	0xFD8
 23341                           
 23342 ;; *************** function _LORAWAN_Join *****************
 23343 ;; Defined at:
 23344 ;;		line 115 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 23345 ;; Parameters:    Size  Location     Type
 23346 ;;  activationTy    1    wreg     enum E17377
 23347 ;; Auto vars:     Size  Location     Type
 23348 ;;  activationTy    1  133[BANK0 ] enum E17377
 23349 ;;  result          1  132[BANK0 ] enum E17354
 23350 ;;  bufferIndex     1  131[BANK0 ] unsigned char 
 23351 ;; Return value:  Size  Location     Type
 23352 ;;                  1    wreg      enum E17354
 23353 ;; Registers used:
 23354 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23355 ;; Tracked objects:
 23356 ;;		On entry : 3F/2
 23357 ;;		On exit  : 3D/0
 23358 ;;		Unchanged: 0/0
 23359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23360 ;;      Params:         0       0       0       0       0       0       0       0       0
 23361 ;;      Locals:         0       3       0       0       0       0       0       0       0
 23362 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23363 ;;      Totals:         0       3       0       0       0       0       0       0       0
 23364 ;;Total ram usage:        3 bytes
 23365 ;; Hardware stack levels used:    1
 23366 ;; Hardware stack levels required when called:   14
 23367 ;; This function calls:
 23368 ;;		_PrepareJoinRequestFrame
 23369 ;;		_RADIO_Transmit
 23370 ;;		_SelectChannelForTransmission
 23371 ;;		_SwTimerSetTimeout
 23372 ;;		_SwTimerStart
 23373 ;;		_UpdateJoinInProgress
 23374 ;; This function is called by:
 23375 ;;		_main
 23376 ;; This function uses a non-reentrant model
 23377 ;;
 23378                           
 23379                           	psect	text120
 23380  004640                     __ptext120:
 23381                           	opt stack 0
 23382  004640                     _LORAWAN_Join:
 23383                           	opt stack 16
 23384                           
 23385                           ; BSR set to: 0
 23386                           ;incstack = 0
 23387                           ;LORAWAN_Join@activationTypeNew stored from wreg
 23388  004640  0100               	movlb	0	; () banked
 23389  004642  6FE5               	movwf	LORAWAN_Join@activationTypeNew& (0+255),b
 23390                           
 23391                           ;lorawan.c: 117: uint8_t bufferIndex;
 23392                           ;lorawan.c: 118: LorawanError_t result;
 23393                           ;lorawan.c: 120: if (loRa.macStatus.macPause == 1)
 23394  004644  0102               	movlb	2	; () banked
 23395  004646  A103               	btfss	(_loRa+3)& (0+255),0,b
 23396                           
 23397                           ; BSR set to: 2
 23398                           ;lorawan.c: 123: }
 23399                           ;lorawan.c: 125: if (loRa.macStatus.silentImmediately == 1)
 23400  004648  BF02               	btfsc	(_loRa+2)& (0+255),7,b
 23401  00464A  0012               	return	
 23402                           
 23403                           ; BSR set to: 2
 23404                           ;lorawan.c: 128: }
 23405                           ;lorawan.c: 130: if (loRa.macStatus.macState != IDLE)
 23406  00464C  5102               	movf	(_loRa+2)& (0+255),w,b
 23407  00464E  0B0F               	andlw	15
 23408  004650  E001               	bz	l232
 23409  004652  0012               	return	
 23410  004654                     l232:
 23411                           
 23412                           ; BSR set to: 2
 23413                           ;lorawan.c: 133: }
 23414                           ;lorawan.c: 135: loRa.activationParameters.activationType = activationTypeNew;
 23415  004654  C0E5  F21D         	movff	LORAWAN_Join@activationTypeNew,_loRa+29
 23416                           
 23417                           ; BSR set to: 2
 23418                           ;lorawan.c: 137: if (OTAA == activationTypeNew)
 23419  004658  0100               	movlb	0	; () banked
 23420  00465A  51E5               	movf	LORAWAN_Join@activationTypeNew& (0+255),w,b
 23421  00465C  E11F               	bnz	l233
 23422                           
 23423                           ; BSR set to: 0
 23424                           ;lorawan.c: 138: {
 23425                           ;lorawan.c: 140: if ( (loRa.macKeys.deviceEui == 0) || (loRa.macKeys.applicationEui == 0
      +                          ) || (loRa.macKeys.applicationKey == 0) )
 23426  00465E  0102               	movlb	2	; () banked
 23427  004660  B1A5               	btfsc	(_loRa+165)& (0+255),0,b
 23428                           
 23429                           ; BSR set to: 2
 23430  004662  A3A5               	btfss	(_loRa+165)& (0+255),1,b
 23431  004664  0012               	return	
 23432                           
 23433                           ; BSR set to: 2
 23434  004666  A7A5               	btfss	(_loRa+165)& (0+255),3,b
 23435  004668  0012               	return	
 23436                           
 23437                           ; BSR set to: 2
 23438                           ;lorawan.c: 144: else
 23439                           ;lorawan.c: 145: {
 23440                           ;lorawan.c: 146: bufferIndex = PrepareJoinRequestFrame ();
 23441  00466A  ECFD  F016         	call	_PrepareJoinRequestFrame	;wreg free
 23442  00466E  6FE3               	movwf	LORAWAN_Join@bufferIndex& (0+255),b
 23443                           
 23444                           ;lorawan.c: 147: result = SelectChannelForTransmission (0);
 23445  004670  0E00               	movlw	0
 23446  004672  ECC4  F026         	call	_SelectChannelForTransmission
 23447  004676  6FE4               	movwf	LORAWAN_Join@result& (0+255),b
 23448                           
 23449                           ; BSR set to: 0
 23450                           ;lorawan.c: 149: if (result == OK)
 23451  004678  51E4               	movf	LORAWAN_Join@result& (0+255),w,b
 23452  00467A  A4D8               	btfss	status,2,c
 23453  00467C  0012               	return	
 23454                           
 23455                           ; BSR set to: 0
 23456                           ;lorawan.c: 150: {
 23457                           ;lorawan.c: 151: if (RADIO_Transmit(macBuffer, bufferIndex) == OK)
 23458  00467E  0EEF               	movlw	low _macBuffer
 23459  004680  6FA6               	movwf	RADIO_Transmit@buffer& (0+255),b
 23460  004682  0E05               	movlw	high _macBuffer
 23461  004684  6FA7               	movwf	(RADIO_Transmit@buffer+1)& (0+255),b
 23462  004686  C0E3  F0A8         	movff	LORAWAN_Join@bufferIndex,RADIO_Transmit@bufferLen
 23463  00468A  ECCE  F00E         	call	_RADIO_Transmit	;wreg free
 23464  00468E  51A6               	movf	?_RADIO_Transmit& (0+255),w,b
 23465  004690  11A7               	iorwf	(?_RADIO_Transmit+1)& (0+255),w,b
 23466  004692  A4D8               	btfss	status,2,c
 23467  004694  0012               	return	
 23468                           
 23469                           ; BSR set to: 0
 23470                           ;lorawan.c: 152: {
 23471                           ;lorawan.c: 153: UpdateJoinInProgress(TRANSMISSION_OCCURRING);
 23472  004696  0E01               	movlw	1
 23473  004698  EF96  F02F         	goto	_UpdateJoinInProgress
 23474  00469C                     l233:
 23475                           
 23476                           ; BSR set to: 0
 23477                           ;lorawan.c: 167: else
 23478                           ;lorawan.c: 168: {
 23479                           ;lorawan.c: 170: if ( (loRa.macKeys.applicationSessionKey == 0) || (loRa.macKeys.network
      +                          SessionKey == 0) || (loRa.macKeys.deviceAddress == 0) )
 23480  00469C  0102               	movlb	2	; () banked
 23481  00469E  BBA5               	btfsc	(_loRa+165)& (0+255),5,b
 23482                           
 23483                           ; BSR set to: 2
 23484  0046A0  A9A5               	btfss	(_loRa+165)& (0+255),4,b
 23485  0046A2  0012               	return	
 23486                           
 23487                           ; BSR set to: 2
 23488  0046A4  A5A5               	btfss	(_loRa+165)& (0+255),2,b
 23489  0046A6  0012               	return	
 23490                           
 23491                           ; BSR set to: 2
 23492                           ;lorawan.c: 174: else
 23493                           ;lorawan.c: 175: {
 23494                           ;lorawan.c: 176: UpdateJoinInProgress(ABP_DELAY);
 23495  0046A8  0E07               	movlw	7
 23496  0046AA  EC96  F02F         	call	_UpdateJoinInProgress
 23497                           
 23498                           ; BSR set to: 2
 23499                           ;lorawan.c: 177: SwTimerSetTimeout(loRa.abpJoinTimerId, ( (((uint32_t)(20)) << (12)) / 1
      +                          25UL ));
 23500  0046AE  0E8F               	movlw	143
 23501  0046B0  0100               	movlb	0	; () banked
 23502  0046B2  6F6D               	movwf	SwTimerSetTimeout@timeout& (0+255),b
 23503  0046B4  0E02               	movlw	2
 23504  0046B6  6F6E               	movwf	(SwTimerSetTimeout@timeout+1)& (0+255),b
 23505  0046B8  6B6F               	clrf	(SwTimerSetTimeout@timeout+2)& (0+255),b
 23506  0046BA  6B70               	clrf	(SwTimerSetTimeout@timeout+3)& (0+255),b
 23507  0046BC  0102               	movlb	2	; () banked
 23508  0046BE  51F3               	movf	(_loRa+243)& (0+255),w,b
 23509  0046C0  EC11  F02C         	call	_SwTimerSetTimeout
 23510                           
 23511                           ; BSR set to: 0
 23512                           ;lorawan.c: 178: SwTimerStart(loRa.abpJoinTimerId);
 23513  0046C4  0102               	movlb	2	; () banked
 23514  0046C6  51F3               	movf	(_loRa+243)& (0+255),w,b
 23515  0046C8  EFC4  F025         	goto	_SwTimerStart
 23516  0046CC                     __end_of_LORAWAN_Join:
 23517                           	opt stack 0
 23518                           tosu	equ	0xFFF
 23519                           tosh	equ	0xFFE
 23520                           tosl	equ	0xFFD
 23521                           pclath	equ	0xFFA
 23522                           tblptru	equ	0xFF8
 23523                           tblptrh	equ	0xFF7
 23524                           tblptrl	equ	0xFF6
 23525                           tablat	equ	0xFF5
 23526                           prodh	equ	0xFF4
 23527                           prodl	equ	0xFF3
 23528                           intcon	equ	0xFF2
 23529                           indf0	equ	0xFEF
 23530                           postinc0	equ	0xFEE
 23531                           plusw0	equ	0xFEB
 23532                           fsr0h	equ	0xFEA
 23533                           fsr0l	equ	0xFE9
 23534                           wreg	equ	0xFE8
 23535                           postinc1	equ	0xFE6
 23536                           postdec1	equ	0xFE5
 23537                           plusw1	equ	0xFE3
 23538                           fsr1h	equ	0xFE2
 23539                           fsr1l	equ	0xFE1
 23540                           indf2	equ	0xFDF
 23541                           postinc2	equ	0xFDE
 23542                           postdec2	equ	0xFDD
 23543                           plusw2	equ	0xFDB
 23544                           fsr2h	equ	0xFDA
 23545                           fsr2l	equ	0xFD9
 23546                           status	equ	0xFD8
 23547                           
 23548 ;; *************** function _UpdateJoinInProgress *****************
 23549 ;; Defined at:
 23550 ;;		line 2037 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 23551 ;; Parameters:    Size  Location     Type
 23552 ;;  state           1    wreg     unsigned char 
 23553 ;; Auto vars:     Size  Location     Type
 23554 ;;  state           1    0[BANK0 ] unsigned char 
 23555 ;; Return value:  Size  Location     Type
 23556 ;;                  1    wreg      void 
 23557 ;; Registers used:
 23558 ;;		wreg, status,2, status,0
 23559 ;; Tracked objects:
 23560 ;;		On entry : 3D/0
 23561 ;;		On exit  : 3F/2
 23562 ;;		Unchanged: 0/0
 23563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23564 ;;      Params:         0       0       0       0       0       0       0       0       0
 23565 ;;      Locals:         0       1       0       0       0       0       0       0       0
 23566 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23567 ;;      Totals:         0       1       0       0       0       0       0       0       0
 23568 ;;Total ram usage:        1 bytes
 23569 ;; Hardware stack levels used:    1
 23570 ;; Hardware stack levels required when called:    7
 23571 ;; This function calls:
 23572 ;;		Nothing
 23573 ;; This function is called by:
 23574 ;;		_LORAWAN_Join
 23575 ;; This function uses a non-reentrant model
 23576 ;;
 23577                           
 23578                           	psect	text121
 23579  005F2C                     __ptext121:
 23580                           	opt stack 0
 23581  005F2C                     _UpdateJoinInProgress:
 23582                           	opt stack 22
 23583                           
 23584                           ;incstack = 0
 23585                           ;UpdateJoinInProgress@state stored from wreg
 23586  005F2C  0100               	movlb	0	; () banked
 23587  005F2E  6F60               	movwf	UpdateJoinInProgress@state& (0+255),b
 23588                           
 23589                           ;lorawan.c: 2040: loRa.macStatus.networkJoined = 0;
 23590  005F30  0102               	movlb	2	; () banked
 23591  005F32  9902               	bcf	(_loRa+2)& (0+255),4,b
 23592                           
 23593                           ;lorawan.c: 2041: loRa.lorawanMacStatus.joining = 1;
 23594  005F34  8500               	bsf	_loRa& (0+255),2,b
 23595                           
 23596                           ; BSR set to: 2
 23597                           ;lorawan.c: 2042: loRa.macStatus.macState = state;
 23598  005F36  5102               	movf	(_loRa+2)& (0+255),w,b
 23599  005F38  0100               	movlb	0	; () banked
 23600  005F3A  1960               	xorwf	UpdateJoinInProgress@state& (0+255),w,b
 23601  005F3C  0BF0               	andlw	-16
 23602  005F3E  1960               	xorwf	UpdateJoinInProgress@state& (0+255),w,b
 23603  005F40  0102               	movlb	2	; () banked
 23604  005F42  6F02               	movwf	(_loRa+2)& (0+255),b
 23605                           
 23606                           ; BSR set to: 2
 23607  005F44  0012               	return		;funcret
 23608  005F46                     __end_of_UpdateJoinInProgress:
 23609                           	opt stack 0
 23610                           tosu	equ	0xFFF
 23611                           tosh	equ	0xFFE
 23612                           tosl	equ	0xFFD
 23613                           pclath	equ	0xFFA
 23614                           tblptru	equ	0xFF8
 23615                           tblptrh	equ	0xFF7
 23616                           tblptrl	equ	0xFF6
 23617                           tablat	equ	0xFF5
 23618                           prodh	equ	0xFF4
 23619                           prodl	equ	0xFF3
 23620                           intcon	equ	0xFF2
 23621                           indf0	equ	0xFEF
 23622                           postinc0	equ	0xFEE
 23623                           plusw0	equ	0xFEB
 23624                           fsr0h	equ	0xFEA
 23625                           fsr0l	equ	0xFE9
 23626                           wreg	equ	0xFE8
 23627                           postinc1	equ	0xFE6
 23628                           postdec1	equ	0xFE5
 23629                           plusw1	equ	0xFE3
 23630                           fsr1h	equ	0xFE2
 23631                           fsr1l	equ	0xFE1
 23632                           indf2	equ	0xFDF
 23633                           postinc2	equ	0xFDE
 23634                           postdec2	equ	0xFDD
 23635                           plusw2	equ	0xFDB
 23636                           fsr2h	equ	0xFDA
 23637                           fsr2l	equ	0xFD9
 23638                           status	equ	0xFD8
 23639                           
 23640 ;; *************** function _SelectChannelForTransmission *****************
 23641 ;; Defined at:
 23642 ;;		line 919 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 23643 ;; Parameters:    Size  Location     Type
 23644 ;;  transmission    1    wreg     unsigned char 
 23645 ;; Auto vars:     Size  Location     Type
 23646 ;;  transmission    1   80[BANK0 ] unsigned char 
 23647 ;;  channelIndex    1   82[BANK0 ] unsigned char 
 23648 ;;  result          1   81[BANK0 ] enum E17413
 23649 ;; Return value:  Size  Location     Type
 23650 ;;                  1    wreg      enum E17354
 23651 ;; Registers used:
 23652 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23653 ;; Tracked objects:
 23654 ;;		On entry : 0/0
 23655 ;;		On exit  : 3F/0
 23656 ;;		Unchanged: 0/0
 23657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23658 ;;      Params:         0       0       0       0       0       0       0       0       0
 23659 ;;      Locals:         0       3       0       0       0       0       0       0       0
 23660 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23661 ;;      Totals:         0       3       0       0       0       0       0       0       0
 23662 ;;Total ram usage:        3 bytes
 23663 ;; Hardware stack levels used:    1
 23664 ;; Hardware stack levels required when called:   11
 23665 ;; This function calls:
 23666 ;;		_ConfigureRadioTx
 23667 ;;		_SearchAvailableChannel
 23668 ;; This function is called by:
 23669 ;;		_LORAWAN_Join
 23670 ;;		_LORAWAN_Send
 23671 ;;		_AckRetransmissionCallback
 23672 ;;		_UnconfirmedTransmissionCallback
 23673 ;;		_LORAWAN_RxTimeout
 23674 ;; This function uses a non-reentrant model
 23675 ;;
 23676                           
 23677                           	psect	text122
 23678  004D88                     __ptext122:
 23679                           	opt stack 0
 23680  004D88                     _SelectChannelForTransmission:
 23681                           	opt stack 17
 23682                           
 23683                           ; BSR set to: 2
 23684                           ;incstack = 0
 23685                           ;SelectChannelForTransmission@transmissionType stored from wreg
 23686  004D88  0100               	movlb	0	; () banked
 23687  004D8A  6FB0               	movwf	SelectChannelForTransmission@transmissionType& (0+255),b
 23688                           
 23689                           ;lorawan_eu.c: 922: uint8_t channelIndex;
 23690                           ;lorawan_eu.c: 924: result = SearchAvailableChannel (16, transmissionType, &channelIndex
      +                          );
 23691  004D8C  C0B0  F0A5         	movff	SelectChannelForTransmission@transmissionType,SearchAvailableChannel@transmission
      +                          Type
 23692  004D90  0EB2               	movlw	low SelectChannelForTransmission@channelIndex
 23693  004D92  6FA6               	movwf	SearchAvailableChannel@channelIndex& (0+255),b
 23694  004D94  0E10               	movlw	16
 23695  004D96  EC8C  F01F         	call	_SearchAvailableChannel
 23696  004D9A  6FB1               	movwf	SelectChannelForTransmission@result& (0+255),b
 23697                           
 23698                           ; BSR set to: 0
 23699                           ;lorawan_eu.c: 926: if (result == OK)
 23700  004D9C  51B1               	movf	SelectChannelForTransmission@result& (0+255),w,b
 23701  004D9E  E11A               	bnz	l13324
 23702                           
 23703                           ; BSR set to: 0
 23704                           ;lorawan_eu.c: 927: {
 23705                           ;lorawan_eu.c: 928: loRa.lastUsedChannelIndex = channelIndex;
 23706  004DA0  C0B2  F2DA         	movff	SelectChannelForTransmission@channelIndex,_loRa+218
 23707                           
 23708                           ; BSR set to: 0
 23709                           ;lorawan_eu.c: 929: loRa.receiveWindow1Parameters.frequency = Channels[channelIndex].fre
      +                          quency;
 23710  004DA4  51B2               	movf	SelectChannelForTransmission@channelIndex& (0+255),w,b
 23711  004DA6  D819               	call	PL252	;call to abstracted procedure
 23712  004DA8  CFDE F213          	movff	postinc2,_loRa+19
 23713  004DAC  CFDE F214          	movff	postinc2,_loRa+20
 23714  004DB0  CFDE F215          	movff	postinc2,_loRa+21
 23715  004DB4  CFDE F216          	movff	postinc2,_loRa+22
 23716                           
 23717                           ; BSR set to: 0
 23718                           ;lorawan_eu.c: 930: loRa.receiveWindow1Parameters.dataRate = loRa.currentDataRate;
 23719  004DB8  C2DF  F217         	movff	_loRa+223,_loRa+23
 23720                           
 23721                           ; BSR set to: 0
 23722                           ;lorawan_eu.c: 932: ConfigureRadioTx(loRa.receiveWindow1Parameters.dataRate, loRa.receiv
      +                          eWindow1Parameters.frequency);
 23723  004DBC  C213  F072         	movff	_loRa+19,ConfigureRadioTx@freq
 23724  004DC0  C214  F073         	movff	_loRa+20,ConfigureRadioTx@freq+1
 23725  004DC4  C215  F074         	movff	_loRa+21,ConfigureRadioTx@freq+2
 23726  004DC8  C216  F075         	movff	_loRa+22,ConfigureRadioTx@freq+3
 23727  004DCC  0102               	movlb	2	; () banked
 23728  004DCE  5117               	movf	(_loRa+23)& (0+255),w,b
 23729  004DD0  ECFE  F02A         	call	_ConfigureRadioTx
 23730  004DD4                     l13324:
 23731                           
 23732                           ;lorawan_eu.c: 933: }
 23733                           ;lorawan_eu.c: 934: return result;
 23734  004DD4  0100               	movlb	0	; () banked
 23735  004DD6  51B1               	movf	SelectChannelForTransmission@result& (0+255),w,b
 23736                           
 23737                           ; BSR set to: 0
 23738  004DD8  0012               	return		;funcret
 23739  004DDA                     __end_of_SelectChannelForTransmission:
 23740                           	opt stack 0
 23741  004DDA                     PL252:
 23742                           	opt stack 17
 23743  004DDA  0D0E               	mullw	14
 23744  004DDC  0E00               	movlw	low _Channels
 23745  004DDE  24F3               	addwf	prodl,w,c
 23746  004DE0  6ED9               	movwf	fsr2l,c
 23747  004DE2  0E04               	movlw	high _Channels
 23748  004DE4  20F4               	addwfc	prodh,w,c
 23749  004DE6  6EDA               	movwf	fsr2h,c
 23750  004DE8  0012               	return	
 23751  004DEA                     __end_ofPL252:
 23752                           	opt stack 0
 23753                           tosu	equ	0xFFF
 23754                           tosh	equ	0xFFE
 23755                           tosl	equ	0xFFD
 23756                           pclath	equ	0xFFA
 23757                           tblptru	equ	0xFF8
 23758                           tblptrh	equ	0xFF7
 23759                           tblptrl	equ	0xFF6
 23760                           tablat	equ	0xFF5
 23761                           prodh	equ	0xFF4
 23762                           prodl	equ	0xFF3
 23763                           intcon	equ	0xFF2
 23764                           indf0	equ	0xFEF
 23765                           postinc0	equ	0xFEE
 23766                           plusw0	equ	0xFEB
 23767                           fsr0h	equ	0xFEA
 23768                           fsr0l	equ	0xFE9
 23769                           wreg	equ	0xFE8
 23770                           postinc1	equ	0xFE6
 23771                           postdec1	equ	0xFE5
 23772                           plusw1	equ	0xFE3
 23773                           fsr1h	equ	0xFE2
 23774                           fsr1l	equ	0xFE1
 23775                           indf2	equ	0xFDF
 23776                           postinc2	equ	0xFDE
 23777                           postdec2	equ	0xFDD
 23778                           plusw2	equ	0xFDB
 23779                           fsr2h	equ	0xFDA
 23780                           fsr2l	equ	0xFD9
 23781                           status	equ	0xFD8
 23782                           
 23783 ;; *************** function _SearchAvailableChannel *****************
 23784 ;; Defined at:
 23785 ;;		line 778 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 23786 ;; Parameters:    Size  Location     Type
 23787 ;;  maxChannels     1    wreg     unsigned char 
 23788 ;;  transmission    1   69[BANK0 ] unsigned char 
 23789 ;;  channelIndex    1   70[BANK0 ] PTR unsigned char 
 23790 ;;		 -> SelectChannelForTransmission@channelIndex(1), LORAWAN_RxDone@channelIndex(1), 
 23791 ;; Auto vars:     Size  Location     Type
 23792 ;;  maxChannels     1   77[BANK0 ] unsigned char 
 23793 ;;  i               1   79[BANK0 ] unsigned char 
 23794 ;;  randomNumber    1   78[BANK0 ] unsigned char 
 23795 ;;  result          1   76[BANK0 ] enum E17413
 23796 ;;  randomNumber    1   75[BANK0 ] unsigned char 
 23797 ;; Return value:  Size  Location     Type
 23798 ;;                  1    wreg      enum E17354
 23799 ;; Registers used:
 23800 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23801 ;; Tracked objects:
 23802 ;;		On entry : 3D/2
 23803 ;;		On exit  : 3F/0
 23804 ;;		Unchanged: 0/0
 23805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23806 ;;      Params:         0       2       0       0       0       0       0       0       0
 23807 ;;      Locals:         0       5       0       0       0       0       0       0       0
 23808 ;;      Temps:          0       4       0       0       0       0       0       0       0
 23809 ;;      Totals:         0      11       0       0       0       0       0       0       0
 23810 ;;Total ram usage:       11 bytes
 23811 ;; Hardware stack levels used:    1
 23812 ;; Hardware stack levels required when called:   10
 23813 ;; This function calls:
 23814 ;;		_Random
 23815 ;; This function is called by:
 23816 ;;		_LORAWAN_RxDone
 23817 ;;		_SelectChannelForTransmission
 23818 ;; This function uses a non-reentrant model
 23819 ;;
 23820                           
 23821                           	psect	text123
 23822  003F18                     __ptext123:
 23823                           	opt stack 0
 23824  003F18                     _SearchAvailableChannel:
 23825                           	opt stack 17
 23826                           
 23827                           ; BSR set to: 0
 23828                           ;incstack = 0
 23829                           ;SearchAvailableChannel@maxChannels stored from wreg
 23830  003F18  0100               	movlb	0	; () banked
 23831  003F1A  6FAD               	movwf	SearchAvailableChannel@maxChannels& (0+255),b
 23832                           
 23833                           ;lorawan_eu.c: 780: uint8_t randomNumberCopy, randomNumber, i;
 23834                           ;lorawan_eu.c: 781: LorawanError_t result = OK;
 23835  003F1C  6BAC               	clrf	SearchAvailableChannel@result& (0+255),b
 23836                           
 23837                           ; BSR set to: 0
 23838                           ;lorawan_eu.c: 783: randomNumber = Random (maxChannels) + 1;
 23839  003F1E  C0AD  F0A3         	movff	SearchAvailableChannel@maxChannels,Random@max
 23840  003F22  6BA4               	clrf	(Random@max+1)& (0+255),b
 23841  003F24  ECD1  F02E         	call	_Random	;wreg free
 23842  003F28  29A3               	incf	?_Random& (0+255),w,b
 23843  003F2A  6FAE               	movwf	SearchAvailableChannel@randomNumber& (0+255),b
 23844                           
 23845                           ; BSR set to: 0
 23846                           ;lorawan_eu.c: 784: randomNumberCopy = randomNumber;
 23847  003F2C  C0AE  F0AB         	movff	SearchAvailableChannel@randomNumber,SearchAvailableChannel@randomNumberCopy
 23848                           
 23849                           ;lorawan_eu.c: 786: while (randomNumber)
 23850  003F30  D03D               	goto	l13030
 23851  003F32                     l1297:
 23852                           
 23853                           ; BSR set to: 0
 23854                           ;lorawan_eu.c: 787: {
 23855                           ;lorawan_eu.c: 788: for (i=0; (i < maxChannels) && (randomNumber != 0) ; i++)
 23856  003F32  6BAF               	clrf	SearchAvailableChannel@i& (0+255),b
 23857  003F34  D030               	goto	l13022
 23858  003F36                     l13006:
 23859                           
 23860                           ; BSR set to: 0
 23861                           ;lorawan_eu.c: 789: {
 23862                           ;lorawan_eu.c: 790: if ( ( Channels[i].status == 1 ) && ( Channels[i].channelTimer == 0 
      +                          ) && ( loRa.currentDataRate >= Channels[i].dataRange.min ) && ( loRa.currentDataRate <= 
      +                          Channels[i].dataRange.max ) )
 23863  003F36  51AF               	movf	SearchAvailableChannel@i& (0+255),w,b
 23864  003F38  EC86  F021         	call	PL12	;call to abstracted procedure
 23865  003F3C  E12A               	bnz	l1300
 23866                           
 23867                           ; BSR set to: 0
 23868  003F3E  51AF               	movf	SearchAvailableChannel@i& (0+255),w,b
 23869  003F40  EC51  F006         	call	PL4	;call to abstracted procedure
 23870  003F44  ECBB  F00E         	call	PL130	;call to abstracted procedure
 23871  003F48  E124               	bnz	l1300
 23872                           
 23873                           ; BSR set to: 0
 23874  003F4A  51AF               	movf	SearchAvailableChannel@i& (0+255),w,b
 23875  003F4C  EC7E  F021         	call	PL6	;call to abstracted procedure
 23876  003F50  50DF               	movf	223,w,c
 23877  003F52  0B0F               	andlw	15
 23878  003F54  0100               	movlb	0	; () banked
 23879  003F56  6FA7               	movwf	??_SearchAvailableChannel& (0+255),b
 23880  003F58  51A7               	movf	??_SearchAvailableChannel& (0+255),w,b
 23881  003F5A  0102               	movlb	2	; () banked
 23882  003F5C  5DDF               	subwf	(_loRa+223)& (0+255),w,b
 23883  003F5E  E319               	bnc	l1300
 23884                           
 23885                           ; BSR set to: 2
 23886  003F60  0100               	movlb	0	; () banked
 23887  003F62  51AF               	movf	SearchAvailableChannel@i& (0+255),w,b
 23888  003F64  EC7E  F021         	call	PL6	;call to abstracted procedure
 23889  003F68  38DF               	swapf	223,w,c
 23890  003F6A  0B0F               	andlw	15
 23891  003F6C  6FA7               	movwf	??_SearchAvailableChannel& (0+255),b
 23892  003F6E  0102               	movlb	2	; () banked
 23893  003F70  51DF               	movf	(_loRa+223)& (0+255),w,b
 23894  003F72  0100               	movlb	0	; () banked
 23895  003F74  5DA7               	subwf	??_SearchAvailableChannel& (0+255),w,b
 23896  003F76  E30D               	bnc	l1300
 23897                           
 23898                           ; BSR set to: 0
 23899                           ;lorawan_eu.c: 791: {
 23900                           ;lorawan_eu.c: 792: if (transmissionType == 0)
 23901  003F78  51A5               	movf	SearchAvailableChannel@transmissionType& (0+255),w,b
 23902  003F7A  E10A               	bnz	l13018
 23903                           
 23904                           ; BSR set to: 0
 23905                           ;lorawan_eu.c: 793: {
 23906                           ;lorawan_eu.c: 794: if ( Channels[i].joinRequestChannel == 1 )
 23907  003F7C  51AF               	movf	SearchAvailableChannel@i& (0+255),w,b
 23908  003F7E  0D0E               	mullw	14
 23909  003F80  0E0C               	movlw	low (_Channels+12)
 23910  003F82  24F3               	addwf	prodl,w,c
 23911  003F84  6ED9               	movwf	fsr2l,c
 23912  003F86  0E04               	movlw	high (_Channels+12)
 23913  003F88  20F4               	addwfc	prodh,w,c
 23914  003F8A  6EDA               	movwf	fsr2h,c
 23915  003F8C  04DE               	decf	postinc2,w,c
 23916  003F8E  E101               	bnz	l1300
 23917  003F90                     l13018:
 23918                           
 23919                           ; BSR set to: 0
 23920                           ;lorawan_eu.c: 795: {
 23921                           ;lorawan_eu.c: 796: randomNumber --;
 23922  003F90  07AE               	decf	SearchAvailableChannel@randomNumber& (0+255),f,b
 23923  003F92                     l1300:
 23924  003F92  0100               	movlb	0	; () banked
 23925  003F94  2BAF               	incf	SearchAvailableChannel@i& (0+255),f,b
 23926  003F96                     l13022:
 23927                           
 23928                           ; BSR set to: 0
 23929  003F96  51AD               	movf	SearchAvailableChannel@maxChannels& (0+255),w,b
 23930  003F98  5DAF               	subwf	SearchAvailableChannel@i& (0+255),w,b
 23931  003F9A  E202               	bc	l13026
 23932                           
 23933                           ; BSR set to: 0
 23934  003F9C  51AE               	movf	SearchAvailableChannel@randomNumber& (0+255),w,b
 23935  003F9E  E1CB               	bnz	l13006
 23936  003FA0                     l13026:
 23937                           
 23938                           ; BSR set to: 0
 23939                           ;lorawan_eu.c: 802: }
 23940                           ;lorawan_eu.c: 803: }
 23941                           ;lorawan_eu.c: 804: }
 23942                           ;lorawan_eu.c: 806: if ( randomNumber == randomNumberCopy )
 23943  003FA0  51AB               	movf	SearchAvailableChannel@randomNumberCopy& (0+255),w,b
 23944  003FA2  19AE               	xorwf	SearchAvailableChannel@randomNumber& (0+255),w,b
 23945  003FA4  E103               	bnz	l13030
 23946                           
 23947                           ; BSR set to: 0
 23948                           ;lorawan_eu.c: 807: {
 23949                           ;lorawan_eu.c: 808: result = NO_CHANNELS_FOUND;
 23950  003FA6  0E09               	movlw	9
 23951  003FA8  6FAC               	movwf	SearchAvailableChannel@result& (0+255),b
 23952                           
 23953                           ;lorawan_eu.c: 809: break;
 23954  003FAA  D002               	goto	l13032
 23955  003FAC                     l13030:
 23956                           
 23957                           ; BSR set to: 0
 23958  003FAC  51AE               	movf	SearchAvailableChannel@randomNumber& (0+255),w,b
 23959  003FAE  E1C1               	bnz	l1297
 23960  003FB0                     l13032:
 23961                           
 23962                           ; BSR set to: 0
 23963                           ;lorawan_eu.c: 810: }
 23964                           ;lorawan_eu.c: 811: }
 23965                           ;lorawan_eu.c: 813: if ( i != 0)
 23966  003FB0  51AF               	movf	SearchAvailableChannel@i& (0+255),w,b
 23967  003FB2  E006               	bz	l13036
 23968                           
 23969                           ; BSR set to: 0
 23970                           ;lorawan_eu.c: 814: {
 23971                           ;lorawan_eu.c: 815: *channelIndex = i - 1;
 23972  003FB4  51A6               	movf	SearchAvailableChannel@channelIndex& (0+255),w,b
 23973  003FB6  6ED9               	movwf	fsr2l,c
 23974  003FB8  6ADA               	clrf	fsr2h,c
 23975  003FBA  05AF               	decf	SearchAvailableChannel@i& (0+255),w,b
 23976  003FBC  6EDF               	movwf	indf2,c
 23977                           
 23978                           ;lorawan_eu.c: 816: }
 23979  003FBE  D002               	goto	l1310
 23980  003FC0                     l13036:
 23981                           
 23982                           ; BSR set to: 0
 23983                           ;lorawan_eu.c: 817: else
 23984                           ;lorawan_eu.c: 818: {
 23985                           ;lorawan_eu.c: 819: result = NO_CHANNELS_FOUND;
 23986  003FC0  0E09               	movlw	9
 23987  003FC2  6FAC               	movwf	SearchAvailableChannel@result& (0+255),b
 23988  003FC4                     l1310:
 23989                           
 23990                           ; BSR set to: 0
 23991                           ;lorawan_eu.c: 820: }
 23992                           ;lorawan_eu.c: 821: return result;
 23993  003FC4  51AC               	movf	SearchAvailableChannel@result& (0+255),w,b
 23994                           
 23995                           ; BSR set to: 0
 23996  003FC6  0012               	return		;funcret
 23997  003FC8                     __end_of_SearchAvailableChannel:
 23998                           	opt stack 0
 23999                           tosu	equ	0xFFF
 24000                           tosh	equ	0xFFE
 24001                           tosl	equ	0xFFD
 24002                           pclath	equ	0xFFA
 24003                           tblptru	equ	0xFF8
 24004                           tblptrh	equ	0xFF7
 24005                           tblptrl	equ	0xFF6
 24006                           tablat	equ	0xFF5
 24007                           prodh	equ	0xFF4
 24008                           prodl	equ	0xFF3
 24009                           intcon	equ	0xFF2
 24010                           indf0	equ	0xFEF
 24011                           postinc0	equ	0xFEE
 24012                           plusw0	equ	0xFEB
 24013                           fsr0h	equ	0xFEA
 24014                           fsr0l	equ	0xFE9
 24015                           wreg	equ	0xFE8
 24016                           postinc1	equ	0xFE6
 24017                           postdec1	equ	0xFE5
 24018                           plusw1	equ	0xFE3
 24019                           fsr1h	equ	0xFE2
 24020                           fsr1l	equ	0xFE1
 24021                           indf2	equ	0xFDF
 24022                           postinc2	equ	0xFDE
 24023                           postdec2	equ	0xFDD
 24024                           plusw2	equ	0xFDB
 24025                           fsr2h	equ	0xFDA
 24026                           fsr2l	equ	0xFD9
 24027                           status	equ	0xFD8
 24028                           
 24029 ;; *************** function _ConfigureRadioTx *****************
 24030 ;; Defined at:
 24031 ;;		line 1255 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 24032 ;; Parameters:    Size  Location     Type
 24033 ;;  dataRate        1    wreg     unsigned char 
 24034 ;;  freq            4   18[BANK0 ] unsigned long 
 24035 ;; Auto vars:     Size  Location     Type
 24036 ;;  dataRate        1   22[BANK0 ] unsigned char 
 24037 ;;  txPower         1   23[BANK0 ] char 
 24038 ;; Return value:  Size  Location     Type
 24039 ;;                  1    wreg      void 
 24040 ;; Registers used:
 24041 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24042 ;; Tracked objects:
 24043 ;;		On entry : 3F/2
 24044 ;;		On exit  : 0/0
 24045 ;;		Unchanged: 0/0
 24046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24047 ;;      Params:         0       4       0       0       0       0       0       0       0
 24048 ;;      Locals:         0       2       0       0       0       0       0       0       0
 24049 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24050 ;;      Totals:         0       6       0       0       0       0       0       0       0
 24051 ;;Total ram usage:        6 bytes
 24052 ;; Hardware stack levels used:    1
 24053 ;; Hardware stack levels required when called:   10
 24054 ;; This function calls:
 24055 ;;		_ConfigureRadio
 24056 ;;		_RADIO_SetCRC
 24057 ;;		_RADIO_SetIQInverted
 24058 ;;		_RADIO_SetOutputPower
 24059 ;; This function is called by:
 24060 ;;		_SelectChannelForTransmission
 24061 ;; This function uses a non-reentrant model
 24062 ;;
 24063                           
 24064                           	psect	text124
 24065  0055FC                     __ptext124:
 24066                           	opt stack 0
 24067  0055FC                     _ConfigureRadioTx:
 24068                           	opt stack 17
 24069                           
 24070                           ; BSR set to: 0
 24071                           ;incstack = 0
 24072                           ;ConfigureRadioTx@dataRate stored from wreg
 24073  0055FC  0100               	movlb	0	; () banked
 24074  0055FE  6F76               	movwf	ConfigureRadioTx@dataRate& (0+255),b
 24075                           
 24076                           ;lorawan_eu.c: 1257: int8_t txPower;
 24077                           ;lorawan_eu.c: 1259: ConfigureRadio(dataRate, freq);
 24078  005600  C072  F06D         	movff	ConfigureRadioTx@freq,ConfigureRadio@freq
 24079  005604  C073  F06E         	movff	ConfigureRadioTx@freq+1,ConfigureRadio@freq+1
 24080  005608  C074  F06F         	movff	ConfigureRadioTx@freq+2,ConfigureRadio@freq+2
 24081  00560C  C075  F070         	movff	ConfigureRadioTx@freq+3,ConfigureRadio@freq+3
 24082  005610  5176               	movf	ConfigureRadioTx@dataRate& (0+255),w,b
 24083  005612  ECE0  F024         	call	_ConfigureRadio
 24084                           
 24085                           ;lorawan_eu.c: 1262: {
 24086                           ;lorawan_eu.c: 1263: txPower = txPower868[loRa.txPower];
 24087  005616  0EA2               	movlw	low _txPower868
 24088  005618  0102               	movlb	2	; () banked
 24089  00561A  25E1               	addwf	(_loRa+225)& (0+255),w,b
 24090  00561C  6EF6               	movwf	tblptrl,c
 24091  00561E  6AF7               	clrf	tblptrh,c
 24092  005620  0E7F               	movlw	high _txPower868
 24093  005622  22F7               	addwfc	tblptrh,f,c
 24094  005624                     	if	0	;There are less than 3 active tblptr bytes
 24095  005624                     	endif
 24096  005624  0008               	tblrd		*
 24097  005626  CFF5 F077          	movff	tablat,ConfigureRadioTx@txPower
 24098                           
 24099                           ; BSR set to: 2
 24100                           ;lorawan_eu.c: 1268: }
 24101                           ;lorawan_eu.c: 1270: RADIO_SetOutputPower (txPower);
 24102                           
 24103                           ;lorawan_eu.c: 1264: }
 24104  00562A  0100               	movlb	0	; () banked
 24105  00562C  5177               	movf	ConfigureRadioTx@txPower& (0+255),w,b
 24106  00562E  ECED  F030         	call	_RADIO_SetOutputPower
 24107                           
 24108                           ;lorawan_eu.c: 1272: RADIO_SetCRC(1);
 24109  005632  0E01               	movlw	1
 24110  005634  ECCD  F030         	call	_RADIO_SetCRC
 24111                           
 24112                           ;lorawan_eu.c: 1273: RADIO_SetIQInverted(0);
 24113  005638  0E00               	movlw	0
 24114  00563A  EFC8  F030         	goto	_RADIO_SetIQInverted
 24115  00563E                     __end_of_ConfigureRadioTx:
 24116                           	opt stack 0
 24117                           tosu	equ	0xFFF
 24118                           tosh	equ	0xFFE
 24119                           tosl	equ	0xFFD
 24120                           pclath	equ	0xFFA
 24121                           tblptru	equ	0xFF8
 24122                           tblptrh	equ	0xFF7
 24123                           tblptrl	equ	0xFF6
 24124                           tablat	equ	0xFF5
 24125                           prodh	equ	0xFF4
 24126                           prodl	equ	0xFF3
 24127                           intcon	equ	0xFF2
 24128                           indf0	equ	0xFEF
 24129                           postinc0	equ	0xFEE
 24130                           plusw0	equ	0xFEB
 24131                           fsr0h	equ	0xFEA
 24132                           fsr0l	equ	0xFE9
 24133                           wreg	equ	0xFE8
 24134                           postinc1	equ	0xFE6
 24135                           postdec1	equ	0xFE5
 24136                           plusw1	equ	0xFE3
 24137                           fsr1h	equ	0xFE2
 24138                           fsr1l	equ	0xFE1
 24139                           indf2	equ	0xFDF
 24140                           postinc2	equ	0xFDE
 24141                           postdec2	equ	0xFDD
 24142                           plusw2	equ	0xFDB
 24143                           fsr2h	equ	0xFDA
 24144                           fsr2l	equ	0xFD9
 24145                           status	equ	0xFD8
 24146                           
 24147 ;; *************** function _RADIO_SetOutputPower *****************
 24148 ;; Defined at:
 24149 ;;		line 1464 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24150 ;; Parameters:    Size  Location     Type
 24151 ;;  power           1    wreg     char 
 24152 ;; Auto vars:     Size  Location     Type
 24153 ;;  power           1    0[BANK0 ] char 
 24154 ;; Return value:  Size  Location     Type
 24155 ;;                  1    wreg      void 
 24156 ;; Registers used:
 24157 ;;		wreg
 24158 ;; Tracked objects:
 24159 ;;		On entry : 3F/0
 24160 ;;		On exit  : 0/0
 24161 ;;		Unchanged: 0/0
 24162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24163 ;;      Params:         0       0       0       0       0       0       0       0       0
 24164 ;;      Locals:         0       1       0       0       0       0       0       0       0
 24165 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24166 ;;      Totals:         0       1       0       0       0       0       0       0       0
 24167 ;;Total ram usage:        1 bytes
 24168 ;; Hardware stack levels used:    1
 24169 ;; Hardware stack levels required when called:    7
 24170 ;; This function calls:
 24171 ;;		Nothing
 24172 ;; This function is called by:
 24173 ;;		_ConfigureRadioTx
 24174 ;; This function uses a non-reentrant model
 24175 ;;
 24176                           
 24177                           	psect	text125
 24178  0061DA                     __ptext125:
 24179                           	opt stack 0
 24180  0061DA                     _RADIO_SetOutputPower:
 24181                           	opt stack 19
 24182                           
 24183                           ;incstack = 0
 24184                           ;RADIO_SetOutputPower@power stored from wreg
 24185  0061DA  6F60               	movwf	RADIO_SetOutputPower@power& (0+255),b
 24186                           
 24187                           ;radio_driver_SX1276.c: 1466: RadioConfiguration.outputPower = power;
 24188  0061DC  C060  F19A         	movff	RADIO_SetOutputPower@power,_RadioConfiguration+27
 24189  0061E0  0012               	return		;funcret
 24190  0061E2                     __end_of_RADIO_SetOutputPower:
 24191                           	opt stack 0
 24192                           tosu	equ	0xFFF
 24193                           tosh	equ	0xFFE
 24194                           tosl	equ	0xFFD
 24195                           pclath	equ	0xFFA
 24196                           tblptru	equ	0xFF8
 24197                           tblptrh	equ	0xFF7
 24198                           tblptrl	equ	0xFF6
 24199                           tablat	equ	0xFF5
 24200                           prodh	equ	0xFF4
 24201                           prodl	equ	0xFF3
 24202                           intcon	equ	0xFF2
 24203                           indf0	equ	0xFEF
 24204                           postinc0	equ	0xFEE
 24205                           plusw0	equ	0xFEB
 24206                           fsr0h	equ	0xFEA
 24207                           fsr0l	equ	0xFE9
 24208                           wreg	equ	0xFE8
 24209                           postinc1	equ	0xFE6
 24210                           postdec1	equ	0xFE5
 24211                           plusw1	equ	0xFE3
 24212                           fsr1h	equ	0xFE2
 24213                           fsr1l	equ	0xFE1
 24214                           indf2	equ	0xFDF
 24215                           postinc2	equ	0xFDE
 24216                           postdec2	equ	0xFDD
 24217                           plusw2	equ	0xFDB
 24218                           fsr2h	equ	0xFDA
 24219                           fsr2l	equ	0xFD9
 24220                           status	equ	0xFD8
 24221                           
 24222 ;; *************** function _RADIO_SetIQInverted *****************
 24223 ;; Defined at:
 24224 ;;		line 1484 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24225 ;; Parameters:    Size  Location     Type
 24226 ;;  iqInverted      1    wreg     unsigned char 
 24227 ;; Auto vars:     Size  Location     Type
 24228 ;;  iqInverted      1    0[BANK0 ] unsigned char 
 24229 ;; Return value:  Size  Location     Type
 24230 ;;                  1    wreg      void 
 24231 ;; Registers used:
 24232 ;;		wreg
 24233 ;; Tracked objects:
 24234 ;;		On entry : 0/0
 24235 ;;		On exit  : 0/0
 24236 ;;		Unchanged: 0/0
 24237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24238 ;;      Params:         0       0       0       0       0       0       0       0       0
 24239 ;;      Locals:         0       1       0       0       0       0       0       0       0
 24240 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24241 ;;      Totals:         0       1       0       0       0       0       0       0       0
 24242 ;;Total ram usage:        1 bytes
 24243 ;; Hardware stack levels used:    1
 24244 ;; Hardware stack levels required when called:    7
 24245 ;; This function calls:
 24246 ;;		Nothing
 24247 ;; This function is called by:
 24248 ;;		_ConfigureRadioRx
 24249 ;;		_ConfigureRadioTx
 24250 ;; This function uses a non-reentrant model
 24251 ;;
 24252                           
 24253                           	psect	text126
 24254  006190                     __ptext126:
 24255                           	opt stack 0
 24256  006190                     _RADIO_SetIQInverted:
 24257                           	opt stack 19
 24258                           
 24259                           ;incstack = 0
 24260                           ;RADIO_SetIQInverted@iqInverted stored from wreg
 24261  006190  0100               	movlb	0	; () banked
 24262  006192  6F60               	movwf	RADIO_SetIQInverted@iqInverted& (0+255),b
 24263                           
 24264                           ;radio_driver_SX1276.c: 1486: RadioConfiguration.iqInverted = iqInverted;
 24265  006194  C060  F19F         	movff	RADIO_SetIQInverted@iqInverted,_RadioConfiguration+32
 24266  006198  0012               	return		;funcret
 24267  00619A                     __end_of_RADIO_SetIQInverted:
 24268                           	opt stack 0
 24269                           tosu	equ	0xFFF
 24270                           tosh	equ	0xFFE
 24271                           tosl	equ	0xFFD
 24272                           pclath	equ	0xFFA
 24273                           tblptru	equ	0xFF8
 24274                           tblptrh	equ	0xFF7
 24275                           tblptrl	equ	0xFF6
 24276                           tablat	equ	0xFF5
 24277                           prodh	equ	0xFF4
 24278                           prodl	equ	0xFF3
 24279                           intcon	equ	0xFF2
 24280                           indf0	equ	0xFEF
 24281                           postinc0	equ	0xFEE
 24282                           plusw0	equ	0xFEB
 24283                           fsr0h	equ	0xFEA
 24284                           fsr0l	equ	0xFE9
 24285                           wreg	equ	0xFE8
 24286                           postinc1	equ	0xFE6
 24287                           postdec1	equ	0xFE5
 24288                           plusw1	equ	0xFE3
 24289                           fsr1h	equ	0xFE2
 24290                           fsr1l	equ	0xFE1
 24291                           indf2	equ	0xFDF
 24292                           postinc2	equ	0xFDE
 24293                           postdec2	equ	0xFDD
 24294                           plusw2	equ	0xFDB
 24295                           fsr2h	equ	0xFDA
 24296                           fsr2l	equ	0xFD9
 24297                           status	equ	0xFD8
 24298                           
 24299 ;; *************** function _RADIO_SetCRC *****************
 24300 ;; Defined at:
 24301 ;;		line 1474 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24302 ;; Parameters:    Size  Location     Type
 24303 ;;  crc             1    wreg     unsigned char 
 24304 ;; Auto vars:     Size  Location     Type
 24305 ;;  crc             1    0[BANK0 ] unsigned char 
 24306 ;; Return value:  Size  Location     Type
 24307 ;;                  1    wreg      void 
 24308 ;; Registers used:
 24309 ;;		wreg
 24310 ;; Tracked objects:
 24311 ;;		On entry : 0/0
 24312 ;;		On exit  : 0/0
 24313 ;;		Unchanged: 0/0
 24314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24315 ;;      Params:         0       0       0       0       0       0       0       0       0
 24316 ;;      Locals:         0       1       0       0       0       0       0       0       0
 24317 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24318 ;;      Totals:         0       1       0       0       0       0       0       0       0
 24319 ;;Total ram usage:        1 bytes
 24320 ;; Hardware stack levels used:    1
 24321 ;; Hardware stack levels required when called:    7
 24322 ;; This function calls:
 24323 ;;		Nothing
 24324 ;; This function is called by:
 24325 ;;		_ConfigureRadioRx
 24326 ;;		_ConfigureRadioTx
 24327 ;; This function uses a non-reentrant model
 24328 ;;
 24329                           
 24330                           	psect	text127
 24331  00619A                     __ptext127:
 24332                           	opt stack 0
 24333  00619A                     _RADIO_SetCRC:
 24334                           	opt stack 19
 24335                           
 24336                           ;incstack = 0
 24337                           ;RADIO_SetCRC@crc stored from wreg
 24338  00619A  0100               	movlb	0	; () banked
 24339  00619C  6F60               	movwf	RADIO_SetCRC@crc& (0+255),b
 24340                           
 24341                           ;radio_driver_SX1276.c: 1476: RadioConfiguration.crcOn = crc;
 24342  00619E  C060  F19B         	movff	RADIO_SetCRC@crc,_RadioConfiguration+28
 24343  0061A2  0012               	return		;funcret
 24344  0061A4                     __end_of_RADIO_SetCRC:
 24345                           	opt stack 0
 24346                           tosu	equ	0xFFF
 24347                           tosh	equ	0xFFE
 24348                           tosl	equ	0xFFD
 24349                           pclath	equ	0xFFA
 24350                           tblptru	equ	0xFF8
 24351                           tblptrh	equ	0xFF7
 24352                           tblptrl	equ	0xFF6
 24353                           tablat	equ	0xFF5
 24354                           prodh	equ	0xFF4
 24355                           prodl	equ	0xFF3
 24356                           intcon	equ	0xFF2
 24357                           indf0	equ	0xFEF
 24358                           postinc0	equ	0xFEE
 24359                           plusw0	equ	0xFEB
 24360                           fsr0h	equ	0xFEA
 24361                           fsr0l	equ	0xFE9
 24362                           wreg	equ	0xFE8
 24363                           postinc1	equ	0xFE6
 24364                           postdec1	equ	0xFE5
 24365                           plusw1	equ	0xFE3
 24366                           fsr1h	equ	0xFE2
 24367                           fsr1l	equ	0xFE1
 24368                           indf2	equ	0xFDF
 24369                           postinc2	equ	0xFDE
 24370                           postdec2	equ	0xFDD
 24371                           plusw2	equ	0xFDB
 24372                           fsr2h	equ	0xFDA
 24373                           fsr2l	equ	0xFD9
 24374                           status	equ	0xFD8
 24375                           
 24376 ;; *************** function _ConfigureRadio *****************
 24377 ;; Defined at:
 24378 ;;		line 863 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 24379 ;; Parameters:    Size  Location     Type
 24380 ;;  dataRate        1    wreg     unsigned char 
 24381 ;;  freq            4   13[BANK0 ] unsigned long 
 24382 ;; Auto vars:     Size  Location     Type
 24383 ;;  dataRate        1   17[BANK0 ] unsigned char 
 24384 ;; Return value:  Size  Location     Type
 24385 ;;                  1    wreg      void 
 24386 ;; Registers used:
 24387 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24388 ;; Tracked objects:
 24389 ;;		On entry : 3F/0
 24390 ;;		On exit  : 0/0
 24391 ;;		Unchanged: 0/0
 24392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24393 ;;      Params:         0       4       0       0       0       0       0       0       0
 24394 ;;      Locals:         0       1       0       0       0       0       0       0       0
 24395 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24396 ;;      Totals:         0       5       0       0       0       0       0       0       0
 24397 ;;Total ram usage:        5 bytes
 24398 ;; Hardware stack levels used:    1
 24399 ;; Hardware stack levels required when called:    9
 24400 ;; This function calls:
 24401 ;;		_RADIO_SetBandwidth
 24402 ;;		_RADIO_SetChannelFrequency
 24403 ;;		_RADIO_SetFSKSyncWord
 24404 ;;		_RADIO_SetFrequencyHopPeriod
 24405 ;;		_RADIO_SetLoRaSyncWord
 24406 ;;		_RADIO_SetModulation
 24407 ;;		_RADIO_SetSpreadingFactor
 24408 ;; This function is called by:
 24409 ;;		_ConfigureRadioRx
 24410 ;;		_ConfigureRadioTx
 24411 ;; This function uses a non-reentrant model
 24412 ;;
 24413                           
 24414                           	psect	text128
 24415  0049C0                     __ptext128:
 24416                           	opt stack 0
 24417  0049C0                     _ConfigureRadio:
 24418                           	opt stack 17
 24419                           
 24420                           ;incstack = 0
 24421                           ;ConfigureRadio@dataRate stored from wreg
 24422  0049C0  6F71               	movwf	ConfigureRadio@dataRate& (0+255),b
 24423                           
 24424                           ;lorawan_eu.c: 865: RADIO_SetModulation (modulation[dataRate]);
 24425  0049C2  0E6D               	movlw	low _modulation
 24426  0049C4  D82F               	call	PL426	;call to abstracted procedure
 24427  0049C6  0E7F               	movlw	high _modulation
 24428  0049C8  D832               	call	PL434	;call to abstracted procedure
 24429  0049CA  ECF5  F030         	call	_RADIO_SetModulation
 24430                           
 24431                           ;lorawan_eu.c: 866: RADIO_SetChannelFrequency (freq);
 24432  0049CE  C06D  F060         	movff	ConfigureRadio@freq,RADIO_SetChannelFrequency@frequency
 24433  0049D2  C06E  F061         	movff	ConfigureRadio@freq+1,RADIO_SetChannelFrequency@frequency+1
 24434  0049D6  C06F  F062         	movff	ConfigureRadio@freq+2,RADIO_SetChannelFrequency@frequency+2
 24435  0049DA  C070  F063         	movff	ConfigureRadio@freq+3,RADIO_SetChannelFrequency@frequency+3
 24436  0049DE  ECEB  F023         	call	_RADIO_SetChannelFrequency	;wreg free
 24437                           
 24438                           ; BSR set to: 0
 24439                           ;lorawan_eu.c: 867: RADIO_SetFrequencyHopPeriod (0);
 24440  0049E2  0E00               	movlw	0
 24441  0049E4  6B61               	clrf	(RADIO_SetFrequencyHopPeriod@frequencyHopPeriod+1)& (0+255),b
 24442  0049E6  6B60               	clrf	RADIO_SetFrequencyHopPeriod@frequencyHopPeriod& (0+255),b
 24443  0049E8  ECD2  F030         	call	_RADIO_SetFrequencyHopPeriod	;wreg free
 24444                           
 24445                           ; BSR set to: 0
 24446                           ;lorawan_eu.c: 869: if (dataRate <= 6)
 24447  0049EC  0E07               	movlw	7
 24448  0049EE  6171               	cpfslt	ConfigureRadio@dataRate& (0+255),b
 24449  0049F0  D012               	goto	l12476
 24450                           
 24451                           ; BSR set to: 0
 24452                           ;lorawan_eu.c: 870: {
 24453                           ;lorawan_eu.c: 872: RADIO_SetSpreadingFactor (spreadingFactor[dataRate]);
 24454  0049F2  0E94               	movlw	low _spreadingFactor
 24455  0049F4  2571               	addwf	ConfigureRadio@dataRate& (0+255),w,b
 24456  0049F6  6EF6               	movwf	tblptrl,c
 24457  0049F8  6AF7               	clrf	tblptrh,c
 24458  0049FA  0E7F               	movlw	high _spreadingFactor
 24459  0049FC  D818               	call	PL434	;call to abstracted procedure
 24460  0049FE  ECF1  F030         	call	_RADIO_SetSpreadingFactor
 24461                           
 24462                           ;lorawan_eu.c: 873: RADIO_SetBandwidth (bandwidth[dataRate]);
 24463  004A02  0E8D               	movlw	low _bandwidth
 24464  004A04  D80F               	call	PL426	;call to abstracted procedure
 24465  004A06  0E7F               	movlw	high _bandwidth
 24466  004A08  D812               	call	PL434	;call to abstracted procedure
 24467  004A0A  ECF9  F030         	call	_RADIO_SetBandwidth
 24468                           
 24469                           ;lorawan_eu.c: 874: RADIO_SetLoRaSyncWord(loRa.syncWord);
 24470  004A0E  0102               	movlb	2	; () banked
 24471  004A10  51F4               	movf	(_loRa+244)& (0+255),w,b
 24472  004A12  EFD7  F030         	goto	_RADIO_SetLoRaSyncWord
 24473  004A16                     l12476:
 24474                           
 24475                           ; BSR set to: 0
 24476                           ;lorawan_eu.c: 876: else
 24477                           ;lorawan_eu.c: 877: {
 24478                           ;lorawan_eu.c: 879: RADIO_SetFSKSyncWord(sizeof(FskSyncWordBuff) / sizeof(FskSyncWordBuf
      +                          f[0]), (uint8_t*)FskSyncWordBuff);
 24479  004A16  0EFC               	movlw	low _FskSyncWordBuff
 24480  004A18  6F6A               	movwf	RADIO_SetFSKSyncWord@syncWord& (0+255),b
 24481  004A1A  0E7F               	movlw	high _FskSyncWordBuff
 24482  004A1C  6F6B               	movwf	(RADIO_SetFSKSyncWord@syncWord+1)& (0+255),b
 24483  004A1E  0E03               	movlw	3
 24484  004A20  EF98  F02D         	goto	_RADIO_SetFSKSyncWord
 24485  004A24                     __end_of_ConfigureRadio:
 24486                           	opt stack 0
 24487  004A24                     PL426:
 24488                           	opt stack 17
 24489  004A24  0100               	movlb	0	; () banked
 24490  004A26  2571               	addwf	ConfigureRadio@dataRate& (0+255),w,b
 24491  004A28  6EF6               	movwf	tblptrl,c
 24492  004A2A  6AF7               	clrf	tblptrh,c
 24493  004A2C  0012               	return	
 24494  004A2E                     __end_ofPL426:
 24495                           	opt stack 0
 24496  004A2E                     PL434:
 24497                           	opt stack 17
 24498  004A2E  22F7               	addwfc	tblptrh,f,c
 24499  004A30                     	if	0	;There are less than 3 active tblptr bytes
 24500  004A30                     	endif
 24501  004A30  0008               	tblrd		*
 24502  004A32  50F5               	movf	tablat,w,c
 24503  004A34  0012               	return	
 24504  004A36                     __end_ofPL434:
 24505                           	opt stack 0
 24506                           tosu	equ	0xFFF
 24507                           tosh	equ	0xFFE
 24508                           tosl	equ	0xFFD
 24509                           pclath	equ	0xFFA
 24510                           tblptru	equ	0xFF8
 24511                           tblptrh	equ	0xFF7
 24512                           tblptrl	equ	0xFF6
 24513                           tablat	equ	0xFF5
 24514                           prodh	equ	0xFF4
 24515                           prodl	equ	0xFF3
 24516                           intcon	equ	0xFF2
 24517                           indf0	equ	0xFEF
 24518                           postinc0	equ	0xFEE
 24519                           plusw0	equ	0xFEB
 24520                           fsr0h	equ	0xFEA
 24521                           fsr0l	equ	0xFE9
 24522                           wreg	equ	0xFE8
 24523                           postinc1	equ	0xFE6
 24524                           postdec1	equ	0xFE5
 24525                           plusw1	equ	0xFE3
 24526                           fsr1h	equ	0xFE2
 24527                           fsr1l	equ	0xFE1
 24528                           indf2	equ	0xFDF
 24529                           postinc2	equ	0xFDE
 24530                           postdec2	equ	0xFDD
 24531                           plusw2	equ	0xFDB
 24532                           fsr2h	equ	0xFDA
 24533                           fsr2l	equ	0xFD9
 24534                           status	equ	0xFD8
 24535                           
 24536 ;; *************** function _RADIO_SetSpreadingFactor *****************
 24537 ;; Defined at:
 24538 ;;		line 1434 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24539 ;; Parameters:    Size  Location     Type
 24540 ;;  spreadingFac    1    wreg     enum E17158
 24541 ;; Auto vars:     Size  Location     Type
 24542 ;;  spreadingFac    1    0[BANK0 ] enum E17158
 24543 ;; Return value:  Size  Location     Type
 24544 ;;                  1    wreg      void 
 24545 ;; Registers used:
 24546 ;;		wreg
 24547 ;; Tracked objects:
 24548 ;;		On entry : 3F/0
 24549 ;;		On exit  : 0/0
 24550 ;;		Unchanged: 0/0
 24551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24552 ;;      Params:         0       0       0       0       0       0       0       0       0
 24553 ;;      Locals:         0       1       0       0       0       0       0       0       0
 24554 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24555 ;;      Totals:         0       1       0       0       0       0       0       0       0
 24556 ;;Total ram usage:        1 bytes
 24557 ;; Hardware stack levels used:    1
 24558 ;; Hardware stack levels required when called:    7
 24559 ;; This function calls:
 24560 ;;		Nothing
 24561 ;; This function is called by:
 24562 ;;		_ConfigureRadio
 24563 ;; This function uses a non-reentrant model
 24564 ;;
 24565                           
 24566                           	psect	text129
 24567  0061E2                     __ptext129:
 24568                           	opt stack 0
 24569  0061E2                     _RADIO_SetSpreadingFactor:
 24570                           	opt stack 18
 24571                           
 24572                           ;incstack = 0
 24573                           ;RADIO_SetSpreadingFactor@spreadingFactor stored from wreg
 24574  0061E2  6F60               	movwf	RADIO_SetSpreadingFactor@spreadingFactor& (0+255),b
 24575                           
 24576                           ;radio_driver_SX1276.c: 1436: RadioConfiguration.dataRate = spreadingFactor;
 24577  0061E4  C060  F198         	movff	RADIO_SetSpreadingFactor@spreadingFactor,_RadioConfiguration+25
 24578  0061E8  0012               	return		;funcret
 24579  0061EA                     __end_of_RADIO_SetSpreadingFactor:
 24580                           	opt stack 0
 24581                           tosu	equ	0xFFF
 24582                           tosh	equ	0xFFE
 24583                           tosl	equ	0xFFD
 24584                           pclath	equ	0xFFA
 24585                           tblptru	equ	0xFF8
 24586                           tblptrh	equ	0xFF7
 24587                           tblptrl	equ	0xFF6
 24588                           tablat	equ	0xFF5
 24589                           prodh	equ	0xFF4
 24590                           prodl	equ	0xFF3
 24591                           intcon	equ	0xFF2
 24592                           indf0	equ	0xFEF
 24593                           postinc0	equ	0xFEE
 24594                           plusw0	equ	0xFEB
 24595                           fsr0h	equ	0xFEA
 24596                           fsr0l	equ	0xFE9
 24597                           wreg	equ	0xFE8
 24598                           postinc1	equ	0xFE6
 24599                           postdec1	equ	0xFE5
 24600                           plusw1	equ	0xFE3
 24601                           fsr1h	equ	0xFE2
 24602                           fsr1l	equ	0xFE1
 24603                           indf2	equ	0xFDF
 24604                           postinc2	equ	0xFDE
 24605                           postdec2	equ	0xFDD
 24606                           plusw2	equ	0xFDB
 24607                           fsr2h	equ	0xFDA
 24608                           fsr2l	equ	0xFD9
 24609                           status	equ	0xFD8
 24610                           
 24611 ;; *************** function _RADIO_SetModulation *****************
 24612 ;; Defined at:
 24613 ;;		line 1515 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24614 ;; Parameters:    Size  Location     Type
 24615 ;;  modulation      1    wreg     enum E17148
 24616 ;; Auto vars:     Size  Location     Type
 24617 ;;  modulation      1    0[BANK0 ] enum E17148
 24618 ;; Return value:  Size  Location     Type
 24619 ;;                  1    wreg      void 
 24620 ;; Registers used:
 24621 ;;		wreg
 24622 ;; Tracked objects:
 24623 ;;		On entry : 3F/0
 24624 ;;		On exit  : 0/0
 24625 ;;		Unchanged: 0/0
 24626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24627 ;;      Params:         0       0       0       0       0       0       0       0       0
 24628 ;;      Locals:         0       1       0       0       0       0       0       0       0
 24629 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24630 ;;      Totals:         0       1       0       0       0       0       0       0       0
 24631 ;;Total ram usage:        1 bytes
 24632 ;; Hardware stack levels used:    1
 24633 ;; Hardware stack levels required when called:    7
 24634 ;; This function calls:
 24635 ;;		Nothing
 24636 ;; This function is called by:
 24637 ;;		_ConfigureRadio
 24638 ;; This function uses a non-reentrant model
 24639 ;;
 24640                           
 24641                           	psect	text130
 24642  0061EA                     __ptext130:
 24643                           	opt stack 0
 24644  0061EA                     _RADIO_SetModulation:
 24645                           	opt stack 18
 24646                           
 24647                           ;incstack = 0
 24648                           ;RADIO_SetModulation@modulation stored from wreg
 24649  0061EA  6F60               	movwf	RADIO_SetModulation@modulation& (0+255),b
 24650                           
 24651                           ;radio_driver_SX1276.c: 1517: RadioConfiguration.modulation = modulation;
 24652  0061EC  C060  F197         	movff	RADIO_SetModulation@modulation,_RadioConfiguration+24
 24653  0061F0  0012               	return		;funcret
 24654  0061F2                     __end_of_RADIO_SetModulation:
 24655                           	opt stack 0
 24656                           tosu	equ	0xFFF
 24657                           tosh	equ	0xFFE
 24658                           tosl	equ	0xFFD
 24659                           pclath	equ	0xFFA
 24660                           tblptru	equ	0xFF8
 24661                           tblptrh	equ	0xFF7
 24662                           tblptrl	equ	0xFF6
 24663                           tablat	equ	0xFF5
 24664                           prodh	equ	0xFF4
 24665                           prodl	equ	0xFF3
 24666                           intcon	equ	0xFF2
 24667                           indf0	equ	0xFEF
 24668                           postinc0	equ	0xFEE
 24669                           plusw0	equ	0xFEB
 24670                           fsr0h	equ	0xFEA
 24671                           fsr0l	equ	0xFE9
 24672                           wreg	equ	0xFE8
 24673                           postinc1	equ	0xFE6
 24674                           postdec1	equ	0xFE5
 24675                           plusw1	equ	0xFE3
 24676                           fsr1h	equ	0xFE2
 24677                           fsr1l	equ	0xFE1
 24678                           indf2	equ	0xFDF
 24679                           postinc2	equ	0xFDE
 24680                           postdec2	equ	0xFDD
 24681                           plusw2	equ	0xFDB
 24682                           fsr2h	equ	0xFDA
 24683                           fsr2l	equ	0xFD9
 24684                           status	equ	0xFD8
 24685                           
 24686 ;; *************** function _RADIO_SetFrequencyHopPeriod *****************
 24687 ;; Defined at:
 24688 ;;		line 1550 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24689 ;; Parameters:    Size  Location     Type
 24690 ;;  frequencyHop    2    0[BANK0 ] unsigned int 
 24691 ;; Auto vars:     Size  Location     Type
 24692 ;;		None
 24693 ;; Return value:  Size  Location     Type
 24694 ;;                  1    wreg      void 
 24695 ;; Registers used:
 24696 ;;		None
 24697 ;; Tracked objects:
 24698 ;;		On entry : 3F/0
 24699 ;;		On exit  : 3F/0
 24700 ;;		Unchanged: 3F/0
 24701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24702 ;;      Params:         0       2       0       0       0       0       0       0       0
 24703 ;;      Locals:         0       0       0       0       0       0       0       0       0
 24704 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24705 ;;      Totals:         0       2       0       0       0       0       0       0       0
 24706 ;;Total ram usage:        2 bytes
 24707 ;; Hardware stack levels used:    1
 24708 ;; Hardware stack levels required when called:    7
 24709 ;; This function calls:
 24710 ;;		Nothing
 24711 ;; This function is called by:
 24712 ;;		_ConfigureRadio
 24713 ;; This function uses a non-reentrant model
 24714 ;;
 24715                           
 24716                           	psect	text131
 24717  0061A4                     __ptext131:
 24718                           	opt stack 0
 24719  0061A4                     _RADIO_SetFrequencyHopPeriod:
 24720                           	opt stack 18
 24721                           
 24722                           ; BSR set to: 0
 24723                           ;radio_driver_SX1276.c: 1552: RadioConfiguration.frequencyHopPeriod = frequencyHopPeriod
      +                          ;
 24724                           
 24725                           ;incstack = 0
 24726  0061A4  C060  F19D         	movff	RADIO_SetFrequencyHopPeriod@frequencyHopPeriod,_RadioConfiguration+30
 24727  0061A8  C061  F19E         	movff	RADIO_SetFrequencyHopPeriod@frequencyHopPeriod+1,_RadioConfiguration+31
 24728                           
 24729                           ; BSR set to: 0
 24730  0061AC  0012               	return		;funcret
 24731  0061AE                     __end_of_RADIO_SetFrequencyHopPeriod:
 24732                           	opt stack 0
 24733                           tosu	equ	0xFFF
 24734                           tosh	equ	0xFFE
 24735                           tosl	equ	0xFFD
 24736                           pclath	equ	0xFFA
 24737                           tblptru	equ	0xFF8
 24738                           tblptrh	equ	0xFF7
 24739                           tblptrl	equ	0xFF6
 24740                           tablat	equ	0xFF5
 24741                           prodh	equ	0xFF4
 24742                           prodl	equ	0xFF3
 24743                           intcon	equ	0xFF2
 24744                           indf0	equ	0xFEF
 24745                           postinc0	equ	0xFEE
 24746                           plusw0	equ	0xFEB
 24747                           fsr0h	equ	0xFEA
 24748                           fsr0l	equ	0xFE9
 24749                           wreg	equ	0xFE8
 24750                           postinc1	equ	0xFE6
 24751                           postdec1	equ	0xFE5
 24752                           plusw1	equ	0xFE3
 24753                           fsr1h	equ	0xFE2
 24754                           fsr1l	equ	0xFE1
 24755                           indf2	equ	0xFDF
 24756                           postinc2	equ	0xFDE
 24757                           postdec2	equ	0xFDD
 24758                           plusw2	equ	0xFDB
 24759                           fsr2h	equ	0xFDA
 24760                           fsr2l	equ	0xFD9
 24761                           status	equ	0xFD8
 24762                           
 24763 ;; *************** function _RADIO_SetFSKSyncWord *****************
 24764 ;; Defined at:
 24765 ;;		line 1624 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24766 ;; Parameters:    Size  Location     Type
 24767 ;;  syncWordLen     1    wreg     unsigned char 
 24768 ;;  syncWord        2   10[BANK0 ] PTR unsigned char 
 24769 ;;		 -> FskSyncWordBuff(3), 
 24770 ;; Auto vars:     Size  Location     Type
 24771 ;;  syncWordLen     1   12[BANK0 ] unsigned char 
 24772 ;; Return value:  Size  Location     Type
 24773 ;;                  1    wreg      void 
 24774 ;; Registers used:
 24775 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24776 ;; Tracked objects:
 24777 ;;		On entry : 3F/0
 24778 ;;		On exit  : 3F/0
 24779 ;;		Unchanged: 0/0
 24780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24781 ;;      Params:         0       2       0       0       0       0       0       0       0
 24782 ;;      Locals:         0       1       0       0       0       0       0       0       0
 24783 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24784 ;;      Totals:         0       3       0       0       0       0       0       0       0
 24785 ;;Total ram usage:        3 bytes
 24786 ;; Hardware stack levels used:    1
 24787 ;; Hardware stack levels required when called:    8
 24788 ;; This function calls:
 24789 ;;		_memcpy
 24790 ;; This function is called by:
 24791 ;;		_ConfigureRadio
 24792 ;; This function uses a non-reentrant model
 24793 ;;
 24794                           
 24795                           	psect	text132
 24796  005B30                     __ptext132:
 24797                           	opt stack 0
 24798  005B30                     _RADIO_SetFSKSyncWord:
 24799                           	opt stack 17
 24800                           
 24801                           ; BSR set to: 0
 24802                           ;incstack = 0
 24803                           ;RADIO_SetFSKSyncWord@syncWordLen stored from wreg
 24804  005B30  6F6C               	movwf	RADIO_SetFSKSyncWord@syncWordLen& (0+255),b
 24805                           
 24806                           ;radio_driver_SX1276.c: 1626: if (syncWordLen > 8)
 24807  005B32  0E08               	movlw	8
 24808  005B34  0100               	movlb	0	; () banked
 24809  005B36  656C               	cpfsgt	RADIO_SetFSKSyncWord@syncWordLen& (0+255),b
 24810  005B38  D001               	goto	l12190
 24811                           
 24812                           ; BSR set to: 0
 24813                           ;radio_driver_SX1276.c: 1627: {
 24814                           ;radio_driver_SX1276.c: 1628: syncWordLen = 8;
 24815  005B3A  6F6C               	movwf	RADIO_SetFSKSyncWord@syncWordLen& (0+255),b
 24816  005B3C                     l12190:
 24817                           
 24818                           ; BSR set to: 0
 24819                           ;radio_driver_SX1276.c: 1629: }
 24820                           ;radio_driver_SX1276.c: 1630: memcpy(RadioConfiguration.syncWord, syncWord, syncWordLen)
      +                          ;
 24821  005B3C  0E8E               	movlw	low (_RadioConfiguration+15)
 24822  005B3E  6F60               	movwf	memcpy@d1& (0+255),b
 24823  005B40  0E01               	movlw	high (_RadioConfiguration+15)
 24824  005B42  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 24825  005B44  C06A  F062         	movff	RADIO_SetFSKSyncWord@syncWord,memcpy@s1
 24826  005B48  C06B  F063         	movff	RADIO_SetFSKSyncWord@syncWord+1,memcpy@s1+1
 24827  005B4C  C06C  F064         	movff	RADIO_SetFSKSyncWord@syncWordLen,memcpy@n
 24828  005B50  6B65               	clrf	(memcpy@n+1)& (0+255),b
 24829  005B52  EC94  F028         	call	_memcpy	;wreg free
 24830                           
 24831                           ; BSR set to: 0
 24832                           ;radio_driver_SX1276.c: 1631: RadioConfiguration.syncWordLen = syncWordLen;
 24833  005B56  C06C  F196         	movff	RADIO_SetFSKSyncWord@syncWordLen,_RadioConfiguration+23
 24834                           
 24835                           ; BSR set to: 0
 24836  005B5A  0012               	return		;funcret
 24837  005B5C                     __end_of_RADIO_SetFSKSyncWord:
 24838                           	opt stack 0
 24839                           tosu	equ	0xFFF
 24840                           tosh	equ	0xFFE
 24841                           tosl	equ	0xFFD
 24842                           pclath	equ	0xFFA
 24843                           tblptru	equ	0xFF8
 24844                           tblptrh	equ	0xFF7
 24845                           tblptrl	equ	0xFF6
 24846                           tablat	equ	0xFF5
 24847                           prodh	equ	0xFF4
 24848                           prodl	equ	0xFF3
 24849                           intcon	equ	0xFF2
 24850                           indf0	equ	0xFEF
 24851                           postinc0	equ	0xFEE
 24852                           plusw0	equ	0xFEB
 24853                           fsr0h	equ	0xFEA
 24854                           fsr0l	equ	0xFE9
 24855                           wreg	equ	0xFE8
 24856                           postinc1	equ	0xFE6
 24857                           postdec1	equ	0xFE5
 24858                           plusw1	equ	0xFE3
 24859                           fsr1h	equ	0xFE2
 24860                           fsr1l	equ	0xFE1
 24861                           indf2	equ	0xFDF
 24862                           postinc2	equ	0xFDE
 24863                           postdec2	equ	0xFDD
 24864                           plusw2	equ	0xFDB
 24865                           fsr2h	equ	0xFDA
 24866                           fsr2l	equ	0xFD9
 24867                           status	equ	0xFD8
 24868                           
 24869 ;; *************** function _RADIO_SetChannelFrequency *****************
 24870 ;; Defined at:
 24871 ;;		line 1444 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24872 ;; Parameters:    Size  Location     Type
 24873 ;;  frequency       4    0[BANK0 ] unsigned long 
 24874 ;; Auto vars:     Size  Location     Type
 24875 ;;		None
 24876 ;; Return value:  Size  Location     Type
 24877 ;;                  2    0[BANK0 ] enum E17954
 24878 ;; Registers used:
 24879 ;;		wreg, status,2, status,0
 24880 ;; Tracked objects:
 24881 ;;		On entry : 0/0
 24882 ;;		On exit  : 3F/0
 24883 ;;		Unchanged: 0/0
 24884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24885 ;;      Params:         0       4       0       0       0       0       0       0       0
 24886 ;;      Locals:         0       0       0       0       0       0       0       0       0
 24887 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24888 ;;      Totals:         0       4       0       0       0       0       0       0       0
 24889 ;;Total ram usage:        4 bytes
 24890 ;; Hardware stack levels used:    1
 24891 ;; Hardware stack levels required when called:    7
 24892 ;; This function calls:
 24893 ;;		Nothing
 24894 ;; This function is called by:
 24895 ;;		_ConfigureRadio
 24896 ;; This function uses a non-reentrant model
 24897 ;;
 24898                           
 24899                           	psect	text133
 24900  0047D6                     __ptext133:
 24901                           	opt stack 0
 24902  0047D6                     _RADIO_SetChannelFrequency:
 24903                           	opt stack 18
 24904                           
 24905                           ;radio_driver_SX1276.c: 1446: if ( (frequency >= 137000000) && (frequency <= 175000000) 
      +                          ||
 24906                           ;radio_driver_SX1276.c: 1447: (frequency >= 410000000) && (frequency <= 525000000) ||
 24907                           ;radio_driver_SX1276.c: 1448: (frequency >= 862000000) && (frequency <= 1020000000) )
 24908                           
 24909                           ; BSR set to: 0
 24910                           ;incstack = 0
 24911  0047D6  0E40               	movlw	64
 24912  0047D8  0100               	movlb	0	; () banked
 24913  0047DA  5D60               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 24914  0047DC  0E74               	movlw	116
 24915  0047DE  5961               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 24916  0047E0  0E2A               	movlw	42
 24917  0047E2  5962               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 24918  0047E4  0E08               	movlw	8
 24919  0047E6  5963               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 24920  0047E8  E309               	bnc	l12170
 24921                           
 24922                           ; BSR set to: 0
 24923  0047EA  0EC1               	movlw	193
 24924  0047EC  5D60               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 24925  0047EE  0E49               	movlw	73
 24926  0047F0  5961               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 24927  0047F2  0E6E               	movlw	110
 24928  0047F4  5962               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 24929  0047F6  0E0A               	movlw	10
 24930  0047F8  5963               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 24931  0047FA  E325               	bnc	l1927
 24932  0047FC                     l12170:
 24933                           
 24934                           ; BSR set to: 0
 24935  0047FC  0E80               	movlw	128
 24936  0047FE  5D60               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 24937  004800  0E1A               	movlw	26
 24938  004802  5961               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 24939  004804  0E70               	movlw	112
 24940  004806  5962               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 24941  004808  0E18               	movlw	24
 24942  00480A  5963               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 24943  00480C  E309               	bnc	l12174
 24944                           
 24945                           ; BSR set to: 0
 24946  00480E  0E41               	movlw	65
 24947  004810  5D60               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 24948  004812  0EDD               	movlw	221
 24949  004814  5961               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 24950  004816  0E4A               	movlw	74
 24951  004818  5962               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 24952  00481A  0E1F               	movlw	31
 24953  00481C  5963               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 24954  00481E  E313               	bnc	l1927
 24955  004820                     l12174:
 24956                           
 24957                           ; BSR set to: 0
 24958  004820  0E80               	movlw	128
 24959  004822  5D60               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 24960  004824  0E13               	movlw	19
 24961  004826  5961               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 24962  004828  0E61               	movlw	97
 24963  00482A  5962               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 24964  00482C  0E33               	movlw	51
 24965  00482E  5963               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 24966  004830  A0D8               	btfss	status,0,c
 24967  004832  0012               	return	
 24968                           
 24969                           ; BSR set to: 0
 24970  004834  0560               	decf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 24971  004836  0EF7               	movlw	247
 24972  004838  5961               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 24973  00483A  0ECB               	movlw	203
 24974  00483C  5962               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 24975  00483E  0E3C               	movlw	60
 24976  004840  5963               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 24977  004842  B0D8               	btfsc	status,0,c
 24978  004844  0012               	return	
 24979  004846                     l1927:
 24980                           
 24981                           ; BSR set to: 0
 24982                           ;radio_driver_SX1276.c: 1449: {
 24983                           ;radio_driver_SX1276.c: 1450: RadioConfiguration.frequency = frequency;
 24984  004846  C060  F17F         	movff	RADIO_SetChannelFrequency@frequency,_RadioConfiguration
 24985  00484A  C061  F180         	movff	RADIO_SetChannelFrequency@frequency+1,_RadioConfiguration+1
 24986  00484E  C062  F181         	movff	RADIO_SetChannelFrequency@frequency+2,_RadioConfiguration+2
 24987  004852  C063  F182         	movff	RADIO_SetChannelFrequency@frequency+3,_RadioConfiguration+3
 24988                           
 24989                           ; BSR set to: 0
 24990                           
 24991                           ;radio_driver_SX1276.c: 1451: return ERR_NONE;
 24992                           ;	Return value of _RADIO_SetChannelFrequency is never used
 24993  004856  0012               	return		;funcret
 24994  004858                     __end_of_RADIO_SetChannelFrequency:
 24995                           	opt stack 0
 24996                           tosu	equ	0xFFF
 24997                           tosh	equ	0xFFE
 24998                           tosl	equ	0xFFD
 24999                           pclath	equ	0xFFA
 25000                           tblptru	equ	0xFF8
 25001                           tblptrh	equ	0xFF7
 25002                           tblptrl	equ	0xFF6
 25003                           tablat	equ	0xFF5
 25004                           prodh	equ	0xFF4
 25005                           prodl	equ	0xFF3
 25006                           intcon	equ	0xFF2
 25007                           indf0	equ	0xFEF
 25008                           postinc0	equ	0xFEE
 25009                           plusw0	equ	0xFEB
 25010                           fsr0h	equ	0xFEA
 25011                           fsr0l	equ	0xFE9
 25012                           wreg	equ	0xFE8
 25013                           postinc1	equ	0xFE6
 25014                           postdec1	equ	0xFE5
 25015                           plusw1	equ	0xFE3
 25016                           fsr1h	equ	0xFE2
 25017                           fsr1l	equ	0xFE1
 25018                           indf2	equ	0xFDF
 25019                           postinc2	equ	0xFDE
 25020                           postdec2	equ	0xFDD
 25021                           plusw2	equ	0xFDB
 25022                           fsr2h	equ	0xFDA
 25023                           fsr2l	equ	0xFD9
 25024                           status	equ	0xFD8
 25025                           
 25026 ;; *************** function _RADIO_SetBandwidth *****************
 25027 ;; Defined at:
 25028 ;;		line 1495 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 25029 ;; Parameters:    Size  Location     Type
 25030 ;;  bandwidth       1    wreg     enum E17166
 25031 ;; Auto vars:     Size  Location     Type
 25032 ;;  bandwidth       1    0[BANK0 ] enum E17166
 25033 ;; Return value:  Size  Location     Type
 25034 ;;                  1    wreg      void 
 25035 ;; Registers used:
 25036 ;;		wreg
 25037 ;; Tracked objects:
 25038 ;;		On entry : 3F/0
 25039 ;;		On exit  : 0/0
 25040 ;;		Unchanged: 0/0
 25041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25042 ;;      Params:         0       0       0       0       0       0       0       0       0
 25043 ;;      Locals:         0       1       0       0       0       0       0       0       0
 25044 ;;      Temps:          0       0       0       0       0       0       0       0       0
 25045 ;;      Totals:         0       1       0       0       0       0       0       0       0
 25046 ;;Total ram usage:        1 bytes
 25047 ;; Hardware stack levels used:    1
 25048 ;; Hardware stack levels required when called:    7
 25049 ;; This function calls:
 25050 ;;		Nothing
 25051 ;; This function is called by:
 25052 ;;		_ConfigureRadio
 25053 ;; This function uses a non-reentrant model
 25054 ;;
 25055                           
 25056                           	psect	text134
 25057  0061F2                     __ptext134:
 25058                           	opt stack 0
 25059  0061F2                     _RADIO_SetBandwidth:
 25060                           	opt stack 18
 25061                           
 25062                           ; BSR set to: 0
 25063                           ;incstack = 0
 25064                           ;RADIO_SetBandwidth@bandwidth stored from wreg
 25065  0061F2  6F60               	movwf	RADIO_SetBandwidth@bandwidth& (0+255),b
 25066                           
 25067                           ;radio_driver_SX1276.c: 1497: RadioConfiguration.bandWidth = bandwidth;
 25068  0061F4  C060  F199         	movff	RADIO_SetBandwidth@bandwidth,_RadioConfiguration+26
 25069  0061F8  0012               	return		;funcret
 25070  0061FA                     __end_of_RADIO_SetBandwidth:
 25071                           	opt stack 0
 25072                           tosu	equ	0xFFF
 25073                           tosh	equ	0xFFE
 25074                           tosl	equ	0xFFD
 25075                           pclath	equ	0xFFA
 25076                           tblptru	equ	0xFF8
 25077                           tblptrh	equ	0xFF7
 25078                           tblptrl	equ	0xFF6
 25079                           tablat	equ	0xFF5
 25080                           prodh	equ	0xFF4
 25081                           prodl	equ	0xFF3
 25082                           intcon	equ	0xFF2
 25083                           indf0	equ	0xFEF
 25084                           postinc0	equ	0xFEE
 25085                           plusw0	equ	0xFEB
 25086                           fsr0h	equ	0xFEA
 25087                           fsr0l	equ	0xFE9
 25088                           wreg	equ	0xFE8
 25089                           postinc1	equ	0xFE6
 25090                           postdec1	equ	0xFE5
 25091                           plusw1	equ	0xFE3
 25092                           fsr1h	equ	0xFE2
 25093                           fsr1l	equ	0xFE1
 25094                           indf2	equ	0xFDF
 25095                           postinc2	equ	0xFDE
 25096                           postdec2	equ	0xFDD
 25097                           plusw2	equ	0xFDB
 25098                           fsr2h	equ	0xFDA
 25099                           fsr2l	equ	0xFD9
 25100                           status	equ	0xFD8
 25101                           
 25102 ;; *************** function _RADIO_Transmit *****************
 25103 ;; Defined at:
 25104 ;;		line 786 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 25105 ;; Parameters:    Size  Location     Type
 25106 ;;  buffer          2   70[BANK0 ] PTR unsigned char 
 25107 ;;		 -> macBuffer(271), 
 25108 ;;  bufferLen       1   72[BANK0 ] unsigned char 
 25109 ;; Auto vars:     Size  Location     Type
 25110 ;;  i               1   86[BANK0 ] unsigned char 
 25111 ;;  regValue        1   85[BANK0 ] unsigned char 
 25112 ;; Return value:  Size  Location     Type
 25113 ;;                  2   70[BANK0 ] enum E17895
 25114 ;; Registers used:
 25115 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25116 ;; Tracked objects:
 25117 ;;		On entry : 3F/0
 25118 ;;		On exit  : 3F/0
 25119 ;;		Unchanged: 0/0
 25120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25121 ;;      Params:         0       3       0       0       0       0       0       0       0
 25122 ;;      Locals:         0      10       0       0       0       0       0       0       0
 25123 ;;      Temps:          0       4       0       0       0       0       0       0       0
 25124 ;;      Totals:         0      17       0       0       0       0       0       0       0
 25125 ;;Total ram usage:       17 bytes
 25126 ;; Hardware stack levels used:    1
 25127 ;; Hardware stack levels required when called:   12
 25128 ;; This function calls:
 25129 ;;		_HALSPICSAssert
 25130 ;;		_HALSPICSDeassert
 25131 ;;		_HALSPISend
 25132 ;;		_RADIO_RegisterRead
 25133 ;;		_RADIO_RegisterWrite
 25134 ;;		_RADIO_WriteConfiguration
 25135 ;;		_RADIO_WriteMode
 25136 ;;		_SwTimerSetTimeout
 25137 ;;		_SwTimerStart
 25138 ;;		_SwTimerStop
 25139 ;;		___lldiv
 25140 ;; This function is called by:
 25141 ;;		_LORAWAN_Join
 25142 ;;		_LORAWAN_Send
 25143 ;;		_AckRetransmissionCallback
 25144 ;;		_UnconfirmedTransmissionCallback
 25145 ;;		_LORAWAN_RxTimeout
 25146 ;; This function uses a non-reentrant model
 25147 ;;
 25148                           
 25149                           	psect	text135
 25150  001D9C                     __ptext135:
 25151                           	opt stack 0
 25152  001D9C                     _RADIO_Transmit:
 25153                           	opt stack 16
 25154                           
 25155                           ; BSR set to: 0
 25156                           ;radio_driver_SX1276.c: 788: uint8_t regValue;
 25157                           ;radio_driver_SX1276.c: 789: uint8_t i;
 25158                           ;radio_driver_SX1276.c: 791: if ((RadioConfiguration.flags & (1 << (2))) != 0)
 25159                           
 25160                           ;incstack = 0
 25161  001D9C  0101               	movlb	1	; () banked
 25162  001D9E  A5A2               	btfss	(_RadioConfiguration+35)& (0+255),2,b
 25163  001DA0  D006               	goto	l13334
 25164                           
 25165                           ; BSR set to: 1
 25166                           ;radio_driver_SX1276.c: 792: {
 25167                           ;radio_driver_SX1276.c: 793: return ERR_BUFFER_LOCKED;
 25168  001DA2  0E80               	movlw	128
 25169  001DA4  0100               	movlb	0	; () banked
 25170  001DA6  6FA7               	movwf	(?_RADIO_Transmit+1)& (0+255),b
 25171  001DA8  0E03               	movlw	3
 25172  001DAA  6FA6               	movwf	?_RADIO_Transmit& (0+255),b
 25173  001DAC  0C03               	retlw	3
 25174  001DAE                     l13334:
 25175                           
 25176                           ; BSR set to: 1
 25177                           ;radio_driver_SX1276.c: 794: }
 25178                           ;radio_driver_SX1276.c: 796: if ((RadioConfiguration.flags & ((1 << (0)) | (1 << (1)))) 
      +                          != 0)
 25179  001DAE  C1A2  F0A9         	movff	_RadioConfiguration+35,??_RADIO_Transmit
 25180  001DB2  0E03               	movlw	3
 25181  001DB4  0100               	movlb	0	; () banked
 25182  001DB6  17A9               	andwf	??_RADIO_Transmit& (0+255),f,b
 25183  001DB8  E005               	bz	l13340
 25184                           
 25185                           ; BSR set to: 0
 25186                           ;radio_driver_SX1276.c: 797: {
 25187                           ;radio_driver_SX1276.c: 798: return ERR_RADIO_BUSY;
 25188  001DBA  0E80               	movlw	128
 25189  001DBC  6FA7               	movwf	(?_RADIO_Transmit+1)& (0+255),b
 25190  001DBE  0E04               	movlw	4
 25191  001DC0  6FA6               	movwf	?_RADIO_Transmit& (0+255),b
 25192  001DC2  0C04               	retlw	4
 25193  001DC4                     l13340:
 25194                           
 25195                           ; BSR set to: 0
 25196                           ;radio_driver_SX1276.c: 799: }
 25197                           ;radio_driver_SX1276.c: 801: if ((MODULATION_FSK == RadioConfiguration.modulation) && (b
      +                          ufferLen > 64))
 25198  001DC4  0101               	movlb	1	; () banked
 25199  001DC6  5197               	movf	(_RadioConfiguration+24)& (0+255),w,b
 25200  001DC8  E109               	bnz	l13348
 25201                           
 25202                           ; BSR set to: 1
 25203  001DCA  0E40               	movlw	64
 25204  001DCC  0100               	movlb	0	; () banked
 25205  001DCE  65A8               	cpfsgt	RADIO_Transmit@bufferLen& (0+255),b
 25206  001DD0  D005               	goto	l13348
 25207                           
 25208                           ; BSR set to: 0
 25209                           ;radio_driver_SX1276.c: 802: {
 25210                           ;radio_driver_SX1276.c: 803: return ERR_DATA_SIZE;
 25211  001DD2  0E80               	movlw	128
 25212  001DD4  6FA7               	movwf	(?_RADIO_Transmit+1)& (0+255),b
 25213  001DD6  0E02               	movlw	2
 25214  001DD8  6FA6               	movwf	?_RADIO_Transmit& (0+255),b
 25215  001DDA  0C02               	retlw	2
 25216  001DDC                     l13348:
 25217                           
 25218                           ;radio_driver_SX1276.c: 804: }
 25219                           ;radio_driver_SX1276.c: 806: SwTimerStop(RadioConfiguration.timeOnAirTimerId);
 25220  001DDC  0101               	movlb	1	; () banked
 25221  001DDE  51A6               	movf	(_RadioConfiguration+39)& (0+255),w,b
 25222  001DE0  EC68  F030         	call	_SwTimerStop
 25223                           
 25224                           ; BSR set to: 0
 25225                           ;radio_driver_SX1276.c: 810: RADIO_WriteConfiguration(4);
 25226  001DE4  D8CA               	call	PL418	;call to abstracted procedure
 25227  001DE6  ECB9  F006         	call	_RADIO_WriteConfiguration	;wreg free
 25228                           
 25229                           ;radio_driver_SX1276.c: 812: if (MODULATION_LORA == RadioConfiguration.modulation)
 25230  001DEA  0101               	movlb	1	; () banked
 25231  001DEC  0597               	decf	(_RadioConfiguration+24)& (0+255),w,b
 25232  001DEE  E11D               	bnz	l13368
 25233                           
 25234                           ; BSR set to: 1
 25235                           ;radio_driver_SX1276.c: 813: {
 25236                           ;radio_driver_SX1276.c: 814: RADIO_RegisterWrite(0x22, bufferLen);
 25237  001DF0  C0A8  F062         	movff	RADIO_Transmit@bufferLen,RADIO_RegisterWrite@value
 25238  001DF4  0E22               	movlw	34
 25239  001DF6  EC31  F02F         	call	_RADIO_RegisterWrite
 25240                           
 25241                           ;radio_driver_SX1276.c: 817: regValue = RADIO_RegisterRead(0x0A);
 25242  001DFA  0E0A               	movlw	10
 25243  001DFC  EC64  F02E         	call	_RADIO_RegisterRead
 25244  001E00  6FB5               	movwf	RADIO_Transmit@regValue& (0+255),b
 25245                           
 25246                           ; BSR set to: 0
 25247                           ;radio_driver_SX1276.c: 818: regValue &= ~0x0F;
 25248  001E02  0EF0               	movlw	240
 25249  001E04  17B5               	andwf	RADIO_Transmit@regValue& (0+255),f,b
 25250                           
 25251                           ; BSR set to: 0
 25252                           ;radio_driver_SX1276.c: 819: regValue |= 0x08;
 25253  001E06  87B5               	bsf	RADIO_Transmit@regValue& (0+255),3,b
 25254                           
 25255                           ; BSR set to: 0
 25256                           ;radio_driver_SX1276.c: 820: RADIO_RegisterWrite(0x0A, regValue);
 25257  001E08  C0B5  F062         	movff	RADIO_Transmit@regValue,RADIO_RegisterWrite@value
 25258  001E0C  0E0A               	movlw	10
 25259  001E0E  EC31  F02F         	call	_RADIO_RegisterWrite
 25260                           
 25261                           ;radio_driver_SX1276.c: 824: RADIO_RegisterWrite(0x40, 0x40);
 25262  001E12  0E40               	movlw	64
 25263  001E14  0100               	movlb	0	; () banked
 25264  001E16  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 25265  001E18  EC31  F02F         	call	_RADIO_RegisterWrite
 25266                           
 25267                           ;radio_driver_SX1276.c: 825: RADIO_RegisterWrite(0x41, 0x00);
 25268  001E1C  D8AB               	call	PL376	;call to abstracted procedure
 25269  001E1E  EC31  F02F         	call	_RADIO_RegisterWrite
 25270                           
 25271                           ;radio_driver_SX1276.c: 827: RADIO_WriteMode(MODE_STANDBY, RadioConfiguration.modulation
      +                          , 1);
 25272  001E22  D8A2               	call	PL346	;call to abstracted procedure
 25273  001E24  ECDB  F01A         	call	_RADIO_WriteMode
 25274                           
 25275                           ;radio_driver_SX1276.c: 828: }
 25276  001E28  D007               	goto	l13370
 25277  001E2A                     l13368:
 25278                           
 25279                           ; BSR set to: 1
 25280                           ;radio_driver_SX1276.c: 829: else
 25281                           ;radio_driver_SX1276.c: 830: {
 25282                           ;radio_driver_SX1276.c: 832: RADIO_RegisterWrite(0x40, 0x00);
 25283  001E2A  EC90  F011         	call	PL430	;call to abstracted procedure
 25284  001E2E  EC31  F02F         	call	_RADIO_RegisterWrite
 25285                           
 25286                           ;radio_driver_SX1276.c: 833: RADIO_RegisterWrite(0x41, 0x00);
 25287  001E32  D8A0               	call	PL376	;call to abstracted procedure
 25288  001E34  EC31  F02F         	call	_RADIO_RegisterWrite
 25289  001E38                     l13370:
 25290                           
 25291                           ;radio_driver_SX1276.c: 834: }
 25292                           ;radio_driver_SX1276.c: 836: if (MODULATION_FSK == RadioConfiguration.modulation)
 25293  001E38  0101               	movlb	1	; () banked
 25294  001E3A  5197               	movf	(_RadioConfiguration+24)& (0+255),w,b
 25295  001E3C  E105               	bnz	l13374
 25296                           
 25297                           ; BSR set to: 1
 25298                           ;radio_driver_SX1276.c: 837: {
 25299                           ;radio_driver_SX1276.c: 839: RADIO_RegisterWrite(0x00, bufferLen);
 25300  001E3E  C0A8  F062         	movff	RADIO_Transmit@bufferLen,RADIO_RegisterWrite@value
 25301  001E42  0E00               	movlw	0
 25302  001E44  EC31  F02F         	call	_RADIO_RegisterWrite
 25303  001E48                     l13374:
 25304                           
 25305                           ;radio_driver_SX1276.c: 840: }
 25306                           ;radio_driver_SX1276.c: 842: HALSPICSAssert();
 25307  001E48  EC24  F031         	call	_HALSPICSAssert	;wreg free
 25308                           
 25309                           ;radio_driver_SX1276.c: 843: HALSPISend(0x80 | 0x00);
 25310  001E4C  0E80               	movlw	128
 25311  001E4E  ECDC  F030         	call	_HALSPISend
 25312                           
 25313                           ; BSR set to: 14
 25314                           ;radio_driver_SX1276.c: 845: for (i = 0; i < bufferLen; i++)
 25315  001E52  0100               	movlb	0	; () banked
 25316  001E54  6BB6               	clrf	RADIO_Transmit@i& (0+255),b
 25317  001E56  D00B               	goto	l13384
 25318  001E58                     l13380:
 25319                           
 25320                           ; BSR set to: 0
 25321                           ;radio_driver_SX1276.c: 846: {
 25322                           ;radio_driver_SX1276.c: 847: HALSPISend(buffer[i]);
 25323  001E58  51B6               	movf	RADIO_Transmit@i& (0+255),w,b
 25324  001E5A  25A6               	addwf	RADIO_Transmit@buffer& (0+255),w,b
 25325  001E5C  6ED9               	movwf	fsr2l,c
 25326  001E5E  0E00               	movlw	0
 25327  001E60  21A7               	addwfc	(RADIO_Transmit@buffer+1)& (0+255),w,b
 25328  001E62  6EDA               	movwf	fsr2h,c
 25329  001E64  50DF               	movf	indf2,w,c
 25330  001E66  ECDC  F030         	call	_HALSPISend
 25331                           
 25332                           ; BSR set to: 14
 25333  001E6A  0100               	movlb	0	; () banked
 25334  001E6C  2BB6               	incf	RADIO_Transmit@i& (0+255),f,b
 25335  001E6E                     l13384:
 25336                           
 25337                           ; BSR set to: 0
 25338  001E6E  51A8               	movf	RADIO_Transmit@bufferLen& (0+255),w,b
 25339  001E70  5DB6               	subwf	RADIO_Transmit@i& (0+255),w,b
 25340  001E72  E3F2               	bnc	l13380
 25341                           
 25342                           ; BSR set to: 0
 25343                           ;radio_driver_SX1276.c: 848: }
 25344                           ;radio_driver_SX1276.c: 849: HALSPICSDeassert();
 25345  001E74  EC22  F031         	call	_HALSPICSDeassert	;wreg free
 25346                           
 25347                           ;radio_driver_SX1276.c: 851: RadioConfiguration.flags |= (1 << (0));
 25348  001E78  0101               	movlb	1	; () banked
 25349  001E7A  81A2               	bsf	(_RadioConfiguration+35)& (0+255),0,b
 25350                           
 25351                           ; BSR set to: 1
 25352                           ;radio_driver_SX1276.c: 852: RadioConfiguration.flags &= ~((1 << (4)) | (1 << (3)));
 25353  001E7C  0EE7               	movlw	231
 25354  001E7E  17A2               	andwf	(_RadioConfiguration+35)& (0+255),f,b
 25355                           
 25356                           ; BSR set to: 1
 25357                           ;radio_driver_SX1276.c: 857: RADIO_WriteMode(MODE_TX, RadioConfiguration.modulation, 0);
 25358  001E80  EC66  F02D         	call	PL78	;call to abstracted procedure
 25359  001E84  0E03               	movlw	3
 25360  001E86  ECDB  F01A         	call	_RADIO_WriteMode
 25361                           
 25362                           ;radio_driver_SX1276.c: 862: SwTimerSetTimeout(RadioConfiguration.timeOnAirTimerId, ((((
      +                          uint32_t)20000)) < 0x000FFFFFUL ? ( (((uint32_t)(((uint32_t)20000))) << (12)) / 125UL ) 
      +                          : ( (((uint32_t)(((uint32_t)20000))) / 125UL) << (12) ) ));
 25363  001E8A  0100               	movlb	0	; () banked
 25364  001E8C  6B6D               	clrf	SwTimerSetTimeout@timeout& (0+255),b
 25365  001E8E  6B6E               	clrf	(SwTimerSetTimeout@timeout+1)& (0+255),b
 25366  001E90  0E0A               	movlw	10
 25367  001E92  6F6F               	movwf	(SwTimerSetTimeout@timeout+2)& (0+255),b
 25368  001E94  6B70               	clrf	(SwTimerSetTimeout@timeout+3)& (0+255),b
 25369  001E96  0101               	movlb	1	; () banked
 25370  001E98  51A6               	movf	(_RadioConfiguration+39)& (0+255),w,b
 25371  001E9A  EC11  F02C         	call	_SwTimerSetTimeout
 25372                           
 25373                           ; BSR set to: 0
 25374                           ;radio_driver_SX1276.c: 863: SwTimerStart(RadioConfiguration.timeOnAirTimerId);
 25375  001E9E  0101               	movlb	1	; () banked
 25376  001EA0  51A6               	movf	(_RadioConfiguration+39)& (0+255),w,b
 25377  001EA2  ECC4  F025         	call	_SwTimerStart
 25378                           
 25379                           ; BSR set to: 0
 25380                           ;radio_driver_SX1276.c: 865: if (0 != RadioConfiguration.watchdogTimerTimeout)
 25381  001EA6  D85A               	call	PL342	;call to abstracted procedure
 25382  001EA8  E045               	bz	l13414
 25383                           
 25384                           ; BSR set to: 1
 25385                           ;radio_driver_SX1276.c: 866: {
 25386                           ;radio_driver_SX1276.c: 867: SwTimerSetTimeout(RadioConfiguration.watchdogTimerId, ((Rad
      +                          ioConfiguration.watchdogTimerTimeout) < 0x000FFFFFUL ? ( (((uint32_t)(RadioConfiguration
      +                          .watchdogTimerTimeout)) << (12)) / 125UL ) : ( (((uint32_t)(RadioConfiguration.watchdogT
      +                          imerTimeout)) /
 25387  001EAA  51AC               	movf	(_RadioConfiguration+45)& (0+255),w,b
 25388  001EAC  E102               	bnz	u14820
 25389  001EAE  D850               	call	PL334	;call to abstracted procedure
 25390  001EB0  E30B               	bnc	l13408
 25391  001EB2                     u14820:
 25392                           
 25393                           ; BSR set to: 1
 25394  001EB2  D844               	call	PL114	;call to abstracted procedure
 25395  001EB4  EC77  F011         	call	PL32	;call to abstracted procedure
 25396  001EB8  EC1B  F025         	call	___lldiv	;wreg free
 25397  001EBC  0E0C               	movlw	12
 25398  001EBE                     u14835:
 25399  001EBE  EC85  F011         	call	PL172	;call to abstracted procedure
 25400  001EC2  2EE8               	decfsz	wreg,f,c
 25401  001EC4  D7FC               	goto	u14835
 25402  001EC6  D01E               	goto	L18
 25403  001EC8                     l13408:
 25404                           
 25405                           ; BSR set to: 1
 25406  001EC8  C1A9  F0A9         	movff	_RadioConfiguration+42,??_RADIO_Transmit
 25407  001ECC  C1AA  F0AA         	movff	_RadioConfiguration+43,??_RADIO_Transmit+1
 25408  001ED0  C1AB  F0AB         	movff	_RadioConfiguration+44,??_RADIO_Transmit+2
 25409  001ED4  C1AC  F0AC         	movff	_RadioConfiguration+45,??_RADIO_Transmit+3
 25410  001ED8  0E0C               	movlw	12
 25411  001EDA                     u14845:
 25412  001EDA  90D8               	bcf	status,0,c
 25413  001EDC  0100               	movlb	0	; () banked
 25414  001EDE  37A9               	rlcf	??_RADIO_Transmit& (0+255),f,b
 25415  001EE0  37AA               	rlcf	(??_RADIO_Transmit+1)& (0+255),f,b
 25416  001EE2  37AB               	rlcf	(??_RADIO_Transmit+2)& (0+255),f,b
 25417  001EE4  37AC               	rlcf	(??_RADIO_Transmit+3)& (0+255),f,b
 25418  001EE6  2EE8               	decfsz	wreg,f,c
 25419  001EE8  D7F8               	goto	u14845
 25420  001EEA  C0A9  F060         	movff	??_RADIO_Transmit,___lldiv@dividend
 25421  001EEE  C0AA  F061         	movff	??_RADIO_Transmit+1,___lldiv@dividend+1
 25422  001EF2  C0AB  F062         	movff	??_RADIO_Transmit+2,___lldiv@dividend+2
 25423  001EF6  C0AC  F063         	movff	??_RADIO_Transmit+3,___lldiv@dividend+3
 25424  001EFA  0E7D               	movlw	125
 25425  001EFC  EC77  F011         	call	PL32	;call to abstracted procedure
 25426  001F00  EC1B  F025         	call	___lldiv	;wreg free
 25427  001F04                     L18:
 25428  001F04  C060  F0B1         	movff	?___lldiv,_RADIO_Transmit$2488
 25429  001F08  C061  F0B2         	movff	?___lldiv+1,_RADIO_Transmit$2488+1
 25430  001F0C  C062  F0B3         	movff	?___lldiv+2,_RADIO_Transmit$2488+2
 25431  001F10  C063  F0B4         	movff	?___lldiv+3,_RADIO_Transmit$2488+3
 25432                           
 25433                           ; BSR set to: 0
 25434  001F14  C0B1  F06D         	movff	_RADIO_Transmit$2488,SwTimerSetTimeout@timeout
 25435  001F18  C0B2  F06E         	movff	_RADIO_Transmit$2488+1,SwTimerSetTimeout@timeout+1
 25436  001F1C  C0B3  F06F         	movff	_RADIO_Transmit$2488+2,SwTimerSetTimeout@timeout+2
 25437  001F20  C0B4  F070         	movff	_RADIO_Transmit$2488+3,SwTimerSetTimeout@timeout+3
 25438  001F24  0101               	movlb	1	; () banked
 25439  001F26  51A8               	movf	(_RadioConfiguration+41)& (0+255),w,b
 25440  001F28  EC11  F02C         	call	_SwTimerSetTimeout
 25441                           
 25442                           ; BSR set to: 0
 25443                           ;radio_driver_SX1276.c: 868: SwTimerStart(RadioConfiguration.watchdogTimerId);
 25444  001F2C  0101               	movlb	1	; () banked
 25445  001F2E  51A8               	movf	(_RadioConfiguration+41)& (0+255),w,b
 25446  001F30  ECC4  F025         	call	_SwTimerStart
 25447  001F34                     l13414:
 25448                           
 25449                           ;radio_driver_SX1276.c: 869: }
 25450                           ;radio_driver_SX1276.c: 871: return ERR_NONE;
 25451  001F34  0100               	movlb	0	; () banked
 25452  001F36  6BA6               	clrf	?_RADIO_Transmit& (0+255),b
 25453  001F38  6BA7               	clrf	(?_RADIO_Transmit+1)& (0+255),b
 25454                           
 25455                           ; BSR set to: 0
 25456  001F3A  0012               	return		;funcret
 25457  001F3C                     __end_of_RADIO_Transmit:
 25458                           	opt stack 0
 25459  001F3C                     PL114:
 25460                           	opt stack 13
 25461  001F3C  C1A9  F060         	movff	_RadioConfiguration+42,___lldiv@dividend
 25462  001F40  C1AA  F061         	movff	_RadioConfiguration+43,___lldiv@dividend+1
 25463  001F44  C1AB  F062         	movff	_RadioConfiguration+44,___lldiv@dividend+2
 25464  001F48  C1AC  F063         	movff	_RadioConfiguration+45,___lldiv@dividend+3
 25465  001F4C  0100               	movlb	0	; () banked
 25466  001F4E  0C7D               	retlw	125
 25467  001F50                     __end_ofPL114:
 25468                           	opt stack 0
 25469  001F50                     PL334:
 25470                           	opt stack 13
 25471  001F50  29A9               	incf	(_RadioConfiguration+42)& (0+255),w,b
 25472  001F52  0EFF               	movlw	255
 25473  001F54  59AA               	subwfb	(_RadioConfiguration+43)& (0+255),w,b
 25474  001F56  0E0F               	movlw	15
 25475  001F58  59AB               	subwfb	(_RadioConfiguration+44)& (0+255),w,b
 25476  001F5A  0012               	return	
 25477  001F5C                     __end_ofPL334:
 25478                           	opt stack 0
 25479  001F5C                     PL342:
 25480                           	opt stack 13
 25481  001F5C  0101               	movlb	1	; () banked
 25482  001F5E  51A9               	movf	(_RadioConfiguration+42)& (0+255),w,b
 25483  001F60  11AA               	iorwf	(_RadioConfiguration+43)& (0+255),w,b
 25484  001F62  11AB               	iorwf	(_RadioConfiguration+44)& (0+255),w,b
 25485  001F64  11AC               	iorwf	(_RadioConfiguration+45)& (0+255),w,b
 25486  001F66  0012               	return	
 25487  001F68                     __end_ofPL342:
 25488                           	opt stack 0
 25489  001F68                     PL346:
 25490                           	opt stack 12
 25491  001F68  C197  F065         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 25492  001F6C  0E01               	movlw	1
 25493  001F6E  0100               	movlb	0	; () banked
 25494  001F70  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 25495  001F72  0C01               	retlw	1
 25496  001F74                     __end_ofPL346:
 25497                           	opt stack 0
 25498  001F74                     PL376:
 25499                           	opt stack 13
 25500  001F74  0100               	movlb	0	; () banked
 25501  001F76  6B62               	clrf	RADIO_RegisterWrite@value& (0+255),b
 25502  001F78  0C41               	retlw	65
 25503  001F7A                     __end_ofPL376:
 25504                           	opt stack 0
 25505  001F7A                     PL418:
 25506                           	opt stack 13
 25507  001F7A  0E00               	movlw	0
 25508  001F7C  6F9D               	movwf	(RADIO_WriteConfiguration@symbolTimeout+1)& (0+255),b
 25509  001F7E  0E04               	movlw	4
 25510  001F80  6F9C               	movwf	RADIO_WriteConfiguration@symbolTimeout& (0+255),b
 25511  001F82  0C04               	retlw	4
 25512  001F84                     __end_ofPL418:
 25513                           	opt stack 0
 25514                           tosu	equ	0xFFF
 25515                           tosh	equ	0xFFE
 25516                           tosl	equ	0xFFD
 25517                           pclath	equ	0xFFA
 25518                           tblptru	equ	0xFF8
 25519                           tblptrh	equ	0xFF7
 25520                           tblptrl	equ	0xFF6
 25521                           tablat	equ	0xFF5
 25522                           prodh	equ	0xFF4
 25523                           prodl	equ	0xFF3
 25524                           intcon	equ	0xFF2
 25525                           indf0	equ	0xFEF
 25526                           postinc0	equ	0xFEE
 25527                           plusw0	equ	0xFEB
 25528                           fsr0h	equ	0xFEA
 25529                           fsr0l	equ	0xFE9
 25530                           wreg	equ	0xFE8
 25531                           postinc1	equ	0xFE6
 25532                           postdec1	equ	0xFE5
 25533                           plusw1	equ	0xFE3
 25534                           fsr1h	equ	0xFE2
 25535                           fsr1l	equ	0xFE1
 25536                           indf2	equ	0xFDF
 25537                           postinc2	equ	0xFDE
 25538                           postdec2	equ	0xFDD
 25539                           plusw2	equ	0xFDB
 25540                           fsr2h	equ	0xFDA
 25541                           fsr2l	equ	0xFD9
 25542                           status	equ	0xFD8
 25543                           
 25544 ;; *************** function _RADIO_WriteConfiguration *****************
 25545 ;; Defined at:
 25546 ;;		line 533 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 25547 ;; Parameters:    Size  Location     Type
 25548 ;;  symbolTimeou    2   60[BANK0 ] unsigned int 
 25549 ;; Auto vars:     Size  Location     Type
 25550 ;;  tempValue       4   65[BANK0 ] unsigned long 
 25551 ;;  regValue        1   69[BANK0 ] unsigned char 
 25552 ;;  i               1   64[BANK0 ] unsigned char 
 25553 ;; Return value:  Size  Location     Type
 25554 ;;                  1    wreg      void 
 25555 ;; Registers used:
 25556 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25557 ;; Tracked objects:
 25558 ;;		On entry : 3F/0
 25559 ;;		On exit  : 31/0
 25560 ;;		Unchanged: 0/0
 25561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25562 ;;      Params:         0       2       0       0       0       0       0       0       0
 25563 ;;      Locals:         0       6       0       0       0       0       0       0       0
 25564 ;;      Temps:          0       2       0       0       0       0       0       0       0
 25565 ;;      Totals:         0      10       0       0       0       0       0       0       0
 25566 ;;Total ram usage:       10 bytes
 25567 ;; Hardware stack levels used:    1
 25568 ;; Hardware stack levels required when called:   11
 25569 ;; This function calls:
 25570 ;;		_RADIO_RegisterRead
 25571 ;;		_RADIO_RegisterWrite
 25572 ;;		_RADIO_WriteFSKBitRate
 25573 ;;		_RADIO_WriteFSKFrequencyDeviation
 25574 ;;		_RADIO_WriteFrequency
 25575 ;;		_RADIO_WriteMode
 25576 ;;		_RADIO_WritePower
 25577 ;;		___lmul
 25578 ;; This function is called by:
 25579 ;;		_RADIO_Transmit
 25580 ;;		_RADIO_ReceiveStart
 25581 ;; This function uses a non-reentrant model
 25582 ;;
 25583                           
 25584                           	psect	text136
 25585  000D72                     __ptext136:
 25586                           	opt stack 0
 25587  000D72                     _RADIO_WriteConfiguration:
 25588                           	opt stack 0
 25589                           
 25590                           ; BSR set to: 0
 25591                           ;radio_driver_SX1276.c: 535: uint32_t tempValue;
 25592                           ;radio_driver_SX1276.c: 536: uint8_t regValue;
 25593                           ;radio_driver_SX1276.c: 537: uint8_t i;
 25594                           ;radio_driver_SX1276.c: 540: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation, 
      +                          0);
 25595                           
 25596                           ; BSR set to: 0
 25597                           ;incstack = 0
 25598  000D72  EC77  F019         	call	PL248	;call to abstracted procedure
 25599  000D76  ECDB  F01A         	call	_RADIO_WriteMode
 25600                           
 25601                           ;radio_driver_SX1276.c: 541: RADIO_WriteFrequency(RadioConfiguration.frequency);
 25602  000D7A  EC56  F012         	call	PL224	;call to abstracted procedure
 25603  000D7E  ECB4  F01B         	call	_RADIO_WriteFrequency	;wreg free
 25604                           
 25605                           ;radio_driver_SX1276.c: 542: RADIO_WritePower(RadioConfiguration.outputPower);
 25606  000D82  0101               	movlb	1	; () banked
 25607  000D84  519A               	movf	(_RadioConfiguration+27)& (0+255),w,b
 25608  000D86  EC8C  F01C         	call	_RADIO_WritePower
 25609                           
 25610                           ;radio_driver_SX1276.c: 544: if (MODULATION_LORA == RadioConfiguration.modulation)
 25611  000D8A  0101               	movlb	1	; () banked
 25612  000D8C  0597               	decf	(_RadioConfiguration+24)& (0+255),w,b
 25613  000D8E  E001 D16B          	bnz	l12690
 25614                           
 25615                           ; BSR set to: 1
 25616                           ;radio_driver_SX1276.c: 545: {
 25617                           ;radio_driver_SX1276.c: 546: RADIO_RegisterWrite(0x39, RadioConfiguration.syncWordLoRa);
 25618  000D92  C18D  F062         	movff	_RadioConfiguration+14,RADIO_RegisterWrite@value
 25619  000D96  0E39               	movlw	57
 25620  000D98  EC31  F02F         	call	_RADIO_RegisterWrite
 25621                           
 25622                           ;radio_driver_SX1276.c: 548: RADIO_RegisterWrite(0x1D,
 25623                           ;radio_driver_SX1276.c: 549: (RadioConfiguration.bandWidth << (4)) |
 25624                           ;radio_driver_SX1276.c: 550: (RadioConfiguration.errorCodingRate << (1)) |
 25625                           ;radio_driver_SX1276.c: 551: (RadioConfiguration.implicitHeaderMode & 0x01));
 25626  000D9C  C1A1  F09E         	movff	_RadioConfiguration+34,??_RADIO_WriteConfiguration
 25627  000DA0  0E01               	movlw	1
 25628  000DA2  0100               	movlb	0	; () banked
 25629  000DA4  179E               	andwf	??_RADIO_WriteConfiguration& (0+255),f,b
 25630  000DA6  0101               	movlb	1	; () banked
 25631  000DA8  90D8               	bcf	status,0,c
 25632  000DAA  35A0               	rlcf	(_RadioConfiguration+33)& (0+255),w,b
 25633  000DAC  0100               	movlb	0	; () banked
 25634  000DAE  6F9F               	movwf	(??_RADIO_WriteConfiguration+1)& (0+255),b
 25635  000DB0  0101               	movlb	1	; () banked
 25636  000DB2  3999               	swapf	(_RadioConfiguration+26)& (0+255),w,b
 25637  000DB4  D9CB               	call	PL338	;call to abstracted procedure
 25638  000DB6  0E1D               	movlw	29
 25639  000DB8  EC31  F02F         	call	_RADIO_RegisterWrite
 25640                           
 25641                           ;radio_driver_SX1276.c: 553: RADIO_RegisterWrite(0x1E,
 25642                           ;radio_driver_SX1276.c: 554: (RadioConfiguration.dataRate << (4)) |
 25643                           ;radio_driver_SX1276.c: 555: ((RadioConfiguration.crcOn & 0x01) << (2)) |
 25644                           ;radio_driver_SX1276.c: 556: ((symbolTimeout & 0x0300) >> (8)));
 25645  000DBC  C09D  F09E         	movff	RADIO_WriteConfiguration@symbolTimeout+1,??_RADIO_WriteConfiguration
 25646  000DC0  0E03               	movlw	3
 25647  000DC2  0100               	movlb	0	; () banked
 25648  000DC4  179E               	andwf	??_RADIO_WriteConfiguration& (0+255),f,b
 25649  000DC6  C19B  F09F         	movff	_RadioConfiguration+28,??_RADIO_WriteConfiguration+1
 25650  000DCA  0E01               	movlw	1
 25651  000DCC  179F               	andwf	(??_RADIO_WriteConfiguration+1)& (0+255),f,b
 25652  000DCE  90D8               	bcf	status,0,c
 25653  000DD0  379F               	rlcf	(??_RADIO_WriteConfiguration+1)& (0+255),f,b
 25654  000DD2  90D8               	bcf	status,0,c
 25655  000DD4  379F               	rlcf	(??_RADIO_WriteConfiguration+1)& (0+255),f,b
 25656  000DD6  0101               	movlb	1	; () banked
 25657  000DD8  3998               	swapf	(_RadioConfiguration+25)& (0+255),w,b
 25658  000DDA  D9B8               	call	PL338	;call to abstracted procedure
 25659  000DDC  0E1E               	movlw	30
 25660  000DDE  EC31  F02F         	call	_RADIO_RegisterWrite
 25661                           
 25662                           ;radio_driver_SX1276.c: 560: if (0 != RadioConfiguration.frequencyHopPeriod)
 25663  000DE2  0101               	movlb	1	; () banked
 25664  000DE4  519D               	movf	(_RadioConfiguration+30)& (0+255),w,b
 25665  000DE6  119E               	iorwf	(_RadioConfiguration+31)& (0+255),w,b
 25666  000DE8  E041               	bz	l1684
 25667                           
 25668                           ; BSR set to: 1
 25669                           ;radio_driver_SX1276.c: 561: {
 25670                           ;radio_driver_SX1276.c: 562: tempValue = RadioConfiguration.frequencyHopPeriod;
 25671  000DEA  C19D  F0A1         	movff	_RadioConfiguration+30,RADIO_WriteConfiguration@tempValue
 25672  000DEE  C19E  F0A2         	movff	_RadioConfiguration+31,RADIO_WriteConfiguration@tempValue+1
 25673  000DF2  0100               	movlb	0	; () banked
 25674  000DF4  6BA3               	clrf	(RADIO_WriteConfiguration@tempValue+2)& (0+255),b
 25675  000DF6  6BA4               	clrf	(RADIO_WriteConfiguration@tempValue+3)& (0+255),b
 25676                           
 25677                           ;radio_driver_SX1276.c: 564: switch (RadioConfiguration.bandWidth)
 25678  000DF8  D023               	goto	l12582
 25679  000DFA                     l12574:
 25680                           
 25681                           ; BSR set to: 1
 25682                           ;radio_driver_SX1276.c: 567: tempValue *= 125;
 25683  000DFA  D99F               	call	PL122	;call to abstracted procedure
 25684  000DFC  0E7D               	movlw	125
 25685  000DFE  0100               	movlb	0	; () banked
 25686  000E00  EC98  F006         	call	PL80	;call to abstracted procedure
 25687  000E04  EC25  F02A         	call	___lmul	;wreg free
 25688  000E08  D010               	goto	L20
 25689  000E0A                     l12576:
 25690                           
 25691                           ; BSR set to: 1
 25692                           ;radio_driver_SX1276.c: 570: tempValue *= 250;
 25693  000E0A  D997               	call	PL122	;call to abstracted procedure
 25694  000E0C  0EFA               	movlw	250
 25695  000E0E  0100               	movlb	0	; () banked
 25696  000E10  EC98  F006         	call	PL80	;call to abstracted procedure
 25697  000E14  EC25  F02A         	call	___lmul	;wreg free
 25698  000E18  D008               	goto	L20
 25699  000E1A                     l12578:
 25700                           
 25701                           ; BSR set to: 1
 25702                           ;radio_driver_SX1276.c: 573: tempValue *= 500;
 25703  000E1A  D98F               	call	PL122	;call to abstracted procedure
 25704  000E1C  0EF4               	movlw	244
 25705  000E1E  0100               	movlb	0	; () banked
 25706  000E20  6F94               	movwf	___lmul@multiplicand& (0+255),b
 25707  000E22  0E01               	movlw	1
 25708  000E24  D9B2               	call	PL438	;call to abstracted procedure
 25709  000E26  EC25  F02A         	call	___lmul	;wreg free
 25710  000E2A                     L20:
 25711  000E2A  C090  F0A1         	movff	?___lmul,RADIO_WriteConfiguration@tempValue
 25712  000E2E  C091  F0A2         	movff	?___lmul+1,RADIO_WriteConfiguration@tempValue+1
 25713  000E32  C092  F0A3         	movff	?___lmul+2,RADIO_WriteConfiguration@tempValue+2
 25714  000E36  C093  F0A4         	movff	?___lmul+3,RADIO_WriteConfiguration@tempValue+3
 25715                           
 25716                           ;radio_driver_SX1276.c: 574: break;
 25717  000E3A  D00B               	goto	l12584
 25718  000E3C                     l1690:
 25719                           
 25720                           ; BSR set to: 1
 25721                           ;radio_driver_SX1276.c: 577: tempValue = 0;
 25722  000E3C  D98D               	call	PL350	;call to abstracted procedure
 25723                           
 25724                           ;radio_driver_SX1276.c: 578: break;
 25725  000E3E  D009               	goto	l12584
 25726  000E40                     l12582:
 25727                           
 25728                           ; BSR set to: 0
 25729  000E40  0101               	movlb	1	; () banked
 25730  000E42  5199               	movf	(_RadioConfiguration+26)& (0+255),w,b
 25731                           
 25732                           ; Switch size 1, requested type "space"
 25733                           ; Number of cases is 3, Range of values is 7 to 9
 25734                           ; switch strategies available:
 25735                           ; Name         Instructions Cycles
 25736                           ; simple_byte           10     6 (average)
 25737                           ;	Chosen strategy is simple_byte
 25738  000E44  0A07               	xorlw	7	; case 7
 25739  000E46  E0D9               	bz	l12574
 25740  000E48  0A0F               	xorlw	15	; case 8
 25741  000E4A  E0DF               	bz	l12576
 25742  000E4C  0A01               	xorlw	1	; case 9
 25743  000E4E  E0E5               	bz	l12578
 25744  000E50  D7F5               	goto	l1690
 25745  000E52                     l12584:
 25746                           
 25747                           ; BSR set to: 0
 25748                           ;radio_driver_SX1276.c: 581: tempValue >>= RadioConfiguration.dataRate;
 25749  000E52  0101               	movlb	1	; () banked
 25750  000E54  2998               	incf	(_RadioConfiguration+25)& (0+255),w,b
 25751  000E56  0100               	movlb	0	; () banked
 25752  000E58  6F9E               	movwf	??_RADIO_WriteConfiguration& (0+255),b
 25753  000E5A  D005               	goto	u13550
 25754  000E5C                     u13555:
 25755  000E5C  90D8               	bcf	status,0,c
 25756  000E5E  33A4               	rrcf	(RADIO_WriteConfiguration@tempValue+3)& (0+255),f,b
 25757  000E60  33A3               	rrcf	(RADIO_WriteConfiguration@tempValue+2)& (0+255),f,b
 25758  000E62  33A2               	rrcf	(RADIO_WriteConfiguration@tempValue+1)& (0+255),f,b
 25759  000E64  33A1               	rrcf	RADIO_WriteConfiguration@tempValue& (0+255),f,b
 25760  000E66                     u13550:
 25761  000E66  2F9E               	decfsz	??_RADIO_WriteConfiguration& (0+255),f,b
 25762  000E68  D7F9               	goto	u13555
 25763                           
 25764                           ;radio_driver_SX1276.c: 582: }
 25765  000E6A  D001               	goto	l12586
 25766  000E6C                     l1684:
 25767                           
 25768                           ; BSR set to: 1
 25769                           ;radio_driver_SX1276.c: 583: else
 25770                           ;radio_driver_SX1276.c: 584: {
 25771                           ;radio_driver_SX1276.c: 585: tempValue = 0;
 25772  000E6C  D975               	call	PL350	;call to abstracted procedure
 25773  000E6E                     l12586:
 25774                           
 25775                           ;radio_driver_SX1276.c: 586: }
 25776                           ;radio_driver_SX1276.c: 587: RADIO_RegisterWrite(0x24, (uint8_t)tempValue);
 25777  000E6E  C0A1  F062         	movff	RADIO_WriteConfiguration@tempValue,RADIO_RegisterWrite@value
 25778  000E72  0E24               	movlw	36
 25779  000E74  EC31  F02F         	call	_RADIO_RegisterWrite
 25780                           
 25781                           ;radio_driver_SX1276.c: 589: RADIO_RegisterWrite(0x1F, (symbolTimeout & 0xFF));
 25782  000E78  C09C  F062         	movff	RADIO_WriteConfiguration@symbolTimeout,RADIO_RegisterWrite@value
 25783  000E7C  0E1F               	movlw	31
 25784  000E7E  EC31  F02F         	call	_RADIO_RegisterWrite
 25785                           
 25786                           ;radio_driver_SX1276.c: 595: regValue = RADIO_RegisterRead(0x26);
 25787  000E82  0E26               	movlw	38
 25788  000E84  EC64  F02E         	call	_RADIO_RegisterRead
 25789  000E88  6FA5               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 25790                           
 25791                           ; BSR set to: 0
 25792                           ;radio_driver_SX1276.c: 596: if (
 25793                           ;radio_driver_SX1276.c: 597: (
 25794                           ;radio_driver_SX1276.c: 598: (SF_12 == RadioConfiguration.dataRate) &&
 25795                           ;radio_driver_SX1276.c: 599: ((BW_125KHZ == RadioConfiguration.bandWidth) || (BW_250KHZ 
      +                          == RadioConfiguration.bandWidth))
 25796                           ;radio_driver_SX1276.c: 600: ) ||
 25797                           ;radio_driver_SX1276.c: 601: (
 25798                           ;radio_driver_SX1276.c: 602: (SF_11 == RadioConfiguration.dataRate) &&
 25799                           ;radio_driver_SX1276.c: 603: (BW_125KHZ == RadioConfiguration.bandWidth)
 25800                           ;radio_driver_SX1276.c: 604: )
 25801                           ;radio_driver_SX1276.c: 605: )
 25802  000E8A  0E0C               	movlw	12
 25803  000E8C  0101               	movlb	1	; () banked
 25804  000E8E  1998               	xorwf	(_RadioConfiguration+25)& (0+255),w,b
 25805  000E90  E106               	bnz	l12594
 25806                           
 25807                           ; BSR set to: 1
 25808  000E92  0E07               	movlw	7
 25809  000E94  1999               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 25810  000E96  E009               	bz	l12598
 25811                           
 25812                           ; BSR set to: 1
 25813  000E98  0E08               	movlw	8
 25814  000E9A  1999               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 25815  000E9C  E006               	bz	l12598
 25816  000E9E                     l12594:
 25817                           
 25818                           ; BSR set to: 1
 25819  000E9E  0E0B               	movlw	11
 25820  000EA0  1998               	xorwf	(_RadioConfiguration+25)& (0+255),w,b
 25821  000EA2  E106               	bnz	l12600
 25822                           
 25823                           ; BSR set to: 1
 25824  000EA4  0E07               	movlw	7
 25825  000EA6  1999               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 25826  000EA8  E103               	bnz	l12600
 25827  000EAA                     l12598:
 25828                           
 25829                           ; BSR set to: 1
 25830                           ;radio_driver_SX1276.c: 606: {
 25831                           ;radio_driver_SX1276.c: 607: regValue |= 1 << (3);
 25832  000EAA  0100               	movlb	0	; () banked
 25833  000EAC  87A5               	bsf	RADIO_WriteConfiguration@regValue& (0+255),3,b
 25834                           
 25835                           ;radio_driver_SX1276.c: 608: }
 25836  000EAE  D002               	goto	l1697
 25837  000EB0                     l12600:
 25838                           
 25839                           ; BSR set to: 1
 25840                           ;radio_driver_SX1276.c: 609: else
 25841                           ;radio_driver_SX1276.c: 610: {
 25842                           ;radio_driver_SX1276.c: 611: regValue &= ~(1 << (3));
 25843  000EB0  0100               	movlb	0	; () banked
 25844  000EB2  97A5               	bcf	RADIO_WriteConfiguration@regValue& (0+255),3,b
 25845  000EB4                     l1697:
 25846                           
 25847                           ; BSR set to: 0
 25848                           ;radio_driver_SX1276.c: 612: }
 25849                           ;radio_driver_SX1276.c: 613: regValue |= 1 << (2);
 25850  000EB4  85A5               	bsf	RADIO_WriteConfiguration@regValue& (0+255),2,b
 25851                           
 25852                           ; BSR set to: 0
 25853                           ;radio_driver_SX1276.c: 614: RADIO_RegisterWrite(0x26, regValue);
 25854  000EB6  C0A5  F062         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 25855  000EBA  0E26               	movlw	38
 25856  000EBC  EC31  F02F         	call	_RADIO_RegisterWrite
 25857                           
 25858                           ;radio_driver_SX1276.c: 616: regValue = RADIO_RegisterRead(0x31);
 25859  000EC0  0E31               	movlw	49
 25860  000EC2  EC64  F02E         	call	_RADIO_RegisterRead
 25861  000EC6  6FA5               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 25862                           
 25863                           ; BSR set to: 0
 25864                           ;radio_driver_SX1276.c: 617: regValue &= ~(0x07);
 25865  000EC8  0EF8               	movlw	248
 25866  000ECA  17A5               	andwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 25867                           
 25868                           ; BSR set to: 0
 25869                           ;radio_driver_SX1276.c: 618: regValue |= 0x03;
 25870  000ECC  0E03               	movlw	3
 25871  000ECE  13A5               	iorwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 25872                           
 25873                           ; BSR set to: 0
 25874                           ;radio_driver_SX1276.c: 619: RADIO_RegisterWrite(0x31, regValue);
 25875  000ED0  D960               	call	PL442	;call to abstracted procedure
 25876  000ED2  EC31  F02F         	call	_RADIO_RegisterWrite
 25877                           
 25878                           ;radio_driver_SX1276.c: 622: RADIO_RegisterWrite(0x37, 0x0A);
 25879  000ED6  0E0A               	movlw	10
 25880  000ED8  0100               	movlb	0	; () banked
 25881  000EDA  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 25882  000EDC  0E37               	movlw	55
 25883  000EDE  EC31  F02F         	call	_RADIO_RegisterWrite
 25884                           
 25885                           ;radio_driver_SX1276.c: 625: if (0x12 == RadioConfiguration.regVersion)
 25886  000EE2  0E12               	movlw	18
 25887  000EE4  0101               	movlb	1	; () banked
 25888  000EE6  19B0               	xorwf	(_RadioConfiguration+49)& (0+255),w,b
 25889  000EE8  E125               	bnz	l12638
 25890                           
 25891                           ; BSR set to: 1
 25892                           ;radio_driver_SX1276.c: 626: {
 25893                           ;radio_driver_SX1276.c: 629: if ( (BW_125KHZ == RadioConfiguration.bandWidth) ||
 25894                           ;radio_driver_SX1276.c: 630: (BW_250KHZ == RadioConfiguration.bandWidth) )
 25895  000EEA  0E07               	movlw	7
 25896  000EEC  1999               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 25897  000EEE  E003               	bz	l12620
 25898                           
 25899                           ; BSR set to: 1
 25900  000EF0  0E08               	movlw	8
 25901  000EF2  1999               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 25902  000EF4  E113               	bnz	l12630
 25903  000EF6                     l12620:
 25904                           
 25905                           ; BSR set to: 1
 25906                           ;radio_driver_SX1276.c: 631: {
 25907                           ;radio_driver_SX1276.c: 632: regValue = RADIO_RegisterRead(0x31);
 25908  000EF6  0E31               	movlw	49
 25909  000EF8  EC64  F02E         	call	_RADIO_RegisterRead
 25910  000EFC  6FA5               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 25911                           
 25912                           ; BSR set to: 0
 25913                           ;radio_driver_SX1276.c: 633: regValue &= ~0x80;
 25914  000EFE  9FA5               	bcf	RADIO_WriteConfiguration@regValue& (0+255),7,b
 25915                           
 25916                           ; BSR set to: 0
 25917                           ;radio_driver_SX1276.c: 634: RADIO_RegisterWrite(0x31, regValue);
 25918  000F00  D948               	call	PL442	;call to abstracted procedure
 25919  000F02  EC31  F02F         	call	_RADIO_RegisterWrite
 25920                           
 25921                           ;radio_driver_SX1276.c: 635: RADIO_RegisterWrite(0x2F, 0x40);
 25922  000F06  0E40               	movlw	64
 25923  000F08  0100               	movlb	0	; () banked
 25924  000F0A  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 25925  000F0C  0E2F               	movlw	47
 25926  000F0E  EC31  F02F         	call	_RADIO_RegisterWrite
 25927                           
 25928                           ;radio_driver_SX1276.c: 636: RADIO_RegisterWrite(0x30, 0x00);
 25929  000F12  0100               	movlb	0	; () banked
 25930  000F14  6B62               	clrf	RADIO_RegisterWrite@value& (0+255),b
 25931  000F16  0E30               	movlw	48
 25932  000F18  EC31  F02F         	call	_RADIO_RegisterWrite
 25933  000F1C                     l12630:
 25934                           
 25935                           ;radio_driver_SX1276.c: 637: }
 25936                           ;radio_driver_SX1276.c: 639: if (BW_500KHZ == RadioConfiguration.bandWidth)
 25937  000F1C  0E09               	movlw	9
 25938  000F1E  0101               	movlb	1	; () banked
 25939  000F20  1999               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 25940  000F22  E108               	bnz	l12638
 25941                           
 25942                           ; BSR set to: 1
 25943                           ;radio_driver_SX1276.c: 640: {
 25944                           ;radio_driver_SX1276.c: 641: regValue = RADIO_RegisterRead(0x31);
 25945  000F24  0E31               	movlw	49
 25946  000F26  EC64  F02E         	call	_RADIO_RegisterRead
 25947  000F2A  6FA5               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 25948                           
 25949                           ; BSR set to: 0
 25950                           ;radio_driver_SX1276.c: 642: regValue |= 0x80;
 25951  000F2C  8FA5               	bsf	RADIO_WriteConfiguration@regValue& (0+255),7,b
 25952                           
 25953                           ; BSR set to: 0
 25954                           ;radio_driver_SX1276.c: 643: RADIO_RegisterWrite(0x31, regValue);
 25955  000F2E  D931               	call	PL442	;call to abstracted procedure
 25956  000F30  EC31  F02F         	call	_RADIO_RegisterWrite
 25957  000F34                     l12638:
 25958                           
 25959                           ;radio_driver_SX1276.c: 644: }
 25960                           ;radio_driver_SX1276.c: 645: }
 25961                           ;radio_driver_SX1276.c: 647: regValue = RADIO_RegisterRead(0x33);
 25962  000F34  0E33               	movlw	51
 25963  000F36  EC64  F02E         	call	_RADIO_RegisterRead
 25964  000F3A  6FA5               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 25965                           
 25966                           ; BSR set to: 0
 25967                           ;radio_driver_SX1276.c: 648: regValue &= ~(1 << (6));
 25968  000F3C  9DA5               	bcf	RADIO_WriteConfiguration@regValue& (0+255),6,b
 25969                           
 25970                           ; BSR set to: 0
 25971                           ;radio_driver_SX1276.c: 649: regValue |= (1 << (0));
 25972  000F3E  81A5               	bsf	RADIO_WriteConfiguration@regValue& (0+255),0,b
 25973                           
 25974                           ; BSR set to: 0
 25975                           ;radio_driver_SX1276.c: 650: regValue |= (RadioConfiguration.iqInverted & 0x01) << (6);
 25976  000F40  C19F  F09E         	movff	_RadioConfiguration+32,??_RADIO_WriteConfiguration
 25977  000F44  0E01               	movlw	1
 25978  000F46  179E               	andwf	??_RADIO_WriteConfiguration& (0+255),f,b
 25979  000F48  0E06               	movlw	6
 25980  000F4A  6F9F               	movwf	(??_RADIO_WriteConfiguration+1)& (0+255),b
 25981  000F4C                     u13655:
 25982  000F4C  90D8               	bcf	status,0,c
 25983  000F4E  379E               	rlcf	??_RADIO_WriteConfiguration& (0+255),f,b
 25984  000F50  2F9F               	decfsz	(??_RADIO_WriteConfiguration+1)& (0+255),f,b
 25985  000F52  D7FC               	goto	u13655
 25986  000F54  519E               	movf	??_RADIO_WriteConfiguration& (0+255),w,b
 25987  000F56  13A5               	iorwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 25988                           
 25989                           ; BSR set to: 0
 25990                           ;radio_driver_SX1276.c: 651: RADIO_RegisterWrite(0x33, regValue);
 25991  000F58  C0A5  F062         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 25992  000F5C  0E33               	movlw	51
 25993  000F5E  EC31  F02F         	call	_RADIO_RegisterWrite
 25994                           
 25995                           ;radio_driver_SX1276.c: 653: regValue = 0x1D & (~((RadioConfiguration.iqInverted & 0x01)
      +                           << (2)));
 25996  000F62  C19F  F09E         	movff	_RadioConfiguration+32,??_RADIO_WriteConfiguration
 25997  000F66  0E01               	movlw	1
 25998  000F68  0100               	movlb	0	; () banked
 25999  000F6A  179E               	andwf	??_RADIO_WriteConfiguration& (0+255),f,b
 26000  000F6C  90D8               	bcf	status,0,c
 26001  000F6E  379E               	rlcf	??_RADIO_WriteConfiguration& (0+255),f,b
 26002  000F70  90D8               	bcf	status,0,c
 26003  000F72  359E               	rlcf	??_RADIO_WriteConfiguration& (0+255),w,b
 26004  000F74  0AFF               	xorlw	255
 26005  000F76  0B1D               	andlw	29
 26006  000F78  6FA5               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 26007                           
 26008                           ; BSR set to: 0
 26009                           ;radio_driver_SX1276.c: 654: RADIO_RegisterWrite(0x3B, regValue);
 26010  000F7A  C0A5  F062         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 26011  000F7E  0E3B               	movlw	59
 26012  000F80  EC31  F02F         	call	_RADIO_RegisterWrite
 26013                           
 26014                           ;radio_driver_SX1276.c: 656: RADIO_RegisterWrite(0x20, RadioConfiguration.preambleLen >>
      +                           (8));
 26015  000F84  D8EF               	call	PL360	;call to abstracted procedure
 26016  000F86  0E20               	movlw	32
 26017  000F88  EC31  F02F         	call	_RADIO_RegisterWrite
 26018                           
 26019                           ;radio_driver_SX1276.c: 657: RADIO_RegisterWrite(0x21, RadioConfiguration.preambleLen & 
      +                          0xFF);
 26020  000F8C  C18B  F062         	movff	_RadioConfiguration+12,RADIO_RegisterWrite@value
 26021  000F90  0E21               	movlw	33
 26022  000F92  EC31  F02F         	call	_RADIO_RegisterWrite
 26023                           
 26024                           ;radio_driver_SX1276.c: 659: RADIO_RegisterWrite(0x0D, 0x00);
 26025  000F96  D903               	call	PL456	;call to abstracted procedure
 26026  000F98  EC31  F02F         	call	_RADIO_RegisterWrite
 26027                           
 26028                           ;radio_driver_SX1276.c: 660: RADIO_RegisterWrite(0x0E, 0x00);
 26029  000F9C  0100               	movlb	0	; () banked
 26030  000F9E  6B62               	clrf	RADIO_RegisterWrite@value& (0+255),b
 26031  000FA0  0E0E               	movlw	14
 26032  000FA2  EC31  F02F         	call	_RADIO_RegisterWrite
 26033                           
 26034                           ;radio_driver_SX1276.c: 661: RADIO_RegisterWrite(0x0F, 0x00);
 26035  000FA6  0100               	movlb	0	; () banked
 26036  000FA8  6B62               	clrf	RADIO_RegisterWrite@value& (0+255),b
 26037  000FAA  0E0F               	movlw	15
 26038  000FAC  EC31  F02F         	call	_RADIO_RegisterWrite
 26039                           
 26040                           ;radio_driver_SX1276.c: 664: if (0x12 == RadioConfiguration.regVersion)
 26041  000FB0  0E12               	movlw	18
 26042  000FB2  0101               	movlb	1	; () banked
 26043  000FB4  19B0               	xorwf	(_RadioConfiguration+49)& (0+255),w,b
 26044  000FB6  E154               	bnz	l1703
 26045                           
 26046                           ; BSR set to: 1
 26047                           ;radio_driver_SX1276.c: 665: {
 26048                           ;radio_driver_SX1276.c: 666: if ( (BW_500KHZ == RadioConfiguration.bandWidth) &&
 26049                           ;radio_driver_SX1276.c: 667: (RadioConfiguration.frequency >= 862000000) &&
 26050                           ;radio_driver_SX1276.c: 668: (RadioConfiguration.frequency <= 1020000000)
 26051                           ;radio_driver_SX1276.c: 669: )
 26052  000FB8  0E09               	movlw	9
 26053  000FBA  1999               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 26054  000FBC  E119               	bnz	l12672
 26055                           
 26056                           ; BSR set to: 1
 26057  000FBE  0E80               	movlw	128
 26058  000FC0  5D7F               	subwf	_RadioConfiguration& (0+255),w,b
 26059  000FC2  0E13               	movlw	19
 26060  000FC4  5980               	subwfb	(_RadioConfiguration+1)& (0+255),w,b
 26061  000FC6  0E61               	movlw	97
 26062  000FC8  5981               	subwfb	(_RadioConfiguration+2)& (0+255),w,b
 26063  000FCA  0E33               	movlw	51
 26064  000FCC  5982               	subwfb	(_RadioConfiguration+3)& (0+255),w,b
 26065  000FCE  E310               	bnc	l12672
 26066                           
 26067                           ; BSR set to: 1
 26068  000FD0  057F               	decf	_RadioConfiguration& (0+255),w,b
 26069  000FD2  0EF7               	movlw	247
 26070  000FD4  5980               	subwfb	(_RadioConfiguration+1)& (0+255),w,b
 26071  000FD6  0ECB               	movlw	203
 26072  000FD8  5981               	subwfb	(_RadioConfiguration+2)& (0+255),w,b
 26073  000FDA  0E3C               	movlw	60
 26074  000FDC  5982               	subwfb	(_RadioConfiguration+3)& (0+255),w,b
 26075  000FDE  E208               	bc	l12672
 26076                           
 26077                           ; BSR set to: 1
 26078                           ;radio_driver_SX1276.c: 670: {
 26079                           ;radio_driver_SX1276.c: 671: RADIO_RegisterWrite(0x36, 0x02);
 26080  000FE0  D8CD               	call	PL406	;call to abstracted procedure
 26081  000FE2  EC31  F02F         	call	_RADIO_RegisterWrite
 26082                           
 26083                           ;radio_driver_SX1276.c: 672: RADIO_RegisterWrite(0x3a, 0x64);
 26084  000FE6  0E64               	movlw	100
 26085  000FE8  D8C6               	call	PL374	;call to abstracted procedure
 26086  000FEA  EC31  F02F         	call	_RADIO_RegisterWrite
 26087                           
 26088                           ;radio_driver_SX1276.c: 673: }
 26089  000FEE  D023               	goto	l12682
 26090  000FF0                     l12672:
 26091                           
 26092                           ; BSR set to: 1
 26093                           ;radio_driver_SX1276.c: 674: else if ( (BW_500KHZ == RadioConfiguration.bandWidth) &&
 26094                           ;radio_driver_SX1276.c: 675: (RadioConfiguration.frequency >= 410000000) &&
 26095                           ;radio_driver_SX1276.c: 676: (RadioConfiguration.frequency <= 525000000)
 26096                           ;radio_driver_SX1276.c: 677: )
 26097  000FF0  0E09               	movlw	9
 26098  000FF2  1999               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 26099  000FF4  E11A               	bnz	l12680
 26100                           
 26101                           ; BSR set to: 1
 26102  000FF6  0E80               	movlw	128
 26103  000FF8  5D7F               	subwf	_RadioConfiguration& (0+255),w,b
 26104  000FFA  0E1A               	movlw	26
 26105  000FFC  5980               	subwfb	(_RadioConfiguration+1)& (0+255),w,b
 26106  000FFE  0E70               	movlw	112
 26107  001000  5981               	subwfb	(_RadioConfiguration+2)& (0+255),w,b
 26108  001002  0E18               	movlw	24
 26109  001004  5982               	subwfb	(_RadioConfiguration+3)& (0+255),w,b
 26110  001006  E311               	bnc	l12680
 26111                           
 26112                           ; BSR set to: 1
 26113  001008  0E41               	movlw	65
 26114  00100A  5D7F               	subwf	_RadioConfiguration& (0+255),w,b
 26115  00100C  0EDD               	movlw	221
 26116  00100E  5980               	subwfb	(_RadioConfiguration+1)& (0+255),w,b
 26117  001010  0E4A               	movlw	74
 26118  001012  5981               	subwfb	(_RadioConfiguration+2)& (0+255),w,b
 26119  001014  0E1F               	movlw	31
 26120  001016  5982               	subwfb	(_RadioConfiguration+3)& (0+255),w,b
 26121  001018  E208               	bc	l12680
 26122                           
 26123                           ; BSR set to: 1
 26124                           ;radio_driver_SX1276.c: 678: {
 26125                           ;radio_driver_SX1276.c: 679: RADIO_RegisterWrite(0x36, 0x02);
 26126  00101A  D8B0               	call	PL406	;call to abstracted procedure
 26127  00101C  EC31  F02F         	call	_RADIO_RegisterWrite
 26128                           
 26129                           ;radio_driver_SX1276.c: 680: RADIO_RegisterWrite(0x3a, 0x7F);
 26130  001020  0E7F               	movlw	127
 26131  001022  D8A9               	call	PL374	;call to abstracted procedure
 26132  001024  EC31  F02F         	call	_RADIO_RegisterWrite
 26133                           
 26134                           ;radio_driver_SX1276.c: 681: }
 26135  001028  D006               	goto	l12682
 26136  00102A                     l12680:
 26137                           
 26138                           ; BSR set to: 1
 26139                           ;radio_driver_SX1276.c: 682: else
 26140                           ;radio_driver_SX1276.c: 683: {
 26141                           ;radio_driver_SX1276.c: 684: RADIO_RegisterWrite(0x36, 0x03);
 26142  00102A  0E03               	movlw	3
 26143  00102C  0100               	movlb	0	; () banked
 26144  00102E  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26145  001030  0E36               	movlw	54
 26146  001032  EC31  F02F         	call	_RADIO_RegisterWrite
 26147  001036                     l12682:
 26148                           
 26149                           ;radio_driver_SX1276.c: 685: }
 26150                           ;radio_driver_SX1276.c: 688: if ((BW_500KHZ == RadioConfiguration.bandWidth) && (1 == Ra
      +                          dioConfiguration.iqInverted))
 26151  001036  0E09               	movlw	9
 26152  001038  0101               	movlb	1	; () banked
 26153  00103A  1999               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 26154  00103C  E10A               	bnz	l12688
 26155                           
 26156                           ; BSR set to: 1
 26157  00103E  059F               	decf	(_RadioConfiguration+32)& (0+255),w,b
 26158  001040  E108               	bnz	l12688
 26159                           
 26160                           ; BSR set to: 1
 26161                           ;radio_driver_SX1276.c: 689: {
 26162                           ;radio_driver_SX1276.c: 690: RADIO_RegisterWrite(0x3A, 0x65);
 26163  001042  D895               	call	PL366	;call to abstracted procedure
 26164  001044  EC31  F02F         	call	_RADIO_RegisterWrite
 26165                           
 26166                           ;radio_driver_SX1276.c: 691: RADIO_RegisterWrite(0x3B, 25);
 26167  001048  0E19               	movlw	25
 26168  00104A  D89C               	call	PL432	;call to abstracted procedure
 26169  00104C  EC31  F02F         	call	_RADIO_RegisterWrite
 26170                           
 26171                           ;radio_driver_SX1276.c: 692: }
 26172  001050  D007               	goto	l1703
 26173  001052                     l12688:
 26174                           
 26175                           ; BSR set to: 1
 26176                           ;radio_driver_SX1276.c: 693: else
 26177                           ;radio_driver_SX1276.c: 694: {
 26178                           ;radio_driver_SX1276.c: 695: RADIO_RegisterWrite(0x3A, 0x65);
 26179  001052  D88D               	call	PL366	;call to abstracted procedure
 26180  001054  EC31  F02F         	call	_RADIO_RegisterWrite
 26181                           
 26182                           ;radio_driver_SX1276.c: 696: RADIO_RegisterWrite(0x3B, 29);
 26183  001058  0E1D               	movlw	29
 26184  00105A  D894               	call	PL432	;call to abstracted procedure
 26185  00105C  EC31  F02F         	call	_RADIO_RegisterWrite
 26186  001060                     l1703:
 26187                           
 26188                           ;radio_driver_SX1276.c: 697: }
 26189                           ;radio_driver_SX1276.c: 698: }
 26190                           ;radio_driver_SX1276.c: 701: RADIO_RegisterWrite(0x12, 0xFF);
 26191  001060  ECA1  F024         	call	PL454	;call to abstracted procedure
 26192  001064  EF31  F02F         	goto	_RADIO_RegisterWrite
 26193  001068                     l12690:
 26194                           
 26195                           ; BSR set to: 1
 26196                           ;radio_driver_SX1276.c: 703: else
 26197                           ;radio_driver_SX1276.c: 704: {
 26198                           ;radio_driver_SX1276.c: 706: RADIO_WriteFSKFrequencyDeviation(RadioConfiguration.frequen
      +                          cyDeviation);
 26199  001068  C183  F06D         	movff	_RadioConfiguration+4,RADIO_WriteFSKFrequencyDeviation@frequencyDeviation
 26200  00106C  C184  F06E         	movff	_RadioConfiguration+5,RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+1
 26201  001070  C185  F06F         	movff	_RadioConfiguration+6,RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+2
 26202  001074  C186  F070         	movff	_RadioConfiguration+7,RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+3
 26203  001078  EC57  F027         	call	_RADIO_WriteFSKFrequencyDeviation	;wreg free
 26204                           
 26205                           ;radio_driver_SX1276.c: 707: RADIO_WriteFSKBitRate(RadioConfiguration.bitRate);
 26206  00107C  C187  F06D         	movff	_RadioConfiguration+8,RADIO_WriteFSKBitRate@bitRate
 26207  001080  C188  F06E         	movff	_RadioConfiguration+9,RADIO_WriteFSKBitRate@bitRate+1
 26208  001084  C189  F06F         	movff	_RadioConfiguration+10,RADIO_WriteFSKBitRate@bitRate+2
 26209  001088  C18A  F070         	movff	_RadioConfiguration+11,RADIO_WriteFSKBitRate@bitRate+3
 26210  00108C  ECF5  F026         	call	_RADIO_WriteFSKBitRate	;wreg free
 26211                           
 26212                           ;radio_driver_SX1276.c: 709: RADIO_RegisterWrite(0x25, RadioConfiguration.preambleLen >>
      +                           (8));
 26213  001090  D869               	call	PL360	;call to abstracted procedure
 26214  001092  0E25               	movlw	37
 26215  001094  EC31  F02F         	call	_RADIO_RegisterWrite
 26216                           
 26217                           ;radio_driver_SX1276.c: 710: RADIO_RegisterWrite(0x26, RadioConfiguration.preambleLen & 
      +                          0xFF);
 26218  001098  C18B  F062         	movff	_RadioConfiguration+12,RADIO_RegisterWrite@value
 26219  00109C  0E26               	movlw	38
 26220  00109E  EC31  F02F         	call	_RADIO_RegisterWrite
 26221                           
 26222                           ;radio_driver_SX1276.c: 713: regValue = RADIO_RegisterRead(0x0A);
 26223  0010A2  0E0A               	movlw	10
 26224  0010A4  EC64  F02E         	call	_RADIO_RegisterRead
 26225  0010A8  6FA5               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 26226                           
 26227                           ; BSR set to: 0
 26228                           ;radio_driver_SX1276.c: 714: regValue &= ~0x60;
 26229  0010AA  0E9F               	movlw	159
 26230  0010AC  17A5               	andwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 26231                           
 26232                           ; BSR set to: 0
 26233                           ;radio_driver_SX1276.c: 715: regValue |= RadioConfiguration.fskDataShaping << (5);
 26234  0010AE  0101               	movlb	1	; () banked
 26235  0010B0  39B2               	swapf	(_RadioConfiguration+51)& (0+255),w,b
 26236  0010B2  46E8               	rlncf	wreg,f,c
 26237  0010B4  0BE0               	andlw	224
 26238  0010B6  0100               	movlb	0	; () banked
 26239  0010B8  13A5               	iorwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 26240                           
 26241                           ;radio_driver_SX1276.c: 716: RADIO_RegisterWrite(0x0A, regValue);
 26242  0010BA  C0A5  F062         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 26243  0010BE  0E0A               	movlw	10
 26244  0010C0  EC31  F02F         	call	_RADIO_RegisterWrite
 26245                           
 26246                           ;radio_driver_SX1276.c: 720: regValue = 0xC8;
 26247  0010C4  0EC8               	movlw	200
 26248  0010C6  0100               	movlb	0	; () banked
 26249  0010C8  6FA5               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 26250                           
 26251                           ; BSR set to: 0
 26252                           ;radio_driver_SX1276.c: 721: if (RadioConfiguration.crcOn)
 26253  0010CA  0101               	movlb	1	; () banked
 26254  0010CC  519B               	movf	(_RadioConfiguration+28)& (0+255),w,b
 26255  0010CE  E002               	bz	l12702
 26256                           
 26257                           ; BSR set to: 1
 26258                           ;radio_driver_SX1276.c: 722: {
 26259                           ;radio_driver_SX1276.c: 723: regValue |= 0x10;
 26260  0010D0  0100               	movlb	0	; () banked
 26261  0010D2  89A5               	bsf	RADIO_WriteConfiguration@regValue& (0+255),4,b
 26262  0010D4                     l12702:
 26263                           
 26264                           ;radio_driver_SX1276.c: 724: }
 26265                           ;radio_driver_SX1276.c: 725: RADIO_RegisterWrite(0x30, regValue);
 26266  0010D4  C0A5  F062         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 26267  0010D8  0E30               	movlw	48
 26268  0010DA  EC31  F02F         	call	_RADIO_RegisterWrite
 26269                           
 26270                           ;radio_driver_SX1276.c: 728: for (i = 0; i < RadioConfiguration.syncWordLen; i++)
 26271  0010DE  0100               	movlb	0	; () banked
 26272  0010E0  6BA0               	clrf	RADIO_WriteConfiguration@i& (0+255),b
 26273  0010E2  D00E               	goto	l12710
 26274  0010E4                     l12706:
 26275                           
 26276                           ; BSR set to: 0
 26277                           ;radio_driver_SX1276.c: 729: {
 26278                           ;radio_driver_SX1276.c: 732: RADIO_RegisterWrite(0x28 + i, RadioConfiguration.syncWord[i
      +                          ]);
 26279  0010E4  0E8E               	movlw	low (_RadioConfiguration+15)
 26280  0010E6  25A0               	addwf	RADIO_WriteConfiguration@i& (0+255),w,b
 26281  0010E8  6ED9               	movwf	fsr2l,c
 26282  0010EA  6ADA               	clrf	fsr2h,c
 26283  0010EC  0E01               	movlw	high (_RadioConfiguration+15)
 26284  0010EE  22DA               	addwfc	fsr2h,f,c
 26285  0010F0  50DF               	movf	indf2,w,c
 26286  0010F2  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26287  0010F4  51A0               	movf	RADIO_WriteConfiguration@i& (0+255),w,b
 26288  0010F6  0F28               	addlw	40
 26289  0010F8  EC31  F02F         	call	_RADIO_RegisterWrite
 26290  0010FC  0100               	movlb	0	; () banked
 26291  0010FE  2BA0               	incf	RADIO_WriteConfiguration@i& (0+255),f,b
 26292  001100                     l12710:
 26293                           
 26294                           ; BSR set to: 0
 26295  001100  0101               	movlb	1	; () banked
 26296  001102  5196               	movf	(_RadioConfiguration+23)& (0+255),w,b
 26297  001104  0100               	movlb	0	; () banked
 26298  001106  5DA0               	subwf	RADIO_WriteConfiguration@i& (0+255),w,b
 26299  001108  E3ED               	bnc	l12706
 26300                           
 26301                           ; BSR set to: 0
 26302                           ;radio_driver_SX1276.c: 733: }
 26303                           ;radio_driver_SX1276.c: 736: if (RadioConfiguration.syncWordLen != 0)
 26304  00110A  0101               	movlb	1	; () banked
 26305  00110C  5196               	movf	(_RadioConfiguration+23)& (0+255),w,b
 26306  00110E  E008               	bz	l12716
 26307                           
 26308                           ; BSR set to: 1
 26309                           ;radio_driver_SX1276.c: 737: {
 26310                           ;radio_driver_SX1276.c: 738: RADIO_RegisterWrite(0x27, 0x10 | (RadioConfiguration.syncWo
      +                          rdLen - 1));
 26311  001110  0596               	decf	(_RadioConfiguration+23)& (0+255),w,b
 26312  001112  0910               	iorlw	16
 26313  001114  0100               	movlb	0	; () banked
 26314  001116  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26315  001118  0E27               	movlw	39
 26316  00111A  EC31  F02F         	call	_RADIO_RegisterWrite
 26317                           
 26318                           ;radio_driver_SX1276.c: 739: }
 26319  00111E  D005               	goto	l1716
 26320  001120                     l12716:
 26321                           
 26322                           ; BSR set to: 1
 26323                           ;radio_driver_SX1276.c: 740: else
 26324                           ;radio_driver_SX1276.c: 741: {
 26325                           ;radio_driver_SX1276.c: 742: RADIO_RegisterWrite(0x27, 0x00);
 26326  001120  0100               	movlb	0	; () banked
 26327  001122  6B62               	clrf	RADIO_RegisterWrite@value& (0+255),b
 26328  001124  0E27               	movlw	39
 26329  001126  EC31  F02F         	call	_RADIO_RegisterWrite
 26330  00112A                     l1716:
 26331                           
 26332                           ;radio_driver_SX1276.c: 743: }
 26333                           ;radio_driver_SX1276.c: 746: RADIO_RegisterWrite(0x3E, 0xFF);
 26334  00112A  0100               	movlb	0	; () banked
 26335  00112C  6962               	setf	RADIO_RegisterWrite@value& (0+255),b
 26336  00112E  0E3E               	movlw	62
 26337  001130  EC31  F02F         	call	_RADIO_RegisterWrite
 26338                           
 26339                           ;radio_driver_SX1276.c: 747: RADIO_RegisterWrite(0x3F, 0xFF);
 26340  001134  D831               	call	PL444	;call to abstracted procedure
 26341  001136  EF31  F02F         	goto	_RADIO_RegisterWrite
 26342  00113A                     __end_of_RADIO_WriteConfiguration:
 26343                           	opt stack 0
 26344  00113A                     PL122:
 26345                           	opt stack 16
 26346  00113A  C0A1  F090         	movff	RADIO_WriteConfiguration@tempValue,___lmul@multiplier
 26347  00113E  C0A2  F091         	movff	RADIO_WriteConfiguration@tempValue+1,___lmul@multiplier+1
 26348  001142  C0A3  F092         	movff	RADIO_WriteConfiguration@tempValue+2,___lmul@multiplier+2
 26349  001146  C0A4  F093         	movff	RADIO_WriteConfiguration@tempValue+3,___lmul@multiplier+3
 26350  00114A  0012               	return	
 26351  00114C                     __end_ofPL122:
 26352                           	opt stack 0
 26353  00114C                     PL338:
 26354                           	opt stack 16
 26355  00114C  0BF0               	andlw	240
 26356  00114E  0100               	movlb	0	; () banked
 26357  001150  119F               	iorwf	(??_RADIO_WriteConfiguration+1)& (0+255),w,b
 26358  001152  119E               	iorwf	??_RADIO_WriteConfiguration& (0+255),w,b
 26359  001154  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26360  001156  0012               	return	
 26361  001158                     __end_ofPL338:
 26362                           	opt stack 0
 26363  001158                     PL350:
 26364                           	opt stack 16
 26365  001158  0100               	movlb	0	; () banked
 26366  00115A  6BA1               	clrf	RADIO_WriteConfiguration@tempValue& (0+255),b
 26367  00115C  6BA2               	clrf	(RADIO_WriteConfiguration@tempValue+1)& (0+255),b
 26368  00115E  6BA3               	clrf	(RADIO_WriteConfiguration@tempValue+2)& (0+255),b
 26369  001160  6BA4               	clrf	(RADIO_WriteConfiguration@tempValue+3)& (0+255),b
 26370  001162  0012               	return	
 26371  001164                     __end_ofPL350:
 26372                           	opt stack 0
 26373  001164                     PL360:
 26374                           	opt stack 16
 26375  001164  0101               	movlb	1	; () banked
 26376  001166  518C               	movf	(_RadioConfiguration+13)& (0+255),w,b
 26377  001168  0100               	movlb	0	; () banked
 26378  00116A  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26379  00116C  0012               	return	
 26380  00116E                     __end_ofPL360:
 26381                           	opt stack 0
 26382  00116E                     PL366:
 26383                           	opt stack 16
 26384  00116E  0E65               	movlw	101
 26385  001170  0100               	movlb	0	; () banked
 26386  001172  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26387  001174  0C3A               	retlw	58
 26388  001176                     __end_ofPL366:
 26389                           	opt stack 0
 26390  001176                     PL374:
 26391                           	opt stack 16
 26392  001176  0100               	movlb	0	; () banked
 26393  001178  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26394  00117A  0C3A               	retlw	58
 26395  00117C                     __end_ofPL374:
 26396                           	opt stack 0
 26397  00117C                     PL406:
 26398                           	opt stack 16
 26399  00117C  0E02               	movlw	2
 26400  00117E  0100               	movlb	0	; () banked
 26401  001180  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26402  001182  0C36               	retlw	54
 26403  001184                     __end_ofPL406:
 26404                           	opt stack 0
 26405  001184                     PL432:
 26406                           	opt stack 16
 26407  001184  0100               	movlb	0	; () banked
 26408  001186  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26409  001188  0C3B               	retlw	59
 26410  00118A                     __end_ofPL432:
 26411                           	opt stack 0
 26412  00118A                     PL438:
 26413                           	opt stack 13
 26414  00118A  6F95               	movwf	(___lmul@multiplicand+1)& (0+255),b
 26415  00118C  6B96               	clrf	(___lmul@multiplicand+2)& (0+255),b
 26416  00118E  6B97               	clrf	(___lmul@multiplicand+3)& (0+255),b
 26417  001190  0012               	return	
 26418  001192                     __end_ofPL438:
 26419                           	opt stack 0
 26420  001192                     PL442:
 26421                           	opt stack 16
 26422  001192  C0A5  F062         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 26423  001196  0C31               	retlw	49
 26424  001198                     __end_ofPL442:
 26425                           	opt stack 0
 26426  001198                     PL444:
 26427                           	opt stack 18
 26428  001198  0100               	movlb	0	; () banked
 26429  00119A  6962               	setf	RADIO_RegisterWrite@value& (0+255),b
 26430  00119C  0C3F               	retlw	63
 26431  00119E                     __end_ofPL444:
 26432                           	opt stack 0
 26433  00119E                     PL456:
 26434                           	opt stack 12
 26435  00119E  0100               	movlb	0	; () banked
 26436  0011A0  6B62               	clrf	RADIO_RegisterWrite@value& (0+255),b
 26437  0011A2  0C0D               	retlw	13
 26438  0011A4                     __end_ofPL456:
 26439                           	opt stack 0
 26440                           tosu	equ	0xFFF
 26441                           tosh	equ	0xFFE
 26442                           tosl	equ	0xFFD
 26443                           pclath	equ	0xFFA
 26444                           tblptru	equ	0xFF8
 26445                           tblptrh	equ	0xFF7
 26446                           tblptrl	equ	0xFF6
 26447                           tablat	equ	0xFF5
 26448                           prodh	equ	0xFF4
 26449                           prodl	equ	0xFF3
 26450                           intcon	equ	0xFF2
 26451                           indf0	equ	0xFEF
 26452                           postinc0	equ	0xFEE
 26453                           plusw0	equ	0xFEB
 26454                           fsr0h	equ	0xFEA
 26455                           fsr0l	equ	0xFE9
 26456                           wreg	equ	0xFE8
 26457                           postinc1	equ	0xFE6
 26458                           postdec1	equ	0xFE5
 26459                           plusw1	equ	0xFE3
 26460                           fsr1h	equ	0xFE2
 26461                           fsr1l	equ	0xFE1
 26462                           indf2	equ	0xFDF
 26463                           postinc2	equ	0xFDE
 26464                           postdec2	equ	0xFDD
 26465                           plusw2	equ	0xFDB
 26466                           fsr2h	equ	0xFDA
 26467                           fsr2l	equ	0xFD9
 26468                           status	equ	0xFD8
 26469                           
 26470 ;; *************** function _RADIO_WritePower *****************
 26471 ;; Defined at:
 26472 ;;		line 342 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 26473 ;; Parameters:    Size  Location     Type
 26474 ;;  power           1    wreg     char 
 26475 ;; Auto vars:     Size  Location     Type
 26476 ;;  power           1    6[BANK0 ] char 
 26477 ;;  paDac           1    5[BANK0 ] unsigned char 
 26478 ;;  ocp             1    4[BANK0 ] unsigned char 
 26479 ;; Return value:  Size  Location     Type
 26480 ;;                  1    wreg      void 
 26481 ;; Registers used:
 26482 ;;		wreg, status,2, status,0, cstack
 26483 ;; Tracked objects:
 26484 ;;		On entry : 3F/1
 26485 ;;		On exit  : 31/0
 26486 ;;		Unchanged: 0/0
 26487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 26488 ;;      Params:         0       0       0       0       0       0       0       0       0
 26489 ;;      Locals:         0       3       0       0       0       0       0       0       0
 26490 ;;      Temps:          0       0       0       0       0       0       0       0       0
 26491 ;;      Totals:         0       3       0       0       0       0       0       0       0
 26492 ;;Total ram usage:        3 bytes
 26493 ;; Hardware stack levels used:    1
 26494 ;; Hardware stack levels required when called:   10
 26495 ;; This function calls:
 26496 ;;		_RADIO_RegisterRead
 26497 ;;		_RADIO_RegisterWrite
 26498 ;; This function is called by:
 26499 ;;		_RADIO_WriteConfiguration
 26500 ;; This function uses a non-reentrant model
 26501 ;;
 26502                           
 26503                           	psect	text137
 26504  003918                     __ptext137:
 26505                           	opt stack 0
 26506  003918                     _RADIO_WritePower:
 26507                           	opt stack 16
 26508                           
 26509                           ;incstack = 0
 26510                           ;RADIO_WritePower@power stored from wreg
 26511  003918  0100               	movlb	0	; () banked
 26512  00391A  6F66               	movwf	RADIO_WritePower@power& (0+255),b
 26513                           
 26514                           ;radio_driver_SX1276.c: 344: uint8_t paDac;
 26515                           ;radio_driver_SX1276.c: 345: uint8_t ocp;
 26516                           ;radio_driver_SX1276.c: 347: if (RadioConfiguration.paBoost == 0)
 26517  00391C  0101               	movlb	1	; () banked
 26518  00391E  519C               	movf	(_RadioConfiguration+29)& (0+255),w,b
 26519  003920  E125               	bnz	l12314
 26520                           
 26521                           ; BSR set to: 1
 26522                           ;radio_driver_SX1276.c: 348: {
 26523                           ;radio_driver_SX1276.c: 350: if (power < -3)
 26524  003922  0100               	movlb	0	; () banked
 26525  003924  5166               	movf	RADIO_WritePower@power& (0+255),w,b
 26526  003926  0A80               	xorlw	128
 26527  003928  0F83               	addlw	131
 26528  00392A  E202               	bc	l12294
 26529                           
 26530                           ; BSR set to: 0
 26531                           ;radio_driver_SX1276.c: 351: {
 26532                           ;radio_driver_SX1276.c: 352: power = -3;
 26533  00392C  0EFD               	movlw	253
 26534  00392E  6F66               	movwf	RADIO_WritePower@power& (0+255),b
 26535  003930                     l12294:
 26536                           
 26537                           ; BSR set to: 0
 26538                           ;radio_driver_SX1276.c: 353: }
 26539                           ;radio_driver_SX1276.c: 354: if (power > 15)
 26540  003930  5166               	movf	RADIO_WritePower@power& (0+255),w,b
 26541  003932  0A80               	xorlw	128
 26542  003934  0F70               	addlw	-144
 26543  003936  E302               	bnc	l12298
 26544                           
 26545                           ; BSR set to: 0
 26546                           ;radio_driver_SX1276.c: 355: {
 26547                           ;radio_driver_SX1276.c: 356: power = 15;
 26548  003938  0E0F               	movlw	15
 26549  00393A  6F66               	movwf	RADIO_WritePower@power& (0+255),b
 26550  00393C                     l12298:
 26551                           
 26552                           ; BSR set to: 0
 26553                           ;radio_driver_SX1276.c: 357: }
 26554                           ;radio_driver_SX1276.c: 359: paDac = RADIO_RegisterRead(0x4D);
 26555  00393C  0E4D               	movlw	77
 26556  00393E  EC64  F02E         	call	_RADIO_RegisterRead
 26557  003942  6F65               	movwf	RADIO_WritePower@paDac& (0+255),b
 26558                           
 26559                           ; BSR set to: 0
 26560                           ;radio_driver_SX1276.c: 360: paDac &= ~(0x07);
 26561  003944  0EF8               	movlw	248
 26562  003946  1765               	andwf	RADIO_WritePower@paDac& (0+255),f,b
 26563                           
 26564                           ; BSR set to: 0
 26565                           ;radio_driver_SX1276.c: 361: paDac |= 0x04;
 26566  003948  8565               	bsf	RADIO_WritePower@paDac& (0+255),2,b
 26567                           
 26568                           ; BSR set to: 0
 26569                           ;radio_driver_SX1276.c: 362: RADIO_RegisterWrite(0x4D, paDac);
 26570  00394A  D849               	call	PL460	;call to abstracted procedure
 26571  00394C  EC31  F02F         	call	_RADIO_RegisterWrite
 26572                           
 26573                           ;radio_driver_SX1276.c: 364: if (power < 0)
 26574  003950  0100               	movlb	0	; () banked
 26575  003952  AF66               	btfss	RADIO_WritePower@power& (0+255),7,b
 26576  003954  D005               	goto	l12312
 26577                           
 26578                           ; BSR set to: 0
 26579                           ;radio_driver_SX1276.c: 365: {
 26580                           ;radio_driver_SX1276.c: 369: power += 3;
 26581  003956  0E03               	movlw	3
 26582  003958  2766               	addwf	RADIO_WritePower@power& (0+255),f,b
 26583                           
 26584                           ; BSR set to: 0
 26585                           ;radio_driver_SX1276.c: 370: RADIO_RegisterWrite(0x09, 0x20 | power);
 26586  00395A  5166               	movf	RADIO_WritePower@power& (0+255),w,b
 26587  00395C  0920               	iorlw	32
 26588  00395E  D002               	goto	L22
 26589  003960                     l12312:
 26590                           
 26591                           ; BSR set to: 0
 26592                           ;radio_driver_SX1276.c: 372: else
 26593                           ;radio_driver_SX1276.c: 373: {
 26594                           ;radio_driver_SX1276.c: 377: RADIO_RegisterWrite(0x09, 0x70 | power);
 26595  003960  5166               	movf	RADIO_WritePower@power& (0+255),w,b
 26596  003962  0970               	iorlw	112
 26597  003964                     L22:
 26598  003964  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26599  003966  0E09               	movlw	9
 26600  003968  EF31  F02F         	goto	_RADIO_RegisterWrite
 26601  00396C                     l12314:
 26602                           
 26603                           ; BSR set to: 1
 26604                           ;radio_driver_SX1276.c: 380: else
 26605                           ;radio_driver_SX1276.c: 381: {
 26606                           ;radio_driver_SX1276.c: 385: if (power < 2)
 26607  00396C  0100               	movlb	0	; () banked
 26608  00396E  5166               	movf	RADIO_WritePower@power& (0+255),w,b
 26609  003970  0A80               	xorlw	128
 26610  003972  0F7E               	addlw	-130
 26611  003974  E202               	bc	l12318
 26612                           
 26613                           ; BSR set to: 0
 26614                           ;radio_driver_SX1276.c: 386: {
 26615                           ;radio_driver_SX1276.c: 387: power = 2;
 26616  003976  0E02               	movlw	2
 26617  003978  6F66               	movwf	RADIO_WritePower@power& (0+255),b
 26618  00397A                     l12318:
 26619                           
 26620                           ; BSR set to: 0
 26621                           ;radio_driver_SX1276.c: 388: }
 26622                           ;radio_driver_SX1276.c: 391: if (power >= 20)
 26623  00397A  5166               	movf	RADIO_WritePower@power& (0+255),w,b
 26624  00397C  0A80               	xorlw	128
 26625  00397E  0F6C               	addlw	-148
 26626  003980  E302               	bnc	l12322
 26627                           
 26628                           ; BSR set to: 0
 26629                           ;radio_driver_SX1276.c: 392: {
 26630                           ;radio_driver_SX1276.c: 393: power = 20;
 26631  003982  0E14               	movlw	20
 26632  003984  D005               	goto	L21
 26633  003986                     l12322:
 26634                           
 26635                           ; BSR set to: 0
 26636                           ;radio_driver_SX1276.c: 395: else if (power > 17)
 26637  003986  5166               	movf	RADIO_WritePower@power& (0+255),w,b
 26638  003988  0A80               	xorlw	128
 26639  00398A  0F6E               	addlw	-146
 26640  00398C  E302               	bnc	l12326
 26641                           
 26642                           ; BSR set to: 0
 26643                           ;radio_driver_SX1276.c: 396: {
 26644                           ;radio_driver_SX1276.c: 397: power = 17;
 26645  00398E  0E11               	movlw	17
 26646  003990                     L21:
 26647  003990  6F66               	movwf	RADIO_WritePower@power& (0+255),b
 26648  003992                     l12326:
 26649                           
 26650                           ; BSR set to: 0
 26651                           ;radio_driver_SX1276.c: 398: }
 26652                           ;radio_driver_SX1276.c: 400: ocp = RADIO_RegisterRead(0x0B);
 26653  003992  0E0B               	movlw	11
 26654  003994  EC64  F02E         	call	_RADIO_RegisterRead
 26655  003998  6F64               	movwf	RADIO_WritePower@ocp& (0+255),b
 26656                           
 26657                           ; BSR set to: 0
 26658                           ;radio_driver_SX1276.c: 401: paDac = RADIO_RegisterRead(0x4D);
 26659  00399A  0E4D               	movlw	77
 26660  00399C  EC64  F02E         	call	_RADIO_RegisterRead
 26661  0039A0  6F65               	movwf	RADIO_WritePower@paDac& (0+255),b
 26662                           
 26663                           ; BSR set to: 0
 26664                           ;radio_driver_SX1276.c: 402: paDac &= ~(0x07);
 26665  0039A2  0EF8               	movlw	248
 26666  0039A4  1765               	andwf	RADIO_WritePower@paDac& (0+255),f,b
 26667                           
 26668                           ; BSR set to: 0
 26669                           ;radio_driver_SX1276.c: 403: if (power == 20)
 26670  0039A6  0E14               	movlw	20
 26671  0039A8  1966               	xorwf	RADIO_WritePower@power& (0+255),w,b
 26672  0039AA  E106               	bnz	l12340
 26673                           
 26674                           ; BSR set to: 0
 26675                           ;radio_driver_SX1276.c: 404: {
 26676                           ;radio_driver_SX1276.c: 405: paDac |= 0x07;
 26677  0039AC  0E07               	movlw	7
 26678  0039AE  1365               	iorwf	RADIO_WritePower@paDac& (0+255),f,b
 26679                           
 26680                           ; BSR set to: 0
 26681                           ;radio_driver_SX1276.c: 406: power = 15;
 26682  0039B0  0E0F               	movlw	15
 26683  0039B2  6F66               	movwf	RADIO_WritePower@power& (0+255),b
 26684                           
 26685                           ; BSR set to: 0
 26686                           ;radio_driver_SX1276.c: 407: ocp &= ~(0x20);
 26687  0039B4  9B64               	bcf	RADIO_WritePower@ocp& (0+255),5,b
 26688                           
 26689                           ;radio_driver_SX1276.c: 408: }
 26690  0039B6  D004               	goto	l12346
 26691  0039B8                     l12340:
 26692                           
 26693                           ; BSR set to: 0
 26694                           ;radio_driver_SX1276.c: 409: else
 26695                           ;radio_driver_SX1276.c: 410: {
 26696                           ;radio_driver_SX1276.c: 411: paDac |= 0x04;
 26697  0039B8  8565               	bsf	RADIO_WritePower@paDac& (0+255),2,b
 26698                           
 26699                           ; BSR set to: 0
 26700                           ;radio_driver_SX1276.c: 412: power -= 2;
 26701  0039BA  0EFE               	movlw	254
 26702  0039BC  2766               	addwf	RADIO_WritePower@power& (0+255),f,b
 26703                           
 26704                           ; BSR set to: 0
 26705                           ;radio_driver_SX1276.c: 413: ocp |= 0x20;
 26706  0039BE  8B64               	bsf	RADIO_WritePower@ocp& (0+255),5,b
 26707  0039C0                     l12346:
 26708                           
 26709                           ; BSR set to: 0
 26710                           ;radio_driver_SX1276.c: 414: }
 26711                           ;radio_driver_SX1276.c: 416: RADIO_RegisterWrite(0x4D, paDac);
 26712  0039C0  D80E               	call	PL460	;call to abstracted procedure
 26713  0039C2  EC31  F02F         	call	_RADIO_RegisterWrite
 26714                           
 26715                           ;radio_driver_SX1276.c: 417: RADIO_RegisterWrite(0x09, 0x80 | power);
 26716  0039C6  0100               	movlb	0	; () banked
 26717  0039C8  5166               	movf	RADIO_WritePower@power& (0+255),w,b
 26718  0039CA  0980               	iorlw	128
 26719  0039CC  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26720  0039CE  0E09               	movlw	9
 26721  0039D0  EC31  F02F         	call	_RADIO_RegisterWrite
 26722                           
 26723                           ;radio_driver_SX1276.c: 418: RADIO_RegisterWrite(0x0B, ocp);
 26724  0039D4  C064  F062         	movff	RADIO_WritePower@ocp,RADIO_RegisterWrite@value
 26725  0039D8  0E0B               	movlw	11
 26726  0039DA  EF31  F02F         	goto	_RADIO_RegisterWrite
 26727  0039DE                     __end_of_RADIO_WritePower:
 26728                           	opt stack 0
 26729  0039DE                     PL460:
 26730                           	opt stack 16
 26731  0039DE  C065  F062         	movff	RADIO_WritePower@paDac,RADIO_RegisterWrite@value
 26732  0039E2  0C4D               	retlw	77
 26733  0039E4                     __end_ofPL460:
 26734                           	opt stack 0
 26735                           tosu	equ	0xFFF
 26736                           tosh	equ	0xFFE
 26737                           tosl	equ	0xFFD
 26738                           pclath	equ	0xFFA
 26739                           tblptru	equ	0xFF8
 26740                           tblptrh	equ	0xFF7
 26741                           tblptrl	equ	0xFF6
 26742                           tablat	equ	0xFF5
 26743                           prodh	equ	0xFF4
 26744                           prodl	equ	0xFF3
 26745                           intcon	equ	0xFF2
 26746                           indf0	equ	0xFEF
 26747                           postinc0	equ	0xFEE
 26748                           plusw0	equ	0xFEB
 26749                           fsr0h	equ	0xFEA
 26750                           fsr0l	equ	0xFE9
 26751                           wreg	equ	0xFE8
 26752                           postinc1	equ	0xFE6
 26753                           postdec1	equ	0xFE5
 26754                           plusw1	equ	0xFE3
 26755                           fsr1h	equ	0xFE2
 26756                           fsr1l	equ	0xFE1
 26757                           indf2	equ	0xFDF
 26758                           postinc2	equ	0xFDE
 26759                           postdec2	equ	0xFDD
 26760                           plusw2	equ	0xFDB
 26761                           fsr2h	equ	0xFDA
 26762                           fsr2l	equ	0xFD9
 26763                           status	equ	0xFD8
 26764                           
 26765 ;; *************** function _RADIO_WriteFSKFrequencyDeviation *****************
 26766 ;; Defined at:
 26767 ;;		line 294 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 26768 ;; Parameters:    Size  Location     Type
 26769 ;;  frequencyDev    4   13[BANK0 ] unsigned long 
 26770 ;; Auto vars:     Size  Location     Type
 26771 ;;  num             4   17[BANK0 ] unsigned long 
 26772 ;; Return value:  Size  Location     Type
 26773 ;;                  1    wreg      void 
 26774 ;; Registers used:
 26775 ;;		wreg, status,2, status,0, cstack
 26776 ;; Tracked objects:
 26777 ;;		On entry : 3F/1
 26778 ;;		On exit  : 31/0
 26779 ;;		Unchanged: 0/0
 26780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 26781 ;;      Params:         0       4       0       0       0       0       0       0       0
 26782 ;;      Locals:         0       4       0       0       0       0       0       0       0
 26783 ;;      Temps:          0       0       0       0       0       0       0       0       0
 26784 ;;      Totals:         0       8       0       0       0       0       0       0       0
 26785 ;;Total ram usage:        8 bytes
 26786 ;; Hardware stack levels used:    1
 26787 ;; Hardware stack levels required when called:   10
 26788 ;; This function calls:
 26789 ;;		_RADIO_RegisterWrite
 26790 ;;		___lldiv
 26791 ;; This function is called by:
 26792 ;;		_RADIO_WriteConfiguration
 26793 ;; This function uses a non-reentrant model
 26794 ;;
 26795                           
 26796                           	psect	text138
 26797  004EAE                     __ptext138:
 26798                           	opt stack 0
 26799  004EAE                     _RADIO_WriteFSKFrequencyDeviation:
 26800                           	opt stack 16
 26801                           
 26802                           ; BSR set to: 1
 26803                           ;radio_driver_SX1276.c: 296: uint32_t num;
 26804                           ;radio_driver_SX1276.c: 303: num = frequencyDeviation;
 26805                           
 26806                           ;incstack = 0
 26807  004EAE  C06D  F071         	movff	RADIO_WriteFSKFrequencyDeviation@frequencyDeviation,RADIO_WriteFSKFrequencyDeviat
      +                          ion@num
 26808  004EB2  C06E  F072         	movff	RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+1,RADIO_WriteFSKFrequencyDevi
      +                          ation@num+1
 26809  004EB6  C06F  F073         	movff	RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+2,RADIO_WriteFSKFrequencyDevi
      +                          ation@num+2
 26810  004EBA  C070  F074         	movff	RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+3,RADIO_WriteFSKFrequencyDevi
      +                          ation@num+3
 26811                           
 26812                           ; BSR set to: 1
 26813                           ;radio_driver_SX1276.c: 304: num <<= (8);
 26814  004EBE  C073  F074         	movff	RADIO_WriteFSKFrequencyDeviation@num+2,RADIO_WriteFSKFrequencyDeviation@num+3
 26815  004EC2  C072  F073         	movff	RADIO_WriteFSKFrequencyDeviation@num+1,RADIO_WriteFSKFrequencyDeviation@num+2
 26816  004EC6  C071  F072         	movff	RADIO_WriteFSKFrequencyDeviation@num,RADIO_WriteFSKFrequencyDeviation@num+1
 26817  004ECA  0100               	movlb	0	; () banked
 26818  004ECC  6B71               	clrf	RADIO_WriteFSKFrequencyDeviation@num& (0+255),b
 26819                           
 26820                           ; BSR set to: 0
 26821                           ;radio_driver_SX1276.c: 305: num /= 15625;
 26822  004ECE  C071  F060         	movff	RADIO_WriteFSKFrequencyDeviation@num,___lldiv@dividend
 26823  004ED2  C072  F061         	movff	RADIO_WriteFSKFrequencyDeviation@num+1,___lldiv@dividend+1
 26824  004ED6  C073  F062         	movff	RADIO_WriteFSKFrequencyDeviation@num+2,___lldiv@dividend+2
 26825  004EDA  C074  F063         	movff	RADIO_WriteFSKFrequencyDeviation@num+3,___lldiv@dividend+3
 26826  004EDE  0E09               	movlw	9
 26827  004EE0  EC1A  F01C         	call	PL236	;call to abstracted procedure
 26828  004EE4  EC1B  F025         	call	___lldiv	;wreg free
 26829  004EE8  C060  F071         	movff	?___lldiv,RADIO_WriteFSKFrequencyDeviation@num
 26830  004EEC  C061  F072         	movff	?___lldiv+1,RADIO_WriteFSKFrequencyDeviation@num+1
 26831  004EF0  C062  F073         	movff	?___lldiv+2,RADIO_WriteFSKFrequencyDeviation@num+2
 26832  004EF4  C063  F074         	movff	?___lldiv+3,RADIO_WriteFSKFrequencyDeviation@num+3
 26833                           
 26834                           ; BSR set to: 0
 26835                           ;radio_driver_SX1276.c: 309: RADIO_RegisterWrite(0x04, (num >> (8)) & 0xFF);
 26836  004EF8  C072  F062         	movff	RADIO_WriteFSKFrequencyDeviation@num+1,RADIO_RegisterWrite@value
 26837  004EFC  0E04               	movlw	4
 26838  004EFE  EC31  F02F         	call	_RADIO_RegisterWrite
 26839                           
 26840                           ;radio_driver_SX1276.c: 310: RADIO_RegisterWrite(0x05, num & 0xFF);
 26841  004F02  C071  F062         	movff	RADIO_WriteFSKFrequencyDeviation@num,RADIO_RegisterWrite@value
 26842  004F06  0E05               	movlw	5
 26843  004F08  EF31  F02F         	goto	_RADIO_RegisterWrite
 26844  004F0C                     __end_of_RADIO_WriteFSKFrequencyDeviation:
 26845                           	opt stack 0
 26846                           tosu	equ	0xFFF
 26847                           tosh	equ	0xFFE
 26848                           tosl	equ	0xFFD
 26849                           pclath	equ	0xFFA
 26850                           tblptru	equ	0xFF8
 26851                           tblptrh	equ	0xFF7
 26852                           tblptrl	equ	0xFF6
 26853                           tablat	equ	0xFF5
 26854                           prodh	equ	0xFF4
 26855                           prodl	equ	0xFF3
 26856                           intcon	equ	0xFF2
 26857                           indf0	equ	0xFEF
 26858                           postinc0	equ	0xFEE
 26859                           plusw0	equ	0xFEB
 26860                           fsr0h	equ	0xFEA
 26861                           fsr0l	equ	0xFE9
 26862                           wreg	equ	0xFE8
 26863                           postinc1	equ	0xFE6
 26864                           postdec1	equ	0xFE5
 26865                           plusw1	equ	0xFE3
 26866                           fsr1h	equ	0xFE2
 26867                           fsr1l	equ	0xFE1
 26868                           indf2	equ	0xFDF
 26869                           postinc2	equ	0xFDE
 26870                           postdec2	equ	0xFDD
 26871                           plusw2	equ	0xFDB
 26872                           fsr2h	equ	0xFDA
 26873                           fsr2l	equ	0xFD9
 26874                           status	equ	0xFD8
 26875                           
 26876 ;; *************** function _RADIO_WriteFSKBitRate *****************
 26877 ;; Defined at:
 26878 ;;		line 316 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 26879 ;; Parameters:    Size  Location     Type
 26880 ;;  bitRate         4   13[BANK0 ] unsigned long 
 26881 ;; Auto vars:     Size  Location     Type
 26882 ;;  num             4   17[BANK0 ] unsigned long 
 26883 ;; Return value:  Size  Location     Type
 26884 ;;                  1    wreg      void 
 26885 ;; Registers used:
 26886 ;;		wreg, status,2, status,0, cstack
 26887 ;; Tracked objects:
 26888 ;;		On entry : 31/0
 26889 ;;		On exit  : 31/0
 26890 ;;		Unchanged: 0/0
 26891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 26892 ;;      Params:         0       4       0       0       0       0       0       0       0
 26893 ;;      Locals:         0       4       0       0       0       0       0       0       0
 26894 ;;      Temps:          0       0       0       0       0       0       0       0       0
 26895 ;;      Totals:         0       8       0       0       0       0       0       0       0
 26896 ;;Total ram usage:        8 bytes
 26897 ;; Hardware stack levels used:    1
 26898 ;; Hardware stack levels required when called:   10
 26899 ;; This function calls:
 26900 ;;		_RADIO_RegisterWrite
 26901 ;;		___lldiv
 26902 ;; This function is called by:
 26903 ;;		_RADIO_WriteConfiguration
 26904 ;; This function uses a non-reentrant model
 26905 ;;
 26906                           
 26907                           	psect	text139
 26908  004DEA                     __ptext139:
 26909                           	opt stack 0
 26910  004DEA                     _RADIO_WriteFSKBitRate:
 26911                           	opt stack 16
 26912                           
 26913                           ;radio_driver_SX1276.c: 318: uint32_t num;
 26914                           ;radio_driver_SX1276.c: 320: num = 32000000;
 26915                           
 26916                           ;incstack = 0
 26917  004DEA  0100               	movlb	0	; () banked
 26918  004DEC  6B71               	clrf	RADIO_WriteFSKBitRate@num& (0+255),b
 26919  004DEE  0E48               	movlw	72
 26920  004DF0  6F72               	movwf	(RADIO_WriteFSKBitRate@num+1)& (0+255),b
 26921  004DF2  0EE8               	movlw	232
 26922  004DF4  6F73               	movwf	(RADIO_WriteFSKBitRate@num+2)& (0+255),b
 26923  004DF6  0E01               	movlw	1
 26924  004DF8  6F74               	movwf	(RADIO_WriteFSKBitRate@num+3)& (0+255),b
 26925                           
 26926                           ; BSR set to: 0
 26927                           ;radio_driver_SX1276.c: 321: num /= bitRate;
 26928  004DFA  C071  F060         	movff	RADIO_WriteFSKBitRate@num,___lldiv@dividend
 26929  004DFE  C072  F061         	movff	RADIO_WriteFSKBitRate@num+1,___lldiv@dividend+1
 26930  004E02  C073  F062         	movff	RADIO_WriteFSKBitRate@num+2,___lldiv@dividend+2
 26931  004E06  C074  F063         	movff	RADIO_WriteFSKBitRate@num+3,___lldiv@dividend+3
 26932  004E0A  C06D  F064         	movff	RADIO_WriteFSKBitRate@bitRate,___lldiv@divisor
 26933  004E0E  C06E  F065         	movff	RADIO_WriteFSKBitRate@bitRate+1,___lldiv@divisor+1
 26934  004E12  C06F  F066         	movff	RADIO_WriteFSKBitRate@bitRate+2,___lldiv@divisor+2
 26935  004E16  C070  F067         	movff	RADIO_WriteFSKBitRate@bitRate+3,___lldiv@divisor+3
 26936  004E1A  EC1B  F025         	call	___lldiv	;wreg free
 26937  004E1E  C060  F071         	movff	?___lldiv,RADIO_WriteFSKBitRate@num
 26938  004E22  C061  F072         	movff	?___lldiv+1,RADIO_WriteFSKBitRate@num+1
 26939  004E26  C062  F073         	movff	?___lldiv+2,RADIO_WriteFSKBitRate@num+2
 26940  004E2A  C063  F074         	movff	?___lldiv+3,RADIO_WriteFSKBitRate@num+3
 26941                           
 26942                           ; BSR set to: 0
 26943                           ;radio_driver_SX1276.c: 325: RADIO_RegisterWrite(0x02, (num >> (8)) & 0xFF);
 26944  004E2E  C072  F062         	movff	RADIO_WriteFSKBitRate@num+1,RADIO_RegisterWrite@value
 26945  004E32  0E02               	movlw	2
 26946  004E34  EC31  F02F         	call	_RADIO_RegisterWrite
 26947                           
 26948                           ;radio_driver_SX1276.c: 326: RADIO_RegisterWrite(0x03, num & 0xFF);
 26949  004E38  C071  F062         	movff	RADIO_WriteFSKBitRate@num,RADIO_RegisterWrite@value
 26950  004E3C  0E03               	movlw	3
 26951  004E3E  EC31  F02F         	call	_RADIO_RegisterWrite
 26952                           
 26953                           ;radio_driver_SX1276.c: 327: RADIO_RegisterWrite(0x5D, 0x00);
 26954  004E42  0100               	movlb	0	; () banked
 26955  004E44  6B62               	clrf	RADIO_RegisterWrite@value& (0+255),b
 26956  004E46  0E5D               	movlw	93
 26957  004E48  EF31  F02F         	goto	_RADIO_RegisterWrite
 26958  004E4C                     __end_of_RADIO_WriteFSKBitRate:
 26959                           	opt stack 0
 26960                           tosu	equ	0xFFF
 26961                           tosh	equ	0xFFE
 26962                           tosl	equ	0xFFD
 26963                           pclath	equ	0xFFA
 26964                           tblptru	equ	0xFF8
 26965                           tblptrh	equ	0xFF7
 26966                           tblptrl	equ	0xFF6
 26967                           tablat	equ	0xFF5
 26968                           prodh	equ	0xFF4
 26969                           prodl	equ	0xFF3
 26970                           intcon	equ	0xFF2
 26971                           indf0	equ	0xFEF
 26972                           postinc0	equ	0xFEE
 26973                           plusw0	equ	0xFEB
 26974                           fsr0h	equ	0xFEA
 26975                           fsr0l	equ	0xFE9
 26976                           wreg	equ	0xFE8
 26977                           postinc1	equ	0xFE6
 26978                           postdec1	equ	0xFE5
 26979                           plusw1	equ	0xFE3
 26980                           fsr1h	equ	0xFE2
 26981                           fsr1l	equ	0xFE1
 26982                           indf2	equ	0xFDF
 26983                           postinc2	equ	0xFDE
 26984                           postdec2	equ	0xFDD
 26985                           plusw2	equ	0xFDB
 26986                           fsr2h	equ	0xFDA
 26987                           fsr2l	equ	0xFD9
 26988                           status	equ	0xFD8
 26989                           
 26990 ;; *************** function _PrepareJoinRequestFrame *****************
 26991 ;; Defined at:
 26992 ;;		line 1806 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 26993 ;; Parameters:    Size  Location     Type
 26994 ;;		None
 26995 ;; Auto vars:     Size  Location     Type
 26996 ;;  mic             4  124[BANK0 ] unsigned long 
 26997 ;;  iCtr            1  130[BANK0 ] unsigned char 
 26998 ;;  bufferIndex     1  129[BANK0 ] unsigned char 
 26999 ;;  mhdr            1  128[BANK0 ] struct .
 27000 ;; Return value:  Size  Location     Type
 27001 ;;                  1    wreg      unsigned char 
 27002 ;; Registers used:
 27003 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27004 ;; Tracked objects:
 27005 ;;		On entry : 3F/2
 27006 ;;		On exit  : 3F/0
 27007 ;;		Unchanged: 0/0
 27008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27009 ;;      Params:         0       0       0       0       0       0       0       0       0
 27010 ;;      Locals:         0       7       0       0       0       0       0       0       0
 27011 ;;      Temps:          0       2       0       0       0       0       0       0       0
 27012 ;;      Totals:         0       9       0       0       0       0       0       0       0
 27013 ;;Total ram usage:        9 bytes
 27014 ;; Hardware stack levels used:    1
 27015 ;; Hardware stack levels required when called:   13
 27016 ;; This function calls:
 27017 ;;		_ComputeMic
 27018 ;;		_Random
 27019 ;;		_memcpy
 27020 ;;		_memset
 27021 ;; This function is called by:
 27022 ;;		_LORAWAN_Join
 27023 ;; This function uses a non-reentrant model
 27024 ;;
 27025                           
 27026                           	psect	text140
 27027  002DFA                     __ptext140:
 27028                           	opt stack 0
 27029  002DFA                     _PrepareJoinRequestFrame:
 27030                           	opt stack 16
 27031                           
 27032                           ; BSR set to: 2
 27033                           ;lorawan.c: 1808: uint8_t bufferIndex = 0, iCtr;
 27034                           
 27035                           ;incstack = 0
 27036  002DFA  0100               	movlb	0	; () banked
 27037  002DFC  6BE1               	clrf	PrepareJoinRequestFrame@bufferIndex& (0+255),b
 27038                           
 27039                           ; BSR set to: 0
 27040                           ;lorawan.c: 1809: Mhdr_t mhdr;
 27041                           ;lorawan.c: 1810: uint32_t mic;
 27042                           ;lorawan.c: 1812: memset (macBuffer, 0, sizeof(macBuffer) );
 27043  002DFE  D868               	call	PL166	;call to abstracted procedure
 27044  002E00  ECEF  F02D         	call	_memset	;wreg free
 27045                           
 27046                           ; BSR set to: 0
 27047                           ;lorawan.c: 1814: mhdr.bits.mType = FRAME_TYPE_JOIN_REQ;
 27048  002E04  0E1F               	movlw	-225
 27049  002E06  17E0               	andwf	PrepareJoinRequestFrame@mhdr& (0+255),f,b
 27050                           
 27051                           ; BSR set to: 0
 27052                           ;lorawan.c: 1815: mhdr.bits.major = 0;
 27053  002E08  0EFC               	movlw	-4
 27054  002E0A  17E0               	andwf	PrepareJoinRequestFrame@mhdr& (0+255),f,b
 27055                           
 27056                           ; BSR set to: 0
 27057                           ;lorawan.c: 1816: mhdr.bits.rfu = 0;
 27058  002E0C  0EE3               	movlw	-29
 27059  002E0E  17E0               	andwf	PrepareJoinRequestFrame@mhdr& (0+255),f,b
 27060                           
 27061                           ; BSR set to: 0
 27062                           ;lorawan.c: 1818: macBuffer[bufferIndex++] = mhdr.value;
 27063  002E10  EE25  F0EF         	lfsr	2,_macBuffer
 27064  002E14  C0E0  FFDF         	movff	PrepareJoinRequestFrame@mhdr,indf2
 27065                           
 27066                           ; BSR set to: 0
 27067  002E18  2BE1               	incf	PrepareJoinRequestFrame@bufferIndex& (0+255),f,b
 27068                           
 27069                           ; BSR set to: 0
 27070                           ;lorawan.c: 1820: for(iCtr = 0; iCtr < 8; iCtr ++)
 27071  002E1A  6BE2               	clrf	PrepareJoinRequestFrame@iCtr& (0+255),b
 27072  002E1C                     l15224:
 27073                           
 27074                           ; BSR set to: 0
 27075                           ;lorawan.c: 1821: {
 27076                           ;lorawan.c: 1822: macBuffer[bufferIndex + iCtr] = loRa.activationParameters.applicationE
      +                          ui.buffer[7 - iCtr];
 27077  002E1C  51E2               	movf	PrepareJoinRequestFrame@iCtr& (0+255),w,b
 27078  002E1E  0859               	sublw	low (_loRa+89)
 27079  002E20  6ED9               	movwf	fsr2l,c
 27080  002E22  0E00               	movlw	0
 27081  002E24  A0D8               	btfss	status,0,c
 27082  002E26  2AE8               	incf	wreg,f,c
 27083  002E28  0802               	sublw	high (_loRa+89)
 27084                           
 27085                           ; BSR set to: 0
 27086                           
 27087                           ; BSR set to: 0
 27088  002E2A  D83F               	call	PL76	;call to abstracted procedure
 27089  002E2C  65E2               	cpfsgt	PrepareJoinRequestFrame@iCtr& (0+255),b
 27090  002E2E  D7F6               	goto	l15224
 27091                           
 27092                           ; BSR set to: 0
 27093                           ;lorawan.c: 1823: }
 27094                           ;lorawan.c: 1824: bufferIndex = bufferIndex + sizeof(loRa.activationParameters.applicati
      +                          onEui);
 27095  002E30  0E08               	movlw	8
 27096  002E32  27E1               	addwf	PrepareJoinRequestFrame@bufferIndex& (0+255),f,b
 27097                           
 27098                           ; BSR set to: 0
 27099                           ;lorawan.c: 1827: for (iCtr = 0; iCtr < 8; iCtr ++)
 27100  002E34  6BE2               	clrf	PrepareJoinRequestFrame@iCtr& (0+255),b
 27101  002E36                     l15236:
 27102                           
 27103                           ; BSR set to: 0
 27104                           ;lorawan.c: 1828: {
 27105                           ;lorawan.c: 1829: macBuffer[bufferIndex + iCtr] = loRa.activationParameters.deviceEui.bu
      +                          ffer[7 - iCtr];
 27106  002E36  51E2               	movf	PrepareJoinRequestFrame@iCtr& (0+255),w,b
 27107  002E38  0861               	sublw	low (_loRa+97)
 27108  002E3A  6ED9               	movwf	fsr2l,c
 27109  002E3C  0E00               	movlw	0
 27110  002E3E  A0D8               	btfss	status,0,c
 27111  002E40  2AE8               	incf	wreg,f,c
 27112  002E42  0802               	sublw	high (_loRa+97)
 27113                           
 27114                           ; BSR set to: 0
 27115                           
 27116                           ; BSR set to: 0
 27117  002E44  D832               	call	PL76	;call to abstracted procedure
 27118  002E46  65E2               	cpfsgt	PrepareJoinRequestFrame@iCtr& (0+255),b
 27119  002E48  D7F6               	goto	l15236
 27120                           
 27121                           ; BSR set to: 0
 27122                           ;lorawan.c: 1830: }
 27123                           ;lorawan.c: 1831: bufferIndex = bufferIndex + sizeof( loRa.activationParameters.deviceEu
      +                          i );
 27124  002E4A  0E08               	movlw	8
 27125  002E4C  27E1               	addwf	PrepareJoinRequestFrame@bufferIndex& (0+255),f,b
 27126                           
 27127                           ; BSR set to: 0
 27128                           ;lorawan.c: 1833: loRa.devNonce = Random ((65535U));
 27129  002E4E  69A4               	setf	(Random@max+1)& (0+255),b
 27130  002E50  69A3               	setf	Random@max& (0+255),b
 27131  002E52  ECD1  F02E         	call	_Random	;wreg free
 27132  002E56  C0A3  F2D2         	movff	?_Random,_loRa+210
 27133  002E5A  C0A4  F2D3         	movff	?_Random+1,_loRa+211
 27134                           
 27135                           ; BSR set to: 0
 27136                           ;lorawan.c: 1834: memcpy (&macBuffer[bufferIndex], &loRa.devNonce, sizeof (loRa.devNonce
      +                          ) );
 27137  002E5E  0EEF               	movlw	low _macBuffer
 27138  002E60  25E1               	addwf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 27139  002E62  D841               	call	PL178	;call to abstracted procedure
 27140  002E64  D849               	call	PL262	;call to abstracted procedure
 27141  002E66  EC94  F028         	call	_memcpy	;wreg free
 27142                           
 27143                           ; BSR set to: 0
 27144                           ;lorawan.c: 1835: bufferIndex = bufferIndex + sizeof( loRa.devNonce );
 27145  002E6A  0E02               	movlw	2
 27146  002E6C  27E1               	addwf	PrepareJoinRequestFrame@bufferIndex& (0+255),f,b
 27147                           
 27148                           ; BSR set to: 0
 27149                           ;lorawan.c: 1837: mic = ComputeMic (loRa.activationParameters.applicationKey, macBuffer,
      +                           bufferIndex);
 27150  002E6E  D84C               	call	PL348	;call to abstracted procedure
 27151  002E70  0EEF               	movlw	low _macBuffer
 27152  002E72  6F68               	movwf	ComputeMic@buffer& (0+255),b
 27153  002E74  0E05               	movlw	high _macBuffer
 27154  002E76  6F69               	movwf	(ComputeMic@buffer+1)& (0+255),b
 27155  002E78  C0E1  F16A         	movff	PrepareJoinRequestFrame@bufferIndex,ComputeMic@bufferLength
 27156  002E7C  ECB9  F02A         	call	_ComputeMic	;wreg free
 27157  002E80  C166  F0DC         	movff	?_ComputeMic,PrepareJoinRequestFrame@mic
 27158  002E84  C167  F0DD         	movff	?_ComputeMic+1,PrepareJoinRequestFrame@mic+1
 27159  002E88  C168  F0DE         	movff	?_ComputeMic+2,PrepareJoinRequestFrame@mic+2
 27160  002E8C  C169  F0DF         	movff	?_ComputeMic+3,PrepareJoinRequestFrame@mic+3
 27161                           
 27162                           ; BSR set to: 0
 27163                           ;lorawan.c: 1839: memcpy ( &macBuffer[bufferIndex], &mic, sizeof (mic));
 27164  002E90  0EEF               	movlw	low _macBuffer
 27165  002E92  25E1               	addwf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 27166  002E94  D828               	call	PL178	;call to abstracted procedure
 27167  002E96  0EDC               	movlw	low PrepareJoinRequestFrame@mic
 27168  002E98  6F62               	movwf	memcpy@s1& (0+255),b
 27169  002E9A  6B63               	clrf	(memcpy@s1+1)& (0+255),b
 27170  002E9C  D829               	call	PL250	;call to abstracted procedure
 27171  002E9E  EC94  F028         	call	_memcpy	;wreg free
 27172                           
 27173                           ; BSR set to: 0
 27174                           ;lorawan.c: 1840: bufferIndex = bufferIndex + sizeof(mic);
 27175  002EA2  0E04               	movlw	4
 27176  002EA4  27E1               	addwf	PrepareJoinRequestFrame@bufferIndex& (0+255),f,b
 27177                           
 27178                           ; BSR set to: 0
 27179                           ;lorawan.c: 1842: return bufferIndex;
 27180  002EA6  51E1               	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 27181                           
 27182                           ; BSR set to: 0
 27183  002EA8  0012               	return		;funcret
 27184  002EAA                     __end_of_PrepareJoinRequestFrame:
 27185                           	opt stack 0
 27186  002EAA                     PL76:
 27187                           	opt stack 16
 27188  002EAA  6EDA               	movwf	fsr2h,c
 27189  002EAC  0EEF               	movlw	low _macBuffer
 27190  002EAE  6FDA               	movwf	??_PrepareJoinRequestFrame& (0+255),b
 27191  002EB0  0E05               	movlw	high _macBuffer
 27192  002EB2  6FDB               	movwf	(??_PrepareJoinRequestFrame+1)& (0+255),b
 27193  002EB4  51E1               	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 27194  002EB6  27DA               	addwf	??_PrepareJoinRequestFrame& (0+255),f,b
 27195  002EB8  0E00               	movlw	0
 27196  002EBA  23DB               	addwfc	(??_PrepareJoinRequestFrame+1)& (0+255),f,b
 27197  002EBC  51E2               	movf	PrepareJoinRequestFrame@iCtr& (0+255),w,b
 27198  002EBE  25DA               	addwf	??_PrepareJoinRequestFrame& (0+255),w,b
 27199  002EC0  6EE9               	movwf	fsr0l,c
 27200  002EC2  0E00               	movlw	0
 27201  002EC4  21DB               	addwfc	(??_PrepareJoinRequestFrame+1)& (0+255),w,b
 27202  002EC6  6EEA               	movwf	fsr0h,c
 27203  002EC8  CFDF FFEF          	movff	indf2,indf0
 27204  002ECC  2BE2               	incf	PrepareJoinRequestFrame@iCtr& (0+255),f,b
 27205  002ECE  0C07               	retlw	7
 27206  002ED0                     __end_ofPL76:
 27207                           	opt stack 0
 27208  002ED0                     PL166:
 27209                           	opt stack 16
 27210  002ED0  0EEF               	movlw	low _macBuffer
 27211  002ED2  6F60               	movwf	memset@p1& (0+255),b
 27212  002ED4  0E05               	movlw	high _macBuffer
 27213  002ED6  6F61               	movwf	(memset@p1+1)& (0+255),b
 27214  002ED8  6B63               	clrf	(memset@c+1)& (0+255),b
 27215  002EDA  6B62               	clrf	memset@c& (0+255),b
 27216  002EDC  0E01               	movlw	1
 27217  002EDE  6F65               	movwf	(memset@n+1)& (0+255),b
 27218  002EE0  0E0F               	movlw	15
 27219  002EE2  6F64               	movwf	memset@n& (0+255),b
 27220  002EE4  0C0F               	retlw	15
 27221  002EE6                     __end_ofPL166:
 27222                           	opt stack 0
 27223  002EE6                     PL178:
 27224                           	opt stack 16
 27225  002EE6  6F60               	movwf	memcpy@d1& (0+255),b
 27226  002EE8  6B61               	clrf	(memcpy@d1+1)& (0+255),b
 27227  002EEA  0E05               	movlw	high _macBuffer
 27228  002EEC  2361               	addwfc	(memcpy@d1+1)& (0+255),f,b
 27229  002EEE  0012               	return	
 27230  002EF0                     __end_ofPL178:
 27231                           	opt stack 0
 27232  002EF0                     PL250:
 27233                           	opt stack 18
 27234  002EF0  6B65               	clrf	(memcpy@n+1)& (0+255),b
 27235  002EF2  0E04               	movlw	4
 27236  002EF4  6F64               	movwf	memcpy@n& (0+255),b
 27237  002EF6  0C04               	retlw	4
 27238  002EF8                     __end_ofPL250:
 27239                           	opt stack 0
 27240  002EF8                     PL262:
 27241                           	opt stack 17
 27242  002EF8  0ED2               	movlw	low (_loRa+210)
 27243  002EFA  6F62               	movwf	memcpy@s1& (0+255),b
 27244  002EFC  0E02               	movlw	high (_loRa+210)
 27245  002EFE  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 27246  002F00  6B65               	clrf	(memcpy@n+1)& (0+255),b
 27247  002F02  0E02               	movlw	2
 27248  002F04  6F64               	movwf	memcpy@n& (0+255),b
 27249  002F06  0C02               	retlw	2
 27250  002F08                     __end_ofPL262:
 27251                           	opt stack 0
 27252  002F08                     PL348:
 27253                           	opt stack 12
 27254  002F08  0E42               	movlw	low (_loRa+66)
 27255  002F0A  0101               	movlb	1	; () banked
 27256  002F0C  6F66               	movwf	ComputeMic@key& (0+255),b
 27257  002F0E  0E02               	movlw	high (_loRa+66)
 27258  002F10  6F67               	movwf	(ComputeMic@key+1)& (0+255),b
 27259  002F12  0012               	return	
 27260  002F14                     __end_ofPL348:
 27261                           	opt stack 0
 27262                           tosu	equ	0xFFF
 27263                           tosh	equ	0xFFE
 27264                           tosl	equ	0xFFD
 27265                           pclath	equ	0xFFA
 27266                           tblptru	equ	0xFF8
 27267                           tblptrh	equ	0xFF7
 27268                           tblptrl	equ	0xFF6
 27269                           tablat	equ	0xFF5
 27270                           prodh	equ	0xFF4
 27271                           prodl	equ	0xFF3
 27272                           intcon	equ	0xFF2
 27273                           indf0	equ	0xFEF
 27274                           postinc0	equ	0xFEE
 27275                           plusw0	equ	0xFEB
 27276                           fsr0h	equ	0xFEA
 27277                           fsr0l	equ	0xFE9
 27278                           wreg	equ	0xFE8
 27279                           postinc1	equ	0xFE6
 27280                           postdec1	equ	0xFE5
 27281                           plusw1	equ	0xFE3
 27282                           fsr1h	equ	0xFE2
 27283                           fsr1l	equ	0xFE1
 27284                           indf2	equ	0xFDF
 27285                           postinc2	equ	0xFDE
 27286                           postdec2	equ	0xFDD
 27287                           plusw2	equ	0xFDB
 27288                           fsr2h	equ	0xFDA
 27289                           fsr2l	equ	0xFD9
 27290                           status	equ	0xFD8
 27291                           
 27292 ;; *************** function _Random *****************
 27293 ;; Defined at:
 27294 ;;		line 1116 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 27295 ;; Parameters:    Size  Location     Type
 27296 ;;  max             2   67[BANK0 ] unsigned int 
 27297 ;; Auto vars:     Size  Location     Type
 27298 ;;		None
 27299 ;; Return value:  Size  Location     Type
 27300 ;;                  2   67[BANK0 ] unsigned int 
 27301 ;; Registers used:
 27302 ;;		wreg, status,2, status,0, cstack
 27303 ;; Tracked objects:
 27304 ;;		On entry : 3F/0
 27305 ;;		On exit  : 3F/0
 27306 ;;		Unchanged: 0/0
 27307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27308 ;;      Params:         0       2       0       0       0       0       0       0       0
 27309 ;;      Locals:         0       0       0       0       0       0       0       0       0
 27310 ;;      Temps:          0       0       0       0       0       0       0       0       0
 27311 ;;      Totals:         0       2       0       0       0       0       0       0       0
 27312 ;;Total ram usage:        2 bytes
 27313 ;; Hardware stack levels used:    1
 27314 ;; Hardware stack levels required when called:    9
 27315 ;; This function calls:
 27316 ;;		___lwmod
 27317 ;;		_rand
 27318 ;; This function is called by:
 27319 ;;		_PrepareJoinRequestFrame
 27320 ;;		_SearchAvailableChannel
 27321 ;; This function uses a non-reentrant model
 27322 ;;
 27323                           
 27324                           	psect	text141
 27325  005DA2                     __ptext141:
 27326                           	opt stack 0
 27327  005DA2                     _Random:
 27328                           	opt stack 17
 27329                           
 27330                           ; BSR set to: 0
 27331                           ;lorawan.c: 1118: return (rand () % max);
 27332                           
 27333                           ; BSR set to: 0
 27334                           ;incstack = 0
 27335  005DA2  ECB1  F029         	call	_rand	;wreg free
 27336  005DA6  C09C  F09E         	movff	?_rand,___lwmod@dividend
 27337  005DAA  C09D  F09F         	movff	?_rand+1,___lwmod@dividend+1
 27338  005DAE  C0A3  F0A0         	movff	Random@max,___lwmod@divisor
 27339  005DB2  C0A4  F0A1         	movff	Random@max+1,___lwmod@divisor+1
 27340  005DB6  EC5F  F02B         	call	___lwmod	;wreg free
 27341  005DBA  C09E  F0A3         	movff	?___lwmod,?_Random
 27342  005DBE  C09F  F0A4         	movff	?___lwmod+1,?_Random+1
 27343                           
 27344                           ; BSR set to: 0
 27345  005DC2  0012               	return		;funcret
 27346  005DC4                     __end_of_Random:
 27347                           	opt stack 0
 27348                           tosu	equ	0xFFF
 27349                           tosh	equ	0xFFE
 27350                           tosl	equ	0xFFD
 27351                           pclath	equ	0xFFA
 27352                           tblptru	equ	0xFF8
 27353                           tblptrh	equ	0xFF7
 27354                           tblptrl	equ	0xFF6
 27355                           tablat	equ	0xFF5
 27356                           prodh	equ	0xFF4
 27357                           prodl	equ	0xFF3
 27358                           intcon	equ	0xFF2
 27359                           indf0	equ	0xFEF
 27360                           postinc0	equ	0xFEE
 27361                           plusw0	equ	0xFEB
 27362                           fsr0h	equ	0xFEA
 27363                           fsr0l	equ	0xFE9
 27364                           wreg	equ	0xFE8
 27365                           postinc1	equ	0xFE6
 27366                           postdec1	equ	0xFE5
 27367                           plusw1	equ	0xFE3
 27368                           fsr1h	equ	0xFE2
 27369                           fsr1l	equ	0xFE1
 27370                           indf2	equ	0xFDF
 27371                           postinc2	equ	0xFDE
 27372                           postdec2	equ	0xFDD
 27373                           plusw2	equ	0xFDB
 27374                           fsr2h	equ	0xFDA
 27375                           fsr2l	equ	0xFD9
 27376                           status	equ	0xFD8
 27377                           
 27378 ;; *************** function _rand *****************
 27379 ;; Defined at:
 27380 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\rand.c"
 27381 ;; Parameters:    Size  Location     Type
 27382 ;;		None
 27383 ;; Auto vars:     Size  Location     Type
 27384 ;;		None
 27385 ;; Return value:  Size  Location     Type
 27386 ;;                  2   60[BANK0 ] int 
 27387 ;; Registers used:
 27388 ;;		wreg, status,2, status,0, cstack
 27389 ;; Tracked objects:
 27390 ;;		On entry : 3F/0
 27391 ;;		On exit  : 3F/0
 27392 ;;		Unchanged: 0/0
 27393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27394 ;;      Params:         0       2       0       0       0       0       0       0       0
 27395 ;;      Locals:         0       0       0       0       0       0       0       0       0
 27396 ;;      Temps:          0       0       0       0       0       0       0       0       0
 27397 ;;      Totals:         0       2       0       0       0       0       0       0       0
 27398 ;;Total ram usage:        2 bytes
 27399 ;; Hardware stack levels used:    1
 27400 ;; Hardware stack levels required when called:    8
 27401 ;; This function calls:
 27402 ;;		___lmul
 27403 ;; This function is called by:
 27404 ;;		_Random
 27405 ;; This function uses a non-reentrant model
 27406 ;;
 27407                           
 27408                           	psect	text142
 27409  005362                     __ptext142:
 27410                           	opt stack 0
 27411  005362                     _rand:
 27412                           	opt stack 17
 27413                           
 27414                           ; BSR set to: 0
 27415                           
 27416                           ; BSR set to: 0
 27417                           ;incstack = 0
 27418  005362  C054  F090         	movff	_randx,___lmul@multiplier
 27419  005366  C055  F091         	movff	_randx+1,___lmul@multiplier+1
 27420  00536A  C056  F092         	movff	_randx+2,___lmul@multiplier+2
 27421  00536E  C057  F093         	movff	_randx+3,___lmul@multiplier+3
 27422  005372  0E6D               	movlw	109
 27423  005374  6F94               	movwf	___lmul@multiplicand& (0+255),b
 27424  005376  0E4E               	movlw	78
 27425  005378  6F95               	movwf	(___lmul@multiplicand+1)& (0+255),b
 27426  00537A  0EC6               	movlw	198
 27427  00537C  6F96               	movwf	(___lmul@multiplicand+2)& (0+255),b
 27428  00537E  0E41               	movlw	65
 27429  005380  6F97               	movwf	(___lmul@multiplicand+3)& (0+255),b
 27430  005382  EC25  F02A         	call	___lmul	;wreg free
 27431  005386  C090  F054         	movff	?___lmul,_randx
 27432  00538A  C091  F055         	movff	?___lmul+1,_randx+1
 27433  00538E  C092  F056         	movff	?___lmul+2,_randx+2
 27434  005392  C093  F057         	movff	?___lmul+3,_randx+3
 27435                           
 27436                           ; BSR set to: 0
 27437  005396  0E39               	movlw	57
 27438  005398  2654               	addwf	_randx,f,c
 27439  00539A  0E30               	movlw	48
 27440  00539C  2255               	addwfc	_randx+1,f,c
 27441  00539E  0E00               	movlw	0
 27442  0053A0  2256               	addwfc	_randx+2,f,c
 27443  0053A2  2257               	addwfc	_randx+3,f,c
 27444                           
 27445                           ; BSR set to: 0
 27446  0053A4  5056               	movf	_randx+2,w,c
 27447  0053A6  6F9C               	movwf	?_rand& (0+255),b
 27448  0053A8  0E7F               	movlw	127
 27449  0053AA  1457               	andwf	_randx+3,w,c
 27450  0053AC  6F9D               	movwf	(?_rand+1)& (0+255),b
 27451                           
 27452                           ; BSR set to: 0
 27453  0053AE  0012               	return		;funcret
 27454  0053B0                     __end_of_rand:
 27455                           	opt stack 0
 27456                           tosu	equ	0xFFF
 27457                           tosh	equ	0xFFE
 27458                           tosl	equ	0xFFD
 27459                           pclath	equ	0xFFA
 27460                           tblptru	equ	0xFF8
 27461                           tblptrh	equ	0xFF7
 27462                           tblptrl	equ	0xFF6
 27463                           tablat	equ	0xFF5
 27464                           prodh	equ	0xFF4
 27465                           prodl	equ	0xFF3
 27466                           intcon	equ	0xFF2
 27467                           indf0	equ	0xFEF
 27468                           postinc0	equ	0xFEE
 27469                           plusw0	equ	0xFEB
 27470                           fsr0h	equ	0xFEA
 27471                           fsr0l	equ	0xFE9
 27472                           wreg	equ	0xFE8
 27473                           postinc1	equ	0xFE6
 27474                           postdec1	equ	0xFE5
 27475                           plusw1	equ	0xFE3
 27476                           fsr1h	equ	0xFE2
 27477                           fsr1l	equ	0xFE1
 27478                           indf2	equ	0xFDF
 27479                           postinc2	equ	0xFDE
 27480                           postdec2	equ	0xFDD
 27481                           plusw2	equ	0xFDB
 27482                           fsr2h	equ	0xFDA
 27483                           fsr2l	equ	0xFD9
 27484                           status	equ	0xFD8
 27485                           
 27486 ;; *************** function ___lwmod *****************
 27487 ;; Defined at:
 27488 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
 27489 ;; Parameters:    Size  Location     Type
 27490 ;;  dividend        2   62[BANK0 ] unsigned int 
 27491 ;;  divisor         2   64[BANK0 ] unsigned int 
 27492 ;; Auto vars:     Size  Location     Type
 27493 ;;  counter         1   66[BANK0 ] unsigned char 
 27494 ;; Return value:  Size  Location     Type
 27495 ;;                  2   62[BANK0 ] unsigned int 
 27496 ;; Registers used:
 27497 ;;		wreg, status,2, status,0
 27498 ;; Tracked objects:
 27499 ;;		On entry : 3F/0
 27500 ;;		On exit  : 3F/0
 27501 ;;		Unchanged: 0/0
 27502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27503 ;;      Params:         0       4       0       0       0       0       0       0       0
 27504 ;;      Locals:         0       1       0       0       0       0       0       0       0
 27505 ;;      Temps:          0       0       0       0       0       0       0       0       0
 27506 ;;      Totals:         0       5       0       0       0       0       0       0       0
 27507 ;;Total ram usage:        5 bytes
 27508 ;; Hardware stack levels used:    1
 27509 ;; Hardware stack levels required when called:    7
 27510 ;; This function calls:
 27511 ;;		Nothing
 27512 ;; This function is called by:
 27513 ;;		_Random
 27514 ;; This function uses a non-reentrant model
 27515 ;;
 27516                           
 27517                           	psect	text143
 27518  0056BE                     __ptext143:
 27519                           	opt stack 0
 27520  0056BE                     ___lwmod:
 27521                           	opt stack 18
 27522                           
 27523                           ; BSR set to: 0
 27524                           
 27525                           ; BSR set to: 0
 27526                           ;incstack = 0
 27527  0056BE  51A0               	movf	___lwmod@divisor& (0+255),w,b
 27528  0056C0  11A1               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 27529  0056C2  E017               	bz	l3065
 27530                           
 27531                           ; BSR set to: 0
 27532  0056C4  0E01               	movlw	1
 27533  0056C6  6FA2               	movwf	___lwmod@counter& (0+255),b
 27534  0056C8  D004               	goto	l12390
 27535  0056CA                     l12388:
 27536                           
 27537                           ; BSR set to: 0
 27538  0056CA  90D8               	bcf	status,0,c
 27539  0056CC  37A0               	rlcf	___lwmod@divisor& (0+255),f,b
 27540  0056CE  37A1               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 27541  0056D0  2BA2               	incf	___lwmod@counter& (0+255),f,b
 27542  0056D2                     l12390:
 27543                           
 27544                           ; BSR set to: 0
 27545  0056D2  AFA1               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 27546  0056D4  D7FA               	goto	l12388
 27547  0056D6                     l12392:
 27548                           
 27549                           ; BSR set to: 0
 27550  0056D6  51A0               	movf	___lwmod@divisor& (0+255),w,b
 27551  0056D8  5D9E               	subwf	___lwmod@dividend& (0+255),w,b
 27552  0056DA  51A1               	movf	(___lwmod@divisor+1)& (0+255),w,b
 27553  0056DC  599F               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 27554  0056DE  E304               	bnc	l12396
 27555                           
 27556                           ; BSR set to: 0
 27557  0056E0  51A0               	movf	___lwmod@divisor& (0+255),w,b
 27558  0056E2  5F9E               	subwf	___lwmod@dividend& (0+255),f,b
 27559  0056E4  51A1               	movf	(___lwmod@divisor+1)& (0+255),w,b
 27560  0056E6  5B9F               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 27561  0056E8                     l12396:
 27562                           
 27563                           ; BSR set to: 0
 27564  0056E8  90D8               	bcf	status,0,c
 27565  0056EA  33A1               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 27566  0056EC  33A0               	rrcf	___lwmod@divisor& (0+255),f,b
 27567                           
 27568                           ; BSR set to: 0
 27569  0056EE  2FA2               	decfsz	___lwmod@counter& (0+255),f,b
 27570  0056F0  D7F2               	goto	l12392
 27571  0056F2                     l3065:
 27572                           
 27573                           ; BSR set to: 0
 27574  0056F2  C09E  F09E         	movff	___lwmod@dividend,?___lwmod
 27575  0056F6  C09F  F09F         	movff	___lwmod@dividend+1,?___lwmod+1
 27576                           
 27577                           ; BSR set to: 0
 27578  0056FA  0012               	return		;funcret
 27579  0056FC                     __end_of___lwmod:
 27580                           	opt stack 0
 27581                           tosu	equ	0xFFF
 27582                           tosh	equ	0xFFE
 27583                           tosl	equ	0xFFD
 27584                           pclath	equ	0xFFA
 27585                           tblptru	equ	0xFF8
 27586                           tblptrh	equ	0xFF7
 27587                           tblptrl	equ	0xFF6
 27588                           tablat	equ	0xFF5
 27589                           prodh	equ	0xFF4
 27590                           prodl	equ	0xFF3
 27591                           intcon	equ	0xFF2
 27592                           indf0	equ	0xFEF
 27593                           postinc0	equ	0xFEE
 27594                           plusw0	equ	0xFEB
 27595                           fsr0h	equ	0xFEA
 27596                           fsr0l	equ	0xFE9
 27597                           wreg	equ	0xFE8
 27598                           postinc1	equ	0xFE6
 27599                           postdec1	equ	0xFE5
 27600                           plusw1	equ	0xFE3
 27601                           fsr1h	equ	0xFE2
 27602                           fsr1l	equ	0xFE1
 27603                           indf2	equ	0xFDF
 27604                           postinc2	equ	0xFDE
 27605                           postdec2	equ	0xFDD
 27606                           plusw2	equ	0xFDB
 27607                           fsr2h	equ	0xFDA
 27608                           fsr2l	equ	0xFD9
 27609                           status	equ	0xFD8
 27610                           
 27611 ;; *************** function _ComputeMic *****************
 27612 ;; Defined at:
 27613 ;;		line 2194 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 27614 ;; Parameters:    Size  Location     Type
 27615 ;;  key             2  102[BANK1 ] PTR unsigned char 
 27616 ;;		 -> loRa.activationParameters(105), loRa(245), 
 27617 ;;  buffer          2  104[BANK1 ] PTR unsigned char 
 27618 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), macBuffer(271), 
 27619 ;;  bufferLength    1  106[BANK1 ] unsigned char 
 27620 ;; Auto vars:     Size  Location     Type
 27621 ;;  mic             4  118[BANK0 ] unsigned long 
 27622 ;; Return value:  Size  Location     Type
 27623 ;;                  4  102[BANK1 ] unsigned long 
 27624 ;; Registers used:
 27625 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27626 ;; Tracked objects:
 27627 ;;		On entry : 3F/1
 27628 ;;		On exit  : 3F/0
 27629 ;;		Unchanged: 0/0
 27630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27631 ;;      Params:         0       0       5       0       0       0       0       0       0
 27632 ;;      Locals:         0       4       0       0       0       0       0       0       0
 27633 ;;      Temps:          0       0       0       0       0       0       0       0       0
 27634 ;;      Totals:         0       4       5       0       0       0       0       0       0
 27635 ;;Total ram usage:        9 bytes
 27636 ;; Hardware stack levels used:    1
 27637 ;; Hardware stack levels required when called:   12
 27638 ;; This function calls:
 27639 ;;		_AESCmac
 27640 ;;		_memcpy
 27641 ;; This function is called by:
 27642 ;;		_LORAWAN_RxDone
 27643 ;;		_PrepareJoinRequestFrame
 27644 ;; This function uses a non-reentrant model
 27645 ;;
 27646                           
 27647                           	psect	text144
 27648  005572                     __ptext144:
 27649                           	opt stack 0
 27650  005572                     _ComputeMic:
 27651                           	opt stack 14
 27652                           
 27653                           ; BSR set to: 1
 27654                           ;lorawan.c: 2196: uint32_t mic = 0;
 27655                           
 27656                           ; BSR set to: 0
 27657                           ;incstack = 0
 27658  005572  0100               	movlb	0	; () banked
 27659  005574  6BD6               	clrf	ComputeMic@mic& (0+255),b
 27660  005576  6BD7               	clrf	(ComputeMic@mic+1)& (0+255),b
 27661  005578  6BD8               	clrf	(ComputeMic@mic+2)& (0+255),b
 27662  00557A  6BD9               	clrf	(ComputeMic@mic+3)& (0+255),b
 27663                           
 27664                           ; BSR set to: 0
 27665                           ;lorawan.c: 2198: AESCmac(key, aesBuffer, buffer, bufferLength);
 27666  00557C  C166  F0C8         	movff	ComputeMic@key,AESCmac@key
 27667  005580  C167  F0C9         	movff	ComputeMic@key+1,AESCmac@key+1
 27668  005584  0EB5               	movlw	low _aesBuffer
 27669  005586  6FCA               	movwf	AESCmac@output& (0+255),b
 27670  005588  0E01               	movlw	high _aesBuffer
 27671  00558A  6FCB               	movwf	(AESCmac@output+1)& (0+255),b
 27672  00558C  C168  F0CC         	movff	ComputeMic@buffer,AESCmac@input
 27673  005590  C169  F0CD         	movff	ComputeMic@buffer+1,AESCmac@input+1
 27674  005594  C16A  F0CE         	movff	ComputeMic@bufferLength,AESCmac@size
 27675  005598  ECD2  F008         	call	_AESCmac	;wreg free
 27676                           
 27677                           ; BSR set to: 0
 27678                           ;lorawan.c: 2200: memcpy(&mic, aesBuffer, sizeof( mic ));
 27679  00559C  0ED6               	movlw	low ComputeMic@mic
 27680  00559E  EC9D  F003         	call	PL98	;call to abstracted procedure
 27681  0055A2  EC94  F028         	call	_memcpy	;wreg free
 27682                           
 27683                           ; BSR set to: 0
 27684                           ;lorawan.c: 2202: return mic;
 27685  0055A6  C0D6  F166         	movff	ComputeMic@mic,?_ComputeMic
 27686  0055AA  C0D7  F167         	movff	ComputeMic@mic+1,?_ComputeMic+1
 27687  0055AE  C0D8  F168         	movff	ComputeMic@mic+2,?_ComputeMic+2
 27688  0055B2  C0D9  F169         	movff	ComputeMic@mic+3,?_ComputeMic+3
 27689                           
 27690                           ; BSR set to: 0
 27691  0055B6  0012               	return		;funcret
 27692  0055B8                     __end_of_ComputeMic:
 27693                           	opt stack 0
 27694                           tosu	equ	0xFFF
 27695                           tosh	equ	0xFFE
 27696                           tosl	equ	0xFFD
 27697                           pclath	equ	0xFFA
 27698                           tblptru	equ	0xFF8
 27699                           tblptrh	equ	0xFF7
 27700                           tblptrl	equ	0xFF6
 27701                           tablat	equ	0xFF5
 27702                           prodh	equ	0xFF4
 27703                           prodl	equ	0xFF3
 27704                           intcon	equ	0xFF2
 27705                           indf0	equ	0xFEF
 27706                           postinc0	equ	0xFEE
 27707                           plusw0	equ	0xFEB
 27708                           fsr0h	equ	0xFEA
 27709                           fsr0l	equ	0xFE9
 27710                           wreg	equ	0xFE8
 27711                           postinc1	equ	0xFE6
 27712                           postdec1	equ	0xFE5
 27713                           plusw1	equ	0xFE3
 27714                           fsr1h	equ	0xFE2
 27715                           fsr1l	equ	0xFE1
 27716                           indf2	equ	0xFDF
 27717                           postinc2	equ	0xFDE
 27718                           postdec2	equ	0xFDD
 27719                           plusw2	equ	0xFDB
 27720                           fsr2h	equ	0xFDA
 27721                           fsr2l	equ	0xFD9
 27722                           status	equ	0xFD8
 27723                           
 27724 ;; *************** function _AESCmac *****************
 27725 ;; Defined at:
 27726 ;;		line 41 in file "mcc_generated_files/LoRaWAN/lorawan_aes_cmac.c"
 27727 ;; Parameters:    Size  Location     Type
 27728 ;;  key             2  104[BANK0 ] PTR unsigned char 
 27729 ;;		 -> loRa.activationParameters(105), loRa(245), 
 27730 ;;  output          2  106[BANK0 ] PTR unsigned char 
 27731 ;;		 -> aesBuffer(16), 
 27732 ;;  input           2  108[BANK0 ] PTR unsigned char 
 27733 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), macBuffer(271), 
 27734 ;;  size            1  110[BANK0 ] unsigned char 
 27735 ;; Auto vars:     Size  Location     Type
 27736 ;;  x              16   80[BANK1 ] unsigned char [16]
 27737 ;;  y              16   64[BANK1 ] unsigned char [16]
 27738 ;;  padded         16   48[BANK1 ] unsigned char [16]
 27739 ;;  mLast          16   32[BANK1 ] unsigned char [16]
 27740 ;;  k1             16   16[BANK1 ] unsigned char [16]
 27741 ;;  k2             16    0[BANK1 ] unsigned char [16]
 27742 ;;  ptr             2   96[BANK1 ] PTR unsigned char 
 27743 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), NULL(0), macBuffer(271), 
 27744 ;;  i               1  101[BANK1 ] unsigned char 
 27745 ;;  j               1  100[BANK1 ] unsigned char 
 27746 ;;  n               1   99[BANK1 ] unsigned char 
 27747 ;;  flag            1   98[BANK1 ] unsigned char 
 27748 ;; Return value:  Size  Location     Type
 27749 ;;                  1    wreg      void 
 27750 ;; Registers used:
 27751 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27752 ;; Tracked objects:
 27753 ;;		On entry : 3F/0
 27754 ;;		On exit  : 3F/0
 27755 ;;		Unchanged: 0/0
 27756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27757 ;;      Params:         0       7       0       0       0       0       0       0       0
 27758 ;;      Locals:         0       0     102       0       0       0       0       0       0
 27759 ;;      Temps:          0       7       0       0       0       0       0       0       0
 27760 ;;      Totals:         0      14     102       0       0       0       0       0       0
 27761 ;;Total ram usage:      116 bytes
 27762 ;; Hardware stack levels used:    1
 27763 ;; Hardware stack levels required when called:   11
 27764 ;; This function calls:
 27765 ;;		_AESEncodeLoRa
 27766 ;;		_GenerateSubkey
 27767 ;;		_memcpy
 27768 ;;		_memset
 27769 ;; This function is called by:
 27770 ;;		_LORAWAN_RxDone
 27771 ;;		_AssemblePacket
 27772 ;;		_ComputeMic
 27773 ;; This function uses a non-reentrant model
 27774 ;;
 27775                           
 27776                           	psect	text145
 27777  0011A4                     __ptext145:
 27778                           	opt stack 0
 27779  0011A4                     _AESCmac:
 27780                           	opt stack 16
 27781                           
 27782                           ; BSR set to: 0
 27783                           
 27784                           ; BSR set to: 0
 27785                           ;incstack = 0
 27786  0011A4  0101               	movlb	1	; () banked
 27787  0011A6  6B65               	clrf	AESCmac@i& (0+255),b
 27788  0011A8  6B64               	clrf	AESCmac@j& (0+255),b
 27789                           
 27790                           ;lorawan_aes_cmac.c: 44: bool flag = 0;
 27791  0011AA  6B62               	clrf	AESCmac@flag& (0+255),b
 27792                           
 27793                           ;lorawan_aes_cmac.c: 45: uint8_t k1[16], k2[16];
 27794                           ;lorawan_aes_cmac.c: 46: uint8_t x[16], y[16], mLast[16], padded[16];
 27795                           ;lorawan_aes_cmac.c: 47: uint8_t *ptr = (0);
 27796  0011AC  6B60               	clrf	AESCmac@ptr& (0+255),b
 27797  0011AE  6B61               	clrf	(AESCmac@ptr+1)& (0+255),b
 27798                           
 27799                           ; BSR set to: 1
 27800                           ;lorawan_aes_cmac.c: 49: GenerateSubkey(key, k1, k2);
 27801  0011B0  C0C8  F0A0         	movff	AESCmac@key,GenerateSubkey@key
 27802  0011B4  C0C9  F0A1         	movff	AESCmac@key+1,GenerateSubkey@key+1
 27803  0011B8  0E10               	movlw	low AESCmac@k1
 27804  0011BA  0100               	movlb	0	; () banked
 27805  0011BC  6FA2               	movwf	GenerateSubkey@k1& (0+255),b
 27806  0011BE  0E01               	movlw	high AESCmac@k1
 27807  0011C0  6FA3               	movwf	(GenerateSubkey@k1+1)& (0+255),b
 27808  0011C2  0E00               	movlw	low AESCmac@k2
 27809  0011C4  6FA4               	movwf	GenerateSubkey@k2& (0+255),b
 27810  0011C6  0E01               	movlw	high AESCmac@k2
 27811  0011C8  6FA5               	movwf	(GenerateSubkey@k2+1)& (0+255),b
 27812  0011CA  ECFC  F019         	call	_GenerateSubkey	;wreg free
 27813                           
 27814                           ; BSR set to: 0
 27815                           ;lorawan_aes_cmac.c: 51: n = (size + 15) >> (4);
 27816  0011CE  51CE               	movf	AESCmac@size& (0+255),w,b
 27817  0011D0  6FCF               	movwf	??_AESCmac& (0+255),b
 27818  0011D2  6BD0               	clrf	(??_AESCmac+1)& (0+255),b
 27819  0011D4  0E0F               	movlw	15
 27820  0011D6  27CF               	addwf	??_AESCmac& (0+255),f,b
 27821  0011D8  0E00               	movlw	0
 27822  0011DA  23D0               	addwfc	(??_AESCmac+1)& (0+255),f,b
 27823  0011DC  0E04               	movlw	4
 27824  0011DE  6FD1               	movwf	(??_AESCmac+2)& (0+255),b
 27825  0011E0                     u14045:
 27826  0011E0  35D0               	rlcf	(??_AESCmac+1)& (0+255),w,b
 27827  0011E2  33D0               	rrcf	(??_AESCmac+1)& (0+255),f,b
 27828  0011E4  33CF               	rrcf	??_AESCmac& (0+255),f,b
 27829  0011E6  2FD1               	decfsz	(??_AESCmac+2)& (0+255),f,b
 27830  0011E8  D7FB               	goto	u14045
 27831  0011EA  51CF               	movf	??_AESCmac& (0+255),w,b
 27832  0011EC  0101               	movlb	1	; () banked
 27833  0011EE  6F63               	movwf	AESCmac@n& (0+255),b
 27834                           
 27835                           ; BSR set to: 1
 27836                           ;lorawan_aes_cmac.c: 52: if (n == 0)
 27837  0011F0  5163               	movf	AESCmac@n& (0+255),w,b
 27838  0011F2  E104               	bnz	l12884
 27839                           
 27840                           ; BSR set to: 1
 27841                           ;lorawan_aes_cmac.c: 53: {
 27842                           ;lorawan_aes_cmac.c: 54: n = 1;
 27843  0011F4  0E01               	movlw	1
 27844  0011F6  6F63               	movwf	AESCmac@n& (0+255),b
 27845                           
 27846                           ; BSR set to: 1
 27847                           ;lorawan_aes_cmac.c: 55: flag = 0;
 27848  0011F8  6B62               	clrf	AESCmac@flag& (0+255),b
 27849                           
 27850                           ;lorawan_aes_cmac.c: 56: }
 27851  0011FA  D00A               	goto	l923
 27852  0011FC                     l12884:
 27853                           
 27854                           ; BSR set to: 1
 27855                           ;lorawan_aes_cmac.c: 57: else
 27856                           ;lorawan_aes_cmac.c: 58: {
 27857                           ;lorawan_aes_cmac.c: 59: flag = !(size % 16);
 27858  0011FC  C0CE  F0CF         	movff	AESCmac@size,??_AESCmac
 27859  001200  0E0F               	movlw	15
 27860  001202  0100               	movlb	0	; () banked
 27861  001204  17CF               	andwf	??_AESCmac& (0+255),f,b
 27862  001206  0E01               	movlw	1
 27863  001208  A4D8               	btfss	status,2,c
 27864  00120A  0E00               	movlw	0
 27865  00120C  0101               	movlb	1	; () banked
 27866  00120E  6F62               	movwf	AESCmac@flag& (0+255),b
 27867  001210                     l923:
 27868                           
 27869                           ; BSR set to: 1
 27870                           ;lorawan_aes_cmac.c: 60: }
 27871                           ;lorawan_aes_cmac.c: 62: if ( flag == 1 )
 27872  001210  0562               	decf	AESCmac@flag& (0+255),w,b
 27873  001212  E12E               	bnz	l12898
 27874                           
 27875                           ; BSR set to: 1
 27876                           ;lorawan_aes_cmac.c: 63: {
 27877                           ;lorawan_aes_cmac.c: 64: j = 0;
 27878  001214  6B64               	clrf	AESCmac@j& (0+255),b
 27879                           
 27880                           ; BSR set to: 1
 27881                           ;lorawan_aes_cmac.c: 65: for (i=((n-1) << (4)); i<(n << (4)); i++)
 27882  001216  5163               	movf	AESCmac@n& (0+255),w,b
 27883  001218  0D10               	mullw	16
 27884  00121A  50F3               	movf	prodl,w,c
 27885  00121C  0FF0               	addlw	240
 27886  00121E  6F65               	movwf	AESCmac@i& (0+255),b
 27887  001220  D018               	goto	l12896
 27888  001222                     l12890:
 27889                           
 27890                           ; BSR set to: 0
 27891                           ;lorawan_aes_cmac.c: 66: {
 27892                           ;lorawan_aes_cmac.c: 67: mLast[j] = input[i] ^ k1[j];
 27893  001222  0E20               	movlw	low AESCmac@mLast
 27894  001224  0101               	movlb	1	; () banked
 27895  001226  2564               	addwf	AESCmac@j& (0+255),w,b
 27896  001228  D91A               	call	PL372	;call to abstracted procedure
 27897  00122A  0E10               	movlw	low AESCmac@k1
 27898  00122C  2564               	addwf	AESCmac@j& (0+255),w,b
 27899  00122E  6EE9               	movwf	fsr0l,c
 27900  001230  6AEA               	clrf	fsr0h,c
 27901  001232  0E01               	movlw	high AESCmac@k1
 27902  001234  D8FA               	call	PL314	;call to abstracted procedure
 27903  001236  0101               	movlb	1	; () banked
 27904  001238  5165               	movf	AESCmac@i& (0+255),w,b
 27905  00123A  0100               	movlb	0	; () banked
 27906  00123C  25CC               	addwf	AESCmac@input& (0+255),w,b
 27907  00123E  6EE9               	movwf	fsr0l,c
 27908  001240  0E00               	movlw	0
 27909  001242  21CD               	addwfc	(AESCmac@input+1)& (0+255),w,b
 27910  001244  6EEA               	movwf	fsr0h,c
 27911  001246  50EF               	movf	indf0,w,c
 27912  001248  19CF               	xorwf	??_AESCmac& (0+255),w,b
 27913  00124A  6EDF               	movwf	indf2,c
 27914                           
 27915                           ; BSR set to: 0
 27916                           ;lorawan_aes_cmac.c: 68: j++;
 27917  00124C  0101               	movlb	1	; () banked
 27918  00124E  2B64               	incf	AESCmac@j& (0+255),f,b
 27919                           
 27920                           ; BSR set to: 1
 27921  001250  2B65               	incf	AESCmac@i& (0+255),f,b
 27922  001252                     l12896:
 27923                           
 27924                           ; BSR set to: 1
 27925  001252  5163               	movf	AESCmac@n& (0+255),w,b
 27926  001254  D8C1               	call	PL146	;call to abstracted procedure
 27927  001256  0101               	movlb	1	; () banked
 27928  001258  5165               	movf	AESCmac@i& (0+255),w,b
 27929  00125A  D8FD               	call	PL368	;call to abstracted procedure
 27930  00125C  51CF               	movf	??_AESCmac& (0+255),w,b
 27931  00125E  5DD1               	subwf	(??_AESCmac+2)& (0+255),w,b
 27932  001260  51D2               	movf	(??_AESCmac+3)& (0+255),w,b
 27933  001262  0A80               	xorlw	128
 27934  001264  6FD3               	movwf	(??_AESCmac+4)& (0+255),b
 27935  001266  51D0               	movf	(??_AESCmac+1)& (0+255),w,b
 27936  001268  0A80               	xorlw	128
 27937  00126A  59D3               	subwfb	(??_AESCmac+4)& (0+255),w,b
 27938  00126C  E240               	bc	l12928
 27939  00126E  D7D9               	goto	l12890
 27940  001270                     l12898:
 27941                           
 27942                           ; BSR set to: 1
 27943                           ;lorawan_aes_cmac.c: 71: else
 27944                           ;lorawan_aes_cmac.c: 72: {
 27945                           ;lorawan_aes_cmac.c: 74: ptr = &input[size - (size%16)];
 27946  001270  0100               	movlb	0	; () banked
 27947  001272  51CE               	movf	AESCmac@size& (0+255),w,b
 27948  001274  25CC               	addwf	AESCmac@input& (0+255),w,b
 27949  001276  6FCF               	movwf	??_AESCmac& (0+255),b
 27950  001278  0E00               	movlw	0
 27951  00127A  21CD               	addwfc	(AESCmac@input+1)& (0+255),w,b
 27952  00127C  6FD0               	movwf	(??_AESCmac+1)& (0+255),b
 27953  00127E  51CE               	movf	AESCmac@size& (0+255),w,b
 27954  001280  0B0F               	andlw	15
 27955  001282  5DCF               	subwf	??_AESCmac& (0+255),w,b
 27956  001284  0101               	movlb	1	; () banked
 27957  001286  6F60               	movwf	AESCmac@ptr& (0+255),b
 27958  001288  0100               	movlb	0	; () banked
 27959  00128A  51D0               	movf	(??_AESCmac+1)& (0+255),w,b
 27960  00128C  A0D8               	btfss	status,0,c
 27961  00128E  05D0               	decf	(??_AESCmac+1)& (0+255),w,b
 27962  001290  0101               	movlb	1	; () banked
 27963  001292  6F61               	movwf	(AESCmac@ptr+1)& (0+255),b
 27964                           
 27965                           ; BSR set to: 1
 27966                           ;lorawan_aes_cmac.c: 75: for (i=0; i<16; i++)
 27967  001294  6B65               	clrf	AESCmac@i& (0+255),b
 27968  001296                     l12904:
 27969                           
 27970                           ; BSR set to: 1
 27971                           ;lorawan_aes_cmac.c: 76: {
 27972                           ;lorawan_aes_cmac.c: 77: if ( i < (size%16) )
 27973  001296  D8E8               	call	PL380	;call to abstracted procedure
 27974  001298  6165               	cpfslt	AESCmac@i& (0+255),b
 27975  00129A  D00C               	goto	l12908
 27976                           
 27977                           ; BSR set to: 1
 27978                           ;lorawan_aes_cmac.c: 78: {
 27979                           ;lorawan_aes_cmac.c: 79: padded[i] = ptr[i];
 27980  00129C  5165               	movf	AESCmac@i& (0+255),w,b
 27981  00129E  2560               	addwf	AESCmac@ptr& (0+255),w,b
 27982  0012A0  6ED9               	movwf	fsr2l,c
 27983  0012A2  0E00               	movlw	0
 27984  0012A4  2161               	addwfc	(AESCmac@ptr+1)& (0+255),w,b
 27985  0012A6  6EDA               	movwf	fsr2h,c
 27986  0012A8  0E30               	movlw	low AESCmac@padded
 27987  0012AA  D8CA               	call	PL352	;call to abstracted procedure
 27988  0012AC  22EA               	addwfc	fsr0h,f,c
 27989  0012AE  CFDF FFEF          	movff	indf2,indf0
 27990                           
 27991                           ;lorawan_aes_cmac.c: 80: }
 27992  0012B2  D009               	goto	l12914
 27993  0012B4                     l12908:
 27994                           
 27995                           ; BSR set to: 1
 27996                           ;lorawan_aes_cmac.c: 81: else
 27997                           ;lorawan_aes_cmac.c: 82: {
 27998                           ;lorawan_aes_cmac.c: 83: if ( i == (size%16) )
 27999  0012B4  D8D9               	call	PL380	;call to abstracted procedure
 28000  0012B6  1965               	xorwf	AESCmac@i& (0+255),w,b
 28001  0012B8  E104               	bnz	l12912
 28002                           
 28003                           ; BSR set to: 1
 28004                           ;lorawan_aes_cmac.c: 84: {
 28005                           ;lorawan_aes_cmac.c: 85: padded[i] = 0x80;
 28006  0012BA  D8B0               	call	PL292	;call to abstracted procedure
 28007  0012BC  0E80               	movlw	128
 28008  0012BE  6EDF               	movwf	indf2,c
 28009                           
 28010                           ;lorawan_aes_cmac.c: 86: }
 28011  0012C0  D002               	goto	l12914
 28012  0012C2                     l12912:
 28013                           
 28014                           ; BSR set to: 1
 28015                           ;lorawan_aes_cmac.c: 87: else
 28016                           ;lorawan_aes_cmac.c: 88: {
 28017                           ;lorawan_aes_cmac.c: 89: padded[i] = 0x00;
 28018  0012C2  D8AC               	call	PL292	;call to abstracted procedure
 28019  0012C4  6ADF               	clrf	indf2,c
 28020  0012C6                     l12914:
 28021                           
 28022                           ; BSR set to: 1
 28023  0012C6  2B65               	incf	AESCmac@i& (0+255),f,b
 28024                           
 28025                           ; BSR set to: 1
 28026  0012C8  0E0F               	movlw	15
 28027  0012CA  6565               	cpfsgt	AESCmac@i& (0+255),b
 28028  0012CC  D7E4               	goto	l12904
 28029                           
 28030                           ; BSR set to: 1
 28031                           ;lorawan_aes_cmac.c: 90: }
 28032                           ;lorawan_aes_cmac.c: 91: }
 28033                           ;lorawan_aes_cmac.c: 92: }
 28034                           ;lorawan_aes_cmac.c: 95: for (i=0; i<sizeof(mLast); i++)
 28035  0012CE  6B65               	clrf	AESCmac@i& (0+255),b
 28036  0012D0                     l12922:
 28037                           
 28038                           ; BSR set to: 1
 28039                           ;lorawan_aes_cmac.c: 96: {
 28040                           ;lorawan_aes_cmac.c: 97: mLast[i] = padded[i] ^ k2[i];
 28041  0012D0  0E20               	movlw	low AESCmac@mLast
 28042  0012D2  2565               	addwf	AESCmac@i& (0+255),w,b
 28043  0012D4  D8C4               	call	PL372	;call to abstracted procedure
 28044  0012D6  0E00               	movlw	low AESCmac@k2
 28045  0012D8  2565               	addwf	AESCmac@i& (0+255),w,b
 28046  0012DA  6EE9               	movwf	fsr0l,c
 28047  0012DC  6AEA               	clrf	fsr0h,c
 28048  0012DE  0E01               	movlw	high AESCmac@k2
 28049  0012E0  D8A4               	call	PL314	;call to abstracted procedure
 28050  0012E2  0E30               	movlw	low AESCmac@padded
 28051  0012E4  0101               	movlb	1	; () banked
 28052  0012E6  D8AC               	call	PL352	;call to abstracted procedure
 28053                           
 28054                           ; BSR set to: 0
 28055                           
 28056                           ; BSR set to: 1
 28057  0012E8  D889               	call	PL226	;call to abstracted procedure
 28058  0012EA  6565               	cpfsgt	AESCmac@i& (0+255),b
 28059  0012EC  D7F1               	goto	l12922
 28060  0012EE                     l12928:
 28061                           
 28062                           ;lorawan_aes_cmac.c: 98: }
 28063                           ;lorawan_aes_cmac.c: 99: }
 28064                           ;lorawan_aes_cmac.c: 101: memset(x, 0, sizeof(x));
 28065  0012EE  0E50               	movlw	low AESCmac@x
 28066  0012F0  0100               	movlb	0	; () banked
 28067  0012F2  6F60               	movwf	memset@p1& (0+255),b
 28068  0012F4  0E01               	movlw	high AESCmac@x
 28069  0012F6  6F61               	movwf	(memset@p1+1)& (0+255),b
 28070  0012F8  ECC4  F021         	call	PL140	;call to abstracted procedure
 28071  0012FC  ECEF  F02D         	call	_memset	;wreg free
 28072                           
 28073                           ; BSR set to: 0
 28074                           ;lorawan_aes_cmac.c: 103: for (i=0; i<(n-1); i++)
 28075  001300  0101               	movlb	1	; () banked
 28076  001302  6B65               	clrf	AESCmac@i& (0+255),b
 28077  001304  D034               	goto	l12946
 28078  001306                     l938:
 28079                           
 28080                           ; BSR set to: 0
 28081                           ;lorawan_aes_cmac.c: 104: {
 28082                           ;lorawan_aes_cmac.c: 105: for (j=0; j<16; j++)
 28083  001306  0101               	movlb	1	; () banked
 28084  001308  6B64               	clrf	AESCmac@j& (0+255),b
 28085  00130A                     l12936:
 28086                           
 28087                           ; BSR set to: 1
 28088                           ;lorawan_aes_cmac.c: 106: {
 28089                           ;lorawan_aes_cmac.c: 107: y[j] = x[j] ^ input[(i << (4))+j];
 28090  00130A  0E40               	movlw	low AESCmac@y
 28091  00130C  2564               	addwf	AESCmac@j& (0+255),w,b
 28092  00130E  D8B1               	call	PL398	;call to abstracted procedure
 28093  001310  5165               	movf	AESCmac@i& (0+255),w,b
 28094  001312  D862               	call	PL146	;call to abstracted procedure
 28095  001314  C0CC  F0D1         	movff	AESCmac@input,??_AESCmac+2
 28096  001318  C0CD  F0D2         	movff	AESCmac@input+1,??_AESCmac+3
 28097  00131C  D896               	call	PL354	;call to abstracted procedure
 28098  00131E  5164               	movf	AESCmac@j& (0+255),w,b
 28099  001320  0100               	movlb	0	; () banked
 28100  001322  25D1               	addwf	(??_AESCmac+2)& (0+255),w,b
 28101  001324  6EE9               	movwf	fsr0l,c
 28102  001326  0E00               	movlw	0
 28103  001328  21D2               	addwfc	(??_AESCmac+3)& (0+255),w,b
 28104  00132A  6EEA               	movwf	fsr0h,c
 28105  00132C  50EF               	movf	indf0,w,c
 28106  00132E  6FD3               	movwf	(??_AESCmac+4)& (0+255),b
 28107  001330  0E50               	movlw	low AESCmac@x
 28108  001332  0101               	movlb	1	; () banked
 28109  001334  2564               	addwf	AESCmac@j& (0+255),w,b
 28110  001336  D86E               	call	PL286	;call to abstracted procedure
 28111  001338  22EA               	addwfc	fsr0h,f,c
 28112  00133A  50EF               	movf	indf0,w,c
 28113  00133C  0100               	movlb	0	; () banked
 28114  00133E  19D3               	xorwf	(??_AESCmac+4)& (0+255),w,b
 28115  001340  6EDF               	movwf	indf2,c
 28116                           
 28117                           ; BSR set to: 0
 28118  001342  0101               	movlb	1	; () banked
 28119  001344  2B64               	incf	AESCmac@j& (0+255),f,b
 28120                           
 28121                           ; BSR set to: 1
 28122  001346  0E0F               	movlw	15
 28123  001348  6564               	cpfsgt	AESCmac@j& (0+255),b
 28124  00134A  D7DF               	goto	l12936
 28125                           
 28126                           ; BSR set to: 1
 28127                           ;lorawan_aes_cmac.c: 108: }
 28128                           ;lorawan_aes_cmac.c: 109: memcpy(x, y, sizeof(y));
 28129  00134C  0E50               	movlw	low AESCmac@x
 28130  00134E  0100               	movlb	0	; () banked
 28131  001350  6F60               	movwf	memcpy@d1& (0+255),b
 28132  001352  0E01               	movlw	high AESCmac@x
 28133  001354  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 28134  001356  D85A               	call	PL260	;call to abstracted procedure
 28135  001358  D84C               	call	PL206	;call to abstracted procedure
 28136  00135A  EC94  F028         	call	_memcpy	;wreg free
 28137                           
 28138                           ;lorawan_aes_cmac.c: 110: AESEncodeLoRa(x,key);
 28139  00135E  0E50               	movlw	low AESCmac@x
 28140  001360  6F8C               	movwf	AESEncodeLoRa@block& (0+255),b
 28141  001362  0E01               	movlw	high AESCmac@x
 28142  001364  D867               	call	PL328	;call to abstracted procedure
 28143  001366  EC51  F02E         	call	_AESEncodeLoRa	;wreg free
 28144                           
 28145                           ; BSR set to: 0
 28146  00136A  0101               	movlb	1	; () banked
 28147  00136C  2B65               	incf	AESCmac@i& (0+255),f,b
 28148  00136E                     l12946:
 28149                           
 28150                           ; BSR set to: 1
 28151  00136E  0100               	movlb	0	; () banked
 28152  001370  69CF               	setf	??_AESCmac& (0+255),b
 28153  001372  69D0               	setf	(??_AESCmac+1)& (0+255),b
 28154  001374  0101               	movlb	1	; () banked
 28155  001376  5163               	movf	AESCmac@n& (0+255),w,b
 28156  001378  D86E               	call	PL368	;call to abstracted procedure
 28157  00137A  D867               	call	PL354	;call to abstracted procedure
 28158  00137C  5165               	movf	AESCmac@i& (0+255),w,b
 28159  00137E  0100               	movlb	0	; () banked
 28160  001380  6FD3               	movwf	(??_AESCmac+4)& (0+255),b
 28161  001382  6BD4               	clrf	(??_AESCmac+5)& (0+255),b
 28162  001384  51D1               	movf	(??_AESCmac+2)& (0+255),w,b
 28163  001386  5DD3               	subwf	(??_AESCmac+4)& (0+255),w,b
 28164  001388  51D4               	movf	(??_AESCmac+5)& (0+255),w,b
 28165  00138A  0A80               	xorlw	128
 28166  00138C  6FD5               	movwf	(??_AESCmac+6)& (0+255),b
 28167  00138E  51D2               	movf	(??_AESCmac+3)& (0+255),w,b
 28168  001390  0A80               	xorlw	128
 28169  001392  59D5               	subwfb	(??_AESCmac+6)& (0+255),w,b
 28170  001394  E3B8               	bnc	l938
 28171                           
 28172                           ; BSR set to: 0
 28173                           ;lorawan_aes_cmac.c: 111: }
 28174                           ;lorawan_aes_cmac.c: 113: for (i=0; i<sizeof(x); i++)
 28175  001396  0101               	movlb	1	; () banked
 28176  001398  6B65               	clrf	AESCmac@i& (0+255),b
 28177  00139A                     l12952:
 28178                           
 28179                           ; BSR set to: 1
 28180                           ;lorawan_aes_cmac.c: 114: {
 28181                           ;lorawan_aes_cmac.c: 115: y[i] = x[i] ^ mLast[i];
 28182  00139A  0E40               	movlw	low AESCmac@y
 28183  00139C  2565               	addwf	AESCmac@i& (0+255),w,b
 28184  00139E  D869               	call	PL398	;call to abstracted procedure
 28185  0013A0  0E20               	movlw	low AESCmac@mLast
 28186  0013A2  2565               	addwf	AESCmac@i& (0+255),w,b
 28187  0013A4  6EE9               	movwf	fsr0l,c
 28188  0013A6  6AEA               	clrf	fsr0h,c
 28189  0013A8  0E01               	movlw	high AESCmac@mLast
 28190  0013AA  D83F               	call	PL314	;call to abstracted procedure
 28191  0013AC  0E50               	movlw	low AESCmac@x
 28192  0013AE  0101               	movlb	1	; () banked
 28193  0013B0  2565               	addwf	AESCmac@i& (0+255),w,b
 28194  0013B2  D830               	call	PL286	;call to abstracted procedure
 28195                           
 28196                           ; BSR set to: 0
 28197                           
 28198                           ; BSR set to: 1
 28199  0013B4  D823               	call	PL226	;call to abstracted procedure
 28200  0013B6  6565               	cpfsgt	AESCmac@i& (0+255),b
 28201  0013B8  D7F0               	goto	l12952
 28202                           
 28203                           ; BSR set to: 1
 28204                           ;lorawan_aes_cmac.c: 116: }
 28205                           ;lorawan_aes_cmac.c: 118: AESEncodeLoRa(y, key);
 28206  0013BA  0E40               	movlw	low AESCmac@y
 28207  0013BC  0100               	movlb	0	; () banked
 28208  0013BE  6F8C               	movwf	AESEncodeLoRa@block& (0+255),b
 28209  0013C0  0E01               	movlw	high AESCmac@y
 28210  0013C2  D838               	call	PL328	;call to abstracted procedure
 28211  0013C4  EC51  F02E         	call	_AESEncodeLoRa	;wreg free
 28212                           
 28213                           ;lorawan_aes_cmac.c: 120: memcpy(output, y, sizeof(y));
 28214  0013C8  C0CA  F060         	movff	AESCmac@output,memcpy@d1
 28215  0013CC  C0CB  F061         	movff	AESCmac@output+1,memcpy@d1+1
 28216  0013D0  D81D               	call	PL260	;call to abstracted procedure
 28217  0013D2  D80F               	call	PL206	;call to abstracted procedure
 28218  0013D4  EF94  F028         	goto	_memcpy	;wreg free
 28219  0013D8                     __end_of_AESCmac:
 28220                           	opt stack 0
 28221  0013D8                     PL146:
 28222                           	opt stack 16
 28223  0013D8  0100               	movlb	0	; () banked
 28224  0013DA  6FCF               	movwf	??_AESCmac& (0+255),b
 28225  0013DC  6BD0               	clrf	(??_AESCmac+1)& (0+255),b
 28226  0013DE  3BCF               	swapf	??_AESCmac& (0+255),f,b
 28227  0013E0  3BD0               	swapf	(??_AESCmac+1)& (0+255),f,b
 28228  0013E2  0EF0               	movlw	240
 28229  0013E4  17D0               	andwf	(??_AESCmac+1)& (0+255),f,b
 28230  0013E6  51CF               	movf	??_AESCmac& (0+255),w,b
 28231  0013E8  0B0F               	andlw	15
 28232  0013EA  13D0               	iorwf	(??_AESCmac+1)& (0+255),f,b
 28233  0013EC  0EF0               	movlw	240
 28234  0013EE  17CF               	andwf	??_AESCmac& (0+255),f,b
 28235  0013F0  0CF0               	retlw	240
 28236  0013F2                     __end_ofPL146:
 28237                           	opt stack 0
 28238  0013F2                     PL206:
 28239                           	opt stack 16
 28240  0013F2  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 28241  0013F4  6B65               	clrf	(memcpy@n+1)& (0+255),b
 28242  0013F6  0E10               	movlw	16
 28243  0013F8  6F64               	movwf	memcpy@n& (0+255),b
 28244  0013FA  0C10               	retlw	16
 28245  0013FC                     __end_ofPL206:
 28246                           	opt stack 0
 28247  0013FC                     PL226:
 28248                           	opt stack 16
 28249  0013FC  22EA               	addwfc	fsr0h,f,c
 28250  0013FE  50EF               	movf	indf0,w,c
 28251  001400  0100               	movlb	0	; () banked
 28252  001402  19CF               	xorwf	??_AESCmac& (0+255),w,b
 28253  001404  6EDF               	movwf	indf2,c
 28254  001406  0101               	movlb	1	; () banked
 28255  001408  2B65               	incf	AESCmac@i& (0+255),f,b
 28256  00140A  0C0F               	retlw	15
 28257  00140C                     __end_ofPL226:
 28258                           	opt stack 0
 28259  00140C                     PL260:
 28260                           	opt stack 16
 28261  00140C  0E40               	movlw	low AESCmac@y
 28262  00140E  6F62               	movwf	memcpy@s1& (0+255),b
 28263  001410  0E01               	movlw	high AESCmac@y
 28264  001412  0012               	return	
 28265  001414                     __end_ofPL260:
 28266                           	opt stack 0
 28267  001414                     PL286:
 28268                           	opt stack 16
 28269  001414  6EE9               	movwf	fsr0l,c
 28270  001416  6AEA               	clrf	fsr0h,c
 28271  001418  0E01               	movlw	high AESCmac@x
 28272  00141A  0012               	return	
 28273  00141C                     __end_ofPL286:
 28274                           	opt stack 0
 28275  00141C                     PL292:
 28276                           	opt stack 16
 28277  00141C  0E30               	movlw	low AESCmac@padded
 28278  00141E  2565               	addwf	AESCmac@i& (0+255),w,b
 28279  001420  6ED9               	movwf	fsr2l,c
 28280  001422  6ADA               	clrf	fsr2h,c
 28281  001424  0E01               	movlw	high AESCmac@padded
 28282  001426  22DA               	addwfc	fsr2h,f,c
 28283  001428  0012               	return	
 28284  00142A                     __end_ofPL292:
 28285                           	opt stack 0
 28286  00142A                     PL314:
 28287                           	opt stack 16
 28288  00142A  22EA               	addwfc	fsr0h,f,c
 28289  00142C  50EF               	movf	indf0,w,c
 28290  00142E  0100               	movlb	0	; () banked
 28291  001430  6FCF               	movwf	??_AESCmac& (0+255),b
 28292  001432  0012               	return	
 28293  001434                     __end_ofPL314:
 28294                           	opt stack 0
 28295  001434                     PL328:
 28296                           	opt stack 16
 28297  001434  6F8D               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 28298  001436  C0C8  F08E         	movff	AESCmac@key,AESEncodeLoRa@key
 28299  00143A  C0C9  F08F         	movff	AESCmac@key+1,AESEncodeLoRa@key+1
 28300  00143E  0012               	return	
 28301  001440                     __end_ofPL328:
 28302                           	opt stack 0
 28303  001440                     PL352:
 28304                           	opt stack 16
 28305  001440  2565               	addwf	AESCmac@i& (0+255),w,b
 28306  001442  6EE9               	movwf	fsr0l,c
 28307  001444  6AEA               	clrf	fsr0h,c
 28308  001446  0E01               	movlw	high AESCmac@padded
 28309  001448  0012               	return	
 28310  00144A                     __end_ofPL352:
 28311                           	opt stack 0
 28312  00144A                     PL354:
 28313                           	opt stack 16
 28314  00144A  51CF               	movf	??_AESCmac& (0+255),w,b
 28315  00144C  27D1               	addwf	(??_AESCmac+2)& (0+255),f,b
 28316  00144E  51D0               	movf	(??_AESCmac+1)& (0+255),w,b
 28317  001450  23D2               	addwfc	(??_AESCmac+3)& (0+255),f,b
 28318  001452  0101               	movlb	1	; () banked
 28319  001454  0012               	return	
 28320  001456                     __end_ofPL354:
 28321                           	opt stack 0
 28322  001456                     PL368:
 28323                           	opt stack 16
 28324  001456  0100               	movlb	0	; () banked
 28325  001458  6FD1               	movwf	(??_AESCmac+2)& (0+255),b
 28326  00145A  6BD2               	clrf	(??_AESCmac+3)& (0+255),b
 28327  00145C  0012               	return	
 28328  00145E                     __end_ofPL368:
 28329                           	opt stack 0
 28330  00145E                     PL372:
 28331                           	opt stack 16
 28332  00145E  6ED9               	movwf	fsr2l,c
 28333  001460  6ADA               	clrf	fsr2h,c
 28334  001462  0E01               	movlw	high AESCmac@mLast
 28335  001464  22DA               	addwfc	fsr2h,f,c
 28336  001466  0012               	return	
 28337  001468                     __end_ofPL372:
 28338                           	opt stack 0
 28339  001468                     PL380:
 28340                           	opt stack 16
 28341  001468  0100               	movlb	0	; () banked
 28342  00146A  51CE               	movf	AESCmac@size& (0+255),w,b
 28343  00146C  0B0F               	andlw	15
 28344  00146E  0101               	movlb	1	; () banked
 28345  001470  0012               	return	
 28346  001472                     __end_ofPL380:
 28347                           	opt stack 0
 28348  001472                     PL398:
 28349                           	opt stack 16
 28350  001472  6ED9               	movwf	fsr2l,c
 28351  001474  6ADA               	clrf	fsr2h,c
 28352  001476  0E01               	movlw	high AESCmac@y
 28353  001478  22DA               	addwfc	fsr2h,f,c
 28354  00147A  0012               	return	
 28355  00147C                     __end_ofPL398:
 28356                           	opt stack 0
 28357                           tosu	equ	0xFFF
 28358                           tosh	equ	0xFFE
 28359                           tosl	equ	0xFFD
 28360                           pclath	equ	0xFFA
 28361                           tblptru	equ	0xFF8
 28362                           tblptrh	equ	0xFF7
 28363                           tblptrl	equ	0xFF6
 28364                           tablat	equ	0xFF5
 28365                           prodh	equ	0xFF4
 28366                           prodl	equ	0xFF3
 28367                           intcon	equ	0xFF2
 28368                           indf0	equ	0xFEF
 28369                           postinc0	equ	0xFEE
 28370                           plusw0	equ	0xFEB
 28371                           fsr0h	equ	0xFEA
 28372                           fsr0l	equ	0xFE9
 28373                           wreg	equ	0xFE8
 28374                           postinc1	equ	0xFE6
 28375                           postdec1	equ	0xFE5
 28376                           plusw1	equ	0xFE3
 28377                           fsr1h	equ	0xFE2
 28378                           fsr1l	equ	0xFE1
 28379                           indf2	equ	0xFDF
 28380                           postinc2	equ	0xFDE
 28381                           postdec2	equ	0xFDD
 28382                           plusw2	equ	0xFDB
 28383                           fsr2h	equ	0xFDA
 28384                           fsr2l	equ	0xFD9
 28385                           status	equ	0xFD8
 28386                           
 28387 ;; *************** function _GenerateSubkey *****************
 28388 ;; Defined at:
 28389 ;;		line 124 in file "mcc_generated_files/LoRaWAN/lorawan_aes_cmac.c"
 28390 ;; Parameters:    Size  Location     Type
 28391 ;;  key             2   64[BANK0 ] PTR unsigned char 
 28392 ;;		 -> loRa.activationParameters(105), loRa(245), 
 28393 ;;  k1              2   66[BANK0 ] PTR unsigned char 
 28394 ;;		 -> AESCmac@k1(16), 
 28395 ;;  k2              2   68[BANK0 ] PTR unsigned char 
 28396 ;;		 -> AESCmac@k2(16), 
 28397 ;; Auto vars:     Size  Location     Type
 28398 ;;  l              16   87[BANK0 ] unsigned char [16]
 28399 ;;  const_Rb       16   71[BANK0 ] unsigned char [16]
 28400 ;;  i               1  103[BANK0 ] unsigned char 
 28401 ;; Return value:  Size  Location     Type
 28402 ;;                  1    wreg      void 
 28403 ;; Registers used:
 28404 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 28405 ;; Tracked objects:
 28406 ;;		On entry : 3F/0
 28407 ;;		On exit  : 3F/0
 28408 ;;		Unchanged: 0/0
 28409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 28410 ;;      Params:         0       6       0       0       0       0       0       0       0
 28411 ;;      Locals:         0      33       0       0       0       0       0       0       0
 28412 ;;      Temps:          0       1       0       0       0       0       0       0       0
 28413 ;;      Totals:         0      40       0       0       0       0       0       0       0
 28414 ;;Total ram usage:       40 bytes
 28415 ;; Hardware stack levels used:    1
 28416 ;; Hardware stack levels required when called:   10
 28417 ;; This function calls:
 28418 ;;		_AESEncodeLoRa
 28419 ;;		_FillSubKey
 28420 ;;		_memset
 28421 ;; This function is called by:
 28422 ;;		_AESCmac
 28423 ;; This function uses a non-reentrant model
 28424 ;;
 28425                           
 28426                           	psect	text146
 28427  0033F8                     __ptext146:
 28428                           	opt stack 0
 28429  0033F8                     _GenerateSubkey:
 28430                           	opt stack 16
 28431                           
 28432                           ; BSR set to: 0
 28433                           ;lorawan_aes_cmac.c: 127: uint8_t l[16];
 28434                           ;lorawan_aes_cmac.c: 128: uint8_t const_Rb[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x
      +                          00, 0x00,
 28435                           ;lorawan_aes_cmac.c: 129: 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87};
 28436                           
 28437                           ; BSR set to: 0
 28438                           
 28439                           ; BSR set to: 0
 28440                           ;incstack = 0
 28441  0033F8  EE21  F0C7         	lfsr	2,GenerateSubkey@F17267
 28442  0033FC  EE00  F0A7         	lfsr	0,GenerateSubkey@const_Rb
 28443  003400  0E0F               	movlw	15
 28444  003402                     u13401:
 28445  003402  CFDB FFEB          	movff	plusw2,plusw0
 28446  003406  06E8               	decf	wreg,f,c
 28447  003408  E2FC               	bc	u13401
 28448                           
 28449                           ; BSR set to: 0
 28450                           ;lorawan_aes_cmac.c: 132: memset(l, 0, sizeof(l));
 28451  00340A  0EB7               	movlw	low GenerateSubkey@l
 28452  00340C  6F60               	movwf	memset@p1& (0+255),b
 28453  00340E  6B61               	clrf	(memset@p1+1)& (0+255),b
 28454  003410  ECC4  F021         	call	PL140	;call to abstracted procedure
 28455  003414  ECEF  F02D         	call	_memset	;wreg free
 28456                           
 28457                           ; BSR set to: 0
 28458                           ;lorawan_aes_cmac.c: 134: AESEncodeLoRa(l, key);
 28459  003418  0EB7               	movlw	low GenerateSubkey@l
 28460  00341A  6F8C               	movwf	AESEncodeLoRa@block& (0+255),b
 28461  00341C  6B8D               	clrf	(AESEncodeLoRa@block+1)& (0+255),b
 28462  00341E  C0A0  F08E         	movff	GenerateSubkey@key,AESEncodeLoRa@key
 28463  003422  C0A1  F08F         	movff	GenerateSubkey@key+1,AESEncodeLoRa@key+1
 28464  003426  EC51  F02E         	call	_AESEncodeLoRa	;wreg free
 28465                           
 28466                           ; BSR set to: 0
 28467                           ;lorawan_aes_cmac.c: 137: if ( (l[0] & 0x80) == 0x00 )
 28468  00342A  BFB7               	btfsc	GenerateSubkey@l& (0+255),7,b
 28469  00342C  D004               	goto	l12494
 28470                           
 28471                           ; BSR set to: 0
 28472                           ;lorawan_aes_cmac.c: 138: {
 28473                           ;lorawan_aes_cmac.c: 139: FillSubKey( l, k1, (sizeof(l) ) );
 28474  00342E  D84B               	call	PL200	;call to abstracted procedure
 28475  003430  EC70  F02A         	call	_FillSubKey	;wreg free
 28476                           
 28477                           ;lorawan_aes_cmac.c: 140: }
 28478  003434  D016               	goto	l12508
 28479  003436                     l12494:
 28480                           
 28481                           ; BSR set to: 0
 28482                           ;lorawan_aes_cmac.c: 141: else
 28483                           ;lorawan_aes_cmac.c: 142: {
 28484                           ;lorawan_aes_cmac.c: 143: FillSubKey( l, k1, (sizeof(l) ) );
 28485  003436  D847               	call	PL200	;call to abstracted procedure
 28486  003438  EC70  F02A         	call	_FillSubKey	;wreg free
 28487                           
 28488                           ; BSR set to: 0
 28489                           ;lorawan_aes_cmac.c: 145: for (i=0; i<sizeof(l); i++)
 28490  00343C  6BC7               	clrf	GenerateSubkey@i& (0+255),b
 28491  00343E                     l12502:
 28492                           
 28493                           ; BSR set to: 0
 28494                           ;lorawan_aes_cmac.c: 146: {
 28495                           ;lorawan_aes_cmac.c: 147: k1[i] ^= const_Rb[i];
 28496  00343E  51C7               	movf	GenerateSubkey@i& (0+255),w,b
 28497  003440  0FA7               	addlw	low GenerateSubkey@const_Rb
 28498  003442  6ED9               	movwf	fsr2l,c
 28499  003444  6ADA               	clrf	fsr2h,c
 28500  003446  50DF               	movf	indf2,w,c
 28501  003448  6FA6               	movwf	??_GenerateSubkey& (0+255),b
 28502  00344A  51C7               	movf	GenerateSubkey@i& (0+255),w,b
 28503  00344C  25A2               	addwf	GenerateSubkey@k1& (0+255),w,b
 28504  00344E  6ED9               	movwf	fsr2l,c
 28505  003450  0E00               	movlw	0
 28506  003452  21A3               	addwfc	(GenerateSubkey@k1+1)& (0+255),w,b
 28507  003454  6EDA               	movwf	fsr2h,c
 28508  003456  51A6               	movf	??_GenerateSubkey& (0+255),w,b
 28509  003458  1ADF               	xorwf	indf2,f,c
 28510                           
 28511                           ; BSR set to: 0
 28512  00345A  2BC7               	incf	GenerateSubkey@i& (0+255),f,b
 28513                           
 28514                           ; BSR set to: 0
 28515  00345C  0E0F               	movlw	15
 28516  00345E  65C7               	cpfsgt	GenerateSubkey@i& (0+255),b
 28517  003460  D7EE               	goto	l12502
 28518  003462                     l12508:
 28519                           
 28520                           ; BSR set to: 0
 28521                           ;lorawan_aes_cmac.c: 148: }
 28522                           ;lorawan_aes_cmac.c: 149: }
 28523                           ;lorawan_aes_cmac.c: 152: if ( (k1[0] & 0x80) == 0x00 )
 28524  003462  C0A2  FFD9         	movff	GenerateSubkey@k1,fsr2l
 28525  003466  C0A3  FFDA         	movff	GenerateSubkey@k1+1,fsr2h
 28526  00346A  BEDF               	btfsc	indf2,7,c
 28527  00346C  D003               	goto	l12512
 28528                           
 28529                           ; BSR set to: 0
 28530                           ;lorawan_aes_cmac.c: 153: {
 28531                           ;lorawan_aes_cmac.c: 154: FillSubKey( k1, k2, (sizeof(l)) );
 28532  00346E  D820               	call	PL174	;call to abstracted procedure
 28533  003470  EF70  F02A         	goto	_FillSubKey	;wreg free
 28534  003474                     l12512:
 28535                           
 28536                           ; BSR set to: 0
 28537                           ;lorawan_aes_cmac.c: 156: else
 28538                           ;lorawan_aes_cmac.c: 157: {
 28539                           ;lorawan_aes_cmac.c: 158: FillSubKey( k1, k2, (sizeof(l) ) );
 28540  003474  D81D               	call	PL174	;call to abstracted procedure
 28541  003476  EC70  F02A         	call	_FillSubKey	;wreg free
 28542                           
 28543                           ; BSR set to: 0
 28544                           ;lorawan_aes_cmac.c: 160: for (i=0; i<sizeof(l); i++)
 28545  00347A  6BC7               	clrf	GenerateSubkey@i& (0+255),b
 28546  00347C                     l12520:
 28547                           
 28548                           ; BSR set to: 0
 28549                           ;lorawan_aes_cmac.c: 161: {
 28550                           ;lorawan_aes_cmac.c: 162: k2[i] = k2[i] ^ const_Rb[i];
 28551  00347C  51C7               	movf	GenerateSubkey@i& (0+255),w,b
 28552  00347E  25A4               	addwf	GenerateSubkey@k2& (0+255),w,b
 28553  003480  6ED9               	movwf	fsr2l,c
 28554  003482  0E00               	movlw	0
 28555  003484  21A5               	addwfc	(GenerateSubkey@k2+1)& (0+255),w,b
 28556  003486  6EDA               	movwf	fsr2h,c
 28557  003488  51C7               	movf	GenerateSubkey@i& (0+255),w,b
 28558  00348A  0FA7               	addlw	low GenerateSubkey@const_Rb
 28559  00348C  6EE9               	movwf	fsr0l,c
 28560  00348E  6AEA               	clrf	fsr0h,c
 28561  003490  50EF               	movf	indf0,w,c
 28562  003492  6FA6               	movwf	??_GenerateSubkey& (0+255),b
 28563  003494  51C7               	movf	GenerateSubkey@i& (0+255),w,b
 28564  003496  25A4               	addwf	GenerateSubkey@k2& (0+255),w,b
 28565  003498  6EE9               	movwf	fsr0l,c
 28566  00349A  0E00               	movlw	0
 28567  00349C  21A5               	addwfc	(GenerateSubkey@k2+1)& (0+255),w,b
 28568  00349E  6EEA               	movwf	fsr0h,c
 28569  0034A0  50EF               	movf	indf0,w,c
 28570  0034A2  19A6               	xorwf	??_GenerateSubkey& (0+255),w,b
 28571  0034A4  6EDF               	movwf	indf2,c
 28572                           
 28573                           ; BSR set to: 0
 28574  0034A6  2BC7               	incf	GenerateSubkey@i& (0+255),f,b
 28575                           
 28576                           ; BSR set to: 0
 28577  0034A8  0E0F               	movlw	15
 28578  0034AA  65C7               	cpfsgt	GenerateSubkey@i& (0+255),b
 28579  0034AC  D7E7               	goto	l12520
 28580  0034AE  0C0F               	retlw	15
 28581  0034B0                     __end_of_GenerateSubkey:
 28582                           	opt stack 0
 28583  0034B0                     PL174:
 28584                           	opt stack 16
 28585  0034B0  C0A2  F060         	movff	GenerateSubkey@k1,FillSubKey@source
 28586  0034B4  C0A3  F061         	movff	GenerateSubkey@k1+1,FillSubKey@source+1
 28587  0034B8  C0A4  F062         	movff	GenerateSubkey@k2,FillSubKey@key
 28588  0034BC  C0A5  F063         	movff	GenerateSubkey@k2+1,FillSubKey@key+1
 28589  0034C0  0E10               	movlw	16
 28590  0034C2  6F64               	movwf	FillSubKey@size& (0+255),b
 28591  0034C4  0C10               	retlw	16
 28592  0034C6                     __end_ofPL174:
 28593                           	opt stack 0
 28594  0034C6                     PL200:
 28595                           	opt stack 16
 28596  0034C6  0EB7               	movlw	low GenerateSubkey@l
 28597  0034C8  6F60               	movwf	FillSubKey@source& (0+255),b
 28598  0034CA  6B61               	clrf	(FillSubKey@source+1)& (0+255),b
 28599  0034CC  C0A2  F062         	movff	GenerateSubkey@k1,FillSubKey@key
 28600  0034D0  C0A3  F063         	movff	GenerateSubkey@k1+1,FillSubKey@key+1
 28601  0034D4  0E10               	movlw	16
 28602  0034D6  6F64               	movwf	FillSubKey@size& (0+255),b
 28603  0034D8  0C10               	retlw	16
 28604  0034DA                     __end_ofPL200:
 28605                           	opt stack 0
 28606                           tosu	equ	0xFFF
 28607                           tosh	equ	0xFFE
 28608                           tosl	equ	0xFFD
 28609                           pclath	equ	0xFFA
 28610                           tblptru	equ	0xFF8
 28611                           tblptrh	equ	0xFF7
 28612                           tblptrl	equ	0xFF6
 28613                           tablat	equ	0xFF5
 28614                           prodh	equ	0xFF4
 28615                           prodl	equ	0xFF3
 28616                           intcon	equ	0xFF2
 28617                           indf0	equ	0xFEF
 28618                           postinc0	equ	0xFEE
 28619                           plusw0	equ	0xFEB
 28620                           fsr0h	equ	0xFEA
 28621                           fsr0l	equ	0xFE9
 28622                           wreg	equ	0xFE8
 28623                           postinc1	equ	0xFE6
 28624                           postdec1	equ	0xFE5
 28625                           plusw1	equ	0xFE3
 28626                           fsr1h	equ	0xFE2
 28627                           fsr1l	equ	0xFE1
 28628                           indf2	equ	0xFDF
 28629                           postinc2	equ	0xFDE
 28630                           postdec2	equ	0xFDD
 28631                           plusw2	equ	0xFDB
 28632                           fsr2h	equ	0xFDA
 28633                           fsr2l	equ	0xFD9
 28634                           status	equ	0xFD8
 28635                           
 28636 ;; *************** function _FillSubKey *****************
 28637 ;; Defined at:
 28638 ;;		line 167 in file "mcc_generated_files/LoRaWAN/lorawan_aes_cmac.c"
 28639 ;; Parameters:    Size  Location     Type
 28640 ;;  source          2    0[BANK0 ] PTR unsigned char 
 28641 ;;		 -> GenerateSubkey@l(16), AESCmac@k1(16), 
 28642 ;;  key             2    2[BANK0 ] PTR unsigned char 
 28643 ;;		 -> AESCmac@k2(16), AESCmac@k1(16), 
 28644 ;;  size            1    4[BANK0 ] unsigned char 
 28645 ;; Auto vars:     Size  Location     Type
 28646 ;;  i               1    7[BANK0 ] unsigned char 
 28647 ;;  carry           1    6[BANK0 ] unsigned char 
 28648 ;; Return value:  Size  Location     Type
 28649 ;;                  1    wreg      void 
 28650 ;; Registers used:
 28651 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
 28652 ;; Tracked objects:
 28653 ;;		On entry : 3F/0
 28654 ;;		On exit  : 3F/0
 28655 ;;		Unchanged: 0/0
 28656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 28657 ;;      Params:         0       5       0       0       0       0       0       0       0
 28658 ;;      Locals:         0       2       0       0       0       0       0       0       0
 28659 ;;      Temps:          0       1       0       0       0       0       0       0       0
 28660 ;;      Totals:         0       8       0       0       0       0       0       0       0
 28661 ;;Total ram usage:        8 bytes
 28662 ;; Hardware stack levels used:    1
 28663 ;; Hardware stack levels required when called:    7
 28664 ;; This function calls:
 28665 ;;		Nothing
 28666 ;; This function is called by:
 28667 ;;		_GenerateSubkey
 28668 ;; This function uses a non-reentrant model
 28669 ;;
 28670                           
 28671                           	psect	text147
 28672  0054E0                     __ptext147:
 28673                           	opt stack 0
 28674  0054E0                     _FillSubKey:
 28675                           	opt stack 18
 28676                           
 28677                           ; BSR set to: 0
 28678                           ;lorawan_aes_cmac.c: 169: uint8_t i = 0;
 28679                           
 28680                           ; BSR set to: 0
 28681                           ;incstack = 0
 28682  0054E0  6B67               	clrf	FillSubKey@i& (0+255),b
 28683                           
 28684                           ;lorawan_aes_cmac.c: 170: uint8_t carry = 0;
 28685  0054E2  6B66               	clrf	FillSubKey@carry& (0+255),b
 28686                           
 28687                           ;lorawan_aes_cmac.c: 172: i=size;
 28688  0054E4  C064  F067         	movff	FillSubKey@size,FillSubKey@i
 28689                           
 28690                           ;lorawan_aes_cmac.c: 174: while(i--)
 28691  0054E8  D01C               	goto	l12132
 28692  0054EA                     l12128:
 28693                           
 28694                           ; BSR set to: 0
 28695                           ;lorawan_aes_cmac.c: 175: {
 28696                           ;lorawan_aes_cmac.c: 176: key[i] = (source[i] << (1)) | carry;
 28697  0054EA  5167               	movf	FillSubKey@i& (0+255),w,b
 28698  0054EC  2562               	addwf	FillSubKey@key& (0+255),w,b
 28699  0054EE  6ED9               	movwf	fsr2l,c
 28700  0054F0  0E00               	movlw	0
 28701  0054F2  2163               	addwfc	(FillSubKey@key+1)& (0+255),w,b
 28702  0054F4  6EDA               	movwf	fsr2h,c
 28703  0054F6  5167               	movf	FillSubKey@i& (0+255),w,b
 28704  0054F8  2560               	addwf	FillSubKey@source& (0+255),w,b
 28705  0054FA  6EE9               	movwf	fsr0l,c
 28706  0054FC  0E00               	movlw	0
 28707  0054FE  2161               	addwfc	(FillSubKey@source+1)& (0+255),w,b
 28708  005500  6EEA               	movwf	fsr0h,c
 28709  005502  50EF               	movf	indf0,w,c
 28710  005504  6F65               	movwf	??_FillSubKey& (0+255),b
 28711  005506  90D8               	bcf	status,0,c
 28712  005508  3565               	rlcf	??_FillSubKey& (0+255),w,b
 28713  00550A  1166               	iorwf	FillSubKey@carry& (0+255),w,b
 28714  00550C  6EDF               	movwf	indf2,c
 28715                           
 28716                           ; BSR set to: 0
 28717                           ;lorawan_aes_cmac.c: 177: carry = !!(source[i] & 0x80);
 28718  00550E  5167               	movf	FillSubKey@i& (0+255),w,b
 28719  005510  2560               	addwf	FillSubKey@source& (0+255),w,b
 28720  005512  6ED9               	movwf	fsr2l,c
 28721  005514  0E00               	movlw	0
 28722  005516  2161               	addwfc	(FillSubKey@source+1)& (0+255),w,b
 28723  005518  6EDA               	movwf	fsr2h,c
 28724  00551A  0E01               	movlw	1
 28725  00551C  AEDF               	btfss	indf2,7,c
 28726  00551E  0E00               	movlw	0
 28727  005520  6F66               	movwf	FillSubKey@carry& (0+255),b
 28728  005522                     l12132:
 28729                           
 28730                           ; BSR set to: 0
 28731  005522  0767               	decf	FillSubKey@i& (0+255),f,b
 28732  005524  2967               	incf	FillSubKey@i& (0+255),w,b
 28733  005526  E1E1               	bnz	l12128
 28734                           
 28735                           ; BSR set to: 0
 28736  005528  0012               	return		;funcret
 28737  00552A                     __end_of_FillSubKey:
 28738                           	opt stack 0
 28739                           tosu	equ	0xFFF
 28740                           tosh	equ	0xFFE
 28741                           tosl	equ	0xFFD
 28742                           pclath	equ	0xFFA
 28743                           tblptru	equ	0xFF8
 28744                           tblptrh	equ	0xFF7
 28745                           tblptrl	equ	0xFF6
 28746                           tablat	equ	0xFF5
 28747                           prodh	equ	0xFF4
 28748                           prodl	equ	0xFF3
 28749                           intcon	equ	0xFF2
 28750                           indf0	equ	0xFEF
 28751                           postinc0	equ	0xFEE
 28752                           plusw0	equ	0xFEB
 28753                           fsr0h	equ	0xFEA
 28754                           fsr0l	equ	0xFE9
 28755                           wreg	equ	0xFE8
 28756                           postinc1	equ	0xFE6
 28757                           postdec1	equ	0xFE5
 28758                           plusw1	equ	0xFE3
 28759                           fsr1h	equ	0xFE2
 28760                           fsr1l	equ	0xFE1
 28761                           indf2	equ	0xFDF
 28762                           postinc2	equ	0xFDE
 28763                           postdec2	equ	0xFDD
 28764                           plusw2	equ	0xFDB
 28765                           fsr2h	equ	0xFDA
 28766                           fsr2l	equ	0xFD9
 28767                           status	equ	0xFD8
 28768                           
 28769 ;; *************** function _AESEncodeLoRa *****************
 28770 ;; Defined at:
 28771 ;;		line 34 in file "mcc_generated_files/LoRaWAN/lorawan_aes.c"
 28772 ;; Parameters:    Size  Location     Type
 28773 ;;  block           2   44[BANK0 ] PTR unsigned char 
 28774 ;;		 -> GenerateSubkey@l(16), AESCmac@y(16), AESCmac@x(16), aesBuffer(16), 
 28775 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), loRa.activationParameters(105), loRa(245), 
 28776 ;;  key             2   46[BANK0 ] PTR unsigned char 
 28777 ;;		 -> loRa.activationParameters(105), loRa(245), 
 28778 ;; Auto vars:     Size  Location     Type
 28779 ;;  useKey         16   48[BANK0 ] unsigned char [16]
 28780 ;; Return value:  Size  Location     Type
 28781 ;;                  1    wreg      void 
 28782 ;; Registers used:
 28783 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 28784 ;; Tracked objects:
 28785 ;;		On entry : 3F/0
 28786 ;;		On exit  : 3F/0
 28787 ;;		Unchanged: 0/0
 28788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 28789 ;;      Params:         0       4       0       0       0       0       0       0       0
 28790 ;;      Locals:         0      16       0       0       0       0       0       0       0
 28791 ;;      Temps:          0       0       0       0       0       0       0       0       0
 28792 ;;      Totals:         0      20       0       0       0       0       0       0       0
 28793 ;;Total ram usage:       20 bytes
 28794 ;; Hardware stack levels used:    1
 28795 ;; Hardware stack levels required when called:    9
 28796 ;; This function calls:
 28797 ;;		_AESEncode
 28798 ;;		_memcpy
 28799 ;; This function is called by:
 28800 ;;		_LORAWAN_RxDone
 28801 ;;		_ComputeSessionKeys
 28802 ;;		_EncryptFRMPayload
 28803 ;;		_AESCmac
 28804 ;;		_GenerateSubkey
 28805 ;; This function uses a non-reentrant model
 28806 ;;
 28807                           
 28808                           	psect	text148
 28809  005CA2                     __ptext148:
 28810                           	opt stack 0
 28811  005CA2                     _AESEncodeLoRa:
 28812                           	opt stack 17
 28813                           
 28814                           ; BSR set to: 0
 28815                           ;lorawan_aes.c: 36: uint8_t useKey[16];
 28816                           ;lorawan_aes.c: 37: memcpy(useKey, key, sizeof(useKey));
 28817                           
 28818                           ; BSR set to: 0
 28819                           ;incstack = 0
 28820  005CA2  0E90               	movlw	low AESEncodeLoRa@useKey
 28821  005CA4  6F60               	movwf	memcpy@d1& (0+255),b
 28822  005CA6  6B61               	clrf	(memcpy@d1+1)& (0+255),b
 28823  005CA8  C08E  F062         	movff	AESEncodeLoRa@key,memcpy@s1
 28824  005CAC  C08F  F063         	movff	AESEncodeLoRa@key+1,memcpy@s1+1
 28825  005CB0  ECF6  F02C         	call	PL306	;call to abstracted procedure
 28826  005CB4  EC94  F028         	call	_memcpy	;wreg free
 28827                           
 28828                           ;lorawan_aes.c: 38: AESEncode(block, useKey);
 28829  005CB8  C08C  F066         	movff	AESEncodeLoRa@block,AESEncode@block
 28830  005CBC  C08D  F067         	movff	AESEncodeLoRa@block+1,AESEncode@block+1
 28831  005CC0  0E90               	movlw	low AESEncodeLoRa@useKey
 28832  005CC2  6F68               	movwf	AESEncode@masterKey& (0+255),b
 28833  005CC4  EFAA  F00C         	goto	_AESEncode	;wreg free
 28834  005CC8                     __end_of_AESEncodeLoRa:
 28835                           	opt stack 0
 28836                           tosu	equ	0xFFF
 28837                           tosh	equ	0xFFE
 28838                           tosl	equ	0xFFD
 28839                           pclath	equ	0xFFA
 28840                           tblptru	equ	0xFF8
 28841                           tblptrh	equ	0xFF7
 28842                           tblptrl	equ	0xFF6
 28843                           tablat	equ	0xFF5
 28844                           prodh	equ	0xFF4
 28845                           prodl	equ	0xFF3
 28846                           intcon	equ	0xFF2
 28847                           indf0	equ	0xFEF
 28848                           postinc0	equ	0xFEE
 28849                           plusw0	equ	0xFEB
 28850                           fsr0h	equ	0xFEA
 28851                           fsr0l	equ	0xFE9
 28852                           wreg	equ	0xFE8
 28853                           postinc1	equ	0xFE6
 28854                           postdec1	equ	0xFE5
 28855                           plusw1	equ	0xFE3
 28856                           fsr1h	equ	0xFE2
 28857                           fsr1l	equ	0xFE1
 28858                           indf2	equ	0xFDF
 28859                           postinc2	equ	0xFDE
 28860                           postdec2	equ	0xFDD
 28861                           plusw2	equ	0xFDB
 28862                           fsr2h	equ	0xFDA
 28863                           fsr2l	equ	0xFD9
 28864                           status	equ	0xFD8
 28865                           
 28866 ;; *************** function _AESEncode *****************
 28867 ;; Defined at:
 28868 ;;		line 236 in file "mcc_generated_files/LoRaWAN/AES.c"
 28869 ;; Parameters:    Size  Location     Type
 28870 ;;  block           2    6[BANK0 ] PTR unsigned char 
 28871 ;;		 -> GenerateSubkey@l(16), AESCmac@y(16), AESCmac@x(16), aesBuffer(16), 
 28872 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), loRa.activationParameters(105), loRa(245), 
 28873 ;;  masterKey       1    8[BANK0 ] PTR unsigned char 
 28874 ;;		 -> AESEncodeLoRa@useKey(16), 
 28875 ;; Auto vars:     Size  Location     Type
 28876 ;;  aux3            1   42[BANK0 ] unsigned char 
 28877 ;;  aux1            1   41[BANK0 ] unsigned char 
 28878 ;;  aux2            1   40[BANK0 ] unsigned char 
 28879 ;;  aux             1   39[BANK0 ] unsigned char 
 28880 ;;  key            16   17[BANK0 ] unsigned char [16]
 28881 ;;  i               1   43[BANK0 ] unsigned char 
 28882 ;; Return value:  Size  Location     Type
 28883 ;;                  1    wreg      void 
 28884 ;; Registers used:
 28885 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 28886 ;; Tracked objects:
 28887 ;;		On entry : 3F/0
 28888 ;;		On exit  : 3F/0
 28889 ;;		Unchanged: 0/0
 28890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 28891 ;;      Params:         0       3       0       0       0       0       0       0       0
 28892 ;;      Locals:         0      27       0       0       0       0       0       0       0
 28893 ;;      Temps:          0       8       0       0       0       0       0       0       0
 28894 ;;      Totals:         0      38       0       0       0       0       0       0       0
 28895 ;;Total ram usage:       38 bytes
 28896 ;; Hardware stack levels used:    1
 28897 ;; Hardware stack levels required when called:    8
 28898 ;; This function calls:
 28899 ;;		_EncKeySchedule
 28900 ;;		_EncodeShiftRow
 28901 ;; This function is called by:
 28902 ;;		_AESEncodeLoRa
 28903 ;; This function uses a non-reentrant model
 28904 ;;
 28905                           
 28906                           	psect	text149
 28907  001954                     __ptext149:
 28908                           	opt stack 0
 28909  001954                     _AESEncode:
 28910                           	opt stack 17
 28911                           
 28912                           ; BSR set to: 0
 28913                           ;AES.c: 238: unsigned char i;
 28914                           ;AES.c: 240: unsigned char key[16];
 28915                           ;AES.c: 242: for (i = 0; i < 16; i++)
 28916                           
 28917                           ; BSR set to: 0
 28918                           ;incstack = 0
 28919  001954  6B8B               	clrf	AESEncode@i& (0+255),b
 28920  001956                     l11894:
 28921                           
 28922                           ; BSR set to: 0
 28923                           ;AES.c: 243: {
 28924                           ;AES.c: 244: key[i] = masterKey[i];
 28925  001956  5168               	movf	AESEncode@masterKey& (0+255),w,b
 28926  001958  258B               	addwf	AESEncode@i& (0+255),w,b
 28927  00195A  6ED9               	movwf	fsr2l,c
 28928  00195C  6ADA               	clrf	fsr2h,c
 28929  00195E  518B               	movf	AESEncode@i& (0+255),w,b
 28930  001960  0F71               	addlw	low AESEncode@key
 28931  001962  6EE9               	movwf	fsr0l,c
 28932  001964  6AEA               	clrf	fsr0h,c
 28933  001966  CFDF FFEF          	movff	indf2,indf0
 28934                           
 28935                           ; BSR set to: 0
 28936  00196A  2B8B               	incf	AESEncode@i& (0+255),f,b
 28937                           
 28938                           ; BSR set to: 0
 28939  00196C  0E0F               	movlw	15
 28940  00196E  658B               	cpfsgt	AESEncode@i& (0+255),b
 28941  001970  D7F2               	goto	l11894
 28942                           
 28943                           ; BSR set to: 0
 28944                           ;AES.c: 245: }
 28945                           ;AES.c: 248: _roundCounter = 10;
 28946  001972  0E0A               	movlw	10
 28947  001974  6E47               	movwf	__roundCounter,c
 28948                           
 28949                           ;AES.c: 250: _rcon = 0x01;
 28950  001976  0E01               	movlw	1
 28951  001978  6E46               	movwf	__rcon,c
 28952                           
 28953                           ; BSR set to: 0
 28954                           ;AES.c: 253: for(i=0;i<16;i++)
 28955  00197A  6B8B               	clrf	AESEncode@i& (0+255),b
 28956  00197C                     l11908:
 28957                           
 28958                           ; BSR set to: 0
 28959                           ;AES.c: 254: {
 28960                           ;AES.c: 255: block[i] ^= key[i];
 28961  00197C  D8C1               	call	PL88	;call to abstracted procedure
 28962  00197E  D8B2               	call	PL70	;call to abstracted procedure
 28963                           
 28964                           ; BSR set to: 0
 28965                           
 28966                           ; BSR set to: 0
 28967  001980  D8FD               	call	PL402	;call to abstracted procedure
 28968  001982  658B               	cpfsgt	AESEncode@i& (0+255),b
 28969  001984  D7FB               	goto	l11908
 28970  001986                     l23:
 28971                           
 28972                           ; BSR set to: 0
 28973                           ;AES.c: 259: {
 28974                           ;AES.c: 261: for(i=0;i<16;i++)
 28975  001986  6B8B               	clrf	AESEncode@i& (0+255),b
 28976  001988                     l11918:
 28977                           
 28978                           ; BSR set to: 0
 28979                           ;AES.c: 262: {
 28980                           ;AES.c: 263: block[i]=STable[block[i]];
 28981  001988  D8AD               	call	PL70	;call to abstracted procedure
 28982  00198A  50DF               	movf	indf2,w,c
 28983  00198C  6F69               	movwf	??_AESEncode& (0+255),b
 28984  00198E  6B6A               	clrf	(??_AESEncode+1)& (0+255),b
 28985  001990  0E6D               	movlw	low _STable
 28986  001992  2569               	addwf	??_AESEncode& (0+255),w,b
 28987  001994  6EF6               	movwf	tblptrl,c
 28988  001996  0E7E               	movlw	high _STable
 28989  001998  216A               	addwfc	(??_AESEncode+1)& (0+255),w,b
 28990  00199A  6EF7               	movwf	tblptrh,c
 28991  00199C                     	if	0	;There are less than 3 active tblptr bytes
 28992  00199C                     	endif
 28993  00199C  D8A3               	call	PL70	;call to abstracted procedure
 28994  00199E  0008               	tblrd		*
 28995  0019A0  CFF5 FFDF          	movff	tablat,indf2
 28996                           
 28997                           ; BSR set to: 0
 28998  0019A4  2B8B               	incf	AESEncode@i& (0+255),f,b
 28999                           
 29000                           ; BSR set to: 0
 29001  0019A6  0E0F               	movlw	15
 29002  0019A8  658B               	cpfsgt	AESEncode@i& (0+255),b
 29003  0019AA  D7EE               	goto	l11918
 29004                           
 29005                           ; BSR set to: 0
 29006                           ;AES.c: 264: }
 29007                           ;AES.c: 267: EncodeShiftRow(block);
 29008  0019AC  C066  F060         	movff	AESEncode@block,EncodeShiftRow@stateTable
 29009  0019B0  C067  F061         	movff	AESEncode@block+1,EncodeShiftRow@stateTable+1
 29010  0019B4  ECF2  F01C         	call	_EncodeShiftRow	;wreg free
 29011                           
 29012                           ; BSR set to: 0
 29013                           ;AES.c: 270: if(_roundCounter != 1)
 29014  0019B8  0447               	decf	__roundCounter,w,c
 29015  0019BA  E101 D084          	bz	l11966
 29016                           
 29017                           ; BSR set to: 0
 29018                           ;AES.c: 271: {
 29019                           ;AES.c: 272: unsigned char aux,aux1,aux2,aux3;
 29020                           ;AES.c: 274: for(i=0;i<16;i+=4)
 29021  0019BE  6B8B               	clrf	AESEncode@i& (0+255),b
 29022  0019C0                     l11934:
 29023                           
 29024                           ; BSR set to: 0
 29025                           ;AES.c: 275: {
 29026                           ;AES.c: 276: aux1= block[i+0] ^ block[i+1];
 29027  0019C0  D898               	call	PL72	;call to abstracted procedure
 29028  0019C2  2969               	incf	??_AESEncode& (0+255),w,b
 29029  0019C4  6ED9               	movwf	fsr2l,c
 29030  0019C6  D8BD               	call	PL156	;call to abstracted procedure
 29031  0019C8  6F6B               	movwf	(??_AESEncode+2)& (0+255),b
 29032  0019CA  D88C               	call	PL70	;call to abstracted procedure
 29033  0019CC  50DF               	movf	indf2,w,c
 29034  0019CE  196B               	xorwf	(??_AESEncode+2)& (0+255),w,b
 29035  0019D0  6F89               	movwf	AESEncode@aux1& (0+255),b
 29036                           
 29037                           ;AES.c: 277: aux3= block[i+2]^block[i+3];
 29038  0019D2  D88F               	call	PL72	;call to abstracted procedure
 29039  0019D4  D8CF               	call	PL290	;call to abstracted procedure
 29040  0019D6  D8B5               	call	PL156	;call to abstracted procedure
 29041  0019D8  D8A4               	call	PL104	;call to abstracted procedure
 29042  0019DA  6F8A               	movwf	AESEncode@aux3& (0+255),b
 29043                           
 29044                           ; BSR set to: 0
 29045                           ;AES.c: 278: aux = aux1 ^ aux3;
 29046  0019DC  1989               	xorwf	AESEncode@aux1& (0+255),w,b
 29047  0019DE  6F87               	movwf	AESEncode@aux& (0+255),b
 29048                           
 29049                           ; BSR set to: 0
 29050                           ;AES.c: 279: aux2= block[i+2]^block[i+1];
 29051  0019E0  D888               	call	PL72	;call to abstracted procedure
 29052  0019E2  2969               	incf	??_AESEncode& (0+255),w,b
 29053  0019E4  6ED9               	movwf	fsr2l,c
 29054  0019E6  D8AD               	call	PL156	;call to abstracted procedure
 29055  0019E8  D89C               	call	PL104	;call to abstracted procedure
 29056  0019EA  6F88               	movwf	AESEncode@aux2& (0+255),b
 29057                           
 29058                           ;AES.c: 281: aux1 = (((aux1)<0x80)?(aux1)<<1:(((aux1)<<1)^0x1b) );
 29059  0019EC  0E7F               	movlw	127
 29060  0019EE  6589               	cpfsgt	AESEncode@aux1& (0+255),b
 29061  0019F0  D008               	goto	l11942
 29062                           
 29063                           ; BSR set to: 0
 29064  0019F2  0E1B               	movlw	27
 29065  0019F4  C089  F069         	movff	AESEncode@aux1,??_AESEncode
 29066  0019F8  D8AF               	call	PL232	;call to abstracted procedure
 29067  0019FA  6F81               	movwf	_AESEncode$40& (0+255),b
 29068  0019FC  516A               	movf	(??_AESEncode+1)& (0+255),w,b
 29069  0019FE  6F82               	movwf	(_AESEncode$40+1)& (0+255),b
 29070  001A00  D005               	goto	l11944
 29071  001A02                     l11942:
 29072                           
 29073                           ; BSR set to: 0
 29074  001A02  90D8               	bcf	status,0,c
 29075  001A04  3589               	rlcf	AESEncode@aux1& (0+255),w,b
 29076  001A06  6F81               	movwf	_AESEncode$40& (0+255),b
 29077  001A08  6B82               	clrf	(_AESEncode$40+1)& (0+255),b
 29078  001A0A  3782               	rlcf	(_AESEncode$40+1)& (0+255),f,b
 29079  001A0C                     l11944:
 29080                           
 29081                           ; BSR set to: 0
 29082  001A0C  C081  F089         	movff	_AESEncode$40,AESEncode@aux1
 29083                           
 29084                           ;AES.c: 282: aux2 = (((aux2)<0x80)?(aux2)<<1:(((aux2)<<1)^0x1b) );
 29085  001A10  0E7F               	movlw	127
 29086  001A12  6588               	cpfsgt	AESEncode@aux2& (0+255),b
 29087  001A14  D008               	goto	l11948
 29088                           
 29089                           ; BSR set to: 0
 29090  001A16  0E1B               	movlw	27
 29091  001A18  C088  F069         	movff	AESEncode@aux2,??_AESEncode
 29092  001A1C  D89D               	call	PL232	;call to abstracted procedure
 29093  001A1E  6F83               	movwf	_AESEncode$41& (0+255),b
 29094  001A20  516A               	movf	(??_AESEncode+1)& (0+255),w,b
 29095  001A22  6F84               	movwf	(_AESEncode$41+1)& (0+255),b
 29096  001A24  D005               	goto	l11950
 29097  001A26                     l11948:
 29098                           
 29099                           ; BSR set to: 0
 29100  001A26  90D8               	bcf	status,0,c
 29101  001A28  3588               	rlcf	AESEncode@aux2& (0+255),w,b
 29102  001A2A  6F83               	movwf	_AESEncode$41& (0+255),b
 29103  001A2C  6B84               	clrf	(_AESEncode$41+1)& (0+255),b
 29104  001A2E  3784               	rlcf	(_AESEncode$41+1)& (0+255),f,b
 29105  001A30                     l11950:
 29106                           
 29107                           ; BSR set to: 0
 29108  001A30  C083  F088         	movff	_AESEncode$41,AESEncode@aux2
 29109                           
 29110                           ;AES.c: 283: aux3 = (((aux3)<0x80)?(aux3)<<1:(((aux3)<<1)^0x1b) );
 29111  001A34  0E7F               	movlw	127
 29112  001A36  658A               	cpfsgt	AESEncode@aux3& (0+255),b
 29113  001A38  D008               	goto	l11954
 29114                           
 29115                           ; BSR set to: 0
 29116  001A3A  0E1B               	movlw	27
 29117  001A3C  C08A  F069         	movff	AESEncode@aux3,??_AESEncode
 29118  001A40  D88B               	call	PL232	;call to abstracted procedure
 29119  001A42  6F85               	movwf	_AESEncode$42& (0+255),b
 29120  001A44  516A               	movf	(??_AESEncode+1)& (0+255),w,b
 29121  001A46  6F86               	movwf	(_AESEncode$42+1)& (0+255),b
 29122  001A48  D005               	goto	l11956
 29123  001A4A                     l11954:
 29124                           
 29125                           ; BSR set to: 0
 29126  001A4A  90D8               	bcf	status,0,c
 29127  001A4C  358A               	rlcf	AESEncode@aux3& (0+255),w,b
 29128  001A4E  6F85               	movwf	_AESEncode$42& (0+255),b
 29129  001A50  6B86               	clrf	(_AESEncode$42+1)& (0+255),b
 29130  001A52  3786               	rlcf	(_AESEncode$42+1)& (0+255),f,b
 29131  001A54                     l11956:
 29132                           
 29133                           ; BSR set to: 0
 29134  001A54  C085  F08A         	movff	_AESEncode$42,AESEncode@aux3
 29135                           
 29136                           ; BSR set to: 0
 29137                           ;AES.c: 285: block[i+0]= aux^aux1^block[i+0];
 29138  001A58  D845               	call	PL70	;call to abstracted procedure
 29139  001A5A  D884               	call	PL278	;call to abstracted procedure
 29140  001A5C  1987               	xorwf	AESEncode@aux& (0+255),w,b
 29141  001A5E  1989               	xorwf	AESEncode@aux1& (0+255),w,b
 29142  001A60  6EDF               	movwf	indf2,c
 29143                           
 29144                           ; BSR set to: 0
 29145                           ;AES.c: 286: block[i+1]= aux^aux2^block[i+1];
 29146  001A62  D847               	call	PL72	;call to abstracted procedure
 29147  001A64  2969               	incf	??_AESEncode& (0+255),w,b
 29148  001A66  6ED9               	movwf	fsr2l,c
 29149  001A68  D852               	call	PL100	;call to abstracted procedure
 29150  001A6A  296B               	incf	(??_AESEncode+2)& (0+255),w,b
 29151  001A6C  D86F               	call	PL230	;call to abstracted procedure
 29152  001A6E  1987               	xorwf	AESEncode@aux& (0+255),w,b
 29153  001A70  1988               	xorwf	AESEncode@aux2& (0+255),w,b
 29154  001A72  6EDF               	movwf	indf2,c
 29155                           
 29156                           ; BSR set to: 0
 29157                           ;AES.c: 287: block[i+2]= aux^aux3^block[i+2];
 29158  001A74  D83E               	call	PL72	;call to abstracted procedure
 29159  001A76  0E02               	movlw	2
 29160  001A78  2569               	addwf	??_AESEncode& (0+255),w,b
 29161  001A7A  6ED9               	movwf	fsr2l,c
 29162  001A7C  D848               	call	PL100	;call to abstracted procedure
 29163  001A7E  0E02               	movlw	2
 29164  001A80  256B               	addwf	(??_AESEncode+2)& (0+255),w,b
 29165  001A82  D864               	call	PL230	;call to abstracted procedure
 29166  001A84  1987               	xorwf	AESEncode@aux& (0+255),w,b
 29167  001A86  198A               	xorwf	AESEncode@aux3& (0+255),w,b
 29168  001A88  6EDF               	movwf	indf2,c
 29169                           
 29170                           ; BSR set to: 0
 29171                           ;AES.c: 288: block[i+3]= block[i+0]^block[i+1]^block[i+2]^aux;
 29172  001A8A  D833               	call	PL72	;call to abstracted procedure
 29173  001A8C  D873               	call	PL290	;call to abstracted procedure
 29174  001A8E  D83F               	call	PL100	;call to abstracted procedure
 29175  001A90  0E02               	movlw	2
 29176  001A92  256B               	addwf	(??_AESEncode+2)& (0+255),w,b
 29177  001A94  D85B               	call	PL230	;call to abstracted procedure
 29178  001A96  6F6D               	movwf	(??_AESEncode+4)& (0+255),b
 29179  001A98  518B               	movf	AESEncode@i& (0+255),w,b
 29180  001A9A  2566               	addwf	AESEncode@block& (0+255),w,b
 29181  001A9C  6F6E               	movwf	(??_AESEncode+5)& (0+255),b
 29182  001A9E  0E00               	movlw	0
 29183  001AA0  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29184  001AA2  6F6F               	movwf	(??_AESEncode+6)& (0+255),b
 29185  001AA4  296E               	incf	(??_AESEncode+5)& (0+255),w,b
 29186  001AA6  6EE9               	movwf	fsr0l,c
 29187  001AA8  0E00               	movlw	0
 29188  001AAA  216F               	addwfc	(??_AESEncode+6)& (0+255),w,b
 29189  001AAC  6EEA               	movwf	fsr0h,c
 29190  001AAE  50EF               	movf	indf0,w,c
 29191  001AB0  6F70               	movwf	(??_AESEncode+7)& (0+255),b
 29192  001AB2  D858               	call	PL278	;call to abstracted procedure
 29193  001AB4  1970               	xorwf	(??_AESEncode+7)& (0+255),w,b
 29194  001AB6  196D               	xorwf	(??_AESEncode+4)& (0+255),w,b
 29195  001AB8  1987               	xorwf	AESEncode@aux& (0+255),w,b
 29196  001ABA  6EDF               	movwf	indf2,c
 29197  001ABC  0E04               	movlw	4
 29198  001ABE  278B               	addwf	AESEncode@i& (0+255),f,b
 29199  001AC0  0E0F               	movlw	15
 29200  001AC2  658B               	cpfsgt	AESEncode@i& (0+255),b
 29201  001AC4  D77D               	goto	l11934
 29202  001AC6                     l11966:
 29203                           
 29204                           ; BSR set to: 0
 29205                           ;AES.c: 289: }
 29206                           ;AES.c: 290: }
 29207                           ;AES.c: 292: EncKeySchedule(key);
 29208  001AC6  0E71               	movlw	low AESEncode@key
 29209  001AC8  6F60               	movwf	EncKeySchedule@key& (0+255),b
 29210  001ACA  EC6E  F016         	call	_EncKeySchedule	;wreg free
 29211                           
 29212                           ; BSR set to: 0
 29213                           ;AES.c: 294: for(i=0;i<16;i++)
 29214  001ACE  6B8B               	clrf	AESEncode@i& (0+255),b
 29215  001AD0                     l11974:
 29216                           
 29217                           ; BSR set to: 0
 29218                           ;AES.c: 295: {
 29219                           ;AES.c: 296: block[i] ^= key[i];
 29220  001AD0  D817               	call	PL88	;call to abstracted procedure
 29221  001AD2  D808               	call	PL70	;call to abstracted procedure
 29222                           
 29223                           ; BSR set to: 0
 29224                           
 29225                           ; BSR set to: 0
 29226  001AD4  D853               	call	PL402	;call to abstracted procedure
 29227  001AD6  658B               	cpfsgt	AESEncode@i& (0+255),b
 29228  001AD8  D7FB               	goto	l11974
 29229                           
 29230                           ; BSR set to: 0
 29231                           ;AES.c: 297: }
 29232                           ;AES.c: 299: _roundCounter--;
 29233  001ADA  0647               	decf	__roundCounter,f,c
 29234                           
 29235                           ; BSR set to: 0
 29236                           ;AES.c: 300: }
 29237                           ;AES.c: 301: while(_roundCounter !=0);
 29238  001ADC  5047               	movf	__roundCounter,w,c
 29239  001ADE  E001 D752          	bnz	l23
 29240                           
 29241                           ; BSR set to: 0
 29242  001AE2  0012               	return		;funcret
 29243  001AE4                     __end_of_AESEncode:
 29244                           	opt stack 0
 29245  001AE4                     PL70:
 29246                           	opt stack 17
 29247  001AE4  518B               	movf	AESEncode@i& (0+255),w,b
 29248  001AE6  2566               	addwf	AESEncode@block& (0+255),w,b
 29249  001AE8  6ED9               	movwf	fsr2l,c
 29250  001AEA  0E00               	movlw	0
 29251  001AEC  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29252  001AEE  6EDA               	movwf	fsr2h,c
 29253  001AF0  0012               	return	
 29254  001AF2                     __end_ofPL70:
 29255                           	opt stack 0
 29256  001AF2                     PL72:
 29257                           	opt stack 17
 29258  001AF2  518B               	movf	AESEncode@i& (0+255),w,b
 29259  001AF4  2566               	addwf	AESEncode@block& (0+255),w,b
 29260  001AF6  6F69               	movwf	??_AESEncode& (0+255),b
 29261  001AF8  0E00               	movlw	0
 29262  001AFA  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29263  001AFC  6F6A               	movwf	(??_AESEncode+1)& (0+255),b
 29264  001AFE  0012               	return	
 29265  001B00                     __end_ofPL72:
 29266                           	opt stack 0
 29267  001B00                     PL88:
 29268                           	opt stack 17
 29269  001B00  518B               	movf	AESEncode@i& (0+255),w,b
 29270  001B02  0F71               	addlw	low AESEncode@key
 29271  001B04  6ED9               	movwf	fsr2l,c
 29272  001B06  6ADA               	clrf	fsr2h,c
 29273  001B08  50DF               	movf	indf2,w,c
 29274  001B0A  6F69               	movwf	??_AESEncode& (0+255),b
 29275  001B0C  0012               	return	
 29276  001B0E                     __end_ofPL88:
 29277                           	opt stack 0
 29278  001B0E                     PL100:
 29279                           	opt stack 17
 29280  001B0E  0E00               	movlw	0
 29281  001B10  216A               	addwfc	(??_AESEncode+1)& (0+255),w,b
 29282  001B12  6EDA               	movwf	fsr2h,c
 29283  001B14  518B               	movf	AESEncode@i& (0+255),w,b
 29284  001B16  2566               	addwf	AESEncode@block& (0+255),w,b
 29285  001B18  6F6B               	movwf	(??_AESEncode+2)& (0+255),b
 29286  001B1A  0E00               	movlw	0
 29287  001B1C  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29288  001B1E  6F6C               	movwf	(??_AESEncode+3)& (0+255),b
 29289  001B20  0012               	return	
 29290  001B22                     __end_ofPL100:
 29291                           	opt stack 0
 29292  001B22                     PL104:
 29293                           	opt stack 17
 29294  001B22  6F6B               	movwf	(??_AESEncode+2)& (0+255),b
 29295  001B24  518B               	movf	AESEncode@i& (0+255),w,b
 29296  001B26  2566               	addwf	AESEncode@block& (0+255),w,b
 29297  001B28  6F6C               	movwf	(??_AESEncode+3)& (0+255),b
 29298  001B2A  0E00               	movlw	0
 29299  001B2C  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29300  001B2E  6F6D               	movwf	(??_AESEncode+4)& (0+255),b
 29301  001B30  0E02               	movlw	2
 29302  001B32  256C               	addwf	(??_AESEncode+3)& (0+255),w,b
 29303  001B34  6ED9               	movwf	fsr2l,c
 29304  001B36  0E00               	movlw	0
 29305  001B38  216D               	addwfc	(??_AESEncode+4)& (0+255),w,b
 29306  001B3A  6EDA               	movwf	fsr2h,c
 29307  001B3C  50DF               	movf	indf2,w,c
 29308  001B3E  196B               	xorwf	(??_AESEncode+2)& (0+255),w,b
 29309  001B40  0012               	return	
 29310  001B42                     __end_ofPL104:
 29311                           	opt stack 0
 29312  001B42                     PL156:
 29313                           	opt stack 17
 29314  001B42  0E00               	movlw	0
 29315  001B44  216A               	addwfc	(??_AESEncode+1)& (0+255),w,b
 29316  001B46  6EDA               	movwf	fsr2h,c
 29317  001B48  50DF               	movf	indf2,w,c
 29318  001B4A  0012               	return	
 29319  001B4C                     __end_ofPL156:
 29320                           	opt stack 0
 29321  001B4C                     PL230:
 29322                           	opt stack 17
 29323  001B4C  6EE9               	movwf	fsr0l,c
 29324  001B4E  0E00               	movlw	0
 29325  001B50  216C               	addwfc	(??_AESEncode+3)& (0+255),w,b
 29326  001B52  6EEA               	movwf	fsr0h,c
 29327  001B54  50EF               	movf	indf0,w,c
 29328  001B56  0012               	return	
 29329  001B58                     __end_ofPL230:
 29330                           	opt stack 0
 29331  001B58                     PL232:
 29332                           	opt stack 17
 29333  001B58  6B6A               	clrf	(??_AESEncode+1)& (0+255),b
 29334  001B5A  90D8               	bcf	status,0,c
 29335  001B5C  3769               	rlcf	??_AESEncode& (0+255),f,b
 29336  001B5E  376A               	rlcf	(??_AESEncode+1)& (0+255),f,b
 29337  001B60  1969               	xorwf	??_AESEncode& (0+255),w,b
 29338  001B62  0012               	return	
 29339  001B64                     __end_ofPL232:
 29340                           	opt stack 0
 29341  001B64                     PL278:
 29342                           	opt stack 17
 29343  001B64  518B               	movf	AESEncode@i& (0+255),w,b
 29344  001B66  2566               	addwf	AESEncode@block& (0+255),w,b
 29345  001B68  6EE9               	movwf	fsr0l,c
 29346  001B6A  0E00               	movlw	0
 29347  001B6C  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29348  001B6E  6EEA               	movwf	fsr0h,c
 29349  001B70  50EF               	movf	indf0,w,c
 29350  001B72  0012               	return	
 29351  001B74                     __end_ofPL278:
 29352                           	opt stack 0
 29353  001B74                     PL290:
 29354                           	opt stack 17
 29355  001B74  0E03               	movlw	3
 29356  001B76  2569               	addwf	??_AESEncode& (0+255),w,b
 29357  001B78  6ED9               	movwf	fsr2l,c
 29358  001B7A  0012               	return	
 29359  001B7C                     __end_ofPL290:
 29360                           	opt stack 0
 29361  001B7C                     PL402:
 29362                           	opt stack 17
 29363  001B7C  5169               	movf	??_AESEncode& (0+255),w,b
 29364  001B7E  1ADF               	xorwf	indf2,f,c
 29365  001B80  2B8B               	incf	AESEncode@i& (0+255),f,b
 29366  001B82  0C0F               	retlw	15
 29367  001B84                     __end_ofPL402:
 29368                           	opt stack 0
 29369                           tosu	equ	0xFFF
 29370                           tosh	equ	0xFFE
 29371                           tosl	equ	0xFFD
 29372                           pclath	equ	0xFFA
 29373                           tblptru	equ	0xFF8
 29374                           tblptrh	equ	0xFF7
 29375                           tblptrl	equ	0xFF6
 29376                           tablat	equ	0xFF5
 29377                           prodh	equ	0xFF4
 29378                           prodl	equ	0xFF3
 29379                           intcon	equ	0xFF2
 29380                           indf0	equ	0xFEF
 29381                           postinc0	equ	0xFEE
 29382                           plusw0	equ	0xFEB
 29383                           fsr0h	equ	0xFEA
 29384                           fsr0l	equ	0xFE9
 29385                           wreg	equ	0xFE8
 29386                           postinc1	equ	0xFE6
 29387                           postdec1	equ	0xFE5
 29388                           plusw1	equ	0xFE3
 29389                           fsr1h	equ	0xFE2
 29390                           fsr1l	equ	0xFE1
 29391                           indf2	equ	0xFDF
 29392                           postinc2	equ	0xFDE
 29393                           postdec2	equ	0xFDD
 29394                           plusw2	equ	0xFDB
 29395                           fsr2h	equ	0xFDA
 29396                           fsr2l	equ	0xFD9
 29397                           status	equ	0xFD8
 29398                           
 29399 ;; *************** function _EncodeShiftRow *****************
 29400 ;; Defined at:
 29401 ;;		line 205 in file "mcc_generated_files/LoRaWAN/AES.c"
 29402 ;; Parameters:    Size  Location     Type
 29403 ;;  stateTable      2    0[BANK0 ] PTR unsigned char 
 29404 ;;		 -> GenerateSubkey@l(16), AESCmac@y(16), AESCmac@x(16), aesBuffer(16), 
 29405 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), loRa.activationParameters(105), loRa(245), 
 29406 ;; Auto vars:     Size  Location     Type
 29407 ;;  temp            1    2[BANK0 ] unsigned char 
 29408 ;; Return value:  Size  Location     Type
 29409 ;;                  1    wreg      void 
 29410 ;; Registers used:
 29411 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
 29412 ;; Tracked objects:
 29413 ;;		On entry : 3F/0
 29414 ;;		On exit  : 3F/0
 29415 ;;		Unchanged: 0/0
 29416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 29417 ;;      Params:         0       2       0       0       0       0       0       0       0
 29418 ;;      Locals:         0       1       0       0       0       0       0       0       0
 29419 ;;      Temps:          0       0       0       0       0       0       0       0       0
 29420 ;;      Totals:         0       3       0       0       0       0       0       0       0
 29421 ;;Total ram usage:        3 bytes
 29422 ;; Hardware stack levels used:    1
 29423 ;; Hardware stack levels required when called:    7
 29424 ;; This function calls:
 29425 ;;		Nothing
 29426 ;; This function is called by:
 29427 ;;		_AESEncode
 29428 ;; This function uses a non-reentrant model
 29429 ;;
 29430                           
 29431                           	psect	text150
 29432  0039E4                     __ptext150:
 29433                           	opt stack 0
 29434  0039E4                     _EncodeShiftRow:
 29435                           	opt stack 17
 29436                           
 29437                           ; BSR set to: 0
 29438                           ;AES.c: 207: unsigned char temp;
 29439                           ;AES.c: 212: temp=stateTable[1];
 29440                           
 29441                           ; BSR set to: 0
 29442                           ;incstack = 0
 29443  0039E4  EE20 F001          	lfsr	2,1
 29444  0039E8  D85D               	call	PL62	;call to abstracted procedure
 29445  0039EA  50DF               	movf	indf2,w,c
 29446  0039EC  6F62               	movwf	EncodeShiftRow@temp& (0+255),b
 29447                           
 29448                           ; BSR set to: 0
 29449                           ;AES.c: 213: stateTable[1]=stateTable[5];
 29450  0039EE  EE20 F005          	lfsr	2,5
 29451  0039F2  D858               	call	PL62	;call to abstracted procedure
 29452  0039F4  EE00 F001          	lfsr	0,1
 29453  0039F8  D84E               	call	PL52	;call to abstracted procedure
 29454                           
 29455                           ; BSR set to: 0
 29456                           ;AES.c: 214: stateTable[5]=stateTable[9];
 29457  0039FA  EE20 F009          	lfsr	2,9
 29458  0039FE  D852               	call	PL62	;call to abstracted procedure
 29459  003A00  EE00 F005          	lfsr	0,5
 29460  003A04  D848               	call	PL52	;call to abstracted procedure
 29461                           
 29462                           ; BSR set to: 0
 29463                           ;AES.c: 215: stateTable[9]=stateTable[13];
 29464  003A06  EE20 F00D          	lfsr	2,13
 29465  003A0A  D84C               	call	PL62	;call to abstracted procedure
 29466  003A0C  EE00 F009          	lfsr	0,9
 29467  003A10  D842               	call	PL52	;call to abstracted procedure
 29468                           
 29469                           ; BSR set to: 0
 29470                           ;AES.c: 216: stateTable[13]=temp;
 29471  003A12  EE20 F00D          	lfsr	2,13
 29472  003A16  D846               	call	PL62	;call to abstracted procedure
 29473  003A18  C062  FFDF         	movff	EncodeShiftRow@temp,indf2
 29474                           
 29475                           ; BSR set to: 0
 29476                           ;AES.c: 219: temp=stateTable[2];
 29477  003A1C  EE20 F002          	lfsr	2,2
 29478  003A20  D841               	call	PL62	;call to abstracted procedure
 29479  003A22  50DF               	movf	indf2,w,c
 29480  003A24  6F62               	movwf	EncodeShiftRow@temp& (0+255),b
 29481                           
 29482                           ; BSR set to: 0
 29483                           ;AES.c: 220: stateTable[2]=stateTable[10];
 29484  003A26  EE20 F00A          	lfsr	2,10
 29485  003A2A  D83C               	call	PL62	;call to abstracted procedure
 29486  003A2C  EE00 F002          	lfsr	0,2
 29487  003A30  D832               	call	PL52	;call to abstracted procedure
 29488                           
 29489                           ;AES.c: 221: stateTable[10]=temp;
 29490  003A32  EE20 F00A          	lfsr	2,10
 29491  003A36  D836               	call	PL62	;call to abstracted procedure
 29492  003A38  C062  FFDF         	movff	EncodeShiftRow@temp,indf2
 29493                           
 29494                           ;AES.c: 222: temp=stateTable[14];
 29495  003A3C  EE20 F00E          	lfsr	2,14
 29496  003A40  D831               	call	PL62	;call to abstracted procedure
 29497  003A42  50DF               	movf	indf2,w,c
 29498  003A44  6F62               	movwf	EncodeShiftRow@temp& (0+255),b
 29499                           
 29500                           ; BSR set to: 0
 29501                           ;AES.c: 223: stateTable[14]=stateTable[6];
 29502  003A46  EE20 F006          	lfsr	2,6
 29503  003A4A  D82C               	call	PL62	;call to abstracted procedure
 29504  003A4C  EE00 F00E          	lfsr	0,14
 29505  003A50  D822               	call	PL52	;call to abstracted procedure
 29506                           
 29507                           ; BSR set to: 0
 29508                           ;AES.c: 224: stateTable[6]=temp;
 29509  003A52  EE20 F006          	lfsr	2,6
 29510  003A56  D826               	call	PL62	;call to abstracted procedure
 29511  003A58  C062  FFDF         	movff	EncodeShiftRow@temp,indf2
 29512                           
 29513                           ; BSR set to: 0
 29514                           ;AES.c: 227: temp=stateTable[3];
 29515  003A5C  EE20 F003          	lfsr	2,3
 29516  003A60  D821               	call	PL62	;call to abstracted procedure
 29517  003A62  50DF               	movf	indf2,w,c
 29518  003A64  6F62               	movwf	EncodeShiftRow@temp& (0+255),b
 29519                           
 29520                           ; BSR set to: 0
 29521                           ;AES.c: 228: stateTable[3]=stateTable[15];
 29522  003A66  EE20 F00F          	lfsr	2,15
 29523  003A6A  D81C               	call	PL62	;call to abstracted procedure
 29524  003A6C  EE00 F003          	lfsr	0,3
 29525  003A70  D812               	call	PL52	;call to abstracted procedure
 29526                           
 29527                           ; BSR set to: 0
 29528                           ;AES.c: 229: stateTable[15]=stateTable[11];
 29529  003A72  EE20 F00B          	lfsr	2,11
 29530  003A76  D816               	call	PL62	;call to abstracted procedure
 29531  003A78  EE00 F00F          	lfsr	0,15
 29532  003A7C  D80C               	call	PL52	;call to abstracted procedure
 29533                           
 29534                           ; BSR set to: 0
 29535                           ;AES.c: 230: stateTable[11]=stateTable[7];
 29536  003A7E  EE20 F007          	lfsr	2,7
 29537  003A82  D810               	call	PL62	;call to abstracted procedure
 29538  003A84  EE00 F00B          	lfsr	0,11
 29539  003A88  D806               	call	PL52	;call to abstracted procedure
 29540                           
 29541                           ;AES.c: 231: stateTable[7]=temp;
 29542  003A8A  EE20 F007          	lfsr	2,7
 29543  003A8E  D80A               	call	PL62	;call to abstracted procedure
 29544  003A90  C062  FFDF         	movff	EncodeShiftRow@temp,indf2
 29545                           
 29546                           ; BSR set to: 0
 29547  003A94  0012               	return		;funcret
 29548  003A96                     __end_of_EncodeShiftRow:
 29549                           	opt stack 0
 29550  003A96                     PL52:
 29551                           	opt stack 17
 29552  003A96  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29553  003A98  26E9               	addwf	fsr0l,f,c
 29554  003A9A  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29555  003A9C  22EA               	addwfc	fsr0h,f,c
 29556  003A9E  CFDF FFEF          	movff	indf2,indf0
 29557  003AA2  0012               	return	
 29558  003AA4                     __end_ofPL52:
 29559                           	opt stack 0
 29560  003AA4                     PL62:
 29561                           	opt stack 17
 29562  003AA4  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29563  003AA6  26D9               	addwf	fsr2l,f,c
 29564  003AA8  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29565  003AAA  22DA               	addwfc	fsr2h,f,c
 29566  003AAC  0012               	return	
 29567  003AAE                     __end_ofPL62:
 29568                           	opt stack 0
 29569                           tosu	equ	0xFFF
 29570                           tosh	equ	0xFFE
 29571                           tosl	equ	0xFFD
 29572                           pclath	equ	0xFFA
 29573                           tblptru	equ	0xFF8
 29574                           tblptrh	equ	0xFF7
 29575                           tblptrl	equ	0xFF6
 29576                           tablat	equ	0xFF5
 29577                           prodh	equ	0xFF4
 29578                           prodl	equ	0xFF3
 29579                           intcon	equ	0xFF2
 29580                           indf0	equ	0xFEF
 29581                           postinc0	equ	0xFEE
 29582                           plusw0	equ	0xFEB
 29583                           fsr0h	equ	0xFEA
 29584                           fsr0l	equ	0xFE9
 29585                           wreg	equ	0xFE8
 29586                           postinc1	equ	0xFE6
 29587                           postdec1	equ	0xFE5
 29588                           plusw1	equ	0xFE3
 29589                           fsr1h	equ	0xFE2
 29590                           fsr1l	equ	0xFE1
 29591                           indf2	equ	0xFDF
 29592                           postinc2	equ	0xFDE
 29593                           postdec2	equ	0xFDD
 29594                           plusw2	equ	0xFDB
 29595                           fsr2h	equ	0xFDA
 29596                           fsr2l	equ	0xFD9
 29597                           status	equ	0xFD8
 29598                           
 29599 ;; *************** function _EncKeySchedule *****************
 29600 ;; Defined at:
 29601 ;;		line 160 in file "mcc_generated_files/LoRaWAN/AES.c"
 29602 ;; Parameters:    Size  Location     Type
 29603 ;;  key             1    0[BANK0 ] PTR unsigned char 
 29604 ;;		 -> AESEncode@key(16), 
 29605 ;; Auto vars:     Size  Location     Type
 29606 ;;		None
 29607 ;; Return value:  Size  Location     Type
 29608 ;;                  1    wreg      void 
 29609 ;; Registers used:
 29610 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 29611 ;; Tracked objects:
 29612 ;;		On entry : 3F/0
 29613 ;;		On exit  : 3F/0
 29614 ;;		Unchanged: 0/0
 29615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 29616 ;;      Params:         0       1       0       0       0       0       0       0       0
 29617 ;;      Locals:         0       2       0       0       0       0       0       0       0
 29618 ;;      Temps:          0       3       0       0       0       0       0       0       0
 29619 ;;      Totals:         0       6       0       0       0       0       0       0       0
 29620 ;;Total ram usage:        6 bytes
 29621 ;; Hardware stack levels used:    1
 29622 ;; Hardware stack levels required when called:    7
 29623 ;; This function calls:
 29624 ;;		Nothing
 29625 ;; This function is called by:
 29626 ;;		_AESEncode
 29627 ;; This function uses a non-reentrant model
 29628 ;;
 29629                           
 29630                           	psect	text151
 29631  002CDC                     __ptext151:
 29632                           	opt stack 0
 29633  002CDC                     _EncKeySchedule:
 29634                           	opt stack 17
 29635                           
 29636                           ; BSR set to: 0
 29637                           ;AES.c: 163: key[0]^=STable[key[13]];
 29638                           
 29639                           ; BSR set to: 0
 29640                           ;incstack = 0
 29641  002CDC  5160               	movf	EncKeySchedule@key& (0+255),w,b
 29642  002CDE  6ED9               	movwf	fsr2l,c
 29643  002CE0  6ADA               	clrf	fsr2h,c
 29644  002CE2  0E0D               	movlw	13
 29645  002CE4  D860               	call	PL22	;call to abstracted procedure
 29646  002CE6  5163               	movf	(??_EncKeySchedule+2)& (0+255),w,b
 29647                           
 29648                           ;AES.c: 164: key[1]^=STable[key[14]];
 29649  002CE8  D883               	call	PL64	;call to abstracted procedure
 29650  002CEA  0E0E               	movlw	14
 29651  002CEC  D85C               	call	PL22	;call to abstracted procedure
 29652  002CEE  2AD9               	incf	fsr2l,f,c
 29653  002CF0  5163               	movf	(??_EncKeySchedule+2)& (0+255),w,b
 29654                           
 29655                           ;AES.c: 165: key[2]^=STable[key[15]];
 29656  002CF2  D87E               	call	PL64	;call to abstracted procedure
 29657  002CF4  0E0F               	movlw	15
 29658  002CF6  D857               	call	PL22	;call to abstracted procedure
 29659  002CF8  0E02               	movlw	2
 29660  002CFA  26D9               	addwf	fsr2l,f,c
 29661  002CFC  5163               	movf	(??_EncKeySchedule+2)& (0+255),w,b
 29662                           
 29663                           ;AES.c: 166: key[3]^=STable[key[12]];
 29664  002CFE  D878               	call	PL64	;call to abstracted procedure
 29665  002D00  0E0C               	movlw	12
 29666  002D02  D851               	call	PL22	;call to abstracted procedure
 29667  002D04  0E03               	movlw	3
 29668  002D06  26D9               	addwf	fsr2l,f,c
 29669  002D08  5163               	movf	(??_EncKeySchedule+2)& (0+255),w,b
 29670                           
 29671                           ; BSR set to: 0
 29672                           ;AES.c: 168: key[0]^=_rcon;
 29673  002D0A  D872               	call	PL64	;call to abstracted procedure
 29674  002D0C  5046               	movf	__rcon,w,c
 29675  002D0E  1ADF               	xorwf	indf2,f,c
 29676                           
 29677                           ; BSR set to: 0
 29678                           ;AES.c: 169: _rcon = (((_rcon)<0x80)?(_rcon)<<1:(((_rcon)<<1)^0x1b) );
 29679  002D10  0E7F               	movlw	127
 29680  002D12  6446               	cpfsgt	__rcon,c
 29681  002D14  D00C               	goto	l11820
 29682                           
 29683                           ; BSR set to: 0
 29684  002D16  0E1B               	movlw	27
 29685  002D18  C046  F061         	movff	__rcon,??_EncKeySchedule
 29686  002D1C  6B62               	clrf	(??_EncKeySchedule+1)& (0+255),b
 29687  002D1E  90D8               	bcf	status,0,c
 29688  002D20  3761               	rlcf	??_EncKeySchedule& (0+255),f,b
 29689  002D22  3762               	rlcf	(??_EncKeySchedule+1)& (0+255),f,b
 29690  002D24  1961               	xorwf	??_EncKeySchedule& (0+255),w,b
 29691  002D26  6F64               	movwf	_EncKeySchedule$26& (0+255),b
 29692  002D28  5162               	movf	(??_EncKeySchedule+1)& (0+255),w,b
 29693  002D2A  6F65               	movwf	(_EncKeySchedule$26+1)& (0+255),b
 29694  002D2C  D005               	goto	l11822
 29695  002D2E                     l11820:
 29696                           
 29697                           ; BSR set to: 0
 29698  002D2E  90D8               	bcf	status,0,c
 29699  002D30  3446               	rlcf	__rcon,w,c
 29700  002D32  6F64               	movwf	_EncKeySchedule$26& (0+255),b
 29701  002D34  6B65               	clrf	(_EncKeySchedule$26+1)& (0+255),b
 29702  002D36  3765               	rlcf	(_EncKeySchedule$26+1)& (0+255),f,b
 29703  002D38                     l11822:
 29704                           
 29705                           ; BSR set to: 0
 29706  002D38  C064  F046         	movff	_EncKeySchedule$26,__rcon
 29707                           
 29708                           ; BSR set to: 0
 29709                           ;AES.c: 172: key[4]^=key[0];
 29710  002D3C  5160               	movf	EncKeySchedule@key& (0+255),w,b
 29711  002D3E  6ED9               	movwf	fsr2l,c
 29712  002D40  6ADA               	clrf	fsr2h,c
 29713  002D42  D850               	call	PL44	;call to abstracted procedure
 29714  002D44  0E04               	movlw	4
 29715                           
 29716                           ; BSR set to: 0
 29717                           ;AES.c: 173: key[5]^=key[1];
 29718  002D46  D840               	call	PL28	;call to abstracted procedure
 29719  002D48  2AD9               	incf	fsr2l,f,c
 29720  002D4A  D84C               	call	PL44	;call to abstracted procedure
 29721  002D4C  0E05               	movlw	5
 29722                           
 29723                           ; BSR set to: 0
 29724                           ;AES.c: 174: key[6]^=key[2];
 29725  002D4E  D83C               	call	PL28	;call to abstracted procedure
 29726  002D50  0E02               	movlw	2
 29727  002D52  D841               	call	PL38	;call to abstracted procedure
 29728  002D54  0E06               	movlw	6
 29729                           
 29730                           ; BSR set to: 0
 29731                           ;AES.c: 175: key[7]^=key[3];
 29732  002D56  D838               	call	PL28	;call to abstracted procedure
 29733  002D58  0E03               	movlw	3
 29734  002D5A  D83D               	call	PL38	;call to abstracted procedure
 29735  002D5C  0E07               	movlw	7
 29736                           
 29737                           ; BSR set to: 0
 29738                           ;AES.c: 178: key[8]^=key[4];
 29739  002D5E  D834               	call	PL28	;call to abstracted procedure
 29740  002D60  0E04               	movlw	4
 29741  002D62  D839               	call	PL38	;call to abstracted procedure
 29742  002D64  0E08               	movlw	8
 29743                           
 29744                           ; BSR set to: 0
 29745                           ;AES.c: 179: key[9]^=key[5];
 29746  002D66  D830               	call	PL28	;call to abstracted procedure
 29747  002D68  0E05               	movlw	5
 29748  002D6A  D835               	call	PL38	;call to abstracted procedure
 29749  002D6C  0E09               	movlw	9
 29750                           
 29751                           ; BSR set to: 0
 29752                           ;AES.c: 180: key[10]^=key[6];
 29753  002D6E  D82C               	call	PL28	;call to abstracted procedure
 29754  002D70  0E06               	movlw	6
 29755  002D72  D831               	call	PL38	;call to abstracted procedure
 29756  002D74  0E0A               	movlw	10
 29757                           
 29758                           ; BSR set to: 0
 29759                           ;AES.c: 181: key[11]^=key[7];
 29760  002D76  D828               	call	PL28	;call to abstracted procedure
 29761  002D78  0E07               	movlw	7
 29762  002D7A  D82D               	call	PL38	;call to abstracted procedure
 29763  002D7C  0E0B               	movlw	11
 29764                           
 29765                           ; BSR set to: 0
 29766                           ;AES.c: 184: key[12]^=key[8];
 29767  002D7E  D824               	call	PL28	;call to abstracted procedure
 29768  002D80  0E08               	movlw	8
 29769  002D82  D829               	call	PL38	;call to abstracted procedure
 29770  002D84  0E0C               	movlw	12
 29771                           
 29772                           ; BSR set to: 0
 29773                           ;AES.c: 185: key[13]^=key[9];
 29774  002D86  D820               	call	PL28	;call to abstracted procedure
 29775  002D88  0E09               	movlw	9
 29776  002D8A  D825               	call	PL38	;call to abstracted procedure
 29777  002D8C  0E0D               	movlw	13
 29778                           
 29779                           ; BSR set to: 0
 29780                           ;AES.c: 186: key[14]^=key[10];
 29781  002D8E  D81C               	call	PL28	;call to abstracted procedure
 29782  002D90  0E0A               	movlw	10
 29783  002D92  D821               	call	PL38	;call to abstracted procedure
 29784  002D94  0E0E               	movlw	14
 29785                           
 29786                           ; BSR set to: 0
 29787                           ;AES.c: 187: key[15]^=key[11];
 29788  002D96  D818               	call	PL28	;call to abstracted procedure
 29789  002D98  0E0B               	movlw	11
 29790  002D9A  D81D               	call	PL38	;call to abstracted procedure
 29791  002D9C  0E0F               	movlw	15
 29792  002D9E  26D9               	addwf	fsr2l,f,c
 29793  002DA0  5161               	movf	??_EncKeySchedule& (0+255),w,b
 29794  002DA2  1ADF               	xorwf	indf2,f,c
 29795                           
 29796                           ; BSR set to: 0
 29797  002DA4  0012               	return		;funcret
 29798  002DA6                     __end_of_EncKeySchedule:
 29799                           	opt stack 0
 29800  002DA6                     PL22:
 29801                           	opt stack 17
 29802  002DA6  26D9               	addwf	fsr2l,f,c
 29803  002DA8  50DF               	movf	indf2,w,c
 29804  002DAA  6F61               	movwf	??_EncKeySchedule& (0+255),b
 29805  002DAC  6B62               	clrf	(??_EncKeySchedule+1)& (0+255),b
 29806  002DAE  0E6D               	movlw	low _STable
 29807  002DB0  2561               	addwf	??_EncKeySchedule& (0+255),w,b
 29808  002DB2  6EF6               	movwf	tblptrl,c
 29809  002DB4  0E7E               	movlw	high _STable
 29810  002DB6  2162               	addwfc	(??_EncKeySchedule+1)& (0+255),w,b
 29811  002DB8  6EF7               	movwf	tblptrh,c
 29812  002DBA                     	if	0	;There are less than 3 active tblptr bytes
 29813  002DBA                     	endif
 29814  002DBA  0008               	tblrd		*
 29815  002DBC  CFF5 F063          	movff	tablat,??_EncKeySchedule+2
 29816  002DC0  5160               	movf	EncKeySchedule@key& (0+255),w,b
 29817  002DC2  6ED9               	movwf	fsr2l,c
 29818  002DC4  6ADA               	clrf	fsr2h,c
 29819  002DC6  0012               	return	
 29820  002DC8                     __end_ofPL22:
 29821                           	opt stack 0
 29822  002DC8                     PL28:
 29823                           	opt stack 17
 29824  002DC8  26D9               	addwf	fsr2l,f,c
 29825  002DCA  5161               	movf	??_EncKeySchedule& (0+255),w,b
 29826  002DCC  1ADF               	xorwf	indf2,f,c
 29827  002DCE  5160               	movf	EncKeySchedule@key& (0+255),w,b
 29828  002DD0  6ED9               	movwf	fsr2l,c
 29829  002DD2  6ADA               	clrf	fsr2h,c
 29830  002DD4  0012               	return	
 29831  002DD6                     __end_ofPL28:
 29832                           	opt stack 0
 29833  002DD6                     PL38:
 29834                           	opt stack 17
 29835  002DD6  26D9               	addwf	fsr2l,f,c
 29836  002DD8  50DF               	movf	indf2,w,c
 29837  002DDA  6F61               	movwf	??_EncKeySchedule& (0+255),b
 29838  002DDC  5160               	movf	EncKeySchedule@key& (0+255),w,b
 29839  002DDE  6ED9               	movwf	fsr2l,c
 29840  002DE0  6ADA               	clrf	fsr2h,c
 29841  002DE2  0012               	return	
 29842  002DE4                     __end_ofPL38:
 29843                           	opt stack 0
 29844  002DE4                     PL44:
 29845                           	opt stack 17
 29846  002DE4  50DF               	movf	indf2,w,c
 29847  002DE6  6F61               	movwf	??_EncKeySchedule& (0+255),b
 29848  002DE8  5160               	movf	EncKeySchedule@key& (0+255),w,b
 29849  002DEA  6ED9               	movwf	fsr2l,c
 29850  002DEC  6ADA               	clrf	fsr2h,c
 29851  002DEE  0012               	return	
 29852  002DF0                     __end_ofPL44:
 29853                           	opt stack 0
 29854  002DF0                     PL64:
 29855                           	opt stack 17
 29856  002DF0  1ADF               	xorwf	indf2,f,c
 29857  002DF2  5160               	movf	EncKeySchedule@key& (0+255),w,b
 29858  002DF4  6ED9               	movwf	fsr2l,c
 29859  002DF6  6ADA               	clrf	fsr2h,c
 29860  002DF8  0012               	return	
 29861  002DFA                     __end_ofPL64:
 29862                           	opt stack 0
 29863                           tosu	equ	0xFFF
 29864                           tosh	equ	0xFFE
 29865                           tosl	equ	0xFFD
 29866                           pclath	equ	0xFFA
 29867                           tblptru	equ	0xFF8
 29868                           tblptrh	equ	0xFF7
 29869                           tblptrl	equ	0xFF6
 29870                           tablat	equ	0xFF5
 29871                           prodh	equ	0xFF4
 29872                           prodl	equ	0xFF3
 29873                           intcon	equ	0xFF2
 29874                           indf0	equ	0xFEF
 29875                           postinc0	equ	0xFEE
 29876                           plusw0	equ	0xFEB
 29877                           fsr0h	equ	0xFEA
 29878                           fsr0l	equ	0xFE9
 29879                           wreg	equ	0xFE8
 29880                           postinc1	equ	0xFE6
 29881                           postdec1	equ	0xFE5
 29882                           plusw1	equ	0xFE3
 29883                           fsr1h	equ	0xFE2
 29884                           fsr1l	equ	0xFE1
 29885                           indf2	equ	0xFDF
 29886                           postinc2	equ	0xFDE
 29887                           postdec2	equ	0xFDD
 29888                           plusw2	equ	0xFDB
 29889                           fsr2h	equ	0xFDA
 29890                           fsr2l	equ	0xFD9
 29891                           status	equ	0xFD8
 29892                           
 29893 ;; *************** function _LORAWAN_Init *****************
 29894 ;; Defined at:
 29895 ;;		line 123 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 29896 ;; Parameters:    Size  Location     Type
 29897 ;;  RxPayload       2   72[BANK0 ] PTR FTN(PTR unsigned cha
 29898 ;;		 -> RxDataDone(1), 
 29899 ;;  RxJoinRespon    2   74[BANK0 ] PTR FTN(unsigned char ,)
 29900 ;;		 -> RxJoinResponse(1), 
 29901 ;; Auto vars:     Size  Location     Type
 29902 ;;		None
 29903 ;; Return value:  Size  Location     Type
 29904 ;;                  1    wreg      void 
 29905 ;; Registers used:
 29906 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29907 ;; Tracked objects:
 29908 ;;		On entry : 3F/0
 29909 ;;		On exit  : 3D/0
 29910 ;;		Unchanged: 0/0
 29911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 29912 ;;      Params:         0       4       0       0       0       0       0       0       0
 29913 ;;      Locals:         0       0       0       0       0       0       0       0       0
 29914 ;;      Temps:          0       0       0       0       0       0       0       0       0
 29915 ;;      Totals:         0       4       0       0       0       0       0       0       0
 29916 ;;Total ram usage:        4 bytes
 29917 ;; Hardware stack levels used:    1
 29918 ;; Hardware stack levels required when called:   13
 29919 ;; This function calls:
 29920 ;;		_CreateAllSoftwareTimers
 29921 ;;		_LORAWAN_Reset
 29922 ;;		_RADIO_Init
 29923 ;;		_RADIO_ReadRandom
 29924 ;;		_SetCallbackSoftwareTimers
 29925 ;;		_StopAllSoftwareTimers
 29926 ;;		_srand
 29927 ;; This function is called by:
 29928 ;;		_main
 29929 ;; This function uses a non-reentrant model
 29930 ;;
 29931                           
 29932                           	psect	text152
 29933  0053FE                     __ptext152:
 29934                           	opt stack 0
 29935  0053FE                     _LORAWAN_Init:
 29936                           	opt stack 17
 29937                           
 29938                           ; BSR set to: 0
 29939                           ;lorawan_eu.c: 126: if (loRa.macInitialized == 0)
 29940                           
 29941                           ; BSR set to: 0
 29942                           ;incstack = 0
 29943  0053FE  0102               	movlb	2	; () banked
 29944  005400  51F0               	movf	(_loRa+240)& (0+255),w,b
 29945  005402  E108               	bnz	l15612
 29946                           
 29947                           ; BSR set to: 2
 29948                           ;lorawan_eu.c: 127: {
 29949                           ;lorawan_eu.c: 128: CreateAllSoftwareTimers ();
 29950  005404  EC12  F029         	call	_CreateAllSoftwareTimers	;wreg free
 29951                           
 29952                           ;lorawan_eu.c: 129: SetCallbackSoftwareTimers ();
 29953  005408  EC3A  F020         	call	_SetCallbackSoftwareTimers	;wreg free
 29954                           
 29955                           ; BSR set to: 0
 29956                           ;lorawan_eu.c: 130: loRa.macInitialized = 1;
 29957  00540C  0E01               	movlw	1
 29958  00540E  0102               	movlb	2	; () banked
 29959  005410  6FF0               	movwf	(_loRa+240)& (0+255),b
 29960                           
 29961                           ;lorawan_eu.c: 131: }
 29962  005412  D002               	goto	l15614
 29963  005414                     l15612:
 29964                           
 29965                           ; BSR set to: 2
 29966                           ;lorawan_eu.c: 132: else
 29967                           ;lorawan_eu.c: 133: {
 29968                           ;lorawan_eu.c: 134: StopAllSoftwareTimers ();
 29969  005414  ECD8  F029         	call	_StopAllSoftwareTimers	;wreg free
 29970  005418                     l15614:
 29971                           
 29972                           ;lorawan_eu.c: 135: }
 29973                           ;lorawan_eu.c: 137: rxPayload.RxAppData = RxPayload;
 29974  005418  C0A8  F179         	movff	LORAWAN_Init@RxPayload,_rxPayload
 29975  00541C  C0A9  F17A         	movff	LORAWAN_Init@RxPayload+1,_rxPayload+1
 29976                           
 29977                           ;lorawan_eu.c: 138: rxPayload.RxJoinResponse = RxJoinResponse;
 29978  005420  C0AA  F17B         	movff	LORAWAN_Init@RxJoinResponse,_rxPayload+2
 29979  005424  C0AB  F17C         	movff	LORAWAN_Init@RxJoinResponse+1,_rxPayload+3
 29980                           
 29981                           ;lorawan_eu.c: 140: RADIO_Init(&radioBuffer[16], (868100000));
 29982  005428  0EF0               	movlw	low (_radioBuffer+16)
 29983  00542A  0100               	movlb	0	; () banked
 29984  00542C  EC6C  F014         	call	PL160	;call to abstracted procedure
 29985  005430  EC93  F011         	call	_RADIO_Init	;wreg free
 29986                           
 29987                           ; BSR set to: 1
 29988                           ;lorawan_eu.c: 142: srand (RADIO_ReadRandom ());
 29989  005434  EC68  F024         	call	_RADIO_ReadRandom	;wreg free
 29990  005438  C06C  F071         	movff	?_RADIO_ReadRandom,srand@x
 29991  00543C  C06D  F072         	movff	?_RADIO_ReadRandom+1,srand@x+1
 29992  005440  EC80  F030         	call	_srand	;wreg free
 29993                           
 29994                           ;lorawan_eu.c: 144: LORAWAN_Reset (ISM_EU868);
 29995  005444  0E00               	movlw	0
 29996  005446  EFDD  F013         	goto	_LORAWAN_Reset
 29997  00544A                     __end_of_LORAWAN_Init:
 29998                           	opt stack 0
 29999                           tosu	equ	0xFFF
 30000                           tosh	equ	0xFFE
 30001                           tosl	equ	0xFFD
 30002                           pclath	equ	0xFFA
 30003                           tblptru	equ	0xFF8
 30004                           tblptrh	equ	0xFF7
 30005                           tblptrl	equ	0xFF6
 30006                           tablat	equ	0xFF5
 30007                           prodh	equ	0xFF4
 30008                           prodl	equ	0xFF3
 30009                           intcon	equ	0xFF2
 30010                           indf0	equ	0xFEF
 30011                           postinc0	equ	0xFEE
 30012                           plusw0	equ	0xFEB
 30013                           fsr0h	equ	0xFEA
 30014                           fsr0l	equ	0xFE9
 30015                           wreg	equ	0xFE8
 30016                           postinc1	equ	0xFE6
 30017                           postdec1	equ	0xFE5
 30018                           plusw1	equ	0xFE3
 30019                           fsr1h	equ	0xFE2
 30020                           fsr1l	equ	0xFE1
 30021                           indf2	equ	0xFDF
 30022                           postinc2	equ	0xFDE
 30023                           postdec2	equ	0xFDD
 30024                           plusw2	equ	0xFDB
 30025                           fsr2h	equ	0xFDA
 30026                           fsr2l	equ	0xFD9
 30027                           status	equ	0xFD8
 30028                           
 30029 ;; *************** function _srand *****************
 30030 ;; Defined at:
 30031 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\rand.c"
 30032 ;; Parameters:    Size  Location     Type
 30033 ;;  x               2   17[BANK0 ] unsigned int 
 30034 ;; Auto vars:     Size  Location     Type
 30035 ;;		None
 30036 ;; Return value:  Size  Location     Type
 30037 ;;                  1    wreg      void 
 30038 ;; Registers used:
 30039 ;;		status,2
 30040 ;; Tracked objects:
 30041 ;;		On entry : 31/0
 30042 ;;		On exit  : 31/0
 30043 ;;		Unchanged: 31/0
 30044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 30045 ;;      Params:         0       2       0       0       0       0       0       0       0
 30046 ;;      Locals:         0       0       0       0       0       0       0       0       0
 30047 ;;      Temps:          0       0       0       0       0       0       0       0       0
 30048 ;;      Totals:         0       2       0       0       0       0       0       0       0
 30049 ;;Total ram usage:        2 bytes
 30050 ;; Hardware stack levels used:    1
 30051 ;; Hardware stack levels required when called:    7
 30052 ;; This function calls:
 30053 ;;		Nothing
 30054 ;; This function is called by:
 30055 ;;		_LORAWAN_Init
 30056 ;; This function uses a non-reentrant model
 30057 ;;
 30058                           
 30059                           	psect	text153
 30060  006100                     __ptext153:
 30061                           	opt stack 0
 30062  006100                     _srand:
 30063                           	opt stack 22
 30064                           
 30065                           ;incstack = 0
 30066  006100  C071  F054         	movff	srand@x,_randx
 30067  006104  C072  F055         	movff	srand@x+1,_randx+1
 30068  006108  6A56               	clrf	_randx+2,c
 30069  00610A  6A57               	clrf	_randx+3,c
 30070  00610C  0012               	return		;funcret
 30071  00610E                     __end_of_srand:
 30072                           	opt stack 0
 30073                           tosu	equ	0xFFF
 30074                           tosh	equ	0xFFE
 30075                           tosl	equ	0xFFD
 30076                           pclath	equ	0xFFA
 30077                           tblptru	equ	0xFF8
 30078                           tblptrh	equ	0xFF7
 30079                           tblptrl	equ	0xFF6
 30080                           tablat	equ	0xFF5
 30081                           prodh	equ	0xFF4
 30082                           prodl	equ	0xFF3
 30083                           intcon	equ	0xFF2
 30084                           indf0	equ	0xFEF
 30085                           postinc0	equ	0xFEE
 30086                           plusw0	equ	0xFEB
 30087                           fsr0h	equ	0xFEA
 30088                           fsr0l	equ	0xFE9
 30089                           wreg	equ	0xFE8
 30090                           postinc1	equ	0xFE6
 30091                           postdec1	equ	0xFE5
 30092                           plusw1	equ	0xFE3
 30093                           fsr1h	equ	0xFE2
 30094                           fsr1l	equ	0xFE1
 30095                           indf2	equ	0xFDF
 30096                           postinc2	equ	0xFDE
 30097                           postdec2	equ	0xFDD
 30098                           plusw2	equ	0xFDB
 30099                           fsr2h	equ	0xFDA
 30100                           fsr2l	equ	0xFD9
 30101                           status	equ	0xFD8
 30102                           
 30103 ;; *************** function _SetCallbackSoftwareTimers *****************
 30104 ;; Defined at:
 30105 ;;		line 951 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 30106 ;; Parameters:    Size  Location     Type
 30107 ;;		None
 30108 ;; Auto vars:     Size  Location     Type
 30109 ;;		None
 30110 ;; Return value:  Size  Location     Type
 30111 ;;                  1    wreg      void 
 30112 ;; Registers used:
 30113 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 30114 ;; Tracked objects:
 30115 ;;		On entry : 3F/2
 30116 ;;		On exit  : 3F/0
 30117 ;;		Unchanged: 0/0
 30118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 30119 ;;      Params:         0       0       0       0       0       0       0       0       0
 30120 ;;      Locals:         0       0       0       0       0       0       0       0       0
 30121 ;;      Temps:          0       0       0       0       0       0       0       0       0
 30122 ;;      Totals:         0       0       0       0       0       0       0       0       0
 30123 ;;Total ram usage:        0 bytes
 30124 ;; Hardware stack levels used:    1
 30125 ;; Hardware stack levels required when called:    8
 30126 ;; This function calls:
 30127 ;;		_SwTimerSetCallback
 30128 ;; This function is called by:
 30129 ;;		_LORAWAN_Init
 30130 ;; This function uses a non-reentrant model
 30131 ;;
 30132                           
 30133                           	psect	text154
 30134  004074                     __ptext154:
 30135                           	opt stack 0
 30136  004074                     _SetCallbackSoftwareTimers:
 30137                           	opt stack 21
 30138                           
 30139                           ; BSR set to: 2
 30140                           ;lorawan_eu.c: 953: SwTimerSetCallback(loRa.joinAccept1TimerId, LORAWAN_ReceiveWindow1Ca
      +                          llback, 0);
 30141                           
 30142                           ;incstack = 0
 30143  004074  0EC8               	movlw	low _LORAWAN_ReceiveWindow1Callback
 30144  004076  0100               	movlb	0	; () banked
 30145  004078  D84D               	call	PL332	;call to abstracted procedure
 30146  00407A  51E2               	movf	(_loRa+226)& (0+255),w,b
 30147  00407C  ECAE  F02D         	call	_SwTimerSetCallback
 30148                           
 30149                           ;lorawan_eu.c: 954: SwTimerSetCallback(loRa.joinAccept2TimerId, LORAWAN_ReceiveWindow2Ca
      +                          llback, 0);
 30150  004080  D842               	call	PL288	;call to abstracted procedure
 30151  004082  51E3               	movf	(_loRa+227)& (0+255),w,b
 30152  004084  ECAE  F02D         	call	_SwTimerSetCallback
 30153                           
 30154                           ;lorawan_eu.c: 955: SwTimerSetCallback(loRa.linkCheckTimerId, LORAWAN_LinkCheckCallback,
      +                           0);
 30155  004088  0E14               	movlw	low _LORAWAN_LinkCheckCallback
 30156  00408A  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 30157  00408C  0E2F               	movlw	high _LORAWAN_LinkCheckCallback
 30158  00408E  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30159  004090  6B62               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30160  004092  0102               	movlb	2	; () banked
 30161  004094  51E7               	movf	(_loRa+231)& (0+255),w,b
 30162  004096  ECAE  F02D         	call	_SwTimerSetCallback
 30163                           
 30164                           ;lorawan_eu.c: 956: SwTimerSetCallback(loRa.receiveWindow1TimerId, LORAWAN_ReceiveWindow
      +                          1Callback, 0);
 30165  00409A  0EC8               	movlw	low _LORAWAN_ReceiveWindow1Callback
 30166  00409C  D83B               	call	PL332	;call to abstracted procedure
 30167  00409E  51E4               	movf	(_loRa+228)& (0+255),w,b
 30168  0040A0  ECAE  F02D         	call	_SwTimerSetCallback
 30169                           
 30170                           ;lorawan_eu.c: 957: SwTimerSetCallback(loRa.receiveWindow2TimerId, LORAWAN_ReceiveWindow
      +                          2Callback, 0);
 30171  0040A4  D830               	call	PL288	;call to abstracted procedure
 30172  0040A6  51E5               	movf	(_loRa+229)& (0+255),w,b
 30173  0040A8  ECAE  F02D         	call	_SwTimerSetCallback
 30174                           
 30175                           ;lorawan_eu.c: 958: SwTimerSetCallback(loRa.ackTimeoutTimerId, AckRetransmissionCallback
      +                          , 0);
 30176  0040AC  0E12               	movlw	low _AckRetransmissionCallback
 30177  0040AE  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 30178  0040B0  0E33               	movlw	high _AckRetransmissionCallback
 30179  0040B2  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30180  0040B4  6B62               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30181  0040B6  0102               	movlb	2	; () banked
 30182  0040B8  51E8               	movf	(_loRa+232)& (0+255),w,b
 30183  0040BA  ECAE  F02D         	call	_SwTimerSetCallback
 30184                           
 30185                           ;lorawan_eu.c: 959: SwTimerSetCallback(loRa.automaticReplyTimerId, AutomaticReplyCallbac
      +                          k, 0);
 30186  0040BE  0E06               	movlw	low _AutomaticReplyCallback
 30187  0040C0  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 30188  0040C2  0E60               	movlw	high _AutomaticReplyCallback
 30189  0040C4  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30190  0040C6  6B62               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30191  0040C8  0102               	movlb	2	; () banked
 30192  0040CA  51E6               	movf	(_loRa+230)& (0+255),w,b
 30193  0040CC  ECAE  F02D         	call	_SwTimerSetCallback
 30194                           
 30195                           ;lorawan_eu.c: 960: SwTimerSetCallback(loRa.unconfirmedRetransmisionTimerId, Unconfirmed
      +                          TransmissionCallback, 0);
 30196  0040D0  0EAC               	movlw	low _UnconfirmedTransmissionCallback
 30197  0040D2  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 30198  0040D4  0E4A               	movlw	high _UnconfirmedTransmissionCallback
 30199  0040D6  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30200  0040D8  6B62               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30201  0040DA  0102               	movlb	2	; () banked
 30202  0040DC  51EA               	movf	(_loRa+234)& (0+255),w,b
 30203  0040DE  ECAE  F02D         	call	_SwTimerSetCallback
 30204                           
 30205                           ;lorawan_eu.c: 961: SwTimerSetCallback(loRa.abpJoinTimerId, UpdateJoinSuccessState, 0);
 30206  0040E2  0E76               	movlw	low _UpdateJoinSuccessState
 30207  0040E4  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 30208  0040E6  0E3B               	movlw	high _UpdateJoinSuccessState
 30209  0040E8  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30210  0040EA  6B62               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30211  0040EC  0102               	movlb	2	; () banked
 30212  0040EE  51F3               	movf	(_loRa+243)& (0+255),w,b
 30213  0040F0  ECAE  F02D         	call	_SwTimerSetCallback
 30214                           
 30215                           ;lorawan_eu.c: 962: SwTimerSetCallback (loRa.dutyCycleTimerId, DutyCycleCallback, 0);
 30216  0040F4  0E84               	movlw	low _DutyCycleCallback
 30217  0040F6  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 30218  0040F8  0E1B               	movlw	high _DutyCycleCallback
 30219  0040FA  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30220  0040FC  6B62               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30221  0040FE  0102               	movlb	2	; () banked
 30222  004100  51E9               	movf	(_loRa+233)& (0+255),w,b
 30223  004102  EFAE  F02D         	goto	_SwTimerSetCallback
 30224  004106                     __end_of_SetCallbackSoftwareTimers:
 30225                           	opt stack 0
 30226  004106                     PL288:
 30227                           	opt stack 21
 30228  004106  0E64               	movlw	low _LORAWAN_ReceiveWindow2Callback
 30229  004108  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 30230  00410A  0E44               	movlw	high _LORAWAN_ReceiveWindow2Callback
 30231  00410C  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30232  00410E  6B62               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30233  004110  0102               	movlb	2	; () banked
 30234  004112  0012               	return	
 30235  004114                     __end_ofPL288:
 30236                           	opt stack 0
 30237  004114                     PL332:
 30238                           	opt stack 21
 30239  004114  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 30240  004116  0E3F               	movlw	high _LORAWAN_ReceiveWindow1Callback
 30241  004118  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30242  00411A  6B62               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30243  00411C  0102               	movlb	2	; () banked
 30244  00411E  0012               	return	
 30245  004120                     __end_ofPL332:
 30246                           	opt stack 0
 30247                           tosu	equ	0xFFF
 30248                           tosh	equ	0xFFE
 30249                           tosl	equ	0xFFD
 30250                           pclath	equ	0xFFA
 30251                           tblptru	equ	0xFF8
 30252                           tblptrh	equ	0xFF7
 30253                           tblptrl	equ	0xFF6
 30254                           tablat	equ	0xFF5
 30255                           prodh	equ	0xFF4
 30256                           prodl	equ	0xFF3
 30257                           intcon	equ	0xFF2
 30258                           indf0	equ	0xFEF
 30259                           postinc0	equ	0xFEE
 30260                           plusw0	equ	0xFEB
 30261                           fsr0h	equ	0xFEA
 30262                           fsr0l	equ	0xFE9
 30263                           wreg	equ	0xFE8
 30264                           postinc1	equ	0xFE6
 30265                           postdec1	equ	0xFE5
 30266                           plusw1	equ	0xFE3
 30267                           fsr1h	equ	0xFE2
 30268                           fsr1l	equ	0xFE1
 30269                           indf2	equ	0xFDF
 30270                           postinc2	equ	0xFDE
 30271                           postdec2	equ	0xFDD
 30272                           plusw2	equ	0xFDB
 30273                           fsr2h	equ	0xFDA
 30274                           fsr2l	equ	0xFD9
 30275                           status	equ	0xFD8
 30276                           
 30277 ;; *************** function _RADIO_ReadRandom *****************
 30278 ;; Defined at:
 30279 ;;		line 1367 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 30280 ;; Parameters:    Size  Location     Type
 30281 ;;		None
 30282 ;; Auto vars:     Size  Location     Type
 30283 ;;  retVal          2   14[BANK0 ] unsigned int 
 30284 ;;  i               1   16[BANK0 ] unsigned char 
 30285 ;; Return value:  Size  Location     Type
 30286 ;;                  2   12[BANK0 ] unsigned int 
 30287 ;; Registers used:
 30288 ;;		wreg, status,2, status,0, cstack
 30289 ;; Tracked objects:
 30290 ;;		On entry : 3F/1
 30291 ;;		On exit  : 31/0
 30292 ;;		Unchanged: 0/0
 30293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 30294 ;;      Params:         0       2       0       0       0       0       0       0       0
 30295 ;;      Locals:         0       3       0       0       0       0       0       0       0
 30296 ;;      Temps:          0       0       0       0       0       0       0       0       0
 30297 ;;      Totals:         0       5       0       0       0       0       0       0       0
 30298 ;;Total ram usage:        5 bytes
 30299 ;; Hardware stack levels used:    1
 30300 ;; Hardware stack levels required when called:   11
 30301 ;; This function calls:
 30302 ;;		_RADIO_RegisterRead
 30303 ;;		_RADIO_RegisterWrite
 30304 ;;		_RADIO_WriteMode
 30305 ;;		_SystemBlockingWaitMs
 30306 ;; This function is called by:
 30307 ;;		_LORAWAN_Init
 30308 ;; This function uses a non-reentrant model
 30309 ;;
 30310                           
 30311                           	psect	text155
 30312  0048D0                     __ptext155:
 30313                           	opt stack 0
 30314  0048D0                     _RADIO_ReadRandom:
 30315                           	opt stack 18
 30316                           
 30317                           ; BSR set to: 1
 30318                           ;radio_driver_SX1276.c: 1369: uint8_t i;
 30319                           ;radio_driver_SX1276.c: 1370: uint16_t retVal;
 30320                           ;radio_driver_SX1276.c: 1371: retVal = 0;
 30321                           
 30322                           ; BSR set to: 0
 30323                           ;incstack = 0
 30324  0048D0  0100               	movlb	0	; () banked
 30325  0048D2  6B6E               	clrf	RADIO_ReadRandom@retVal& (0+255),b
 30326  0048D4  6B6F               	clrf	(RADIO_ReadRandom@retVal+1)& (0+255),b
 30327                           
 30328                           ; BSR set to: 0
 30329                           ;radio_driver_SX1276.c: 1373: RADIO_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
 30330  0048D6  D831               	call	PL422	;call to abstracted procedure
 30331  0048D8  ECDB  F01A         	call	_RADIO_WriteMode
 30332                           
 30333                           ;radio_driver_SX1276.c: 1374: RADIO_RegisterWrite(0x11, 0xFF);
 30334  0048DC  0100               	movlb	0	; () banked
 30335  0048DE  6962               	setf	RADIO_RegisterWrite@value& (0+255),b
 30336  0048E0  0E11               	movlw	17
 30337  0048E2  EC31  F02F         	call	_RADIO_RegisterWrite
 30338                           
 30339                           ;radio_driver_SX1276.c: 1375: RADIO_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
 30340  0048E6  0E01               	movlw	1
 30341  0048E8  D824               	call	PL370	;call to abstracted procedure
 30342  0048EA  ECDB  F01A         	call	_RADIO_WriteMode
 30343                           
 30344                           ;radio_driver_SX1276.c: 1376: for (i = 0; i < 16; i++)
 30345  0048EE  0100               	movlb	0	; () banked
 30346  0048F0  6B70               	clrf	RADIO_ReadRandom@i& (0+255),b
 30347  0048F2                     l15376:
 30348                           
 30349                           ; BSR set to: 0
 30350                           ;radio_driver_SX1276.c: 1377: {
 30351                           ;radio_driver_SX1276.c: 1378: SystemBlockingWaitMs(1);
 30352  0048F2  EC3F  F01B         	call	PL228	;call to abstracted procedure
 30353  0048F6  ECC4  F02D         	call	_SystemBlockingWaitMs	;wreg free
 30354                           
 30355                           ; BSR set to: 0
 30356                           ;radio_driver_SX1276.c: 1379: retVal <<= (1);
 30357  0048FA  90D8               	bcf	status,0,c
 30358  0048FC  376E               	rlcf	RADIO_ReadRandom@retVal& (0+255),f,b
 30359  0048FE  376F               	rlcf	(RADIO_ReadRandom@retVal+1)& (0+255),f,b
 30360                           
 30361                           ; BSR set to: 0
 30362                           ;radio_driver_SX1276.c: 1380: retVal |= RADIO_RegisterRead(0x2C) & 0x01;
 30363  004900  0E2C               	movlw	44
 30364  004902  EC64  F02E         	call	_RADIO_RegisterRead
 30365  004906  0B01               	andlw	1
 30366  004908  136E               	iorwf	RADIO_ReadRandom@retVal& (0+255),f,b
 30367  00490A  2B70               	incf	RADIO_ReadRandom@i& (0+255),f,b
 30368                           
 30369                           ; BSR set to: 0
 30370  00490C  0E0F               	movlw	15
 30371  00490E  6570               	cpfsgt	RADIO_ReadRandom@i& (0+255),b
 30372  004910  D7F0               	goto	l15376
 30373                           
 30374                           ; BSR set to: 0
 30375                           ;radio_driver_SX1276.c: 1381: }
 30376                           ;radio_driver_SX1276.c: 1384: RADIO_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
 30377  004912  D813               	call	PL422	;call to abstracted procedure
 30378  004914  ECDB  F01A         	call	_RADIO_WriteMode
 30379                           
 30380                           ;radio_driver_SX1276.c: 1386: RADIO_RegisterWrite(0x12, 0xFF);
 30381  004918  D814               	call	PL454	;call to abstracted procedure
 30382  00491A  EC31  F02F         	call	_RADIO_RegisterWrite
 30383                           
 30384                           ;radio_driver_SX1276.c: 1388: RADIO_RegisterWrite(0x11, 0x00);
 30385  00491E  0100               	movlb	0	; () banked
 30386  004920  6B62               	clrf	RADIO_RegisterWrite@value& (0+255),b
 30387  004922  0E11               	movlw	17
 30388  004924  EC31  F02F         	call	_RADIO_RegisterWrite
 30389                           
 30390                           ;radio_driver_SX1276.c: 1389: return retVal;
 30391  004928  C06E  F06C         	movff	RADIO_ReadRandom@retVal,?_RADIO_ReadRandom
 30392  00492C  C06F  F06D         	movff	RADIO_ReadRandom@retVal+1,?_RADIO_ReadRandom+1
 30393  004930  0012               	return		;funcret
 30394  004932                     __end_of_RADIO_ReadRandom:
 30395                           	opt stack 0
 30396  004932                     PL370:
 30397                           	opt stack 13
 30398  004932  0100               	movlb	0	; () banked
 30399  004934  6F65               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 30400  004936  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 30401  004938  0C05               	retlw	5
 30402  00493A                     __end_ofPL370:
 30403                           	opt stack 0
 30404  00493A                     PL422:
 30405                           	opt stack 18
 30406  00493A  0E01               	movlw	1
 30407  00493C  6F65               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 30408  00493E  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 30409  004940  0C00               	retlw	0
 30410  004942                     __end_ofPL422:
 30411                           	opt stack 0
 30412  004942                     PL454:
 30413                           	opt stack 16
 30414  004942  0100               	movlb	0	; () banked
 30415  004944  6962               	setf	RADIO_RegisterWrite@value& (0+255),b
 30416  004946  0C12               	retlw	18
 30417  004948                     __end_ofPL454:
 30418                           	opt stack 0
 30419                           tosu	equ	0xFFF
 30420                           tosh	equ	0xFFE
 30421                           tosl	equ	0xFFD
 30422                           pclath	equ	0xFFA
 30423                           tblptru	equ	0xFF8
 30424                           tblptrh	equ	0xFF7
 30425                           tblptrl	equ	0xFF6
 30426                           tablat	equ	0xFF5
 30427                           prodh	equ	0xFF4
 30428                           prodl	equ	0xFF3
 30429                           intcon	equ	0xFF2
 30430                           indf0	equ	0xFEF
 30431                           postinc0	equ	0xFEE
 30432                           plusw0	equ	0xFEB
 30433                           fsr0h	equ	0xFEA
 30434                           fsr0l	equ	0xFE9
 30435                           wreg	equ	0xFE8
 30436                           postinc1	equ	0xFE6
 30437                           postdec1	equ	0xFE5
 30438                           plusw1	equ	0xFE3
 30439                           fsr1h	equ	0xFE2
 30440                           fsr1l	equ	0xFE1
 30441                           indf2	equ	0xFDF
 30442                           postinc2	equ	0xFDE
 30443                           postdec2	equ	0xFDD
 30444                           plusw2	equ	0xFDB
 30445                           fsr2h	equ	0xFDA
 30446                           fsr2l	equ	0xFD9
 30447                           status	equ	0xFD8
 30448                           
 30449 ;; *************** function _LORAWAN_Reset *****************
 30450 ;; Defined at:
 30451 ;;		line 148 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 30452 ;; Parameters:    Size  Location     Type
 30453 ;;  ismBandNew      1    wreg     enum E17444
 30454 ;; Auto vars:     Size  Location     Type
 30455 ;;  ismBandNew      1   71[BANK0 ] enum E17444
 30456 ;; Return value:  Size  Location     Type
 30457 ;;                  1    wreg      void 
 30458 ;; Registers used:
 30459 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30460 ;; Tracked objects:
 30461 ;;		On entry : 31/0
 30462 ;;		On exit  : 3D/0
 30463 ;;		Unchanged: 0/0
 30464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 30465 ;;      Params:         0       0       0       0       0       0       0       0       0
 30466 ;;      Locals:         0       1       0       0       0       0       0       0       0
 30467 ;;      Temps:          0       0       0       0       0       0       0       0       0
 30468 ;;      Totals:         0       1       0       0       0       0       0       0       0
 30469 ;;Total ram usage:        1 bytes
 30470 ;; Hardware stack levels used:    1
 30471 ;; Hardware stack levels required when called:   12
 30472 ;; This function calls:
 30473 ;;		_InitDefault433Channels
 30474 ;;		_InitDefault868Channels
 30475 ;;		_LORAWAN_LinkCheckConfigure
 30476 ;;		_RADIO_Init
 30477 ;;		_RADIO_SetLoRaSyncWord
 30478 ;;		_StopAllSoftwareTimers
 30479 ;;		_UpdateMinMaxChDataRate
 30480 ;;		_memset
 30481 ;; This function is called by:
 30482 ;;		_LORAWAN_Init
 30483 ;; This function uses a non-reentrant model
 30484 ;;
 30485                           
 30486                           	psect	text156
 30487  0027BA                     __ptext156:
 30488                           	opt stack 0
 30489  0027BA                     _LORAWAN_Reset:
 30490                           	opt stack 17
 30491                           
 30492                           ;incstack = 0
 30493                           ;LORAWAN_Reset@ismBandNew stored from wreg
 30494  0027BA  0100               	movlb	0	; () banked
 30495  0027BC  6FA7               	movwf	LORAWAN_Reset@ismBandNew& (0+255),b
 30496                           
 30497                           ;lorawan_eu.c: 150: if (loRa.macInitialized == 1)
 30498  0027BE  0102               	movlb	2	; () banked
 30499  0027C0  05F0               	decf	(_loRa+240)& (0+255),w,b
 30500  0027C2  E102               	bnz	l15394
 30501                           
 30502                           ; BSR set to: 2
 30503                           ;lorawan_eu.c: 151: {
 30504                           ;lorawan_eu.c: 152: StopAllSoftwareTimers ();
 30505  0027C4  ECD8  F029         	call	_StopAllSoftwareTimers	;wreg free
 30506  0027C8                     l15394:
 30507                           
 30508                           ;lorawan_eu.c: 153: }
 30509                           ;lorawan_eu.c: 155: loRa.syncWord = 0x34;
 30510  0027C8  0E34               	movlw	52
 30511  0027CA  0102               	movlb	2	; () banked
 30512  0027CC  6FF4               	movwf	(_loRa+244)& (0+255),b
 30513                           
 30514                           ; BSR set to: 2
 30515                           ;lorawan_eu.c: 156: RADIO_SetLoRaSyncWord(loRa.syncWord);
 30516  0027CE  51F4               	movf	(_loRa+244)& (0+255),w,b
 30517  0027D0  ECD7  F030         	call	_RADIO_SetLoRaSyncWord
 30518                           
 30519                           ;lorawan_eu.c: 158: loRa.macStatus.value = 0;
 30520  0027D4  0102               	movlb	2	; () banked
 30521  0027D6  D89C               	call	PL408	;call to abstracted procedure
 30522                           
 30523                           ; BSR set to: 2
 30524                           ;lorawan_eu.c: 159: loRa.linkCheckMargin = 255;
 30525  0027D8  69DD               	setf	(_loRa+221)& (0+255),b
 30526                           
 30527                           ; BSR set to: 2
 30528                           ;lorawan_eu.c: 160: loRa.linkCheckGwCnt = 0;
 30529  0027DA  6BDE               	clrf	(_loRa+222)& (0+255),b
 30530                           
 30531                           ; BSR set to: 2
 30532                           ;lorawan_eu.c: 161: loRa.lastTimerValue = 0;
 30533  0027DC  D894               	call	PL404	;call to abstracted procedure
 30534                           
 30535                           ; BSR set to: 2
 30536                           ;lorawan_eu.c: 162: loRa.lastPacketLength = 0;
 30537  0027DE  6BD4               	clrf	(_loRa+212)& (0+255),b
 30538  0027E0  6BD5               	clrf	(_loRa+213)& (0+255),b
 30539                           
 30540                           ; BSR set to: 2
 30541                           ;lorawan_eu.c: 163: loRa.fCntDown.value = 0;
 30542  0027E2  D89B               	call	PL410	;call to abstracted procedure
 30543                           
 30544                           ; BSR set to: 2
 30545                           ;lorawan_eu.c: 164: loRa.fCntUp.value = 0;
 30546  0027E4  D88B               	call	PL356	;call to abstracted procedure
 30547                           
 30548                           ; BSR set to: 2
 30549                           ;lorawan_eu.c: 165: loRa.devNonce = 0;
 30550  0027E6  6BD2               	clrf	(_loRa+210)& (0+255),b
 30551  0027E8  6BD3               	clrf	(_loRa+211)& (0+255),b
 30552                           
 30553                           ; BSR set to: 2
 30554                           ;lorawan_eu.c: 166: loRa.prescaler = 1;
 30555  0027EA  6BDC               	clrf	(_loRa+220)& (0+255),b
 30556  0027EC  0E01               	movlw	1
 30557  0027EE  6FDB               	movwf	(_loRa+219)& (0+255),b
 30558                           
 30559                           ; BSR set to: 2
 30560                           ;lorawan_eu.c: 167: loRa.adrAckCnt = 0;
 30561  0027F0  6BD0               	clrf	(_loRa+208)& (0+255),b
 30562  0027F2  6BD1               	clrf	(_loRa+209)& (0+255),b
 30563                           
 30564                           ; BSR set to: 2
 30565                           ;lorawan_eu.c: 168: loRa.counterAdrAckDelay = 0;
 30566  0027F4  6BEE               	clrf	(_loRa+238)& (0+255),b
 30567                           
 30568                           ; BSR set to: 2
 30569                           ;lorawan_eu.c: 169: loRa.offset = 0;
 30570  0027F6  6BEF               	clrf	(_loRa+239)& (0+255),b
 30571                           
 30572                           ; BSR set to: 2
 30573                           ;lorawan_eu.c: 170: loRa.lastTimerValue = 0;
 30574  0027F8  D886               	call	PL404	;call to abstracted procedure
 30575                           
 30576                           ; BSR set to: 2
 30577                           ;lorawan_eu.c: 173: loRa.macStatus.linkCheck = 0;
 30578  0027FA  9503               	bcf	(_loRa+3)& (0+255),2,b
 30579                           
 30580                           ; BSR set to: 2
 30581                           ;lorawan_eu.c: 176: loRa.macStatus.value = 0;
 30582  0027FC  D889               	call	PL408	;call to abstracted procedure
 30583                           
 30584                           ; BSR set to: 2
 30585                           ;lorawan_eu.c: 177: loRa.lorawanMacStatus.value = 0;
 30586  0027FE  6B00               	clrf	_loRa& (0+255),b
 30587  002800  6B01               	clrf	(_loRa+1)& (0+255),b
 30588                           
 30589                           ; BSR set to: 2
 30590                           ;lorawan_eu.c: 179: loRa.maxRepetitionsConfirmedUplink = 7;
 30591  002802  0E07               	movlw	7
 30592  002804  6FD7               	movwf	(_loRa+215)& (0+255),b
 30593                           
 30594                           ; BSR set to: 2
 30595                           ;lorawan_eu.c: 180: loRa.maxRepetitionsUnconfirmedUplink = 0;
 30596  002806  6BD6               	clrf	(_loRa+214)& (0+255),b
 30597                           
 30598                           ; BSR set to: 2
 30599                           ;lorawan_eu.c: 181: loRa.counterRepetitionsConfirmedUplink = 1;
 30600  002808  0E01               	movlw	1
 30601  00280A  6FD9               	movwf	(_loRa+217)& (0+255),b
 30602                           
 30603                           ; BSR set to: 2
 30604                           ;lorawan_eu.c: 182: loRa.counterRepetitionsUnconfirmedUplink = 1;
 30605  00280C  6FD8               	movwf	(_loRa+216)& (0+255),b
 30606                           
 30607                           ; BSR set to: 2
 30608                           ;lorawan_eu.c: 184: loRa.batteryLevel = (0xFF);
 30609  00280E  69E0               	setf	(_loRa+224)& (0+255),b
 30610                           
 30611                           ; BSR set to: 2
 30612                           ;lorawan_eu.c: 186: loRa.ismBand = ismBandNew;
 30613  002810  C0A7  F2A4         	movff	LORAWAN_Reset@ismBandNew,_loRa+164
 30614                           
 30615                           ; BSR set to: 2
 30616                           ;lorawan_eu.c: 188: loRa.deviceClass = CLASS_A;
 30617  002814  6B12               	clrf	(_loRa+18)& (0+255),b
 30618                           
 30619                           ; BSR set to: 2
 30620                           ;lorawan_eu.c: 191: loRa.maxChannels = 16;
 30621  002816  0E10               	movlw	16
 30622  002818  6FED               	movwf	(_loRa+237)& (0+255),b
 30623                           
 30624                           ; BSR set to: 2
 30625                           ;lorawan_eu.c: 192: if(ISM_EU868 == ismBandNew)
 30626  00281A  0100               	movlb	0	; () banked
 30627  00281C  51A7               	movf	LORAWAN_Reset@ismBandNew& (0+255),w,b
 30628  00281E  E110               	bnz	l15456
 30629                           
 30630                           ; BSR set to: 0
 30631                           ;lorawan_eu.c: 193: {
 30632                           ;lorawan_eu.c: 194: RADIO_Init(&radioBuffer[16], (868100000));
 30633  002820  0EF0               	movlw	low (_radioBuffer+16)
 30634  002822  D85A               	call	PL160	;call to abstracted procedure
 30635  002824  EC93  F011         	call	_RADIO_Init	;wreg free
 30636                           
 30637                           ; BSR set to: 1
 30638                           ;lorawan_eu.c: 196: InitDefault868Channels ();
 30639  002828  ECD8  F02B         	call	_InitDefault868Channels	;wreg free
 30640                           
 30641                           ; BSR set to: 0
 30642                           ;lorawan_eu.c: 198: loRa.receiveWindow2Parameters.dataRate = (0);
 30643  00282C  0102               	movlb	2	; () banked
 30644  00282E  6B1C               	clrf	(_loRa+28)& (0+255),b
 30645                           
 30646                           ; BSR set to: 2
 30647                           ;lorawan_eu.c: 199: loRa.receiveWindow2Parameters.frequency = (869525000);
 30648  002830  0E08               	movlw	8
 30649  002832  6F18               	movwf	(_loRa+24)& (0+255),b
 30650  002834  0EE6               	movlw	230
 30651  002836  6F19               	movwf	(_loRa+25)& (0+255),b
 30652  002838  0ED3               	movlw	211
 30653  00283A  6F1A               	movwf	(_loRa+26)& (0+255),b
 30654  00283C  0E33               	movlw	51
 30655  00283E  D019               	goto	L23
 30656  002840                     l15456:
 30657                           
 30658                           ; BSR set to: 0
 30659                           ;lorawan_eu.c: 201: else
 30660                           ;lorawan_eu.c: 202: {
 30661                           ;lorawan_eu.c: 203: RADIO_Init(&radioBuffer[16], (433300000));
 30662  002840  0EF0               	movlw	low (_radioBuffer+16)
 30663  002842  6F79               	movwf	RADIO_Init@radioBuffer& (0+255),b
 30664  002844  0E04               	movlw	high (_radioBuffer+16)
 30665  002846  6F7A               	movwf	(RADIO_Init@radioBuffer+1)& (0+255),b
 30666  002848  0E20               	movlw	32
 30667  00284A  6F7B               	movwf	RADIO_Init@frequency& (0+255),b
 30668  00284C  0EA2               	movlw	162
 30669  00284E  6F7C               	movwf	(RADIO_Init@frequency+1)& (0+255),b
 30670  002850  0ED3               	movlw	211
 30671  002852  6F7D               	movwf	(RADIO_Init@frequency+2)& (0+255),b
 30672  002854  0E19               	movlw	25
 30673  002856  6F7E               	movwf	(RADIO_Init@frequency+3)& (0+255),b
 30674  002858  EC93  F011         	call	_RADIO_Init	;wreg free
 30675                           
 30676                           ; BSR set to: 1
 30677                           ;lorawan_eu.c: 205: InitDefault433Channels ();
 30678  00285C  EC86  F027         	call	_InitDefault433Channels	;wreg free
 30679                           
 30680                           ; BSR set to: 0
 30681                           ;lorawan_eu.c: 207: loRa.receiveWindow2Parameters.dataRate = (0);
 30682  002860  0102               	movlb	2	; () banked
 30683  002862  6B1C               	clrf	(_loRa+28)& (0+255),b
 30684                           
 30685                           ; BSR set to: 2
 30686                           ;lorawan_eu.c: 208: loRa.receiveWindow2Parameters.frequency = (434665000);
 30687  002864  0E28               	movlw	40
 30688  002866  6F18               	movwf	(_loRa+24)& (0+255),b
 30689  002868  0E76               	movlw	118
 30690  00286A  6F19               	movwf	(_loRa+25)& (0+255),b
 30691  00286C  0EE8               	movlw	232
 30692  00286E  6F1A               	movwf	(_loRa+26)& (0+255),b
 30693  002870  0E19               	movlw	25
 30694  002872                     L23:
 30695  002872  6F1B               	movwf	(_loRa+27)& (0+255),b
 30696                           
 30697                           ; BSR set to: 2
 30698                           ;lorawan_eu.c: 209: }
 30699                           ;lorawan_eu.c: 211: loRa.txPower = 1;
 30700  002874  0E01               	movlw	1
 30701  002876  6FE1               	movwf	(_loRa+225)& (0+255),b
 30702                           
 30703                           ; BSR set to: 2
 30704                           ;lorawan_eu.c: 213: loRa.currentDataRate = 0;
 30705  002878  6BDF               	clrf	(_loRa+223)& (0+255),b
 30706                           
 30707                           ; BSR set to: 2
 30708                           ;lorawan_eu.c: 215: UpdateMinMaxChDataRate ();
 30709  00287A  EC8F  F025         	call	_UpdateMinMaxChDataRate	;wreg free
 30710                           
 30711                           ; BSR set to: 0
 30712                           ;lorawan_eu.c: 218: loRa.macKeys.value = 0;
 30713  00287E  0102               	movlb	2	; () banked
 30714  002880  6BA5               	clrf	(_loRa+165)& (0+255),b
 30715  002882  6BA6               	clrf	(_loRa+166)& (0+255),b
 30716                           
 30717                           ; BSR set to: 2
 30718                           ;lorawan_eu.c: 219: memset (&loRa.activationParameters, 0, sizeof(loRa.activationParamet
      +                          ers));
 30719  002884  0E1D               	movlw	low (_loRa+29)
 30720  002886  0100               	movlb	0	; () banked
 30721  002888  6F60               	movwf	memset@p1& (0+255),b
 30722  00288A  0E02               	movlw	high (_loRa+29)
 30723  00288C  6F61               	movwf	(memset@p1+1)& (0+255),b
 30724  00288E  6B63               	clrf	(memset@c+1)& (0+255),b
 30725  002890  6B62               	clrf	memset@c& (0+255),b
 30726  002892  6B65               	clrf	(memset@n+1)& (0+255),b
 30727  002894  0E69               	movlw	105
 30728  002896  6F64               	movwf	memset@n& (0+255),b
 30729  002898  ECEF  F02D         	call	_memset	;wreg free
 30730                           
 30731                           ; BSR set to: 0
 30732                           ;lorawan_eu.c: 222: loRa.protocolParameters.receiveDelay1 = 1000UL;
 30733  00289C  D829               	call	PL344	;call to abstracted procedure
 30734                           
 30735                           ; BSR set to: 2
 30736                           ;lorawan_eu.c: 223: loRa.protocolParameters.receiveDelay2 = 2000UL;
 30737  00289E  0E07               	movlw	7
 30738  0028A0  6F97               	movwf	(_loRa+151)& (0+255),b
 30739  0028A2  0ED0               	movlw	208
 30740  0028A4  6F96               	movwf	(_loRa+150)& (0+255),b
 30741                           
 30742                           ; BSR set to: 2
 30743                           ;lorawan_eu.c: 224: loRa.protocolParameters.joinAcceptDelay1 = 5000UL;
 30744  0028A6  0E13               	movlw	19
 30745  0028A8  6F99               	movwf	(_loRa+153)& (0+255),b
 30746  0028AA  0E88               	movlw	136
 30747  0028AC  6F98               	movwf	(_loRa+152)& (0+255),b
 30748                           
 30749                           ; BSR set to: 2
 30750                           ;lorawan_eu.c: 225: loRa.protocolParameters.joinAcceptDelay2 = 6000UL;
 30751  0028AE  0E17               	movlw	23
 30752  0028B0  6F9B               	movwf	(_loRa+155)& (0+255),b
 30753  0028B2  0E70               	movlw	112
 30754  0028B4  6F9A               	movwf	(_loRa+154)& (0+255),b
 30755                           
 30756                           ; BSR set to: 2
 30757                           ;lorawan_eu.c: 226: loRa.protocolParameters.ackTimeout = 2000;
 30758  0028B6  0E07               	movlw	7
 30759  0028B8  6FA1               	movwf	(_loRa+161)& (0+255),b
 30760  0028BA  0ED0               	movlw	208
 30761  0028BC  6FA0               	movwf	(_loRa+160)& (0+255),b
 30762                           
 30763                           ; BSR set to: 2
 30764                           ;lorawan_eu.c: 227: loRa.protocolParameters.adrAckDelay = 32;
 30765  0028BE  0E20               	movlw	32
 30766  0028C0  6FA3               	movwf	(_loRa+163)& (0+255),b
 30767                           
 30768                           ; BSR set to: 2
 30769                           ;lorawan_eu.c: 228: loRa.protocolParameters.adrAckLimit = 64;
 30770  0028C2  0E40               	movlw	64
 30771  0028C4  6FA2               	movwf	(_loRa+162)& (0+255),b
 30772                           
 30773                           ; BSR set to: 2
 30774                           ;lorawan_eu.c: 229: loRa.protocolParameters.maxFcntGap = 16384;
 30775  0028C6  6F9D               	movwf	(_loRa+157)& (0+255),b
 30776  0028C8  6B9C               	clrf	(_loRa+156)& (0+255),b
 30777                           
 30778                           ; BSR set to: 2
 30779                           ;lorawan_eu.c: 230: loRa.protocolParameters.maxMultiFcntGap = 16384;
 30780  0028CA  6F9F               	movwf	(_loRa+159)& (0+255),b
 30781  0028CC  6B9E               	clrf	(_loRa+158)& (0+255),b
 30782                           
 30783                           ; BSR set to: 2
 30784                           ;lorawan_eu.c: 232: LORAWAN_LinkCheckConfigure (0);
 30785  0028CE  0100               	movlb	0	; () banked
 30786  0028D0  6B9D               	clrf	(LORAWAN_LinkCheckConfigure@period+1)& (0+255),b
 30787  0028D2  6B9C               	clrf	LORAWAN_LinkCheckConfigure@period& (0+255),b
 30788  0028D4  EF94  F018         	goto	_LORAWAN_LinkCheckConfigure	;wreg free
 30789  0028D8                     __end_of_LORAWAN_Reset:
 30790                           	opt stack 0
 30791  0028D8                     PL160:
 30792                           	opt stack 17
 30793  0028D8  6F79               	movwf	RADIO_Init@radioBuffer& (0+255),b
 30794  0028DA  0E04               	movlw	high (_radioBuffer+16)
 30795  0028DC  6F7A               	movwf	(RADIO_Init@radioBuffer+1)& (0+255),b
 30796  0028DE  0EA0               	movlw	160
 30797  0028E0  6F7B               	movwf	RADIO_Init@frequency& (0+255),b
 30798  0028E2  0E27               	movlw	39
 30799  0028E4  6F7C               	movwf	(RADIO_Init@frequency+1)& (0+255),b
 30800  0028E6  0EBE               	movlw	190
 30801  0028E8  6F7D               	movwf	(RADIO_Init@frequency+2)& (0+255),b
 30802  0028EA  0E33               	movlw	51
 30803  0028EC  6F7E               	movwf	(RADIO_Init@frequency+3)& (0+255),b
 30804  0028EE  0C33               	retlw	51
 30805  0028F0                     __end_ofPL160:
 30806                           	opt stack 0
 30807  0028F0                     PL344:
 30808                           	opt stack 18
 30809  0028F0  0E03               	movlw	3
 30810  0028F2  0102               	movlb	2	; () banked
 30811  0028F4  6F95               	movwf	(_loRa+149)& (0+255),b
 30812  0028F6  0EE8               	movlw	232
 30813  0028F8  6F94               	movwf	(_loRa+148)& (0+255),b
 30814  0028FA  0CE8               	retlw	232
 30815  0028FC                     __end_ofPL344:
 30816                           	opt stack 0
 30817  0028FC                     PL356:
 30818                           	opt stack 12
 30819  0028FC  6B06               	clrf	(_loRa+6)& (0+255),b
 30820  0028FE  6B07               	clrf	(_loRa+7)& (0+255),b
 30821  002900  6B08               	clrf	(_loRa+8)& (0+255),b
 30822  002902  6B09               	clrf	(_loRa+9)& (0+255),b
 30823  002904  0012               	return	
 30824  002906                     __end_ofPL356:
 30825                           	opt stack 0
 30826  002906                     PL404:
 30827                           	opt stack 17
 30828  002906  6BC8               	clrf	(_loRa+200)& (0+255),b
 30829  002908  6BC9               	clrf	(_loRa+201)& (0+255),b
 30830  00290A  6BCA               	clrf	(_loRa+202)& (0+255),b
 30831  00290C  6BCB               	clrf	(_loRa+203)& (0+255),b
 30832  00290E  0012               	return	
 30833  002910                     __end_ofPL404:
 30834                           	opt stack 0
 30835  002910                     PL408:
 30836                           	opt stack 17
 30837  002910  6B02               	clrf	(_loRa+2)& (0+255),b
 30838  002912  6B03               	clrf	(_loRa+3)& (0+255),b
 30839  002914  6B04               	clrf	(_loRa+4)& (0+255),b
 30840  002916  6B05               	clrf	(_loRa+5)& (0+255),b
 30841  002918  0012               	return	
 30842  00291A                     __end_ofPL408:
 30843                           	opt stack 0
 30844  00291A                     PL410:
 30845                           	opt stack 12
 30846  00291A  6B0A               	clrf	(_loRa+10)& (0+255),b
 30847  00291C  6B0B               	clrf	(_loRa+11)& (0+255),b
 30848  00291E  6B0C               	clrf	(_loRa+12)& (0+255),b
 30849  002920  6B0D               	clrf	(_loRa+13)& (0+255),b
 30850  002922  0012               	return	
 30851  002924                     __end_ofPL410:
 30852                           	opt stack 0
 30853                           tosu	equ	0xFFF
 30854                           tosh	equ	0xFFE
 30855                           tosl	equ	0xFFD
 30856                           pclath	equ	0xFFA
 30857                           tblptru	equ	0xFF8
 30858                           tblptrh	equ	0xFF7
 30859                           tblptrl	equ	0xFF6
 30860                           tablat	equ	0xFF5
 30861                           prodh	equ	0xFF4
 30862                           prodl	equ	0xFF3
 30863                           intcon	equ	0xFF2
 30864                           indf0	equ	0xFEF
 30865                           postinc0	equ	0xFEE
 30866                           plusw0	equ	0xFEB
 30867                           fsr0h	equ	0xFEA
 30868                           fsr0l	equ	0xFE9
 30869                           wreg	equ	0xFE8
 30870                           postinc1	equ	0xFE6
 30871                           postdec1	equ	0xFE5
 30872                           plusw1	equ	0xFE3
 30873                           fsr1h	equ	0xFE2
 30874                           fsr1l	equ	0xFE1
 30875                           indf2	equ	0xFDF
 30876                           postinc2	equ	0xFDE
 30877                           postdec2	equ	0xFDD
 30878                           plusw2	equ	0xFDB
 30879                           fsr2h	equ	0xFDA
 30880                           fsr2l	equ	0xFD9
 30881                           status	equ	0xFD8
 30882                           
 30883 ;; *************** function _UpdateMinMaxChDataRate *****************
 30884 ;; Defined at:
 30885 ;;		line 1063 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 30886 ;; Parameters:    Size  Location     Type
 30887 ;;		None
 30888 ;; Auto vars:     Size  Location     Type
 30889 ;;  i               1    1[BANK0 ] unsigned char 
 30890 ;; Return value:  Size  Location     Type
 30891 ;;                  1    wreg      void 
 30892 ;; Registers used:
 30893 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 30894 ;; Tracked objects:
 30895 ;;		On entry : 3F/2
 30896 ;;		On exit  : 3F/0
 30897 ;;		Unchanged: 0/0
 30898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 30899 ;;      Params:         0       0       0       0       0       0       0       0       0
 30900 ;;      Locals:         0       1       0       0       0       0       0       0       0
 30901 ;;      Temps:          0       1       0       0       0       0       0       0       0
 30902 ;;      Totals:         0       2       0       0       0       0       0       0       0
 30903 ;;Total ram usage:        2 bytes
 30904 ;; Hardware stack levels used:    1
 30905 ;; Hardware stack levels required when called:    7
 30906 ;; This function calls:
 30907 ;;		Nothing
 30908 ;; This function is called by:
 30909 ;;		_LORAWAN_Reset
 30910 ;; This function uses a non-reentrant model
 30911 ;;
 30912                           
 30913                           	psect	text157
 30914  004B1E                     __ptext157:
 30915                           	opt stack 0
 30916  004B1E                     _UpdateMinMaxChDataRate:
 30917                           	opt stack 21
 30918                           
 30919                           ; BSR set to: 2
 30920                           ;lorawan.c: 1065: uint8_t i;
 30921                           ;lorawan.c: 1068: loRa.minDataRate = 7;
 30922                           
 30923                           ;incstack = 0
 30924  004B1E  0E07               	movlw	7
 30925  004B20  6FEB               	movwf	(_loRa+235)& (0+255),b
 30926                           
 30927                           ; BSR set to: 2
 30928                           ;lorawan.c: 1069: loRa.maxDataRate = 0;
 30929  004B22  6BEC               	clrf	(_loRa+236)& (0+255),b
 30930                           
 30931                           ; BSR set to: 2
 30932                           ;lorawan.c: 1071: for (i = 0; i < loRa.maxChannels; i++)
 30933  004B24  0100               	movlb	0	; () banked
 30934  004B26  6B61               	clrf	UpdateMinMaxChDataRate@i& (0+255),b
 30935  004B28  D029               	goto	l10756
 30936  004B2A                     l10744:
 30937                           
 30938                           ; BSR set to: 0
 30939                           ;lorawan.c: 1072: {
 30940                           ;lorawan.c: 1073: if ( (Channels[i].dataRange.min < loRa.minDataRate) && (Channels[i].st
      +                          atus == 1) )
 30941  004B2A  5161               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 30942  004B2C  EC7E  F021         	call	PL6	;call to abstracted procedure
 30943  004B30  50DF               	movf	223,w,c
 30944  004B32  0B0F               	andlw	15
 30945  004B34  0100               	movlb	0	; () banked
 30946  004B36  6F60               	movwf	??_UpdateMinMaxChDataRate& (0+255),b
 30947  004B38  0102               	movlb	2	; () banked
 30948  004B3A  51EB               	movf	(_loRa+235)& (0+255),w,b
 30949  004B3C  0100               	movlb	0	; () banked
 30950  004B3E  5D60               	subwf	??_UpdateMinMaxChDataRate& (0+255),w,b
 30951  004B40  E209               	bc	l610
 30952                           
 30953                           ; BSR set to: 0
 30954  004B42  5161               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 30955  004B44  EC86  F021         	call	PL12	;call to abstracted procedure
 30956  004B48  E105               	bnz	l610
 30957                           
 30958                           ; BSR set to: 0
 30959                           ;lorawan.c: 1074: {
 30960                           ;lorawan.c: 1075: loRa.minDataRate = Channels[i].dataRange.min;
 30961  004B4A  5161               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 30962  004B4C  EC7E  F021         	call	PL6	;call to abstracted procedure
 30963  004B50  ECB2  F01D         	call	PL326	;call to abstracted procedure
 30964  004B54                     l610:
 30965                           
 30966                           ;lorawan.c: 1076: }
 30967                           ;lorawan.c: 1077: if ( (Channels[i].dataRange.max > loRa.maxDataRate) && (Channels[i].st
      +                          atus == 1) )
 30968  004B54  0100               	movlb	0	; () banked
 30969  004B56  5161               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 30970  004B58  EC7E  F021         	call	PL6	;call to abstracted procedure
 30971  004B5C  ECB7  F01D         	call	PL440	;call to abstracted procedure
 30972  004B60  61EC               	cpfslt	(_loRa+236)& (0+255),b
 30973  004B62  D00A               	goto	l10754
 30974                           
 30975                           ; BSR set to: 2
 30976  004B64  0100               	movlb	0	; () banked
 30977  004B66  5161               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 30978  004B68  EC86  F021         	call	PL12	;call to abstracted procedure
 30979  004B6C  E105               	bnz	l10754
 30980                           
 30981                           ; BSR set to: 0
 30982                           ;lorawan.c: 1078: {
 30983                           ;lorawan.c: 1079: loRa.maxDataRate = Channels[i].dataRange.max;
 30984  004B6E  5161               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 30985  004B70  EC7E  F021         	call	PL6	;call to abstracted procedure
 30986  004B74  ECAD  F01D         	call	PL322	;call to abstracted procedure
 30987  004B78                     l10754:
 30988  004B78  0100               	movlb	0	; () banked
 30989  004B7A  2B61               	incf	UpdateMinMaxChDataRate@i& (0+255),f,b
 30990  004B7C                     l10756:
 30991                           
 30992                           ; BSR set to: 0
 30993  004B7C  0102               	movlb	2	; () banked
 30994  004B7E  51ED               	movf	(_loRa+237)& (0+255),w,b
 30995  004B80  0100               	movlb	0	; () banked
 30996  004B82  5D61               	subwf	UpdateMinMaxChDataRate@i& (0+255),w,b
 30997  004B84  E3D2               	bnc	l10744
 30998                           
 30999                           ; BSR set to: 0
 31000  004B86  0012               	return		;funcret
 31001  004B88                     __end_of_UpdateMinMaxChDataRate:
 31002                           	opt stack 0
 31003                           tosu	equ	0xFFF
 31004                           tosh	equ	0xFFE
 31005                           tosl	equ	0xFFD
 31006                           pclath	equ	0xFFA
 31007                           tblptru	equ	0xFF8
 31008                           tblptrh	equ	0xFF7
 31009                           tblptrl	equ	0xFF6
 31010                           tablat	equ	0xFF5
 31011                           prodh	equ	0xFF4
 31012                           prodl	equ	0xFF3
 31013                           intcon	equ	0xFF2
 31014                           indf0	equ	0xFEF
 31015                           postinc0	equ	0xFEE
 31016                           plusw0	equ	0xFEB
 31017                           fsr0h	equ	0xFEA
 31018                           fsr0l	equ	0xFE9
 31019                           wreg	equ	0xFE8
 31020                           postinc1	equ	0xFE6
 31021                           postdec1	equ	0xFE5
 31022                           plusw1	equ	0xFE3
 31023                           fsr1h	equ	0xFE2
 31024                           fsr1l	equ	0xFE1
 31025                           indf2	equ	0xFDF
 31026                           postinc2	equ	0xFDE
 31027                           postdec2	equ	0xFDD
 31028                           plusw2	equ	0xFDB
 31029                           fsr2h	equ	0xFDA
 31030                           fsr2l	equ	0xFD9
 31031                           status	equ	0xFD8
 31032                           
 31033 ;; *************** function _StopAllSoftwareTimers *****************
 31034 ;; Defined at:
 31035 ;;		line 965 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 31036 ;; Parameters:    Size  Location     Type
 31037 ;;		None
 31038 ;; Auto vars:     Size  Location     Type
 31039 ;;		None
 31040 ;; Return value:  Size  Location     Type
 31041 ;;                  1    wreg      void 
 31042 ;; Registers used:
 31043 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 31044 ;; Tracked objects:
 31045 ;;		On entry : 3F/2
 31046 ;;		On exit  : 3F/0
 31047 ;;		Unchanged: 0/0
 31048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 31049 ;;      Params:         0       0       0       0       0       0       0       0       0
 31050 ;;      Locals:         0       0       0       0       0       0       0       0       0
 31051 ;;      Temps:          0       0       0       0       0       0       0       0       0
 31052 ;;      Totals:         0       0       0       0       0       0       0       0       0
 31053 ;;Total ram usage:        0 bytes
 31054 ;; Hardware stack levels used:    1
 31055 ;; Hardware stack levels required when called:    8
 31056 ;; This function calls:
 31057 ;;		_SwTimerStop
 31058 ;; This function is called by:
 31059 ;;		_LORAWAN_Init
 31060 ;;		_LORAWAN_Reset
 31061 ;; This function uses a non-reentrant model
 31062 ;;
 31063                           
 31064                           	psect	text158
 31065  0053B0                     __ptext158:
 31066                           	opt stack 0
 31067  0053B0                     _StopAllSoftwareTimers:
 31068                           	opt stack 21
 31069                           
 31070                           ; BSR set to: 2
 31071                           ;lorawan_eu.c: 967: SwTimerStop(loRa.joinAccept1TimerId);
 31072                           
 31073                           ; BSR set to: 0
 31074                           ;incstack = 0
 31075  0053B0  51E2               	movf	(_loRa+226)& (0+255),w,b
 31076  0053B2  EC68  F030         	call	_SwTimerStop
 31077                           
 31078                           ;lorawan_eu.c: 968: SwTimerStop(loRa.joinAccept2TimerId);
 31079  0053B6  0102               	movlb	2	; () banked
 31080  0053B8  51E3               	movf	(_loRa+227)& (0+255),w,b
 31081  0053BA  EC68  F030         	call	_SwTimerStop
 31082                           
 31083                           ;lorawan_eu.c: 969: SwTimerStop(loRa.linkCheckTimerId);
 31084  0053BE  0102               	movlb	2	; () banked
 31085  0053C0  51E7               	movf	(_loRa+231)& (0+255),w,b
 31086  0053C2  EC68  F030         	call	_SwTimerStop
 31087                           
 31088                           ;lorawan_eu.c: 970: SwTimerStop(loRa.receiveWindow1TimerId);
 31089  0053C6  0102               	movlb	2	; () banked
 31090  0053C8  51E4               	movf	(_loRa+228)& (0+255),w,b
 31091  0053CA  EC68  F030         	call	_SwTimerStop
 31092                           
 31093                           ;lorawan_eu.c: 971: SwTimerStop(loRa.receiveWindow2TimerId);
 31094  0053CE  0102               	movlb	2	; () banked
 31095  0053D0  51E5               	movf	(_loRa+229)& (0+255),w,b
 31096  0053D2  EC68  F030         	call	_SwTimerStop
 31097                           
 31098                           ;lorawan_eu.c: 972: SwTimerStop(loRa.ackTimeoutTimerId);
 31099  0053D6  0102               	movlb	2	; () banked
 31100  0053D8  51E8               	movf	(_loRa+232)& (0+255),w,b
 31101  0053DA  EC68  F030         	call	_SwTimerStop
 31102                           
 31103                           ;lorawan_eu.c: 973: SwTimerStop(loRa.automaticReplyTimerId);
 31104  0053DE  0102               	movlb	2	; () banked
 31105  0053E0  51E6               	movf	(_loRa+230)& (0+255),w,b
 31106  0053E2  EC68  F030         	call	_SwTimerStop
 31107                           
 31108                           ;lorawan_eu.c: 974: SwTimerStop(loRa.unconfirmedRetransmisionTimerId);
 31109  0053E6  0102               	movlb	2	; () banked
 31110  0053E8  51EA               	movf	(_loRa+234)& (0+255),w,b
 31111  0053EA  EC68  F030         	call	_SwTimerStop
 31112                           
 31113                           ;lorawan_eu.c: 975: SwTimerStop(loRa.abpJoinTimerId);
 31114  0053EE  0102               	movlb	2	; () banked
 31115  0053F0  51F3               	movf	(_loRa+243)& (0+255),w,b
 31116  0053F2  EC68  F030         	call	_SwTimerStop
 31117                           
 31118                           ;lorawan_eu.c: 976: SwTimerStop(loRa.dutyCycleTimerId);
 31119  0053F6  0102               	movlb	2	; () banked
 31120  0053F8  51E9               	movf	(_loRa+233)& (0+255),w,b
 31121  0053FA  EF68  F030         	goto	_SwTimerStop
 31122  0053FE                     __end_of_StopAllSoftwareTimers:
 31123                           	opt stack 0
 31124                           tosu	equ	0xFFF
 31125                           tosh	equ	0xFFE
 31126                           tosl	equ	0xFFD
 31127                           pclath	equ	0xFFA
 31128                           tblptru	equ	0xFF8
 31129                           tblptrh	equ	0xFF7
 31130                           tblptrl	equ	0xFF6
 31131                           tablat	equ	0xFF5
 31132                           prodh	equ	0xFF4
 31133                           prodl	equ	0xFF3
 31134                           intcon	equ	0xFF2
 31135                           indf0	equ	0xFEF
 31136                           postinc0	equ	0xFEE
 31137                           plusw0	equ	0xFEB
 31138                           fsr0h	equ	0xFEA
 31139                           fsr0l	equ	0xFE9
 31140                           wreg	equ	0xFE8
 31141                           postinc1	equ	0xFE6
 31142                           postdec1	equ	0xFE5
 31143                           plusw1	equ	0xFE3
 31144                           fsr1h	equ	0xFE2
 31145                           fsr1l	equ	0xFE1
 31146                           indf2	equ	0xFDF
 31147                           postinc2	equ	0xFDE
 31148                           postdec2	equ	0xFDD
 31149                           plusw2	equ	0xFDB
 31150                           fsr2h	equ	0xFDA
 31151                           fsr2l	equ	0xFD9
 31152                           status	equ	0xFD8
 31153                           
 31154 ;; *************** function _RADIO_SetLoRaSyncWord *****************
 31155 ;; Defined at:
 31156 ;;		line 522 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 31157 ;; Parameters:    Size  Location     Type
 31158 ;;  syncWord        1    wreg     unsigned char 
 31159 ;; Auto vars:     Size  Location     Type
 31160 ;;  syncWord        1    0[BANK0 ] unsigned char 
 31161 ;; Return value:  Size  Location     Type
 31162 ;;                  1    wreg      void 
 31163 ;; Registers used:
 31164 ;;		wreg
 31165 ;; Tracked objects:
 31166 ;;		On entry : 3F/2
 31167 ;;		On exit  : 0/0
 31168 ;;		Unchanged: 0/0
 31169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 31170 ;;      Params:         0       0       0       0       0       0       0       0       0
 31171 ;;      Locals:         0       1       0       0       0       0       0       0       0
 31172 ;;      Temps:          0       0       0       0       0       0       0       0       0
 31173 ;;      Totals:         0       1       0       0       0       0       0       0       0
 31174 ;;Total ram usage:        1 bytes
 31175 ;; Hardware stack levels used:    1
 31176 ;; Hardware stack levels required when called:    7
 31177 ;; This function calls:
 31178 ;;		Nothing
 31179 ;; This function is called by:
 31180 ;;		_LORAWAN_Reset
 31181 ;;		_ConfigureRadio
 31182 ;; This function uses a non-reentrant model
 31183 ;;
 31184                           
 31185                           	psect	text159
 31186  0061AE                     __ptext159:
 31187                           	opt stack 0
 31188  0061AE                     _RADIO_SetLoRaSyncWord:
 31189                           	opt stack 18
 31190                           
 31191                           ; BSR set to: 0
 31192                           ;incstack = 0
 31193                           ;RADIO_SetLoRaSyncWord@syncWord stored from wreg
 31194  0061AE  0100               	movlb	0	; () banked
 31195  0061B0  6F60               	movwf	RADIO_SetLoRaSyncWord@syncWord& (0+255),b
 31196                           
 31197                           ;radio_driver_SX1276.c: 525: RadioConfiguration.syncWordLoRa = syncWord;
 31198  0061B2  C060  F18D         	movff	RADIO_SetLoRaSyncWord@syncWord,_RadioConfiguration+14
 31199  0061B6  0012               	return		;funcret
 31200  0061B8                     __end_of_RADIO_SetLoRaSyncWord:
 31201                           	opt stack 0
 31202                           tosu	equ	0xFFF
 31203                           tosh	equ	0xFFE
 31204                           tosl	equ	0xFFD
 31205                           pclath	equ	0xFFA
 31206                           tblptru	equ	0xFF8
 31207                           tblptrh	equ	0xFF7
 31208                           tblptrl	equ	0xFF6
 31209                           tablat	equ	0xFF5
 31210                           prodh	equ	0xFF4
 31211                           prodl	equ	0xFF3
 31212                           intcon	equ	0xFF2
 31213                           indf0	equ	0xFEF
 31214                           postinc0	equ	0xFEE
 31215                           plusw0	equ	0xFEB
 31216                           fsr0h	equ	0xFEA
 31217                           fsr0l	equ	0xFE9
 31218                           wreg	equ	0xFE8
 31219                           postinc1	equ	0xFE6
 31220                           postdec1	equ	0xFE5
 31221                           plusw1	equ	0xFE3
 31222                           fsr1h	equ	0xFE2
 31223                           fsr1l	equ	0xFE1
 31224                           indf2	equ	0xFDF
 31225                           postinc2	equ	0xFDE
 31226                           postdec2	equ	0xFDD
 31227                           plusw2	equ	0xFDB
 31228                           fsr2h	equ	0xFDA
 31229                           fsr2l	equ	0xFD9
 31230                           status	equ	0xFD8
 31231                           
 31232 ;; *************** function _RADIO_Init *****************
 31233 ;; Defined at:
 31234 ;;		line 422 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 31235 ;; Parameters:    Size  Location     Type
 31236 ;;  radioBuffer     2   25[BANK0 ] PTR unsigned char 
 31237 ;;		 -> radioBuffer(271), 
 31238 ;;  frequency       4   27[BANK0 ] unsigned long 
 31239 ;; Auto vars:     Size  Location     Type
 31240 ;;		None
 31241 ;; Return value:  Size  Location     Type
 31242 ;;                  1    wreg      void 
 31243 ;; Registers used:
 31244 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 31245 ;; Tracked objects:
 31246 ;;		On entry : 3F/0
 31247 ;;		On exit  : 3F/1
 31248 ;;		Unchanged: 0/0
 31249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 31250 ;;      Params:         0       6       0       0       0       0       0       0       0
 31251 ;;      Locals:         0       0       0       0       0       0       0       0       0
 31252 ;;      Temps:          0       1       0       0       0       0       0       0       0
 31253 ;;      Totals:         0       7       0       0       0       0       0       0       0
 31254 ;;Total ram usage:        7 bytes
 31255 ;; Hardware stack levels used:    1
 31256 ;; Hardware stack levels required when called:   11
 31257 ;; This function calls:
 31258 ;;		_RADIO_RegisterRead
 31259 ;;		_RADIO_RegisterWrite
 31260 ;;		_RADIO_Reset
 31261 ;;		_RADIO_WriteFrequency
 31262 ;;		_RADIO_WriteMode
 31263 ;;		_SwTimerCreate
 31264 ;;		_SwTimerSetCallback
 31265 ;;		_SwTimerStop
 31266 ;; This function is called by:
 31267 ;;		_LORAWAN_Init
 31268 ;;		_LORAWAN_Reset
 31269 ;; This function uses a non-reentrant model
 31270 ;;
 31271                           
 31272                           	psect	text160
 31273  002326                     __ptext160:
 31274                           	opt stack 0
 31275  002326                     _RADIO_Init:
 31276                           	opt stack 18
 31277                           
 31278                           ; BSR set to: 0
 31279                           ;radio_driver_SX1276.c: 424: RadioConfiguration.frequency = frequency;
 31280                           
 31281                           ;incstack = 0
 31282  002326  C07B  F17F         	movff	RADIO_Init@frequency,_RadioConfiguration
 31283  00232A  C07C  F180         	movff	RADIO_Init@frequency+1,_RadioConfiguration+1
 31284  00232E  C07D  F181         	movff	RADIO_Init@frequency+2,_RadioConfiguration+2
 31285  002332  C07E  F182         	movff	RADIO_Init@frequency+3,_RadioConfiguration+3
 31286                           
 31287                           ; BSR set to: 0
 31288                           ;radio_driver_SX1276.c: 425: RadioConfiguration.frequencyDeviation = 25000;
 31289  002336  0EA8               	movlw	168
 31290  002338  0101               	movlb	1	; () banked
 31291  00233A  6F83               	movwf	(_RadioConfiguration+4)& (0+255),b
 31292  00233C  0E61               	movlw	97
 31293  00233E  6F84               	movwf	(_RadioConfiguration+5)& (0+255),b
 31294  002340  6B85               	clrf	(_RadioConfiguration+6)& (0+255),b
 31295  002342  6B86               	clrf	(_RadioConfiguration+7)& (0+255),b
 31296                           
 31297                           ;radio_driver_SX1276.c: 426: RadioConfiguration.bitRate = 50000;
 31298  002344  0E50               	movlw	80
 31299  002346  6F87               	movwf	(_RadioConfiguration+8)& (0+255),b
 31300  002348  0EC3               	movlw	195
 31301  00234A  6F88               	movwf	(_RadioConfiguration+9)& (0+255),b
 31302  00234C  6B89               	clrf	(_RadioConfiguration+10)& (0+255),b
 31303  00234E  6B8A               	clrf	(_RadioConfiguration+11)& (0+255),b
 31304                           
 31305                           ;radio_driver_SX1276.c: 427: RadioConfiguration.modulation = MODULATION_LORA;
 31306  002350  0E01               	movlw	1
 31307  002352  6F97               	movwf	(_RadioConfiguration+24)& (0+255),b
 31308                           
 31309                           ;radio_driver_SX1276.c: 428: RadioConfiguration.bandWidth = BW_125KHZ;
 31310  002354  0E07               	movlw	7
 31311  002356  6F99               	movwf	(_RadioConfiguration+26)& (0+255),b
 31312                           
 31313                           ;radio_driver_SX1276.c: 429: RadioConfiguration.outputPower = 1;
 31314  002358  0E01               	movlw	1
 31315  00235A  6F9A               	movwf	(_RadioConfiguration+27)& (0+255),b
 31316                           
 31317                           ;radio_driver_SX1276.c: 430: RadioConfiguration.errorCodingRate = CR_4_5;
 31318  00235C  6FA0               	movwf	(_RadioConfiguration+33)& (0+255),b
 31319                           
 31320                           ; BSR set to: 1
 31321                           ;radio_driver_SX1276.c: 431: RadioConfiguration.implicitHeaderMode = 0;
 31322  00235E  6BA1               	clrf	(_RadioConfiguration+34)& (0+255),b
 31323                           
 31324                           ;radio_driver_SX1276.c: 432: RadioConfiguration.preambleLen = 8;
 31325  002360  6B8C               	clrf	(_RadioConfiguration+13)& (0+255),b
 31326  002362  0E08               	movlw	8
 31327  002364  6F8B               	movwf	(_RadioConfiguration+12)& (0+255),b
 31328                           
 31329                           ;radio_driver_SX1276.c: 433: RadioConfiguration.dataRate = SF_12;
 31330  002366  0E0C               	movlw	12
 31331  002368  6F98               	movwf	(_RadioConfiguration+25)& (0+255),b
 31332                           
 31333                           ;radio_driver_SX1276.c: 434: RadioConfiguration.crcOn = 1;
 31334  00236A  0E01               	movlw	1
 31335  00236C  6F9B               	movwf	(_RadioConfiguration+28)& (0+255),b
 31336                           
 31337                           ; BSR set to: 1
 31338                           ;radio_driver_SX1276.c: 435: RadioConfiguration.paBoost = 0;
 31339  00236E  6B9C               	clrf	(_RadioConfiguration+29)& (0+255),b
 31340                           
 31341                           ; BSR set to: 1
 31342                           ;radio_driver_SX1276.c: 436: RadioConfiguration.iqInverted = 0;
 31343  002370  6B9F               	clrf	(_RadioConfiguration+32)& (0+255),b
 31344                           
 31345                           ;radio_driver_SX1276.c: 437: RadioConfiguration.syncWord[0] = 0xC1;
 31346  002372  0EC1               	movlw	193
 31347  002374  6F8E               	movwf	(_RadioConfiguration+15)& (0+255),b
 31348                           
 31349                           ;radio_driver_SX1276.c: 438: RadioConfiguration.syncWord[1] = 0x94;
 31350  002376  0E94               	movlw	148
 31351  002378  6F8F               	movwf	(_RadioConfiguration+16)& (0+255),b
 31352                           
 31353                           ;radio_driver_SX1276.c: 439: RadioConfiguration.syncWord[2] = 0xC1;
 31354  00237A  0EC1               	movlw	193
 31355  00237C  6F90               	movwf	(_RadioConfiguration+17)& (0+255),b
 31356                           
 31357                           ;radio_driver_SX1276.c: 440: RadioConfiguration.syncWordLen = 3;
 31358  00237E  0E03               	movlw	3
 31359  002380  6F96               	movwf	(_RadioConfiguration+23)& (0+255),b
 31360                           
 31361                           ;radio_driver_SX1276.c: 441: RadioConfiguration.syncWordLoRa = 0x34;
 31362  002382  0E34               	movlw	52
 31363  002384  6F8D               	movwf	(_RadioConfiguration+14)& (0+255),b
 31364                           
 31365                           ; BSR set to: 1
 31366                           ;radio_driver_SX1276.c: 442: RadioConfiguration.flags = 0;
 31367  002386  6BA2               	clrf	(_RadioConfiguration+35)& (0+255),b
 31368                           
 31369                           ; BSR set to: 1
 31370                           ;radio_driver_SX1276.c: 443: RadioConfiguration.dataBufferLen = 0;
 31371  002388  6BA3               	clrf	(_RadioConfiguration+36)& (0+255),b
 31372                           
 31373                           ; BSR set to: 1
 31374                           ;radio_driver_SX1276.c: 444: RadioConfiguration.dataBuffer = radioBuffer;
 31375  00238A  C079  F1A4         	movff	RADIO_Init@radioBuffer,_RadioConfiguration+37
 31376  00238E  C07A  F1A5         	movff	RADIO_Init@radioBuffer+1,_RadioConfiguration+38
 31377                           
 31378                           ; BSR set to: 1
 31379                           ;radio_driver_SX1276.c: 445: RadioConfiguration.frequencyHopPeriod = 0;
 31380  002392  6B9D               	clrf	(_RadioConfiguration+30)& (0+255),b
 31381  002394  6B9E               	clrf	(_RadioConfiguration+31)& (0+255),b
 31382                           
 31383                           ; BSR set to: 1
 31384                           ;radio_driver_SX1276.c: 446: RadioConfiguration.packetSNR = -128;
 31385  002396  0E80               	movlw	128
 31386  002398  6FB1               	movwf	(_RadioConfiguration+50)& (0+255),b
 31387                           
 31388                           ; BSR set to: 1
 31389                           ;radio_driver_SX1276.c: 447: RadioConfiguration.watchdogTimerTimeout = ((uint32_t)15000)
      +                          ;
 31390  00239A  0E98               	movlw	152
 31391  00239C  6FA9               	movwf	(_RadioConfiguration+42)& (0+255),b
 31392  00239E  0E3A               	movlw	58
 31393  0023A0  6FAA               	movwf	(_RadioConfiguration+43)& (0+255),b
 31394  0023A2  6BAB               	clrf	(_RadioConfiguration+44)& (0+255),b
 31395  0023A4  6BAC               	clrf	(_RadioConfiguration+45)& (0+255),b
 31396                           
 31397                           ; BSR set to: 1
 31398                           ;radio_driver_SX1276.c: 448: RadioConfiguration.fskDataShaping = FSK_SHAPING_GAUSS_BT_0_
      +                          5;
 31399  0023A6  0E02               	movlw	2
 31400  0023A8  6FB2               	movwf	(_RadioConfiguration+51)& (0+255),b
 31401                           
 31402                           ; BSR set to: 1
 31403                           ;radio_driver_SX1276.c: 449: RadioConfiguration.rxBw = FSKBW_50_0KHZ;
 31404  0023AA  0E0B               	movlw	11
 31405  0023AC  6FB3               	movwf	(_RadioConfiguration+52)& (0+255),b
 31406                           
 31407                           ; BSR set to: 1
 31408                           ;radio_driver_SX1276.c: 450: RadioConfiguration.afcBw = FSKBW_83_3KHZ;
 31409  0023AE  0E12               	movlw	18
 31410  0023B0  6FB4               	movwf	(_RadioConfiguration+53)& (0+255),b
 31411                           
 31412                           ; BSR set to: 1
 31413                           ;radio_driver_SX1276.c: 451: RadioConfiguration.fhssNextFrequency = (0);
 31414  0023B2  6BAE               	clrf	(_RadioConfiguration+47)& (0+255),b
 31415  0023B4  6BAF               	clrf	(_RadioConfiguration+48)& (0+255),b
 31416                           
 31417                           ; BSR set to: 1
 31418                           ;radio_driver_SX1276.c: 456: if (0 == RadioConfiguration.initialized)
 31419  0023B6  51AD               	movf	(_RadioConfiguration+46)& (0+255),w,b
 31420  0023B8  E123               	bnz	l14930
 31421                           
 31422                           ; BSR set to: 1
 31423                           ;radio_driver_SX1276.c: 457: {
 31424                           ;radio_driver_SX1276.c: 460: RadioConfiguration.timeOnAirTimerId = SwTimerCreate();
 31425  0023BA  EC7E  F02B         	call	_SwTimerCreate	;wreg free
 31426  0023BE  0101               	movlb	1	; () banked
 31427  0023C0  6FA6               	movwf	(_RadioConfiguration+39)& (0+255),b
 31428                           
 31429                           ;radio_driver_SX1276.c: 461: RadioConfiguration.fskRxWindowTimerId = SwTimerCreate();
 31430  0023C2  EC7E  F02B         	call	_SwTimerCreate	;wreg free
 31431  0023C6  0101               	movlb	1	; () banked
 31432  0023C8  6FA7               	movwf	(_RadioConfiguration+40)& (0+255),b
 31433                           
 31434                           ;radio_driver_SX1276.c: 462: RadioConfiguration.watchdogTimerId = SwTimerCreate();
 31435  0023CA  EC7E  F02B         	call	_SwTimerCreate	;wreg free
 31436  0023CE  0101               	movlb	1	; () banked
 31437  0023D0  6FA8               	movwf	(_RadioConfiguration+41)& (0+255),b
 31438                           
 31439                           ;radio_driver_SX1276.c: 463: SwTimerSetCallback(RadioConfiguration.fskRxWindowTimerId, R
      +                          ADIO_RxFSKTimeout, 0);
 31440  0023D2  0E64               	movlw	low _RADIO_RxFSKTimeout
 31441  0023D4  0100               	movlb	0	; () banked
 31442  0023D6  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 31443  0023D8  0E59               	movlw	high _RADIO_RxFSKTimeout
 31444  0023DA  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 31445  0023DC  6B62               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 31446  0023DE  0101               	movlb	1	; () banked
 31447  0023E0  51A7               	movf	(_RadioConfiguration+40)& (0+255),w,b
 31448  0023E2  ECAE  F02D         	call	_SwTimerSetCallback
 31449                           
 31450                           ;radio_driver_SX1276.c: 464: SwTimerSetCallback(RadioConfiguration.watchdogTimerId, RADI
      +                          O_WatchdogTimeout, 0);
 31451  0023E6  0E5A               	movlw	low _RADIO_WatchdogTimeout
 31452  0023E8  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 31453  0023EA  0E58               	movlw	high _RADIO_WatchdogTimeout
 31454  0023EC  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 31455  0023EE  6B62               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 31456  0023F0  0101               	movlb	1	; () banked
 31457  0023F2  51A8               	movf	(_RadioConfiguration+41)& (0+255),w,b
 31458  0023F4  ECAE  F02D         	call	_SwTimerSetCallback
 31459                           
 31460                           ; BSR set to: 0
 31461                           ;radio_driver_SX1276.c: 465: RadioConfiguration.initialized = 1;
 31462  0023F8  0E01               	movlw	1
 31463  0023FA  0101               	movlb	1	; () banked
 31464  0023FC  6FAD               	movwf	(_RadioConfiguration+46)& (0+255),b
 31465                           
 31466                           ;radio_driver_SX1276.c: 466: }
 31467  0023FE  D00B               	goto	l14932
 31468  002400                     l14930:
 31469                           
 31470                           ; BSR set to: 1
 31471                           ;radio_driver_SX1276.c: 467: else
 31472                           ;radio_driver_SX1276.c: 468: {
 31473                           ;radio_driver_SX1276.c: 469: SwTimerStop(RadioConfiguration.timeOnAirTimerId);
 31474  002400  51A6               	movf	(_RadioConfiguration+39)& (0+255),w,b
 31475  002402  EC68  F030         	call	_SwTimerStop
 31476                           
 31477                           ;radio_driver_SX1276.c: 470: SwTimerStop(RadioConfiguration.fskRxWindowTimerId);
 31478  002406  0101               	movlb	1	; () banked
 31479  002408  51A7               	movf	(_RadioConfiguration+40)& (0+255),w,b
 31480  00240A  EC68  F030         	call	_SwTimerStop
 31481                           
 31482                           ;radio_driver_SX1276.c: 471: SwTimerStop(RadioConfiguration.watchdogTimerId);
 31483  00240E  0101               	movlb	1	; () banked
 31484  002410  51A8               	movf	(_RadioConfiguration+41)& (0+255),w,b
 31485  002412  EC68  F030         	call	_SwTimerStop
 31486  002416                     l14932:
 31487                           
 31488                           ;radio_driver_SX1276.c: 472: }
 31489                           ;radio_driver_SX1276.c: 474: RADIO_Reset();
 31490  002416  EC3F  F02D         	call	_RADIO_Reset	;wreg free
 31491                           
 31492                           ;radio_driver_SX1276.c: 479: RADIO_WriteMode(MODE_STANDBY, MODULATION_FSK, 1);
 31493  00241A  0E00               	movlw	0
 31494  00241C  0100               	movlb	0	; () banked
 31495  00241E  6F65               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 31496  002420  0E01               	movlw	1
 31497  002422  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 31498  002424  ECDB  F01A         	call	_RADIO_WriteMode
 31499                           
 31500                           ;radio_driver_SX1276.c: 482: RADIO_WriteFrequency(RadioConfiguration.frequency);
 31501  002428  D841               	call	PL224	;call to abstracted procedure
 31502  00242A  ECB4  F01B         	call	_RADIO_WriteFrequency	;wreg free
 31503                           
 31504                           ;radio_driver_SX1276.c: 486: RADIO_RegisterWrite(0x3B, 0x42);
 31505  00242E  0E42               	movlw	66
 31506  002430  ECC2  F008         	call	PL432	;call to abstracted procedure
 31507  002434  EC31  F02F         	call	_RADIO_RegisterWrite
 31508  002438                     l14940:
 31509  002438  0E3B               	movlw	59
 31510  00243A  EC64  F02E         	call	_RADIO_RegisterRead
 31511  00243E  6F7F               	movwf	??_RADIO_Init& (0+255),b
 31512  002440  BB7F               	btfsc	??_RADIO_Init& (0+255),5,b
 31513  002442  D7FA               	goto	l14940
 31514                           
 31515                           ; BSR set to: 0
 31516                           ;radio_driver_SX1276.c: 493: RADIO_RegisterWrite(0x0C, 0x23);
 31517  002444  0E23               	movlw	35
 31518  002446  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 31519  002448  0E0C               	movlw	12
 31520  00244A  EC31  F02F         	call	_RADIO_RegisterWrite
 31521                           
 31522                           ;radio_driver_SX1276.c: 496: RADIO_RegisterWrite(0x0D, 0x1E);
 31523  00244E  0E1E               	movlw	30
 31524  002450  0100               	movlb	0	; () banked
 31525  002452  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 31526  002454  0E0D               	movlw	13
 31527  002456  EC31  F02F         	call	_RADIO_RegisterWrite
 31528                           
 31529                           ;radio_driver_SX1276.c: 500: RADIO_RegisterWrite(0x1F, 0xAA);
 31530  00245A  0EAA               	movlw	170
 31531  00245C  0100               	movlb	0	; () banked
 31532  00245E  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 31533  002460  0E1F               	movlw	31
 31534  002462  EC31  F02F         	call	_RADIO_RegisterWrite
 31535                           
 31536                           ;radio_driver_SX1276.c: 504: RADIO_RegisterWrite(0x35, 0x8F);
 31537  002466  0E8F               	movlw	143
 31538  002468  0100               	movlb	0	; () banked
 31539  00246A  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 31540  00246C  0E35               	movlw	53
 31541  00246E  EC31  F02F         	call	_RADIO_RegisterWrite
 31542                           
 31543                           ;radio_driver_SX1276.c: 507: RADIO_RegisterWrite(0x32, 0xFF);
 31544  002472  0100               	movlb	0	; () banked
 31545  002474  6962               	setf	RADIO_RegisterWrite@value& (0+255),b
 31546  002476  0E32               	movlw	50
 31547  002478  EC31  F02F         	call	_RADIO_RegisterWrite
 31548                           
 31549                           ;radio_driver_SX1276.c: 510: RADIO_RegisterWrite(0x31, 1 << (6));
 31550  00247C  0E40               	movlw	64
 31551  00247E  0100               	movlb	0	; () banked
 31552  002480  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 31553  002482  0E31               	movlw	49
 31554  002484  EC31  F02F         	call	_RADIO_RegisterWrite
 31555                           
 31556                           ;radio_driver_SX1276.c: 513: RADIO_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
 31557  002488  0E01               	movlw	1
 31558  00248A  0100               	movlb	0	; () banked
 31559  00248C  6F65               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 31560  00248E  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 31561  002490  0E00               	movlw	0
 31562  002492  ECDB  F01A         	call	_RADIO_WriteMode
 31563                           
 31564                           ;radio_driver_SX1276.c: 517: RADIO_RegisterWrite(0x23, 0xFF);
 31565  002496  0100               	movlb	0	; () banked
 31566  002498  6962               	setf	RADIO_RegisterWrite@value& (0+255),b
 31567  00249A  0E23               	movlw	35
 31568  00249C  EC31  F02F         	call	_RADIO_RegisterWrite
 31569                           
 31570                           ;radio_driver_SX1276.c: 519: RadioConfiguration.regVersion = RADIO_RegisterRead(0x42);
 31571  0024A0  0E42               	movlw	66
 31572  0024A2  EC64  F02E         	call	_RADIO_RegisterRead
 31573  0024A6  0101               	movlb	1	; () banked
 31574  0024A8  6FB0               	movwf	(_RadioConfiguration+49)& (0+255),b
 31575                           
 31576                           ; BSR set to: 1
 31577  0024AA  0012               	return		;funcret
 31578  0024AC                     __end_of_RADIO_Init:
 31579                           	opt stack 0
 31580  0024AC                     PL224:
 31581                           	opt stack 16
 31582  0024AC  C17F  F06D         	movff	_RadioConfiguration,RADIO_WriteFrequency@frequency
 31583  0024B0  C180  F06E         	movff	_RadioConfiguration+1,RADIO_WriteFrequency@frequency+1
 31584  0024B4  C181  F06F         	movff	_RadioConfiguration+2,RADIO_WriteFrequency@frequency+2
 31585  0024B8  C182  F070         	movff	_RadioConfiguration+3,RADIO_WriteFrequency@frequency+3
 31586  0024BC  0012               	return	
 31587  0024BE                     __end_ofPL224:
 31588                           	opt stack 0
 31589                           tosu	equ	0xFFF
 31590                           tosh	equ	0xFFE
 31591                           tosl	equ	0xFFD
 31592                           pclath	equ	0xFFA
 31593                           tblptru	equ	0xFF8
 31594                           tblptrh	equ	0xFF7
 31595                           tblptrl	equ	0xFF6
 31596                           tablat	equ	0xFF5
 31597                           prodh	equ	0xFF4
 31598                           prodl	equ	0xFF3
 31599                           intcon	equ	0xFF2
 31600                           indf0	equ	0xFEF
 31601                           postinc0	equ	0xFEE
 31602                           plusw0	equ	0xFEB
 31603                           fsr0h	equ	0xFEA
 31604                           fsr0l	equ	0xFE9
 31605                           wreg	equ	0xFE8
 31606                           postinc1	equ	0xFE6
 31607                           postdec1	equ	0xFE5
 31608                           plusw1	equ	0xFE3
 31609                           fsr1h	equ	0xFE2
 31610                           fsr1l	equ	0xFE1
 31611                           indf2	equ	0xFDF
 31612                           postinc2	equ	0xFDE
 31613                           postdec2	equ	0xFDD
 31614                           plusw2	equ	0xFDB
 31615                           fsr2h	equ	0xFDA
 31616                           fsr2l	equ	0xFD9
 31617                           status	equ	0xFD8
 31618                           
 31619 ;; *************** function _SwTimerSetCallback *****************
 31620 ;; Defined at:
 31621 ;;		line 180 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 31622 ;; Parameters:    Size  Location     Type
 31623 ;;  timerId         1    wreg     unsigned char 
 31624 ;;  callback        2    0[BANK0 ] PTR FTN(unsigned char ,)
 31625 ;;		 -> RADIO_WatchdogTimeout(1), RADIO_RxFSKTimeout(1), DutyCycleCallback(1), UpdateJoinSuccessState(1), 
 31626 ;;		 -> AutomaticReplyCallback(1), UnconfirmedTransmissionCallback(1), AckRetransmissionCallback(1), LORAWAN_LinkCheckCa
      +llback(1), 
 31627 ;;		 -> LORAWAN_ReceiveWindow2Callback(1), LORAWAN_ReceiveWindow1Callback(1), 
 31628 ;;  callbackPara    1    2[BANK0 ] unsigned char 
 31629 ;; Auto vars:     Size  Location     Type
 31630 ;;  timerId         1    3[BANK0 ] unsigned char 
 31631 ;; Return value:  Size  Location     Type
 31632 ;;                  1    wreg      void 
 31633 ;; Registers used:
 31634 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 31635 ;; Tracked objects:
 31636 ;;		On entry : 3C/2
 31637 ;;		On exit  : 3F/0
 31638 ;;		Unchanged: 0/0
 31639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 31640 ;;      Params:         0       3       0       0       0       0       0       0       0
 31641 ;;      Locals:         0       1       0       0       0       0       0       0       0
 31642 ;;      Temps:          0       0       0       0       0       0       0       0       0
 31643 ;;      Totals:         0       4       0       0       0       0       0       0       0
 31644 ;;Total ram usage:        4 bytes
 31645 ;; Hardware stack levels used:    1
 31646 ;; Hardware stack levels required when called:    7
 31647 ;; This function calls:
 31648 ;;		Nothing
 31649 ;; This function is called by:
 31650 ;;		_SetCallbackSoftwareTimers
 31651 ;;		_RADIO_Init
 31652 ;; This function uses a non-reentrant model
 31653 ;;
 31654                           
 31655                           	psect	text161
 31656  005B5C                     __ptext161:
 31657                           	opt stack 0
 31658  005B5C                     _SwTimerSetCallback:
 31659                           	opt stack 21
 31660                           
 31661                           ; BSR set to: 1
 31662                           ;incstack = 0
 31663                           ;SwTimerSetCallback@timerId stored from wreg
 31664  005B5C  0100               	movlb	0	; () banked
 31665  005B5E  6F63               	movwf	SwTimerSetCallback@timerId& (0+255),b
 31666                           
 31667                           ;sw_timer.c: 182: swTimers[timerId].callback = callback;
 31668  005B60  5163               	movf	SwTimerSetCallback@timerId& (0+255),w,b
 31669  005B62  ECE3  F023         	call	PL94	;call to abstracted procedure
 31670  005B66  C060  FFDE         	movff	SwTimerSetCallback@callback,postinc2	;volatile
 31671  005B6A  C061  FFDD         	movff	SwTimerSetCallback@callback+1,postdec2	;volatile
 31672                           
 31673                           ;sw_timer.c: 183: swTimers[timerId].callbackParameter = callbackParameter;
 31674  005B6E  5163               	movf	SwTimerSetCallback@timerId& (0+255),w,b
 31675  005B70  D803               	call	PL158	;call to abstracted procedure
 31676  005B72  C062  FFDF         	movff	SwTimerSetCallback@callbackParameter,indf2
 31677                           
 31678                           ; BSR set to: 0
 31679  005B76  0012               	return		;funcret
 31680  005B78                     __end_of_SwTimerSetCallback:
 31681                           	opt stack 0
 31682  005B78                     PL158:
 31683                           	opt stack 12
 31684  005B78  0D08               	mullw	8
 31685  005B7A  0E05               	movlw	low (_swTimers+5)
 31686  005B7C  24F3               	addwf	prodl,w,c
 31687  005B7E  6ED9               	movwf	fsr2l,c
 31688  005B80  0E03               	movlw	high (_swTimers+5)
 31689  005B82  20F4               	addwfc	prodh,w,c
 31690  005B84  6EDA               	movwf	fsr2h,c
 31691  005B86  0012               	return	
 31692  005B88                     __end_ofPL158:
 31693                           	opt stack 0
 31694                           tosu	equ	0xFFF
 31695                           tosh	equ	0xFFE
 31696                           tosl	equ	0xFFD
 31697                           pclath	equ	0xFFA
 31698                           tblptru	equ	0xFF8
 31699                           tblptrh	equ	0xFF7
 31700                           tblptrl	equ	0xFF6
 31701                           tablat	equ	0xFF5
 31702                           prodh	equ	0xFF4
 31703                           prodl	equ	0xFF3
 31704                           intcon	equ	0xFF2
 31705                           indf0	equ	0xFEF
 31706                           postinc0	equ	0xFEE
 31707                           plusw0	equ	0xFEB
 31708                           fsr0h	equ	0xFEA
 31709                           fsr0l	equ	0xFE9
 31710                           wreg	equ	0xFE8
 31711                           postinc1	equ	0xFE6
 31712                           postdec1	equ	0xFE5
 31713                           plusw1	equ	0xFE3
 31714                           fsr1h	equ	0xFE2
 31715                           fsr1l	equ	0xFE1
 31716                           indf2	equ	0xFDF
 31717                           postinc2	equ	0xFDE
 31718                           postdec2	equ	0xFDD
 31719                           plusw2	equ	0xFDB
 31720                           fsr2h	equ	0xFDA
 31721                           fsr2l	equ	0xFD9
 31722                           status	equ	0xFD8
 31723                           
 31724 ;; *************** function _RADIO_WriteMode *****************
 31725 ;; Defined at:
 31726 ;;		line 147 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 31727 ;; Parameters:    Size  Location     Type
 31728 ;;  newMode         1    wreg     enum E17880
 31729 ;;  newModulatio    1    5[BANK0 ] enum E17148
 31730 ;;  blocking        1    6[BANK0 ] unsigned char 
 31731 ;; Auto vars:     Size  Location     Type
 31732 ;;  newMode         1   10[BANK0 ] enum E17880
 31733 ;;  opMode          1   11[BANK0 ] unsigned char 
 31734 ;;  currentMode     1    9[BANK0 ] enum E17880
 31735 ;;  dioMapping      1    8[BANK0 ] unsigned char 
 31736 ;;  currentModul    1    7[BANK0 ] enum E17148
 31737 ;; Return value:  Size  Location     Type
 31738 ;;                  1    wreg      void 
 31739 ;; Registers used:
 31740 ;;		wreg, status,2, status,0, cstack
 31741 ;; Tracked objects:
 31742 ;;		On entry : 3F/0
 31743 ;;		On exit  : 0/0
 31744 ;;		Unchanged: 0/0
 31745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 31746 ;;      Params:         0       2       0       0       0       0       0       0       0
 31747 ;;      Locals:         0       5       0       0       0       0       0       0       0
 31748 ;;      Temps:          0       0       0       0       0       0       0       0       0
 31749 ;;      Totals:         0       7       0       0       0       0       0       0       0
 31750 ;;Total ram usage:        7 bytes
 31751 ;; Hardware stack levels used:    1
 31752 ;; Hardware stack levels required when called:   10
 31753 ;; This function calls:
 31754 ;;		_HALDIO5PinValue
 31755 ;;		_RADIO_RegisterRead
 31756 ;;		_RADIO_RegisterWrite
 31757 ;;		_SystemBlockingWaitMs
 31758 ;; This function is called by:
 31759 ;;		_RADIO_Init
 31760 ;;		_RADIO_WriteConfiguration
 31761 ;;		_RADIO_Transmit
 31762 ;;		_RADIO_ReceiveStart
 31763 ;;		_RADIO_ReceiveStop
 31764 ;;		_RADIO_RxDone
 31765 ;;		_RADIO_FSKPayloadReady
 31766 ;;		_RADIO_RxTimeout
 31767 ;;		_RADIO_TxDone
 31768 ;;		_RADIO_FSKPacketSent
 31769 ;;		_RADIO_ReadRandom
 31770 ;;		_RADIO_RxFSKTimeout
 31771 ;;		_RADIO_WatchdogTimeout
 31772 ;; This function uses a non-reentrant model
 31773 ;;
 31774                           
 31775                           	psect	text162
 31776  0035B6                     __ptext162:
 31777                           	opt stack 0
 31778  0035B6                     _RADIO_WriteMode:
 31779                           	opt stack 17
 31780                           
 31781                           ; BSR set to: 0
 31782                           ;incstack = 0
 31783                           ;RADIO_WriteMode@newMode stored from wreg
 31784  0035B6  6F6A               	movwf	RADIO_WriteMode@newMode& (0+255),b
 31785                           
 31786                           ;radio_driver_SX1276.c: 149: uint8_t opMode;
 31787                           ;radio_driver_SX1276.c: 150: uint8_t dioMapping;
 31788                           ;radio_driver_SX1276.c: 151: RadioModulation_t currentModulation;
 31789                           ;radio_driver_SX1276.c: 152: RadioMode_t currentMode;
 31790                           ;radio_driver_SX1276.c: 154: if ((MODULATION_FSK == newModulation) &&
 31791                           ;radio_driver_SX1276.c: 155: ((MODE_RXSINGLE == newMode) || (MODE_CAD == newMode)))
 31792  0035B8  0100               	movlb	0	; () banked
 31793  0035BA  5165               	movf	RADIO_WriteMode@newModulation& (0+255),w,b
 31794  0035BC  E108               	bnz	l12200
 31795                           
 31796                           ; BSR set to: 0
 31797  0035BE  0E06               	movlw	6
 31798  0035C0  196A               	xorwf	RADIO_WriteMode@newMode& (0+255),w,b
 31799  0035C2  B4D8               	btfsc	status,2,c
 31800  0035C4  0012               	return	
 31801                           
 31802                           ; BSR set to: 0
 31803  0035C6  0E07               	movlw	7
 31804  0035C8  196A               	xorwf	RADIO_WriteMode@newMode& (0+255),w,b
 31805  0035CA  E101               	bnz	l12200
 31806  0035CC  0012               	return	
 31807  0035CE                     l12200:
 31808                           
 31809                           ; BSR set to: 0
 31810                           ;radio_driver_SX1276.c: 159: }
 31811                           ;radio_driver_SX1276.c: 162: newMode &= 0x07;
 31812  0035CE  0E07               	movlw	7
 31813  0035D0  176A               	andwf	RADIO_WriteMode@newMode& (0+255),f,b
 31814                           
 31815                           ;radio_driver_SX1276.c: 163: newModulation &= 0x01;
 31816  0035D2  0E01               	movlw	1
 31817  0035D4  1765               	andwf	RADIO_WriteMode@newModulation& (0+255),f,b
 31818                           
 31819                           ; BSR set to: 0
 31820                           ;radio_driver_SX1276.c: 165: opMode = RADIO_RegisterRead(0x01);
 31821  0035D6  EC64  F02E         	call	_RADIO_RegisterRead
 31822  0035DA  6F6B               	movwf	RADIO_WriteMode@opMode& (0+255),b
 31823                           
 31824                           ; BSR set to: 0
 31825                           ;radio_driver_SX1276.c: 167: if ((opMode & 0x80) != 0)
 31826  0035DC  AF6B               	btfss	RADIO_WriteMode@opMode& (0+255),7,b
 31827  0035DE  D003               	goto	l1619
 31828                           
 31829                           ; BSR set to: 0
 31830                           ;radio_driver_SX1276.c: 168: {
 31831                           ;radio_driver_SX1276.c: 169: currentModulation = MODULATION_LORA;
 31832  0035E0  0E01               	movlw	1
 31833  0035E2  6F67               	movwf	RADIO_WriteMode@currentModulation& (0+255),b
 31834                           
 31835                           ;radio_driver_SX1276.c: 170: }
 31836  0035E4  D001               	goto	l12208
 31837  0035E6                     l1619:
 31838                           
 31839                           ; BSR set to: 0
 31840                           ;radio_driver_SX1276.c: 171: else
 31841                           ;radio_driver_SX1276.c: 172: {
 31842                           ;radio_driver_SX1276.c: 173: currentModulation = MODULATION_FSK;
 31843  0035E6  6B67               	clrf	RADIO_WriteMode@currentModulation& (0+255),b
 31844  0035E8                     l12208:
 31845                           
 31846                           ; BSR set to: 0
 31847                           ;radio_driver_SX1276.c: 174: }
 31848                           ;radio_driver_SX1276.c: 176: currentMode = opMode & 0x07;
 31849  0035E8  516B               	movf	RADIO_WriteMode@opMode& (0+255),w,b
 31850  0035EA  0B07               	andlw	7
 31851  0035EC  6F69               	movwf	RADIO_WriteMode@currentMode& (0+255),b
 31852                           
 31853                           ;radio_driver_SX1276.c: 180: if (newModulation != currentModulation)
 31854  0035EE  5167               	movf	RADIO_WriteMode@currentModulation& (0+255),w,b
 31855  0035F0  1965               	xorwf	RADIO_WriteMode@newModulation& (0+255),w,b
 31856  0035F2  E016               	bz	l12224
 31857                           
 31858                           ; BSR set to: 0
 31859                           ;radio_driver_SX1276.c: 181: {
 31860                           ;radio_driver_SX1276.c: 183: if (MODE_SLEEP != currentMode)
 31861  0035F4  5169               	movf	RADIO_WriteMode@currentMode& (0+255),w,b
 31862  0035F6  E008               	bz	l12216
 31863                           
 31864                           ; BSR set to: 0
 31865                           ;radio_driver_SX1276.c: 184: {
 31866                           ;radio_driver_SX1276.c: 186: RADIO_RegisterWrite(0x01, opMode & (~0x07));
 31867  0035F8  516B               	movf	RADIO_WriteMode@opMode& (0+255),w,b
 31868  0035FA  0BF8               	andlw	248
 31869  0035FC  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 31870  0035FE  0E01               	movlw	1
 31871  003600  EC31  F02F         	call	_RADIO_RegisterWrite
 31872                           
 31873                           ;radio_driver_SX1276.c: 187: currentMode = MODE_SLEEP;
 31874  003604  0100               	movlb	0	; () banked
 31875  003606  6B69               	clrf	RADIO_WriteMode@currentMode& (0+255),b
 31876  003608                     l12216:
 31877                           
 31878                           ; BSR set to: 0
 31879                           ;radio_driver_SX1276.c: 188: }
 31880                           ;radio_driver_SX1276.c: 190: if (MODULATION_FSK == newModulation)
 31881  003608  5165               	movf	RADIO_WriteMode@newModulation& (0+255),w,b
 31882  00360A  E103               	bnz	l12220
 31883                           
 31884                           ; BSR set to: 0
 31885                           ;radio_driver_SX1276.c: 191: {
 31886                           ;radio_driver_SX1276.c: 193: opMode = opMode & (~0x87);
 31887  00360C  0E78               	movlw	120
 31888  00360E  176B               	andwf	RADIO_WriteMode@opMode& (0+255),f,b
 31889                           
 31890                           ;radio_driver_SX1276.c: 194: }
 31891  003610  D004               	goto	l12222
 31892  003612                     l12220:
 31893                           
 31894                           ; BSR set to: 0
 31895                           ;radio_driver_SX1276.c: 195: else
 31896                           ;radio_driver_SX1276.c: 196: {
 31897                           ;radio_driver_SX1276.c: 198: opMode = 0x80 | (opMode & (~0x87));
 31898  003612  516B               	movf	RADIO_WriteMode@opMode& (0+255),w,b
 31899  003614  0B78               	andlw	120
 31900  003616  0980               	iorlw	128
 31901  003618  6F6B               	movwf	RADIO_WriteMode@opMode& (0+255),b
 31902  00361A                     l12222:
 31903                           
 31904                           ; BSR set to: 0
 31905                           ;radio_driver_SX1276.c: 199: }
 31906                           ;radio_driver_SX1276.c: 200: RADIO_RegisterWrite(0x01, opMode);
 31907  00361A  D837               	call	PL458	;call to abstracted procedure
 31908  00361C  EC31  F02F         	call	_RADIO_RegisterWrite
 31909  003620                     l12224:
 31910                           
 31911                           ;radio_driver_SX1276.c: 201: }
 31912                           ;radio_driver_SX1276.c: 207: if (newMode != currentMode)
 31913  003620  0100               	movlb	0	; () banked
 31914  003622  5169               	movf	RADIO_WriteMode@currentMode& (0+255),w,b
 31915  003624  196A               	xorwf	RADIO_WriteMode@newMode& (0+255),w,b
 31916  003626  B4D8               	btfsc	status,2,c
 31917  003628  0012               	return	
 31918                           
 31919                           ; BSR set to: 0
 31920                           ;radio_driver_SX1276.c: 208: {
 31921                           ;radio_driver_SX1276.c: 211: if ((MODE_SLEEP != newMode) && (1 == blocking))
 31922  00362A  516A               	movf	RADIO_WriteMode@newMode& (0+255),w,b
 31923  00362C  E012               	bz	l12240
 31924                           
 31925                           ; BSR set to: 0
 31926  00362E  0566               	decf	RADIO_WriteMode@blocking& (0+255),w,b
 31927  003630  E110               	bnz	l12240
 31928                           
 31929                           ; BSR set to: 0
 31930                           ;radio_driver_SX1276.c: 212: {
 31931                           ;radio_driver_SX1276.c: 213: dioMapping = RADIO_RegisterRead(0x41);
 31932  003632  0E41               	movlw	65
 31933  003634  EC64  F02E         	call	_RADIO_RegisterRead
 31934  003638  6F68               	movwf	RADIO_WriteMode@dioMapping& (0+255),b
 31935                           
 31936                           ; BSR set to: 0
 31937                           ;radio_driver_SX1276.c: 214: if (MODULATION_FSK == newModulation)
 31938  00363A  5165               	movf	RADIO_WriteMode@newModulation& (0+255),w,b
 31939  00363C  E103               	bnz	l12236
 31940                           
 31941                           ; BSR set to: 0
 31942                           ;radio_driver_SX1276.c: 215: {
 31943                           ;radio_driver_SX1276.c: 217: dioMapping |= 0x30;
 31944  00363E  0E30               	movlw	48
 31945  003640  1368               	iorwf	RADIO_WriteMode@dioMapping& (0+255),f,b
 31946                           
 31947                           ;radio_driver_SX1276.c: 218: }
 31948  003642  D002               	goto	l12238
 31949  003644                     l12236:
 31950                           
 31951                           ; BSR set to: 0
 31952                           ;radio_driver_SX1276.c: 219: else
 31953                           ;radio_driver_SX1276.c: 220: {
 31954                           ;radio_driver_SX1276.c: 222: dioMapping &= ~0x30;
 31955  003644  0ECF               	movlw	207
 31956  003646  1768               	andwf	RADIO_WriteMode@dioMapping& (0+255),f,b
 31957  003648                     l12238:
 31958                           
 31959                           ; BSR set to: 0
 31960                           ;radio_driver_SX1276.c: 223: }
 31961                           ;radio_driver_SX1276.c: 224: RADIO_RegisterWrite(0x41, dioMapping);
 31962  003648  C068  F062         	movff	RADIO_WriteMode@dioMapping,RADIO_RegisterWrite@value
 31963  00364C  0E41               	movlw	65
 31964  00364E  EC31  F02F         	call	_RADIO_RegisterWrite
 31965  003652                     l12240:
 31966                           
 31967                           ;radio_driver_SX1276.c: 225: }
 31968                           ;radio_driver_SX1276.c: 228: opMode &= ~0x07;
 31969  003652  0EF8               	movlw	248
 31970  003654  0100               	movlb	0	; () banked
 31971  003656  176B               	andwf	RADIO_WriteMode@opMode& (0+255),f,b
 31972                           
 31973                           ; BSR set to: 0
 31974                           ;radio_driver_SX1276.c: 229: opMode |= newMode;
 31975  003658  516A               	movf	RADIO_WriteMode@newMode& (0+255),w,b
 31976  00365A  136B               	iorwf	RADIO_WriteMode@opMode& (0+255),f,b
 31977                           
 31978                           ; BSR set to: 0
 31979                           ;radio_driver_SX1276.c: 230: RADIO_RegisterWrite(0x01, opMode);
 31980  00365C  D816               	call	PL458	;call to abstracted procedure
 31981  00365E  EC31  F02F         	call	_RADIO_RegisterWrite
 31982                           
 31983                           ;radio_driver_SX1276.c: 233: if (1 == blocking)
 31984  003662  0100               	movlb	0	; () banked
 31985  003664  0566               	decf	RADIO_WriteMode@blocking& (0+255),w,b
 31986  003666  A4D8               	btfss	status,2,c
 31987  003668  0012               	return	
 31988                           
 31989                           ; BSR set to: 0
 31990                           ;radio_driver_SX1276.c: 234: {
 31991                           ;radio_driver_SX1276.c: 235: if (MODE_SLEEP != newMode)
 31992  00366A  516A               	movf	RADIO_WriteMode@newMode& (0+255),w,b
 31993  00366C  E005               	bz	l12252
 31994  00366E                     l12250:
 31995  00366E  EC10  F031         	call	_HALDIO5PinValue	;wreg free
 31996  003672  0900               	iorlw	0
 31997  003674  E0FC               	bz	l12250
 31998  003676  0012               	return	
 31999  003678                     l12252:
 32000                           
 32001                           ; BSR set to: 0
 32002                           ;radio_driver_SX1276.c: 240: else
 32003                           ;radio_driver_SX1276.c: 241: {
 32004                           ;radio_driver_SX1276.c: 242: SystemBlockingWaitMs(1);
 32005  003678  D802               	call	PL228	;call to abstracted procedure
 32006  00367A  EFC4  F02D         	goto	_SystemBlockingWaitMs	;wreg free
 32007  00367E                     __end_of_RADIO_WriteMode:
 32008                           	opt stack 0
 32009  00367E                     PL228:
 32010                           	opt stack 18
 32011  00367E  0E01               	movlw	1
 32012  003680  6F60               	movwf	SystemBlockingWaitMs@ms& (0+255),b
 32013  003682  6B61               	clrf	(SystemBlockingWaitMs@ms+1)& (0+255),b
 32014  003684  6B62               	clrf	(SystemBlockingWaitMs@ms+2)& (0+255),b
 32015  003686  6B63               	clrf	(SystemBlockingWaitMs@ms+3)& (0+255),b
 32016  003688  0C01               	retlw	1
 32017  00368A                     __end_ofPL228:
 32018                           	opt stack 0
 32019  00368A                     PL458:
 32020                           	opt stack 17
 32021  00368A  C06B  F062         	movff	RADIO_WriteMode@opMode,RADIO_RegisterWrite@value
 32022  00368E  0C01               	retlw	1
 32023  003690                     __end_ofPL458:
 32024                           	opt stack 0
 32025                           tosu	equ	0xFFF
 32026                           tosh	equ	0xFFE
 32027                           tosl	equ	0xFFD
 32028                           pclath	equ	0xFFA
 32029                           tblptru	equ	0xFF8
 32030                           tblptrh	equ	0xFF7
 32031                           tblptrl	equ	0xFF6
 32032                           tablat	equ	0xFF5
 32033                           prodh	equ	0xFF4
 32034                           prodl	equ	0xFF3
 32035                           intcon	equ	0xFF2
 32036                           indf0	equ	0xFEF
 32037                           postinc0	equ	0xFEE
 32038                           plusw0	equ	0xFEB
 32039                           fsr0h	equ	0xFEA
 32040                           fsr0l	equ	0xFE9
 32041                           wreg	equ	0xFE8
 32042                           postinc1	equ	0xFE6
 32043                           postdec1	equ	0xFE5
 32044                           plusw1	equ	0xFE3
 32045                           fsr1h	equ	0xFE2
 32046                           fsr1l	equ	0xFE1
 32047                           indf2	equ	0xFDF
 32048                           postinc2	equ	0xFDE
 32049                           postdec2	equ	0xFDD
 32050                           plusw2	equ	0xFDB
 32051                           fsr2h	equ	0xFDA
 32052                           fsr2l	equ	0xFD9
 32053                           status	equ	0xFD8
 32054                           
 32055 ;; *************** function _RADIO_RegisterRead *****************
 32056 ;; Defined at:
 32057 ;;		line 134 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 32058 ;; Parameters:    Size  Location     Type
 32059 ;;  reg             1    wreg     unsigned char 
 32060 ;; Auto vars:     Size  Location     Type
 32061 ;;  reg             1    2[BANK0 ] unsigned char 
 32062 ;;  readValue       1    3[BANK0 ] unsigned char 
 32063 ;; Return value:  Size  Location     Type
 32064 ;;                  1    wreg      unsigned char 
 32065 ;; Registers used:
 32066 ;;		wreg, status,2, status,0, cstack
 32067 ;; Tracked objects:
 32068 ;;		On entry : 0/0
 32069 ;;		On exit  : 3F/0
 32070 ;;		Unchanged: 0/0
 32071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 32072 ;;      Params:         0       0       0       0       0       0       0       0       0
 32073 ;;      Locals:         0       2       0       0       0       0       0       0       0
 32074 ;;      Temps:          0       0       0       0       0       0       0       0       0
 32075 ;;      Totals:         0       2       0       0       0       0       0       0       0
 32076 ;;Total ram usage:        2 bytes
 32077 ;; Hardware stack levels used:    1
 32078 ;; Hardware stack levels required when called:    9
 32079 ;; This function calls:
 32080 ;;		_HALSPICSAssert
 32081 ;;		_HALSPICSDeassert
 32082 ;;		_HALSPISend
 32083 ;; This function is called by:
 32084 ;;		_RADIO_WriteMode
 32085 ;;		_RADIO_WritePower
 32086 ;;		_RADIO_Init
 32087 ;;		_RADIO_WriteConfiguration
 32088 ;;		_RADIO_Transmit
 32089 ;;		_RADIO_RxDone
 32090 ;;		_RADIO_FSKPayloadReady
 32091 ;;		_RADIO_FSKPacketSent
 32092 ;;		_RADIO_FHSSChangeChannel
 32093 ;;		_RADIO_DIO0
 32094 ;;		_RADIO_DIO1
 32095 ;;		_RADIO_DIO2
 32096 ;;		_RADIO_DIO3
 32097 ;;		_RADIO_DIO4
 32098 ;;		_RADIO_DIO5
 32099 ;;		_RADIO_ReadRandom
 32100 ;;		_RADIO_RxFSKTimeout
 32101 ;; This function uses a non-reentrant model
 32102 ;;
 32103                           
 32104                           	psect	text163
 32105  005CC8                     __ptext163:
 32106                           	opt stack 0
 32107  005CC8                     _RADIO_RegisterRead:
 32108                           	opt stack 17
 32109                           
 32110                           ;incstack = 0
 32111                           ;RADIO_RegisterRead@reg stored from wreg
 32112  005CC8  0100               	movlb	0	; () banked
 32113  005CCA  6F62               	movwf	RADIO_RegisterRead@reg& (0+255),b
 32114                           
 32115                           ;radio_driver_SX1276.c: 136: uint8_t readValue;
 32116                           ;radio_driver_SX1276.c: 137: reg &= 0x7F;
 32117  005CCC  9F62               	bcf	RADIO_RegisterRead@reg& (0+255),7,b
 32118                           
 32119                           ; BSR set to: 0
 32120                           ;radio_driver_SX1276.c: 138: HALSPICSAssert();
 32121  005CCE  EC24  F031         	call	_HALSPICSAssert	;wreg free
 32122                           
 32123                           ;radio_driver_SX1276.c: 139: HALSPISend(reg);
 32124  005CD2  0100               	movlb	0	; () banked
 32125  005CD4  5162               	movf	RADIO_RegisterRead@reg& (0+255),w,b
 32126  005CD6  ECDC  F030         	call	_HALSPISend
 32127                           
 32128                           ; BSR set to: 14
 32129                           ;radio_driver_SX1276.c: 140: readValue = HALSPISend(0xFF);
 32130  005CDA  0EFF               	movlw	255
 32131  005CDC  ECDC  F030         	call	_HALSPISend
 32132  005CE0  0100               	movlb	0	; () banked
 32133  005CE2  6F63               	movwf	RADIO_RegisterRead@readValue& (0+255),b
 32134                           
 32135                           ; BSR set to: 0
 32136                           ;radio_driver_SX1276.c: 141: HALSPICSDeassert();
 32137  005CE4  EC22  F031         	call	_HALSPICSDeassert	;wreg free
 32138                           
 32139                           ;radio_driver_SX1276.c: 142: return readValue;
 32140  005CE8  0100               	movlb	0	; () banked
 32141  005CEA  5163               	movf	RADIO_RegisterRead@readValue& (0+255),w,b
 32142                           
 32143                           ; BSR set to: 0
 32144  005CEC  0012               	return		;funcret
 32145  005CEE                     __end_of_RADIO_RegisterRead:
 32146                           	opt stack 0
 32147                           tosu	equ	0xFFF
 32148                           tosh	equ	0xFFE
 32149                           tosl	equ	0xFFD
 32150                           pclath	equ	0xFFA
 32151                           tblptru	equ	0xFF8
 32152                           tblptrh	equ	0xFF7
 32153                           tblptrl	equ	0xFF6
 32154                           tablat	equ	0xFF5
 32155                           prodh	equ	0xFF4
 32156                           prodl	equ	0xFF3
 32157                           intcon	equ	0xFF2
 32158                           indf0	equ	0xFEF
 32159                           postinc0	equ	0xFEE
 32160                           plusw0	equ	0xFEB
 32161                           fsr0h	equ	0xFEA
 32162                           fsr0l	equ	0xFE9
 32163                           wreg	equ	0xFE8
 32164                           postinc1	equ	0xFE6
 32165                           postdec1	equ	0xFE5
 32166                           plusw1	equ	0xFE3
 32167                           fsr1h	equ	0xFE2
 32168                           fsr1l	equ	0xFE1
 32169                           indf2	equ	0xFDF
 32170                           postinc2	equ	0xFDE
 32171                           postdec2	equ	0xFDD
 32172                           plusw2	equ	0xFDB
 32173                           fsr2h	equ	0xFDA
 32174                           fsr2l	equ	0xFD9
 32175                           status	equ	0xFD8
 32176                           
 32177 ;; *************** function _HALDIO5PinValue *****************
 32178 ;; Defined at:
 32179 ;;		line 95 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 32180 ;; Parameters:    Size  Location     Type
 32181 ;;		None
 32182 ;; Auto vars:     Size  Location     Type
 32183 ;;		None
 32184 ;; Return value:  Size  Location     Type
 32185 ;;                  1    wreg      unsigned char 
 32186 ;; Registers used:
 32187 ;;		wreg
 32188 ;; Tracked objects:
 32189 ;;		On entry : 0/0
 32190 ;;		On exit  : 0/0
 32191 ;;		Unchanged: 0/0
 32192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 32193 ;;      Params:         0       0       0       0       0       0       0       0       0
 32194 ;;      Locals:         0       0       0       0       0       0       0       0       0
 32195 ;;      Temps:          0       0       0       0       0       0       0       0       0
 32196 ;;      Totals:         0       0       0       0       0       0       0       0       0
 32197 ;;Total ram usage:        0 bytes
 32198 ;; Hardware stack levels used:    1
 32199 ;; Hardware stack levels required when called:    7
 32200 ;; This function calls:
 32201 ;;		Nothing
 32202 ;; This function is called by:
 32203 ;;		_RADIO_WriteMode
 32204 ;; This function uses a non-reentrant model
 32205 ;;
 32206                           
 32207                           	psect	text164
 32208  006220                     __ptext164:
 32209                           	opt stack 0
 32210  006220                     _HALDIO5PinValue:
 32211                           	opt stack 19
 32212                           
 32213                           ;radio_driver_hal.c: 97: return PORTBbits.RB2;
 32214                           
 32215                           ; BSR set to: 0
 32216                           ;incstack = 0
 32217  006220  B48A               	btfsc	3978,2,c	;volatile
 32218  006222  0C01               	retlw	1
 32219  006224  0C00               	retlw	0	;funcret
 32220  006226                     __end_of_HALDIO5PinValue:
 32221                           	opt stack 0
 32222                           tosu	equ	0xFFF
 32223                           tosh	equ	0xFFE
 32224                           tosl	equ	0xFFD
 32225                           pclath	equ	0xFFA
 32226                           tblptru	equ	0xFF8
 32227                           tblptrh	equ	0xFF7
 32228                           tblptrl	equ	0xFF6
 32229                           tablat	equ	0xFF5
 32230                           prodh	equ	0xFF4
 32231                           prodl	equ	0xFF3
 32232                           intcon	equ	0xFF2
 32233                           indf0	equ	0xFEF
 32234                           postinc0	equ	0xFEE
 32235                           plusw0	equ	0xFEB
 32236                           fsr0h	equ	0xFEA
 32237                           fsr0l	equ	0xFE9
 32238                           wreg	equ	0xFE8
 32239                           postinc1	equ	0xFE6
 32240                           postdec1	equ	0xFE5
 32241                           plusw1	equ	0xFE3
 32242                           fsr1h	equ	0xFE2
 32243                           fsr1l	equ	0xFE1
 32244                           indf2	equ	0xFDF
 32245                           postinc2	equ	0xFDE
 32246                           postdec2	equ	0xFDD
 32247                           plusw2	equ	0xFDB
 32248                           fsr2h	equ	0xFDA
 32249                           fsr2l	equ	0xFD9
 32250                           status	equ	0xFD8
 32251                           
 32252 ;; *************** function _RADIO_WriteFrequency *****************
 32253 ;; Defined at:
 32254 ;;		line 262 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 32255 ;; Parameters:    Size  Location     Type
 32256 ;;  frequency       4   13[BANK0 ] unsigned long 
 32257 ;; Auto vars:     Size  Location     Type
 32258 ;;  num             4   21[BANK0 ] unsigned long 
 32259 ;;  num_mod         4   17[BANK0 ] unsigned long 
 32260 ;; Return value:  Size  Location     Type
 32261 ;;                  1    wreg      void 
 32262 ;; Registers used:
 32263 ;;		wreg, status,2, status,0, cstack
 32264 ;; Tracked objects:
 32265 ;;		On entry : 0/0
 32266 ;;		On exit  : 31/0
 32267 ;;		Unchanged: 0/0
 32268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 32269 ;;      Params:         0       4       0       0       0       0       0       0       0
 32270 ;;      Locals:         0       8       0       0       0       0       0       0       0
 32271 ;;      Temps:          0       0       0       0       0       0       0       0       0
 32272 ;;      Totals:         0      12       0       0       0       0       0       0       0
 32273 ;;Total ram usage:       12 bytes
 32274 ;; Hardware stack levels used:    1
 32275 ;; Hardware stack levels required when called:   10
 32276 ;; This function calls:
 32277 ;;		_RADIO_RegisterWrite
 32278 ;;		___lldiv
 32279 ;;		___llmod
 32280 ;; This function is called by:
 32281 ;;		_RADIO_Init
 32282 ;;		_RADIO_WriteConfiguration
 32283 ;;		_RADIO_FHSSChangeChannel
 32284 ;; This function uses a non-reentrant model
 32285 ;;
 32286                           
 32287                           	psect	text165
 32288  003768                     __ptext165:
 32289                           	opt stack 0
 32290  003768                     _RADIO_WriteFrequency:
 32291                           	opt stack 16
 32292                           
 32293                           ;radio_driver_SX1276.c: 264: uint32_t num, num_mod;
 32294                           ;radio_driver_SX1276.c: 272: num = frequency / 15625;
 32295                           
 32296                           ;incstack = 0
 32297  003768  C06D  F060         	movff	RADIO_WriteFrequency@frequency,___lldiv@dividend
 32298  00376C  C06E  F061         	movff	RADIO_WriteFrequency@frequency+1,___lldiv@dividend+1
 32299  003770  C06F  F062         	movff	RADIO_WriteFrequency@frequency+2,___lldiv@dividend+2
 32300  003774  C070  F063         	movff	RADIO_WriteFrequency@frequency+3,___lldiv@dividend+3
 32301  003778  0E09               	movlw	9
 32302  00377A  0100               	movlb	0	; () banked
 32303  00377C  D85B               	call	PL236	;call to abstracted procedure
 32304  00377E  EC1B  F025         	call	___lldiv	;wreg free
 32305  003782  C060  F075         	movff	?___lldiv,RADIO_WriteFrequency@num
 32306  003786  C061  F076         	movff	?___lldiv+1,RADIO_WriteFrequency@num+1
 32307  00378A  C062  F077         	movff	?___lldiv+2,RADIO_WriteFrequency@num+2
 32308  00378E  C063  F078         	movff	?___lldiv+3,RADIO_WriteFrequency@num+3
 32309                           
 32310                           ;radio_driver_SX1276.c: 273: num_mod = frequency % 15625;
 32311  003792  C06D  F060         	movff	RADIO_WriteFrequency@frequency,___llmod@dividend
 32312  003796  C06E  F061         	movff	RADIO_WriteFrequency@frequency+1,___llmod@dividend+1
 32313  00379A  C06F  F062         	movff	RADIO_WriteFrequency@frequency+2,___llmod@dividend+2
 32314  00379E  C070  F063         	movff	RADIO_WriteFrequency@frequency+3,___llmod@dividend+3
 32315  0037A2  0E09               	movlw	9
 32316  0037A4  6F64               	movwf	___llmod@divisor& (0+255),b
 32317  0037A6  0E3D               	movlw	61
 32318  0037A8  6F65               	movwf	(___llmod@divisor+1)& (0+255),b
 32319  0037AA  6B66               	clrf	(___llmod@divisor+2)& (0+255),b
 32320  0037AC  6B67               	clrf	(___llmod@divisor+3)& (0+255),b
 32321  0037AE  EC26  F027         	call	___llmod	;wreg free
 32322  0037B2  C060  F071         	movff	?___llmod,RADIO_WriteFrequency@num_mod
 32323  0037B6  C061  F072         	movff	?___llmod+1,RADIO_WriteFrequency@num_mod+1
 32324  0037BA  C062  F073         	movff	?___llmod+2,RADIO_WriteFrequency@num_mod+2
 32325  0037BE  C063  F074         	movff	?___llmod+3,RADIO_WriteFrequency@num_mod+3
 32326                           
 32327                           ; BSR set to: 0
 32328                           ;radio_driver_SX1276.c: 277: num <<= (8);
 32329  0037C2  C077  F078         	movff	RADIO_WriteFrequency@num+2,RADIO_WriteFrequency@num+3
 32330  0037C6  C076  F077         	movff	RADIO_WriteFrequency@num+1,RADIO_WriteFrequency@num+2
 32331  0037CA  C075  F076         	movff	RADIO_WriteFrequency@num,RADIO_WriteFrequency@num+1
 32332  0037CE  6B75               	clrf	RADIO_WriteFrequency@num& (0+255),b
 32333                           
 32334                           ; BSR set to: 0
 32335                           ;radio_driver_SX1276.c: 278: num_mod <<= (8);
 32336  0037D0  C073  F074         	movff	RADIO_WriteFrequency@num_mod+2,RADIO_WriteFrequency@num_mod+3
 32337  0037D4  C072  F073         	movff	RADIO_WriteFrequency@num_mod+1,RADIO_WriteFrequency@num_mod+2
 32338  0037D8  C071  F072         	movff	RADIO_WriteFrequency@num_mod,RADIO_WriteFrequency@num_mod+1
 32339  0037DC  6B71               	clrf	RADIO_WriteFrequency@num_mod& (0+255),b
 32340                           
 32341                           ;radio_driver_SX1276.c: 282: num_mod = num_mod / 15625;
 32342  0037DE  C071  F060         	movff	RADIO_WriteFrequency@num_mod,___lldiv@dividend
 32343  0037E2  C072  F061         	movff	RADIO_WriteFrequency@num_mod+1,___lldiv@dividend+1
 32344  0037E6  C073  F062         	movff	RADIO_WriteFrequency@num_mod+2,___lldiv@dividend+2
 32345  0037EA  C074  F063         	movff	RADIO_WriteFrequency@num_mod+3,___lldiv@dividend+3
 32346  0037EE  0E09               	movlw	9
 32347  0037F0  D821               	call	PL236	;call to abstracted procedure
 32348  0037F2  EC1B  F025         	call	___lldiv	;wreg free
 32349  0037F6  C060  F071         	movff	?___lldiv,RADIO_WriteFrequency@num_mod
 32350  0037FA  C061  F072         	movff	?___lldiv+1,RADIO_WriteFrequency@num_mod+1
 32351  0037FE  C062  F073         	movff	?___lldiv+2,RADIO_WriteFrequency@num_mod+2
 32352  003802  C063  F074         	movff	?___lldiv+3,RADIO_WriteFrequency@num_mod+3
 32353                           
 32354                           ; BSR set to: 0
 32355                           ;radio_driver_SX1276.c: 283: num += num_mod;
 32356  003806  5171               	movf	RADIO_WriteFrequency@num_mod& (0+255),w,b
 32357  003808  2775               	addwf	RADIO_WriteFrequency@num& (0+255),f,b
 32358  00380A  5172               	movf	(RADIO_WriteFrequency@num_mod+1)& (0+255),w,b
 32359  00380C  2376               	addwfc	(RADIO_WriteFrequency@num+1)& (0+255),f,b
 32360  00380E  5173               	movf	(RADIO_WriteFrequency@num_mod+2)& (0+255),w,b
 32361  003810  2377               	addwfc	(RADIO_WriteFrequency@num+2)& (0+255),f,b
 32362  003812  5174               	movf	(RADIO_WriteFrequency@num_mod+3)& (0+255),w,b
 32363  003814  2378               	addwfc	(RADIO_WriteFrequency@num+3)& (0+255),f,b
 32364                           
 32365                           ; BSR set to: 0
 32366                           ;radio_driver_SX1276.c: 287: RADIO_RegisterWrite(0x06, (num >> (16)) & 0xFF);
 32367  003816  C077  F062         	movff	RADIO_WriteFrequency@num+2,RADIO_RegisterWrite@value
 32368  00381A  0E06               	movlw	6
 32369  00381C  EC31  F02F         	call	_RADIO_RegisterWrite
 32370                           
 32371                           ;radio_driver_SX1276.c: 288: RADIO_RegisterWrite(0x07, (num >> (8)) & 0xFF);
 32372  003820  C076  F062         	movff	RADIO_WriteFrequency@num+1,RADIO_RegisterWrite@value
 32373  003824  0E07               	movlw	7
 32374  003826  EC31  F02F         	call	_RADIO_RegisterWrite
 32375                           
 32376                           ;radio_driver_SX1276.c: 289: RADIO_RegisterWrite(0x08, num & 0xFF);
 32377  00382A  C075  F062         	movff	RADIO_WriteFrequency@num,RADIO_RegisterWrite@value
 32378  00382E  0E08               	movlw	8
 32379  003830  EF31  F02F         	goto	_RADIO_RegisterWrite
 32380  003834                     __end_of_RADIO_WriteFrequency:
 32381                           	opt stack 0
 32382  003834                     PL236:
 32383                           	opt stack 16
 32384  003834  6F64               	movwf	___lldiv@divisor& (0+255),b
 32385  003836  0E3D               	movlw	61
 32386  003838  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 32387  00383A  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 32388  00383C  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 32389  00383E  0C3D               	retlw	61
 32390  003840                     __end_ofPL236:
 32391                           	opt stack 0
 32392                           tosu	equ	0xFFF
 32393                           tosh	equ	0xFFE
 32394                           tosl	equ	0xFFD
 32395                           pclath	equ	0xFFA
 32396                           tblptru	equ	0xFF8
 32397                           tblptrh	equ	0xFF7
 32398                           tblptrl	equ	0xFF6
 32399                           tablat	equ	0xFF5
 32400                           prodh	equ	0xFF4
 32401                           prodl	equ	0xFF3
 32402                           intcon	equ	0xFF2
 32403                           indf0	equ	0xFEF
 32404                           postinc0	equ	0xFEE
 32405                           plusw0	equ	0xFEB
 32406                           fsr0h	equ	0xFEA
 32407                           fsr0l	equ	0xFE9
 32408                           wreg	equ	0xFE8
 32409                           postinc1	equ	0xFE6
 32410                           postdec1	equ	0xFE5
 32411                           plusw1	equ	0xFE3
 32412                           fsr1h	equ	0xFE2
 32413                           fsr1l	equ	0xFE1
 32414                           indf2	equ	0xFDF
 32415                           postinc2	equ	0xFDE
 32416                           postdec2	equ	0xFDD
 32417                           plusw2	equ	0xFDB
 32418                           fsr2h	equ	0xFDA
 32419                           fsr2l	equ	0xFD9
 32420                           status	equ	0xFD8
 32421                           
 32422 ;; *************** function ___llmod *****************
 32423 ;; Defined at:
 32424 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
 32425 ;; Parameters:    Size  Location     Type
 32426 ;;  dividend        4    0[BANK0 ] unsigned long 
 32427 ;;  divisor         4    4[BANK0 ] unsigned long 
 32428 ;; Auto vars:     Size  Location     Type
 32429 ;;  counter         1    8[BANK0 ] unsigned char 
 32430 ;; Return value:  Size  Location     Type
 32431 ;;                  4    0[BANK0 ] unsigned long 
 32432 ;; Registers used:
 32433 ;;		wreg, status,2, status,0
 32434 ;; Tracked objects:
 32435 ;;		On entry : 3F/0
 32436 ;;		On exit  : 3F/0
 32437 ;;		Unchanged: 0/0
 32438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 32439 ;;      Params:         0       8       0       0       0       0       0       0       0
 32440 ;;      Locals:         0       1       0       0       0       0       0       0       0
 32441 ;;      Temps:          0       0       0       0       0       0       0       0       0
 32442 ;;      Totals:         0       9       0       0       0       0       0       0       0
 32443 ;;Total ram usage:        9 bytes
 32444 ;; Hardware stack levels used:    1
 32445 ;; Hardware stack levels required when called:    7
 32446 ;; This function calls:
 32447 ;;		Nothing
 32448 ;; This function is called by:
 32449 ;;		_RADIO_WriteFrequency
 32450 ;; This function uses a non-reentrant model
 32451 ;;
 32452                           
 32453                           	psect	text166
 32454  004E4C                     __ptext166:
 32455                           	opt stack 0
 32456  004E4C                     ___llmod:
 32457                           	opt stack 18
 32458                           
 32459                           ; BSR set to: 0
 32460                           
 32461                           ;incstack = 0
 32462  004E4C  5164               	movf	___llmod@divisor& (0+255),w,b
 32463  004E4E  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 32464  004E50  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 32465  004E52  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 32466  004E54  E023               	bz	l3012
 32467                           
 32468                           ; BSR set to: 0
 32469  004E56  0E01               	movlw	1
 32470  004E58  6F68               	movwf	___llmod@counter& (0+255),b
 32471  004E5A  D006               	goto	l12098
 32472  004E5C                     l12096:
 32473                           
 32474                           ; BSR set to: 0
 32475  004E5C  90D8               	bcf	status,0,c
 32476  004E5E  3764               	rlcf	___llmod@divisor& (0+255),f,b
 32477  004E60  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 32478  004E62  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 32479  004E64  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 32480  004E66  2B68               	incf	___llmod@counter& (0+255),f,b
 32481  004E68                     l12098:
 32482                           
 32483                           ; BSR set to: 0
 32484  004E68  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
 32485  004E6A  D7F8               	goto	l12096
 32486  004E6C                     l12100:
 32487                           
 32488                           ; BSR set to: 0
 32489  004E6C  5164               	movf	___llmod@divisor& (0+255),w,b
 32490  004E6E  5D60               	subwf	___llmod@dividend& (0+255),w,b
 32491  004E70  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 32492  004E72  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 32493  004E74  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 32494  004E76  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 32495  004E78  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 32496  004E7A  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 32497  004E7C  E308               	bnc	l12104
 32498                           
 32499                           ; BSR set to: 0
 32500  004E7E  5164               	movf	___llmod@divisor& (0+255),w,b
 32501  004E80  5F60               	subwf	___llmod@dividend& (0+255),f,b
 32502  004E82  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 32503  004E84  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 32504  004E86  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 32505  004E88  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 32506  004E8A  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 32507  004E8C  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 32508  004E8E                     l12104:
 32509                           
 32510                           ; BSR set to: 0
 32511  004E8E  90D8               	bcf	status,0,c
 32512  004E90  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 32513  004E92  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 32514  004E94  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 32515  004E96  3364               	rrcf	___llmod@divisor& (0+255),f,b
 32516                           
 32517                           ; BSR set to: 0
 32518  004E98  2F68               	decfsz	___llmod@counter& (0+255),f,b
 32519  004E9A  D7E8               	goto	l12100
 32520  004E9C                     l3012:
 32521                           
 32522                           ; BSR set to: 0
 32523  004E9C  C060  F060         	movff	___llmod@dividend,?___llmod
 32524  004EA0  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
 32525  004EA4  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
 32526  004EA8  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
 32527                           
 32528                           ; BSR set to: 0
 32529  004EAC  0012               	return		;funcret
 32530  004EAE                     __end_of___llmod:
 32531                           	opt stack 0
 32532                           tosu	equ	0xFFF
 32533                           tosh	equ	0xFFE
 32534                           tosl	equ	0xFFD
 32535                           pclath	equ	0xFFA
 32536                           tblptru	equ	0xFF8
 32537                           tblptrh	equ	0xFF7
 32538                           tblptrl	equ	0xFF6
 32539                           tablat	equ	0xFF5
 32540                           prodh	equ	0xFF4
 32541                           prodl	equ	0xFF3
 32542                           intcon	equ	0xFF2
 32543                           indf0	equ	0xFEF
 32544                           postinc0	equ	0xFEE
 32545                           plusw0	equ	0xFEB
 32546                           fsr0h	equ	0xFEA
 32547                           fsr0l	equ	0xFE9
 32548                           wreg	equ	0xFE8
 32549                           postinc1	equ	0xFE6
 32550                           postdec1	equ	0xFE5
 32551                           plusw1	equ	0xFE3
 32552                           fsr1h	equ	0xFE2
 32553                           fsr1l	equ	0xFE1
 32554                           indf2	equ	0xFDF
 32555                           postinc2	equ	0xFDE
 32556                           postdec2	equ	0xFDD
 32557                           plusw2	equ	0xFDB
 32558                           fsr2h	equ	0xFDA
 32559                           fsr2l	equ	0xFD9
 32560                           status	equ	0xFD8
 32561                           
 32562 ;; *************** function _RADIO_RegisterWrite *****************
 32563 ;; Defined at:
 32564 ;;		line 126 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 32565 ;; Parameters:    Size  Location     Type
 32566 ;;  reg             1    wreg     unsigned char 
 32567 ;;  value           1    2[BANK0 ] unsigned char 
 32568 ;; Auto vars:     Size  Location     Type
 32569 ;;  reg             1    3[BANK0 ] unsigned char 
 32570 ;; Return value:  Size  Location     Type
 32571 ;;                  1    wreg      void 
 32572 ;; Registers used:
 32573 ;;		wreg, status,2, status,0, cstack
 32574 ;; Tracked objects:
 32575 ;;		On entry : 0/0
 32576 ;;		On exit  : 31/0
 32577 ;;		Unchanged: 0/0
 32578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 32579 ;;      Params:         0       1       0       0       0       0       0       0       0
 32580 ;;      Locals:         0       1       0       0       0       0       0       0       0
 32581 ;;      Temps:          0       0       0       0       0       0       0       0       0
 32582 ;;      Totals:         0       2       0       0       0       0       0       0       0
 32583 ;;Total ram usage:        2 bytes
 32584 ;; Hardware stack levels used:    1
 32585 ;; Hardware stack levels required when called:    9
 32586 ;; This function calls:
 32587 ;;		_HALSPICSAssert
 32588 ;;		_HALSPICSDeassert
 32589 ;;		_HALSPISend
 32590 ;; This function is called by:
 32591 ;;		_RADIO_WriteMode
 32592 ;;		_RADIO_WriteFrequency
 32593 ;;		_RADIO_WriteFSKFrequencyDeviation
 32594 ;;		_RADIO_WriteFSKBitRate
 32595 ;;		_RADIO_WritePower
 32596 ;;		_RADIO_Init
 32597 ;;		_RADIO_WriteConfiguration
 32598 ;;		_RADIO_Transmit
 32599 ;;		_RADIO_ReceiveStart
 32600 ;;		_RADIO_RxDone
 32601 ;;		_RADIO_RxTimeout
 32602 ;;		_RADIO_TxDone
 32603 ;;		_RADIO_UnhandledInterrupt
 32604 ;;		_RADIO_FHSSChangeChannel
 32605 ;;		_RADIO_ReadRandom
 32606 ;; This function uses a non-reentrant model
 32607 ;;
 32608                           
 32609                           	psect	text167
 32610  005E62                     __ptext167:
 32611                           	opt stack 0
 32612  005E62                     _RADIO_RegisterWrite:
 32613                           	opt stack 17
 32614                           
 32615                           ; BSR set to: 0
 32616                           ;incstack = 0
 32617                           ;RADIO_RegisterWrite@reg stored from wreg
 32618  005E62  0100               	movlb	0	; () banked
 32619  005E64  6F63               	movwf	RADIO_RegisterWrite@reg& (0+255),b
 32620                           
 32621                           ;radio_driver_SX1276.c: 128: HALSPICSAssert();
 32622  005E66  EC24  F031         	call	_HALSPICSAssert	;wreg free
 32623                           
 32624                           ;radio_driver_SX1276.c: 129: HALSPISend(0x80 | reg);
 32625  005E6A  0100               	movlb	0	; () banked
 32626  005E6C  5163               	movf	RADIO_RegisterWrite@reg& (0+255),w,b
 32627  005E6E  0980               	iorlw	128
 32628  005E70  ECDC  F030         	call	_HALSPISend
 32629                           
 32630                           ; BSR set to: 14
 32631                           ;radio_driver_SX1276.c: 130: HALSPISend(value);
 32632  005E74  0100               	movlb	0	; () banked
 32633  005E76  5162               	movf	RADIO_RegisterWrite@value& (0+255),w,b
 32634  005E78  ECDC  F030         	call	_HALSPISend
 32635                           
 32636                           ; BSR set to: 14
 32637                           ;radio_driver_SX1276.c: 131: HALSPICSDeassert();
 32638  005E7C  EF22  F031         	goto	_HALSPICSDeassert	;wreg free
 32639  005E80                     __end_of_RADIO_RegisterWrite:
 32640                           	opt stack 0
 32641                           tosu	equ	0xFFF
 32642                           tosh	equ	0xFFE
 32643                           tosl	equ	0xFFD
 32644                           pclath	equ	0xFFA
 32645                           tblptru	equ	0xFF8
 32646                           tblptrh	equ	0xFF7
 32647                           tblptrl	equ	0xFF6
 32648                           tablat	equ	0xFF5
 32649                           prodh	equ	0xFF4
 32650                           prodl	equ	0xFF3
 32651                           intcon	equ	0xFF2
 32652                           indf0	equ	0xFEF
 32653                           postinc0	equ	0xFEE
 32654                           plusw0	equ	0xFEB
 32655                           fsr0h	equ	0xFEA
 32656                           fsr0l	equ	0xFE9
 32657                           wreg	equ	0xFE8
 32658                           postinc1	equ	0xFE6
 32659                           postdec1	equ	0xFE5
 32660                           plusw1	equ	0xFE3
 32661                           fsr1h	equ	0xFE2
 32662                           fsr1l	equ	0xFE1
 32663                           indf2	equ	0xFDF
 32664                           postinc2	equ	0xFDE
 32665                           postdec2	equ	0xFDD
 32666                           plusw2	equ	0xFDB
 32667                           fsr2h	equ	0xFDA
 32668                           fsr2l	equ	0xFD9
 32669                           status	equ	0xFD8
 32670                           
 32671 ;; *************** function _HALSPISend *****************
 32672 ;; Defined at:
 32673 ;;		line 73 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 32674 ;; Parameters:    Size  Location     Type
 32675 ;;  data            1    wreg     unsigned char 
 32676 ;; Auto vars:     Size  Location     Type
 32677 ;;  data            1    1[BANK0 ] unsigned char 
 32678 ;; Return value:  Size  Location     Type
 32679 ;;                  1    wreg      unsigned char 
 32680 ;; Registers used:
 32681 ;;		wreg, status,2, cstack
 32682 ;; Tracked objects:
 32683 ;;		On entry : 0/0
 32684 ;;		On exit  : 3F/E
 32685 ;;		Unchanged: 0/0
 32686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 32687 ;;      Params:         0       0       0       0       0       0       0       0       0
 32688 ;;      Locals:         0       1       0       0       0       0       0       0       0
 32689 ;;      Temps:          0       0       0       0       0       0       0       0       0
 32690 ;;      Totals:         0       1       0       0       0       0       0       0       0
 32691 ;;Total ram usage:        1 bytes
 32692 ;; Hardware stack levels used:    1
 32693 ;; Hardware stack levels required when called:    8
 32694 ;; This function calls:
 32695 ;;		_SPI2_Exchange8bit
 32696 ;; This function is called by:
 32697 ;;		_RADIO_RegisterWrite
 32698 ;;		_RADIO_RegisterRead
 32699 ;;		_RADIO_Transmit
 32700 ;;		_RADIO_RxDone
 32701 ;;		_RADIO_FSKPayloadReady
 32702 ;; This function uses a non-reentrant model
 32703 ;;
 32704                           
 32705                           	psect	text168
 32706  0061B8                     __ptext168:
 32707                           	opt stack 0
 32708  0061B8                     _HALSPISend:
 32709                           	opt stack 17
 32710                           
 32711                           ;incstack = 0
 32712                           ;HALSPISend@data stored from wreg
 32713  0061B8  0100               	movlb	0	; () banked
 32714  0061BA  6F61               	movwf	HALSPISend@data& (0+255),b
 32715                           
 32716                           ;radio_driver_hal.c: 75: return SPI2_Exchange8bit(data);
 32717  0061BC  5161               	movf	HALSPISend@data& (0+255),w,b
 32718  0061BE  EF5F  F030         	goto	_SPI2_Exchange8bit
 32719  0061C2                     __end_of_HALSPISend:
 32720                           	opt stack 0
 32721                           tosu	equ	0xFFF
 32722                           tosh	equ	0xFFE
 32723                           tosl	equ	0xFFD
 32724                           pclath	equ	0xFFA
 32725                           tblptru	equ	0xFF8
 32726                           tblptrh	equ	0xFF7
 32727                           tblptrl	equ	0xFF6
 32728                           tablat	equ	0xFF5
 32729                           prodh	equ	0xFF4
 32730                           prodl	equ	0xFF3
 32731                           intcon	equ	0xFF2
 32732                           indf0	equ	0xFEF
 32733                           postinc0	equ	0xFEE
 32734                           plusw0	equ	0xFEB
 32735                           fsr0h	equ	0xFEA
 32736                           fsr0l	equ	0xFE9
 32737                           wreg	equ	0xFE8
 32738                           postinc1	equ	0xFE6
 32739                           postdec1	equ	0xFE5
 32740                           plusw1	equ	0xFE3
 32741                           fsr1h	equ	0xFE2
 32742                           fsr1l	equ	0xFE1
 32743                           indf2	equ	0xFDF
 32744                           postinc2	equ	0xFDE
 32745                           postdec2	equ	0xFDD
 32746                           plusw2	equ	0xFDB
 32747                           fsr2h	equ	0xFDA
 32748                           fsr2l	equ	0xFD9
 32749                           status	equ	0xFD8
 32750                           
 32751 ;; *************** function _SPI2_Exchange8bit *****************
 32752 ;; Defined at:
 32753 ;;		line 77 in file "mcc_generated_files/spi2.c"
 32754 ;; Parameters:    Size  Location     Type
 32755 ;;  data            1    wreg     unsigned char 
 32756 ;; Auto vars:     Size  Location     Type
 32757 ;;  data            1    0[BANK0 ] unsigned char 
 32758 ;; Return value:  Size  Location     Type
 32759 ;;                  1    wreg      unsigned char 
 32760 ;; Registers used:
 32761 ;;		wreg, status,2
 32762 ;; Tracked objects:
 32763 ;;		On entry : 3F/0
 32764 ;;		On exit  : 3F/E
 32765 ;;		Unchanged: 0/0
 32766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 32767 ;;      Params:         0       0       0       0       0       0       0       0       0
 32768 ;;      Locals:         0       1       0       0       0       0       0       0       0
 32769 ;;      Temps:          0       0       0       0       0       0       0       0       0
 32770 ;;      Totals:         0       1       0       0       0       0       0       0       0
 32771 ;;Total ram usage:        1 bytes
 32772 ;; Hardware stack levels used:    1
 32773 ;; Hardware stack levels required when called:    7
 32774 ;; This function calls:
 32775 ;;		Nothing
 32776 ;; This function is called by:
 32777 ;;		_HALSPISend
 32778 ;; This function uses a non-reentrant model
 32779 ;;
 32780                           
 32781                           	psect	text169
 32782  0060BE                     __ptext169:
 32783                           	opt stack 0
 32784  0060BE                     _SPI2_Exchange8bit:
 32785                           	opt stack 17
 32786                           
 32787                           ; BSR set to: 14
 32788                           ;incstack = 0
 32789                           ;SPI2_Exchange8bit@data stored from wreg
 32790  0060BE  6F60               	movwf	SPI2_Exchange8bit@data& (0+255),b
 32791                           
 32792                           ;spi2.c: 80: SSP2CON1bits.WCOL = 0;
 32793  0060C0  010E               	movlb	14	; () banked
 32794  0060C2  9FD9               	bcf	217,7,b	;volatile
 32795                           
 32796                           ; BSR set to: 14
 32797                           ;spi2.c: 82: SSP2BUF = data;
 32798  0060C4  C060  FED5         	movff	SPI2_Exchange8bit@data,3797	;volatile
 32799  0060C8                     l2412:
 32800                           
 32801                           ; BSR set to: 14
 32802  0060C8  A1D8               	btfss	216,0,b	;volatile
 32803  0060CA  D7FE               	goto	l2412
 32804                           
 32805                           ; BSR set to: 14
 32806                           ;spi2.c: 86: }
 32807                           ;spi2.c: 88: return (SSP2BUF);
 32808  0060CC  51D5               	movf	213,w,b	;volatile
 32809                           
 32810                           ; BSR set to: 14
 32811  0060CE  0012               	return		;funcret
 32812  0060D0                     __end_of_SPI2_Exchange8bit:
 32813                           	opt stack 0
 32814                           tosu	equ	0xFFF
 32815                           tosh	equ	0xFFE
 32816                           tosl	equ	0xFFD
 32817                           pclath	equ	0xFFA
 32818                           tblptru	equ	0xFF8
 32819                           tblptrh	equ	0xFF7
 32820                           tblptrl	equ	0xFF6
 32821                           tablat	equ	0xFF5
 32822                           prodh	equ	0xFF4
 32823                           prodl	equ	0xFF3
 32824                           intcon	equ	0xFF2
 32825                           indf0	equ	0xFEF
 32826                           postinc0	equ	0xFEE
 32827                           plusw0	equ	0xFEB
 32828                           fsr0h	equ	0xFEA
 32829                           fsr0l	equ	0xFE9
 32830                           wreg	equ	0xFE8
 32831                           postinc1	equ	0xFE6
 32832                           postdec1	equ	0xFE5
 32833                           plusw1	equ	0xFE3
 32834                           fsr1h	equ	0xFE2
 32835                           fsr1l	equ	0xFE1
 32836                           indf2	equ	0xFDF
 32837                           postinc2	equ	0xFDE
 32838                           postdec2	equ	0xFDD
 32839                           plusw2	equ	0xFDB
 32840                           fsr2h	equ	0xFDA
 32841                           fsr2l	equ	0xFD9
 32842                           status	equ	0xFD8
 32843                           
 32844 ;; *************** function _HALSPICSDeassert *****************
 32845 ;; Defined at:
 32846 ;;		line 68 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 32847 ;; Parameters:    Size  Location     Type
 32848 ;;		None
 32849 ;; Auto vars:     Size  Location     Type
 32850 ;;		None
 32851 ;; Return value:  Size  Location     Type
 32852 ;;                  1    wreg      void 
 32853 ;; Registers used:
 32854 ;;		None
 32855 ;; Tracked objects:
 32856 ;;		On entry : 31/0
 32857 ;;		On exit  : 31/0
 32858 ;;		Unchanged: 31/0
 32859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 32860 ;;      Params:         0       0       0       0       0       0       0       0       0
 32861 ;;      Locals:         0       0       0       0       0       0       0       0       0
 32862 ;;      Temps:          0       0       0       0       0       0       0       0       0
 32863 ;;      Totals:         0       0       0       0       0       0       0       0       0
 32864 ;;Total ram usage:        0 bytes
 32865 ;; Hardware stack levels used:    1
 32866 ;; Hardware stack levels required when called:    7
 32867 ;; This function calls:
 32868 ;;		Nothing
 32869 ;; This function is called by:
 32870 ;;		_RADIO_RegisterWrite
 32871 ;;		_RADIO_RegisterRead
 32872 ;;		_RADIO_Transmit
 32873 ;;		_RADIO_RxDone
 32874 ;;		_RADIO_FSKPayloadReady
 32875 ;; This function uses a non-reentrant model
 32876 ;;
 32877                           
 32878                           	psect	text170
 32879  006244                     __ptext170:
 32880                           	opt stack 0
 32881  006244                     _HALSPICSDeassert:
 32882                           	opt stack 18
 32883                           
 32884                           ; BSR set to: 14
 32885                           ;incstack = 0
 32886                           ;radio_driver_hal.c: 70: do { LATC1 = 1; } while(0);
 32887  006244  827B               	bsf	3963,1,c	;volatile
 32888  006246  0012               	return		;funcret
 32889  006248                     __end_of_HALSPICSDeassert:
 32890                           	opt stack 0
 32891                           tosu	equ	0xFFF
 32892                           tosh	equ	0xFFE
 32893                           tosl	equ	0xFFD
 32894                           pclath	equ	0xFFA
 32895                           tblptru	equ	0xFF8
 32896                           tblptrh	equ	0xFF7
 32897                           tblptrl	equ	0xFF6
 32898                           tablat	equ	0xFF5
 32899                           prodh	equ	0xFF4
 32900                           prodl	equ	0xFF3
 32901                           intcon	equ	0xFF2
 32902                           indf0	equ	0xFEF
 32903                           postinc0	equ	0xFEE
 32904                           plusw0	equ	0xFEB
 32905                           fsr0h	equ	0xFEA
 32906                           fsr0l	equ	0xFE9
 32907                           wreg	equ	0xFE8
 32908                           postinc1	equ	0xFE6
 32909                           postdec1	equ	0xFE5
 32910                           plusw1	equ	0xFE3
 32911                           fsr1h	equ	0xFE2
 32912                           fsr1l	equ	0xFE1
 32913                           indf2	equ	0xFDF
 32914                           postinc2	equ	0xFDE
 32915                           postdec2	equ	0xFDD
 32916                           plusw2	equ	0xFDB
 32917                           fsr2h	equ	0xFDA
 32918                           fsr2l	equ	0xFD9
 32919                           status	equ	0xFD8
 32920                           
 32921 ;; *************** function _HALSPICSAssert *****************
 32922 ;; Defined at:
 32923 ;;		line 63 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 32924 ;; Parameters:    Size  Location     Type
 32925 ;;		None
 32926 ;; Auto vars:     Size  Location     Type
 32927 ;;		None
 32928 ;; Return value:  Size  Location     Type
 32929 ;;                  1    wreg      void 
 32930 ;; Registers used:
 32931 ;;		None
 32932 ;; Tracked objects:
 32933 ;;		On entry : 0/0
 32934 ;;		On exit  : 0/0
 32935 ;;		Unchanged: 0/0
 32936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 32937 ;;      Params:         0       0       0       0       0       0       0       0       0
 32938 ;;      Locals:         0       0       0       0       0       0       0       0       0
 32939 ;;      Temps:          0       0       0       0       0       0       0       0       0
 32940 ;;      Totals:         0       0       0       0       0       0       0       0       0
 32941 ;;Total ram usage:        0 bytes
 32942 ;; Hardware stack levels used:    1
 32943 ;; Hardware stack levels required when called:    7
 32944 ;; This function calls:
 32945 ;;		Nothing
 32946 ;; This function is called by:
 32947 ;;		_RADIO_RegisterWrite
 32948 ;;		_RADIO_RegisterRead
 32949 ;;		_RADIO_Transmit
 32950 ;;		_RADIO_RxDone
 32951 ;;		_RADIO_FSKPayloadReady
 32952 ;; This function uses a non-reentrant model
 32953 ;;
 32954                           
 32955                           	psect	text171
 32956  006248                     __ptext171:
 32957                           	opt stack 0
 32958  006248                     _HALSPICSAssert:
 32959                           	opt stack 18
 32960                           
 32961                           ;incstack = 0
 32962                           ;radio_driver_hal.c: 65: do { LATC1 = 0; } while(0);
 32963  006248  927B               	bcf	3963,1,c	;volatile
 32964  00624A  0012               	return		;funcret
 32965  00624C                     __end_of_HALSPICSAssert:
 32966                           	opt stack 0
 32967                           tosu	equ	0xFFF
 32968                           tosh	equ	0xFFE
 32969                           tosl	equ	0xFFD
 32970                           pclath	equ	0xFFA
 32971                           tblptru	equ	0xFF8
 32972                           tblptrh	equ	0xFF7
 32973                           tblptrl	equ	0xFF6
 32974                           tablat	equ	0xFF5
 32975                           prodh	equ	0xFF4
 32976                           prodl	equ	0xFF3
 32977                           intcon	equ	0xFF2
 32978                           indf0	equ	0xFEF
 32979                           postinc0	equ	0xFEE
 32980                           plusw0	equ	0xFEB
 32981                           fsr0h	equ	0xFEA
 32982                           fsr0l	equ	0xFE9
 32983                           wreg	equ	0xFE8
 32984                           postinc1	equ	0xFE6
 32985                           postdec1	equ	0xFE5
 32986                           plusw1	equ	0xFE3
 32987                           fsr1h	equ	0xFE2
 32988                           fsr1l	equ	0xFE1
 32989                           indf2	equ	0xFDF
 32990                           postinc2	equ	0xFDE
 32991                           postdec2	equ	0xFDD
 32992                           plusw2	equ	0xFDB
 32993                           fsr2h	equ	0xFDA
 32994                           fsr2l	equ	0xFD9
 32995                           status	equ	0xFD8
 32996                           
 32997 ;; *************** function _RADIO_Reset *****************
 32998 ;; Defined at:
 32999 ;;		line 249 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 33000 ;; Parameters:    Size  Location     Type
 33001 ;;		None
 33002 ;; Auto vars:     Size  Location     Type
 33003 ;;		None
 33004 ;; Return value:  Size  Location     Type
 33005 ;;                  1    wreg      void 
 33006 ;; Registers used:
 33007 ;;		wreg, status,2, status,0, cstack
 33008 ;; Tracked objects:
 33009 ;;		On entry : 3E/1
 33010 ;;		On exit  : 3E/0
 33011 ;;		Unchanged: 0/0
 33012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 33013 ;;      Params:         0       0       0       0       0       0       0       0       0
 33014 ;;      Locals:         0       0       0       0       0       0       0       0       0
 33015 ;;      Temps:          0       0       0       0       0       0       0       0       0
 33016 ;;      Totals:         0       0       0       0       0       0       0       0       0
 33017 ;;Total ram usage:        0 bytes
 33018 ;; Hardware stack levels used:    1
 33019 ;; Hardware stack levels required when called:    8
 33020 ;; This function calls:
 33021 ;;		_HALResetPinMakeInput
 33022 ;;		_HALResetPinMakeOutput
 33023 ;;		_HALResetPinOutputValue
 33024 ;;		_SystemBlockingWaitMs
 33025 ;; This function is called by:
 33026 ;;		_RADIO_Init
 33027 ;; This function uses a non-reentrant model
 33028 ;;
 33029                           
 33030                           	psect	text172
 33031  005A7E                     __ptext172:
 33032                           	opt stack 0
 33033  005A7E                     _RADIO_Reset:
 33034                           	opt stack 20
 33035                           
 33036                           ;radio_driver_SX1276.c: 251: HALResetPinMakeOutput();
 33037                           
 33038                           ;incstack = 0
 33039  005A7E  EC26  F031         	call	_HALResetPinMakeOutput	;wreg free
 33040                           
 33041                           ;radio_driver_SX1276.c: 252: HALResetPinOutputValue(0);
 33042  005A82  0E00               	movlw	0
 33043  005A84  EC43  F030         	call	_HALResetPinOutputValue
 33044                           
 33045                           ; BSR set to: 0
 33046                           ;radio_driver_SX1276.c: 253: SystemBlockingWaitMs(1);
 33047  005A88  EC3F  F01B         	call	PL228	;call to abstracted procedure
 33048  005A8C  ECC4  F02D         	call	_SystemBlockingWaitMs	;wreg free
 33049                           
 33050                           ;radio_driver_SX1276.c: 254: HALResetPinMakeInput();
 33051  005A90  EC28  F031         	call	_HALResetPinMakeInput	;wreg free
 33052                           
 33053                           ; BSR set to: 0
 33054                           ;radio_driver_SX1276.c: 255: SystemBlockingWaitMs(10);
 33055  005A94  0E0A               	movlw	10
 33056  005A96  6F60               	movwf	SystemBlockingWaitMs@ms& (0+255),b
 33057  005A98  6B61               	clrf	(SystemBlockingWaitMs@ms+1)& (0+255),b
 33058  005A9A  6B62               	clrf	(SystemBlockingWaitMs@ms+2)& (0+255),b
 33059  005A9C  6B63               	clrf	(SystemBlockingWaitMs@ms+3)& (0+255),b
 33060  005A9E  ECC4  F02D         	call	_SystemBlockingWaitMs	;wreg free
 33061                           
 33062                           ; BSR set to: 0
 33063                           ;radio_driver_SX1276.c: 257: HALResetPinOutputValue(1);
 33064  005AA2  0E01               	movlw	1
 33065  005AA4  EC43  F030         	call	_HALResetPinOutputValue
 33066                           
 33067                           ;radio_driver_SX1276.c: 258: HALResetPinMakeOutput();
 33068  005AA8  EF26  F031         	goto	_HALResetPinMakeOutput	;wreg free
 33069  005AAC                     __end_of_RADIO_Reset:
 33070                           	opt stack 0
 33071                           tosu	equ	0xFFF
 33072                           tosh	equ	0xFFE
 33073                           tosl	equ	0xFFD
 33074                           pclath	equ	0xFFA
 33075                           tblptru	equ	0xFF8
 33076                           tblptrh	equ	0xFF7
 33077                           tblptrl	equ	0xFF6
 33078                           tablat	equ	0xFF5
 33079                           prodh	equ	0xFF4
 33080                           prodl	equ	0xFF3
 33081                           intcon	equ	0xFF2
 33082                           indf0	equ	0xFEF
 33083                           postinc0	equ	0xFEE
 33084                           plusw0	equ	0xFEB
 33085                           fsr0h	equ	0xFEA
 33086                           fsr0l	equ	0xFE9
 33087                           wreg	equ	0xFE8
 33088                           postinc1	equ	0xFE6
 33089                           postdec1	equ	0xFE5
 33090                           plusw1	equ	0xFE3
 33091                           fsr1h	equ	0xFE2
 33092                           fsr1l	equ	0xFE1
 33093                           indf2	equ	0xFDF
 33094                           postinc2	equ	0xFDE
 33095                           postdec2	equ	0xFDD
 33096                           plusw2	equ	0xFDB
 33097                           fsr2h	equ	0xFDA
 33098                           fsr2l	equ	0xFD9
 33099                           status	equ	0xFD8
 33100                           
 33101 ;; *************** function _SystemBlockingWaitMs *****************
 33102 ;; Defined at:
 33103 ;;		line 145 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 33104 ;; Parameters:    Size  Location     Type
 33105 ;;  ms              4    0[BANK0 ] unsigned long 
 33106 ;; Auto vars:     Size  Location     Type
 33107 ;;		None
 33108 ;; Return value:  Size  Location     Type
 33109 ;;                  1    wreg      void 
 33110 ;; Registers used:
 33111 ;;		wreg, status,2, status,0
 33112 ;; Tracked objects:
 33113 ;;		On entry : 3F/0
 33114 ;;		On exit  : 3F/0
 33115 ;;		Unchanged: 0/0
 33116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 33117 ;;      Params:         0       4       0       0       0       0       0       0       0
 33118 ;;      Locals:         0       0       0       0       0       0       0       0       0
 33119 ;;      Temps:          0       1       0       0       0       0       0       0       0
 33120 ;;      Totals:         0       5       0       0       0       0       0       0       0
 33121 ;;Total ram usage:        5 bytes
 33122 ;; Hardware stack levels used:    1
 33123 ;; Hardware stack levels required when called:    7
 33124 ;; This function calls:
 33125 ;;		Nothing
 33126 ;; This function is called by:
 33127 ;;		_RADIO_WriteMode
 33128 ;;		_RADIO_Reset
 33129 ;;		_RADIO_ReadRandom
 33130 ;; This function uses a non-reentrant model
 33131 ;;
 33132                           
 33133                           	psect	text173
 33134  005B88                     __ptext173:
 33135                           	opt stack 0
 33136  005B88                     _SystemBlockingWaitMs:
 33137                           	opt stack 19
 33138                           
 33139                           ; BSR set to: 0
 33140                           ;sw_timer.c: 147: while (ms > 0)
 33141                           
 33142                           ;incstack = 0
 33143  005B88  D00F               	goto	l12026
 33144  005B8A                     l12022:
 33145                           
 33146                           ; BSR set to: 0
 33147                           ;sw_timer.c: 148: {
 33148                           ;sw_timer.c: 149: _delay((unsigned long)((1)*(16000000/4000.0)));
 33149  005B8A  0E06               	movlw	6
 33150  005B8C  0100               	movlb	0	; () banked
 33151  005B8E  6F64               	movwf	??_SystemBlockingWaitMs& (0+255),b
 33152  005B90  0E30               	movlw	48
 33153  005B92                     u19827:
 33154  005B92  2EE8               	decfsz	wreg,f,c
 33155  005B94  D7FE               	bra	u19827
 33156  005B96  2F64               	decfsz	??_SystemBlockingWaitMs& (0+255),f,b
 33157  005B98  D7FC               	bra	u19827
 33158  005B9A  F000               	nop	
 33159                           
 33160                           ;sw_timer.c: 150: ms--;
 33161  005B9C  0100               	movlb	0	; () banked
 33162  005B9E  0760               	decf	SystemBlockingWaitMs@ms& (0+255),f,b
 33163  005BA0  0E00               	movlw	0
 33164  005BA2  5B61               	subwfb	(SystemBlockingWaitMs@ms+1)& (0+255),f,b
 33165  005BA4  5B62               	subwfb	(SystemBlockingWaitMs@ms+2)& (0+255),f,b
 33166  005BA6  5B63               	subwfb	(SystemBlockingWaitMs@ms+3)& (0+255),f,b
 33167  005BA8                     l12026:
 33168                           
 33169                           ; BSR set to: 0
 33170  005BA8  5160               	movf	SystemBlockingWaitMs@ms& (0+255),w,b
 33171  005BAA  1161               	iorwf	(SystemBlockingWaitMs@ms+1)& (0+255),w,b
 33172  005BAC  1162               	iorwf	(SystemBlockingWaitMs@ms+2)& (0+255),w,b
 33173  005BAE  1163               	iorwf	(SystemBlockingWaitMs@ms+3)& (0+255),w,b
 33174  005BB0  E1EC               	bnz	l12022
 33175                           
 33176                           ; BSR set to: 0
 33177  005BB2  0012               	return		;funcret
 33178  005BB4                     __end_of_SystemBlockingWaitMs:
 33179                           	opt stack 0
 33180                           tosu	equ	0xFFF
 33181                           tosh	equ	0xFFE
 33182                           tosl	equ	0xFFD
 33183                           pclath	equ	0xFFA
 33184                           tblptru	equ	0xFF8
 33185                           tblptrh	equ	0xFF7
 33186                           tblptrl	equ	0xFF6
 33187                           tablat	equ	0xFF5
 33188                           prodh	equ	0xFF4
 33189                           prodl	equ	0xFF3
 33190                           intcon	equ	0xFF2
 33191                           indf0	equ	0xFEF
 33192                           postinc0	equ	0xFEE
 33193                           plusw0	equ	0xFEB
 33194                           fsr0h	equ	0xFEA
 33195                           fsr0l	equ	0xFE9
 33196                           wreg	equ	0xFE8
 33197                           postinc1	equ	0xFE6
 33198                           postdec1	equ	0xFE5
 33199                           plusw1	equ	0xFE3
 33200                           fsr1h	equ	0xFE2
 33201                           fsr1l	equ	0xFE1
 33202                           indf2	equ	0xFDF
 33203                           postinc2	equ	0xFDE
 33204                           postdec2	equ	0xFDD
 33205                           plusw2	equ	0xFDB
 33206                           fsr2h	equ	0xFDA
 33207                           fsr2l	equ	0xFD9
 33208                           status	equ	0xFD8
 33209                           
 33210 ;; *************** function _HALResetPinOutputValue *****************
 33211 ;; Defined at:
 33212 ;;		line 55 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 33213 ;; Parameters:    Size  Location     Type
 33214 ;;  value           1    wreg     unsigned char 
 33215 ;; Auto vars:     Size  Location     Type
 33216 ;;  value           1    0[BANK0 ] unsigned char 
 33217 ;; Return value:  Size  Location     Type
 33218 ;;                  1    wreg      void 
 33219 ;; Registers used:
 33220 ;;		wreg, status,2, status,0
 33221 ;; Tracked objects:
 33222 ;;		On entry : 3E/1
 33223 ;;		On exit  : 3F/0
 33224 ;;		Unchanged: 0/0
 33225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 33226 ;;      Params:         0       0       0       0       0       0       0       0       0
 33227 ;;      Locals:         0       1       0       0       0       0       0       0       0
 33228 ;;      Temps:          0       0       0       0       0       0       0       0       0
 33229 ;;      Totals:         0       1       0       0       0       0       0       0       0
 33230 ;;Total ram usage:        1 bytes
 33231 ;; Hardware stack levels used:    1
 33232 ;; Hardware stack levels required when called:    7
 33233 ;; This function calls:
 33234 ;;		Nothing
 33235 ;; This function is called by:
 33236 ;;		_RADIO_Reset
 33237 ;; This function uses a non-reentrant model
 33238 ;;
 33239                           
 33240                           	psect	text174
 33241  006086                     __ptext174:
 33242                           	opt stack 0
 33243  006086                     _HALResetPinOutputValue:
 33244                           	opt stack 20
 33245                           
 33246                           ; BSR set to: 0
 33247                           ;incstack = 0
 33248                           ;HALResetPinOutputValue@value stored from wreg
 33249  006086  0100               	movlb	0	; () banked
 33250  006088  6F60               	movwf	HALResetPinOutputValue@value& (0+255),b
 33251                           
 33252                           ;radio_driver_hal.c: 57: if (value == 0)
 33253  00608A  5160               	movf	HALResetPinOutputValue@value& (0+255),w,b
 33254  00608C  E102               	bnz	l9872
 33255                           
 33256                           ; BSR set to: 0
 33257                           
 33258                           ;radio_driver_hal.c: 58: do { LATC0 = 0; } while(0);
 33259  00608E  907B               	bcf	3963,0,c	;volatile
 33260  006090  0012               	return	
 33261  006092                     l9872:
 33262                           
 33263                           ; BSR set to: 0
 33264                           ;radio_driver_hal.c: 59: else if (value == 1)
 33265  006092  0560               	decf	HALResetPinOutputValue@value& (0+255),w,b
 33266  006094  B4D8               	btfsc	status,2,c
 33267                           
 33268                           ; BSR set to: 0
 33269                           
 33270                           ;radio_driver_hal.c: 60: do { LATC0 = 1; } while(0);
 33271  006096  807B               	bsf	3963,0,c	;volatile
 33272                           
 33273                           ; BSR set to: 0
 33274  006098  0012               	return		;funcret
 33275  00609A                     __end_of_HALResetPinOutputValue:
 33276                           	opt stack 0
 33277                           tosu	equ	0xFFF
 33278                           tosh	equ	0xFFE
 33279                           tosl	equ	0xFFD
 33280                           pclath	equ	0xFFA
 33281                           tblptru	equ	0xFF8
 33282                           tblptrh	equ	0xFF7
 33283                           tblptrl	equ	0xFF6
 33284                           tablat	equ	0xFF5
 33285                           prodh	equ	0xFF4
 33286                           prodl	equ	0xFF3
 33287                           intcon	equ	0xFF2
 33288                           indf0	equ	0xFEF
 33289                           postinc0	equ	0xFEE
 33290                           plusw0	equ	0xFEB
 33291                           fsr0h	equ	0xFEA
 33292                           fsr0l	equ	0xFE9
 33293                           wreg	equ	0xFE8
 33294                           postinc1	equ	0xFE6
 33295                           postdec1	equ	0xFE5
 33296                           plusw1	equ	0xFE3
 33297                           fsr1h	equ	0xFE2
 33298                           fsr1l	equ	0xFE1
 33299                           indf2	equ	0xFDF
 33300                           postinc2	equ	0xFDE
 33301                           postdec2	equ	0xFDD
 33302                           plusw2	equ	0xFDB
 33303                           fsr2h	equ	0xFDA
 33304                           fsr2l	equ	0xFD9
 33305                           status	equ	0xFD8
 33306                           
 33307 ;; *************** function _HALResetPinMakeOutput *****************
 33308 ;; Defined at:
 33309 ;;		line 45 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 33310 ;; Parameters:    Size  Location     Type
 33311 ;;		None
 33312 ;; Auto vars:     Size  Location     Type
 33313 ;;		None
 33314 ;; Return value:  Size  Location     Type
 33315 ;;                  1    wreg      void 
 33316 ;; Registers used:
 33317 ;;		None
 33318 ;; Tracked objects:
 33319 ;;		On entry : 3E/1
 33320 ;;		On exit  : 3E/0
 33321 ;;		Unchanged: 3E/0
 33322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 33323 ;;      Params:         0       0       0       0       0       0       0       0       0
 33324 ;;      Locals:         0       0       0       0       0       0       0       0       0
 33325 ;;      Temps:          0       0       0       0       0       0       0       0       0
 33326 ;;      Totals:         0       0       0       0       0       0       0       0       0
 33327 ;;Total ram usage:        0 bytes
 33328 ;; Hardware stack levels used:    1
 33329 ;; Hardware stack levels required when called:    7
 33330 ;; This function calls:
 33331 ;;		Nothing
 33332 ;; This function is called by:
 33333 ;;		_RADIO_Reset
 33334 ;; This function uses a non-reentrant model
 33335 ;;
 33336                           
 33337                           	psect	text175
 33338  00624C                     __ptext175:
 33339                           	opt stack 0
 33340  00624C                     _HALResetPinMakeOutput:
 33341                           	opt stack 20
 33342                           
 33343                           ; BSR set to: 0
 33344                           ;incstack = 0
 33345                           ;radio_driver_hal.c: 47: do { TRISC0 = 0; } while(0);
 33346  00624C  9083               	bcf	3971,0,c	;volatile
 33347  00624E  0012               	return		;funcret
 33348  006250                     __end_of_HALResetPinMakeOutput:
 33349                           	opt stack 0
 33350                           tosu	equ	0xFFF
 33351                           tosh	equ	0xFFE
 33352                           tosl	equ	0xFFD
 33353                           pclath	equ	0xFFA
 33354                           tblptru	equ	0xFF8
 33355                           tblptrh	equ	0xFF7
 33356                           tblptrl	equ	0xFF6
 33357                           tablat	equ	0xFF5
 33358                           prodh	equ	0xFF4
 33359                           prodl	equ	0xFF3
 33360                           intcon	equ	0xFF2
 33361                           indf0	equ	0xFEF
 33362                           postinc0	equ	0xFEE
 33363                           plusw0	equ	0xFEB
 33364                           fsr0h	equ	0xFEA
 33365                           fsr0l	equ	0xFE9
 33366                           wreg	equ	0xFE8
 33367                           postinc1	equ	0xFE6
 33368                           postdec1	equ	0xFE5
 33369                           plusw1	equ	0xFE3
 33370                           fsr1h	equ	0xFE2
 33371                           fsr1l	equ	0xFE1
 33372                           indf2	equ	0xFDF
 33373                           postinc2	equ	0xFDE
 33374                           postdec2	equ	0xFDD
 33375                           plusw2	equ	0xFDB
 33376                           fsr2h	equ	0xFDA
 33377                           fsr2l	equ	0xFD9
 33378                           status	equ	0xFD8
 33379                           
 33380 ;; *************** function _HALResetPinMakeInput *****************
 33381 ;; Defined at:
 33382 ;;		line 50 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 33383 ;; Parameters:    Size  Location     Type
 33384 ;;		None
 33385 ;; Auto vars:     Size  Location     Type
 33386 ;;		None
 33387 ;; Return value:  Size  Location     Type
 33388 ;;                  1    wreg      void 
 33389 ;; Registers used:
 33390 ;;		None
 33391 ;; Tracked objects:
 33392 ;;		On entry : 3F/0
 33393 ;;		On exit  : 3F/0
 33394 ;;		Unchanged: 3F/0
 33395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 33396 ;;      Params:         0       0       0       0       0       0       0       0       0
 33397 ;;      Locals:         0       0       0       0       0       0       0       0       0
 33398 ;;      Temps:          0       0       0       0       0       0       0       0       0
 33399 ;;      Totals:         0       0       0       0       0       0       0       0       0
 33400 ;;Total ram usage:        0 bytes
 33401 ;; Hardware stack levels used:    1
 33402 ;; Hardware stack levels required when called:    7
 33403 ;; This function calls:
 33404 ;;		Nothing
 33405 ;; This function is called by:
 33406 ;;		_RADIO_Reset
 33407 ;; This function uses a non-reentrant model
 33408 ;;
 33409                           
 33410                           	psect	text176
 33411  006250                     __ptext176:
 33412                           	opt stack 0
 33413  006250                     _HALResetPinMakeInput:
 33414                           	opt stack 20
 33415                           
 33416                           ; BSR set to: 0
 33417                           
 33418                           ;incstack = 0
 33419                           ;radio_driver_hal.c: 52: do { TRISC0 = 1; } while(0);
 33420  006250  8083               	bsf	3971,0,c	;volatile
 33421                           
 33422                           ; BSR set to: 0
 33423  006252  0012               	return		;funcret
 33424  006254                     __end_of_HALResetPinMakeInput:
 33425                           	opt stack 0
 33426                           tosu	equ	0xFFF
 33427                           tosh	equ	0xFFE
 33428                           tosl	equ	0xFFD
 33429                           pclath	equ	0xFFA
 33430                           tblptru	equ	0xFF8
 33431                           tblptrh	equ	0xFF7
 33432                           tblptrl	equ	0xFF6
 33433                           tablat	equ	0xFF5
 33434                           prodh	equ	0xFF4
 33435                           prodl	equ	0xFF3
 33436                           intcon	equ	0xFF2
 33437                           indf0	equ	0xFEF
 33438                           postinc0	equ	0xFEE
 33439                           plusw0	equ	0xFEB
 33440                           fsr0h	equ	0xFEA
 33441                           fsr0l	equ	0xFE9
 33442                           wreg	equ	0xFE8
 33443                           postinc1	equ	0xFE6
 33444                           postdec1	equ	0xFE5
 33445                           plusw1	equ	0xFE3
 33446                           fsr1h	equ	0xFE2
 33447                           fsr1l	equ	0xFE1
 33448                           indf2	equ	0xFDF
 33449                           postinc2	equ	0xFDE
 33450                           postdec2	equ	0xFDD
 33451                           plusw2	equ	0xFDB
 33452                           fsr2h	equ	0xFDA
 33453                           fsr2l	equ	0xFD9
 33454                           status	equ	0xFD8
 33455                           
 33456 ;; *************** function _LORAWAN_LinkCheckConfigure *****************
 33457 ;; Defined at:
 33458 ;;		line 755 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 33459 ;; Parameters:    Size  Location     Type
 33460 ;;  period          2   60[BANK0 ] unsigned int 
 33461 ;; Auto vars:     Size  Location     Type
 33462 ;;  iCtr            1   70[BANK0 ] unsigned char 
 33463 ;; Return value:  Size  Location     Type
 33464 ;;                  1    wreg      void 
 33465 ;; Registers used:
 33466 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 33467 ;; Tracked objects:
 33468 ;;		On entry : 3F/0
 33469 ;;		On exit  : 3D/0
 33470 ;;		Unchanged: 0/0
 33471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 33472 ;;      Params:         0       2       0       0       0       0       0       0       0
 33473 ;;      Locals:         0       5       0       0       0       0       0       0       0
 33474 ;;      Temps:          0       4       0       0       0       0       0       0       0
 33475 ;;      Totals:         0      11       0       0       0       0       0       0       0
 33476 ;;Total ram usage:       11 bytes
 33477 ;; Hardware stack levels used:    1
 33478 ;; Hardware stack levels required when called:   11
 33479 ;; This function calls:
 33480 ;;		_SwTimerSetTimeout
 33481 ;;		_SwTimerStart
 33482 ;;		_SwTimerStop
 33483 ;;		___lldiv
 33484 ;;		___lmul
 33485 ;; This function is called by:
 33486 ;;		_LORAWAN_Reset
 33487 ;; This function uses a non-reentrant model
 33488 ;;
 33489                           
 33490                           	psect	text177
 33491  003128                     __ptext177:
 33492                           	opt stack 0
 33493  003128                     _LORAWAN_LinkCheckConfigure:
 33494                           	opt stack 17
 33495                           
 33496                           ; BSR set to: 0
 33497                           ;lorawan.c: 757: uint8_t iCtr;
 33498                           ;lorawan.c: 759: loRa.periodForLinkCheck = period * 1000UL;
 33499                           
 33500                           ; BSR set to: 0
 33501                           ;incstack = 0
 33502  003128  C09C  F090         	movff	LORAWAN_LinkCheckConfigure@period,___lmul@multiplier
 33503  00312C  C09D  F091         	movff	LORAWAN_LinkCheckConfigure@period+1,___lmul@multiplier+1
 33504  003130  6B92               	clrf	(___lmul@multiplier+2)& (0+255),b
 33505  003132  6B93               	clrf	(___lmul@multiplier+3)& (0+255),b
 33506  003134  0EE8               	movlw	232
 33507  003136  6F94               	movwf	___lmul@multiplicand& (0+255),b
 33508  003138  0E03               	movlw	3
 33509  00313A  ECC5  F008         	call	PL438	;call to abstracted procedure
 33510  00313E  EC25  F02A         	call	___lmul	;wreg free
 33511  003142  C090  F2CC         	movff	?___lmul,_loRa+204
 33512  003146  C091  F2CD         	movff	?___lmul+1,_loRa+205
 33513  00314A  C092  F2CE         	movff	?___lmul+2,_loRa+206
 33514  00314E  C093  F2CF         	movff	?___lmul+3,_loRa+207
 33515                           
 33516                           ; BSR set to: 0
 33517                           ;lorawan.c: 761: if (period == 0)
 33518  003152  519C               	movf	LORAWAN_LinkCheckConfigure@period& (0+255),w,b
 33519  003154  119D               	iorwf	(LORAWAN_LinkCheckConfigure@period+1)& (0+255),w,b
 33520  003156  E11D               	bnz	l508
 33521                           
 33522                           ; BSR set to: 0
 33523                           ;lorawan.c: 762: {
 33524                           ;lorawan.c: 763: SwTimerStop(loRa.linkCheckTimerId);
 33525  003158  0102               	movlb	2	; () banked
 33526  00315A  51E7               	movf	(_loRa+231)& (0+255),w,b
 33527  00315C  EC68  F030         	call	_SwTimerStop
 33528                           
 33529                           ; BSR set to: 0
 33530                           ;lorawan.c: 764: loRa.macStatus.linkCheck = 0;
 33531  003160  0102               	movlb	2	; () banked
 33532  003162  9503               	bcf	(_loRa+3)& (0+255),2,b
 33533                           
 33534                           ; BSR set to: 2
 33535                           ;lorawan.c: 765: for(iCtr = 0; iCtr < loRa.crtMacCmdIndex; iCtr ++)
 33536  003164  0100               	movlb	0	; () banked
 33537  003166  6BA6               	clrf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),b
 33538  003168  D00E               	goto	l14758
 33539  00316A                     l14750:
 33540                           
 33541                           ; BSR set to: 0
 33542                           ;lorawan.c: 766: {
 33543                           ;lorawan.c: 767: if(loRa.macCommands[iCtr].receivedCid == LINK_CHECK_CID)
 33544  00316A  51A6               	movf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),w,b
 33545  00316C  ECA3  F010         	call	PL16	;call to abstracted procedure
 33546  003170  0E02               	movlw	2
 33547  003172  18DE               	xorwf	postinc2,w,c
 33548  003174  E106               	bnz	l14756
 33549                           
 33550                           ; BSR set to: 0
 33551                           ;lorawan.c: 768: {
 33552                           ;lorawan.c: 771: loRa.macCommands[iCtr].receivedCid = 0xFF;
 33553  003176  51A6               	movf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),w,b
 33554  003178  ECA3  F010         	call	PL16	;call to abstracted procedure
 33555  00317C  68DF               	setf	indf2,c
 33556                           
 33557                           ; BSR set to: 0
 33558                           ;lorawan.c: 772: loRa.crtMacCmdIndex --;
 33559  00317E  0102               	movlb	2	; () banked
 33560  003180  07A7               	decf	(_loRa+167)& (0+255),f,b
 33561  003182                     l14756:
 33562  003182  0100               	movlb	0	; () banked
 33563  003184  2BA6               	incf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),f,b
 33564  003186                     l14758:
 33565                           
 33566                           ; BSR set to: 0
 33567  003186  0102               	movlb	2	; () banked
 33568  003188  51A7               	movf	(_loRa+167)& (0+255),w,b
 33569  00318A  0100               	movlb	0	; () banked
 33570  00318C  5DA6               	subwf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),w,b
 33571  00318E  E3ED               	bnc	l14750
 33572  003190  0012               	return	
 33573  003192                     l508:
 33574                           
 33575                           ; BSR set to: 0
 33576                           ;lorawan.c: 776: else
 33577                           ;lorawan.c: 777: {
 33578                           ;lorawan.c: 778: loRa.macStatus.linkCheck = 1;
 33579  003192  0102               	movlb	2	; () banked
 33580  003194  8503               	bsf	(_loRa+3)& (0+255),2,b
 33581                           
 33582                           ;lorawan.c: 781: if (loRa.macStatus.networkJoined == 1)
 33583  003196  A902               	btfss	(_loRa+2)& (0+255),4,b
 33584  003198  0012               	return	
 33585                           
 33586                           ; BSR set to: 2
 33587                           ;lorawan.c: 782: {
 33588                           ;lorawan.c: 783: SwTimerSetTimeout(loRa.linkCheckTimerId, ((loRa.periodForLinkCheck) < 0
      +                          x000FFFFFUL ? ( (((uint32_t)(loRa.periodForLinkCheck)) << (12)) / 125UL ) : ( (((uint32_
      +                          t)(loRa.periodForLinkCheck)) / 125UL) << (12) ) ));
 33589  00319A  51CF               	movf	(_loRa+207)& (0+255),w,b
 33590  00319C  E103               	bnz	u17290
 33591  00319E  EC0B  F018         	call	PL244	;call to abstracted procedure
 33592  0031A2  E30C               	bnc	l14764
 33593  0031A4                     u17290:
 33594                           
 33595                           ; BSR set to: 2
 33596  0031A4  EC01  F018         	call	PL58	;call to abstracted procedure
 33597  0031A8  EC77  F011         	call	PL32	;call to abstracted procedure
 33598  0031AC  EC1B  F025         	call	___lldiv	;wreg free
 33599  0031B0  0E0C               	movlw	12
 33600  0031B2                     u17305:
 33601  0031B2  EC85  F011         	call	PL172	;call to abstracted procedure
 33602  0031B6  2EE8               	decfsz	wreg,f,c
 33603  0031B8  D7FC               	goto	u17305
 33604  0031BA  D01E               	goto	L24
 33605  0031BC                     l14764:
 33606                           
 33607                           ; BSR set to: 2
 33608  0031BC  C2CC  F09E         	movff	_loRa+204,??_LORAWAN_LinkCheckConfigure
 33609  0031C0  C2CD  F09F         	movff	_loRa+205,??_LORAWAN_LinkCheckConfigure+1
 33610  0031C4  C2CE  F0A0         	movff	_loRa+206,??_LORAWAN_LinkCheckConfigure+2
 33611  0031C8  C2CF  F0A1         	movff	_loRa+207,??_LORAWAN_LinkCheckConfigure+3
 33612  0031CC  0E0C               	movlw	12
 33613  0031CE                     u17315:
 33614  0031CE  90D8               	bcf	status,0,c
 33615  0031D0  0100               	movlb	0	; () banked
 33616  0031D2  379E               	rlcf	??_LORAWAN_LinkCheckConfigure& (0+255),f,b
 33617  0031D4  379F               	rlcf	(??_LORAWAN_LinkCheckConfigure+1)& (0+255),f,b
 33618  0031D6  37A0               	rlcf	(??_LORAWAN_LinkCheckConfigure+2)& (0+255),f,b
 33619  0031D8  37A1               	rlcf	(??_LORAWAN_LinkCheckConfigure+3)& (0+255),f,b
 33620  0031DA  2EE8               	decfsz	wreg,f,c
 33621  0031DC  D7F8               	goto	u17315
 33622  0031DE  C09E  F060         	movff	??_LORAWAN_LinkCheckConfigure,___lldiv@dividend
 33623  0031E2  C09F  F061         	movff	??_LORAWAN_LinkCheckConfigure+1,___lldiv@dividend+1
 33624  0031E6  C0A0  F062         	movff	??_LORAWAN_LinkCheckConfigure+2,___lldiv@dividend+2
 33625  0031EA  C0A1  F063         	movff	??_LORAWAN_LinkCheckConfigure+3,___lldiv@dividend+3
 33626  0031EE  0E7D               	movlw	125
 33627  0031F0  EC77  F011         	call	PL32	;call to abstracted procedure
 33628  0031F4  EC1B  F025         	call	___lldiv	;wreg free
 33629  0031F8                     L24:
 33630  0031F8  C060  F0A2         	movff	?___lldiv,_LORAWAN_LinkCheckConfigure$1034
 33631  0031FC  C061  F0A3         	movff	?___lldiv+1,_LORAWAN_LinkCheckConfigure$1034+1
 33632  003200  C062  F0A4         	movff	?___lldiv+2,_LORAWAN_LinkCheckConfigure$1034+2
 33633  003204  C063  F0A5         	movff	?___lldiv+3,_LORAWAN_LinkCheckConfigure$1034+3
 33634                           
 33635                           ; BSR set to: 0
 33636  003208  C0A2  F06D         	movff	_LORAWAN_LinkCheckConfigure$1034,SwTimerSetTimeout@timeout
 33637  00320C  C0A3  F06E         	movff	_LORAWAN_LinkCheckConfigure$1034+1,SwTimerSetTimeout@timeout+1
 33638  003210  C0A4  F06F         	movff	_LORAWAN_LinkCheckConfigure$1034+2,SwTimerSetTimeout@timeout+2
 33639  003214  C0A5  F070         	movff	_LORAWAN_LinkCheckConfigure$1034+3,SwTimerSetTimeout@timeout+3
 33640  003218  0102               	movlb	2	; () banked
 33641  00321A  51E7               	movf	(_loRa+231)& (0+255),w,b
 33642  00321C  EC11  F02C         	call	_SwTimerSetTimeout
 33643                           
 33644                           ; BSR set to: 0
 33645                           ;lorawan.c: 784: SwTimerStart(loRa.linkCheckTimerId);
 33646  003220  0102               	movlb	2	; () banked
 33647  003222  51E7               	movf	(_loRa+231)& (0+255),w,b
 33648  003224  EFC4  F025         	goto	_SwTimerStart
 33649  003228                     __end_of_LORAWAN_LinkCheckConfigure:
 33650                           	opt stack 0
 33651                           tosu	equ	0xFFF
 33652                           tosh	equ	0xFFE
 33653                           tosl	equ	0xFFD
 33654                           pclath	equ	0xFFA
 33655                           tblptru	equ	0xFF8
 33656                           tblptrh	equ	0xFF7
 33657                           tblptrl	equ	0xFF6
 33658                           tablat	equ	0xFF5
 33659                           prodh	equ	0xFF4
 33660                           prodl	equ	0xFF3
 33661                           intcon	equ	0xFF2
 33662                           indf0	equ	0xFEF
 33663                           postinc0	equ	0xFEE
 33664                           plusw0	equ	0xFEB
 33665                           fsr0h	equ	0xFEA
 33666                           fsr0l	equ	0xFE9
 33667                           wreg	equ	0xFE8
 33668                           postinc1	equ	0xFE6
 33669                           postdec1	equ	0xFE5
 33670                           plusw1	equ	0xFE3
 33671                           fsr1h	equ	0xFE2
 33672                           fsr1l	equ	0xFE1
 33673                           indf2	equ	0xFDF
 33674                           postinc2	equ	0xFDE
 33675                           postdec2	equ	0xFDD
 33676                           plusw2	equ	0xFDB
 33677                           fsr2h	equ	0xFDA
 33678                           fsr2l	equ	0xFD9
 33679                           status	equ	0xFD8
 33680                           
 33681 ;; *************** function ___lmul *****************
 33682 ;; Defined at:
 33683 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
 33684 ;; Parameters:    Size  Location     Type
 33685 ;;  multiplier      4   48[BANK0 ] unsigned long 
 33686 ;;  multiplicand    4   52[BANK0 ] unsigned long 
 33687 ;; Auto vars:     Size  Location     Type
 33688 ;;  product         4   56[BANK0 ] unsigned long 
 33689 ;; Return value:  Size  Location     Type
 33690 ;;                  4   48[BANK0 ] unsigned long 
 33691 ;; Registers used:
 33692 ;;		wreg, status,2, status,0
 33693 ;; Tracked objects:
 33694 ;;		On entry : 3F/0
 33695 ;;		On exit  : 3F/0
 33696 ;;		Unchanged: 0/0
 33697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 33698 ;;      Params:         0       8       0       0       0       0       0       0       0
 33699 ;;      Locals:         0       4       0       0       0       0       0       0       0
 33700 ;;      Temps:          0       0       0       0       0       0       0       0       0
 33701 ;;      Totals:         0      12       0       0       0       0       0       0       0
 33702 ;;Total ram usage:       12 bytes
 33703 ;; Hardware stack levels used:    1
 33704 ;; Hardware stack levels required when called:    7
 33705 ;; This function calls:
 33706 ;;		Nothing
 33707 ;; This function is called by:
 33708 ;;		_LORAWAN_LinkCheckConfigure
 33709 ;;		_LORAWAN_TxDone
 33710 ;;		_ExecuteNewChannel
 33711 ;;		_ExecuteRxParamSetupReq
 33712 ;;		_UpdateCfList
 33713 ;;		_RADIO_WriteConfiguration
 33714 ;;		_RADIO_TxDone
 33715 ;;		_RADIO_FSKPacketSent
 33716 ;;		_rand
 33717 ;; This function uses a non-reentrant model
 33718 ;;
 33719                           
 33720                           	psect	text178
 33721  00544A                     __ptext178:
 33722                           	opt stack 0
 33723  00544A                     ___lmul:
 33724                           	opt stack 17
 33725                           
 33726                           ; BSR set to: 0
 33727                           
 33728                           ;incstack = 0
 33729  00544A  6B98               	clrf	___lmul@product& (0+255),b
 33730  00544C  6B99               	clrf	(___lmul@product+1)& (0+255),b
 33731  00544E  6B9A               	clrf	(___lmul@product+2)& (0+255),b
 33732  005450  6B9B               	clrf	(___lmul@product+3)& (0+255),b
 33733  005452                     l2664:
 33734                           
 33735                           ; BSR set to: 0
 33736  005452  A190               	btfss	___lmul@multiplier& (0+255),0,b
 33737  005454  D008               	goto	l12066
 33738                           
 33739                           ; BSR set to: 0
 33740  005456  5194               	movf	___lmul@multiplicand& (0+255),w,b
 33741  005458  2798               	addwf	___lmul@product& (0+255),f,b
 33742  00545A  5195               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 33743  00545C  2399               	addwfc	(___lmul@product+1)& (0+255),f,b
 33744  00545E  5196               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 33745  005460  239A               	addwfc	(___lmul@product+2)& (0+255),f,b
 33746  005462  5197               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 33747  005464  239B               	addwfc	(___lmul@product+3)& (0+255),f,b
 33748  005466                     l12066:
 33749                           
 33750                           ; BSR set to: 0
 33751  005466  90D8               	bcf	status,0,c
 33752  005468  3794               	rlcf	___lmul@multiplicand& (0+255),f,b
 33753  00546A  3795               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 33754  00546C  3796               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 33755  00546E  3797               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 33756                           
 33757                           ; BSR set to: 0
 33758  005470  90D8               	bcf	status,0,c
 33759  005472  3393               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 33760  005474  3392               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 33761  005476  3391               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 33762  005478  3390               	rrcf	___lmul@multiplier& (0+255),f,b
 33763  00547A  5190               	movf	___lmul@multiplier& (0+255),w,b
 33764  00547C  1191               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 33765  00547E  1192               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 33766  005480  1193               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 33767  005482  E1E7               	bnz	l2664
 33768                           
 33769                           ; BSR set to: 0
 33770  005484  C098  F090         	movff	___lmul@product,?___lmul
 33771  005488  C099  F091         	movff	___lmul@product+1,?___lmul+1
 33772  00548C  C09A  F092         	movff	___lmul@product+2,?___lmul+2
 33773  005490  C09B  F093         	movff	___lmul@product+3,?___lmul+3
 33774                           
 33775                           ; BSR set to: 0
 33776  005494  0012               	return		;funcret
 33777  005496                     __end_of___lmul:
 33778                           	opt stack 0
 33779                           tosu	equ	0xFFF
 33780                           tosh	equ	0xFFE
 33781                           tosl	equ	0xFFD
 33782                           pclath	equ	0xFFA
 33783                           tblptru	equ	0xFF8
 33784                           tblptrh	equ	0xFF7
 33785                           tblptrl	equ	0xFF6
 33786                           tablat	equ	0xFF5
 33787                           prodh	equ	0xFF4
 33788                           prodl	equ	0xFF3
 33789                           intcon	equ	0xFF2
 33790                           indf0	equ	0xFEF
 33791                           postinc0	equ	0xFEE
 33792                           plusw0	equ	0xFEB
 33793                           fsr0h	equ	0xFEA
 33794                           fsr0l	equ	0xFE9
 33795                           wreg	equ	0xFE8
 33796                           postinc1	equ	0xFE6
 33797                           postdec1	equ	0xFE5
 33798                           plusw1	equ	0xFE3
 33799                           fsr1h	equ	0xFE2
 33800                           fsr1l	equ	0xFE1
 33801                           indf2	equ	0xFDF
 33802                           postinc2	equ	0xFDE
 33803                           postdec2	equ	0xFDD
 33804                           plusw2	equ	0xFDB
 33805                           fsr2h	equ	0xFDA
 33806                           fsr2l	equ	0xFD9
 33807                           status	equ	0xFD8
 33808                           
 33809 ;; *************** function ___lldiv *****************
 33810 ;; Defined at:
 33811 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
 33812 ;; Parameters:    Size  Location     Type
 33813 ;;  dividend        4    0[BANK0 ] unsigned long 
 33814 ;;  divisor         4    4[BANK0 ] unsigned long 
 33815 ;; Auto vars:     Size  Location     Type
 33816 ;;  quotient        4    8[BANK0 ] unsigned long 
 33817 ;;  counter         1   12[BANK0 ] unsigned char 
 33818 ;; Return value:  Size  Location     Type
 33819 ;;                  4    0[BANK0 ] unsigned long 
 33820 ;; Registers used:
 33821 ;;		wreg, status,2, status,0
 33822 ;; Tracked objects:
 33823 ;;		On entry : 3F/0
 33824 ;;		On exit  : 3F/0
 33825 ;;		Unchanged: 0/0
 33826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 33827 ;;      Params:         0       8       0       0       0       0       0       0       0
 33828 ;;      Locals:         0       5       0       0       0       0       0       0       0
 33829 ;;      Temps:          0       0       0       0       0       0       0       0       0
 33830 ;;      Totals:         0      13       0       0       0       0       0       0       0
 33831 ;;Total ram usage:       13 bytes
 33832 ;; Hardware stack levels used:    1
 33833 ;; Hardware stack levels required when called:    7
 33834 ;; This function calls:
 33835 ;;		Nothing
 33836 ;; This function is called by:
 33837 ;;		_LORAWAN_LinkCheckConfigure
 33838 ;;		_LORAWAN_LinkCheckCallback
 33839 ;;		_UpdateRetransmissionAckTimeoutState
 33840 ;;		_UpdateJoinSuccessState
 33841 ;;		_LORAWAN_TxDone
 33842 ;;		_LORAWAN_RxTimeout
 33843 ;;		_StartReTxTimer
 33844 ;;		_DutyCycleCallback
 33845 ;;		_RADIO_WriteFrequency
 33846 ;;		_RADIO_WriteFSKFrequencyDeviation
 33847 ;;		_RADIO_WriteFSKBitRate
 33848 ;;		_RADIO_Transmit
 33849 ;;		_RADIO_ReceiveStart
 33850 ;; This function uses a non-reentrant model
 33851 ;;
 33852                           
 33853                           	psect	text179
 33854  004A36                     __ptext179:
 33855                           	opt stack 0
 33856  004A36                     ___lldiv:
 33857                           	opt stack 20
 33858                           
 33859                           ; BSR set to: 0
 33860                           
 33861                           ; BSR set to: 0
 33862                           ;incstack = 0
 33863  004A36  6B68               	clrf	___lldiv@quotient& (0+255),b
 33864  004A38  6B69               	clrf	(___lldiv@quotient+1)& (0+255),b
 33865  004A3A  6B6A               	clrf	(___lldiv@quotient+2)& (0+255),b
 33866  004A3C  6B6B               	clrf	(___lldiv@quotient+3)& (0+255),b
 33867                           
 33868                           ; BSR set to: 0
 33869  004A3E  5164               	movf	___lldiv@divisor& (0+255),w,b
 33870  004A40  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 33871  004A42  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 33872  004A44  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 33873  004A46  E029               	bz	l3002
 33874                           
 33875                           ; BSR set to: 0
 33876  004A48  0E01               	movlw	1
 33877  004A4A  6F6C               	movwf	___lldiv@counter& (0+255),b
 33878  004A4C  D006               	goto	l12078
 33879  004A4E                     l12076:
 33880                           
 33881                           ; BSR set to: 0
 33882  004A4E  90D8               	bcf	status,0,c
 33883  004A50  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 33884  004A52  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 33885  004A54  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 33886  004A56  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 33887  004A58  2B6C               	incf	___lldiv@counter& (0+255),f,b
 33888  004A5A                     l12078:
 33889                           
 33890                           ; BSR set to: 0
 33891  004A5A  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 33892  004A5C  D7F8               	goto	l12076
 33893  004A5E                     l12080:
 33894                           
 33895                           ; BSR set to: 0
 33896  004A5E  90D8               	bcf	status,0,c
 33897  004A60  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 33898  004A62  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 33899  004A64  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 33900  004A66  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 33901                           
 33902                           ; BSR set to: 0
 33903  004A68  5164               	movf	___lldiv@divisor& (0+255),w,b
 33904  004A6A  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 33905  004A6C  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 33906  004A6E  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 33907  004A70  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 33908  004A72  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 33909  004A74  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 33910  004A76  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 33911  004A78  E309               	bnc	l12088
 33912                           
 33913                           ; BSR set to: 0
 33914  004A7A  5164               	movf	___lldiv@divisor& (0+255),w,b
 33915  004A7C  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 33916  004A7E  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 33917  004A80  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 33918  004A82  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 33919  004A84  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 33920  004A86  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 33921  004A88  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 33922                           
 33923                           ; BSR set to: 0
 33924  004A8A  8168               	bsf	___lldiv@quotient& (0+255),0,b
 33925  004A8C                     l12088:
 33926                           
 33927                           ; BSR set to: 0
 33928  004A8C  90D8               	bcf	status,0,c
 33929  004A8E  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 33930  004A90  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 33931  004A92  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 33932  004A94  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 33933                           
 33934                           ; BSR set to: 0
 33935  004A96  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 33936  004A98  D7E2               	goto	l12080
 33937  004A9A                     l3002:
 33938                           
 33939                           ; BSR set to: 0
 33940  004A9A  C068  F060         	movff	___lldiv@quotient,?___lldiv
 33941  004A9E  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 33942  004AA2  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 33943  004AA6  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 33944                           
 33945                           ; BSR set to: 0
 33946  004AAA  0012               	return		;funcret
 33947  004AAC                     __end_of___lldiv:
 33948                           	opt stack 0
 33949                           tosu	equ	0xFFF
 33950                           tosh	equ	0xFFE
 33951                           tosl	equ	0xFFD
 33952                           pclath	equ	0xFFA
 33953                           tblptru	equ	0xFF8
 33954                           tblptrh	equ	0xFF7
 33955                           tblptrl	equ	0xFF6
 33956                           tablat	equ	0xFF5
 33957                           prodh	equ	0xFF4
 33958                           prodl	equ	0xFF3
 33959                           intcon	equ	0xFF2
 33960                           indf0	equ	0xFEF
 33961                           postinc0	equ	0xFEE
 33962                           plusw0	equ	0xFEB
 33963                           fsr0h	equ	0xFEA
 33964                           fsr0l	equ	0xFE9
 33965                           wreg	equ	0xFE8
 33966                           postinc1	equ	0xFE6
 33967                           postdec1	equ	0xFE5
 33968                           plusw1	equ	0xFE3
 33969                           fsr1h	equ	0xFE2
 33970                           fsr1l	equ	0xFE1
 33971                           indf2	equ	0xFDF
 33972                           postinc2	equ	0xFDE
 33973                           postdec2	equ	0xFDD
 33974                           plusw2	equ	0xFDB
 33975                           fsr2h	equ	0xFDA
 33976                           fsr2l	equ	0xFD9
 33977                           status	equ	0xFD8
 33978                           
 33979 ;; *************** function _SwTimerStop *****************
 33980 ;; Defined at:
 33981 ;;		line 233 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 33982 ;; Parameters:    Size  Location     Type
 33983 ;;  timerId         1    wreg     unsigned char 
 33984 ;; Auto vars:     Size  Location     Type
 33985 ;;  timerId         1    0[BANK0 ] unsigned char 
 33986 ;; Return value:  Size  Location     Type
 33987 ;;                  1    wreg      void 
 33988 ;; Registers used:
 33989 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 33990 ;; Tracked objects:
 33991 ;;		On entry : 3C/1
 33992 ;;		On exit  : 3F/0
 33993 ;;		Unchanged: 0/0
 33994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 33995 ;;      Params:         0       0       0       0       0       0       0       0       0
 33996 ;;      Locals:         0       1       0       0       0       0       0       0       0
 33997 ;;      Temps:          0       0       0       0       0       0       0       0       0
 33998 ;;      Totals:         0       1       0       0       0       0       0       0       0
 33999 ;;Total ram usage:        1 bytes
 34000 ;; Hardware stack levels used:    1
 34001 ;; Hardware stack levels required when called:    7
 34002 ;; This function calls:
 34003 ;;		Nothing
 34004 ;; This function is called by:
 34005 ;;		_LORAWAN_LinkCheckConfigure
 34006 ;;		_LORAWAN_RxDone
 34007 ;;		_LORAWAN_TxDone
 34008 ;;		_StopAllSoftwareTimers
 34009 ;;		_RADIO_Init
 34010 ;;		_RADIO_Transmit
 34011 ;;		_RADIO_RxDone
 34012 ;;		_RADIO_FSKPayloadReady
 34013 ;;		_RADIO_RxTimeout
 34014 ;;		_RADIO_TxDone
 34015 ;;		_RADIO_FSKPacketSent
 34016 ;;		_RADIO_RxFSKTimeout
 34017 ;; This function uses a non-reentrant model
 34018 ;;
 34019                           
 34020                           	psect	text180
 34021  0060D0                     __ptext180:
 34022                           	opt stack 0
 34023  0060D0                     _SwTimerStop:
 34024                           	opt stack 20
 34025                           
 34026                           ; BSR set to: 0
 34027                           ;incstack = 0
 34028                           ;SwTimerStop@timerId stored from wreg
 34029  0060D0  0100               	movlb	0	; () banked
 34030  0060D2  6F60               	movwf	SwTimerStop@timerId& (0+255),b
 34031                           
 34032                           ;sw_timer.c: 235: (INTCONbits.GIE = 0);
 34033  0060D4  9EF2               	bcf	intcon,7,c	;volatile
 34034                           
 34035                           ;sw_timer.c: 236: swTimers[timerId].running = 0;
 34036  0060D6  5160               	movf	SwTimerStop@timerId& (0+255),w,b
 34037  0060D8  ECDB  F023         	call	PL40	;call to abstracted procedure
 34038  0060DC  6ADF               	clrf	indf2,c
 34039                           
 34040                           ; BSR set to: 0
 34041                           ;sw_timer.c: 237: (INTCONbits.GIE = 1);
 34042  0060DE  8EF2               	bsf	intcon,7,c	;volatile
 34043                           
 34044                           ; BSR set to: 0
 34045  0060E0  0C00               	retlw	0	;funcret
 34046  0060E2                     __end_of_SwTimerStop:
 34047                           	opt stack 0
 34048                           tosu	equ	0xFFF
 34049                           tosh	equ	0xFFE
 34050                           tosl	equ	0xFFD
 34051                           pclath	equ	0xFFA
 34052                           tblptru	equ	0xFF8
 34053                           tblptrh	equ	0xFF7
 34054                           tblptrl	equ	0xFF6
 34055                           tablat	equ	0xFF5
 34056                           prodh	equ	0xFF4
 34057                           prodl	equ	0xFF3
 34058                           intcon	equ	0xFF2
 34059                           indf0	equ	0xFEF
 34060                           postinc0	equ	0xFEE
 34061                           plusw0	equ	0xFEB
 34062                           fsr0h	equ	0xFEA
 34063                           fsr0l	equ	0xFE9
 34064                           wreg	equ	0xFE8
 34065                           postinc1	equ	0xFE6
 34066                           postdec1	equ	0xFE5
 34067                           plusw1	equ	0xFE3
 34068                           fsr1h	equ	0xFE2
 34069                           fsr1l	equ	0xFE1
 34070                           indf2	equ	0xFDF
 34071                           postinc2	equ	0xFDE
 34072                           postdec2	equ	0xFDD
 34073                           plusw2	equ	0xFDB
 34074                           fsr2h	equ	0xFDA
 34075                           fsr2l	equ	0xFD9
 34076                           status	equ	0xFD8
 34077                           
 34078 ;; *************** function _SwTimerStart *****************
 34079 ;; Defined at:
 34080 ;;		line 218 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 34081 ;; Parameters:    Size  Location     Type
 34082 ;;  timerId         1    wreg     unsigned char 
 34083 ;; Auto vars:     Size  Location     Type
 34084 ;;  timerId         1   47[BANK0 ] unsigned char 
 34085 ;;  ticksRemaini    4   43[BANK0 ] unsigned long 
 34086 ;; Return value:  Size  Location     Type
 34087 ;;                  1    wreg      void 
 34088 ;; Registers used:
 34089 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 34090 ;; Tracked objects:
 34091 ;;		On entry : 3C/2
 34092 ;;		On exit  : 3F/0
 34093 ;;		Unchanged: 0/0
 34094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 34095 ;;      Params:         0       0       0       0       0       0       0       0       0
 34096 ;;      Locals:         0       5       0       0       0       0       0       0       0
 34097 ;;      Temps:          0       4       0       0       0       0       0       0       0
 34098 ;;      Totals:         0       9       0       0       0       0       0       0       0
 34099 ;;Total ram usage:        9 bytes
 34100 ;; Hardware stack levels used:    1
 34101 ;; Hardware stack levels required when called:   10
 34102 ;; This function calls:
 34103 ;;		_SwTimersInterrupt
 34104 ;;		_TMR_OverrideRemaining
 34105 ;; This function is called by:
 34106 ;;		_LORAWAN_Join
 34107 ;;		_LORAWAN_LinkCheckConfigure
 34108 ;;		_LORAWAN_LinkCheckCallback
 34109 ;;		_UpdateRetransmissionAckTimeoutState
 34110 ;;		_UpdateJoinSuccessState
 34111 ;;		_LORAWAN_TxDone
 34112 ;;		_LORAWAN_RxTimeout
 34113 ;;		_StartReTxTimer
 34114 ;;		_DutyCycleCallback
 34115 ;;		_RADIO_Transmit
 34116 ;;		_RADIO_ReceiveStart
 34117 ;; This function uses a non-reentrant model
 34118 ;;
 34119                           
 34120                           	psect	text181
 34121  004B88                     __ptext181:
 34122                           	opt stack 0
 34123  004B88                     _SwTimerStart:
 34124                           	opt stack 17
 34125                           
 34126                           ; BSR set to: 0
 34127                           ;incstack = 0
 34128                           ;SwTimerStart@timerId stored from wreg
 34129  004B88  0100               	movlb	0	; () banked
 34130  004B8A  6F8F               	movwf	SwTimerStart@timerId& (0+255),b
 34131                           
 34132                           ;sw_timer.c: 220: uint32_t ticksRemaining;
 34133                           ;sw_timer.c: 222: (INTCONbits.GIE = 0);
 34134  004B8C  9EF2               	bcf	intcon,7,c	;volatile
 34135                           
 34136                           ;sw_timer.c: 223: ticksRemaining = SwTimersInterrupt();
 34137  004B8E  EC32  F01F         	call	_SwTimersInterrupt	;wreg free
 34138  004B92  C076  F08B         	movff	?_SwTimersInterrupt,SwTimerStart@ticksRemaining
 34139  004B96  C077  F08C         	movff	?_SwTimersInterrupt+1,SwTimerStart@ticksRemaining+1
 34140  004B9A  C078  F08D         	movff	?_SwTimersInterrupt+2,SwTimerStart@ticksRemaining+2
 34141  004B9E  C079  F08E         	movff	?_SwTimersInterrupt+3,SwTimerStart@ticksRemaining+3
 34142                           
 34143                           ; BSR set to: 0
 34144                           ;sw_timer.c: 224: if (swTimers[timerId].ticksRemaining < ticksRemaining)
 34145  004BA2  518F               	movf	SwTimerStart@timerId& (0+255),w,b
 34146  004BA4  EC84  F01F         	call	PL10	;call to abstracted procedure
 34147  004BA8  518B               	movf	SwTimerStart@ticksRemaining& (0+255),w,b
 34148  004BAA  5CDE               	subwf	postinc2,w,c
 34149  004BAC  518C               	movf	(SwTimerStart@ticksRemaining+1)& (0+255),w,b
 34150  004BAE  58DE               	subwfb	postinc2,w,c
 34151  004BB0  518D               	movf	(SwTimerStart@ticksRemaining+2)& (0+255),w,b
 34152  004BB2  58DE               	subwfb	postinc2,w,c
 34153  004BB4  518E               	movf	(SwTimerStart@ticksRemaining+3)& (0+255),w,b
 34154  004BB6  58DE               	subwfb	postinc2,w,c
 34155  004BB8  E20B               	bc	l12414
 34156                           
 34157                           ; BSR set to: 0
 34158                           ;sw_timer.c: 225: {
 34159                           ;sw_timer.c: 226: ticksRemaining = swTimers[timerId].ticksRemaining;
 34160  004BBA  518F               	movf	SwTimerStart@timerId& (0+255),w,b
 34161  004BBC  EC84  F01F         	call	PL10	;call to abstracted procedure
 34162  004BC0  CFDE F08B          	movff	postinc2,SwTimerStart@ticksRemaining
 34163  004BC4  CFDE F08C          	movff	postinc2,SwTimerStart@ticksRemaining+1
 34164  004BC8  CFDE F08D          	movff	postinc2,SwTimerStart@ticksRemaining+2
 34165  004BCC  CFDE F08E          	movff	postinc2,SwTimerStart@ticksRemaining+3
 34166  004BD0                     l12414:
 34167                           
 34168                           ; BSR set to: 0
 34169                           ;sw_timer.c: 227: }
 34170                           ;sw_timer.c: 228: TMR_OverrideRemaining(ticksRemaining);
 34171  004BD0  C08B  F068         	movff	SwTimerStart@ticksRemaining,TMR_OverrideRemaining@ticksRemaining
 34172  004BD4  C08C  F069         	movff	SwTimerStart@ticksRemaining+1,TMR_OverrideRemaining@ticksRemaining+1
 34173  004BD8  C08D  F06A         	movff	SwTimerStart@ticksRemaining+2,TMR_OverrideRemaining@ticksRemaining+2
 34174  004BDC  C08E  F06B         	movff	SwTimerStart@ticksRemaining+3,TMR_OverrideRemaining@ticksRemaining+3
 34175  004BE0  ECA4  F024         	call	_TMR_OverrideRemaining	;wreg free
 34176                           
 34177                           ; BSR set to: 0
 34178                           ;sw_timer.c: 229: swTimers[timerId].running = 1;
 34179  004BE4  518F               	movf	SwTimerStart@timerId& (0+255),w,b
 34180  004BE6  ECDB  F023         	call	PL40	;call to abstracted procedure
 34181  004BEA  0E01               	movlw	1
 34182  004BEC  6EDF               	movwf	indf2,c
 34183                           
 34184                           ; BSR set to: 0
 34185                           ;sw_timer.c: 230: (INTCONbits.GIE = 1);
 34186  004BEE  8EF2               	bsf	intcon,7,c	;volatile
 34187                           
 34188                           ; BSR set to: 0
 34189  004BF0  0C01               	retlw	1	;funcret
 34190  004BF2                     __end_of_SwTimerStart:
 34191                           	opt stack 0
 34192                           tosu	equ	0xFFF
 34193                           tosh	equ	0xFFE
 34194                           tosl	equ	0xFFD
 34195                           pclath	equ	0xFFA
 34196                           tblptru	equ	0xFF8
 34197                           tblptrh	equ	0xFF7
 34198                           tblptrl	equ	0xFF6
 34199                           tablat	equ	0xFF5
 34200                           prodh	equ	0xFF4
 34201                           prodl	equ	0xFF3
 34202                           intcon	equ	0xFF2
 34203                           indf0	equ	0xFEF
 34204                           postinc0	equ	0xFEE
 34205                           plusw0	equ	0xFEB
 34206                           fsr0h	equ	0xFEA
 34207                           fsr0l	equ	0xFE9
 34208                           wreg	equ	0xFE8
 34209                           postinc1	equ	0xFE6
 34210                           postdec1	equ	0xFE5
 34211                           plusw1	equ	0xFE3
 34212                           fsr1h	equ	0xFE2
 34213                           fsr1l	equ	0xFE1
 34214                           indf2	equ	0xFDF
 34215                           postinc2	equ	0xFDE
 34216                           postdec2	equ	0xFDD
 34217                           plusw2	equ	0xFDB
 34218                           fsr2h	equ	0xFDA
 34219                           fsr2l	equ	0xFD9
 34220                           status	equ	0xFD8
 34221                           
 34222 ;; *************** function _TMR_OverrideRemaining *****************
 34223 ;; Defined at:
 34224 ;;		line 65 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 34225 ;; Parameters:    Size  Location     Type
 34226 ;;  ticksRemaini    4    8[BANK0 ] unsigned long 
 34227 ;; Auto vars:     Size  Location     Type
 34228 ;;  oldReloadVal    2   16[BANK0 ] unsigned int 
 34229 ;;  tmrVal          2   14[BANK0 ] unsigned int 
 34230 ;; Return value:  Size  Location     Type
 34231 ;;                  1    wreg      void 
 34232 ;; Registers used:
 34233 ;;		wreg, status,2, status,0, cstack
 34234 ;; Tracked objects:
 34235 ;;		On entry : 3F/0
 34236 ;;		On exit  : 3F/0
 34237 ;;		Unchanged: 0/0
 34238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 34239 ;;      Params:         0       4       0       0       0       0       0       0       0
 34240 ;;      Locals:         0       4       0       0       0       0       0       0       0
 34241 ;;      Temps:          0       2       0       0       0       0       0       0       0
 34242 ;;      Totals:         0      10       0       0       0       0       0       0       0
 34243 ;;Total ram usage:       10 bytes
 34244 ;; Hardware stack levels used:    1
 34245 ;; Hardware stack levels required when called:    9
 34246 ;; This function calls:
 34247 ;;		_TMR_SwapTimer
 34248 ;; This function is called by:
 34249 ;;		_SwTimerStart
 34250 ;; This function uses a non-reentrant model
 34251 ;;
 34252                           
 34253                           	psect	text182
 34254  004948                     __ptext182:
 34255                           	opt stack 0
 34256  004948                     _TMR_OverrideRemaining:
 34257                           	opt stack 17
 34258                           
 34259                           ; BSR set to: 0
 34260                           ;sw_timer.c: 67: uint16_t tmrVal;
 34261                           ;sw_timer.c: 68: uint16_t oldReloadVal;
 34262                           ;sw_timer.c: 71: if (ticksToScheduledInterrupt > 10)
 34263                           
 34264                           ; BSR set to: 0
 34265                           ;incstack = 0
 34266  004948  505B               	movf	_ticksToScheduledInterrupt+3,w,c	;volatile
 34267  00494A  105A               	iorwf	_ticksToScheduledInterrupt+2,w,c	;volatile
 34268  00494C  1059               	iorwf	_ticksToScheduledInterrupt+1,w,c	;volatile
 34269  00494E  E104               	bnz	u13270
 34270  004950  0E0B               	movlw	11
 34271  004952  5C58               	subwf	_ticksToScheduledInterrupt,w,c	;volatile
 34272  004954  A0D8               	btfss	status,0,c
 34273  004956  0012               	return	
 34274  004958                     u13270:
 34275                           
 34276                           ; BSR set to: 0
 34277                           ;sw_timer.c: 72: {
 34278                           ;sw_timer.c: 73: if (ticksRemaining < ticksToScheduledInterrupt)
 34279  004958  5058               	movf	_ticksToScheduledInterrupt,w,c	;volatile
 34280  00495A  5D68               	subwf	TMR_OverrideRemaining@ticksRemaining& (0+255),w,b
 34281  00495C  5059               	movf	_ticksToScheduledInterrupt+1,w,c	;volatile
 34282  00495E  5969               	subwfb	(TMR_OverrideRemaining@ticksRemaining+1)& (0+255),w,b
 34283  004960  505A               	movf	_ticksToScheduledInterrupt+2,w,c	;volatile
 34284  004962  596A               	subwfb	(TMR_OverrideRemaining@ticksRemaining+2)& (0+255),w,b
 34285  004964  505B               	movf	_ticksToScheduledInterrupt+3,w,c	;volatile
 34286  004966  596B               	subwfb	(TMR_OverrideRemaining@ticksRemaining+3)& (0+255),w,b
 34287  004968  B0D8               	btfsc	status,0,c
 34288  00496A  0012               	return	
 34289                           
 34290                           ; BSR set to: 0
 34291                           ;sw_timer.c: 74: {
 34292                           ;sw_timer.c: 75: ticksToScheduledInterrupt = ticksRemaining;
 34293  00496C  C068  F058         	movff	TMR_OverrideRemaining@ticksRemaining,_ticksToScheduledInterrupt	;volatile
 34294  004970  C069  F059         	movff	TMR_OverrideRemaining@ticksRemaining+1,_ticksToScheduledInterrupt+1	;volatile
 34295  004974  C06A  F05A         	movff	TMR_OverrideRemaining@ticksRemaining+2,_ticksToScheduledInterrupt+2	;volatile
 34296  004978  C06B  F05B         	movff	TMR_OverrideRemaining@ticksRemaining+3,_ticksToScheduledInterrupt+3	;volatile
 34297                           
 34298                           ;sw_timer.c: 76: oldReloadVal = reloadVal;
 34299  00497C  C0FD  F070         	movff	_reloadVal,TMR_OverrideRemaining@oldReloadVal	;volatile
 34300  004980  C0FE  F071         	movff	_reloadVal+1,TMR_OverrideRemaining@oldReloadVal+1	;volatile
 34301                           
 34302                           ; BSR set to: 0
 34303                           ;sw_timer.c: 78: reloadVal = ((uint32_t)0x10000) - ticksRemaining;
 34304  004984  5168               	movf	TMR_OverrideRemaining@ticksRemaining& (0+255),w,b
 34305  004986  0800               	sublw	0
 34306  004988  6FFD               	movwf	_reloadVal& (0+255),b	;volatile
 34307  00498A  5169               	movf	(TMR_OverrideRemaining@ticksRemaining+1)& (0+255),w,b
 34308  00498C  EC5E  F029         	call	PL424	;call to abstracted procedure
 34309                           
 34310                           ; BSR set to: 0
 34311                           ;sw_timer.c: 79: tmrVal = TMR_SwapTimer(reloadVal);
 34312  004990  C0FD  F066         	movff	_reloadVal,TMR_SwapTimer@timerVal	;volatile
 34313  004994  C0FE  F067         	movff	_reloadVal+1,TMR_SwapTimer@timerVal+1	;volatile
 34314  004998  EC63  F02C         	call	_TMR_SwapTimer	;wreg free
 34315  00499C  C066  F06E         	movff	?_TMR_SwapTimer,TMR_OverrideRemaining@tmrVal
 34316  0049A0  C067  F06F         	movff	?_TMR_SwapTimer+1,TMR_OverrideRemaining@tmrVal+1
 34317                           
 34318                           ; BSR set to: 0
 34319                           ;sw_timer.c: 80: ticksAdded += tmrVal - oldReloadVal;
 34320  0049A4  5170               	movf	TMR_OverrideRemaining@oldReloadVal& (0+255),w,b
 34321  0049A6  5D6E               	subwf	TMR_OverrideRemaining@tmrVal& (0+255),w,b
 34322  0049A8  6F6C               	movwf	??_TMR_OverrideRemaining& (0+255),b
 34323  0049AA  5171               	movf	(TMR_OverrideRemaining@oldReloadVal+1)& (0+255),w,b
 34324  0049AC  596F               	subwfb	(TMR_OverrideRemaining@tmrVal+1)& (0+255),w,b
 34325  0049AE  6F6D               	movwf	(??_TMR_OverrideRemaining+1)& (0+255),b
 34326  0049B0  516C               	movf	??_TMR_OverrideRemaining& (0+255),w,b
 34327  0049B2  2638               	addwf	_ticksAdded,f,c	;volatile
 34328  0049B4  516D               	movf	(??_TMR_OverrideRemaining+1)& (0+255),w,b
 34329  0049B6  2239               	addwfc	_ticksAdded+1,f,c	;volatile
 34330  0049B8  0E00               	movlw	0
 34331  0049BA  223A               	addwfc	_ticksAdded+2,f,c	;volatile
 34332  0049BC  223B               	addwfc	_ticksAdded+3,f,c	;volatile
 34333                           
 34334                           ; BSR set to: 0
 34335  0049BE  0C00               	retlw	0	;funcret
 34336  0049C0                     __end_of_TMR_OverrideRemaining:
 34337                           	opt stack 0
 34338                           tosu	equ	0xFFF
 34339                           tosh	equ	0xFFE
 34340                           tosl	equ	0xFFD
 34341                           pclath	equ	0xFFA
 34342                           tblptru	equ	0xFF8
 34343                           tblptrh	equ	0xFF7
 34344                           tblptrl	equ	0xFF6
 34345                           tablat	equ	0xFF5
 34346                           prodh	equ	0xFF4
 34347                           prodl	equ	0xFF3
 34348                           intcon	equ	0xFF2
 34349                           indf0	equ	0xFEF
 34350                           postinc0	equ	0xFEE
 34351                           plusw0	equ	0xFEB
 34352                           fsr0h	equ	0xFEA
 34353                           fsr0l	equ	0xFE9
 34354                           wreg	equ	0xFE8
 34355                           postinc1	equ	0xFE6
 34356                           postdec1	equ	0xFE5
 34357                           plusw1	equ	0xFE3
 34358                           fsr1h	equ	0xFE2
 34359                           fsr1l	equ	0xFE1
 34360                           indf2	equ	0xFDF
 34361                           postinc2	equ	0xFDE
 34362                           postdec2	equ	0xFDD
 34363                           plusw2	equ	0xFDB
 34364                           fsr2h	equ	0xFDA
 34365                           fsr2l	equ	0xFD9
 34366                           status	equ	0xFD8
 34367                           
 34368 ;; *************** function _TMR_SwapTimer *****************
 34369 ;; Defined at:
 34370 ;;		line 112 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 34371 ;; Parameters:    Size  Location     Type
 34372 ;;  timerVal        2    6[BANK0 ] unsigned int 
 34373 ;; Auto vars:     Size  Location     Type
 34374 ;;		None
 34375 ;; Return value:  Size  Location     Type
 34376 ;;                  2    6[BANK0 ] unsigned int 
 34377 ;; Registers used:
 34378 ;;		wreg, status,2, status,0, cstack
 34379 ;; Tracked objects:
 34380 ;;		On entry : 3F/0
 34381 ;;		On exit  : 3F/0
 34382 ;;		Unchanged: 0/0
 34383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 34384 ;;      Params:         0       2       0       0       0       0       0       0       0
 34385 ;;      Locals:         0       0       0       0       0       0       0       0       0
 34386 ;;      Temps:          0       0       0       0       0       0       0       0       0
 34387 ;;      Totals:         0       2       0       0       0       0       0       0       0
 34388 ;;Total ram usage:        2 bytes
 34389 ;; Hardware stack levels used:    1
 34390 ;; Hardware stack levels required when called:    8
 34391 ;; This function calls:
 34392 ;;		_TMR1_ReadTimer
 34393 ;;		_TMR1_WriteTimer
 34394 ;; This function is called by:
 34395 ;;		_TMR_OverrideRemaining
 34396 ;; This function uses a non-reentrant model
 34397 ;;
 34398                           
 34399                           	psect	text183
 34400  0058C6                     __ptext183:
 34401                           	opt stack 0
 34402  0058C6                     _TMR_SwapTimer:
 34403                           	opt stack 17
 34404                           
 34405                           ; BSR set to: 0
 34406                           ;sw_timer.c: 114: static uint16_t oldVal;
 34407                           ;sw_timer.c: 115: static uint16_t retVal;
 34408                           ;sw_timer.c: 117: oldVal = TMR1_ReadTimer();
 34409                           
 34410                           ; BSR set to: 0
 34411                           ;incstack = 0
 34412  0058C6  EC02  F02F         	call	_TMR1_ReadTimer	;wreg free
 34413  0058CA  C060  F040         	movff	?_TMR1_ReadTimer,TMR_SwapTimer@oldVal
 34414  0058CE  C061  F041         	movff	?_TMR1_ReadTimer+1,TMR_SwapTimer@oldVal+1
 34415  0058D2                     l12030:
 34416                           
 34417                           ; BSR set to: 0
 34418  0058D2  EC02  F02F         	call	_TMR1_ReadTimer	;wreg free
 34419  0058D6  5040               	movf	TMR_SwapTimer@oldVal,w,c
 34420  0058D8  1960               	xorwf	?_TMR1_ReadTimer& (0+255),w,b
 34421  0058DA  E103               	bnz	u12760
 34422  0058DC  5041               	movf	TMR_SwapTimer@oldVal+1,w,c
 34423  0058DE  1961               	xorwf	(?_TMR1_ReadTimer+1)& (0+255),w,b
 34424  0058E0  E0F8               	bz	l12030
 34425  0058E2                     u12760:
 34426                           
 34427                           ; BSR set to: 0
 34428                           ;sw_timer.c: 125: TMR1_WriteTimer(timerVal);
 34429  0058E2  C066  F060         	movff	TMR_SwapTimer@timerVal,TMR1_WriteTimer@timerVal
 34430  0058E6  C067  F061         	movff	TMR_SwapTimer@timerVal+1,TMR1_WriteTimer@timerVal+1
 34431  0058EA  ECEB  F02F         	call	_TMR1_WriteTimer	;wreg free
 34432                           
 34433                           ; BSR set to: 0
 34434                           ;sw_timer.c: 128: oldVal++;
 34435                           
 34436                           ; BSR set to: 0
 34437                           ;sw_timer.c: 130: retVal = oldVal;
 34438  0058EE  EC39  F02B         	call	PL296	;call to abstracted procedure
 34439                           
 34440                           ; BSR set to: 0
 34441                           ;sw_timer.c: 132: return retVal;
 34442  0058F2  C03E  F066         	movff	TMR_SwapTimer@retVal,?_TMR_SwapTimer
 34443  0058F6  C03F  F067         	movff	TMR_SwapTimer@retVal+1,?_TMR_SwapTimer+1
 34444                           
 34445                           ; BSR set to: 0
 34446  0058FA  0012               	return		;funcret
 34447  0058FC                     __end_of_TMR_SwapTimer:
 34448                           	opt stack 0
 34449                           tosu	equ	0xFFF
 34450                           tosh	equ	0xFFE
 34451                           tosl	equ	0xFFD
 34452                           pclath	equ	0xFFA
 34453                           tblptru	equ	0xFF8
 34454                           tblptrh	equ	0xFF7
 34455                           tblptrl	equ	0xFF6
 34456                           tablat	equ	0xFF5
 34457                           prodh	equ	0xFF4
 34458                           prodl	equ	0xFF3
 34459                           intcon	equ	0xFF2
 34460                           indf0	equ	0xFEF
 34461                           postinc0	equ	0xFEE
 34462                           plusw0	equ	0xFEB
 34463                           fsr0h	equ	0xFEA
 34464                           fsr0l	equ	0xFE9
 34465                           wreg	equ	0xFE8
 34466                           postinc1	equ	0xFE6
 34467                           postdec1	equ	0xFE5
 34468                           plusw1	equ	0xFE3
 34469                           fsr1h	equ	0xFE2
 34470                           fsr1l	equ	0xFE1
 34471                           indf2	equ	0xFDF
 34472                           postinc2	equ	0xFDE
 34473                           postdec2	equ	0xFDD
 34474                           plusw2	equ	0xFDB
 34475                           fsr2h	equ	0xFDA
 34476                           fsr2l	equ	0xFD9
 34477                           status	equ	0xFD8
 34478                           
 34479 ;; *************** function _TMR1_WriteTimer *****************
 34480 ;; Defined at:
 34481 ;;		line 122 in file "mcc_generated_files/tmr1.c"
 34482 ;; Parameters:    Size  Location     Type
 34483 ;;  timerVal        2    0[BANK0 ] unsigned int 
 34484 ;; Auto vars:     Size  Location     Type
 34485 ;;		None
 34486 ;; Return value:  Size  Location     Type
 34487 ;;                  1    wreg      void 
 34488 ;; Registers used:
 34489 ;;		None
 34490 ;; Tracked objects:
 34491 ;;		On entry : 3F/0
 34492 ;;		On exit  : 3F/0
 34493 ;;		Unchanged: 3F/0
 34494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 34495 ;;      Params:         0       2       0       0       0       0       0       0       0
 34496 ;;      Locals:         0       0       0       0       0       0       0       0       0
 34497 ;;      Temps:          0       0       0       0       0       0       0       0       0
 34498 ;;      Totals:         0       2       0       0       0       0       0       0       0
 34499 ;;Total ram usage:        2 bytes
 34500 ;; Hardware stack levels used:    1
 34501 ;; Hardware stack levels required when called:    7
 34502 ;; This function calls:
 34503 ;;		Nothing
 34504 ;; This function is called by:
 34505 ;;		_TMR_SwapTimer
 34506 ;; This function uses a non-reentrant model
 34507 ;;
 34508                           
 34509                           	psect	text184
 34510  005FD6                     __ptext184:
 34511                           	opt stack 0
 34512  005FD6                     _TMR1_WriteTimer:
 34513                           	opt stack 17
 34514                           
 34515                           ; BSR set to: 0
 34516                           ;tmr1.c: 124: if (T1CONbits.nT1SYNC == 1)
 34517                           
 34518                           ; BSR set to: 0
 34519                           ;incstack = 0
 34520  005FD6  A4CF               	btfss	4047,2,c	;volatile
 34521  005FD8  D005               	goto	PL382
 34522                           
 34523                           ; BSR set to: 0
 34524                           ;tmr1.c: 125: {
 34525                           ;tmr1.c: 127: T1CONbits.TMR1ON = 0;
 34526  005FDA  90CF               	bcf	4047,0,c	;volatile
 34527                           
 34528                           ;tmr1.c: 130: TMR1H = (timerVal >> 8);
 34529                           
 34530                           ;tmr1.c: 131: TMR1L = timerVal;
 34531  005FDC  D803               	call	PL382	;call to abstracted procedure
 34532                           
 34533                           ;tmr1.c: 134: T1CONbits.TMR1ON =1;
 34534  005FDE  80CF               	bsf	4047,0,c	;volatile
 34535                           
 34536                           ;tmr1.c: 135: }
 34537  005FE0  0012               	return	
 34538  005FE2                     l2297:
 34539                           
 34540                           ; BSR set to: 0
 34541                           ;tmr1.c: 136: else
 34542                           ;tmr1.c: 137: {
 34543                           ;tmr1.c: 139: TMR1H = (timerVal >> 8);
 34544                           
 34545                           ;tmr1.c: 140: TMR1L = timerVal;
 34546  005FE2  D000               	goto	PL382	;call to abstracted procedure
 34547  005FE4                     __end_of_TMR1_WriteTimer:
 34548                           	opt stack 0
 34549  005FE4                     PL382:
 34550                           	opt stack 17
 34551  005FE4  C061  FFCE         	movff	TMR1_WriteTimer@timerVal+1,4046	;volatile
 34552  005FE8  C060  FFCD         	movff	TMR1_WriteTimer@timerVal,4045	;volatile
 34553  005FEC  0012               	return	
 34554  005FEE                     __end_ofPL382:
 34555                           	opt stack 0
 34556                           tosu	equ	0xFFF
 34557                           tosh	equ	0xFFE
 34558                           tosl	equ	0xFFD
 34559                           pclath	equ	0xFFA
 34560                           tblptru	equ	0xFF8
 34561                           tblptrh	equ	0xFF7
 34562                           tblptrl	equ	0xFF6
 34563                           tablat	equ	0xFF5
 34564                           prodh	equ	0xFF4
 34565                           prodl	equ	0xFF3
 34566                           intcon	equ	0xFF2
 34567                           indf0	equ	0xFEF
 34568                           postinc0	equ	0xFEE
 34569                           plusw0	equ	0xFEB
 34570                           fsr0h	equ	0xFEA
 34571                           fsr0l	equ	0xFE9
 34572                           wreg	equ	0xFE8
 34573                           postinc1	equ	0xFE6
 34574                           postdec1	equ	0xFE5
 34575                           plusw1	equ	0xFE3
 34576                           fsr1h	equ	0xFE2
 34577                           fsr1l	equ	0xFE1
 34578                           indf2	equ	0xFDF
 34579                           postinc2	equ	0xFDE
 34580                           postdec2	equ	0xFDD
 34581                           plusw2	equ	0xFDB
 34582                           fsr2h	equ	0xFDA
 34583                           fsr2l	equ	0xFD9
 34584                           status	equ	0xFD8
 34585                           
 34586 ;; *************** function _SwTimersInterrupt *****************
 34587 ;; Defined at:
 34588 ;;		line 287 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 34589 ;; Parameters:    Size  Location     Type
 34590 ;;		None
 34591 ;; Auto vars:     Size  Location     Type
 34592 ;;  ticksToNextT    4   34[BANK0 ] unsigned long 
 34593 ;;  timeElapsed     4   30[BANK0 ] unsigned long 
 34594 ;;  i               1   38[BANK0 ] unsigned char 
 34595 ;; Return value:  Size  Location     Type
 34596 ;;                  4   22[BANK0 ] unsigned long 
 34597 ;; Registers used:
 34598 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 34599 ;; Tracked objects:
 34600 ;;		On entry : 0/0
 34601 ;;		On exit  : 3F/0
 34602 ;;		Unchanged: 0/0
 34603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 34604 ;;      Params:         0       4       0       0       0       0       0       0       0
 34605 ;;      Locals:         0       9       0       0       0       0       0       0       0
 34606 ;;      Temps:          0       4       0       0       0       0       0       0       0
 34607 ;;      Totals:         0      17       0       0       0       0       0       0       0
 34608 ;;Total ram usage:       17 bytes
 34609 ;; Hardware stack levels used:    1
 34610 ;; Hardware stack levels required when called:    9
 34611 ;; This function calls:
 34612 ;;		_TMR_GetDeltaTime
 34613 ;; This function is called by:
 34614 ;;		_SwTimerReadValue
 34615 ;;		_SwTimerStart
 34616 ;; This function uses a non-reentrant model
 34617 ;;
 34618                           
 34619                           	psect	text185
 34620  003E64                     __ptext185:
 34621                           	opt stack 0
 34622  003E64                     _SwTimersInterrupt:
 34623                           	opt stack 17
 34624                           
 34625                           ;sw_timer.c: 289: uint8_t i;
 34626                           ;sw_timer.c: 290: uint32_t timeElapsed;
 34627                           ;sw_timer.c: 291: uint32_t ticksToNextTimerEvent = 0xFFFFFFFF;
 34628                           
 34629                           ; BSR set to: 0
 34630                           ;incstack = 0
 34631  003E64  0100               	movlb	0	; () banked
 34632  003E66  6982               	setf	SwTimersInterrupt@ticksToNextTimerEvent& (0+255),b
 34633  003E68  6983               	setf	(SwTimersInterrupt@ticksToNextTimerEvent+1)& (0+255),b
 34634  003E6A  6984               	setf	(SwTimersInterrupt@ticksToNextTimerEvent+2)& (0+255),b
 34635  003E6C  6985               	setf	(SwTimersInterrupt@ticksToNextTimerEvent+3)& (0+255),b
 34636                           
 34637                           ; BSR set to: 0
 34638                           ;sw_timer.c: 295: timeElapsed = TMR_GetDeltaTime();
 34639  003E6E  ECE6  F020         	call	_TMR_GetDeltaTime	;wreg free
 34640  003E72  C066  F07E         	movff	?_TMR_GetDeltaTime,SwTimersInterrupt@timeElapsed
 34641  003E76  C067  F07F         	movff	?_TMR_GetDeltaTime+1,SwTimersInterrupt@timeElapsed+1
 34642  003E7A  C068  F080         	movff	?_TMR_GetDeltaTime+2,SwTimersInterrupt@timeElapsed+2
 34643  003E7E  C069  F081         	movff	?_TMR_GetDeltaTime+3,SwTimersInterrupt@timeElapsed+3
 34644                           
 34645                           ; BSR set to: 0
 34646                           ;sw_timer.c: 297: for (i = 0; i < allocatedTimers; i++)
 34647  003E82  6B86               	clrf	SwTimersInterrupt@i& (0+255),b
 34648  003E84  D035               	goto	l12382
 34649  003E86                     l12370:
 34650                           
 34651                           ; BSR set to: 0
 34652                           ;sw_timer.c: 298: {
 34653                           ;sw_timer.c: 301: if (swTimers[i].running == 1)
 34654  003E86  5186               	movf	SwTimersInterrupt@i& (0+255),w,b
 34655  003E88  ECDB  F023         	call	PL40	;call to abstracted procedure
 34656  003E8C  04DE               	decf	postinc2,w,c
 34657  003E8E  E12F               	bnz	l12380
 34658                           
 34659                           ; BSR set to: 0
 34660                           ;sw_timer.c: 302: {
 34661                           ;sw_timer.c: 303: if (swTimers[i].ticksRemaining <= timeElapsed)
 34662  003E90  5186               	movf	SwTimersInterrupt@i& (0+255),w,b
 34663  003E92  D83A               	call	PL10	;call to abstracted procedure
 34664  003E94  50DE               	movf	postinc2,w,c
 34665  003E96  5D7E               	subwf	SwTimersInterrupt@timeElapsed& (0+255),w,b
 34666  003E98  50DE               	movf	postinc2,w,c
 34667  003E9A  597F               	subwfb	(SwTimersInterrupt@timeElapsed+1)& (0+255),w,b
 34668  003E9C  50DE               	movf	postinc2,w,c
 34669  003E9E  5980               	subwfb	(SwTimersInterrupt@timeElapsed+2)& (0+255),w,b
 34670  003EA0  50DE               	movf	postinc2,w,c
 34671  003EA2  5981               	subwfb	(SwTimersInterrupt@timeElapsed+3)& (0+255),w,b
 34672  003EA4  E305               	bnc	l12376
 34673                           
 34674                           ; BSR set to: 0
 34675                           ;sw_timer.c: 304: {
 34676                           ;sw_timer.c: 305: swTimers[i].ticksRemaining = 0;
 34677  003EA6  5186               	movf	SwTimersInterrupt@i& (0+255),w,b
 34678  003EA8  D82F               	call	PL10	;call to abstracted procedure
 34679  003EAA  ECA2  F01D         	call	PL182	;call to abstracted procedure
 34680                           
 34681                           ;sw_timer.c: 306: }
 34682  003EAE  D01F               	goto	l12380
 34683  003EB0                     l12376:
 34684                           
 34685                           ; BSR set to: 0
 34686                           ;sw_timer.c: 307: else
 34687                           ;sw_timer.c: 308: {
 34688                           ;sw_timer.c: 309: swTimers[i].ticksRemaining -= timeElapsed;
 34689  003EB0  5186               	movf	SwTimersInterrupt@i& (0+255),w,b
 34690  003EB2  D82A               	call	PL10	;call to abstracted procedure
 34691  003EB4  517E               	movf	SwTimersInterrupt@timeElapsed& (0+255),w,b
 34692  003EB6  5EDE               	subwf	postinc2,f,c
 34693  003EB8  517F               	movf	(SwTimersInterrupt@timeElapsed+1)& (0+255),w,b
 34694  003EBA  5ADE               	subwfb	postinc2,f,c
 34695  003EBC  5180               	movf	(SwTimersInterrupt@timeElapsed+2)& (0+255),w,b
 34696  003EBE  5ADE               	subwfb	postinc2,f,c
 34697  003EC0  5181               	movf	(SwTimersInterrupt@timeElapsed+3)& (0+255),w,b
 34698  003EC2  5ADE               	subwfb	postinc2,f,c
 34699                           
 34700                           ;sw_timer.c: 312: if (swTimers[i].ticksRemaining < ticksToNextTimerEvent)
 34701  003EC4  5186               	movf	SwTimersInterrupt@i& (0+255),w,b
 34702  003EC6  D820               	call	PL10	;call to abstracted procedure
 34703  003EC8  5182               	movf	SwTimersInterrupt@ticksToNextTimerEvent& (0+255),w,b
 34704  003ECA  5CDE               	subwf	postinc2,w,c
 34705  003ECC  5183               	movf	(SwTimersInterrupt@ticksToNextTimerEvent+1)& (0+255),w,b
 34706  003ECE  58DE               	subwfb	postinc2,w,c
 34707  003ED0  5184               	movf	(SwTimersInterrupt@ticksToNextTimerEvent+2)& (0+255),w,b
 34708  003ED2  58DE               	subwfb	postinc2,w,c
 34709  003ED4  5185               	movf	(SwTimersInterrupt@ticksToNextTimerEvent+3)& (0+255),w,b
 34710  003ED6  58DE               	subwfb	postinc2,w,c
 34711  003ED8  E20A               	bc	l12380
 34712                           
 34713                           ; BSR set to: 0
 34714                           ;sw_timer.c: 313: {
 34715                           ;sw_timer.c: 314: ticksToNextTimerEvent = swTimers[i].ticksRemaining;
 34716  003EDA  5186               	movf	SwTimersInterrupt@i& (0+255),w,b
 34717  003EDC  D815               	call	PL10	;call to abstracted procedure
 34718  003EDE  CFDE F082          	movff	postinc2,SwTimersInterrupt@ticksToNextTimerEvent
 34719  003EE2  CFDE F083          	movff	postinc2,SwTimersInterrupt@ticksToNextTimerEvent+1
 34720  003EE6  CFDE F084          	movff	postinc2,SwTimersInterrupt@ticksToNextTimerEvent+2
 34721  003EEA  CFDE F085          	movff	postinc2,SwTimersInterrupt@ticksToNextTimerEvent+3
 34722  003EEE                     l12380:
 34723                           
 34724                           ; BSR set to: 0
 34725  003EEE  2B86               	incf	SwTimersInterrupt@i& (0+255),f,b
 34726  003EF0                     l12382:
 34727                           
 34728                           ; BSR set to: 0
 34729  003EF0  51FF               	movf	_allocatedTimers& (0+255),w,b	;volatile
 34730  003EF2  5D86               	subwf	SwTimersInterrupt@i& (0+255),w,b
 34731  003EF4  E3C8               	bnc	l12370
 34732                           
 34733                           ; BSR set to: 0
 34734                           ;sw_timer.c: 315: }
 34735                           ;sw_timer.c: 316: }
 34736                           ;sw_timer.c: 317: }
 34737                           ;sw_timer.c: 318: }
 34738                           ;sw_timer.c: 320: return ticksToNextTimerEvent;
 34739  003EF6  C082  F076         	movff	SwTimersInterrupt@ticksToNextTimerEvent,?_SwTimersInterrupt
 34740  003EFA  C083  F077         	movff	SwTimersInterrupt@ticksToNextTimerEvent+1,?_SwTimersInterrupt+1
 34741  003EFE  C084  F078         	movff	SwTimersInterrupt@ticksToNextTimerEvent+2,?_SwTimersInterrupt+2
 34742  003F02  C085  F079         	movff	SwTimersInterrupt@ticksToNextTimerEvent+3,?_SwTimersInterrupt+3
 34743                           
 34744                           ; BSR set to: 0
 34745  003F06  0012               	return		;funcret
 34746  003F08                     __end_of_SwTimersInterrupt:
 34747                           	opt stack 0
 34748  003F08                     PL10:
 34749                           	opt stack 12
 34750  003F08  0D08               	mullw	8
 34751  003F0A  0E00               	movlw	low _swTimers
 34752  003F0C  24F3               	addwf	prodl,w,c
 34753  003F0E  6ED9               	movwf	fsr2l,c
 34754  003F10  0E03               	movlw	high _swTimers
 34755  003F12  20F4               	addwfc	prodh,w,c
 34756  003F14  6EDA               	movwf	fsr2h,c
 34757  003F16  0012               	return	
 34758  003F18                     __end_ofPL10:
 34759                           	opt stack 0
 34760                           tosu	equ	0xFFF
 34761                           tosh	equ	0xFFE
 34762                           tosl	equ	0xFFD
 34763                           pclath	equ	0xFFA
 34764                           tblptru	equ	0xFF8
 34765                           tblptrh	equ	0xFF7
 34766                           tblptrl	equ	0xFF6
 34767                           tablat	equ	0xFF5
 34768                           prodh	equ	0xFF4
 34769                           prodl	equ	0xFF3
 34770                           intcon	equ	0xFF2
 34771                           indf0	equ	0xFEF
 34772                           postinc0	equ	0xFEE
 34773                           plusw0	equ	0xFEB
 34774                           fsr0h	equ	0xFEA
 34775                           fsr0l	equ	0xFE9
 34776                           wreg	equ	0xFE8
 34777                           postinc1	equ	0xFE6
 34778                           postdec1	equ	0xFE5
 34779                           plusw1	equ	0xFE3
 34780                           fsr1h	equ	0xFE2
 34781                           fsr1l	equ	0xFE1
 34782                           indf2	equ	0xFDF
 34783                           postinc2	equ	0xFDE
 34784                           postdec2	equ	0xFDD
 34785                           plusw2	equ	0xFDB
 34786                           fsr2h	equ	0xFDA
 34787                           fsr2l	equ	0xFD9
 34788                           status	equ	0xFD8
 34789                           
 34790 ;; *************** function _TMR_GetDeltaTime *****************
 34791 ;; Defined at:
 34792 ;;		line 88 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 34793 ;; Parameters:    Size  Location     Type
 34794 ;;		None
 34795 ;; Auto vars:     Size  Location     Type
 34796 ;;		None
 34797 ;; Return value:  Size  Location     Type
 34798 ;;                  4    6[BANK0 ] unsigned long 
 34799 ;; Registers used:
 34800 ;;		wreg, status,2, status,0, cstack
 34801 ;; Tracked objects:
 34802 ;;		On entry : 3F/0
 34803 ;;		On exit  : 3F/0
 34804 ;;		Unchanged: 0/0
 34805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 34806 ;;      Params:         0       4       0       0       0       0       0       0       0
 34807 ;;      Locals:         0       0       0       0       0       0       0       0       0
 34808 ;;      Temps:          0      12       0       0       0       0       0       0       0
 34809 ;;      Totals:         0      16       0       0       0       0       0       0       0
 34810 ;;Total ram usage:       16 bytes
 34811 ;; Hardware stack levels used:    1
 34812 ;; Hardware stack levels required when called:    8
 34813 ;; This function calls:
 34814 ;;		_TMR1_ReadTimer
 34815 ;; This function is called by:
 34816 ;;		_SwTimersInterrupt
 34817 ;; This function uses a non-reentrant model
 34818 ;;
 34819                           
 34820                           	psect	text186
 34821  0041CC                     __ptext186:
 34822                           	opt stack 0
 34823  0041CC                     _TMR_GetDeltaTime:
 34824                           	opt stack 17
 34825                           
 34826                           ; BSR set to: 0
 34827                           ;sw_timer.c: 90: static uint32_t retVal;
 34828                           ;sw_timer.c: 91: static uint16_t tmrVal;
 34829                           ;sw_timer.c: 93: tmrVal = TMR1_ReadTimer();
 34830                           
 34831                           ; BSR set to: 0
 34832                           ;incstack = 0
 34833  0041CC  EC02  F02F         	call	_TMR1_ReadTimer	;wreg free
 34834  0041D0  C060  F042         	movff	?_TMR1_ReadTimer,TMR_GetDeltaTime@tmrVal
 34835  0041D4  C061  F043         	movff	?_TMR1_ReadTimer+1,TMR_GetDeltaTime@tmrVal+1
 34836                           
 34837                           ; BSR set to: 0
 34838                           ;sw_timer.c: 95: if (timerOverflow == 1)
 34839  0041D8  0444               	decf	_timerOverflow,w,c	;volatile
 34840  0041DA  E11F               	bnz	l12056
 34841                           
 34842                           ; BSR set to: 0
 34843                           ;sw_timer.c: 96: {
 34844                           ;sw_timer.c: 97: timerOverflow = 0;
 34845  0041DC  6A44               	clrf	_timerOverflow,c	;volatile
 34846                           
 34847                           ; BSR set to: 0
 34848                           ;sw_timer.c: 98: retVal = ((uint32_t)0x10000) - reloadVal + tmrVal - ticksAccounted + ti
      +                          cksAdded;
 34849  0041DE  D843               	call	PL266	;call to abstracted procedure
 34850  0041E0  A0D8               	btfss	status,0,c
 34851  0041E2  076C               	decf	(??_TMR_GetDeltaTime+2)& (0+255),f,b
 34852  0041E4  516C               	movf	(??_TMR_GetDeltaTime+2)& (0+255),w,b
 34853  0041E6  6F6D               	movwf	(??_TMR_GetDeltaTime+3)& (0+255),b
 34854  0041E8  D82F               	call	PL116	;call to abstracted procedure
 34855  0041EA  6F72               	movwf	(??_TMR_GetDeltaTime+8)& (0+255),b
 34856  0041EC  5039               	movf	_ticksAdded+1,w,c	;volatile
 34857  0041EE  216F               	addwfc	(??_TMR_GetDeltaTime+5)& (0+255),w,b
 34858  0041F0  6F73               	movwf	(??_TMR_GetDeltaTime+9)& (0+255),b
 34859  0041F2  503A               	movf	_ticksAdded+2,w,c	;volatile
 34860  0041F4  2170               	addwfc	(??_TMR_GetDeltaTime+6)& (0+255),w,b
 34861  0041F6  6F74               	movwf	(??_TMR_GetDeltaTime+10)& (0+255),b
 34862  0041F8  503B               	movf	_ticksAdded+3,w,c	;volatile
 34863  0041FA  2171               	addwfc	(??_TMR_GetDeltaTime+7)& (0+255),w,b
 34864  0041FC  6F75               	movwf	(??_TMR_GetDeltaTime+11)& (0+255),b
 34865  0041FE  0E00               	movlw	0
 34866  004200  2572               	addwf	(??_TMR_GetDeltaTime+8)& (0+255),w,b
 34867  004202  6E30               	movwf	TMR_GetDeltaTime@retVal,c
 34868  004204  0E00               	movlw	0
 34869  004206  2173               	addwfc	(??_TMR_GetDeltaTime+9)& (0+255),w,b
 34870  004208  6E31               	movwf	TMR_GetDeltaTime@retVal+1,c
 34871  00420A  0E01               	movlw	1
 34872  00420C  2174               	addwfc	(??_TMR_GetDeltaTime+10)& (0+255),w,b
 34873  00420E  6E32               	movwf	TMR_GetDeltaTime@retVal+2,c
 34874  004210  0E00               	movlw	0
 34875  004212  2175               	addwfc	(??_TMR_GetDeltaTime+11)& (0+255),w,b
 34876                           
 34877                           ; BSR set to: 0
 34878                           ;sw_timer.c: 99: ticksAccounted = tmrVal;
 34879                           
 34880                           ; BSR set to: 0
 34881                           ;sw_timer.c: 100: ticksAdded = 0;
 34882                           
 34883                           ; BSR set to: 0
 34884                           ;sw_timer.c: 101: reloadVal = 0;
 34885  004214  EC6B  F01C         	call	PL138	;call to abstracted procedure
 34886                           
 34887                           ;sw_timer.c: 102: }
 34888  004218  D00E               	goto	l12058
 34889  00421A                     l12056:
 34890                           
 34891                           ; BSR set to: 0
 34892                           ;sw_timer.c: 103: else
 34893                           ;sw_timer.c: 104: {
 34894                           ;sw_timer.c: 105: retVal = tmrVal - reloadVal - ticksAccounted + ticksAdded;
 34895  00421A  D825               	call	PL266	;call to abstracted procedure
 34896  00421C  6B6D               	clrf	(??_TMR_GetDeltaTime+3)& (0+255),b
 34897  00421E  D814               	call	PL116	;call to abstracted procedure
 34898  004220  6E30               	movwf	TMR_GetDeltaTime@retVal,c
 34899  004222  5039               	movf	_ticksAdded+1,w,c	;volatile
 34900  004224  216F               	addwfc	(??_TMR_GetDeltaTime+5)& (0+255),w,b
 34901  004226  6E31               	movwf	TMR_GetDeltaTime@retVal+1,c
 34902  004228  503A               	movf	_ticksAdded+2,w,c	;volatile
 34903  00422A  2170               	addwfc	(??_TMR_GetDeltaTime+6)& (0+255),w,b
 34904  00422C  6E32               	movwf	TMR_GetDeltaTime@retVal+2,c
 34905  00422E  503B               	movf	_ticksAdded+3,w,c	;volatile
 34906  004230  2171               	addwfc	(??_TMR_GetDeltaTime+7)& (0+255),w,b
 34907                           
 34908                           ;sw_timer.c: 106: ticksAccounted += retVal;
 34909  004232  EC79  F01C         	call	PL202	;call to abstracted procedure
 34910  004236                     l12058:
 34911                           
 34912                           ; BSR set to: 0
 34913                           ;sw_timer.c: 107: }
 34914                           ;sw_timer.c: 109: return retVal;
 34915  004236  C030  F066         	movff	TMR_GetDeltaTime@retVal,?_TMR_GetDeltaTime
 34916  00423A  C031  F067         	movff	TMR_GetDeltaTime@retVal+1,?_TMR_GetDeltaTime+1
 34917  00423E  C032  F068         	movff	TMR_GetDeltaTime@retVal+2,?_TMR_GetDeltaTime+2
 34918  004242  C033  F069         	movff	TMR_GetDeltaTime@retVal+3,?_TMR_GetDeltaTime+3
 34919                           
 34920                           ; BSR set to: 0
 34921  004246  0012               	return		;funcret
 34922  004248                     __end_of_TMR_GetDeltaTime:
 34923                           	opt stack 0
 34924  004248                     PL116:
 34925                           	opt stack 17
 34926  004248  5034               	movf	_ticksAccounted,w,c	;volatile
 34927  00424A  5D6A               	subwf	??_TMR_GetDeltaTime& (0+255),w,b
 34928  00424C  6F6E               	movwf	(??_TMR_GetDeltaTime+4)& (0+255),b
 34929  00424E  5035               	movf	_ticksAccounted+1,w,c	;volatile
 34930  004250  596B               	subwfb	(??_TMR_GetDeltaTime+1)& (0+255),w,b
 34931  004252  6F6F               	movwf	(??_TMR_GetDeltaTime+5)& (0+255),b
 34932  004254  5036               	movf	_ticksAccounted+2,w,c	;volatile
 34933  004256  596C               	subwfb	(??_TMR_GetDeltaTime+2)& (0+255),w,b
 34934  004258  6F70               	movwf	(??_TMR_GetDeltaTime+6)& (0+255),b
 34935  00425A  5037               	movf	_ticksAccounted+3,w,c	;volatile
 34936  00425C  596D               	subwfb	(??_TMR_GetDeltaTime+3)& (0+255),w,b
 34937  00425E  6F71               	movwf	(??_TMR_GetDeltaTime+7)& (0+255),b
 34938  004260  5038               	movf	_ticksAdded,w,c	;volatile
 34939  004262  256E               	addwf	(??_TMR_GetDeltaTime+4)& (0+255),w,b
 34940  004264  0012               	return	
 34941  004266                     __end_ofPL116:
 34942                           	opt stack 0
 34943  004266                     PL266:
 34944                           	opt stack 17
 34945  004266  51FD               	movf	_reloadVal& (0+255),w,b	;volatile
 34946  004268  5C42               	subwf	TMR_GetDeltaTime@tmrVal,w,c
 34947  00426A  6F6A               	movwf	??_TMR_GetDeltaTime& (0+255),b
 34948  00426C  51FE               	movf	(_reloadVal+1)& (0+255),w,b	;volatile
 34949  00426E  5843               	subwfb	TMR_GetDeltaTime@tmrVal+1,w,c
 34950  004270  6F6B               	movwf	(??_TMR_GetDeltaTime+1)& (0+255),b
 34951  004272  6B6C               	clrf	(??_TMR_GetDeltaTime+2)& (0+255),b
 34952  004274  0012               	return	
 34953  004276                     __end_ofPL266:
 34954                           	opt stack 0
 34955                           tosu	equ	0xFFF
 34956                           tosh	equ	0xFFE
 34957                           tosl	equ	0xFFD
 34958                           pclath	equ	0xFFA
 34959                           tblptru	equ	0xFF8
 34960                           tblptrh	equ	0xFF7
 34961                           tblptrl	equ	0xFF6
 34962                           tablat	equ	0xFF5
 34963                           prodh	equ	0xFF4
 34964                           prodl	equ	0xFF3
 34965                           intcon	equ	0xFF2
 34966                           indf0	equ	0xFEF
 34967                           postinc0	equ	0xFEE
 34968                           plusw0	equ	0xFEB
 34969                           fsr0h	equ	0xFEA
 34970                           fsr0l	equ	0xFE9
 34971                           wreg	equ	0xFE8
 34972                           postinc1	equ	0xFE6
 34973                           postdec1	equ	0xFE5
 34974                           plusw1	equ	0xFE3
 34975                           fsr1h	equ	0xFE2
 34976                           fsr1l	equ	0xFE1
 34977                           indf2	equ	0xFDF
 34978                           postinc2	equ	0xFDE
 34979                           postdec2	equ	0xFDD
 34980                           plusw2	equ	0xFDB
 34981                           fsr2h	equ	0xFDA
 34982                           fsr2l	equ	0xFD9
 34983                           status	equ	0xFD8
 34984                           
 34985 ;; *************** function _TMR1_ReadTimer *****************
 34986 ;; Defined at:
 34987 ;;		line 113 in file "mcc_generated_files/tmr1.c"
 34988 ;; Parameters:    Size  Location     Type
 34989 ;;		None
 34990 ;; Auto vars:     Size  Location     Type
 34991 ;;  readVal         2    4[BANK0 ] unsigned int 
 34992 ;; Return value:  Size  Location     Type
 34993 ;;                  2    0[BANK0 ] unsigned int 
 34994 ;; Registers used:
 34995 ;;		wreg, status,2, status,0
 34996 ;; Tracked objects:
 34997 ;;		On entry : 3F/0
 34998 ;;		On exit  : 3F/0
 34999 ;;		Unchanged: 0/0
 35000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 35001 ;;      Params:         0       2       0       0       0       0       0       0       0
 35002 ;;      Locals:         0       2       0       0       0       0       0       0       0
 35003 ;;      Temps:          0       2       0       0       0       0       0       0       0
 35004 ;;      Totals:         0       6       0       0       0       0       0       0       0
 35005 ;;Total ram usage:        6 bytes
 35006 ;; Hardware stack levels used:    1
 35007 ;; Hardware stack levels required when called:    7
 35008 ;; This function calls:
 35009 ;;		Nothing
 35010 ;; This function is called by:
 35011 ;;		_TMR_GetDeltaTime
 35012 ;;		_TMR_SwapTimer
 35013 ;; This function uses a non-reentrant model
 35014 ;;
 35015                           
 35016                           	psect	text187
 35017  005E04                     __ptext187:
 35018                           	opt stack 0
 35019  005E04                     _TMR1_ReadTimer:
 35020                           	opt stack 17
 35021                           
 35022                           ; BSR set to: 0
 35023                           ;tmr1.c: 115: uint16_t readVal;
 35024                           ;tmr1.c: 117: readVal = (TMR1H << 8) | TMR1L;
 35025                           
 35026                           ; BSR set to: 0
 35027                           ;incstack = 0
 35028  005E04  50CD               	movf	4045,w,c	;volatile
 35029  005E06  CFCE F062          	movff	4046,??_TMR1_ReadTimer	;volatile
 35030  005E0A  6B63               	clrf	(??_TMR1_ReadTimer+1)& (0+255),b
 35031  005E0C  C062  F063         	movff	??_TMR1_ReadTimer,??_TMR1_ReadTimer+1
 35032  005E10  6B62               	clrf	??_TMR1_ReadTimer& (0+255),b
 35033  005E12  1162               	iorwf	??_TMR1_ReadTimer& (0+255),w,b
 35034  005E14  6F64               	movwf	TMR1_ReadTimer@readVal& (0+255),b
 35035  005E16  5163               	movf	(??_TMR1_ReadTimer+1)& (0+255),w,b
 35036  005E18  6F65               	movwf	(TMR1_ReadTimer@readVal+1)& (0+255),b
 35037                           
 35038                           ; BSR set to: 0
 35039                           ;tmr1.c: 119: return readVal;
 35040  005E1A  C064  F060         	movff	TMR1_ReadTimer@readVal,?_TMR1_ReadTimer
 35041  005E1E  C065  F061         	movff	TMR1_ReadTimer@readVal+1,?_TMR1_ReadTimer+1
 35042                           
 35043                           ; BSR set to: 0
 35044  005E22  0012               	return		;funcret
 35045  005E24                     __end_of_TMR1_ReadTimer:
 35046                           	opt stack 0
 35047                           tosu	equ	0xFFF
 35048                           tosh	equ	0xFFE
 35049                           tosl	equ	0xFFD
 35050                           pclath	equ	0xFFA
 35051                           tblptru	equ	0xFF8
 35052                           tblptrh	equ	0xFF7
 35053                           tblptrl	equ	0xFF6
 35054                           tablat	equ	0xFF5
 35055                           prodh	equ	0xFF4
 35056                           prodl	equ	0xFF3
 35057                           intcon	equ	0xFF2
 35058                           indf0	equ	0xFEF
 35059                           postinc0	equ	0xFEE
 35060                           plusw0	equ	0xFEB
 35061                           fsr0h	equ	0xFEA
 35062                           fsr0l	equ	0xFE9
 35063                           wreg	equ	0xFE8
 35064                           postinc1	equ	0xFE6
 35065                           postdec1	equ	0xFE5
 35066                           plusw1	equ	0xFE3
 35067                           fsr1h	equ	0xFE2
 35068                           fsr1l	equ	0xFE1
 35069                           indf2	equ	0xFDF
 35070                           postinc2	equ	0xFDE
 35071                           postdec2	equ	0xFDD
 35072                           plusw2	equ	0xFDB
 35073                           fsr2h	equ	0xFDA
 35074                           fsr2l	equ	0xFD9
 35075                           status	equ	0xFD8
 35076                           
 35077 ;; *************** function _SwTimerSetTimeout *****************
 35078 ;; Defined at:
 35079 ;;		line 186 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 35080 ;; Parameters:    Size  Location     Type
 35081 ;;  timerId         1    wreg     unsigned char 
 35082 ;;  timeout         4   13[BANK0 ] unsigned long 
 35083 ;; Auto vars:     Size  Location     Type
 35084 ;;  timerId         1   21[BANK0 ] unsigned char 
 35085 ;; Return value:  Size  Location     Type
 35086 ;;                  1    wreg      void 
 35087 ;; Registers used:
 35088 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 35089 ;; Tracked objects:
 35090 ;;		On entry : 3C/2
 35091 ;;		On exit  : 3F/0
 35092 ;;		Unchanged: 0/0
 35093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 35094 ;;      Params:         0       4       0       0       0       0       0       0       0
 35095 ;;      Locals:         0       1       0       0       0       0       0       0       0
 35096 ;;      Temps:          0       4       0       0       0       0       0       0       0
 35097 ;;      Totals:         0       9       0       0       0       0       0       0       0
 35098 ;;Total ram usage:        9 bytes
 35099 ;; Hardware stack levels used:    1
 35100 ;; Hardware stack levels required when called:    7
 35101 ;; This function calls:
 35102 ;;		Nothing
 35103 ;; This function is called by:
 35104 ;;		_LORAWAN_Join
 35105 ;;		_LORAWAN_LinkCheckConfigure
 35106 ;;		_LORAWAN_LinkCheckCallback
 35107 ;;		_UpdateRetransmissionAckTimeoutState
 35108 ;;		_UpdateJoinSuccessState
 35109 ;;		_LORAWAN_TxDone
 35110 ;;		_LORAWAN_RxTimeout
 35111 ;;		_StartReTxTimer
 35112 ;;		_DutyCycleCallback
 35113 ;;		_RADIO_Transmit
 35114 ;;		_RADIO_ReceiveStart
 35115 ;; This function uses a non-reentrant model
 35116 ;;
 35117                           
 35118                           	psect	text188
 35119  005822                     __ptext188:
 35120                           	opt stack 0
 35121  005822                     _SwTimerSetTimeout:
 35122                           	opt stack 20
 35123                           
 35124                           ; BSR set to: 0
 35125                           ;incstack = 0
 35126                           ;SwTimerSetTimeout@timerId stored from wreg
 35127  005822  0100               	movlb	0	; () banked
 35128  005824  6F75               	movwf	SwTimerSetTimeout@timerId& (0+255),b
 35129                           
 35130                           ;sw_timer.c: 188: (INTCONbits.GIE = 0);
 35131  005826  9EF2               	bcf	intcon,7,c	;volatile
 35132                           
 35133                           ;sw_timer.c: 189: swTimers[timerId].ticksRemaining = timeout - 32;
 35134  005828  0EE0               	movlw	224
 35135  00582A  256D               	addwf	SwTimerSetTimeout@timeout& (0+255),w,b
 35136  00582C  6F71               	movwf	??_SwTimerSetTimeout& (0+255),b
 35137  00582E  0EFF               	movlw	255
 35138  005830  216E               	addwfc	(SwTimerSetTimeout@timeout+1)& (0+255),w,b
 35139  005832  6F72               	movwf	(??_SwTimerSetTimeout+1)& (0+255),b
 35140  005834  0EFF               	movlw	255
 35141  005836  216F               	addwfc	(SwTimerSetTimeout@timeout+2)& (0+255),w,b
 35142  005838  6F73               	movwf	(??_SwTimerSetTimeout+2)& (0+255),b
 35143  00583A  0EFF               	movlw	255
 35144  00583C  2170               	addwfc	(SwTimerSetTimeout@timeout+3)& (0+255),w,b
 35145  00583E  6F74               	movwf	(??_SwTimerSetTimeout+3)& (0+255),b
 35146  005840  5175               	movf	SwTimerSetTimeout@timerId& (0+255),w,b
 35147  005842  EC84  F01F         	call	PL10	;call to abstracted procedure
 35148  005846  C071  FFDE         	movff	??_SwTimerSetTimeout,postinc2
 35149  00584A  C072  FFDE         	movff	??_SwTimerSetTimeout+1,postinc2
 35150  00584E  C073  FFDE         	movff	??_SwTimerSetTimeout+2,postinc2
 35151  005852  C074  FFDE         	movff	??_SwTimerSetTimeout+3,postinc2
 35152                           
 35153                           ; BSR set to: 0
 35154                           ;sw_timer.c: 190: (INTCONbits.GIE = 1);
 35155  005856  8EF2               	bsf	intcon,7,c	;volatile
 35156                           
 35157                           ; BSR set to: 0
 35158  005858  0012               	return		;funcret
 35159  00585A                     __end_of_SwTimerSetTimeout:
 35160                           	opt stack 0
 35161                           tosu	equ	0xFFF
 35162                           tosh	equ	0xFFE
 35163                           tosl	equ	0xFFD
 35164                           pclath	equ	0xFFA
 35165                           tblptru	equ	0xFF8
 35166                           tblptrh	equ	0xFF7
 35167                           tblptrl	equ	0xFF6
 35168                           tablat	equ	0xFF5
 35169                           prodh	equ	0xFF4
 35170                           prodl	equ	0xFF3
 35171                           intcon	equ	0xFF2
 35172                           indf0	equ	0xFEF
 35173                           postinc0	equ	0xFEE
 35174                           plusw0	equ	0xFEB
 35175                           fsr0h	equ	0xFEA
 35176                           fsr0l	equ	0xFE9
 35177                           wreg	equ	0xFE8
 35178                           postinc1	equ	0xFE6
 35179                           postdec1	equ	0xFE5
 35180                           plusw1	equ	0xFE3
 35181                           fsr1h	equ	0xFE2
 35182                           fsr1l	equ	0xFE1
 35183                           indf2	equ	0xFDF
 35184                           postinc2	equ	0xFDE
 35185                           postdec2	equ	0xFDD
 35186                           plusw2	equ	0xFDB
 35187                           fsr2h	equ	0xFDA
 35188                           fsr2l	equ	0xFD9
 35189                           status	equ	0xFD8
 35190                           
 35191 ;; *************** function _InitDefault868Channels *****************
 35192 ;; Defined at:
 35193 ;;		line 979 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 35194 ;; Parameters:    Size  Location     Type
 35195 ;;		None
 35196 ;; Auto vars:     Size  Location     Type
 35197 ;;  i               1   10[BANK0 ] unsigned char 
 35198 ;; Return value:  Size  Location     Type
 35199 ;;                  1    wreg      void 
 35200 ;; Registers used:
 35201 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35202 ;; Tracked objects:
 35203 ;;		On entry : 3F/1
 35204 ;;		On exit  : 3F/0
 35205 ;;		Unchanged: 0/0
 35206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 35207 ;;      Params:         0       0       0       0       0       0       0       0       0
 35208 ;;      Locals:         0       1       0       0       0       0       0       0       0
 35209 ;;      Temps:          0       0       0       0       0       0       0       0       0
 35210 ;;      Totals:         0       1       0       0       0       0       0       0       0
 35211 ;;Total ram usage:        1 bytes
 35212 ;; Hardware stack levels used:    1
 35213 ;; Hardware stack levels required when called:    8
 35214 ;; This function calls:
 35215 ;;		_memcpy
 35216 ;;		_memset
 35217 ;; This function is called by:
 35218 ;;		_LORAWAN_Reset
 35219 ;; This function uses a non-reentrant model
 35220 ;;
 35221                           
 35222                           	psect	text189
 35223  0057B0                     __ptext189:
 35224                           	opt stack 0
 35225  0057B0                     _InitDefault868Channels:
 35226                           	opt stack 0
 35227                           
 35228                           ; BSR set to: 1
 35229                           ;lorawan_eu.c: 981: uint8_t i;
 35230                           ;lorawan_eu.c: 983: memset (Channels, 0, sizeof(Channels) );
 35231                           
 35232                           ; BSR set to: 0
 35233                           ;incstack = 0
 35234  0057B0  ECA0  F027         	call	PL164	;call to abstracted procedure
 35235  0057B4  ECEF  F02D         	call	_memset	;wreg free
 35236                           
 35237                           ; BSR set to: 0
 35238                           ;lorawan_eu.c: 984: memcpy (Channels, DefaultChannels868, sizeof(DefaultChannels868) );
 35239  0057B8  ECAB  F027         	call	PL364	;call to abstracted procedure
 35240  0057BC  0ED2               	movlw	low _DefaultChannels868
 35241  0057BE  6F62               	movwf	memcpy@s1& (0+255),b
 35242  0057C0  0E7F               	movlw	high _DefaultChannels868
 35243  0057C2  ECB0  F027         	call	PL396	;call to abstracted procedure
 35244  0057C6  EC94  F028         	call	_memcpy	;wreg free
 35245                           
 35246                           ; BSR set to: 0
 35247                           ;lorawan_eu.c: 985: for (i = 3; i < 16; i++)
 35248  0057CA  0E03               	movlw	3
 35249  0057CC  6F6A               	movwf	InitDefault868Channels@i& (0+255),b
 35250  0057CE                     l14954:
 35251                           
 35252                           ; BSR set to: 0
 35253                           ;lorawan_eu.c: 986: {
 35254                           ;lorawan_eu.c: 989: Channels[i].dutyCycle = (65535U);
 35255  0057CE  516A               	movf	InitDefault868Channels@i& (0+255),w,b
 35256  0057D0  ECAD  F006         	call	PL92	;call to abstracted procedure
 35257  0057D4  68DE               	setf	postinc2,c
 35258  0057D6  68DD               	setf	postdec2,c
 35259                           
 35260                           ;lorawan_eu.c: 990: Channels[i].dataRange.value = (255);
 35261  0057D8  516A               	movf	InitDefault868Channels@i& (0+255),w,b
 35262  0057DA  EC7E  F021         	call	PL6	;call to abstracted procedure
 35263  0057DE  68DF               	setf	indf2,c
 35264                           
 35265                           ; BSR set to: 0
 35266  0057E0  2B6A               	incf	InitDefault868Channels@i& (0+255),f,b
 35267                           
 35268                           ; BSR set to: 0
 35269  0057E2  0E0F               	movlw	15
 35270  0057E4  656A               	cpfsgt	InitDefault868Channels@i& (0+255),b
 35271  0057E6  D7F3               	goto	l14954
 35272  0057E8  0C0F               	retlw	15
 35273  0057EA                     __end_of_InitDefault868Channels:
 35274                           	opt stack 0
 35275                           tosu	equ	0xFFF
 35276                           tosh	equ	0xFFE
 35277                           tosl	equ	0xFFD
 35278                           pclath	equ	0xFFA
 35279                           tblptru	equ	0xFF8
 35280                           tblptrh	equ	0xFF7
 35281                           tblptrl	equ	0xFF6
 35282                           tablat	equ	0xFF5
 35283                           prodh	equ	0xFF4
 35284                           prodl	equ	0xFF3
 35285                           intcon	equ	0xFF2
 35286                           indf0	equ	0xFEF
 35287                           postinc0	equ	0xFEE
 35288                           plusw0	equ	0xFEB
 35289                           fsr0h	equ	0xFEA
 35290                           fsr0l	equ	0xFE9
 35291                           wreg	equ	0xFE8
 35292                           postinc1	equ	0xFE6
 35293                           postdec1	equ	0xFE5
 35294                           plusw1	equ	0xFE3
 35295                           fsr1h	equ	0xFE2
 35296                           fsr1l	equ	0xFE1
 35297                           indf2	equ	0xFDF
 35298                           postinc2	equ	0xFDE
 35299                           postdec2	equ	0xFDD
 35300                           plusw2	equ	0xFDB
 35301                           fsr2h	equ	0xFDA
 35302                           fsr2l	equ	0xFD9
 35303                           status	equ	0xFD8
 35304                           
 35305 ;; *************** function _InitDefault433Channels *****************
 35306 ;; Defined at:
 35307 ;;		line 994 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 35308 ;; Parameters:    Size  Location     Type
 35309 ;;		None
 35310 ;; Auto vars:     Size  Location     Type
 35311 ;;  i               1   10[BANK0 ] unsigned char 
 35312 ;; Return value:  Size  Location     Type
 35313 ;;                  1    wreg      void 
 35314 ;; Registers used:
 35315 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35316 ;; Tracked objects:
 35317 ;;		On entry : 3F/1
 35318 ;;		On exit  : 3F/0
 35319 ;;		Unchanged: 0/0
 35320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 35321 ;;      Params:         0       0       0       0       0       0       0       0       0
 35322 ;;      Locals:         0       1       0       0       0       0       0       0       0
 35323 ;;      Temps:          0       0       0       0       0       0       0       0       0
 35324 ;;      Totals:         0       1       0       0       0       0       0       0       0
 35325 ;;Total ram usage:        1 bytes
 35326 ;; Hardware stack levels used:    1
 35327 ;; Hardware stack levels required when called:    8
 35328 ;; This function calls:
 35329 ;;		_memcpy
 35330 ;;		_memset
 35331 ;; This function is called by:
 35332 ;;		_LORAWAN_Reset
 35333 ;; This function uses a non-reentrant model
 35334 ;;
 35335                           
 35336                           	psect	text190
 35337  004F0C                     __ptext190:
 35338                           	opt stack 0
 35339  004F0C                     _InitDefault433Channels:
 35340                           	opt stack 0
 35341                           
 35342                           ; BSR set to: 1
 35343                           ;lorawan_eu.c: 996: uint8_t i;
 35344                           ;lorawan_eu.c: 998: memset (Channels, 0, sizeof(Channels) );
 35345                           
 35346                           ; BSR set to: 0
 35347                           ;incstack = 0
 35348  004F0C  D819               	call	PL164	;call to abstracted procedure
 35349  004F0E  ECEF  F02D         	call	_memset	;wreg free
 35350                           
 35351                           ; BSR set to: 0
 35352                           ;lorawan_eu.c: 999: memcpy (Channels, DefaultChannels433, sizeof(DefaultChannels433) );
 35353  004F12  D821               	call	PL364	;call to abstracted procedure
 35354  004F14  0EA8               	movlw	low _DefaultChannels433
 35355  004F16  6F62               	movwf	memcpy@s1& (0+255),b
 35356  004F18  0E7F               	movlw	high _DefaultChannels433
 35357  004F1A  D822               	call	PL396	;call to abstracted procedure
 35358  004F1C  EC94  F028         	call	_memcpy	;wreg free
 35359                           
 35360                           ; BSR set to: 0
 35361                           ;lorawan_eu.c: 1000: for (i = 3; i < 16; i++)
 35362  004F20  0E03               	movlw	3
 35363  004F22  6F6A               	movwf	InitDefault433Channels@i& (0+255),b
 35364  004F24                     l14970:
 35365                           
 35366                           ; BSR set to: 0
 35367                           ;lorawan_eu.c: 1001: {
 35368                           ;lorawan_eu.c: 1004: Channels[i].dutyCycle = (65535U);
 35369  004F24  516A               	movf	InitDefault433Channels@i& (0+255),w,b
 35370  004F26  ECAD  F006         	call	PL92	;call to abstracted procedure
 35371  004F2A  68DE               	setf	postinc2,c
 35372  004F2C  68DD               	setf	postdec2,c
 35373                           
 35374                           ;lorawan_eu.c: 1005: Channels[i].dataRange.value = (255);
 35375  004F2E  516A               	movf	InitDefault433Channels@i& (0+255),w,b
 35376  004F30  EC7E  F021         	call	PL6	;call to abstracted procedure
 35377  004F34  68DF               	setf	indf2,c
 35378                           
 35379                           ; BSR set to: 0
 35380  004F36  2B6A               	incf	InitDefault433Channels@i& (0+255),f,b
 35381                           
 35382                           ; BSR set to: 0
 35383  004F38  0E0F               	movlw	15
 35384  004F3A  656A               	cpfsgt	InitDefault433Channels@i& (0+255),b
 35385  004F3C  D7F3               	goto	l14970
 35386  004F3E  0C0F               	retlw	15
 35387  004F40                     __end_of_InitDefault433Channels:
 35388                           	opt stack 0
 35389  004F40                     PL164:
 35390                           	opt stack 20
 35391  004F40  0E00               	movlw	low _Channels
 35392  004F42  0100               	movlb	0	; () banked
 35393  004F44  6F60               	movwf	memset@p1& (0+255),b
 35394  004F46  0E04               	movlw	high _Channels
 35395  004F48  6F61               	movwf	(memset@p1+1)& (0+255),b
 35396  004F4A  6B63               	clrf	(memset@c+1)& (0+255),b
 35397  004F4C  6B62               	clrf	memset@c& (0+255),b
 35398  004F4E  6B65               	clrf	(memset@n+1)& (0+255),b
 35399  004F50  0EE0               	movlw	224
 35400  004F52  6F64               	movwf	memset@n& (0+255),b
 35401  004F54  0CE0               	retlw	224
 35402  004F56                     __end_ofPL164:
 35403                           	opt stack 0
 35404  004F56                     PL364:
 35405                           	opt stack 20
 35406  004F56  0E00               	movlw	low _Channels
 35407  004F58  6F60               	movwf	memcpy@d1& (0+255),b
 35408  004F5A  0E04               	movlw	high _Channels
 35409  004F5C  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 35410  004F5E  0012               	return	
 35411  004F60                     __end_ofPL364:
 35412                           	opt stack 0
 35413  004F60                     PL396:
 35414                           	opt stack 20
 35415  004F60  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 35416  004F62  6B65               	clrf	(memcpy@n+1)& (0+255),b
 35417  004F64  0E2A               	movlw	42
 35418  004F66  6F64               	movwf	memcpy@n& (0+255),b
 35419  004F68  0C2A               	retlw	42
 35420  004F6A                     __end_ofPL396:
 35421                           	opt stack 0
 35422                           tosu	equ	0xFFF
 35423                           tosh	equ	0xFFE
 35424                           tosl	equ	0xFFD
 35425                           pclath	equ	0xFFA
 35426                           tblptru	equ	0xFF8
 35427                           tblptrh	equ	0xFF7
 35428                           tblptrl	equ	0xFF6
 35429                           tablat	equ	0xFF5
 35430                           prodh	equ	0xFF4
 35431                           prodl	equ	0xFF3
 35432                           intcon	equ	0xFF2
 35433                           indf0	equ	0xFEF
 35434                           postinc0	equ	0xFEE
 35435                           plusw0	equ	0xFEB
 35436                           fsr0h	equ	0xFEA
 35437                           fsr0l	equ	0xFE9
 35438                           wreg	equ	0xFE8
 35439                           postinc1	equ	0xFE6
 35440                           postdec1	equ	0xFE5
 35441                           plusw1	equ	0xFE3
 35442                           fsr1h	equ	0xFE2
 35443                           fsr1l	equ	0xFE1
 35444                           indf2	equ	0xFDF
 35445                           postinc2	equ	0xFDE
 35446                           postdec2	equ	0xFDD
 35447                           plusw2	equ	0xFDB
 35448                           fsr2h	equ	0xFDA
 35449                           fsr2l	equ	0xFD9
 35450                           status	equ	0xFD8
 35451                           
 35452 ;; *************** function _memset *****************
 35453 ;; Defined at:
 35454 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\memset.c"
 35455 ;; Parameters:    Size  Location     Type
 35456 ;;  p1              2    0[BANK0 ] PTR void 
 35457 ;;		 -> GenerateSubkey@l(16), AESCmac@x(16), AssemblePacket@mhdr(1), aesBuffer(16), 
 35458 ;;		 -> Channels(224), macBuffer(271), loRa.activationParameters(105), loRa(245), 
 35459 ;;  c               2    2[BANK0 ] int 
 35460 ;;  n               2    4[BANK0 ] unsigned int 
 35461 ;; Auto vars:     Size  Location     Type
 35462 ;;  p               2    6[BANK0 ] PTR unsigned char 
 35463 ;;		 -> GenerateSubkey@l(16), AESCmac@x(16), AssemblePacket@mhdr(1), aesBuffer(16), 
 35464 ;;		 -> Channels(224), macBuffer(271), loRa.activationParameters(105), loRa(245), 
 35465 ;; Return value:  Size  Location     Type
 35466 ;;                  2    0[BANK0 ] PTR void 
 35467 ;; Registers used:
 35468 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 35469 ;; Tracked objects:
 35470 ;;		On entry : 3F/0
 35471 ;;		On exit  : 3F/0
 35472 ;;		Unchanged: 0/0
 35473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 35474 ;;      Params:         0       6       0       0       0       0       0       0       0
 35475 ;;      Locals:         0       2       0       0       0       0       0       0       0
 35476 ;;      Temps:          0       0       0       0       0       0       0       0       0
 35477 ;;      Totals:         0       8       0       0       0       0       0       0       0
 35478 ;;Total ram usage:        8 bytes
 35479 ;; Hardware stack levels used:    1
 35480 ;; Hardware stack levels required when called:    7
 35481 ;; This function calls:
 35482 ;;		Nothing
 35483 ;; This function is called by:
 35484 ;;		_AssemblePacket
 35485 ;;		_PrepareJoinRequestFrame
 35486 ;;		_PrepareSessionKeys
 35487 ;;		_AssembleEncryptionBlock
 35488 ;;		_AESCmac
 35489 ;;		_GenerateSubkey
 35490 ;;		_LORAWAN_Reset
 35491 ;;		_InitDefault868Channels
 35492 ;;		_InitDefault433Channels
 35493 ;; This function uses a non-reentrant model
 35494 ;;
 35495                           
 35496                           	psect	text191
 35497  005BDE                     __ptext191:
 35498                           	opt stack 0
 35499  005BDE                     _memset:
 35500                           	opt stack 20
 35501                           
 35502                           ; BSR set to: 0
 35503                           
 35504                           ; BSR set to: 0
 35505                           ;incstack = 0
 35506  005BDE  C060  F066         	movff	memset@p1,memset@p
 35507  005BE2  C061  F067         	movff	memset@p1+1,memset@p+1
 35508  005BE6  D008               	goto	l12124
 35509  005BE8                     l12120:
 35510                           
 35511                           ; BSR set to: 0
 35512  005BE8  C066  FFD9         	movff	memset@p,fsr2l
 35513  005BEC  C067  FFDA         	movff	memset@p+1,fsr2h
 35514  005BF0  C062  FFDF         	movff	memset@c,indf2
 35515                           
 35516                           ; BSR set to: 0
 35517  005BF4  4B66               	infsnz	memset@p& (0+255),f,b
 35518  005BF6  2B67               	incf	(memset@p+1)& (0+255),f,b
 35519  005BF8                     l12124:
 35520                           
 35521                           ; BSR set to: 0
 35522  005BF8  0764               	decf	memset@n& (0+255),f,b
 35523  005BFA  A0D8               	btfss	status,0,c
 35524  005BFC  0765               	decf	(memset@n+1)& (0+255),f,b
 35525  005BFE  2964               	incf	memset@n& (0+255),w,b
 35526  005C00  E1F3               	bnz	l12120
 35527  005C02  2965               	incf	(memset@n+1)& (0+255),w,b
 35528  005C04  E1F1               	bnz	l12120
 35529                           
 35530                           ; BSR set to: 0
 35531  005C06  0012               	return		;funcret
 35532  005C08                     __end_of_memset:
 35533                           	opt stack 0
 35534                           tosu	equ	0xFFF
 35535                           tosh	equ	0xFFE
 35536                           tosl	equ	0xFFD
 35537                           pclath	equ	0xFFA
 35538                           tblptru	equ	0xFF8
 35539                           tblptrh	equ	0xFF7
 35540                           tblptrl	equ	0xFF6
 35541                           tablat	equ	0xFF5
 35542                           prodh	equ	0xFF4
 35543                           prodl	equ	0xFF3
 35544                           intcon	equ	0xFF2
 35545                           indf0	equ	0xFEF
 35546                           postinc0	equ	0xFEE
 35547                           plusw0	equ	0xFEB
 35548                           fsr0h	equ	0xFEA
 35549                           fsr0l	equ	0xFE9
 35550                           wreg	equ	0xFE8
 35551                           postinc1	equ	0xFE6
 35552                           postdec1	equ	0xFE5
 35553                           plusw1	equ	0xFE3
 35554                           fsr1h	equ	0xFE2
 35555                           fsr1l	equ	0xFE1
 35556                           indf2	equ	0xFDF
 35557                           postinc2	equ	0xFDE
 35558                           postdec2	equ	0xFDD
 35559                           plusw2	equ	0xFDB
 35560                           fsr2h	equ	0xFDA
 35561                           fsr2l	equ	0xFD9
 35562                           status	equ	0xFD8
 35563                           
 35564 ;; *************** function _memcpy *****************
 35565 ;; Defined at:
 35566 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\memcpy.c"
 35567 ;; Parameters:    Size  Location     Type
 35568 ;;  d1              2    0[BANK0 ] PTR void 
 35569 ;;		 -> RadioConfiguration(54), UpdateCfList@frequency(4), AESCmac@x(16), AESEncodeLoRa@useKey(16), 
 35570 ;;		 -> ComputeMic@mic(4), ExtractMic@mic(4), aesBuffer(16), radioBuffer(271), 
 35571 ;;		 -> LORAWAN_RxDone@computedMic(4), Channels(224), loRa.activationParameters.applicationEui(8), loRa.activationParame
      +ters.deviceEui(8), 
 35572 ;;		 -> macBuffer(271), loRa.activationParameters(105), loRa(245), 
 35573 ;;  s1              2    2[BANK0 ] PTR const void 
 35574 ;;		 -> LORAWAN_RxDone@hdr.cfList(16), radioBuffer.cfList(16), payload(2), appSKey(16), 
 35575 ;;		 -> nwkSKey(16), RadioConfiguration.syncWord(8), RadioConfiguration(54), FskSyncWordBuff(3), 
 35576 ;;		 -> UpdateCfList@joinAccept(2), DefaultChannels433(42), DefaultChannels868(42), AESCmac@y(16), 
 35577 ;;		 -> AssembleEncryptionBlock@frameCounter(4), ComputeSessionKeys@joinAcceptBuffer(2), PrepareJoinRequestFrame@mic(4),
      + loRa.devNonce(2), 
 35578 ;;		 -> loRa.fCntUp.valueLow(2), aesBuffer(16), radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 35579 ;;		 -> loRa.activationParameters.applicationKey(16), loRa.activationParameters.applicationSessionKey(16), loRa.activati
      +onParameters.networkSessionKey(16), loRa.activationParameters.deviceAddress(4), 
 35580 ;;		 -> loRa.activationParameters.applicationEui(8), loRa.activationParameters.deviceEui(8), NULL(0), loRa.activationPar
      +ameters.mcastApplicationSessionKey(16), 
 35581 ;;		 -> loRa.activationParameters.mcastNetworkSessionKey(16), loRa.activationParameters.mcastDeviceAddress(4), loRa.fCnt
      +Up(4), loRa.activationParameters(105), 
 35582 ;;		 -> loRa(245), 
 35583 ;;  n               2    4[BANK0 ] unsigned int 
 35584 ;; Auto vars:     Size  Location     Type
 35585 ;;  s               2    8[BANK0 ] PTR const unsigned char 
 35586 ;;		 -> LORAWAN_RxDone@hdr.cfList(16), radioBuffer.cfList(16), payload(2), appSKey(16), 
 35587 ;;		 -> nwkSKey(16), RadioConfiguration.syncWord(8), RadioConfiguration(54), FskSyncWordBuff(3), 
 35588 ;;		 -> UpdateCfList@joinAccept(2), DefaultChannels433(42), DefaultChannels868(42), AESCmac@y(16), 
 35589 ;;		 -> AssembleEncryptionBlock@frameCounter(4), ComputeSessionKeys@joinAcceptBuffer(2), PrepareJoinRequestFrame@mic(4),
      + loRa.devNonce(2), 
 35590 ;;		 -> loRa.fCntUp.valueLow(2), aesBuffer(16), radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 35591 ;;		 -> loRa.activationParameters.applicationKey(16), loRa.activationParameters.applicationSessionKey(16), loRa.activati
      +onParameters.networkSessionKey(16), loRa.activationParameters.deviceAddress(4), 
 35592 ;;		 -> loRa.activationParameters.applicationEui(8), loRa.activationParameters.deviceEui(8), NULL(0), loRa.activationPar
      +ameters.mcastApplicationSessionKey(16), 
 35593 ;;		 -> loRa.activationParameters.mcastNetworkSessionKey(16), loRa.activationParameters.mcastDeviceAddress(4), loRa.fCnt
      +Up(4), loRa.activationParameters(105), 
 35594 ;;		 -> loRa(245), 
 35595 ;;  d               2    6[BANK0 ] PTR unsigned char 
 35596 ;;		 -> RadioConfiguration(54), UpdateCfList@frequency(4), AESCmac@x(16), AESEncodeLoRa@useKey(16), 
 35597 ;;		 -> ComputeMic@mic(4), ExtractMic@mic(4), aesBuffer(16), radioBuffer(271), 
 35598 ;;		 -> LORAWAN_RxDone@computedMic(4), Channels(224), loRa.activationParameters.applicationEui(8), loRa.activationParame
      +ters.deviceEui(8), 
 35599 ;;		 -> macBuffer(271), loRa.activationParameters(105), loRa(245), 
 35600 ;; Return value:  Size  Location     Type
 35601 ;;                  2    0[BANK0 ] PTR void 
 35602 ;; Registers used:
 35603 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 35604 ;; Tracked objects:
 35605 ;;		On entry : 3F/0
 35606 ;;		On exit  : 3F/0
 35607 ;;		Unchanged: 0/0
 35608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 35609 ;;      Params:         0       6       0       0       0       0       0       0       0
 35610 ;;      Locals:         0       4       0       0       0       0       0       0       0
 35611 ;;      Temps:          0       0       0       0       0       0       0       0       0
 35612 ;;      Totals:         0      10       0       0       0       0       0       0       0
 35613 ;;Total ram usage:       10 bytes
 35614 ;; Hardware stack levels used:    1
 35615 ;; Hardware stack levels required when called:    7
 35616 ;; This function calls:
 35617 ;;		Nothing
 35618 ;; This function is called by:
 35619 ;;		_LORAWAN_SetNetworkSessionKey
 35620 ;;		_LORAWAN_SetApplicationSessionKey
 35621 ;;		_LORAWAN_RxDone
 35622 ;;		_AssemblePacket
 35623 ;;		_PrepareJoinRequestFrame
 35624 ;;		_PrepareSessionKeys
 35625 ;;		_AssembleEncryptionBlock
 35626 ;;		_ExtractMic
 35627 ;;		_ComputeMic
 35628 ;;		_AESEncodeLoRa
 35629 ;;		_AESCmac
 35630 ;;		_UpdateCfList
 35631 ;;		_InitDefault868Channels
 35632 ;;		_InitDefault433Channels
 35633 ;;		_RADIO_SetFSKSyncWord
 35634 ;; This function uses a non-reentrant model
 35635 ;;
 35636                           
 35637                           	psect	text192
 35638  005128                     __ptext192:
 35639                           	opt stack 0
 35640  005128                     _memcpy:
 35641                           	opt stack 17
 35642                           
 35643                           ; BSR set to: 0
 35644                           
 35645                           ; BSR set to: 0
 35646                           ;incstack = 0
 35647  005128  C062  F068         	movff	memcpy@s1,memcpy@s
 35648  00512C  C063  F069         	movff	memcpy@s1+1,memcpy@s+1
 35649  005130  C060  F066         	movff	memcpy@d1,memcpy@d
 35650  005134  C061  F067         	movff	memcpy@d1+1,memcpy@d+1
 35651  005138  D01A               	goto	l11992
 35652  00513A                     l11986:
 35653                           
 35654                           ; BSR set to: 0
 35655  00513A  C068  FFF6         	movff	memcpy@s,tblptrl
 35656  00513E  C069  FFF7         	movff	memcpy@s+1,tblptrh
 35657  005142  6AF8               	clrf	tblptru,c
 35658  005144  C066  FFD9         	movff	memcpy@d,fsr2l
 35659  005148  C067  FFDA         	movff	memcpy@d+1,fsr2h
 35660  00514C  0E07               	movlw	(high __ramtop+-1)
 35661  00514E  64F7               	cpfsgt	tblptrh,c
 35662  005150  D003               	bra	u12727
 35663  005152  0008               	tblrd		*
 35664  005154  50F5               	movf	tablat,w,c
 35665  005156  D005               	bra	u12720
 35666  005158                     u12727:
 35667  005158  CFF6 FFE9          	movff	tblptrl,fsr0l
 35668  00515C  CFF7 FFEA          	movff	tblptrh,fsr0h
 35669  005160  50EF               	movf	indf0,w,c
 35670  005162                     u12720:
 35671  005162  6EDF               	movwf	indf2,c
 35672  005164  0100               	movlb	0	; () banked
 35673  005166  4B68               	infsnz	memcpy@s& (0+255),f,b
 35674  005168  2B69               	incf	(memcpy@s+1)& (0+255),f,b
 35675                           
 35676                           ; BSR set to: 0
 35677  00516A  4B66               	infsnz	memcpy@d& (0+255),f,b
 35678  00516C  2B67               	incf	(memcpy@d+1)& (0+255),f,b
 35679  00516E                     l11992:
 35680                           
 35681                           ; BSR set to: 0
 35682  00516E  0764               	decf	memcpy@n& (0+255),f,b
 35683  005170  A0D8               	btfss	status,0,c
 35684  005172  0765               	decf	(memcpy@n+1)& (0+255),f,b
 35685  005174  2964               	incf	memcpy@n& (0+255),w,b
 35686  005176  E1E1               	bnz	l11986
 35687  005178  2965               	incf	(memcpy@n+1)& (0+255),w,b
 35688  00517A  E1DF               	bnz	l11986
 35689                           
 35690                           ; BSR set to: 0
 35691  00517C  0012               	return		;funcret
 35692  00517E                     __end_of_memcpy:
 35693                           	opt stack 0
 35694                           tosu	equ	0xFFF
 35695                           tosh	equ	0xFFE
 35696                           tosl	equ	0xFFD
 35697                           pclath	equ	0xFFA
 35698                           tblptru	equ	0xFF8
 35699                           tblptrh	equ	0xFF7
 35700                           tblptrl	equ	0xFF6
 35701                           tablat	equ	0xFF5
 35702                           prodh	equ	0xFF4
 35703                           prodl	equ	0xFF3
 35704                           intcon	equ	0xFF2
 35705                           indf0	equ	0xFEF
 35706                           postinc0	equ	0xFEE
 35707                           plusw0	equ	0xFEB
 35708                           fsr0h	equ	0xFEA
 35709                           fsr0l	equ	0xFE9
 35710                           wreg	equ	0xFE8
 35711                           postinc1	equ	0xFE6
 35712                           postdec1	equ	0xFE5
 35713                           plusw1	equ	0xFE3
 35714                           fsr1h	equ	0xFE2
 35715                           fsr1l	equ	0xFE1
 35716                           indf2	equ	0xFDF
 35717                           postinc2	equ	0xFDE
 35718                           postdec2	equ	0xFDD
 35719                           plusw2	equ	0xFDB
 35720                           fsr2h	equ	0xFDA
 35721                           fsr2l	equ	0xFD9
 35722                           status	equ	0xFD8
 35723                           
 35724 ;; *************** function _CreateAllSoftwareTimers *****************
 35725 ;; Defined at:
 35726 ;;		line 937 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 35727 ;; Parameters:    Size  Location     Type
 35728 ;;		None
 35729 ;; Auto vars:     Size  Location     Type
 35730 ;;		None
 35731 ;; Return value:  Size  Location     Type
 35732 ;;                  1    wreg      void 
 35733 ;; Registers used:
 35734 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 35735 ;; Tracked objects:
 35736 ;;		On entry : 3F/2
 35737 ;;		On exit  : 3F/2
 35738 ;;		Unchanged: 0/0
 35739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 35740 ;;      Params:         0       0       0       0       0       0       0       0       0
 35741 ;;      Locals:         0       0       0       0       0       0       0       0       0
 35742 ;;      Temps:          0       0       0       0       0       0       0       0       0
 35743 ;;      Totals:         0       0       0       0       0       0       0       0       0
 35744 ;;Total ram usage:        0 bytes
 35745 ;; Hardware stack levels used:    1
 35746 ;; Hardware stack levels required when called:    8
 35747 ;; This function calls:
 35748 ;;		_SwTimerCreate
 35749 ;; This function is called by:
 35750 ;;		_LORAWAN_Init
 35751 ;; This function uses a non-reentrant model
 35752 ;;
 35753                           
 35754                           	psect	text193
 35755  005224                     __ptext193:
 35756                           	opt stack 0
 35757  005224                     _CreateAllSoftwareTimers:
 35758                           	opt stack 21
 35759                           
 35760                           ; BSR set to: 2
 35761                           ;lorawan_eu.c: 939: loRa.joinAccept1TimerId = SwTimerCreate();
 35762                           
 35763                           ; BSR set to: 0
 35764                           ;incstack = 0
 35765  005224  EC7E  F02B         	call	_SwTimerCreate	;wreg free
 35766  005228  0102               	movlb	2	; () banked
 35767  00522A  6FE2               	movwf	(_loRa+226)& (0+255),b
 35768                           
 35769                           ;lorawan_eu.c: 940: loRa.joinAccept2TimerId = SwTimerCreate();
 35770  00522C  EC7E  F02B         	call	_SwTimerCreate	;wreg free
 35771  005230  0102               	movlb	2	; () banked
 35772  005232  6FE3               	movwf	(_loRa+227)& (0+255),b
 35773                           
 35774                           ;lorawan_eu.c: 941: loRa.receiveWindow1TimerId = SwTimerCreate();
 35775  005234  EC7E  F02B         	call	_SwTimerCreate	;wreg free
 35776  005238  0102               	movlb	2	; () banked
 35777  00523A  6FE4               	movwf	(_loRa+228)& (0+255),b
 35778                           
 35779                           ;lorawan_eu.c: 942: loRa.receiveWindow2TimerId = SwTimerCreate();
 35780  00523C  EC7E  F02B         	call	_SwTimerCreate	;wreg free
 35781  005240  0102               	movlb	2	; () banked
 35782  005242  6FE5               	movwf	(_loRa+229)& (0+255),b
 35783                           
 35784                           ;lorawan_eu.c: 943: loRa.linkCheckTimerId = SwTimerCreate();
 35785  005244  EC7E  F02B         	call	_SwTimerCreate	;wreg free
 35786  005248  0102               	movlb	2	; () banked
 35787  00524A  6FE7               	movwf	(_loRa+231)& (0+255),b
 35788                           
 35789                           ;lorawan_eu.c: 944: loRa.ackTimeoutTimerId = SwTimerCreate();
 35790  00524C  EC7E  F02B         	call	_SwTimerCreate	;wreg free
 35791  005250  0102               	movlb	2	; () banked
 35792  005252  6FE8               	movwf	(_loRa+232)& (0+255),b
 35793                           
 35794                           ;lorawan_eu.c: 945: loRa.automaticReplyTimerId = SwTimerCreate();
 35795  005254  EC7E  F02B         	call	_SwTimerCreate	;wreg free
 35796  005258  0102               	movlb	2	; () banked
 35797  00525A  6FE6               	movwf	(_loRa+230)& (0+255),b
 35798                           
 35799                           ;lorawan_eu.c: 946: loRa.unconfirmedRetransmisionTimerId = SwTimerCreate();
 35800  00525C  EC7E  F02B         	call	_SwTimerCreate	;wreg free
 35801  005260  0102               	movlb	2	; () banked
 35802  005262  6FEA               	movwf	(_loRa+234)& (0+255),b
 35803                           
 35804                           ;lorawan_eu.c: 947: loRa.abpJoinTimerId = SwTimerCreate();
 35805  005264  EC7E  F02B         	call	_SwTimerCreate	;wreg free
 35806  005268  0102               	movlb	2	; () banked
 35807  00526A  6FF3               	movwf	(_loRa+243)& (0+255),b
 35808                           
 35809                           ;lorawan_eu.c: 948: loRa.dutyCycleTimerId = SwTimerCreate();
 35810  00526C  EC7E  F02B         	call	_SwTimerCreate	;wreg free
 35811  005270  0102               	movlb	2	; () banked
 35812  005272  6FE9               	movwf	(_loRa+233)& (0+255),b
 35813                           
 35814                           ; BSR set to: 2
 35815  005274  0012               	return		;funcret
 35816  005276                     __end_of_CreateAllSoftwareTimers:
 35817                           	opt stack 0
 35818                           tosu	equ	0xFFF
 35819                           tosh	equ	0xFFE
 35820                           tosl	equ	0xFFD
 35821                           pclath	equ	0xFFA
 35822                           tblptru	equ	0xFF8
 35823                           tblptrh	equ	0xFF7
 35824                           tblptrl	equ	0xFF6
 35825                           tablat	equ	0xFF5
 35826                           prodh	equ	0xFF4
 35827                           prodl	equ	0xFF3
 35828                           intcon	equ	0xFF2
 35829                           indf0	equ	0xFEF
 35830                           postinc0	equ	0xFEE
 35831                           plusw0	equ	0xFEB
 35832                           fsr0h	equ	0xFEA
 35833                           fsr0l	equ	0xFE9
 35834                           wreg	equ	0xFE8
 35835                           postinc1	equ	0xFE6
 35836                           postdec1	equ	0xFE5
 35837                           plusw1	equ	0xFE3
 35838                           fsr1h	equ	0xFE2
 35839                           fsr1l	equ	0xFE1
 35840                           indf2	equ	0xFDF
 35841                           postinc2	equ	0xFDE
 35842                           postdec2	equ	0xFDD
 35843                           plusw2	equ	0xFDB
 35844                           fsr2h	equ	0xFDA
 35845                           fsr2l	equ	0xFD9
 35846                           status	equ	0xFD8
 35847                           
 35848 ;; *************** function _SwTimerCreate *****************
 35849 ;; Defined at:
 35850 ;;		line 154 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 35851 ;; Parameters:    Size  Location     Type
 35852 ;;		None
 35853 ;; Auto vars:     Size  Location     Type
 35854 ;;  retVal          1    0[BANK0 ] unsigned char 
 35855 ;; Return value:  Size  Location     Type
 35856 ;;                  1    wreg      unsigned char 
 35857 ;; Registers used:
 35858 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 35859 ;; Tracked objects:
 35860 ;;		On entry : 3C/1
 35861 ;;		On exit  : 3F/0
 35862 ;;		Unchanged: 0/0
 35863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 35864 ;;      Params:         0       0       0       0       0       0       0       0       0
 35865 ;;      Locals:         0       1       0       0       0       0       0       0       0
 35866 ;;      Temps:          0       0       0       0       0       0       0       0       0
 35867 ;;      Totals:         0       1       0       0       0       0       0       0       0
 35868 ;;Total ram usage:        1 bytes
 35869 ;; Hardware stack levels used:    1
 35870 ;; Hardware stack levels required when called:    7
 35871 ;; This function calls:
 35872 ;;		Nothing
 35873 ;; This function is called by:
 35874 ;;		_CreateAllSoftwareTimers
 35875 ;;		_RADIO_Init
 35876 ;; This function uses a non-reentrant model
 35877 ;;
 35878                           
 35879                           	psect	text194
 35880  0056FC                     __ptext194:
 35881                           	opt stack 0
 35882  0056FC                     _SwTimerCreate:
 35883                           	opt stack 21
 35884                           
 35885                           ;sw_timer.c: 156: uint8_t retVal;
 35886                           ;sw_timer.c: 157: if (allocatedTimers < 20)
 35887                           
 35888                           ; BSR set to: 2
 35889                           ;incstack = 0
 35890  0056FC  0E14               	movlw	20
 35891  0056FE  0100               	movlb	0	; () banked
 35892  005700  61FF               	cpfslt	_allocatedTimers& (0+255),b	;volatile
 35893  005702  D018               	goto	l2102
 35894                           
 35895                           ; BSR set to: 0
 35896                           ;sw_timer.c: 158: {
 35897                           ;sw_timer.c: 159: (INTCONbits.GIE = 0);
 35898  005704  9EF2               	bcf	intcon,7,c	;volatile
 35899                           
 35900                           ;sw_timer.c: 160: retVal = allocatedTimers;
 35901  005706  C0FF  F060         	movff	_allocatedTimers,SwTimerCreate@retVal	;volatile
 35902                           
 35903                           ; BSR set to: 0
 35904                           ;sw_timer.c: 161: swTimers[retVal].running = 0;
 35905  00570A  5160               	movf	SwTimerCreate@retVal& (0+255),w,b
 35906  00570C  ECDB  F023         	call	PL40	;call to abstracted procedure
 35907  005710  6ADF               	clrf	indf2,c
 35908                           
 35909                           ;sw_timer.c: 162: swTimers[retVal].ticksRemaining = 0;
 35910  005712  5160               	movf	SwTimerCreate@retVal& (0+255),w,b
 35911  005714  EC84  F01F         	call	PL10	;call to abstracted procedure
 35912  005718  ECA2  F01D         	call	PL182	;call to abstracted procedure
 35913                           
 35914                           ;sw_timer.c: 163: swTimers[retVal].callbackParameter = 0;
 35915  00571C  5160               	movf	SwTimerCreate@retVal& (0+255),w,b
 35916  00571E  ECBC  F02D         	call	PL158	;call to abstracted procedure
 35917  005722  6ADF               	clrf	indf2,c
 35918                           
 35919                           ;sw_timer.c: 164: swTimers[retVal].callback = (0);
 35920  005724  5160               	movf	SwTimerCreate@retVal& (0+255),w,b
 35921  005726  ECE3  F023         	call	PL94	;call to abstracted procedure
 35922  00572A  6ADE               	clrf	postinc2,c
 35923  00572C  6ADD               	clrf	postdec2,c
 35924                           
 35925                           ; BSR set to: 0
 35926                           ;sw_timer.c: 165: allocatedTimers++;
 35927  00572E  2BFF               	incf	_allocatedTimers& (0+255),f,b	;volatile
 35928                           
 35929                           ; BSR set to: 0
 35930                           ;sw_timer.c: 166: (INTCONbits.GIE = 1);
 35931  005730  8EF2               	bsf	intcon,7,c	;volatile
 35932                           
 35933                           ;sw_timer.c: 167: }
 35934  005732  D001               	goto	l10480
 35935  005734                     l2102:
 35936  005734  D7FF               	goto	l2102
 35937  005736                     l10480:
 35938                           
 35939                           ; BSR set to: 0
 35940                           ;sw_timer.c: 175: }
 35941                           ;sw_timer.c: 176: }
 35942                           ;sw_timer.c: 177: return retVal;
 35943  005736  5160               	movf	SwTimerCreate@retVal& (0+255),w,b
 35944                           
 35945                           ; BSR set to: 0
 35946  005738  0012               	return		;funcret
 35947  00573A                     __end_of_SwTimerCreate:
 35948                           	opt stack 0
 35949                           tosu	equ	0xFFF
 35950                           tosh	equ	0xFFE
 35951                           tosl	equ	0xFFD
 35952                           pclath	equ	0xFFA
 35953                           tblptru	equ	0xFF8
 35954                           tblptrh	equ	0xFF7
 35955                           tblptrl	equ	0xFF6
 35956                           tablat	equ	0xFF5
 35957                           prodh	equ	0xFF4
 35958                           prodl	equ	0xFF3
 35959                           intcon	equ	0xFF2
 35960                           indf0	equ	0xFEF
 35961                           postinc0	equ	0xFEE
 35962                           plusw0	equ	0xFEB
 35963                           fsr0h	equ	0xFEA
 35964                           fsr0l	equ	0xFE9
 35965                           wreg	equ	0xFE8
 35966                           postinc1	equ	0xFE6
 35967                           postdec1	equ	0xFE5
 35968                           plusw1	equ	0xFE3
 35969                           fsr1h	equ	0xFE2
 35970                           fsr1l	equ	0xFE1
 35971                           indf2	equ	0xFDF
 35972                           postinc2	equ	0xFDE
 35973                           postdec2	equ	0xFDD
 35974                           plusw2	equ	0xFDB
 35975                           fsr2h	equ	0xFDA
 35976                           fsr2l	equ	0xFD9
 35977                           status	equ	0xFD8
 35978                           
 35979 ;; *************** function _INTERRUPT_InterruptManager *****************
 35980 ;; Defined at:
 35981 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 35982 ;; Parameters:    Size  Location     Type
 35983 ;;		None
 35984 ;; Auto vars:     Size  Location     Type
 35985 ;;		None
 35986 ;; Return value:  Size  Location     Type
 35987 ;;                  1    wreg      void 
 35988 ;; Registers used:
 35989 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 35990 ;; Tracked objects:
 35991 ;;		On entry : 0/0
 35992 ;;		On exit  : 0/0
 35993 ;;		Unchanged: 0/0
 35994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 35995 ;;      Params:         0       0       0       0       0       0       0       0       0
 35996 ;;      Locals:         0       0       0       0       0       0       0       0       0
 35997 ;;      Temps:          8       0       0       0       0       0       0       0       0
 35998 ;;      Totals:         8       0       0       0       0       0       0       0       0
 35999 ;;Total ram usage:        8 bytes
 36000 ;; Hardware stack levels used:    1
 36001 ;; Hardware stack levels required when called:    6
 36002 ;; This function calls:
 36003 ;;		_INT1_ISR
 36004 ;;		_INT2_ISR
 36005 ;;		_INT3_ISR
 36006 ;;		_PIN_MANAGER_IOC
 36007 ;;		_TMR1_ISR
 36008 ;; This function is called by:
 36009 ;;		Interrupt level 2
 36010 ;; This function uses a non-reentrant model
 36011 ;;
 36012                           
 36013                           	psect	intcode
 36014  000008                     __pintcode:
 36015                           	opt stack 0
 36016  000008                     _INTERRUPT_InterruptManager:
 36017                           	opt stack 12
 36018                           
 36019                           ; BSR set to: 0
 36020                           ;incstack = 0
 36021  000008  CFFA F028          	movff	pclath,??_INTERRUPT_InterruptManager
 36022  00000C  CFFB F029          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 36023  000010  CFE1 F02A          	movff	fsr1l,??_INTERRUPT_InterruptManager+2
 36024  000014  CFE2 F02B          	movff	fsr1h,??_INTERRUPT_InterruptManager+3
 36025  000018  CFD9 F02C          	movff	fsr2l,??_INTERRUPT_InterruptManager+4
 36026  00001C  CFDA F02D          	movff	fsr2h,??_INTERRUPT_InterruptManager+5
 36027  000020  CFF3 F02E          	movff	prodl,??_INTERRUPT_InterruptManager+6
 36028  000024  CFF4 F02F          	movff	prodh,??_INTERRUPT_InterruptManager+7
 36029  000028  EE17  F054         	lfsr	1,___inthi_sp
 36030                           
 36031                           ;interrupt_manager.c: 60: if(PIE0bits.INT3IE == 1 && PIR0bits.INT3IF == 1)
 36032  00002C  010E               	movlb	14	; () banked
 36033  00002E  B729               	btfsc	41,3,b	;volatile
 36034                           
 36035                           ; BSR set to: 14
 36036  000030  A733               	btfss	51,3,b	;volatile
 36037  000032  D003               	goto	i2l2384
 36038                           
 36039                           ; BSR set to: 14
 36040                           ;interrupt_manager.c: 61: {
 36041                           ;interrupt_manager.c: 62: INT3_ISR();
 36042  000034  EC13  F031         	call	_INT3_ISR	;wreg free
 36043                           
 36044                           ;interrupt_manager.c: 63: }
 36045  000038  D019               	goto	i2l2394
 36046  00003A                     i2l2384:
 36047                           
 36048                           ; BSR set to: 14
 36049                           ;interrupt_manager.c: 64: else if(PIE0bits.INT1IE == 1 && PIR0bits.INT1IF == 1)
 36050  00003A  B329               	btfsc	41,1,b	;volatile
 36051                           
 36052                           ; BSR set to: 14
 36053  00003C  A333               	btfss	51,1,b	;volatile
 36054  00003E  D003               	goto	i2l2386
 36055                           
 36056                           ; BSR set to: 14
 36057                           ;interrupt_manager.c: 65: {
 36058                           ;interrupt_manager.c: 66: INT1_ISR();
 36059  000040  EC19  F031         	call	_INT1_ISR	;wreg free
 36060                           
 36061                           ;interrupt_manager.c: 67: }
 36062  000044  D013               	goto	i2l2394
 36063  000046                     i2l2386:
 36064                           
 36065                           ; BSR set to: 14
 36066                           ;interrupt_manager.c: 68: else if(PIE0bits.INT2IE == 1 && PIR0bits.INT2IF == 1)
 36067  000046  B529               	btfsc	41,2,b	;volatile
 36068                           
 36069                           ; BSR set to: 14
 36070  000048  A533               	btfss	51,2,b	;volatile
 36071  00004A  D003               	goto	i2l2388
 36072                           
 36073                           ; BSR set to: 14
 36074                           ;interrupt_manager.c: 69: {
 36075                           ;interrupt_manager.c: 70: INT2_ISR();
 36076  00004C  EC16  F031         	call	_INT2_ISR	;wreg free
 36077                           
 36078                           ;interrupt_manager.c: 71: }
 36079  000050  D00D               	goto	i2l2394
 36080  000052                     i2l2388:
 36081                           
 36082                           ; BSR set to: 14
 36083                           ;interrupt_manager.c: 72: else if(INTCONbits.PEIE == 1 && PIE5bits.TMR1IE == 1 && PIR5bi
      +                          ts.TMR1IF == 1)
 36084  000052  BCF2               	btfsc	intcon,6,c	;volatile
 36085                           
 36086                           ; BSR set to: 14
 36087  000054  A12E               	btfss	46,0,b	;volatile
 36088  000056  D005               	goto	i2l2390
 36089                           
 36090                           ; BSR set to: 14
 36091  000058  A138               	btfss	56,0,b	;volatile
 36092  00005A  D003               	goto	i2l2390
 36093                           
 36094                           ; BSR set to: 14
 36095                           ;interrupt_manager.c: 73: {
 36096                           ;interrupt_manager.c: 74: TMR1_ISR();
 36097  00005C  ECAE  F02E         	call	_TMR1_ISR	;wreg free
 36098                           
 36099                           ;interrupt_manager.c: 75: }
 36100  000060  D005               	goto	i2l2394
 36101  000062                     i2l2390:
 36102                           
 36103                           ; BSR set to: 14
 36104                           ;interrupt_manager.c: 76: else if(PIE0bits.IOCIE == 1 && PIR0bits.IOCIF == 1)
 36105  000062  B929               	btfsc	41,4,b	;volatile
 36106                           
 36107                           ; BSR set to: 14
 36108  000064  A933               	btfss	51,4,b	;volatile
 36109  000066  D002               	goto	i2l2394
 36110                           
 36111                           ; BSR set to: 14
 36112                           ;interrupt_manager.c: 77: {
 36113                           ;interrupt_manager.c: 78: PIN_MANAGER_IOC();
 36114  000068  ECFD  F030         	call	_PIN_MANAGER_IOC	;wreg free
 36115  00006C                     i2l2394:
 36116  00006C  C02F  FFF4         	movff	??_INTERRUPT_InterruptManager+7,prodh
 36117  000070  C02E  FFF3         	movff	??_INTERRUPT_InterruptManager+6,prodl
 36118  000074  C02D  FFDA         	movff	??_INTERRUPT_InterruptManager+5,fsr2h
 36119  000078  C02C  FFD9         	movff	??_INTERRUPT_InterruptManager+4,fsr2l
 36120  00007C  C02B  FFE2         	movff	??_INTERRUPT_InterruptManager+3,fsr1h
 36121  000080  C02A  FFE1         	movff	??_INTERRUPT_InterruptManager+2,fsr1l
 36122  000084  C029  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 36123  000088  C028  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 36124  00008C  0011               	retfie		f
 36125  00008E                     __end_of_INTERRUPT_InterruptManager:
 36126                           	opt stack 0
 36127                           tosu	equ	0xFFF
 36128                           tosh	equ	0xFFE
 36129                           tosl	equ	0xFFD
 36130                           pclatu	equ	0xFFB
 36131                           pclath	equ	0xFFA
 36132                           tblptru	equ	0xFF8
 36133                           tblptrh	equ	0xFF7
 36134                           tblptrl	equ	0xFF6
 36135                           tablat	equ	0xFF5
 36136                           prodh	equ	0xFF4
 36137                           prodl	equ	0xFF3
 36138                           intcon	equ	0xFF2
 36139                           indf0	equ	0xFEF
 36140                           postinc0	equ	0xFEE
 36141                           plusw0	equ	0xFEB
 36142                           fsr0h	equ	0xFEA
 36143                           fsr0l	equ	0xFE9
 36144                           wreg	equ	0xFE8
 36145                           postinc1	equ	0xFE6
 36146                           postdec1	equ	0xFE5
 36147                           plusw1	equ	0xFE3
 36148                           fsr1h	equ	0xFE2
 36149                           fsr1l	equ	0xFE1
 36150                           indf2	equ	0xFDF
 36151                           postinc2	equ	0xFDE
 36152                           postdec2	equ	0xFDD
 36153                           plusw2	equ	0xFDB
 36154                           fsr2h	equ	0xFDA
 36155                           fsr2l	equ	0xFD9
 36156                           status	equ	0xFD8
 36157                           
 36158 ;; *************** function _TMR1_ISR *****************
 36159 ;; Defined at:
 36160 ;;		line 161 in file "mcc_generated_files/tmr1.c"
 36161 ;; Parameters:    Size  Location     Type
 36162 ;;		None
 36163 ;; Auto vars:     Size  Location     Type
 36164 ;;		None
 36165 ;; Return value:  Size  Location     Type
 36166 ;;                  1    wreg      void 
 36167 ;; Registers used:
 36168 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 36169 ;; Tracked objects:
 36170 ;;		On entry : 3F/E
 36171 ;;		On exit  : 0/0
 36172 ;;		Unchanged: 0/0
 36173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 36174 ;;      Params:         0       0       0       0       0       0       0       0       0
 36175 ;;      Locals:         0       0       0       0       0       0       0       0       0
 36176 ;;      Temps:          0       0       0       0       0       0       0       0       0
 36177 ;;      Totals:         0       0       0       0       0       0       0       0       0
 36178 ;;Total ram usage:        0 bytes
 36179 ;; Hardware stack levels used:    1
 36180 ;; Hardware stack levels required when called:    5
 36181 ;; This function calls:
 36182 ;;		_TMR1_CallBack
 36183 ;; This function is called by:
 36184 ;;		_INTERRUPT_InterruptManager
 36185 ;; This function uses a non-reentrant model
 36186 ;;
 36187                           
 36188                           	psect	text196
 36189  005D5C                     __ptext196:
 36190                           	opt stack 0
 36191  005D5C                     _TMR1_ISR:
 36192                           	opt stack 12
 36193                           
 36194                           ; BSR set to: 14
 36195                           ;tmr1.c: 163: static volatile unsigned int CountCallBack = 0;
 36196                           ;tmr1.c: 166: PIR5bits.TMR1IF = 0;
 36197                           
 36198                           ;incstack = 0
 36199  005D5C  9138               	bcf	56,0,b	;volatile
 36200                           
 36201                           ;tmr1.c: 168: TMR1H = (timer1ReloadVal >> 8);
 36202  005D5E  C05D  FFCE         	movff	_timer1ReloadVal+1,4046	;volatile
 36203                           
 36204                           ;tmr1.c: 169: TMR1L = timer1ReloadVal;
 36205  005D62  C05C  FFCD         	movff	_timer1ReloadVal,4045	;volatile
 36206                           
 36207                           ; BSR set to: 14
 36208                           ;tmr1.c: 172: if (++CountCallBack >= 16)
 36209  005D66  4A3C               	infsnz	TMR1_ISR@CountCallBack,f,c	;volatile
 36210  005D68  2A3D               	incf	TMR1_ISR@CountCallBack+1,f,c	;volatile
 36211  005D6A  503D               	movf	TMR1_ISR@CountCallBack+1,w,c	;volatile
 36212  005D6C  E104               	bnz	i2u1963_40
 36213  005D6E  0E10               	movlw	16
 36214  005D70  5C3C               	subwf	TMR1_ISR@CountCallBack,w,c	;volatile
 36215  005D72  A0D8               	btfss	status,0,c
 36216  005D74  0012               	return	
 36217  005D76                     i2u1963_40:
 36218                           
 36219                           ; BSR set to: 14
 36220                           ;tmr1.c: 173: {
 36221                           ;tmr1.c: 175: TMR1_CallBack();
 36222  005D76  EC40  F02F         	call	_TMR1_CallBack	;wreg free
 36223                           
 36224                           ;tmr1.c: 178: CountCallBack = 0;
 36225  005D7A  6A3C               	clrf	TMR1_ISR@CountCallBack,c	;volatile
 36226  005D7C  6A3D               	clrf	TMR1_ISR@CountCallBack+1,c	;volatile
 36227  005D7E  0012               	return		;funcret
 36228  005D80                     __end_of_TMR1_ISR:
 36229                           	opt stack 0
 36230                           tosu	equ	0xFFF
 36231                           tosh	equ	0xFFE
 36232                           tosl	equ	0xFFD
 36233                           pclatu	equ	0xFFB
 36234                           pclath	equ	0xFFA
 36235                           tblptru	equ	0xFF8
 36236                           tblptrh	equ	0xFF7
 36237                           tblptrl	equ	0xFF6
 36238                           tablat	equ	0xFF5
 36239                           prodh	equ	0xFF4
 36240                           prodl	equ	0xFF3
 36241                           intcon	equ	0xFF2
 36242                           indf0	equ	0xFEF
 36243                           postinc0	equ	0xFEE
 36244                           plusw0	equ	0xFEB
 36245                           fsr0h	equ	0xFEA
 36246                           fsr0l	equ	0xFE9
 36247                           wreg	equ	0xFE8
 36248                           postinc1	equ	0xFE6
 36249                           postdec1	equ	0xFE5
 36250                           plusw1	equ	0xFE3
 36251                           fsr1h	equ	0xFE2
 36252                           fsr1l	equ	0xFE1
 36253                           indf2	equ	0xFDF
 36254                           postinc2	equ	0xFDE
 36255                           postdec2	equ	0xFDD
 36256                           plusw2	equ	0xFDB
 36257                           fsr2h	equ	0xFDA
 36258                           fsr2l	equ	0xFD9
 36259                           status	equ	0xFD8
 36260                           
 36261 ;; *************** function _TMR1_CallBack *****************
 36262 ;; Defined at:
 36263 ;;		line 182 in file "mcc_generated_files/tmr1.c"
 36264 ;; Parameters:    Size  Location     Type
 36265 ;;		None
 36266 ;; Auto vars:     Size  Location     Type
 36267 ;;		None
 36268 ;; Return value:  Size  Location     Type
 36269 ;;                  1    wreg      void 
 36270 ;; Registers used:
 36271 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 36272 ;; Tracked objects:
 36273 ;;		On entry : 3F/E
 36274 ;;		On exit  : 0/0
 36275 ;;		Unchanged: 0/0
 36276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 36277 ;;      Params:         0       0       0       0       0       0       0       0       0
 36278 ;;      Locals:         0       0       0       0       0       0       0       0       0
 36279 ;;      Temps:          0       0       0       0       0       0       0       0       0
 36280 ;;      Totals:         0       0       0       0       0       0       0       0       0
 36281 ;;Total ram usage:        0 bytes
 36282 ;; Hardware stack levels used:    1
 36283 ;; Hardware stack levels required when called:    4
 36284 ;; This function calls:
 36285 ;;		Absolute function
 36286 ;;		_TMR1_DefaultInterruptHandler
 36287 ;;		_TMR_ISR_lora
 36288 ;; This function is called by:
 36289 ;;		_TMR1_ISR
 36290 ;; This function uses a non-reentrant model
 36291 ;;
 36292                           
 36293                           	psect	text197
 36294  005E80                     __ptext197:
 36295                           	opt stack 0
 36296  005E80                     _TMR1_CallBack:
 36297                           	opt stack 12
 36298                           
 36299                           ; BSR set to: 14
 36300                           ;tmr1.c: 185: if(TMR1_InterruptHandler)
 36301                           
 36302                           ;incstack = 0
 36303  005E80  0101               	movlb	1	; () banked
 36304  005E82  51F9               	movf	_TMR1_InterruptHandler& (0+255),w,b
 36305  005E84  11FA               	iorwf	(_TMR1_InterruptHandler+1)& (0+255),w,b
 36306  005E86  B4D8               	btfsc	status,2,c
 36307  005E88  0012               	return	
 36308                           
 36309                           ; BSR set to: 1
 36310                           ;tmr1.c: 186: {
 36311                           ;tmr1.c: 187: TMR1_InterruptHandler();
 36312  005E8A  0005               	push	
 36313  005E8C  6EFA               	movwf	pclath,c
 36314  005E8E  51F9               	movf	_TMR1_InterruptHandler& (0+255),w,b
 36315  005E90  6EFD               	movwf	tosl,c
 36316  005E92  51FA               	movf	(_TMR1_InterruptHandler+1)& (0+255),w,b
 36317  005E94  6EFE               	movwf	tosh,c
 36318  005E96  50F8               	movf	tblptru,w,c
 36319  005E98  6EFF               	movwf	tosu,c
 36320  005E9A  50FA               	movf	pclath,w,c
 36321  005E9C  0012               	return		;indir
 36322  005E9E                     __end_of_TMR1_CallBack:
 36323                           	opt stack 0
 36324                           tosu	equ	0xFFF
 36325                           tosh	equ	0xFFE
 36326                           tosl	equ	0xFFD
 36327                           pclatu	equ	0xFFB
 36328                           pclath	equ	0xFFA
 36329                           tblptru	equ	0xFF8
 36330                           tblptrh	equ	0xFF7
 36331                           tblptrl	equ	0xFF6
 36332                           tablat	equ	0xFF5
 36333                           prodh	equ	0xFF4
 36334                           prodl	equ	0xFF3
 36335                           intcon	equ	0xFF2
 36336                           indf0	equ	0xFEF
 36337                           postinc0	equ	0xFEE
 36338                           plusw0	equ	0xFEB
 36339                           fsr0h	equ	0xFEA
 36340                           fsr0l	equ	0xFE9
 36341                           wreg	equ	0xFE8
 36342                           postinc1	equ	0xFE6
 36343                           postdec1	equ	0xFE5
 36344                           plusw1	equ	0xFE3
 36345                           fsr1h	equ	0xFE2
 36346                           fsr1l	equ	0xFE1
 36347                           indf2	equ	0xFDF
 36348                           postinc2	equ	0xFDE
 36349                           postdec2	equ	0xFDD
 36350                           plusw2	equ	0xFDB
 36351                           fsr2h	equ	0xFDA
 36352                           fsr2l	equ	0xFD9
 36353                           status	equ	0xFD8
 36354                           
 36355 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 36356 ;; Defined at:
 36357 ;;		line 195 in file "mcc_generated_files/tmr1.c"
 36358 ;; Parameters:    Size  Location     Type
 36359 ;;		None
 36360 ;; Auto vars:     Size  Location     Type
 36361 ;;		None
 36362 ;; Return value:  Size  Location     Type
 36363 ;;                  1    wreg      void 
 36364 ;; Registers used:
 36365 ;;		None
 36366 ;; Tracked objects:
 36367 ;;		On entry : 3F/1
 36368 ;;		On exit  : 3F/1
 36369 ;;		Unchanged: 3F/0
 36370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 36371 ;;      Params:         0       0       0       0       0       0       0       0       0
 36372 ;;      Locals:         0       0       0       0       0       0       0       0       0
 36373 ;;      Temps:          0       0       0       0       0       0       0       0       0
 36374 ;;      Totals:         0       0       0       0       0       0       0       0       0
 36375 ;;Total ram usage:        0 bytes
 36376 ;; Hardware stack levels used:    1
 36377 ;; This function calls:
 36378 ;;		Nothing
 36379 ;; This function is called by:
 36380 ;;		_TMR1_Initialize
 36381 ;;		_TMR1_CallBack
 36382 ;; This function uses a non-reentrant model
 36383 ;;
 36384                           
 36385                           	psect	text198
 36386  006268                     __ptext198:
 36387                           	opt stack 0
 36388  006268                     _TMR1_DefaultInterruptHandler:
 36389                           	opt stack 15
 36390                           
 36391                           ; BSR set to: 1
 36392                           
 36393                           ;incstack = 0
 36394  006268  0012               	return		;funcret
 36395  00626A                     __end_of_TMR1_DefaultInterruptHandler:
 36396                           	opt stack 0
 36397                           tosu	equ	0xFFF
 36398                           tosh	equ	0xFFE
 36399                           tosl	equ	0xFFD
 36400                           pclatu	equ	0xFFB
 36401                           pclath	equ	0xFFA
 36402                           tblptru	equ	0xFF8
 36403                           tblptrh	equ	0xFF7
 36404                           tblptrl	equ	0xFF6
 36405                           tablat	equ	0xFF5
 36406                           prodh	equ	0xFF4
 36407                           prodl	equ	0xFF3
 36408                           intcon	equ	0xFF2
 36409                           indf0	equ	0xFEF
 36410                           postinc0	equ	0xFEE
 36411                           plusw0	equ	0xFEB
 36412                           fsr0h	equ	0xFEA
 36413                           fsr0l	equ	0xFE9
 36414                           wreg	equ	0xFE8
 36415                           postinc1	equ	0xFE6
 36416                           postdec1	equ	0xFE5
 36417                           plusw1	equ	0xFE3
 36418                           fsr1h	equ	0xFE2
 36419                           fsr1l	equ	0xFE1
 36420                           indf2	equ	0xFDF
 36421                           postinc2	equ	0xFDE
 36422                           postdec2	equ	0xFDD
 36423                           plusw2	equ	0xFDB
 36424                           fsr2h	equ	0xFDA
 36425                           fsr2l	equ	0xFD9
 36426                           status	equ	0xFD8
 36427                           
 36428 ;; *************** function _TMR_ISR_lora *****************
 36429 ;; Defined at:
 36430 ;;		line 59 in file "mcc_generated_files/LoRaWAN/tmr_lora_addons.c"
 36431 ;; Parameters:    Size  Location     Type
 36432 ;;		None
 36433 ;; Auto vars:     Size  Location     Type
 36434 ;;		None
 36435 ;; Return value:  Size  Location     Type
 36436 ;;                  1    wreg      void 
 36437 ;; Registers used:
 36438 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 36439 ;; Tracked objects:
 36440 ;;		On entry : 3F/1
 36441 ;;		On exit  : 0/0
 36442 ;;		Unchanged: 0/0
 36443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 36444 ;;      Params:         0       0       0       0       0       0       0       0       0
 36445 ;;      Locals:         0       0       0       0       0       0       0       0       0
 36446 ;;      Temps:          0       0       0       0       0       0       0       0       0
 36447 ;;      Totals:         0       0       0       0       0       0       0       0       0
 36448 ;;Total ram usage:        0 bytes
 36449 ;; Hardware stack levels used:    1
 36450 ;; Hardware stack levels required when called:    3
 36451 ;; This function calls:
 36452 ;;		i2_SwTimersInterrupt
 36453 ;;		i2_TMR_SwapTimer
 36454 ;; This function is called by:
 36455 ;;		_TMR_ISR_Lora_Init
 36456 ;;		_TMR1_CallBack
 36457 ;; This function uses a non-reentrant model
 36458 ;;
 36459                           
 36460                           	psect	text199
 36461  005276                     __ptext199:
 36462                           	opt stack 0
 36463  005276                     _TMR_ISR_lora:
 36464                           	opt stack 12
 36465                           
 36466                           ; BSR set to: 1
 36467                           ;tmr_lora_addons.c: 61: timerOverflow = 1;
 36468                           
 36469                           ; BSR set to: 1
 36470                           ;incstack = 0
 36471  005276  0E01               	movlw	1
 36472  005278  6E44               	movwf	_timerOverflow,c	;volatile
 36473                           
 36474                           ; BSR set to: 1
 36475                           ;tmr_lora_addons.c: 63: ticksToScheduledInterrupt = SwTimersInterrupt();
 36476  00527A  EC90  F020         	call	i2_SwTimersInterrupt	;wreg free
 36477  00527E  C017  F058         	movff	?i2_SwTimersInterrupt,_ticksToScheduledInterrupt	;volatile
 36478  005282  C018  F059         	movff	?i2_SwTimersInterrupt+1,_ticksToScheduledInterrupt+1	;volatile
 36479  005286  C019  F05A         	movff	?i2_SwTimersInterrupt+2,_ticksToScheduledInterrupt+2	;volatile
 36480  00528A  C01A  F05B         	movff	?i2_SwTimersInterrupt+3,_ticksToScheduledInterrupt+3	;volatile
 36481                           
 36482                           ; BSR set to: 0
 36483                           ;tmr_lora_addons.c: 65: if (ticksToScheduledInterrupt < ((uint32_t)0x10000))
 36484  00528E  505B               	movf	_ticksToScheduledInterrupt+3,w,c	;volatile
 36485  005290  E114               	bnz	i2l2173
 36486  005292  045A               	decf	_ticksToScheduledInterrupt+2,w,c	;volatile
 36487  005294  B0D8               	btfsc	status,0,c
 36488  005296  0012               	return	
 36489                           
 36490                           ; BSR set to: 0
 36491                           ;tmr_lora_addons.c: 66: {
 36492                           ;tmr_lora_addons.c: 67: reloadVal = ((uint32_t)0x10000) - ticksToScheduledInterrupt;
 36493  005298  5058               	movf	_ticksToScheduledInterrupt,w,c	;volatile
 36494  00529A  0800               	sublw	0
 36495  00529C  6FFD               	movwf	_reloadVal& (0+255),b	;volatile
 36496  00529E  5059               	movf	_ticksToScheduledInterrupt+1,w,c	;volatile
 36497  0052A0  D80D               	call	PL424	;call to abstracted procedure
 36498                           
 36499                           ; BSR set to: 0
 36500                           ;tmr_lora_addons.c: 68: ticksAdded = TMR_SwapTimer(reloadVal);
 36501  0052A2  C0FD  F007         	movff	_reloadVal,i2TMR_SwapTimer@timerVal	;volatile
 36502  0052A6  C0FE  F008         	movff	_reloadVal+1,i2TMR_SwapTimer@timerVal+1	;volatile
 36503  0052AA  EC1F  F02B         	call	i2_TMR_SwapTimer	;wreg free
 36504  0052AE  C007  F038         	movff	?i2_TMR_SwapTimer,_ticksAdded	;volatile
 36505  0052B2  C008  F039         	movff	?i2_TMR_SwapTimer+1,_ticksAdded+1	;volatile
 36506  0052B6  6A3A               	clrf	_ticksAdded+2,c	;volatile
 36507  0052B8  6A3B               	clrf	_ticksAdded+3,c	;volatile
 36508  0052BA                     i2l2173:
 36509  0052BA  0012               	return		;funcret
 36510  0052BC                     __end_of_TMR_ISR_lora:
 36511                           	opt stack 0
 36512  0052BC                     PL424:
 36513                           	opt stack 17
 36514  0052BC  A0D8               	btfss	status,0,c
 36515  0052BE  2AE8               	incf	wreg,f,c
 36516  0052C0  0800               	sublw	0
 36517  0052C2  6FFE               	movwf	(_reloadVal+1)& (0+255),b	;volatile
 36518  0052C4  0012               	return	
 36519  0052C6                     __end_ofPL424:
 36520                           	opt stack 0
 36521                           tosu	equ	0xFFF
 36522                           tosh	equ	0xFFE
 36523                           tosl	equ	0xFFD
 36524                           pclatu	equ	0xFFB
 36525                           pclath	equ	0xFFA
 36526                           tblptru	equ	0xFF8
 36527                           tblptrh	equ	0xFF7
 36528                           tblptrl	equ	0xFF6
 36529                           tablat	equ	0xFF5
 36530                           prodh	equ	0xFF4
 36531                           prodl	equ	0xFF3
 36532                           intcon	equ	0xFF2
 36533                           indf0	equ	0xFEF
 36534                           postinc0	equ	0xFEE
 36535                           plusw0	equ	0xFEB
 36536                           fsr0h	equ	0xFEA
 36537                           fsr0l	equ	0xFE9
 36538                           wreg	equ	0xFE8
 36539                           postinc1	equ	0xFE6
 36540                           postdec1	equ	0xFE5
 36541                           plusw1	equ	0xFE3
 36542                           fsr1h	equ	0xFE2
 36543                           fsr1l	equ	0xFE1
 36544                           indf2	equ	0xFDF
 36545                           postinc2	equ	0xFDE
 36546                           postdec2	equ	0xFDD
 36547                           plusw2	equ	0xFDB
 36548                           fsr2h	equ	0xFDA
 36549                           fsr2l	equ	0xFD9
 36550                           status	equ	0xFD8
 36551                           
 36552 ;; *************** function i2_TMR_SwapTimer *****************
 36553 ;; Defined at:
 36554 ;;		line 112 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 36555 ;; Parameters:    Size  Location     Type
 36556 ;;  timerVal        2    6[COMRAM] unsigned int 
 36557 ;; Auto vars:     Size  Location     Type
 36558 ;;		None
 36559 ;; Return value:  Size  Location     Type
 36560 ;;                  2    6[COMRAM] unsigned int 
 36561 ;; Registers used:
 36562 ;;		wreg, status,2, status,0, cstack
 36563 ;; Tracked objects:
 36564 ;;		On entry : 3F/0
 36565 ;;		On exit  : 0/0
 36566 ;;		Unchanged: 0/0
 36567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 36568 ;;      Params:         2       0       0       0       0       0       0       0       0
 36569 ;;      Locals:         0       0       0       0       0       0       0       0       0
 36570 ;;      Temps:          0       0       0       0       0       0       0       0       0
 36571 ;;      Totals:         2       0       0       0       0       0       0       0       0
 36572 ;;Total ram usage:        2 bytes
 36573 ;; Hardware stack levels used:    1
 36574 ;; Hardware stack levels required when called:    1
 36575 ;; This function calls:
 36576 ;;		i2_TMR1_ReadTimer
 36577 ;;		i2_TMR1_WriteTimer
 36578 ;; This function is called by:
 36579 ;;		_TMR_ISR_lora
 36580 ;; This function uses a non-reentrant model
 36581 ;;
 36582                           
 36583                           	psect	text200
 36584  00563E                     __ptext200:
 36585                           	opt stack 0
 36586  00563E                     i2_TMR_SwapTimer:
 36587                           	opt stack 13
 36588                           
 36589                           ; BSR set to: 0
 36590                           ;sw_timer.c: 114: static uint16_t oldVal;
 36591                           ;sw_timer.c: 115: static uint16_t retVal;
 36592                           ;sw_timer.c: 117: oldVal = TMR1_ReadTimer();
 36593                           
 36594                           ;incstack = 0
 36595  00563E  EC12  F02F         	call	i2_TMR1_ReadTimer	;wreg free
 36596  005642  C001  F040         	movff	?i2_TMR1_ReadTimer,TMR_SwapTimer@oldVal
 36597  005646  C002  F041         	movff	?i2_TMR1_ReadTimer+1,TMR_SwapTimer@oldVal+1
 36598  00564A                     i2l10550:
 36599  00564A  EC12  F02F         	call	i2_TMR1_ReadTimer	;wreg free
 36600  00564E  5040               	movf	TMR_SwapTimer@oldVal,w,c
 36601  005650  1801               	xorwf	?i2_TMR1_ReadTimer,w,c
 36602  005652  E103               	bnz	i2u1101_40
 36603  005654  5041               	movf	TMR_SwapTimer@oldVal+1,w,c
 36604  005656  1802               	xorwf	?i2_TMR1_ReadTimer+1,w,c
 36605  005658  E0F8               	bz	i2l10550
 36606  00565A                     i2u1101_40:
 36607                           
 36608                           ;sw_timer.c: 125: TMR1_WriteTimer(timerVal);
 36609  00565A  C007  F001         	movff	i2TMR_SwapTimer@timerVal,i2TMR1_WriteTimer@timerVal
 36610  00565E  C008  F002         	movff	i2TMR_SwapTimer@timerVal+1,i2TMR1_WriteTimer@timerVal+1
 36611  005662  ECF7  F02F         	call	i2_TMR1_WriteTimer	;wreg free
 36612                           
 36613                           ;sw_timer.c: 128: oldVal++;
 36614                           
 36615                           ;sw_timer.c: 130: retVal = oldVal;
 36616  005666  D805               	call	PL296	;call to abstracted procedure
 36617                           
 36618                           ;sw_timer.c: 132: return retVal;
 36619  005668  C03E  F007         	movff	TMR_SwapTimer@retVal,?i2_TMR_SwapTimer
 36620  00566C  C03F  F008         	movff	TMR_SwapTimer@retVal+1,?i2_TMR_SwapTimer+1
 36621  005670  0012               	return		;funcret
 36622  005672                     __end_ofi2_TMR_SwapTimer:
 36623                           	opt stack 0
 36624  005672                     PL296:
 36625                           	opt stack 17
 36626  005672  4A40               	infsnz	TMR_SwapTimer@oldVal,f,c
 36627  005674  2A41               	incf	TMR_SwapTimer@oldVal+1,f,c
 36628  005676  C040  F03E         	movff	TMR_SwapTimer@oldVal,TMR_SwapTimer@retVal
 36629  00567A  C041  F03F         	movff	TMR_SwapTimer@oldVal+1,TMR_SwapTimer@retVal+1
 36630  00567E  0012               	return	
 36631  005680                     __end_ofPL296:
 36632                           	opt stack 0
 36633                           tosu	equ	0xFFF
 36634                           tosh	equ	0xFFE
 36635                           tosl	equ	0xFFD
 36636                           pclatu	equ	0xFFB
 36637                           pclath	equ	0xFFA
 36638                           tblptru	equ	0xFF8
 36639                           tblptrh	equ	0xFF7
 36640                           tblptrl	equ	0xFF6
 36641                           tablat	equ	0xFF5
 36642                           prodh	equ	0xFF4
 36643                           prodl	equ	0xFF3
 36644                           intcon	equ	0xFF2
 36645                           indf0	equ	0xFEF
 36646                           postinc0	equ	0xFEE
 36647                           plusw0	equ	0xFEB
 36648                           fsr0h	equ	0xFEA
 36649                           fsr0l	equ	0xFE9
 36650                           wreg	equ	0xFE8
 36651                           postinc1	equ	0xFE6
 36652                           postdec1	equ	0xFE5
 36653                           plusw1	equ	0xFE3
 36654                           fsr1h	equ	0xFE2
 36655                           fsr1l	equ	0xFE1
 36656                           indf2	equ	0xFDF
 36657                           postinc2	equ	0xFDE
 36658                           postdec2	equ	0xFDD
 36659                           plusw2	equ	0xFDB
 36660                           fsr2h	equ	0xFDA
 36661                           fsr2l	equ	0xFD9
 36662                           status	equ	0xFD8
 36663                           
 36664 ;; *************** function i2_TMR1_WriteTimer *****************
 36665 ;; Defined at:
 36666 ;;		line 122 in file "mcc_generated_files/tmr1.c"
 36667 ;; Parameters:    Size  Location     Type
 36668 ;;  timerVal        2    0[COMRAM] unsigned int 
 36669 ;; Auto vars:     Size  Location     Type
 36670 ;;		None
 36671 ;; Return value:  Size  Location     Type
 36672 ;;                  1    wreg      void 
 36673 ;; Registers used:
 36674 ;;		None
 36675 ;; Tracked objects:
 36676 ;;		On entry : 0/0
 36677 ;;		On exit  : 0/0
 36678 ;;		Unchanged: 0/0
 36679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 36680 ;;      Params:         2       0       0       0       0       0       0       0       0
 36681 ;;      Locals:         0       0       0       0       0       0       0       0       0
 36682 ;;      Temps:          0       0       0       0       0       0       0       0       0
 36683 ;;      Totals:         2       0       0       0       0       0       0       0       0
 36684 ;;Total ram usage:        2 bytes
 36685 ;; Hardware stack levels used:    1
 36686 ;; This function calls:
 36687 ;;		Nothing
 36688 ;; This function is called by:
 36689 ;;		i2_TMR_SwapTimer
 36690 ;; This function uses a non-reentrant model
 36691 ;;
 36692                           
 36693                           	psect	text201
 36694  005FEE                     __ptext201:
 36695                           	opt stack 0
 36696  005FEE                     i2_TMR1_WriteTimer:
 36697                           	opt stack 13
 36698                           
 36699                           ;tmr1.c: 124: if (T1CONbits.nT1SYNC == 1)
 36700                           
 36701                           ;incstack = 0
 36702  005FEE  A4CF               	btfss	4047,2,c	;volatile
 36703  005FF0  D005               	goto	PL388
 36704                           
 36705                           ;tmr1.c: 125: {
 36706                           ;tmr1.c: 127: T1CONbits.TMR1ON = 0;
 36707  005FF2  90CF               	bcf	4047,0,c	;volatile
 36708                           
 36709                           ;tmr1.c: 130: TMR1H = (timerVal >> 8);
 36710                           
 36711                           ;tmr1.c: 131: TMR1L = timerVal;
 36712  005FF4  D803               	call	PL388	;call to abstracted procedure
 36713                           
 36714                           ;tmr1.c: 134: T1CONbits.TMR1ON =1;
 36715  005FF6  80CF               	bsf	4047,0,c	;volatile
 36716                           
 36717                           ;tmr1.c: 135: }
 36718  005FF8  0012               	return	
 36719  005FFA                     i2l2297:
 36720                           
 36721                           ;tmr1.c: 136: else
 36722                           ;tmr1.c: 137: {
 36723                           ;tmr1.c: 139: TMR1H = (timerVal >> 8);
 36724                           
 36725                           ;tmr1.c: 140: TMR1L = timerVal;
 36726  005FFA  D000               	goto	PL388	;call to abstracted procedure
 36727  005FFC                     __end_ofi2_TMR1_WriteTimer:
 36728                           	opt stack 0
 36729  005FFC                     PL388:
 36730                           	opt stack 13
 36731  005FFC  C002  FFCE         	movff	i2TMR1_WriteTimer@timerVal+1,4046	;volatile
 36732  006000  C001  FFCD         	movff	i2TMR1_WriteTimer@timerVal,4045	;volatile
 36733  006004  0012               	return	
 36734  006006                     __end_ofPL388:
 36735                           	opt stack 0
 36736                           tosu	equ	0xFFF
 36737                           tosh	equ	0xFFE
 36738                           tosl	equ	0xFFD
 36739                           pclatu	equ	0xFFB
 36740                           pclath	equ	0xFFA
 36741                           tblptru	equ	0xFF8
 36742                           tblptrh	equ	0xFF7
 36743                           tblptrl	equ	0xFF6
 36744                           tablat	equ	0xFF5
 36745                           prodh	equ	0xFF4
 36746                           prodl	equ	0xFF3
 36747                           intcon	equ	0xFF2
 36748                           indf0	equ	0xFEF
 36749                           postinc0	equ	0xFEE
 36750                           plusw0	equ	0xFEB
 36751                           fsr0h	equ	0xFEA
 36752                           fsr0l	equ	0xFE9
 36753                           wreg	equ	0xFE8
 36754                           postinc1	equ	0xFE6
 36755                           postdec1	equ	0xFE5
 36756                           plusw1	equ	0xFE3
 36757                           fsr1h	equ	0xFE2
 36758                           fsr1l	equ	0xFE1
 36759                           indf2	equ	0xFDF
 36760                           postinc2	equ	0xFDE
 36761                           postdec2	equ	0xFDD
 36762                           plusw2	equ	0xFDB
 36763                           fsr2h	equ	0xFDA
 36764                           fsr2l	equ	0xFD9
 36765                           status	equ	0xFD8
 36766                           
 36767 ;; *************** function i2_SwTimersInterrupt *****************
 36768 ;; Defined at:
 36769 ;;		line 287 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 36770 ;; Parameters:    Size  Location     Type
 36771 ;;		None
 36772 ;; Auto vars:     Size  Location     Type
 36773 ;;  SwTimersInte    4   34[COMRAM] unsigned long 
 36774 ;;  SwTimersInte    4   30[COMRAM] unsigned long 
 36775 ;;  SwTimersInte    1   38[COMRAM] unsigned char 
 36776 ;; Return value:  Size  Location     Type
 36777 ;;                  4   22[COMRAM] unsigned long 
 36778 ;; Registers used:
 36779 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 36780 ;; Tracked objects:
 36781 ;;		On entry : 3F/1
 36782 ;;		On exit  : 3F/0
 36783 ;;		Unchanged: 0/0
 36784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 36785 ;;      Params:         4       0       0       0       0       0       0       0       0
 36786 ;;      Locals:         9       0       0       0       0       0       0       0       0
 36787 ;;      Temps:          4       0       0       0       0       0       0       0       0
 36788 ;;      Totals:        17       0       0       0       0       0       0       0       0
 36789 ;;Total ram usage:       17 bytes
 36790 ;; Hardware stack levels used:    1
 36791 ;; Hardware stack levels required when called:    2
 36792 ;; This function calls:
 36793 ;;		i2_TMR_GetDeltaTime
 36794 ;; This function is called by:
 36795 ;;		_TMR_ISR_lora
 36796 ;; This function uses a non-reentrant model
 36797 ;;
 36798                           
 36799                           	psect	text202
 36800  004120                     __ptext202:
 36801                           	opt stack 0
 36802  004120                     i2_SwTimersInterrupt:
 36803                           	opt stack 12
 36804                           
 36805                           ; BSR set to: 1
 36806                           ;sw_timer.c: 289: uint8_t i;
 36807                           ;sw_timer.c: 290: uint32_t timeElapsed;
 36808                           ;sw_timer.c: 291: uint32_t ticksToNextTimerEvent = 0xFFFFFFFF;
 36809                           
 36810                           ;incstack = 0
 36811  004120  6823               	setf	i2SwTimersInterrupt@ticksToNextTimerEvent,c
 36812  004122  6824               	setf	i2SwTimersInterrupt@ticksToNextTimerEvent+1,c
 36813  004124  6825               	setf	i2SwTimersInterrupt@ticksToNextTimerEvent+2,c
 36814  004126  6826               	setf	i2SwTimersInterrupt@ticksToNextTimerEvent+3,c
 36815                           
 36816                           ; BSR set to: 1
 36817                           ;sw_timer.c: 295: timeElapsed = TMR_GetDeltaTime();
 36818  004128  EC20  F01C         	call	i2_TMR_GetDeltaTime	;wreg free
 36819  00412C  C007  F01F         	movff	?i2_TMR_GetDeltaTime,i2SwTimersInterrupt@timeElapsed
 36820  004130  C008  F020         	movff	?i2_TMR_GetDeltaTime+1,i2SwTimersInterrupt@timeElapsed+1
 36821  004134  C009  F021         	movff	?i2_TMR_GetDeltaTime+2,i2SwTimersInterrupt@timeElapsed+2
 36822  004138  C00A  F022         	movff	?i2_TMR_GetDeltaTime+3,i2SwTimersInterrupt@timeElapsed+3
 36823                           
 36824                           ; BSR set to: 0
 36825                           ;sw_timer.c: 297: for (i = 0; i < allocatedTimers; i++)
 36826  00413C  6A27               	clrf	i2SwTimersInterrupt@i,c
 36827  00413E  D03A               	goto	i2l10580
 36828  004140                     i2l10568:
 36829                           
 36830                           ; BSR set to: 0
 36831                           ;sw_timer.c: 298: {
 36832                           ;sw_timer.c: 301: if (swTimers[i].running == 1)
 36833  004140  5027               	movf	i2SwTimersInterrupt@i,w,c
 36834  004142  ECDB  F023         	call	PL40	;call to abstracted procedure
 36835  004146  04DE               	decf	postinc2,w,c
 36836  004148  E134               	bnz	i2l10578
 36837                           
 36838                           ; BSR set to: 0
 36839                           ;sw_timer.c: 302: {
 36840                           ;sw_timer.c: 303: if (swTimers[i].ticksRemaining <= timeElapsed)
 36841  00414A  5027               	movf	i2SwTimersInterrupt@i,w,c
 36842  00414C  EC84  F01F         	call	PL10	;call to abstracted procedure
 36843  004150  50DE               	movf	postinc2,w,c
 36844  004152  5C1F               	subwf	i2SwTimersInterrupt@timeElapsed,w,c
 36845  004154  50DE               	movf	postinc2,w,c
 36846  004156  5820               	subwfb	i2SwTimersInterrupt@timeElapsed+1,w,c
 36847  004158  50DE               	movf	postinc2,w,c
 36848  00415A  5821               	subwfb	i2SwTimersInterrupt@timeElapsed+2,w,c
 36849  00415C  50DE               	movf	postinc2,w,c
 36850  00415E  5822               	subwfb	i2SwTimersInterrupt@timeElapsed+3,w,c
 36851  004160  E306               	bnc	i2l10574
 36852                           
 36853                           ; BSR set to: 0
 36854                           ;sw_timer.c: 304: {
 36855                           ;sw_timer.c: 305: swTimers[i].ticksRemaining = 0;
 36856  004162  5027               	movf	i2SwTimersInterrupt@i,w,c
 36857  004164  EC84  F01F         	call	PL10	;call to abstracted procedure
 36858  004168  ECA2  F01D         	call	PL182	;call to abstracted procedure
 36859                           
 36860                           ;sw_timer.c: 306: }
 36861  00416C  D022               	goto	i2l10578
 36862  00416E                     i2l10574:
 36863                           
 36864                           ; BSR set to: 0
 36865                           ;sw_timer.c: 307: else
 36866                           ;sw_timer.c: 308: {
 36867                           ;sw_timer.c: 309: swTimers[i].ticksRemaining -= timeElapsed;
 36868  00416E  5027               	movf	i2SwTimersInterrupt@i,w,c
 36869  004170  EC84  F01F         	call	PL10	;call to abstracted procedure
 36870  004174  501F               	movf	i2SwTimersInterrupt@timeElapsed,w,c
 36871  004176  5EDE               	subwf	postinc2,f,c
 36872  004178  5020               	movf	i2SwTimersInterrupt@timeElapsed+1,w,c
 36873  00417A  5ADE               	subwfb	postinc2,f,c
 36874  00417C  5021               	movf	i2SwTimersInterrupt@timeElapsed+2,w,c
 36875  00417E  5ADE               	subwfb	postinc2,f,c
 36876  004180  5022               	movf	i2SwTimersInterrupt@timeElapsed+3,w,c
 36877  004182  5ADE               	subwfb	postinc2,f,c
 36878                           
 36879                           ;sw_timer.c: 312: if (swTimers[i].ticksRemaining < ticksToNextTimerEvent)
 36880  004184  5027               	movf	i2SwTimersInterrupt@i,w,c
 36881  004186  EC84  F01F         	call	PL10	;call to abstracted procedure
 36882  00418A  5023               	movf	i2SwTimersInterrupt@ticksToNextTimerEvent,w,c
 36883  00418C  5CDE               	subwf	postinc2,w,c
 36884  00418E  5024               	movf	i2SwTimersInterrupt@ticksToNextTimerEvent+1,w,c
 36885  004190  58DE               	subwfb	postinc2,w,c
 36886  004192  5025               	movf	i2SwTimersInterrupt@ticksToNextTimerEvent+2,w,c
 36887  004194  58DE               	subwfb	postinc2,w,c
 36888  004196  5026               	movf	i2SwTimersInterrupt@ticksToNextTimerEvent+3,w,c
 36889  004198  58DE               	subwfb	postinc2,w,c
 36890  00419A  E20B               	bc	i2l10578
 36891                           
 36892                           ; BSR set to: 0
 36893                           ;sw_timer.c: 313: {
 36894                           ;sw_timer.c: 314: ticksToNextTimerEvent = swTimers[i].ticksRemaining;
 36895  00419C  5027               	movf	i2SwTimersInterrupt@i,w,c
 36896  00419E  EC84  F01F         	call	PL10	;call to abstracted procedure
 36897  0041A2  CFDE F023          	movff	postinc2,i2SwTimersInterrupt@ticksToNextTimerEvent
 36898  0041A6  CFDE F024          	movff	postinc2,i2SwTimersInterrupt@ticksToNextTimerEvent+1
 36899  0041AA  CFDE F025          	movff	postinc2,i2SwTimersInterrupt@ticksToNextTimerEvent+2
 36900  0041AE  CFDE F026          	movff	postinc2,i2SwTimersInterrupt@ticksToNextTimerEvent+3
 36901  0041B2                     i2l10578:
 36902                           
 36903                           ; BSR set to: 0
 36904  0041B2  2A27               	incf	i2SwTimersInterrupt@i,f,c
 36905  0041B4                     i2l10580:
 36906                           
 36907                           ; BSR set to: 0
 36908  0041B4  51FF               	movf	_allocatedTimers& (0+255),w,b	;volatile
 36909  0041B6  5C27               	subwf	i2SwTimersInterrupt@i,w,c
 36910  0041B8  E3C3               	bnc	i2l10568
 36911                           
 36912                           ; BSR set to: 0
 36913                           ;sw_timer.c: 315: }
 36914                           ;sw_timer.c: 316: }
 36915                           ;sw_timer.c: 317: }
 36916                           ;sw_timer.c: 318: }
 36917                           ;sw_timer.c: 320: return ticksToNextTimerEvent;
 36918  0041BA  C023  F017         	movff	i2SwTimersInterrupt@ticksToNextTimerEvent,?i2_SwTimersInterrupt
 36919  0041BE  C024  F018         	movff	i2SwTimersInterrupt@ticksToNextTimerEvent+1,?i2_SwTimersInterrupt+1
 36920  0041C2  C025  F019         	movff	i2SwTimersInterrupt@ticksToNextTimerEvent+2,?i2_SwTimersInterrupt+2
 36921  0041C6  C026  F01A         	movff	i2SwTimersInterrupt@ticksToNextTimerEvent+3,?i2_SwTimersInterrupt+3
 36922                           
 36923                           ; BSR set to: 0
 36924  0041CA  0012               	return		;funcret
 36925  0041CC                     __end_ofi2_SwTimersInterrupt:
 36926                           	opt stack 0
 36927                           tosu	equ	0xFFF
 36928                           tosh	equ	0xFFE
 36929                           tosl	equ	0xFFD
 36930                           pclatu	equ	0xFFB
 36931                           pclath	equ	0xFFA
 36932                           tblptru	equ	0xFF8
 36933                           tblptrh	equ	0xFF7
 36934                           tblptrl	equ	0xFF6
 36935                           tablat	equ	0xFF5
 36936                           prodh	equ	0xFF4
 36937                           prodl	equ	0xFF3
 36938                           intcon	equ	0xFF2
 36939                           indf0	equ	0xFEF
 36940                           postinc0	equ	0xFEE
 36941                           plusw0	equ	0xFEB
 36942                           fsr0h	equ	0xFEA
 36943                           fsr0l	equ	0xFE9
 36944                           wreg	equ	0xFE8
 36945                           postinc1	equ	0xFE6
 36946                           postdec1	equ	0xFE5
 36947                           plusw1	equ	0xFE3
 36948                           fsr1h	equ	0xFE2
 36949                           fsr1l	equ	0xFE1
 36950                           indf2	equ	0xFDF
 36951                           postinc2	equ	0xFDE
 36952                           postdec2	equ	0xFDD
 36953                           plusw2	equ	0xFDB
 36954                           fsr2h	equ	0xFDA
 36955                           fsr2l	equ	0xFD9
 36956                           status	equ	0xFD8
 36957                           
 36958 ;; *************** function i2_TMR_GetDeltaTime *****************
 36959 ;; Defined at:
 36960 ;;		line 88 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 36961 ;; Parameters:    Size  Location     Type
 36962 ;;		None
 36963 ;; Auto vars:     Size  Location     Type
 36964 ;;		None
 36965 ;; Return value:  Size  Location     Type
 36966 ;;                  4    6[COMRAM] unsigned long 
 36967 ;; Registers used:
 36968 ;;		wreg, status,2, status,0, cstack
 36969 ;; Tracked objects:
 36970 ;;		On entry : 3F/1
 36971 ;;		On exit  : 3F/0
 36972 ;;		Unchanged: 0/0
 36973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 36974 ;;      Params:         4       0       0       0       0       0       0       0       0
 36975 ;;      Locals:         0       0       0       0       0       0       0       0       0
 36976 ;;      Temps:         12       0       0       0       0       0       0       0       0
 36977 ;;      Totals:        16       0       0       0       0       0       0       0       0
 36978 ;;Total ram usage:       16 bytes
 36979 ;; Hardware stack levels used:    1
 36980 ;; Hardware stack levels required when called:    1
 36981 ;; This function calls:
 36982 ;;		i2_TMR1_ReadTimer
 36983 ;; This function is called by:
 36984 ;;		i2_SwTimersInterrupt
 36985 ;; This function uses a non-reentrant model
 36986 ;;
 36987                           
 36988                           	psect	text203
 36989  003840                     __ptext203:
 36990                           	opt stack 0
 36991  003840                     i2_TMR_GetDeltaTime:
 36992                           	opt stack 12
 36993                           
 36994                           ; BSR set to: 1
 36995                           ;sw_timer.c: 90: static uint32_t retVal;
 36996                           ;sw_timer.c: 91: static uint16_t tmrVal;
 36997                           ;sw_timer.c: 93: tmrVal = TMR1_ReadTimer();
 36998                           
 36999                           ; BSR set to: 0
 37000                           ;incstack = 0
 37001  003840  EC12  F02F         	call	i2_TMR1_ReadTimer	;wreg free
 37002  003844  C001  F042         	movff	?i2_TMR1_ReadTimer,TMR_GetDeltaTime@tmrVal
 37003  003848  C002  F043         	movff	?i2_TMR1_ReadTimer+1,TMR_GetDeltaTime@tmrVal+1
 37004                           
 37005                           ;sw_timer.c: 95: if (timerOverflow == 1)
 37006  00384C  0444               	decf	_timerOverflow,w,c	;volatile
 37007  00384E  E11E               	bnz	i2l9888
 37008                           
 37009                           ;sw_timer.c: 96: {
 37010                           ;sw_timer.c: 97: timerOverflow = 0;
 37011  003850  6A44               	clrf	_timerOverflow,c	;volatile
 37012                           
 37013                           ;sw_timer.c: 98: retVal = ((uint32_t)0x10000) - reloadVal + tmrVal - ticksAccounted + ti
      +                          cksAdded;
 37014  003852  D859               	call	PL214	;call to abstracted procedure
 37015  003854  A0D8               	btfss	status,0,c
 37016  003856  060D               	decf	(??i2_TMR_GetDeltaTime+2)& (0+255),f,c
 37017  003858  500D               	movf	(??i2_TMR_GetDeltaTime+2)& (0+255),w,c
 37018  00385A  6E0E               	movwf	(??i2_TMR_GetDeltaTime+3)& (0+255),c
 37019  00385C  D82D               	call	PL118	;call to abstracted procedure
 37020  00385E  6E13               	movwf	(??i2_TMR_GetDeltaTime+8)& (0+255),c
 37021  003860  5039               	movf	_ticksAdded+1,w,c	;volatile
 37022  003862  2010               	addwfc	??i2_TMR_GetDeltaTime+5,w,c
 37023  003864  6E14               	movwf	(??i2_TMR_GetDeltaTime+9)& (0+255),c
 37024  003866  503A               	movf	_ticksAdded+2,w,c	;volatile
 37025  003868  2011               	addwfc	??i2_TMR_GetDeltaTime+6,w,c
 37026  00386A  6E15               	movwf	(??i2_TMR_GetDeltaTime+10)& (0+255),c
 37027  00386C  503B               	movf	_ticksAdded+3,w,c	;volatile
 37028  00386E  2012               	addwfc	??i2_TMR_GetDeltaTime+7,w,c
 37029  003870  6E16               	movwf	(??i2_TMR_GetDeltaTime+11)& (0+255),c
 37030  003872  0E00               	movlw	0
 37031  003874  2413               	addwf	??i2_TMR_GetDeltaTime+8,w,c
 37032  003876  6E30               	movwf	TMR_GetDeltaTime@retVal,c
 37033  003878  0E00               	movlw	0
 37034  00387A  2014               	addwfc	??i2_TMR_GetDeltaTime+9,w,c
 37035  00387C  6E31               	movwf	TMR_GetDeltaTime@retVal+1,c
 37036  00387E  0E01               	movlw	1
 37037  003880  2015               	addwfc	??i2_TMR_GetDeltaTime+10,w,c
 37038  003882  6E32               	movwf	TMR_GetDeltaTime@retVal+2,c
 37039  003884  0E00               	movlw	0
 37040  003886  2016               	addwfc	??i2_TMR_GetDeltaTime+11,w,c
 37041                           
 37042                           ; BSR set to: 0
 37043                           ;sw_timer.c: 99: ticksAccounted = tmrVal;
 37044                           
 37045                           ; BSR set to: 0
 37046                           ;sw_timer.c: 100: ticksAdded = 0;
 37047                           
 37048                           ; BSR set to: 0
 37049                           ;sw_timer.c: 101: reloadVal = 0;
 37050  003888  D826               	call	PL138	;call to abstracted procedure
 37051                           
 37052                           ;sw_timer.c: 102: }
 37053  00388A  D00D               	goto	i2l9890
 37054  00388C                     i2l9888:
 37055                           
 37056                           ;sw_timer.c: 103: else
 37057                           ;sw_timer.c: 104: {
 37058                           ;sw_timer.c: 105: retVal = tmrVal - reloadVal - ticksAccounted + ticksAdded;
 37059  00388C  D83C               	call	PL214	;call to abstracted procedure
 37060  00388E  6A0E               	clrf	(??i2_TMR_GetDeltaTime+3)& (0+255),c
 37061  003890  D813               	call	PL118	;call to abstracted procedure
 37062  003892  6E30               	movwf	TMR_GetDeltaTime@retVal,c
 37063  003894  5039               	movf	_ticksAdded+1,w,c	;volatile
 37064  003896  2010               	addwfc	??i2_TMR_GetDeltaTime+5,w,c
 37065  003898  6E31               	movwf	TMR_GetDeltaTime@retVal+1,c
 37066  00389A  503A               	movf	_ticksAdded+2,w,c	;volatile
 37067  00389C  2011               	addwfc	??i2_TMR_GetDeltaTime+6,w,c
 37068  00389E  6E32               	movwf	TMR_GetDeltaTime@retVal+2,c
 37069  0038A0  503B               	movf	_ticksAdded+3,w,c	;volatile
 37070  0038A2  2012               	addwfc	??i2_TMR_GetDeltaTime+7,w,c
 37071                           
 37072                           ;sw_timer.c: 106: ticksAccounted += retVal;
 37073  0038A4  D826               	call	PL202	;call to abstracted procedure
 37074  0038A6                     i2l9890:
 37075                           
 37076                           ; BSR set to: 0
 37077                           ;sw_timer.c: 107: }
 37078                           ;sw_timer.c: 109: return retVal;
 37079  0038A6  C030  F007         	movff	TMR_GetDeltaTime@retVal,?i2_TMR_GetDeltaTime
 37080  0038AA  C031  F008         	movff	TMR_GetDeltaTime@retVal+1,?i2_TMR_GetDeltaTime+1
 37081  0038AE  C032  F009         	movff	TMR_GetDeltaTime@retVal+2,?i2_TMR_GetDeltaTime+2
 37082  0038B2  C033  F00A         	movff	TMR_GetDeltaTime@retVal+3,?i2_TMR_GetDeltaTime+3
 37083                           
 37084                           ; BSR set to: 0
 37085  0038B6  0012               	return		;funcret
 37086  0038B8                     __end_ofi2_TMR_GetDeltaTime:
 37087                           	opt stack 0
 37088  0038B8                     PL118:
 37089                           	opt stack 12
 37090  0038B8  5034               	movf	_ticksAccounted,w,c	;volatile
 37091  0038BA  5C0B               	subwf	??i2_TMR_GetDeltaTime,w,c
 37092  0038BC  6E0F               	movwf	(??i2_TMR_GetDeltaTime+4)& (0+255),c
 37093  0038BE  5035               	movf	_ticksAccounted+1,w,c	;volatile
 37094  0038C0  580C               	subwfb	??i2_TMR_GetDeltaTime+1,w,c
 37095  0038C2  6E10               	movwf	(??i2_TMR_GetDeltaTime+5)& (0+255),c
 37096  0038C4  5036               	movf	_ticksAccounted+2,w,c	;volatile
 37097  0038C6  580D               	subwfb	??i2_TMR_GetDeltaTime+2,w,c
 37098  0038C8  6E11               	movwf	(??i2_TMR_GetDeltaTime+6)& (0+255),c
 37099  0038CA  5037               	movf	_ticksAccounted+3,w,c	;volatile
 37100  0038CC  580E               	subwfb	??i2_TMR_GetDeltaTime+3,w,c
 37101  0038CE  6E12               	movwf	(??i2_TMR_GetDeltaTime+7)& (0+255),c
 37102  0038D0  5038               	movf	_ticksAdded,w,c	;volatile
 37103  0038D2  240F               	addwf	??i2_TMR_GetDeltaTime+4,w,c
 37104  0038D4  0012               	return	
 37105  0038D6                     __end_ofPL118:
 37106                           	opt stack 0
 37107  0038D6                     PL138:
 37108                           	opt stack 17
 37109  0038D6  6E33               	movwf	TMR_GetDeltaTime@retVal+3,c
 37110  0038D8  C042  F034         	movff	TMR_GetDeltaTime@tmrVal,_ticksAccounted	;volatile
 37111  0038DC  C043  F035         	movff	TMR_GetDeltaTime@tmrVal+1,_ticksAccounted+1	;volatile
 37112  0038E0  6A36               	clrf	_ticksAccounted+2,c	;volatile
 37113  0038E2  6A37               	clrf	_ticksAccounted+3,c	;volatile
 37114  0038E4  6A38               	clrf	_ticksAdded,c	;volatile
 37115  0038E6  6A39               	clrf	_ticksAdded+1,c	;volatile
 37116  0038E8  6A3A               	clrf	_ticksAdded+2,c	;volatile
 37117  0038EA  6A3B               	clrf	_ticksAdded+3,c	;volatile
 37118  0038EC  6BFD               	clrf	_reloadVal& (0+255),b	;volatile
 37119  0038EE  6BFE               	clrf	(_reloadVal+1)& (0+255),b	;volatile
 37120  0038F0  0012               	return	
 37121  0038F2                     __end_ofPL138:
 37122                           	opt stack 0
 37123  0038F2                     PL202:
 37124                           	opt stack 17
 37125  0038F2  6E33               	movwf	TMR_GetDeltaTime@retVal+3,c
 37126  0038F4  5030               	movf	TMR_GetDeltaTime@retVal,w,c
 37127  0038F6  2634               	addwf	_ticksAccounted,f,c	;volatile
 37128  0038F8  5031               	movf	TMR_GetDeltaTime@retVal+1,w,c
 37129  0038FA  2235               	addwfc	_ticksAccounted+1,f,c	;volatile
 37130  0038FC  5032               	movf	TMR_GetDeltaTime@retVal+2,w,c
 37131  0038FE  2236               	addwfc	_ticksAccounted+2,f,c	;volatile
 37132  003900  5033               	movf	TMR_GetDeltaTime@retVal+3,w,c
 37133  003902  2237               	addwfc	_ticksAccounted+3,f,c	;volatile
 37134  003904  0012               	return	
 37135  003906                     __end_ofPL202:
 37136                           	opt stack 0
 37137  003906                     PL214:
 37138                           	opt stack 12
 37139  003906  0100               	movlb	0	; () banked
 37140  003908  51FD               	movf	_reloadVal& (0+255),w,b	;volatile
 37141  00390A  5C42               	subwf	TMR_GetDeltaTime@tmrVal,w,c
 37142  00390C  6E0B               	movwf	??i2_TMR_GetDeltaTime& (0+255),c
 37143  00390E  51FE               	movf	(_reloadVal+1)& (0+255),w,b	;volatile
 37144  003910  5843               	subwfb	TMR_GetDeltaTime@tmrVal+1,w,c
 37145  003912  6E0C               	movwf	(??i2_TMR_GetDeltaTime+1)& (0+255),c
 37146  003914  6A0D               	clrf	(??i2_TMR_GetDeltaTime+2)& (0+255),c
 37147  003916  0012               	return	
 37148  003918                     __end_ofPL214:
 37149                           	opt stack 0
 37150                           tosu	equ	0xFFF
 37151                           tosh	equ	0xFFE
 37152                           tosl	equ	0xFFD
 37153                           pclatu	equ	0xFFB
 37154                           pclath	equ	0xFFA
 37155                           tblptru	equ	0xFF8
 37156                           tblptrh	equ	0xFF7
 37157                           tblptrl	equ	0xFF6
 37158                           tablat	equ	0xFF5
 37159                           prodh	equ	0xFF4
 37160                           prodl	equ	0xFF3
 37161                           intcon	equ	0xFF2
 37162                           indf0	equ	0xFEF
 37163                           postinc0	equ	0xFEE
 37164                           plusw0	equ	0xFEB
 37165                           fsr0h	equ	0xFEA
 37166                           fsr0l	equ	0xFE9
 37167                           wreg	equ	0xFE8
 37168                           postinc1	equ	0xFE6
 37169                           postdec1	equ	0xFE5
 37170                           plusw1	equ	0xFE3
 37171                           fsr1h	equ	0xFE2
 37172                           fsr1l	equ	0xFE1
 37173                           indf2	equ	0xFDF
 37174                           postinc2	equ	0xFDE
 37175                           postdec2	equ	0xFDD
 37176                           plusw2	equ	0xFDB
 37177                           fsr2h	equ	0xFDA
 37178                           fsr2l	equ	0xFD9
 37179                           status	equ	0xFD8
 37180                           
 37181 ;; *************** function i2_TMR1_ReadTimer *****************
 37182 ;; Defined at:
 37183 ;;		line 113 in file "mcc_generated_files/tmr1.c"
 37184 ;; Parameters:    Size  Location     Type
 37185 ;;		None
 37186 ;; Auto vars:     Size  Location     Type
 37187 ;;  TMR1_ReadTim    2    4[COMRAM] unsigned int 
 37188 ;; Return value:  Size  Location     Type
 37189 ;;                  2    0[COMRAM] unsigned int 
 37190 ;; Registers used:
 37191 ;;		wreg, status,2, status,0
 37192 ;; Tracked objects:
 37193 ;;		On entry : 0/0
 37194 ;;		On exit  : 0/0
 37195 ;;		Unchanged: 0/0
 37196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 37197 ;;      Params:         2       0       0       0       0       0       0       0       0
 37198 ;;      Locals:         2       0       0       0       0       0       0       0       0
 37199 ;;      Temps:          2       0       0       0       0       0       0       0       0
 37200 ;;      Totals:         6       0       0       0       0       0       0       0       0
 37201 ;;Total ram usage:        6 bytes
 37202 ;; Hardware stack levels used:    1
 37203 ;; This function calls:
 37204 ;;		Nothing
 37205 ;; This function is called by:
 37206 ;;		i2_TMR_GetDeltaTime
 37207 ;;		i2_TMR_SwapTimer
 37208 ;; This function uses a non-reentrant model
 37209 ;;
 37210                           
 37211                           	psect	text204
 37212  005E24                     __ptext204:
 37213                           	opt stack 0
 37214  005E24                     i2_TMR1_ReadTimer:
 37215                           	opt stack 13
 37216                           
 37217                           ;tmr1.c: 115: uint16_t readVal;
 37218                           ;tmr1.c: 117: readVal = (TMR1H << 8) | TMR1L;
 37219                           
 37220                           ; BSR set to: 0
 37221                           ;incstack = 0
 37222  005E24  50CD               	movf	4045,w,c	;volatile
 37223  005E26  CFCE F003          	movff	4046,??i2_TMR1_ReadTimer	;volatile
 37224  005E2A  6A04               	clrf	(??i2_TMR1_ReadTimer+1)& (0+255),c
 37225  005E2C  C003  F004         	movff	??i2_TMR1_ReadTimer,??i2_TMR1_ReadTimer+1
 37226  005E30  6A03               	clrf	??i2_TMR1_ReadTimer,c
 37227  005E32  1003               	iorwf	??i2_TMR1_ReadTimer,w,c
 37228  005E34  6E05               	movwf	i2TMR1_ReadTimer@readVal,c
 37229  005E36  5004               	movf	??i2_TMR1_ReadTimer+1,w,c
 37230  005E38  6E06               	movwf	i2TMR1_ReadTimer@readVal+1,c
 37231                           
 37232                           ;tmr1.c: 119: return readVal;
 37233  005E3A  C005  F001         	movff	i2TMR1_ReadTimer@readVal,?i2_TMR1_ReadTimer
 37234  005E3E  C006  F002         	movff	i2TMR1_ReadTimer@readVal+1,?i2_TMR1_ReadTimer+1
 37235  005E42  0012               	return		;funcret
 37236  005E44                     __end_ofi2_TMR1_ReadTimer:
 37237                           	opt stack 0
 37238                           tosu	equ	0xFFF
 37239                           tosh	equ	0xFFE
 37240                           tosl	equ	0xFFD
 37241                           pclatu	equ	0xFFB
 37242                           pclath	equ	0xFFA
 37243                           tblptru	equ	0xFF8
 37244                           tblptrh	equ	0xFF7
 37245                           tblptrl	equ	0xFF6
 37246                           tablat	equ	0xFF5
 37247                           prodh	equ	0xFF4
 37248                           prodl	equ	0xFF3
 37249                           intcon	equ	0xFF2
 37250                           indf0	equ	0xFEF
 37251                           postinc0	equ	0xFEE
 37252                           plusw0	equ	0xFEB
 37253                           fsr0h	equ	0xFEA
 37254                           fsr0l	equ	0xFE9
 37255                           wreg	equ	0xFE8
 37256                           postinc1	equ	0xFE6
 37257                           postdec1	equ	0xFE5
 37258                           plusw1	equ	0xFE3
 37259                           fsr1h	equ	0xFE2
 37260                           fsr1l	equ	0xFE1
 37261                           indf2	equ	0xFDF
 37262                           postinc2	equ	0xFDE
 37263                           postdec2	equ	0xFDD
 37264                           plusw2	equ	0xFDB
 37265                           fsr2h	equ	0xFDA
 37266                           fsr2l	equ	0xFD9
 37267                           status	equ	0xFD8
 37268                           
 37269 ;; *************** function _PIN_MANAGER_IOC *****************
 37270 ;; Defined at:
 37271 ;;		line 151 in file "mcc_generated_files/pin_manager.c"
 37272 ;; Parameters:    Size  Location     Type
 37273 ;;		None
 37274 ;; Auto vars:     Size  Location     Type
 37275 ;;		None
 37276 ;; Return value:  Size  Location     Type
 37277 ;;                  1    wreg      void 
 37278 ;; Registers used:
 37279 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 37280 ;; Tracked objects:
 37281 ;;		On entry : 3F/E
 37282 ;;		On exit  : 3F/E
 37283 ;;		Unchanged: 0/0
 37284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 37285 ;;      Params:         0       0       0       0       0       0       0       0       0
 37286 ;;      Locals:         0       0       0       0       0       0       0       0       0
 37287 ;;      Temps:          0       0       0       0       0       0       0       0       0
 37288 ;;      Totals:         0       0       0       0       0       0       0       0       0
 37289 ;;Total ram usage:        0 bytes
 37290 ;; Hardware stack levels used:    1
 37291 ;; Hardware stack levels required when called:    2
 37292 ;; This function calls:
 37293 ;;		_IOCBF4_ISR
 37294 ;; This function is called by:
 37295 ;;		_INTERRUPT_InterruptManager
 37296 ;; This function uses a non-reentrant model
 37297 ;;
 37298                           
 37299                           	psect	text205
 37300  0061FA                     __ptext205:
 37301                           	opt stack 0
 37302  0061FA                     _PIN_MANAGER_IOC:
 37303                           	opt stack 15
 37304                           
 37305                           ; BSR set to: 14
 37306                           ;pin_manager.c: 154: if(IOCBFbits.IOCBF4 == 1)
 37307                           
 37308                           ;incstack = 0
 37309  0061FA  B993               	btfsc	147,4,b	;volatile
 37310                           
 37311                           ; BSR set to: 14
 37312                           ;pin_manager.c: 155: {
 37313                           ;pin_manager.c: 156: IOCBF4_ISR();
 37314  0061FC  EC77  F02E         	call	_IOCBF4_ISR	;wreg free
 37315                           
 37316                           ; BSR set to: 14
 37317  006200  0012               	return		;funcret
 37318  006202                     __end_of_PIN_MANAGER_IOC:
 37319                           	opt stack 0
 37320                           tosu	equ	0xFFF
 37321                           tosh	equ	0xFFE
 37322                           tosl	equ	0xFFD
 37323                           pclatu	equ	0xFFB
 37324                           pclath	equ	0xFFA
 37325                           tblptru	equ	0xFF8
 37326                           tblptrh	equ	0xFF7
 37327                           tblptrl	equ	0xFF6
 37328                           tablat	equ	0xFF5
 37329                           prodh	equ	0xFF4
 37330                           prodl	equ	0xFF3
 37331                           intcon	equ	0xFF2
 37332                           indf0	equ	0xFEF
 37333                           postinc0	equ	0xFEE
 37334                           plusw0	equ	0xFEB
 37335                           fsr0h	equ	0xFEA
 37336                           fsr0l	equ	0xFE9
 37337                           wreg	equ	0xFE8
 37338                           postinc1	equ	0xFE6
 37339                           postdec1	equ	0xFE5
 37340                           plusw1	equ	0xFE3
 37341                           fsr1h	equ	0xFE2
 37342                           fsr1l	equ	0xFE1
 37343                           indf2	equ	0xFDF
 37344                           postinc2	equ	0xFDE
 37345                           postdec2	equ	0xFDD
 37346                           plusw2	equ	0xFDB
 37347                           fsr2h	equ	0xFDA
 37348                           fsr2l	equ	0xFD9
 37349                           status	equ	0xFD8
 37350                           
 37351 ;; *************** function _IOCBF4_ISR *****************
 37352 ;; Defined at:
 37353 ;;		line 165 in file "mcc_generated_files/pin_manager.c"
 37354 ;; Parameters:    Size  Location     Type
 37355 ;;		None
 37356 ;; Auto vars:     Size  Location     Type
 37357 ;;		None
 37358 ;; Return value:  Size  Location     Type
 37359 ;;                  1    wreg      void 
 37360 ;; Registers used:
 37361 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 37362 ;; Tracked objects:
 37363 ;;		On entry : 3F/E
 37364 ;;		On exit  : 3F/E
 37365 ;;		Unchanged: 0/0
 37366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 37367 ;;      Params:         0       0       0       0       0       0       0       0       0
 37368 ;;      Locals:         0       0       0       0       0       0       0       0       0
 37369 ;;      Temps:          0       0       0       0       0       0       0       0       0
 37370 ;;      Totals:         0       0       0       0       0       0       0       0       0
 37371 ;;Total ram usage:        0 bytes
 37372 ;; Hardware stack levels used:    1
 37373 ;; Hardware stack levels required when called:    1
 37374 ;; This function calls:
 37375 ;;		Absolute function
 37376 ;;		_DIO2_ISR_Lora
 37377 ;;		_IOCBF4_DefaultInterruptHandler
 37378 ;; This function is called by:
 37379 ;;		_PIN_MANAGER_IOC
 37380 ;; This function uses a non-reentrant model
 37381 ;;
 37382                           
 37383                           	psect	text206
 37384  005CEE                     __ptext206:
 37385                           	opt stack 0
 37386  005CEE                     _IOCBF4_ISR:
 37387                           	opt stack 15
 37388                           
 37389                           ; BSR set to: 14
 37390                           ;pin_manager.c: 170: if(IOCBF4_InterruptHandler)
 37391                           
 37392                           ; BSR set to: 14
 37393                           ;incstack = 0
 37394  005CEE  0101               	movlb	1	; () banked
 37395  005CF0  51F7               	movf	_IOCBF4_InterruptHandler& (0+255),w,b
 37396  005CF2  11F8               	iorwf	(_IOCBF4_InterruptHandler+1)& (0+255),w,b
 37397  005CF4  E00C               	bz	i2l16090
 37398                           
 37399                           ; BSR set to: 1
 37400                           ;pin_manager.c: 171: {
 37401                           ;pin_manager.c: 172: IOCBF4_InterruptHandler();
 37402  005CF6  D801               	call	i2u1956_48
 37403  005CF8  D00A               	goto	i2l16090
 37404  005CFA                     i2u1956_48:
 37405  005CFA  0005               	push	
 37406  005CFC  6EFA               	movwf	pclath,c
 37407  005CFE  51F7               	movf	_IOCBF4_InterruptHandler& (0+255),w,b
 37408  005D00  6EFD               	movwf	tosl,c
 37409  005D02  51F8               	movf	(_IOCBF4_InterruptHandler+1)& (0+255),w,b
 37410  005D04  6EFE               	movwf	tosh,c
 37411  005D06  50F8               	movf	tblptru,w,c
 37412  005D08  6EFF               	movwf	tosu,c
 37413  005D0A  50FA               	movf	pclath,w,c
 37414  005D0C  0012               	return		;indir
 37415  005D0E                     i2l16090:
 37416                           
 37417                           ;pin_manager.c: 173: }
 37418                           ;pin_manager.c: 174: IOCBFbits.IOCBF4 = 0;
 37419  005D0E  010E               	movlb	14	; () banked
 37420  005D10  9993               	bcf	147,4,b	;volatile
 37421                           
 37422                           ; BSR set to: 14
 37423  005D12  0012               	return		;funcret
 37424  005D14                     __end_of_IOCBF4_ISR:
 37425                           	opt stack 0
 37426                           tosu	equ	0xFFF
 37427                           tosh	equ	0xFFE
 37428                           tosl	equ	0xFFD
 37429                           pclatu	equ	0xFFB
 37430                           pclath	equ	0xFFA
 37431                           tblptru	equ	0xFF8
 37432                           tblptrh	equ	0xFF7
 37433                           tblptrl	equ	0xFF6
 37434                           tablat	equ	0xFF5
 37435                           prodh	equ	0xFF4
 37436                           prodl	equ	0xFF3
 37437                           intcon	equ	0xFF2
 37438                           indf0	equ	0xFEF
 37439                           postinc0	equ	0xFEE
 37440                           plusw0	equ	0xFEB
 37441                           fsr0h	equ	0xFEA
 37442                           fsr0l	equ	0xFE9
 37443                           wreg	equ	0xFE8
 37444                           postinc1	equ	0xFE6
 37445                           postdec1	equ	0xFE5
 37446                           plusw1	equ	0xFE3
 37447                           fsr1h	equ	0xFE2
 37448                           fsr1l	equ	0xFE1
 37449                           indf2	equ	0xFDF
 37450                           postinc2	equ	0xFDE
 37451                           postdec2	equ	0xFDD
 37452                           plusw2	equ	0xFDB
 37453                           fsr2h	equ	0xFDA
 37454                           fsr2l	equ	0xFD9
 37455                           status	equ	0xFD8
 37456                           
 37457 ;; *************** function _DIO2_ISR_Lora *****************
 37458 ;; Defined at:
 37459 ;;		line 73 in file "mcc_generated_files/LoRaWAN/interrupt_manager_lora_addons.c"
 37460 ;; Parameters:    Size  Location     Type
 37461 ;;		None
 37462 ;; Auto vars:     Size  Location     Type
 37463 ;;		None
 37464 ;; Return value:  Size  Location     Type
 37465 ;;                  1    wreg      void 
 37466 ;; Registers used:
 37467 ;;		status,2, status,0
 37468 ;; Tracked objects:
 37469 ;;		On entry : 3F/1
 37470 ;;		On exit  : 3F/1
 37471 ;;		Unchanged: 3F/0
 37472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 37473 ;;      Params:         0       0       0       0       0       0       0       0       0
 37474 ;;      Locals:         0       0       0       0       0       0       0       0       0
 37475 ;;      Temps:          0       0       0       0       0       0       0       0       0
 37476 ;;      Totals:         0       0       0       0       0       0       0       0       0
 37477 ;;Total ram usage:        0 bytes
 37478 ;; Hardware stack levels used:    1
 37479 ;; This function calls:
 37480 ;;		Nothing
 37481 ;; This function is called by:
 37482 ;;		_DIO2_ISR_Lora_Init
 37483 ;;		_IOCBF4_ISR
 37484 ;; This function uses a non-reentrant model
 37485 ;;
 37486                           
 37487                           	psect	text207
 37488  006254                     __ptext207:
 37489                           	opt stack 0
 37490  006254                     _DIO2_ISR_Lora:
 37491                           	opt stack 15
 37492                           
 37493                           ; BSR set to: 1
 37494                           ;interrupt_manager_lora_addons.c: 75: dioStatus |= 0x04;
 37495                           
 37496                           ; BSR set to: 14
 37497                           ;incstack = 0
 37498  006254  8445               	bsf	_dioStatus,2,c	;volatile
 37499                           
 37500                           ; BSR set to: 1
 37501  006256  0012               	return		;funcret
 37502  006258                     __end_of_DIO2_ISR_Lora:
 37503                           	opt stack 0
 37504                           tosu	equ	0xFFF
 37505                           tosh	equ	0xFFE
 37506                           tosl	equ	0xFFD
 37507                           pclatu	equ	0xFFB
 37508                           pclath	equ	0xFFA
 37509                           tblptru	equ	0xFF8
 37510                           tblptrh	equ	0xFF7
 37511                           tblptrl	equ	0xFF6
 37512                           tablat	equ	0xFF5
 37513                           prodh	equ	0xFF4
 37514                           prodl	equ	0xFF3
 37515                           intcon	equ	0xFF2
 37516                           indf0	equ	0xFEF
 37517                           postinc0	equ	0xFEE
 37518                           plusw0	equ	0xFEB
 37519                           fsr0h	equ	0xFEA
 37520                           fsr0l	equ	0xFE9
 37521                           wreg	equ	0xFE8
 37522                           postinc1	equ	0xFE6
 37523                           postdec1	equ	0xFE5
 37524                           plusw1	equ	0xFE3
 37525                           fsr1h	equ	0xFE2
 37526                           fsr1l	equ	0xFE1
 37527                           indf2	equ	0xFDF
 37528                           postinc2	equ	0xFDE
 37529                           postdec2	equ	0xFDD
 37530                           plusw2	equ	0xFDB
 37531                           fsr2h	equ	0xFDA
 37532                           fsr2l	equ	0xFD9
 37533                           status	equ	0xFD8
 37534                           
 37535 ;; *************** function _IOCBF4_DefaultInterruptHandler *****************
 37536 ;; Defined at:
 37537 ;;		line 187 in file "mcc_generated_files/pin_manager.c"
 37538 ;; Parameters:    Size  Location     Type
 37539 ;;		None
 37540 ;; Auto vars:     Size  Location     Type
 37541 ;;		None
 37542 ;; Return value:  Size  Location     Type
 37543 ;;                  1    wreg      void 
 37544 ;; Registers used:
 37545 ;;		None
 37546 ;; Tracked objects:
 37547 ;;		On entry : 3F/1
 37548 ;;		On exit  : 3F/1
 37549 ;;		Unchanged: 3F/0
 37550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 37551 ;;      Params:         0       0       0       0       0       0       0       0       0
 37552 ;;      Locals:         0       0       0       0       0       0       0       0       0
 37553 ;;      Temps:          0       0       0       0       0       0       0       0       0
 37554 ;;      Totals:         0       0       0       0       0       0       0       0       0
 37555 ;;Total ram usage:        0 bytes
 37556 ;; Hardware stack levels used:    1
 37557 ;; This function calls:
 37558 ;;		Nothing
 37559 ;; This function is called by:
 37560 ;;		_PIN_MANAGER_Initialize
 37561 ;;		_IOCBF4_ISR
 37562 ;; This function uses a non-reentrant model
 37563 ;;
 37564                           
 37565                           	psect	text208
 37566  00626A                     __ptext208:
 37567                           	opt stack 0
 37568  00626A                     _IOCBF4_DefaultInterruptHandler:
 37569                           	opt stack 15
 37570                           
 37571                           ; BSR set to: 1
 37572                           
 37573                           ; BSR set to: 1
 37574                           ;incstack = 0
 37575  00626A  0012               	return		;funcret
 37576  00626C                     __end_of_IOCBF4_DefaultInterruptHandler:
 37577                           	opt stack 0
 37578                           tosu	equ	0xFFF
 37579                           tosh	equ	0xFFE
 37580                           tosl	equ	0xFFD
 37581                           pclatu	equ	0xFFB
 37582                           pclath	equ	0xFFA
 37583                           tblptru	equ	0xFF8
 37584                           tblptrh	equ	0xFF7
 37585                           tblptrl	equ	0xFF6
 37586                           tablat	equ	0xFF5
 37587                           prodh	equ	0xFF4
 37588                           prodl	equ	0xFF3
 37589                           intcon	equ	0xFF2
 37590                           indf0	equ	0xFEF
 37591                           postinc0	equ	0xFEE
 37592                           plusw0	equ	0xFEB
 37593                           fsr0h	equ	0xFEA
 37594                           fsr0l	equ	0xFE9
 37595                           wreg	equ	0xFE8
 37596                           postinc1	equ	0xFE6
 37597                           postdec1	equ	0xFE5
 37598                           plusw1	equ	0xFE3
 37599                           fsr1h	equ	0xFE2
 37600                           fsr1l	equ	0xFE1
 37601                           indf2	equ	0xFDF
 37602                           postinc2	equ	0xFDE
 37603                           postdec2	equ	0xFDD
 37604                           plusw2	equ	0xFDB
 37605                           fsr2h	equ	0xFDA
 37606                           fsr2l	equ	0xFD9
 37607                           status	equ	0xFD8
 37608                           
 37609 ;; *************** function _INT3_ISR *****************
 37610 ;; Defined at:
 37611 ;;		line 169 in file "mcc_generated_files/ext_int.c"
 37612 ;; Parameters:    Size  Location     Type
 37613 ;;		None
 37614 ;; Auto vars:     Size  Location     Type
 37615 ;;		None
 37616 ;; Return value:  Size  Location     Type
 37617 ;;                  1    wreg      void 
 37618 ;; Registers used:
 37619 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 37620 ;; Tracked objects:
 37621 ;;		On entry : 3F/E
 37622 ;;		On exit  : 0/0
 37623 ;;		Unchanged: 0/0
 37624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 37625 ;;      Params:         0       0       0       0       0       0       0       0       0
 37626 ;;      Locals:         0       0       0       0       0       0       0       0       0
 37627 ;;      Temps:          0       0       0       0       0       0       0       0       0
 37628 ;;      Totals:         0       0       0       0       0       0       0       0       0
 37629 ;;Total ram usage:        0 bytes
 37630 ;; Hardware stack levels used:    1
 37631 ;; Hardware stack levels required when called:    2
 37632 ;; This function calls:
 37633 ;;		_INT3_CallBack
 37634 ;; This function is called by:
 37635 ;;		_INTERRUPT_InterruptManager
 37636 ;; This function uses a non-reentrant model
 37637 ;;
 37638                           
 37639                           	psect	text209
 37640  006226                     __ptext209:
 37641                           	opt stack 0
 37642  006226                     _INT3_ISR:
 37643                           	opt stack 15
 37644                           
 37645                           ; BSR set to: 14
 37646                           ;ext_int.c: 175: (PIR0bits.INT3IF = 0);
 37647                           
 37648                           ; BSR set to: 1
 37649                           ;incstack = 0
 37650  006226  9733               	bcf	51,3,b	;volatile
 37651                           
 37652                           ; BSR set to: 14
 37653                           ;ext_int.c: 178: INT3_CallBack();
 37654  006228  EF4F  F02F         	goto	_INT3_CallBack	;wreg free
 37655  00622C                     __end_of_INT3_ISR:
 37656                           	opt stack 0
 37657                           tosu	equ	0xFFF
 37658                           tosh	equ	0xFFE
 37659                           tosl	equ	0xFFD
 37660                           pclatu	equ	0xFFB
 37661                           pclath	equ	0xFFA
 37662                           tblptru	equ	0xFF8
 37663                           tblptrh	equ	0xFF7
 37664                           tblptrl	equ	0xFF6
 37665                           tablat	equ	0xFF5
 37666                           prodh	equ	0xFF4
 37667                           prodl	equ	0xFF3
 37668                           intcon	equ	0xFF2
 37669                           indf0	equ	0xFEF
 37670                           postinc0	equ	0xFEE
 37671                           plusw0	equ	0xFEB
 37672                           fsr0h	equ	0xFEA
 37673                           fsr0l	equ	0xFE9
 37674                           wreg	equ	0xFE8
 37675                           postinc1	equ	0xFE6
 37676                           postdec1	equ	0xFE5
 37677                           plusw1	equ	0xFE3
 37678                           fsr1h	equ	0xFE2
 37679                           fsr1l	equ	0xFE1
 37680                           indf2	equ	0xFDF
 37681                           postinc2	equ	0xFDE
 37682                           postdec2	equ	0xFDD
 37683                           plusw2	equ	0xFDB
 37684                           fsr2h	equ	0xFDA
 37685                           fsr2l	equ	0xFD9
 37686                           status	equ	0xFD8
 37687                           
 37688 ;; *************** function _INT3_CallBack *****************
 37689 ;; Defined at:
 37690 ;;		line 184 in file "mcc_generated_files/ext_int.c"
 37691 ;; Parameters:    Size  Location     Type
 37692 ;;		None
 37693 ;; Auto vars:     Size  Location     Type
 37694 ;;		None
 37695 ;; Return value:  Size  Location     Type
 37696 ;;                  1    wreg      void 
 37697 ;; Registers used:
 37698 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 37699 ;; Tracked objects:
 37700 ;;		On entry : 3F/E
 37701 ;;		On exit  : 0/0
 37702 ;;		Unchanged: 0/0
 37703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 37704 ;;      Params:         0       0       0       0       0       0       0       0       0
 37705 ;;      Locals:         0       0       0       0       0       0       0       0       0
 37706 ;;      Temps:          0       0       0       0       0       0       0       0       0
 37707 ;;      Totals:         0       0       0       0       0       0       0       0       0
 37708 ;;Total ram usage:        0 bytes
 37709 ;; Hardware stack levels used:    1
 37710 ;; Hardware stack levels required when called:    1
 37711 ;; This function calls:
 37712 ;;		Absolute function
 37713 ;;		_INT3_DefaultInterruptHandler
 37714 ;; This function is called by:
 37715 ;;		_INT3_ISR
 37716 ;; This function uses a non-reentrant model
 37717 ;;
 37718                           
 37719                           	psect	text210
 37720  005E9E                     __ptext210:
 37721                           	opt stack 0
 37722  005E9E                     _INT3_CallBack:
 37723                           	opt stack 15
 37724                           
 37725                           ; BSR set to: 14
 37726                           ;ext_int.c: 187: if(INT3_InterruptHandler)
 37727                           
 37728                           ;incstack = 0
 37729  005E9E  0101               	movlb	1	; () banked
 37730  005EA0  51FB               	movf	_INT3_InterruptHandler& (0+255),w,b
 37731  005EA2  11FC               	iorwf	(_INT3_InterruptHandler+1)& (0+255),w,b
 37732  005EA4  B4D8               	btfsc	status,2,c
 37733  005EA6  0012               	return	
 37734                           
 37735                           ; BSR set to: 1
 37736                           ;ext_int.c: 188: {
 37737                           ;ext_int.c: 189: INT3_InterruptHandler();
 37738  005EA8  0005               	push	
 37739  005EAA  6EFA               	movwf	pclath,c
 37740  005EAC  51FB               	movf	_INT3_InterruptHandler& (0+255),w,b
 37741  005EAE  6EFD               	movwf	tosl,c
 37742  005EB0  51FC               	movf	(_INT3_InterruptHandler+1)& (0+255),w,b
 37743  005EB2  6EFE               	movwf	tosh,c
 37744  005EB4  50F8               	movf	tblptru,w,c
 37745  005EB6  6EFF               	movwf	tosu,c
 37746  005EB8  50FA               	movf	pclath,w,c
 37747  005EBA  0012               	return		;indir
 37748  005EBC                     __end_of_INT3_CallBack:
 37749                           	opt stack 0
 37750                           tosu	equ	0xFFF
 37751                           tosh	equ	0xFFE
 37752                           tosl	equ	0xFFD
 37753                           pclatu	equ	0xFFB
 37754                           pclath	equ	0xFFA
 37755                           tblptru	equ	0xFF8
 37756                           tblptrh	equ	0xFF7
 37757                           tblptrl	equ	0xFF6
 37758                           tablat	equ	0xFF5
 37759                           prodh	equ	0xFF4
 37760                           prodl	equ	0xFF3
 37761                           intcon	equ	0xFF2
 37762                           indf0	equ	0xFEF
 37763                           postinc0	equ	0xFEE
 37764                           plusw0	equ	0xFEB
 37765                           fsr0h	equ	0xFEA
 37766                           fsr0l	equ	0xFE9
 37767                           wreg	equ	0xFE8
 37768                           postinc1	equ	0xFE6
 37769                           postdec1	equ	0xFE5
 37770                           plusw1	equ	0xFE3
 37771                           fsr1h	equ	0xFE2
 37772                           fsr1l	equ	0xFE1
 37773                           indf2	equ	0xFDF
 37774                           postinc2	equ	0xFDE
 37775                           postdec2	equ	0xFDD
 37776                           plusw2	equ	0xFDB
 37777                           fsr2h	equ	0xFDA
 37778                           fsr2l	equ	0xFD9
 37779                           status	equ	0xFD8
 37780                           
 37781 ;; *************** function _INT3_DefaultInterruptHandler *****************
 37782 ;; Defined at:
 37783 ;;		line 203 in file "mcc_generated_files/ext_int.c"
 37784 ;; Parameters:    Size  Location     Type
 37785 ;;		None
 37786 ;; Auto vars:     Size  Location     Type
 37787 ;;		None
 37788 ;; Return value:  Size  Location     Type
 37789 ;;                  1    wreg      void 
 37790 ;; Registers used:
 37791 ;;		None
 37792 ;; Tracked objects:
 37793 ;;		On entry : 3F/1
 37794 ;;		On exit  : 3F/1
 37795 ;;		Unchanged: 3F/0
 37796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 37797 ;;      Params:         0       0       0       0       0       0       0       0       0
 37798 ;;      Locals:         0       0       0       0       0       0       0       0       0
 37799 ;;      Temps:          0       0       0       0       0       0       0       0       0
 37800 ;;      Totals:         0       0       0       0       0       0       0       0       0
 37801 ;;Total ram usage:        0 bytes
 37802 ;; Hardware stack levels used:    1
 37803 ;; This function calls:
 37804 ;;		Nothing
 37805 ;; This function is called by:
 37806 ;;		_EXT_INT_Initialize
 37807 ;;		_INT3_CallBack
 37808 ;; This function uses a non-reentrant model
 37809 ;;
 37810                           
 37811                           	psect	text211
 37812  00626C                     __ptext211:
 37813                           	opt stack 0
 37814  00626C                     _INT3_DefaultInterruptHandler:
 37815                           	opt stack 15
 37816                           
 37817                           ; BSR set to: 1
 37818                           
 37819                           ;incstack = 0
 37820  00626C  0012               	return		;funcret
 37821  00626E                     __end_of_INT3_DefaultInterruptHandler:
 37822                           	opt stack 0
 37823                           tosu	equ	0xFFF
 37824                           tosh	equ	0xFFE
 37825                           tosl	equ	0xFFD
 37826                           pclatu	equ	0xFFB
 37827                           pclath	equ	0xFFA
 37828                           tblptru	equ	0xFF8
 37829                           tblptrh	equ	0xFF7
 37830                           tblptrl	equ	0xFF6
 37831                           tablat	equ	0xFF5
 37832                           prodh	equ	0xFF4
 37833                           prodl	equ	0xFF3
 37834                           intcon	equ	0xFF2
 37835                           indf0	equ	0xFEF
 37836                           postinc0	equ	0xFEE
 37837                           plusw0	equ	0xFEB
 37838                           fsr0h	equ	0xFEA
 37839                           fsr0l	equ	0xFE9
 37840                           wreg	equ	0xFE8
 37841                           postinc1	equ	0xFE6
 37842                           postdec1	equ	0xFE5
 37843                           plusw1	equ	0xFE3
 37844                           fsr1h	equ	0xFE2
 37845                           fsr1l	equ	0xFE1
 37846                           indf2	equ	0xFDF
 37847                           postinc2	equ	0xFDE
 37848                           postdec2	equ	0xFDD
 37849                           plusw2	equ	0xFDB
 37850                           fsr2h	equ	0xFDA
 37851                           fsr2l	equ	0xFD9
 37852                           status	equ	0xFD8
 37853                           
 37854 ;; *************** function _INT2_ISR *****************
 37855 ;; Defined at:
 37856 ;;		line 87 in file "mcc_generated_files/ext_int.c"
 37857 ;; Parameters:    Size  Location     Type
 37858 ;;		None
 37859 ;; Auto vars:     Size  Location     Type
 37860 ;;		None
 37861 ;; Return value:  Size  Location     Type
 37862 ;;                  1    wreg      void 
 37863 ;; Registers used:
 37864 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 37865 ;; Tracked objects:
 37866 ;;		On entry : 3F/E
 37867 ;;		On exit  : 0/0
 37868 ;;		Unchanged: 0/0
 37869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 37870 ;;      Params:         0       0       0       0       0       0       0       0       0
 37871 ;;      Locals:         0       0       0       0       0       0       0       0       0
 37872 ;;      Temps:          0       0       0       0       0       0       0       0       0
 37873 ;;      Totals:         0       0       0       0       0       0       0       0       0
 37874 ;;Total ram usage:        0 bytes
 37875 ;; Hardware stack levels used:    1
 37876 ;; Hardware stack levels required when called:    2
 37877 ;; This function calls:
 37878 ;;		_INT2_CallBack
 37879 ;; This function is called by:
 37880 ;;		_INTERRUPT_InterruptManager
 37881 ;; This function uses a non-reentrant model
 37882 ;;
 37883                           
 37884                           	psect	text212
 37885  00622C                     __ptext212:
 37886                           	opt stack 0
 37887  00622C                     _INT2_ISR:
 37888                           	opt stack 15
 37889                           
 37890                           ; BSR set to: 14
 37891                           ;ext_int.c: 93: (PIR0bits.INT2IF = 0);
 37892                           
 37893                           ; BSR set to: 1
 37894                           ;incstack = 0
 37895  00622C  9533               	bcf	51,2,b	;volatile
 37896                           
 37897                           ; BSR set to: 14
 37898                           ;ext_int.c: 96: INT2_CallBack();
 37899  00622E  EF5E  F02F         	goto	_INT2_CallBack	;wreg free
 37900  006232                     __end_of_INT2_ISR:
 37901                           	opt stack 0
 37902                           tosu	equ	0xFFF
 37903                           tosh	equ	0xFFE
 37904                           tosl	equ	0xFFD
 37905                           pclatu	equ	0xFFB
 37906                           pclath	equ	0xFFA
 37907                           tblptru	equ	0xFF8
 37908                           tblptrh	equ	0xFF7
 37909                           tblptrl	equ	0xFF6
 37910                           tablat	equ	0xFF5
 37911                           prodh	equ	0xFF4
 37912                           prodl	equ	0xFF3
 37913                           intcon	equ	0xFF2
 37914                           indf0	equ	0xFEF
 37915                           postinc0	equ	0xFEE
 37916                           plusw0	equ	0xFEB
 37917                           fsr0h	equ	0xFEA
 37918                           fsr0l	equ	0xFE9
 37919                           wreg	equ	0xFE8
 37920                           postinc1	equ	0xFE6
 37921                           postdec1	equ	0xFE5
 37922                           plusw1	equ	0xFE3
 37923                           fsr1h	equ	0xFE2
 37924                           fsr1l	equ	0xFE1
 37925                           indf2	equ	0xFDF
 37926                           postinc2	equ	0xFDE
 37927                           postdec2	equ	0xFDD
 37928                           plusw2	equ	0xFDB
 37929                           fsr2h	equ	0xFDA
 37930                           fsr2l	equ	0xFD9
 37931                           status	equ	0xFD8
 37932                           
 37933 ;; *************** function _INT2_CallBack *****************
 37934 ;; Defined at:
 37935 ;;		line 102 in file "mcc_generated_files/ext_int.c"
 37936 ;; Parameters:    Size  Location     Type
 37937 ;;		None
 37938 ;; Auto vars:     Size  Location     Type
 37939 ;;		None
 37940 ;; Return value:  Size  Location     Type
 37941 ;;                  1    wreg      void 
 37942 ;; Registers used:
 37943 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 37944 ;; Tracked objects:
 37945 ;;		On entry : 3F/E
 37946 ;;		On exit  : 0/0
 37947 ;;		Unchanged: 0/0
 37948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 37949 ;;      Params:         0       0       0       0       0       0       0       0       0
 37950 ;;      Locals:         0       0       0       0       0       0       0       0       0
 37951 ;;      Temps:          0       0       0       0       0       0       0       0       0
 37952 ;;      Totals:         0       0       0       0       0       0       0       0       0
 37953 ;;Total ram usage:        0 bytes
 37954 ;; Hardware stack levels used:    1
 37955 ;; Hardware stack levels required when called:    1
 37956 ;; This function calls:
 37957 ;;		Absolute function
 37958 ;;		_DIO5_ISR_Lora
 37959 ;;		_INT2_DefaultInterruptHandler
 37960 ;; This function is called by:
 37961 ;;		_INT2_ISR
 37962 ;; This function uses a non-reentrant model
 37963 ;;
 37964                           
 37965                           	psect	text213
 37966  005EBC                     __ptext213:
 37967                           	opt stack 0
 37968  005EBC                     _INT2_CallBack:
 37969                           	opt stack 15
 37970                           
 37971                           ; BSR set to: 14
 37972                           ;ext_int.c: 105: if(INT2_InterruptHandler)
 37973                           
 37974                           ;incstack = 0
 37975  005EBC  0101               	movlb	1	; () banked
 37976  005EBE  51FD               	movf	_INT2_InterruptHandler& (0+255),w,b
 37977  005EC0  11FE               	iorwf	(_INT2_InterruptHandler+1)& (0+255),w,b
 37978  005EC2  B4D8               	btfsc	status,2,c
 37979  005EC4  0012               	return	
 37980                           
 37981                           ; BSR set to: 1
 37982                           ;ext_int.c: 106: {
 37983                           ;ext_int.c: 107: INT2_InterruptHandler();
 37984  005EC6  0005               	push	
 37985  005EC8  6EFA               	movwf	pclath,c
 37986  005ECA  51FD               	movf	_INT2_InterruptHandler& (0+255),w,b
 37987  005ECC  6EFD               	movwf	tosl,c
 37988  005ECE  51FE               	movf	(_INT2_InterruptHandler+1)& (0+255),w,b
 37989  005ED0  6EFE               	movwf	tosh,c
 37990  005ED2  50F8               	movf	tblptru,w,c
 37991  005ED4  6EFF               	movwf	tosu,c
 37992  005ED6  50FA               	movf	pclath,w,c
 37993  005ED8  0012               	return		;indir
 37994  005EDA                     __end_of_INT2_CallBack:
 37995                           	opt stack 0
 37996                           tosu	equ	0xFFF
 37997                           tosh	equ	0xFFE
 37998                           tosl	equ	0xFFD
 37999                           pclatu	equ	0xFFB
 38000                           pclath	equ	0xFFA
 38001                           tblptru	equ	0xFF8
 38002                           tblptrh	equ	0xFF7
 38003                           tblptrl	equ	0xFF6
 38004                           tablat	equ	0xFF5
 38005                           prodh	equ	0xFF4
 38006                           prodl	equ	0xFF3
 38007                           intcon	equ	0xFF2
 38008                           indf0	equ	0xFEF
 38009                           postinc0	equ	0xFEE
 38010                           plusw0	equ	0xFEB
 38011                           fsr0h	equ	0xFEA
 38012                           fsr0l	equ	0xFE9
 38013                           wreg	equ	0xFE8
 38014                           postinc1	equ	0xFE6
 38015                           postdec1	equ	0xFE5
 38016                           plusw1	equ	0xFE3
 38017                           fsr1h	equ	0xFE2
 38018                           fsr1l	equ	0xFE1
 38019                           indf2	equ	0xFDF
 38020                           postinc2	equ	0xFDE
 38021                           postdec2	equ	0xFDD
 38022                           plusw2	equ	0xFDB
 38023                           fsr2h	equ	0xFDA
 38024                           fsr2l	equ	0xFD9
 38025                           status	equ	0xFD8
 38026                           
 38027 ;; *************** function _DIO5_ISR_Lora *****************
 38028 ;; Defined at:
 38029 ;;		line 88 in file "mcc_generated_files/LoRaWAN/interrupt_manager_lora_addons.c"
 38030 ;; Parameters:    Size  Location     Type
 38031 ;;		None
 38032 ;; Auto vars:     Size  Location     Type
 38033 ;;		None
 38034 ;; Return value:  Size  Location     Type
 38035 ;;                  1    wreg      void 
 38036 ;; Registers used:
 38037 ;;		status,2, status,0
 38038 ;; Tracked objects:
 38039 ;;		On entry : 3F/1
 38040 ;;		On exit  : 3F/1
 38041 ;;		Unchanged: 3F/0
 38042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 38043 ;;      Params:         0       0       0       0       0       0       0       0       0
 38044 ;;      Locals:         0       0       0       0       0       0       0       0       0
 38045 ;;      Temps:          0       0       0       0       0       0       0       0       0
 38046 ;;      Totals:         0       0       0       0       0       0       0       0       0
 38047 ;;Total ram usage:        0 bytes
 38048 ;; Hardware stack levels used:    1
 38049 ;; This function calls:
 38050 ;;		Nothing
 38051 ;; This function is called by:
 38052 ;;		_DIO5_ISR_Lora_Init
 38053 ;;		_INT2_CallBack
 38054 ;; This function uses a non-reentrant model
 38055 ;;
 38056                           
 38057                           	psect	text214
 38058  006258                     __ptext214:
 38059                           	opt stack 0
 38060  006258                     _DIO5_ISR_Lora:
 38061                           	opt stack 15
 38062                           
 38063                           ; BSR set to: 1
 38064                           ;interrupt_manager_lora_addons.c: 90: dioStatus |= 0x20;
 38065                           
 38066                           ;incstack = 0
 38067  006258  8A45               	bsf	_dioStatus,5,c	;volatile
 38068                           
 38069                           ; BSR set to: 1
 38070  00625A  0012               	return		;funcret
 38071  00625C                     __end_of_DIO5_ISR_Lora:
 38072                           	opt stack 0
 38073                           tosu	equ	0xFFF
 38074                           tosh	equ	0xFFE
 38075                           tosl	equ	0xFFD
 38076                           pclatu	equ	0xFFB
 38077                           pclath	equ	0xFFA
 38078                           tblptru	equ	0xFF8
 38079                           tblptrh	equ	0xFF7
 38080                           tblptrl	equ	0xFF6
 38081                           tablat	equ	0xFF5
 38082                           prodh	equ	0xFF4
 38083                           prodl	equ	0xFF3
 38084                           intcon	equ	0xFF2
 38085                           indf0	equ	0xFEF
 38086                           postinc0	equ	0xFEE
 38087                           plusw0	equ	0xFEB
 38088                           fsr0h	equ	0xFEA
 38089                           fsr0l	equ	0xFE9
 38090                           wreg	equ	0xFE8
 38091                           postinc1	equ	0xFE6
 38092                           postdec1	equ	0xFE5
 38093                           plusw1	equ	0xFE3
 38094                           fsr1h	equ	0xFE2
 38095                           fsr1l	equ	0xFE1
 38096                           indf2	equ	0xFDF
 38097                           postinc2	equ	0xFDE
 38098                           postdec2	equ	0xFDD
 38099                           plusw2	equ	0xFDB
 38100                           fsr2h	equ	0xFDA
 38101                           fsr2l	equ	0xFD9
 38102                           status	equ	0xFD8
 38103                           
 38104 ;; *************** function _INT2_DefaultInterruptHandler *****************
 38105 ;; Defined at:
 38106 ;;		line 121 in file "mcc_generated_files/ext_int.c"
 38107 ;; Parameters:    Size  Location     Type
 38108 ;;		None
 38109 ;; Auto vars:     Size  Location     Type
 38110 ;;		None
 38111 ;; Return value:  Size  Location     Type
 38112 ;;                  1    wreg      void 
 38113 ;; Registers used:
 38114 ;;		None
 38115 ;; Tracked objects:
 38116 ;;		On entry : 3F/1
 38117 ;;		On exit  : 3F/1
 38118 ;;		Unchanged: 3F/0
 38119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 38120 ;;      Params:         0       0       0       0       0       0       0       0       0
 38121 ;;      Locals:         0       0       0       0       0       0       0       0       0
 38122 ;;      Temps:          0       0       0       0       0       0       0       0       0
 38123 ;;      Totals:         0       0       0       0       0       0       0       0       0
 38124 ;;Total ram usage:        0 bytes
 38125 ;; Hardware stack levels used:    1
 38126 ;; This function calls:
 38127 ;;		Nothing
 38128 ;; This function is called by:
 38129 ;;		_EXT_INT_Initialize
 38130 ;;		_INT2_CallBack
 38131 ;; This function uses a non-reentrant model
 38132 ;;
 38133                           
 38134                           	psect	text215
 38135  00626E                     __ptext215:
 38136                           	opt stack 0
 38137  00626E                     _INT2_DefaultInterruptHandler:
 38138                           	opt stack 15
 38139                           
 38140                           ; BSR set to: 1
 38141                           
 38142                           ; BSR set to: 1
 38143                           ;incstack = 0
 38144  00626E  0012               	return		;funcret
 38145  006270                     __end_of_INT2_DefaultInterruptHandler:
 38146                           	opt stack 0
 38147                           tosu	equ	0xFFF
 38148                           tosh	equ	0xFFE
 38149                           tosl	equ	0xFFD
 38150                           pclatu	equ	0xFFB
 38151                           pclath	equ	0xFFA
 38152                           tblptru	equ	0xFF8
 38153                           tblptrh	equ	0xFF7
 38154                           tblptrl	equ	0xFF6
 38155                           tablat	equ	0xFF5
 38156                           prodh	equ	0xFF4
 38157                           prodl	equ	0xFF3
 38158                           intcon	equ	0xFF2
 38159                           indf0	equ	0xFEF
 38160                           postinc0	equ	0xFEE
 38161                           plusw0	equ	0xFEB
 38162                           fsr0h	equ	0xFEA
 38163                           fsr0l	equ	0xFE9
 38164                           wreg	equ	0xFE8
 38165                           postinc1	equ	0xFE6
 38166                           postdec1	equ	0xFE5
 38167                           plusw1	equ	0xFE3
 38168                           fsr1h	equ	0xFE2
 38169                           fsr1l	equ	0xFE1
 38170                           indf2	equ	0xFDF
 38171                           postinc2	equ	0xFDE
 38172                           postdec2	equ	0xFDD
 38173                           plusw2	equ	0xFDB
 38174                           fsr2h	equ	0xFDA
 38175                           fsr2l	equ	0xFD9
 38176                           status	equ	0xFD8
 38177                           
 38178 ;; *************** function _INT1_ISR *****************
 38179 ;; Defined at:
 38180 ;;		line 46 in file "mcc_generated_files/ext_int.c"
 38181 ;; Parameters:    Size  Location     Type
 38182 ;;		None
 38183 ;; Auto vars:     Size  Location     Type
 38184 ;;		None
 38185 ;; Return value:  Size  Location     Type
 38186 ;;                  1    wreg      void 
 38187 ;; Registers used:
 38188 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 38189 ;; Tracked objects:
 38190 ;;		On entry : 3F/E
 38191 ;;		On exit  : 0/0
 38192 ;;		Unchanged: 0/0
 38193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 38194 ;;      Params:         0       0       0       0       0       0       0       0       0
 38195 ;;      Locals:         0       0       0       0       0       0       0       0       0
 38196 ;;      Temps:          0       0       0       0       0       0       0       0       0
 38197 ;;      Totals:         0       0       0       0       0       0       0       0       0
 38198 ;;Total ram usage:        0 bytes
 38199 ;; Hardware stack levels used:    1
 38200 ;; Hardware stack levels required when called:    2
 38201 ;; This function calls:
 38202 ;;		_INT1_CallBack
 38203 ;; This function is called by:
 38204 ;;		_INTERRUPT_InterruptManager
 38205 ;; This function uses a non-reentrant model
 38206 ;;
 38207                           
 38208                           	psect	text216
 38209  006232                     __ptext216:
 38210                           	opt stack 0
 38211  006232                     _INT1_ISR:
 38212                           	opt stack 15
 38213                           
 38214                           ; BSR set to: 14
 38215                           ;ext_int.c: 52: (PIR0bits.INT1IF = 0);
 38216                           
 38217                           ; BSR set to: 1
 38218                           ;incstack = 0
 38219  006232  9333               	bcf	51,1,b	;volatile
 38220                           
 38221                           ; BSR set to: 14
 38222                           ;ext_int.c: 55: INT1_CallBack();
 38223  006234  EF7B  F02F         	goto	_INT1_CallBack	;wreg free
 38224  006238                     __end_of_INT1_ISR:
 38225                           	opt stack 0
 38226                           tosu	equ	0xFFF
 38227                           tosh	equ	0xFFE
 38228                           tosl	equ	0xFFD
 38229                           pclatu	equ	0xFFB
 38230                           pclath	equ	0xFFA
 38231                           tblptru	equ	0xFF8
 38232                           tblptrh	equ	0xFF7
 38233                           tblptrl	equ	0xFF6
 38234                           tablat	equ	0xFF5
 38235                           prodh	equ	0xFF4
 38236                           prodl	equ	0xFF3
 38237                           intcon	equ	0xFF2
 38238                           indf0	equ	0xFEF
 38239                           postinc0	equ	0xFEE
 38240                           plusw0	equ	0xFEB
 38241                           fsr0h	equ	0xFEA
 38242                           fsr0l	equ	0xFE9
 38243                           wreg	equ	0xFE8
 38244                           postinc1	equ	0xFE6
 38245                           postdec1	equ	0xFE5
 38246                           plusw1	equ	0xFE3
 38247                           fsr1h	equ	0xFE2
 38248                           fsr1l	equ	0xFE1
 38249                           indf2	equ	0xFDF
 38250                           postinc2	equ	0xFDE
 38251                           postdec2	equ	0xFDD
 38252                           plusw2	equ	0xFDB
 38253                           fsr2h	equ	0xFDA
 38254                           fsr2l	equ	0xFD9
 38255                           status	equ	0xFD8
 38256                           
 38257 ;; *************** function _INT1_CallBack *****************
 38258 ;; Defined at:
 38259 ;;		line 61 in file "mcc_generated_files/ext_int.c"
 38260 ;; Parameters:    Size  Location     Type
 38261 ;;		None
 38262 ;; Auto vars:     Size  Location     Type
 38263 ;;		None
 38264 ;; Return value:  Size  Location     Type
 38265 ;;                  1    wreg      void 
 38266 ;; Registers used:
 38267 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 38268 ;; Tracked objects:
 38269 ;;		On entry : 3F/E
 38270 ;;		On exit  : 0/0
 38271 ;;		Unchanged: 0/0
 38272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 38273 ;;      Params:         0       0       0       0       0       0       0       0       0
 38274 ;;      Locals:         0       0       0       0       0       0       0       0       0
 38275 ;;      Temps:          0       0       0       0       0       0       0       0       0
 38276 ;;      Totals:         0       0       0       0       0       0       0       0       0
 38277 ;;Total ram usage:        0 bytes
 38278 ;; Hardware stack levels used:    1
 38279 ;; Hardware stack levels required when called:    1
 38280 ;; This function calls:
 38281 ;;		Absolute function
 38282 ;;		_DIO1_ISR_Lora
 38283 ;;		_INT1_DefaultInterruptHandler
 38284 ;; This function is called by:
 38285 ;;		_INT1_ISR
 38286 ;; This function uses a non-reentrant model
 38287 ;;
 38288                           
 38289                           	psect	text217
 38290  005EF6                     __ptext217:
 38291                           	opt stack 0
 38292  005EF6                     _INT1_CallBack:
 38293                           	opt stack 15
 38294                           
 38295                           ; BSR set to: 14
 38296                           ;ext_int.c: 64: if(INT1_InterruptHandler)
 38297                           
 38298                           ;incstack = 0
 38299  005EF6  505E               	movf	_INT1_InterruptHandler,w,c
 38300  005EF8  105F               	iorwf	_INT1_InterruptHandler+1,w,c
 38301  005EFA  B4D8               	btfsc	status,2,c
 38302  005EFC  0012               	return	
 38303                           
 38304                           ; BSR set to: 14
 38305                           ;ext_int.c: 65: {
 38306                           ;ext_int.c: 66: INT1_InterruptHandler();
 38307  005EFE  0005               	push	
 38308  005F00  6EFA               	movwf	pclath,c
 38309  005F02  505E               	movf	_INT1_InterruptHandler,w,c
 38310  005F04  6EFD               	movwf	tosl,c
 38311  005F06  505F               	movf	_INT1_InterruptHandler+1,w,c
 38312  005F08  6EFE               	movwf	tosh,c
 38313  005F0A  50F8               	movf	tblptru,w,c
 38314  005F0C  6EFF               	movwf	tosu,c
 38315  005F0E  50FA               	movf	pclath,w,c
 38316  005F10  0012               	return		;indir
 38317  005F12                     __end_of_INT1_CallBack:
 38318                           	opt stack 0
 38319                           tosu	equ	0xFFF
 38320                           tosh	equ	0xFFE
 38321                           tosl	equ	0xFFD
 38322                           pclatu	equ	0xFFB
 38323                           pclath	equ	0xFFA
 38324                           tblptru	equ	0xFF8
 38325                           tblptrh	equ	0xFF7
 38326                           tblptrl	equ	0xFF6
 38327                           tablat	equ	0xFF5
 38328                           prodh	equ	0xFF4
 38329                           prodl	equ	0xFF3
 38330                           intcon	equ	0xFF2
 38331                           indf0	equ	0xFEF
 38332                           postinc0	equ	0xFEE
 38333                           plusw0	equ	0xFEB
 38334                           fsr0h	equ	0xFEA
 38335                           fsr0l	equ	0xFE9
 38336                           wreg	equ	0xFE8
 38337                           postinc1	equ	0xFE6
 38338                           postdec1	equ	0xFE5
 38339                           plusw1	equ	0xFE3
 38340                           fsr1h	equ	0xFE2
 38341                           fsr1l	equ	0xFE1
 38342                           indf2	equ	0xFDF
 38343                           postinc2	equ	0xFDE
 38344                           postdec2	equ	0xFDD
 38345                           plusw2	equ	0xFDB
 38346                           fsr2h	equ	0xFDA
 38347                           fsr2l	equ	0xFD9
 38348                           status	equ	0xFD8
 38349                           
 38350 ;; *************** function _DIO1_ISR_Lora *****************
 38351 ;; Defined at:
 38352 ;;		line 68 in file "mcc_generated_files/LoRaWAN/interrupt_manager_lora_addons.c"
 38353 ;; Parameters:    Size  Location     Type
 38354 ;;		None
 38355 ;; Auto vars:     Size  Location     Type
 38356 ;;		None
 38357 ;; Return value:  Size  Location     Type
 38358 ;;                  1    wreg      void 
 38359 ;; Registers used:
 38360 ;;		status,2, status,0
 38361 ;; Tracked objects:
 38362 ;;		On entry : 3F/E
 38363 ;;		On exit  : 3F/E
 38364 ;;		Unchanged: 3F/0
 38365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 38366 ;;      Params:         0       0       0       0       0       0       0       0       0
 38367 ;;      Locals:         0       0       0       0       0       0       0       0       0
 38368 ;;      Temps:          0       0       0       0       0       0       0       0       0
 38369 ;;      Totals:         0       0       0       0       0       0       0       0       0
 38370 ;;Total ram usage:        0 bytes
 38371 ;; Hardware stack levels used:    1
 38372 ;; This function calls:
 38373 ;;		Nothing
 38374 ;; This function is called by:
 38375 ;;		_DIO1_ISR_Lora_Init
 38376 ;;		_INT1_CallBack
 38377 ;; This function uses a non-reentrant model
 38378 ;;
 38379                           
 38380                           	psect	text218
 38381  00625C                     __ptext218:
 38382                           	opt stack 0
 38383  00625C                     _DIO1_ISR_Lora:
 38384                           	opt stack 15
 38385                           
 38386                           ; BSR set to: 14
 38387                           ;interrupt_manager_lora_addons.c: 70: dioStatus |= 0x02;
 38388                           
 38389                           ;incstack = 0
 38390  00625C  8245               	bsf	_dioStatus,1,c	;volatile
 38391                           
 38392                           ; BSR set to: 14
 38393  00625E  0012               	return		;funcret
 38394  006260                     __end_of_DIO1_ISR_Lora:
 38395                           	opt stack 0
 38396                           tosu	equ	0xFFF
 38397                           tosh	equ	0xFFE
 38398                           tosl	equ	0xFFD
 38399                           pclatu	equ	0xFFB
 38400                           pclath	equ	0xFFA
 38401                           tblptru	equ	0xFF8
 38402                           tblptrh	equ	0xFF7
 38403                           tblptrl	equ	0xFF6
 38404                           tablat	equ	0xFF5
 38405                           prodh	equ	0xFF4
 38406                           prodl	equ	0xFF3
 38407                           intcon	equ	0xFF2
 38408                           indf0	equ	0xFEF
 38409                           postinc0	equ	0xFEE
 38410                           plusw0	equ	0xFEB
 38411                           fsr0h	equ	0xFEA
 38412                           fsr0l	equ	0xFE9
 38413                           wreg	equ	0xFE8
 38414                           postinc1	equ	0xFE6
 38415                           postdec1	equ	0xFE5
 38416                           plusw1	equ	0xFE3
 38417                           fsr1h	equ	0xFE2
 38418                           fsr1l	equ	0xFE1
 38419                           indf2	equ	0xFDF
 38420                           postinc2	equ	0xFDE
 38421                           postdec2	equ	0xFDD
 38422                           plusw2	equ	0xFDB
 38423                           fsr2h	equ	0xFDA
 38424                           fsr2l	equ	0xFD9
 38425                           status	equ	0xFD8
 38426                           
 38427 ;; *************** function _INT1_DefaultInterruptHandler *****************
 38428 ;; Defined at:
 38429 ;;		line 80 in file "mcc_generated_files/ext_int.c"
 38430 ;; Parameters:    Size  Location     Type
 38431 ;;		None
 38432 ;; Auto vars:     Size  Location     Type
 38433 ;;		None
 38434 ;; Return value:  Size  Location     Type
 38435 ;;                  1    wreg      void 
 38436 ;; Registers used:
 38437 ;;		None
 38438 ;; Tracked objects:
 38439 ;;		On entry : 3F/E
 38440 ;;		On exit  : 3F/E
 38441 ;;		Unchanged: 3F/0
 38442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 38443 ;;      Params:         0       0       0       0       0       0       0       0       0
 38444 ;;      Locals:         0       0       0       0       0       0       0       0       0
 38445 ;;      Temps:          0       0       0       0       0       0       0       0       0
 38446 ;;      Totals:         0       0       0       0       0       0       0       0       0
 38447 ;;Total ram usage:        0 bytes
 38448 ;; Hardware stack levels used:    1
 38449 ;; This function calls:
 38450 ;;		Nothing
 38451 ;; This function is called by:
 38452 ;;		_EXT_INT_Initialize
 38453 ;;		_INT1_CallBack
 38454 ;; This function uses a non-reentrant model
 38455 ;;
 38456                           
 38457                           	psect	text219
 38458  006270                     __ptext219:
 38459                           	opt stack 0
 38460  006270                     _INT1_DefaultInterruptHandler:
 38461                           	opt stack 15
 38462                           
 38463                           ; BSR set to: 14
 38464                           
 38465                           ; BSR set to: 14
 38466                           ;incstack = 0
 38467  006270  0012               	return		;funcret
 38468  006272                     __end_of_INT1_DefaultInterruptHandler:
 38469                           	opt stack 0
 38470                           tosu	equ	0xFFF
 38471                           tosh	equ	0xFFE
 38472                           tosl	equ	0xFFD
 38473                           pclatu	equ	0xFFB
 38474                           pclath	equ	0xFFA
 38475                           tblptru	equ	0xFF8
 38476                           tblptrh	equ	0xFF7
 38477                           tblptrl	equ	0xFF6
 38478                           tablat	equ	0xFF5
 38479                           prodh	equ	0xFF4
 38480                           prodl	equ	0xFF3
 38481                           intcon	equ	0xFF2
 38482                           indf0	equ	0xFEF
 38483                           postinc0	equ	0xFEE
 38484                           plusw0	equ	0xFEB
 38485                           fsr0h	equ	0xFEA
 38486                           fsr0l	equ	0xFE9
 38487                           wreg	equ	0xFE8
 38488                           postinc1	equ	0xFE6
 38489                           postdec1	equ	0xFE5
 38490                           plusw1	equ	0xFE3
 38491                           fsr1h	equ	0xFE2
 38492                           fsr1l	equ	0xFE1
 38493                           indf2	equ	0xFDF
 38494                           postinc2	equ	0xFDE
 38495                           postdec2	equ	0xFDD
 38496                           plusw2	equ	0xFDB
 38497                           fsr2h	equ	0xFDA
 38498                           fsr2l	equ	0xFD9
 38499                           status	equ	0xFD8
 38500                           tosu	equ	0xFFF
 38501                           tosh	equ	0xFFE
 38502                           tosl	equ	0xFFD
 38503                           pclatu	equ	0xFFB
 38504                           pclath	equ	0xFFA
 38505                           tblptru	equ	0xFF8
 38506                           tblptrh	equ	0xFF7
 38507                           tblptrl	equ	0xFF6
 38508                           tablat	equ	0xFF5
 38509                           prodh	equ	0xFF4
 38510                           prodl	equ	0xFF3
 38511                           intcon	equ	0xFF2
 38512                           indf0	equ	0xFEF
 38513                           postinc0	equ	0xFEE
 38514                           plusw0	equ	0xFEB
 38515                           fsr0h	equ	0xFEA
 38516                           fsr0l	equ	0xFE9
 38517                           wreg	equ	0xFE8
 38518                           postinc1	equ	0xFE6
 38519                           postdec1	equ	0xFE5
 38520                           plusw1	equ	0xFE3
 38521                           fsr1h	equ	0xFE2
 38522                           fsr1l	equ	0xFE1
 38523                           indf2	equ	0xFDF
 38524                           postinc2	equ	0xFDE
 38525                           postdec2	equ	0xFDD
 38526                           plusw2	equ	0xFDB
 38527                           fsr2h	equ	0xFDA
 38528                           fsr2l	equ	0xFD9
 38529                           status	equ	0xFD8
 38530                           
 38531                           	psect	text220
 38532  000000                     __ptext220:
 38533                           	opt stack 0
 38534                           tosu	equ	0xFFF
 38535                           tosh	equ	0xFFE
 38536                           tosl	equ	0xFFD
 38537                           pclatu	equ	0xFFB
 38538                           pclath	equ	0xFFA
 38539                           tblptru	equ	0xFF8
 38540                           tblptrh	equ	0xFF7
 38541                           tblptrl	equ	0xFF6
 38542                           tablat	equ	0xFF5
 38543                           prodh	equ	0xFF4
 38544                           prodl	equ	0xFF3
 38545                           intcon	equ	0xFF2
 38546                           indf0	equ	0xFEF
 38547                           postinc0	equ	0xFEE
 38548                           plusw0	equ	0xFEB
 38549                           fsr0h	equ	0xFEA
 38550                           fsr0l	equ	0xFE9
 38551                           wreg	equ	0xFE8
 38552                           postinc1	equ	0xFE6
 38553                           postdec1	equ	0xFE5
 38554                           plusw1	equ	0xFE3
 38555                           fsr1h	equ	0xFE2
 38556                           fsr1l	equ	0xFE1
 38557                           indf2	equ	0xFDF
 38558                           postinc2	equ	0xFDE
 38559                           postdec2	equ	0xFDD
 38560                           plusw2	equ	0xFDB
 38561                           fsr2h	equ	0xFDA
 38562                           fsr2l	equ	0xFD9
 38563                           status	equ	0xFD8
 38564                           
 38565                           	psect	rparam
 38566  0000                     tosu	equ	0xFFF
 38567                           tosh	equ	0xFFE
 38568                           tosl	equ	0xFFD
 38569                           pclatu	equ	0xFFB
 38570                           pclath	equ	0xFFA
 38571                           tblptru	equ	0xFF8
 38572                           tblptrh	equ	0xFF7
 38573                           tblptrl	equ	0xFF6
 38574                           tablat	equ	0xFF5
 38575                           prodh	equ	0xFF4
 38576                           prodl	equ	0xFF3
 38577                           intcon	equ	0xFF2
 38578                           indf0	equ	0xFEF
 38579                           postinc0	equ	0xFEE
 38580                           plusw0	equ	0xFEB
 38581                           fsr0h	equ	0xFEA
 38582                           fsr0l	equ	0xFE9
 38583                           wreg	equ	0xFE8
 38584                           postinc1	equ	0xFE6
 38585                           postdec1	equ	0xFE5
 38586                           plusw1	equ	0xFE3
 38587                           fsr1h	equ	0xFE2
 38588                           fsr1l	equ	0xFE1
 38589                           indf2	equ	0xFDF
 38590                           postinc2	equ	0xFDE
 38591                           postdec2	equ	0xFDD
 38592                           plusw2	equ	0xFDB
 38593                           fsr2h	equ	0xFDA
 38594                           fsr2l	equ	0xFD9
 38595                           status	equ	0xFD8
 38596                           
 38597                           	psect	temp
 38598  000048                     btemp:
 38599                           	opt stack 0
 38600  000048                     	ds	12
 38601  0000                     wtemp0	set	btemp
 38602  0000                     wtemp1	set	btemp+2
 38603  0000                     wtemp2	set	btemp+4
 38604  0000                     wtemp3	set	btemp+6
 38605  0000                     wtemp4	set	btemp+8
 38606  0000                     wtemp5	set	btemp+10
 38607  0000                     ttemp0	set	btemp
 38608  0000                     ttemp1	set	btemp+3
 38609  0000                     ttemp2	set	btemp+6
 38610  0000                     ttemp3	set	btemp+9
 38611  0000                     ltemp0	set	btemp
 38612  0000                     ltemp1	set	btemp+4
 38613  0000                     ltemp2	set	btemp+8
 38614                           tosu	equ	0xFFF
 38615                           tosh	equ	0xFFE
 38616                           tosl	equ	0xFFD
 38617                           pclatu	equ	0xFFB
 38618                           pclath	equ	0xFFA
 38619                           tblptru	equ	0xFF8
 38620                           tblptrh	equ	0xFF7
 38621                           tblptrl	equ	0xFF6
 38622                           tablat	equ	0xFF5
 38623                           prodh	equ	0xFF4
 38624                           prodl	equ	0xFF3
 38625                           intcon	equ	0xFF2
 38626                           indf0	equ	0xFEF
 38627                           postinc0	equ	0xFEE
 38628                           plusw0	equ	0xFEB
 38629                           fsr0h	equ	0xFEA
 38630                           fsr0l	equ	0xFE9
 38631                           wreg	equ	0xFE8
 38632                           postinc1	equ	0xFE6
 38633                           postdec1	equ	0xFE5
 38634                           plusw1	equ	0xFE3
 38635                           fsr1h	equ	0xFE2
 38636                           fsr1l	equ	0xFE1
 38637                           indf2	equ	0xFDF
 38638                           postinc2	equ	0xFDE
 38639                           postdec2	equ	0xFDD
 38640                           plusw2	equ	0xFDB
 38641                           fsr2h	equ	0xFDA
 38642                           fsr2l	equ	0xFD9
 38643                           status	equ	0xFD8
 38644                           tosu	equ	0xFFF
 38645                           tosh	equ	0xFFE
 38646                           tosl	equ	0xFFD
 38647                           pclatu	equ	0xFFB
 38648                           pclath	equ	0xFFA
 38649                           tblptru	equ	0xFF8
 38650                           tblptrh	equ	0xFF7
 38651                           tblptrl	equ	0xFF6
 38652                           tablat	equ	0xFF5
 38653                           prodh	equ	0xFF4
 38654                           prodl	equ	0xFF3
 38655                           intcon	equ	0xFF2
 38656                           indf0	equ	0xFEF
 38657                           postinc0	equ	0xFEE
 38658                           plusw0	equ	0xFEB
 38659                           fsr0h	equ	0xFEA
 38660                           fsr0l	equ	0xFE9
 38661                           wreg	equ	0xFE8
 38662                           postinc1	equ	0xFE6
 38663                           postdec1	equ	0xFE5
 38664                           plusw1	equ	0xFE3
 38665                           fsr1h	equ	0xFE2
 38666                           fsr1l	equ	0xFE1
 38667                           indf2	equ	0xFDF
 38668                           postinc2	equ	0xFDE
 38669                           postdec2	equ	0xFDD
 38670                           plusw2	equ	0xFDB
 38671                           fsr2h	equ	0xFDA
 38672                           fsr2l	equ	0xFD9
 38673                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    402
    Data        56
    BSS         1276
    Persistent  12
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           83     47      83
    BANK0           160    157     160
    BANK1           256    121     255
    BANK2           256      0     245
    BANK3           256      0     160
    BANK4           256      0     224
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    RxDataDone@pData	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), NULL(NULL[0]), 

    RxPayload$0	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), NULL(NULL[0]), 

    S272$0$0	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), NULL(NULL[0]), 

    memset@p1	PTR void  size(2) Largest target is 271
		 -> GenerateSubkey@l(BANK0[16]), AESCmac@x(BANK1[16]), AssemblePacket@mhdr(BANK0[1]), aesBuffer(BANK1[16]), 
		 -> Channels(BANK4[224]), macBuffer(BIGRAM[271]), loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    memset@p	PTR unsigned char  size(2) Largest target is 271
		 -> GenerateSubkey@l(BANK0[16]), AESCmac@x(BANK1[16]), AssemblePacket@mhdr(BANK0[1]), aesBuffer(BANK1[16]), 
		 -> Channels(BANK4[224]), macBuffer(BIGRAM[271]), loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    memcpy@d1	PTR void  size(2) Largest target is 271
		 -> RadioConfiguration(BANK1[54]), UpdateCfList@frequency(BANK0[4]), AESCmac@x(BANK1[16]), AESEncodeLoRa@useKey(BANK0[16]), 
		 -> ComputeMic@mic(BANK0[4]), ExtractMic@mic(BANK0[4]), aesBuffer(BANK1[16]), radioBuffer(BIGRAM[271]), 
		 -> LORAWAN_RxDone@computedMic(BANK0[4]), Channels(BANK4[224]), loRa.activationParameters.applicationEui(BANK2[8]), loRa.activationParameters.deviceEui(BANK2[8]), 
		 -> macBuffer(BIGRAM[271]), loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 271
		 -> RadioConfiguration(BANK1[54]), UpdateCfList@frequency(BANK0[4]), AESCmac@x(BANK1[16]), AESEncodeLoRa@useKey(BANK0[16]), 
		 -> ComputeMic@mic(BANK0[4]), ExtractMic@mic(BANK0[4]), aesBuffer(BANK1[16]), radioBuffer(BIGRAM[271]), 
		 -> LORAWAN_RxDone@computedMic(BANK0[4]), Channels(BANK4[224]), loRa.activationParameters.applicationEui(BANK2[8]), loRa.activationParameters.deviceEui(BANK2[8]), 
		 -> macBuffer(BIGRAM[271]), loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    memcpy@s1	PTR const void  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr.cfList(COMRAM[16]), radioBuffer.cfList(BIGRAM[16]), payload(BANK1[2]), appSKey(BANK1[16]), 
		 -> nwkSKey(BANK1[16]), RadioConfiguration.syncWord(BANK1[8]), RadioConfiguration(BANK1[54]), FskSyncWordBuff(CODE[3]), 
		 -> UpdateCfList@joinAccept(BANK0[2]), DefaultChannels433(CODE[42]), DefaultChannels868(CODE[42]), AESCmac@y(BANK1[16]), 
		 -> AssembleEncryptionBlock@frameCounter(BANK0[4]), ComputeSessionKeys@joinAcceptBuffer(BANK0[2]), PrepareJoinRequestFrame@mic(BANK0[4]), loRa.devNonce(BANK2[2]), 
		 -> loRa.fCntUp.valueLow(BANK2[2]), aesBuffer(BANK1[16]), radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 
		 -> loRa.activationParameters.applicationKey(BANK2[16]), loRa.activationParameters.applicationSessionKey(BANK2[16]), loRa.activationParameters.networkSessionKey(BANK2[16]), loRa.activationParameters.deviceAddress(BANK2[4]), 
		 -> loRa.activationParameters.applicationEui(BANK2[8]), loRa.activationParameters.deviceEui(BANK2[8]), NULL(NULL[0]), loRa.activationParameters.mcastApplicationSessionKey(BANK2[16]), 
		 -> loRa.activationParameters.mcastNetworkSessionKey(BANK2[16]), loRa.activationParameters.mcastDeviceAddress(BANK2[4]), loRa.fCntUp(BANK2[4]), loRa.activationParameters(BANK2[105]), 
		 -> loRa(BANK2[245]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr.cfList(COMRAM[16]), radioBuffer.cfList(BIGRAM[16]), payload(BANK1[2]), appSKey(BANK1[16]), 
		 -> nwkSKey(BANK1[16]), RadioConfiguration.syncWord(BANK1[8]), RadioConfiguration(BANK1[54]), FskSyncWordBuff(CODE[3]), 
		 -> UpdateCfList@joinAccept(BANK0[2]), DefaultChannels433(CODE[42]), DefaultChannels868(CODE[42]), AESCmac@y(BANK1[16]), 
		 -> AssembleEncryptionBlock@frameCounter(BANK0[4]), ComputeSessionKeys@joinAcceptBuffer(BANK0[2]), PrepareJoinRequestFrame@mic(BANK0[4]), loRa.devNonce(BANK2[2]), 
		 -> loRa.fCntUp.valueLow(BANK2[2]), aesBuffer(BANK1[16]), radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 
		 -> loRa.activationParameters.applicationKey(BANK2[16]), loRa.activationParameters.applicationSessionKey(BANK2[16]), loRa.activationParameters.networkSessionKey(BANK2[16]), loRa.activationParameters.deviceAddress(BANK2[4]), 
		 -> loRa.activationParameters.applicationEui(BANK2[8]), loRa.activationParameters.deviceEui(BANK2[8]), NULL(NULL[0]), loRa.activationParameters.mcastApplicationSessionKey(BANK2[16]), 
		 -> loRa.activationParameters.mcastNetworkSessionKey(BANK2[16]), loRa.activationParameters.mcastDeviceAddress(BANK2[4]), loRa.fCntUp(BANK2[4]), loRa.activationParameters(BANK2[105]), 
		 -> loRa(BANK2[245]), 

    IOCBF4_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> IOCBF4_DefaultInterruptHandler(), DIO2_ISR_Lora(), 

    IOCBF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCBF4_DefaultInterruptHandler(), Absolute function(), DIO2_ISR_Lora(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), TMR_ISR_lora(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), TMR_ISR_lora(), Absolute function(), 

    INT3_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> INT3_DefaultInterruptHandler(), 

    INT3_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT3_DefaultInterruptHandler(), Absolute function(), 

    INT0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> INT0_DefaultInterruptHandler(), DIO0_ISR_Lora(), 

    INT0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT0_DefaultInterruptHandler(), Absolute function(), DIO0_ISR_Lora(), 

    INT2_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> INT2_DefaultInterruptHandler(), DIO5_ISR_Lora(), 

    INT2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT2_DefaultInterruptHandler(), Absolute function(), DIO5_ISR_Lora(), 

    INT1_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> INT1_DefaultInterruptHandler(), DIO1_ISR_Lora(), 

    INT1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT1_DefaultInterruptHandler(), Absolute function(), DIO1_ISR_Lora(), 

    SwTimerSetCallback@callback	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> RADIO_WatchdogTimeout(), RADIO_RxFSKTimeout(), DutyCycleCallback(), UpdateJoinSuccessState(), 
		 -> AutomaticReplyCallback(), UnconfirmedTransmissionCallback(), AckRetransmissionCallback(), LORAWAN_LinkCheckCallback(), 
		 -> LORAWAN_ReceiveWindow2Callback(), LORAWAN_ReceiveWindow1Callback(), 

    S2610$callback	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> RADIO_WatchdogTimeout(), RADIO_RxFSKTimeout(), DutyCycleCallback(), UpdateJoinSuccessState(), 
		 -> AutomaticReplyCallback(), UnconfirmedTransmissionCallback(), AckRetransmissionCallback(), LORAWAN_LinkCheckCallback(), 
		 -> Absolute function(), LORAWAN_ReceiveWindow2Callback(), LORAWAN_ReceiveWindow1Callback(), 

    swTimers.callback	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> RADIO_WatchdogTimeout(), RADIO_RxFSKTimeout(), DutyCycleCallback(), UpdateJoinSuccessState(), 
		 -> AutomaticReplyCallback(), UnconfirmedTransmissionCallback(), AckRetransmissionCallback(), LORAWAN_LinkCheckCallback(), 
		 -> Absolute function(), LORAWAN_ReceiveWindow2Callback(), LORAWAN_ReceiveWindow1Callback(), 

    RADIO_SetFSKSyncWord@syncWord	PTR unsigned char  size(2) Largest target is 3
		 -> FskSyncWordBuff(CODE[3]), 

    RADIO_Transmit@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> macBuffer(BIGRAM[271]), 

    RADIO_Init@radioBuffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), 

    S2295$fhssNextFrequency	PTR FTN()unsigned long  size(2) Largest target is 1
		 -> Absolute function(), 

    RadioConfiguration.fhssNextFrequency	PTR FTN()unsigned long  size(2) Largest target is 1
		 -> Absolute function(), 

    S2295$dataBuffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), 

    RadioConfiguration.dataBuffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), 

    UpdateCfList@joinAccept	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    SearchAvailableChannel@channelIndex	PTR unsigned char  size(1) Largest target is 1
		 -> SelectChannelForTransmission@channelIndex(BANK0[1]), LORAWAN_RxDone@channelIndex(BANK0[1]), 

    ExecuteRxParamSetupReq@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ExecuteNewChannel@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ExecuteDevStatus@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ExecuteLinkAdr@redundancy	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ExecuteLinkAdr@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ExecuteDutyCycle@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    LORAWAN_Init@RxJoinResponse	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> RxJoinResponse(), 

    LORAWAN_Init@RxPayload	PTR FTN(PTR unsigned char ,unsigned char ,enum E17428,)void  size(2) Largest target is 1
		 -> RxDataDone(), 

    FillSubKey@source	PTR unsigned char  size(2) Largest target is 16
		 -> GenerateSubkey@l(BANK0[16]), AESCmac@k1(BANK1[16]), 

    FillSubKey@key	PTR unsigned char  size(2) Largest target is 16
		 -> AESCmac@k2(BANK1[16]), AESCmac@k1(BANK1[16]), 

    GenerateSubkey@k2	PTR unsigned char  size(2) Largest target is 16
		 -> AESCmac@k2(BANK1[16]), 

    GenerateSubkey@k1	PTR unsigned char  size(2) Largest target is 16
		 -> AESCmac@k1(BANK1[16]), 

    GenerateSubkey@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    AESCmac@output	PTR unsigned char  size(2) Largest target is 16
		 -> aesBuffer(BANK1[16]), 

    AESCmac@input	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), macBuffer(BIGRAM[271]), 

    AESCmac@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    AESCmac@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), NULL(NULL[0]), macBuffer(BIGRAM[271]), 

    AESEncodeLoRa@block	PTR unsigned char  size(2) Largest target is 271
		 -> GenerateSubkey@l(BANK0[16]), AESCmac@y(BANK1[16]), AESCmac@x(BANK1[16]), aesBuffer(BANK1[16]), 
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    AESEncodeLoRa@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    EncryptFRMPayload@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> payload(BANK1[2]), radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), NULL(NULL[0]), 

    EncryptFRMPayload@bufferToBeEncrypted	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), macBuffer(BIGRAM[271]), 

    EncryptFRMPayload@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    ComputeMic@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), macBuffer(BIGRAM[271]), 

    ComputeMic@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    ExtractMic@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    CheckMcastFlags@hdr	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    CheckFlags@hdr	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ComputeSessionKeys@joinAcceptBuffer	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    PrepareSessionKeys@networkId	PTR unsigned char  size(2) Largest target is 2
		 -> ComputeSessionKeys@joinAcceptBuffer(BANK0[2]), radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    PrepareSessionKeys@appNonce	PTR unsigned char  size(2) Largest target is 2
		 -> ComputeSessionKeys@joinAcceptBuffer(BANK0[2]), radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    PrepareSessionKeys@sessionKey	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    IncludeMacCommandsResponse@macBuffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), macBuffer(BIGRAM[271]), 

    IncludeMacCommandsResponse@pBufferIndex	PTR unsigned char  size(1) Largest target is 1
		 -> AssemblePacket@macCmdIdx(BANK0[1]), AssemblePacket@bufferIndex(BANK0[1]), 

    AssemblePacket@buffer	PTR unsigned char  size(2) Largest target is 2
		 -> payload(BANK1[2]), NULL(NULL[0]), 

    sp__memset	PTR void  size(2) Largest target is 271
		 -> GenerateSubkey@l(BANK0[16]), AESCmac@x(BANK1[16]), AssemblePacket@mhdr(BANK0[1]), aesBuffer(BANK1[16]), 
		 -> Channels(BANK4[224]), macBuffer(BIGRAM[271]), loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    ExecuteRxTimingSetup@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ExecuteLinkCheck@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteRxTimingSetup	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteNewChannel	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteDevStatus	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteRxParamSetupReq	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteDutyCycle	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteLinkAdr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteLinkCheck	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    MacExecuteCommands@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    MacExecuteCommands@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__MacExecuteCommands	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    LORAWAN_RxDone@packet	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), NULL(NULL[0]), 

    LORAWAN_RxDone@hdr	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    LORAWAN_RxDone@joinAccept	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    LORAWAN_RxDone@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew	PTR unsigned char  size(2) Largest target is 16
		 -> appSKey(BANK1[16]), 

    LORAWAN_SetNetworkSessionKey@networkSessionKeyNew	PTR unsigned char  size(2) Largest target is 16
		 -> nwkSKey(BANK1[16]), 

    sp__memcpy	PTR void  size(2) Largest target is 271
		 -> RadioConfiguration(BANK1[54]), UpdateCfList@frequency(BANK0[4]), AESCmac@x(BANK1[16]), AESEncodeLoRa@useKey(BANK0[16]), 
		 -> ComputeMic@mic(BANK0[4]), ExtractMic@mic(BANK0[4]), aesBuffer(BANK1[16]), radioBuffer(BIGRAM[271]), 
		 -> LORAWAN_RxDone@computedMic(BANK0[4]), Channels(BANK4[224]), loRa.activationParameters.applicationEui(BANK2[8]), loRa.activationParameters.deviceEui(BANK2[8]), 
		 -> macBuffer(BIGRAM[271]), loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    LORAWAN_Send@buffer	PTR void  size(2) Largest target is 2
		 -> payload(BANK1[2]), NULL(NULL[0]), 

    S272$RxJoinResponse	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> RxJoinResponse(), 

    rxPayload.RxJoinResponse	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> RxJoinResponse(), 

    S272$RxAppData	PTR FTN(PTR unsigned char ,unsigned char ,enum E17369,)void  size(2) Largest target is 1
		 -> RxDataDone(), 

    rxPayload.RxAppData	PTR FTN(PTR unsigned char ,unsigned char ,enum E17369,)void  size(2) Largest target is 1
		 -> RxDataDone(), 

    AESEncode@block	PTR unsigned char  size(2) Largest target is 271
		 -> GenerateSubkey@l(BANK0[16]), AESCmac@y(BANK1[16]), AESCmac@x(BANK1[16]), aesBuffer(BANK1[16]), 
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    AESEncode@masterKey	PTR unsigned char  size(1) Largest target is 16
		 -> AESEncodeLoRa@useKey(BANK0[16]), 

    EncodeShiftRow@stateTable	PTR unsigned char  size(2) Largest target is 271
		 -> GenerateSubkey@l(BANK0[16]), AESCmac@y(BANK1[16]), AESCmac@x(BANK1[16]), aesBuffer(BANK1[16]), 
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    EncKeySchedule@key	PTR unsigned char  size(1) Largest target is 16
		 -> AESEncode@key(BANK0[16]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR_ISR_lora->i2_SwTimersInterrupt
    i2_TMR_SwapTimer->i2_TMR1_ReadTimer
    i2_SwTimersInterrupt->i2_TMR_GetDeltaTime
    i2_TMR_GetDeltaTime->i2_TMR1_ReadTimer

Critical Paths under _main in BANK0

    _sendPacket->_LORAWAN_Send
    _SYSTEM_Initialize->_TMR1_Initialize
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCBF4_SetInterruptHandler
    _TMR_ISR_Lora_Init->_TMR1_SetInterruptHandler
    _DIO5_ISR_Lora_Init->_INT2_SetInterruptHandler
    _DIO2_ISR_Lora_Init->_IOCBF4_SetInterruptHandler
    _DIO1_ISR_Lora_Init->_INT1_SetInterruptHandler
    _DIO0_ISR_Lora_Init->_INT0_SetInterruptHandler
    _EXT_INT_Initialize->_INT0_SetInterruptHandler
    _EXT_INT_Initialize->_INT1_SetInterruptHandler
    _EXT_INT_Initialize->_INT2_SetInterruptHandler
    _EXT_INT_Initialize->_INT3_SetInterruptHandler
    _LORAWAN_SetNetworkSessionKey->_memcpy
    _LORAWAN_SetApplicationSessionKey->_memcpy
    _LORAWAN_Mainloop->_RADIO_DIO0
    _UnconfirmedTransmissionCallback->_RADIO_Transmit
    _RADIO_WatchdogTimeout->_RADIO_WriteMode
    _RADIO_RxFSKTimeout->_RADIO_WriteMode
    _LORAWAN_ReceiveWindow1Callback->_RADIO_ReceiveStart
    _LORAWAN_LinkCheckCallback->_SwTimerStart
    _DutyCycleCallback->_SwTimerStart
    _AutomaticReplyCallback->_LORAWAN_Send
    _AckRetransmissionCallback->_RADIO_Transmit
    _RADIO_DIO5->_RADIO_UnhandledInterrupt
    _RADIO_DIO4->_RADIO_UnhandledInterrupt
    _RADIO_DIO3->_RADIO_UnhandledInterrupt
    _RADIO_RxTimeout->_LORAWAN_RxTimeout
    _RADIO_FHSSChangeChannel->_RADIO_WriteFrequency
    _RADIO_DIO0->_RADIO_FSKPayloadReady
    _RADIO_DIO0->_RADIO_RxDone
    _RADIO_UnhandledInterrupt->_RADIO_RegisterWrite
    _RADIO_TxDone->_LORAWAN_TxDone
    _RADIO_RxDone->_LORAWAN_RxDone
    _RADIO_FSKPayloadReady->_LORAWAN_RxDone
    _LORAWAN_RxTimeout->_RADIO_Transmit
    _LORAWAN_ReceiveWindow2Callback->_RADIO_ReceiveStart
    _LORAWAN_RxDone->_LORAWAN_Send
    _UpdateRetransmissionAckTimeoutState->_SwTimerStart
    _UpdateJoinSuccessState->_SwTimerStart
    _UpdateCfList->___lmul
    _StartReTxTimer->_SwTimerStart
    _MacExecuteCommands->_ExecuteNewChannel
    _ExecuteRxTimingSetup->_UpdateReceiveDelays
    _UpdateReceiveDelays->___wmul
    _ExecuteRxParamSetupReq->___lmul
    _ExecuteNewChannel->___lmul
    _ValidateDataRange->_ValidateDataRate
    _LORAWAN_SetChannelIdStatus->_UpdateChannelIdStatus
    _ExecuteLinkAdr->_EnableChannels
    _EnableChannels->_EnableChannels1
    _EnableChannels1->_UpdateChannelIdStatus
    _LORAWAN_Send->_AssemblePacket
    _LORAWAN_GetMaxPayloadSize->_CountfOptsLength
    _AssemblePacket->_AESCmac
    _EncryptFRMPayload->_AESEncodeLoRa
    _AssembleEncryptionBlock->_memcpy
    _ExtractMic->_memcpy
    _ComputeSessionKeys->_AESEncodeLoRa
    _PrepareSessionKeys->_memcpy
    _RADIO_FSKPacketSent->_LORAWAN_TxDone
    _SwTimerReadValue->_SwTimersInterrupt
    _LORAWAN_EnterContinuousReceive->_RADIO_ReceiveStart
    _RADIO_ReceiveStop->_RADIO_WriteMode
    _RADIO_ReceiveStart->_RADIO_WriteConfiguration
    _ConfigureRadioRx->_ConfigureRadio
    _LORAWAN_Join->_PrepareJoinRequestFrame
    _SelectChannelForTransmission->_SearchAvailableChannel
    _SearchAvailableChannel->_Random
    _ConfigureRadioTx->_ConfigureRadio
    _ConfigureRadio->_RADIO_SetFSKSyncWord
    _RADIO_SetFSKSyncWord->_memcpy
    _RADIO_Transmit->_RADIO_WriteConfiguration
    _RADIO_WriteConfiguration->___lmul
    _RADIO_WritePower->_RADIO_RegisterRead
    _RADIO_WritePower->_RADIO_RegisterWrite
    _RADIO_WriteFSKFrequencyDeviation->___lldiv
    _RADIO_WriteFSKBitRate->___lldiv
    _PrepareJoinRequestFrame->_ComputeMic
    _Random->___lwmod
    _rand->___lmul
    ___lwmod->_rand
    _ComputeMic->_AESCmac
    _AESCmac->_GenerateSubkey
    _GenerateSubkey->_AESEncodeLoRa
    _AESEncodeLoRa->_AESEncode
    _AESEncode->_EncKeySchedule
    _LORAWAN_Init->_LORAWAN_Reset
    _srand->_RADIO_ReadRandom
    _SetCallbackSoftwareTimers->_SwTimerSetCallback
    _RADIO_ReadRandom->_RADIO_WriteMode
    _LORAWAN_Reset->_LORAWAN_LinkCheckConfigure
    _StopAllSoftwareTimers->_SwTimerStop
    _RADIO_Init->_RADIO_WriteFrequency
    _RADIO_WriteMode->_SystemBlockingWaitMs
    _RADIO_RegisterRead->_HALSPISend
    _RADIO_WriteFrequency->___lldiv
    _RADIO_RegisterWrite->_HALSPISend
    _HALSPISend->_SPI2_Exchange8bit
    _RADIO_Reset->_SystemBlockingWaitMs
    _LORAWAN_LinkCheckConfigure->___lmul
    ___lmul->_SwTimerReadValue
    _SwTimerStart->_SwTimersInterrupt
    _TMR_OverrideRemaining->_TMR_SwapTimer
    _TMR_SwapTimer->_TMR1_ReadTimer
    _SwTimersInterrupt->_TMR_GetDeltaTime
    _TMR_GetDeltaTime->_TMR1_ReadTimer
    _SwTimerSetTimeout->___lldiv
    _InitDefault868Channels->_memcpy
    _InitDefault433Channels->_memcpy
    _CreateAllSoftwareTimers->_SwTimerCreate

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _sendPacket->_LORAWAN_Send
    _LORAWAN_Mainloop->_RADIO_DIO0
    _AutomaticReplyCallback->_LORAWAN_Send
    _RADIO_RxDone->_LORAWAN_RxDone
    _RADIO_FSKPayloadReady->_LORAWAN_RxDone
    _LORAWAN_RxDone->_LORAWAN_Send
    _LORAWAN_Send->_AssemblePacket
    _AssemblePacket->_AESCmac
    _PrepareJoinRequestFrame->_ComputeMic
    _ComputeMic->_AESCmac

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0 6728738
                                            116 BANK1      5     5      0
                       _LORAWAN_Init
                       _LORAWAN_Join
                   _LORAWAN_Mainloop
   _LORAWAN_SetApplicationSessionKey
           _LORAWAN_SetDeviceAddress
       _LORAWAN_SetNetworkSessionKey
                  _SYSTEM_Initialize
                              _flash
                         _sendPacket
 ---------------------------------------------------------------------------------
 (1) _sendPacket                                           0     0      0  317742
                       _LORAWAN_Send
 ---------------------------------------------------------------------------------
 (1) _flash                                                2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2112
                 _EXT_INT_Initialize
               _INTERRUPT_Initialize
               _LORAWAN_PlatformInit
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI2_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      2     2      0     200
                                              2 BANK0      2     2      0
           _TMR1_SetInterruptHandler
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0     223
                                              2 BANK0      1     1      0
         _IOCBF4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LORAWAN_PlatformInit                                 0     0      0     989
                 _DIO0_ISR_Lora_Init
                 _DIO1_ISR_Lora_Init
                 _DIO2_ISR_Lora_Init
                 _DIO3_ISR_Lora_Init
                 _DIO4_ISR_Lora_Init
                 _DIO5_ISR_Lora_Init
                    _SystemTimerInit
                  _TMR_ISR_Lora_Init
 ---------------------------------------------------------------------------------
 (3) _TMR_ISR_Lora_Init                                    0     0      0     200
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     200
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _SystemTimerInit                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DIO5_ISR_Lora_Init                                   0     0      0     200
           _INT2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _DIO4_ISR_Lora_Init                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DIO3_ISR_Lora_Init                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DIO2_ISR_Lora_Init                                   0     0      0     200
         _IOCBF4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCBF4_SetInterruptHandler                           2     0      2     200
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _DIO1_ISR_Lora_Init                                   0     0      0     200
           _INT1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _DIO0_ISR_Lora_Init                                   0     0      0     189
           _INT0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     700
           _INT0_SetInterruptHandler
           _INT1_SetInterruptHandler
           _INT2_SetInterruptHandler
           _INT3_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT3_SetInterruptHandler                             2     0      2     111
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _INT2_SetInterruptHandler                             2     0      2     200
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _INT1_SetInterruptHandler                             2     0      2     200
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _INT0_SetInterruptHandler                             2     0      2     189
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_SetNetworkSessionKey                         2     0      2   13228
                                             10 BANK0      2     0      2
                             _memcpy
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_SetDeviceAddress                             4     0      4     111
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_SetApplicationSessionKey                     2     0      2   13228
                                             10 BANK0      2     0      2
                             _memcpy
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_Mainloop                                     0     0      0 5952755
             _INTERRUPT_GetDioStatus
                         _RADIO_DIO0
                         _RADIO_DIO1
                         _RADIO_DIO2
                         _RADIO_DIO3
                         _RADIO_DIO4
                         _RADIO_DIO5
                    _SwTimersExecute
 ---------------------------------------------------------------------------------
 (2) _SwTimersExecute                                      5     5      0 2321151
                                            128 BANK0      5     5      0
                   Absolute function *
          _AckRetransmissionCallback *
             _AutomaticReplyCallback *
                  _DutyCycleCallback *
          _LORAWAN_LinkCheckCallback *
     _LORAWAN_ReceiveWindow1Callback *
     _LORAWAN_ReceiveWindow2Callback *
                 _RADIO_RxFSKTimeout *
              _RADIO_WatchdogTimeout *
    _UnconfirmedTransmissionCallback *
             _UpdateJoinSuccessState *
 ---------------------------------------------------------------------------------
 (3) _UnconfirmedTransmissionCallback                      1     0      1  153376
                     _RADIO_Transmit
_ResetParametersForUnconfirmedTransm
                         _RxDataDone *
       _SelectChannelForTransmission
 ---------------------------------------------------------------------------------
 (3) _RADIO_WatchdogTimeout                                1     0      1  681520
                  _LORAWAN_RxTimeout
                     _LORAWAN_TxDone
                    _RADIO_WriteMode
 ---------------------------------------------------------------------------------
 (3) _RADIO_RxFSKTimeout                                   2     1      1  499821
                  _LORAWAN_RxTimeout
                 _RADIO_RegisterRead
                    _RADIO_WriteMode
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (3) _LORAWAN_ReceiveWindow1Callback                       5     4      1  155778
                   _ConfigureRadioRx
                         _GetRx1Freq
                 _RADIO_ReceiveStart
                  _RADIO_ReceiveStop
                  _RADIO_ReleaseData
 ---------------------------------------------------------------------------------
 (4) _GetRx1Freq                                           4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _LORAWAN_LinkCheckCallback                            6     5      1    9224
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _DutyCycleCallback                                   11    10      1    9667
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _AutomaticReplyCallback                               1     0      1  317742
                       _LORAWAN_Send
 ---------------------------------------------------------------------------------
 (3) _AckRetransmissionCallback                            2     1      1  163191
               _FindSmallestDataRate
          _LORAWAN_GetMaxPayloadSize
                     _RADIO_Transmit
_ResetParametersForConfirmedTransmis
                         _RxDataDone *
       _SelectChannelForTransmission
_UpdateRetransmissionAckTimeoutState
 ---------------------------------------------------------------------------------
 (16) Absolute function(Fake)                              4     0      4       0
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO5                                           2     2      0    9877
                                              5 BANK0      1     1      0
                 _RADIO_RegisterRead
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO4                                           2     2      0    9877
                                              5 BANK0      1     1      0
                 _RADIO_RegisterRead
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO3                                           2     2      0    9877
                                              5 BANK0      1     1      0
                 _RADIO_RegisterRead
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO2                                           3     3      0   36323
                                             25 BANK0      2     2      0
            _RADIO_FHSSChangeChannel
                 _RADIO_RegisterRead
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO1                                           2     2      0  545727
                                             96 BANK0      2     2      0
            _RADIO_FHSSChangeChannel
                 _RADIO_RegisterRead
                    _RADIO_RxTimeout
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (3) _RADIO_RxTimeout                                      0     0      0  509373
                  _LORAWAN_RxTimeout
                _RADIO_RegisterWrite
                    _RADIO_WriteMode
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (3) _RADIO_FHSSChangeChannel                              1     1      0   26412
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
               _RADIO_WriteFrequency
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO0                                           4     4      0 3019900
                                            155 BANK0      2     2      0
                                            114 BANK1      2     2      0
                _RADIO_FSKPacketSent
              _RADIO_FSKPayloadReady
                 _RADIO_RegisterRead
                       _RADIO_RxDone
                       _RADIO_TxDone
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (3) _RADIO_UnhandledInterrupt                             1     1      0    9747
                                              4 BANK0      1     1      0
                _RADIO_RegisterWrite
 ---------------------------------------------------------------------------------
 (3) _RADIO_TxDone                                         8     8      0  213243
                                            116 BANK0      8     8      0
                     _LORAWAN_TxDone
                _RADIO_RegisterWrite
                    _RADIO_WriteMode
                   _SwTimerReadValue
                        _SwTimerStop
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) _RADIO_RxDone                                         2     2      0 1059641
                                            153 BANK0      2     2      0
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
                     _LORAWAN_RxDone
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
                    _RADIO_WriteMode
                        _SwTimerStop
                            ___abdiv
 ---------------------------------------------------------------------------------
 (4) ___abdiv                                              5     4      1     549
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (3) _RADIO_FSKPayloadReady                                2     2      0 1533284
                                            153 BANK0      2     2      0
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
                     _LORAWAN_RxDone
                  _LORAWAN_RxTimeout
                 _RADIO_RegisterRead
                    _RADIO_WriteMode
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (4) _LORAWAN_RxTimeout                                    9     9      0  483942
                                             87 BANK0      9     9      0
     _LORAWAN_ReceiveWindow2Callback
                     _RADIO_Transmit
_ResetParametersForConfirmedTransmis
_ResetParametersForUnconfirmedTransm
                         _RxDataDone *
       _SelectChannelForTransmission
                   _SetJoinFailState
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _LORAWAN_ReceiveWindow2Callback                       1     0      1  321190
                   _ConfigureRadioRx
     _LORAWAN_EnterContinuousReceive
                    _RADIO_GetStatus
                 _RADIO_ReceiveStart
                  _RADIO_ReceiveStop
                  _RADIO_ReleaseData
_ResetParametersForConfirmedTransmis
_ResetParametersForUnconfirmedTransm
                         _RxDataDone *
 ---------------------------------------------------------------------------------
 (4) _LORAWAN_RxDone                                      28    25      3 1033302
                                            128 BANK0     25    25      0
                                            111 BANK1      3     0      3
                            _AESCmac
                      _AESEncodeLoRa
            _AssembleEncryptionBlock
                         _CheckFlags
                    _CheckMcastFlags
                         _ComputeMic
                 _ComputeSessionKeys
                  _EncryptFRMPayload
                         _ExtractMic
     _LORAWAN_EnterContinuousReceive
                       _LORAWAN_Send
                 _MacExecuteCommands
                    _RADIO_GetStatus
                  _RADIO_ReleaseData
                         _RxDataDone *
             _SearchAvailableChannel
                   _SetJoinFailState
             _SetReceptionNotOkState
                     _StartReTxTimer
                        _SwTimerStop
                       _UpdateCfList
                   _UpdateDLSettings
             _UpdateJoinSuccessState
                _UpdateReceiveDelays
_UpdateRetransmissionAckTimeoutState
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _UpdateRetransmissionAckTimeoutState                  4     4      0    9085
                                             48 BANK0      4     4      0
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _UpdateJoinSuccessState                               5     4      1    9122
                     _RxJoinResponse *
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _UpdateDLSettings                                     2     1      1     228
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _UpdateCfList                                        11     9      2   22339
                                             60 BANK0     11     9      2
         _LORAWAN_SetChannelIdStatus
                  _ValidateFrequency
                             ___lmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _StartReTxTimer                                       9     9      0    9376
                                             48 BANK0      9     9      0
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _SetReceptionNotOkState                               0     0      0  165446
     _LORAWAN_EnterContinuousReceive
                         _RxDataDone *
 ---------------------------------------------------------------------------------
 (5) _SetJoinFailState                                     0     0      0       0
                     _RxJoinResponse *
 ---------------------------------------------------------------------------------
 (4) _RxJoinResponse                                       1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _MacExecuteCommands                                   8     5      3   25555
                                             68 BANK0      8     5      3
                   _ExecuteDevStatus
                   _ExecuteDutyCycle
                     _ExecuteLinkAdr
                   _ExecuteLinkCheck
                  _ExecuteNewChannel
             _ExecuteRxParamSetupReq
               _ExecuteRxTimingSetup
 ---------------------------------------------------------------------------------
 (6) _ExecuteRxTimingSetup                                 3     1      2     843
                                              7 BANK0      3     1      2
                _UpdateReceiveDelays
 ---------------------------------------------------------------------------------
 (5) _UpdateReceiveDelays                                  1     1      0     640
                                              6 BANK0      1     1      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     578
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (6) _ExecuteRxParamSetupReq                               7     5      2    7042
                                             60 BANK0      7     5      2
     _UpdateReceiveWindow2Parameters
                   _ValidateDataRate
                  _ValidateFrequency
                   _ValidateRxOffset
                             ___lmul
 ---------------------------------------------------------------------------------
 (7) _ValidateRxOffset                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _UpdateReceiveWindow2Parameters                       5     0      5     438
                                              0 BANK0      5     0      5
 ---------------------------------------------------------------------------------
 (6) _ExecuteNewChannel                                    8     6      2   12796
                                             60 BANK0      8     6      2
         _LORAWAN_SetChannelIdStatus
              _UpdateChannelIdStatus
                    _UpdateDataRange
                    _UpdateDutyCycle
                    _UpdateFrequency
                  _ValidateChannelId
                  _ValidateDataRange
                  _ValidateFrequency
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) _ValidateFrequency                                    5     1      4     644
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (7) _ValidateDataRange                                    4     4      0     297
                                              2 BANK0      4     4      0
                   _ValidateDataRate
 ---------------------------------------------------------------------------------
 (7) _UpdateFrequency                                      5     1      4     385
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (7) _UpdateDutyCycle                                      3     1      2     385
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (7) _UpdateDataRange                                      4     3      1     608
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (6) _LORAWAN_SetChannelIdStatus                           3     2      1    2369
                                              4 BANK0      3     2      1
              _UpdateChannelIdStatus
                  _ValidateChannelId
 ---------------------------------------------------------------------------------
 (7) _ValidateChannelId                                    3     2      1     842
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _ExecuteLinkCheck                                     2     0      2     203
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (6) _ExecuteLinkAdr                                       9     7      2    3295
                                             13 BANK0      9     7      2
                     _EnableChannels
              _UpdateCurrentDataRate
                      _UpdateTxPower
                _ValidateChannelMask
            _ValidateChannelMaskCntl
                   _ValidateDataRate
                    _ValidateTxPower
 ---------------------------------------------------------------------------------
 (7) _ValidateTxPower                                      2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _ValidateDataRate                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _ValidateChannelMaskCntl                              2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _ValidateChannelMask                                  3     1      2     271
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (7) _UpdateTxPower                                        1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _UpdateCurrentDataRate                                1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _EnableChannels                                       3     0      3    2044
                                             10 BANK0      3     0      3
                    _EnableChannels1
 ---------------------------------------------------------------------------------
 (8) _EnableChannels1                                      6     1      5    1774
                                              4 BANK0      6     1      5
              _UpdateChannelIdStatus
 ---------------------------------------------------------------------------------
 (7) _UpdateChannelIdStatus                                4     3      1     971
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (6) _ExecuteDutyCycle                                     6     4      2     265
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (6) _ExecuteDevStatus                                     2     0      2     135
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _LORAWAN_Send                                         7     3      4  317742
                                            125 BANK0      3     3      0
                                            107 BANK1      4     0      4
                     _AssemblePacket
          _LORAWAN_GetMaxPayloadSize
                  _RADIO_ReceiveStop
                     _RADIO_Transmit
       _SelectChannelForTransmission
 ---------------------------------------------------------------------------------
 (3) _LORAWAN_GetMaxPayloadSize                            3     3      0     272
                                              8 BANK0      3     3      0
                   _CountfOptsLength
 ---------------------------------------------------------------------------------
 (3) _AssemblePacket                                      12     7      5  151724
                                            118 BANK0      7     7      0
                                            102 BANK1      5     0      5
                            _AESCmac
            _AssembleEncryptionBlock
                   _CountfOptsLength
                  _EncryptFRMPayload
               _FindSmallestDataRate
         _IncludeMacCommandsResponse
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (4) _IncludeMacCommandsResponse                          12     8      4    2532
                                              0 BANK0     12     8      4
                 _RADIO_GetPacketSnr
 ---------------------------------------------------------------------------------
 (5) _RADIO_GetPacketSnr                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _FindSmallestDataRate                                 4     4      0     424
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _EncryptFRMPayload                                   22     8     14   44159
                                             64 BANK0     22     8     14
                      _AESEncodeLoRa
            _AssembleEncryptionBlock
 ---------------------------------------------------------------------------------
 (5) _AssembleEncryptionBlock                              9     2      7   19076
                                             10 BANK0      9     2      7
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (4) _CountfOptsLength                                     8     8      0     198
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (5) _ExtractMic                                          10     6      4   13819
                                             10 BANK0     10     6      4
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _ComputeSessionKeys                                   2     0      2   37793
                                             64 BANK0      2     0      2
                      _AESEncodeLoRa
                 _PrepareSessionKeys
 ---------------------------------------------------------------------------------
 (6) _PrepareSessionKeys                                   7     1      6   17605
                                             10 BANK0      7     1      6
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (5) _CheckMcastFlags                                      2     0      2     290
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _CheckFlags                                           2     0      2     228
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _RADIO_FSKPacketSent                                  9     9      0  203691
                                            116 BANK0      9     9      0
                     _LORAWAN_TxDone
                 _RADIO_RegisterRead
                    _RADIO_WriteMode
                   _SwTimerReadValue
                        _SwTimerStop
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) _LORAWAN_TxDone                                      40    38      2  181894
                                             80 BANK0     36    34      2
     _LORAWAN_EnterContinuousReceive
                    _RADIO_GetStatus
                         _RxDataDone *
                   _SwTimerIsRunning
                   _SwTimerReadValue
                  _SwTimerSetTimeout
                       _SwTimerStart
                        _SwTimerStop
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) _SwTimerReadValue                                     9     5      4     455
                                             39 BANK0      9     5      4
                  _SwTimersInterrupt
 ---------------------------------------------------------------------------------
 (5) _SwTimerIsRunning                                     2     2      0      65
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _RADIO_GetStatus                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _LORAWAN_EnterContinuousReceive                       0     0      0  160595
                   _ConfigureRadioRx
                 _RADIO_ReceiveStart
                  _RADIO_ReceiveStop
                  _RADIO_ReleaseData
_ResetParametersForConfirmedTransmis
_ResetParametersForUnconfirmedTransm
                         _RxDataDone *
 ---------------------------------------------------------------------------------
 (4) _RxDataDone                                           4     0      4    4851
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) _ResetParametersForUnconfirmedTransmission            0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _ResetParametersForConfirmedTransmission              0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _RADIO_ReleaseData                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _RADIO_ReceiveStop                                    0     0      0   15684
                    _RADIO_WriteMode
 ---------------------------------------------------------------------------------
 (6) _RADIO_ReceiveStart                                  10     8      2  125388
                                             70 BANK0     10     8      2
                _RADIO_RegisterWrite
           _RADIO_WriteConfiguration
                    _RADIO_WriteMode
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (6) _ConfigureRadioRx                                     5     1      4   14672
                                             18 BANK0      5     1      4
                     _ConfigureRadio
                       _RADIO_SetCRC
                _RADIO_SetIQInverted
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_GetDioStatus                               1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_Join                                         3     3      0  256427
                                            131 BANK0      3     3      0
            _PrepareJoinRequestFrame
                     _RADIO_Transmit
       _SelectChannelForTransmission
                  _SwTimerSetTimeout
                       _SwTimerStart
               _UpdateJoinInProgress
 ---------------------------------------------------------------------------------
 (2) _UpdateJoinInProgress                                 1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _SelectChannelForTransmission                         3     3      0   22010
                                             80 BANK0      3     3      0
                   _ConfigureRadioTx
             _SearchAvailableChannel
 ---------------------------------------------------------------------------------
 (4) _SearchAvailableChannel                              11     9      2    7280
                                             69 BANK0     11     9      2
                             _Random
 ---------------------------------------------------------------------------------
 (4) _ConfigureRadioTx                                     6     2      4   14532
                                             18 BANK0      6     2      4
                     _ConfigureRadio
                       _RADIO_SetCRC
                _RADIO_SetIQInverted
               _RADIO_SetOutputPower
 ---------------------------------------------------------------------------------
 (5) _RADIO_SetOutputPower                                 1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _RADIO_SetIQInverted                                  1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _RADIO_SetCRC                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _ConfigureRadio                                       5     1      4   14236
                                             13 BANK0      5     1      4
                 _RADIO_SetBandwidth
          _RADIO_SetChannelFrequency
               _RADIO_SetFSKSyncWord
        _RADIO_SetFrequencyHopPeriod
              _RADIO_SetLoRaSyncWord
                _RADIO_SetModulation
           _RADIO_SetSpreadingFactor
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetSpreadingFactor                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetModulation                                  1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetFrequencyHopPeriod                          2     0      2     135
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetFSKSyncWord                                 3     1      2   13293
                                             10 BANK0      3     1      2
                             _memcpy
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetChannelFrequency                            4     0      4     321
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetBandwidth                                   1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RADIO_Transmit                                      17    14      3  126515
                                             70 BANK0     17    14      3
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
           _RADIO_WriteConfiguration
                    _RADIO_WriteMode
                  _SwTimerSetTimeout
                       _SwTimerStart
                        _SwTimerStop
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) _RADIO_WriteConfiguration                            10     8      2   90430
                                             60 BANK0     10     8      2
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
              _RADIO_WriteFSKBitRate
   _RADIO_WriteFSKFrequencyDeviation
               _RADIO_WriteFrequency
                    _RADIO_WriteMode
                   _RADIO_WritePower
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) _RADIO_WritePower                                     3     3      0   10303
                                              4 BANK0      3     3      0
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
 ---------------------------------------------------------------------------------
 (5) _RADIO_WriteFSKFrequencyDeviation                     8     4      4   15813
                                             13 BANK0      8     4      4
                _RADIO_RegisterWrite
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _RADIO_WriteFSKBitRate                                8     4      4   15810
                                             13 BANK0      8     4      4
                _RADIO_RegisterWrite
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) _PrepareJoinRequestFrame                              9     9      0  104515
                                            122 BANK0      9     9      0
                         _ComputeMic
                             _Random
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (5) _Random                                               2     0      2    6071
                                             67 BANK0      2     0      2
                            ___lwmod
                               _rand
 ---------------------------------------------------------------------------------
 (6) _rand                                                 2     0      2    5392
                                             60 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     440
                                             62 BANK0      5     1      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (5) _ComputeMic                                           9     4      5   81241
                                            118 BANK0      4     4      0
                                            102 BANK1      5     0      5
                            _AESCmac
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _AESCmac                                            116   109      7   67391
                                            104 BANK0     14     7      7
                                              0 BANK1    102   102      0
                      _AESEncodeLoRa
                     _GenerateSubkey
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (5) _GenerateSubkey                                      40    34      6   26439
                                             64 BANK0     40    34      6
                      _AESEncodeLoRa
                         _FillSubKey
                             _memset
 ---------------------------------------------------------------------------------
 (6) _FillSubKey                                           8     3      5    1539
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (5) _AESEncodeLoRa                                       20    16      4   19957
                                             44 BANK0     20    16      4
                          _AESEncode
                             _memcpy
 ---------------------------------------------------------------------------------
 (6) _AESEncode                                           38    35      3    5098
                                              6 BANK0     38    35      3
                     _EncKeySchedule
                     _EncodeShiftRow
 ---------------------------------------------------------------------------------
 (7) _EncodeShiftRow                                       3     1      2     984
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (7) _EncKeySchedule                                       6     5      1    1164
                                              0 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_Init                                         4     0      4  172804
                                             72 BANK0      4     0      4
            _CreateAllSoftwareTimers
                      _LORAWAN_Reset
                         _RADIO_Init
                   _RADIO_ReadRandom
          _SetCallbackSoftwareTimers
              _StopAllSoftwareTimers
                              _srand
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2     111
                                             17 BANK0      2     0      2
                   _RADIO_ReadRandom (ARG)
 ---------------------------------------------------------------------------------
 (2) _SetCallbackSoftwareTimers                            0     0      0    2224
                 _SwTimerSetCallback
 ---------------------------------------------------------------------------------
 (2) _RADIO_ReadRandom                                     5     3      2   26256
                                             12 BANK0      5     3      2
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
                    _RADIO_WriteMode
               _SystemBlockingWaitMs
 ---------------------------------------------------------------------------------
 (2) _LORAWAN_Reset                                        1     1      0   97991
                                             71 BANK0      1     1      0
             _InitDefault433Channels
             _InitDefault868Channels
         _LORAWAN_LinkCheckConfigure
                         _RADIO_Init
              _RADIO_SetLoRaSyncWord
              _StopAllSoftwareTimers
             _UpdateMinMaxChDataRate
                             _memset
 ---------------------------------------------------------------------------------
 (3) _UpdateMinMaxChDataRate                               2     2      0     156
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _StopAllSoftwareTimers                                0     0      0      31
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetLoRaSyncWord                                1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RADIO_Init                                           7     1      6   45810
                                             25 BANK0      7     1      6
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
                        _RADIO_Reset
               _RADIO_WriteFrequency
                    _RADIO_WriteMode
                      _SwTimerCreate
                 _SwTimerSetCallback
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (3) _SwTimerSetCallback                                   4     1      3    2224
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (4) _RADIO_WriteMode                                      7     5      2   15684
                                              5 BANK0      7     5      2
                    _HALDIO5PinValue
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
               _SystemBlockingWaitMs
 ---------------------------------------------------------------------------------
 (5) _RADIO_RegisterRead                                   2     2      0     130
                                              2 BANK0      2     2      0
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
 ---------------------------------------------------------------------------------
 (5) _HALDIO5PinValue                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RADIO_WriteFrequency                                12     8      4   16566
                                             13 BANK0     12     8      4
                _RADIO_RegisterWrite
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (6) ___llmod                                              9     1      8     440
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (5) _RADIO_RegisterWrite                                  2     1      1    9716
                                              2 BANK0      2     1      1
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
 ---------------------------------------------------------------------------------
 (6) _HALSPISend                                           1     1      0      62
                                              1 BANK0      1     1      0
                  _SPI2_Exchange8bit
 ---------------------------------------------------------------------------------
 (7) _SPI2_Exchange8bit                                    1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _HALSPICSDeassert                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _HALSPICSAssert                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _RADIO_Reset                                          0     0      0     662
               _HALResetPinMakeInput
              _HALResetPinMakeOutput
             _HALResetPinOutputValue
               _SystemBlockingWaitMs
 ---------------------------------------------------------------------------------
 (5) _SystemBlockingWaitMs                                 5     1      4     618
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (4) _HALResetPinOutputValue                               1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _HALResetPinMakeOutput                                0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _HALResetPinMakeInput                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LORAWAN_LinkCheckConfigure                          11     9      2   14810
                                             60 BANK0     11     9      2
                  _SwTimerSetTimeout
                       _SwTimerStart
                        _SwTimerStop
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (7) ___lmul                                              12     4      8    5392
                                             48 BANK0     12     4      8
                   _SwTimerReadValue (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8    5857
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) _SwTimerStop                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _SwTimerStart                                         9     9      0    1294
                                             39 BANK0      9     9      0
                  _SwTimersInterrupt
              _TMR_OverrideRemaining
 ---------------------------------------------------------------------------------
 (5) _TMR_OverrideRemaining                               10     6      4     743
                                              8 BANK0     10     6      4
                      _TMR_SwapTimer
 ---------------------------------------------------------------------------------
 (6) _TMR_SwapTimer                                        2     0      2     478
                                              6 BANK0      2     0      2
                     _TMR1_ReadTimer
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (7) _TMR1_WriteTimer                                      2     0      2     240
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SwTimersInterrupt                                   17    13      4     390
                                             22 BANK0     17    13      4
                   _TMR_GetDeltaTime
 ---------------------------------------------------------------------------------
 (6) _TMR_GetDeltaTime                                    16    12      4      34
                                              6 BANK0     16    12      4
                     _TMR1_ReadTimer
 ---------------------------------------------------------------------------------
 (7) _TMR1_ReadTimer                                       6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _SwTimerSetTimeout                                    9     5      4    1934
                                             13 BANK0      9     5      4
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _InitDefault868Channels                               1     1      0   16761
                                             10 BANK0      1     1      0
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (3) _InitDefault433Channels                               1     1      0   16761
                                             10 BANK0      1     1      0
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6    3569
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (7) _memcpy                                              10     4      6   13062
                                              0 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _CreateAllSoftwareTimers                              0     0      0     111
                      _SwTimerCreate
 ---------------------------------------------------------------------------------
 (3) _SwTimerCreate                                        1     1      0     111
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (13) _INTERRUPT_InterruptManager                          8     8      0     455
                                             39 COMRAM     8     8      0
                           _INT1_ISR
                           _INT2_ISR
                           _INT3_ISR
                    _PIN_MANAGER_IOC
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (14) _TMR1_ISR                                            0     0      0     455
                      _TMR1_CallBack
 ---------------------------------------------------------------------------------
 (15) _TMR1_CallBack                                       0     0      0     455
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                       _TMR_ISR_lora *
 ---------------------------------------------------------------------------------
 (16) _TMR_ISR_lora                                        0     0      0     455
                i2_SwTimersInterrupt
                    i2_TMR_SwapTimer
 ---------------------------------------------------------------------------------
 (17) i2_TMR_SwapTimer                                     2     0      2     185
                                              6 COMRAM     2     0      2
                   i2_TMR1_ReadTimer
                  i2_TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (18) i2_TMR1_WriteTimer                                   2     0      2     114
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (17) i2_SwTimersInterrupt                                17    13      4     270
                                             22 COMRAM    17    13      4
                 i2_TMR_GetDeltaTime
 ---------------------------------------------------------------------------------
 (18) i2_TMR_GetDeltaTime                                 16    12      4      23
                                              6 COMRAM    16    12      4
                   i2_TMR1_ReadTimer
 ---------------------------------------------------------------------------------
 (18) i2_TMR1_ReadTimer                                    6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (16) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _PIN_MANAGER_IOC                                     0     0      0       0
                         _IOCBF4_ISR
 ---------------------------------------------------------------------------------
 (15) _IOCBF4_ISR                                          0     0      0       0
                   Absolute function *
                      _DIO2_ISR_Lora *
     _IOCBF4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (16) _IOCBF4_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _DIO2_ISR_Lora                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _INT3_ISR                                            0     0      0       0
                      _INT3_CallBack
 ---------------------------------------------------------------------------------
 (15) _INT3_CallBack                                       0     0      0       0
                   Absolute function *
       _INT3_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (16) _INT3_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _INT2_ISR                                            0     0      0       0
                      _INT2_CallBack
 ---------------------------------------------------------------------------------
 (15) _INT2_CallBack                                       0     0      0       0
                   Absolute function *
                      _DIO5_ISR_Lora *
       _INT2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (16) _INT2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _DIO5_ISR_Lora                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _INT1_ISR                                            0     0      0       0
                      _INT1_CallBack
 ---------------------------------------------------------------------------------
 (15) _INT1_CallBack                                       0     0      0       0
                   Absolute function *
                      _DIO1_ISR_Lora *
       _INT1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (16) _INT1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _DIO1_ISR_Lora                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (16) Absolute function(Fake)                              4     0      4       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LORAWAN_Init
     _CreateAllSoftwareTimers
       _SwTimerCreate
     _LORAWAN_Reset
       _InitDefault433Channels
         _memcpy
         _memset
       _InitDefault868Channels
         _memcpy
         _memset
       _LORAWAN_LinkCheckConfigure
         _SwTimerSetTimeout
           ___lldiv (ARG)
         _SwTimerStart
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         _SwTimerStop
         ___lldiv
         ___lmul
           _SwTimerReadValue (ARG)
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
       _RADIO_Init
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_Reset
           _HALResetPinMakeInput
           _HALResetPinMakeOutput
           _HALResetPinOutputValue
           _SystemBlockingWaitMs
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
           ___llmod
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerCreate
         _SwTimerSetCallback
         _SwTimerStop
       _RADIO_SetLoRaSyncWord
       _StopAllSoftwareTimers
         _SwTimerStop
       _UpdateMinMaxChDataRate
       _memset
     _RADIO_Init
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RegisterWrite
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_Reset
         _HALResetPinMakeInput
         _HALResetPinMakeOutput
         _HALResetPinOutputValue
         _SystemBlockingWaitMs
       _RADIO_WriteFrequency
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         ___lldiv
         ___llmod
       _RADIO_WriteMode
         _HALDIO5PinValue
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _SystemBlockingWaitMs
       _SwTimerCreate
       _SwTimerSetCallback
       _SwTimerStop
     _RADIO_ReadRandom
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RegisterWrite
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_WriteMode
         _HALDIO5PinValue
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _SystemBlockingWaitMs
       _SystemBlockingWaitMs
     _SetCallbackSoftwareTimers
       _SwTimerSetCallback
     _StopAllSoftwareTimers
       _SwTimerStop
     _srand
       _RADIO_ReadRandom (ARG)
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SystemBlockingWaitMs
   _LORAWAN_Join
     _PrepareJoinRequestFrame
       _ComputeMic
         _AESCmac
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _GenerateSubkey
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _FillSubKey
             _memset
           _memcpy
           _memset
         _memcpy
       _Random
         ___lwmod
           _rand (ARG)
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
         _rand
           ___lmul
             _SwTimerReadValue (ARG)
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
       _memcpy
       _memset
     _RADIO_Transmit
       _HALSPICSAssert
       _HALSPICSDeassert
       _HALSPISend
         _SPI2_Exchange8bit
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RegisterWrite
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_WriteConfiguration
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteFSKBitRate
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
         _RADIO_WriteFSKFrequencyDeviation
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
           ___llmod
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _RADIO_WritePower
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
         ___lmul
           _SwTimerReadValue (ARG)
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
       _RADIO_WriteMode
         _HALDIO5PinValue
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _SystemBlockingWaitMs
       _SwTimerSetTimeout
         ___lldiv (ARG)
       _SwTimerStart
         _SwTimersInterrupt
           _TMR_GetDeltaTime
             _TMR1_ReadTimer
         _TMR_OverrideRemaining
           _TMR_SwapTimer
             _TMR1_ReadTimer
             _TMR1_WriteTimer
       _SwTimerStop
       ___lldiv
     _SelectChannelForTransmission
       _ConfigureRadioTx
         _ConfigureRadio
           _RADIO_SetBandwidth
           _RADIO_SetChannelFrequency
           _RADIO_SetFSKSyncWord
             _memcpy
           _RADIO_SetFrequencyHopPeriod
           _RADIO_SetLoRaSyncWord
           _RADIO_SetModulation
           _RADIO_SetSpreadingFactor
         _RADIO_SetCRC
         _RADIO_SetIQInverted
         _RADIO_SetOutputPower
       _SearchAvailableChannel
         _Random
           ___lwmod
             _rand (ARG)
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
           _rand
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
     _SwTimerSetTimeout
       ___lldiv (ARG)
     _SwTimerStart
       _SwTimersInterrupt
         _TMR_GetDeltaTime
           _TMR1_ReadTimer
       _TMR_OverrideRemaining
         _TMR_SwapTimer
           _TMR1_ReadTimer
           _TMR1_WriteTimer
     _UpdateJoinInProgress
   _LORAWAN_Mainloop
     _INTERRUPT_GetDioStatus
     _RADIO_DIO0
       _RADIO_FSKPacketSent
         _LORAWAN_TxDone
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_GetStatus
           _RxDataDone *
           _SwTimerIsRunning *
           _SwTimerReadValue *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop *
           ___lldiv *
           ___lmul *
             _SwTimerReadValue (ARG)
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerReadValue
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
         _SwTimerStop
         ___lmul
           _SwTimerReadValue (ARG)
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
       _RADIO_FSKPayloadReady
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
         _LORAWAN_RxDone
           _AESCmac
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _GenerateSubkey
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _FillSubKey
               _memset
             _memcpy
             _memset
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _AssembleEncryptionBlock
             _memcpy
             _memset
           _CheckFlags
           _CheckMcastFlags
           _ComputeMic
             _AESCmac
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _GenerateSubkey
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _FillSubKey
                 _memset
               _memcpy
               _memset
             _memcpy
           _ComputeSessionKeys
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _PrepareSessionKeys
               _memcpy
               _memset
           _EncryptFRMPayload
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _AssembleEncryptionBlock
               _memcpy
               _memset
           _ExtractMic
             _memcpy
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _LORAWAN_Send
             _AssemblePacket
               _AESCmac
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _GenerateSubkey
                   _AESEncodeLoRa
                     _AESEncode
                       _EncKeySchedule
                       _EncodeShiftRow
                     _memcpy
                   _FillSubKey
                   _memset
                 _memcpy
                 _memset
               _AssembleEncryptionBlock
                 _memcpy
                 _memset
               _CountfOptsLength
               _EncryptFRMPayload
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _AssembleEncryptionBlock
                   _memcpy
                   _memset
               _FindSmallestDataRate
               _IncludeMacCommandsResponse
                 _RADIO_GetPacketSnr
               _memcpy
               _memset
             _LORAWAN_GetMaxPayloadSize
               _CountfOptsLength
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_Transmit
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               _SwTimerStop
               ___lldiv
             _SelectChannelForTransmission
               _ConfigureRadioTx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
                 _RADIO_SetOutputPower
               _SearchAvailableChannel
                 _Random
                   ___lwmod
                     _rand (ARG)
                       ___lmul
                         _SwTimerReadValue (ARG)
                           _SwTimersInterrupt
                             _TMR_GetDeltaTime
                               _TMR1_ReadTimer
                   _rand
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
           _MacExecuteCommands
             _ExecuteDevStatus
             _ExecuteDutyCycle
             _ExecuteLinkAdr
               _EnableChannels
                 _EnableChannels1
                   _UpdateChannelIdStatus
               _UpdateCurrentDataRate
               _UpdateTxPower
               _ValidateChannelMask
               _ValidateChannelMaskCntl
               _ValidateDataRate
               _ValidateTxPower
             _ExecuteLinkCheck
             _ExecuteNewChannel
               _LORAWAN_SetChannelIdStatus
                 _UpdateChannelIdStatus
                 _ValidateChannelId
               _UpdateChannelIdStatus
               _UpdateDataRange
               _UpdateDutyCycle
               _UpdateFrequency
               _ValidateChannelId
               _ValidateDataRange
                 _ValidateDataRate
               _ValidateFrequency
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _ExecuteRxParamSetupReq
               _UpdateReceiveWindow2Parameters
               _ValidateDataRate
               _ValidateFrequency
               _ValidateRxOffset
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _ExecuteRxTimingSetup
               _UpdateReceiveDelays
                 ___wmul
           _RADIO_GetStatus
           _RADIO_ReleaseData
           _RxDataDone *
           _SearchAvailableChannel *
             _Random
               ___lwmod
                 _rand (ARG)
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
               _rand
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
           _SetJoinFailState *
             _RxJoinResponse *
           _SetReceptionNotOkState *
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxDataDone *
             _RxDataDone *
           _StartReTxTimer *
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _SwTimerStop *
           _UpdateCfList *
             _LORAWAN_SetChannelIdStatus
               _UpdateChannelIdStatus
               _ValidateChannelId
             _ValidateFrequency
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
             _memcpy
           _UpdateDLSettings *
           _UpdateJoinSuccessState *
             _RxJoinResponse *
             _SwTimerSetTimeout *
               ___lldiv (ARG)
             _SwTimerStart *
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv *
           _UpdateReceiveDelays *
             ___wmul
           _UpdateRetransmissionAckTimeoutState *
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _memcpy *
         _LORAWAN_RxTimeout
           _LORAWAN_ReceiveWindow2Callback
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxDataDone *
             _RADIO_GetStatus
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxDataDone *
           _SelectChannelForTransmission *
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
                 _rand
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
           _SetJoinFailState *
             _RxJoinResponse *
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv *
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerStop
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RxDone
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
         _LORAWAN_RxDone
           _AESCmac
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _GenerateSubkey
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _FillSubKey
               _memset
             _memcpy
             _memset
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _AssembleEncryptionBlock
             _memcpy
             _memset
           _CheckFlags
           _CheckMcastFlags
           _ComputeMic
             _AESCmac
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _GenerateSubkey
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _FillSubKey
                 _memset
               _memcpy
               _memset
             _memcpy
           _ComputeSessionKeys
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _PrepareSessionKeys
               _memcpy
               _memset
           _EncryptFRMPayload
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _AssembleEncryptionBlock
               _memcpy
               _memset
           _ExtractMic
             _memcpy
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _LORAWAN_Send
             _AssemblePacket
               _AESCmac
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _GenerateSubkey
                   _AESEncodeLoRa
                     _AESEncode
                       _EncKeySchedule
                       _EncodeShiftRow
                     _memcpy
                   _FillSubKey
                   _memset
                 _memcpy
                 _memset
               _AssembleEncryptionBlock
                 _memcpy
                 _memset
               _CountfOptsLength
               _EncryptFRMPayload
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _AssembleEncryptionBlock
                   _memcpy
                   _memset
               _FindSmallestDataRate
               _IncludeMacCommandsResponse
                 _RADIO_GetPacketSnr
               _memcpy
               _memset
             _LORAWAN_GetMaxPayloadSize
               _CountfOptsLength
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_Transmit
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               _SwTimerStop
               ___lldiv
             _SelectChannelForTransmission
               _ConfigureRadioTx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
                 _RADIO_SetOutputPower
               _SearchAvailableChannel
                 _Random
                   ___lwmod
                     _rand (ARG)
                       ___lmul
                         _SwTimerReadValue (ARG)
                           _SwTimersInterrupt
                             _TMR_GetDeltaTime
                               _TMR1_ReadTimer
                   _rand
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
           _MacExecuteCommands
             _ExecuteDevStatus
             _ExecuteDutyCycle
             _ExecuteLinkAdr
               _EnableChannels
                 _EnableChannels1
                   _UpdateChannelIdStatus
               _UpdateCurrentDataRate
               _UpdateTxPower
               _ValidateChannelMask
               _ValidateChannelMaskCntl
               _ValidateDataRate
               _ValidateTxPower
             _ExecuteLinkCheck
             _ExecuteNewChannel
               _LORAWAN_SetChannelIdStatus
                 _UpdateChannelIdStatus
                 _ValidateChannelId
               _UpdateChannelIdStatus
               _UpdateDataRange
               _UpdateDutyCycle
               _UpdateFrequency
               _ValidateChannelId
               _ValidateDataRange
                 _ValidateDataRate
               _ValidateFrequency
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _ExecuteRxParamSetupReq
               _UpdateReceiveWindow2Parameters
               _ValidateDataRate
               _ValidateFrequency
               _ValidateRxOffset
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _ExecuteRxTimingSetup
               _UpdateReceiveDelays
                 ___wmul
           _RADIO_GetStatus
           _RADIO_ReleaseData
           _RxDataDone *
           _SearchAvailableChannel *
             _Random
               ___lwmod
                 _rand (ARG)
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
               _rand
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
           _SetJoinFailState *
             _RxJoinResponse *
           _SetReceptionNotOkState *
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxDataDone *
             _RxDataDone *
           _StartReTxTimer *
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _SwTimerStop *
           _UpdateCfList *
             _LORAWAN_SetChannelIdStatus
               _UpdateChannelIdStatus
               _ValidateChannelId
             _ValidateFrequency
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
             _memcpy
           _UpdateDLSettings *
           _UpdateJoinSuccessState *
             _RxJoinResponse *
             _SwTimerSetTimeout *
               ___lldiv (ARG)
             _SwTimerStart *
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv *
           _UpdateReceiveDelays *
             ___wmul
           _UpdateRetransmissionAckTimeoutState *
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _memcpy *
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerStop
         ___abdiv
       _RADIO_TxDone
         _LORAWAN_TxDone
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_GetStatus
           _RxDataDone *
           _SwTimerIsRunning *
           _SwTimerReadValue *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop *
           ___lldiv *
           ___lmul *
             _SwTimerReadValue (ARG)
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerReadValue
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
         _SwTimerStop
         ___lmul
           _SwTimerReadValue (ARG)
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO1
       _RADIO_FHSSChangeChannel
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
           ___llmod
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RxTimeout
         _LORAWAN_RxTimeout
           _LORAWAN_ReceiveWindow2Callback
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxDataDone *
             _RADIO_GetStatus
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxDataDone *
           _SelectChannelForTransmission *
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
                 _rand
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
           _SetJoinFailState *
             _RxJoinResponse *
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv *
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerStop
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO2
       _RADIO_FHSSChangeChannel
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
           ___llmod
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO3
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO4
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO5
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _SwTimersExecute
       Absolute function(Fake) *
       _AckRetransmissionCallback *
         _FindSmallestDataRate
         _LORAWAN_GetMaxPayloadSize
           _CountfOptsLength
         _RADIO_Transmit
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_WriteConfiguration
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteFSKBitRate
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFSKFrequencyDeviation
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFrequency
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
               ___llmod
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _RADIO_WritePower
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop
           ___lldiv
         _ResetParametersForConfirmedTransmission
         _RxDataDone *
         _SelectChannelForTransmission *
           _ConfigureRadioTx
             _ConfigureRadio
               _RADIO_SetBandwidth
               _RADIO_SetChannelFrequency
               _RADIO_SetFSKSyncWord
                 _memcpy
               _RADIO_SetFrequencyHopPeriod
               _RADIO_SetLoRaSyncWord
               _RADIO_SetModulation
               _RADIO_SetSpreadingFactor
             _RADIO_SetCRC
             _RADIO_SetIQInverted
             _RADIO_SetOutputPower
           _SearchAvailableChannel
             _Random
               ___lwmod
                 _rand (ARG)
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
               _rand
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
         _UpdateRetransmissionAckTimeoutState *
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv
       _AutomaticReplyCallback *
         _LORAWAN_Send
           _AssemblePacket
             _AESCmac
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _GenerateSubkey
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _FillSubKey
                 _memset
               _memcpy
               _memset
             _AssembleEncryptionBlock
               _memcpy
               _memset
             _CountfOptsLength
             _EncryptFRMPayload
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _AssembleEncryptionBlock
                 _memcpy
                 _memset
             _FindSmallestDataRate
             _IncludeMacCommandsResponse
               _RADIO_GetPacketSnr
             _memcpy
             _memset
           _LORAWAN_GetMaxPayloadSize
             _CountfOptsLength
           _RADIO_ReceiveStop
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _SelectChannelForTransmission
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
                 _rand
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
       _DutyCycleCallback *
         _SwTimerSetTimeout
           ___lldiv (ARG)
         _SwTimerStart
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         ___lldiv
       _LORAWAN_LinkCheckCallback *
         _SwTimerSetTimeout
           ___lldiv (ARG)
         _SwTimerStart
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         ___lldiv
       _LORAWAN_ReceiveWindow1Callback *
         _ConfigureRadioRx
           _ConfigureRadio
             _RADIO_SetBandwidth
             _RADIO_SetChannelFrequency
             _RADIO_SetFSKSyncWord
               _memcpy
             _RADIO_SetFrequencyHopPeriod
             _RADIO_SetLoRaSyncWord
             _RADIO_SetModulation
             _RADIO_SetSpreadingFactor
           _RADIO_SetCRC
           _RADIO_SetIQInverted
         _GetRx1Freq
         _RADIO_ReceiveStart
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_WriteConfiguration
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteFSKBitRate
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFSKFrequencyDeviation
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFrequency
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
               ___llmod
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _RADIO_WritePower
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv
         _RADIO_ReceiveStop
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
         _RADIO_ReleaseData
       _LORAWAN_ReceiveWindow2Callback *
         _ConfigureRadioRx
           _ConfigureRadio
             _RADIO_SetBandwidth
             _RADIO_SetChannelFrequency
             _RADIO_SetFSKSyncWord
               _memcpy
             _RADIO_SetFrequencyHopPeriod
             _RADIO_SetLoRaSyncWord
             _RADIO_SetModulation
             _RADIO_SetSpreadingFactor
           _RADIO_SetCRC
           _RADIO_SetIQInverted
         _LORAWAN_EnterContinuousReceive
           _ConfigureRadioRx
             _ConfigureRadio
               _RADIO_SetBandwidth
               _RADIO_SetChannelFrequency
               _RADIO_SetFSKSyncWord
                 _memcpy
               _RADIO_SetFrequencyHopPeriod
               _RADIO_SetLoRaSyncWord
               _RADIO_SetModulation
               _RADIO_SetSpreadingFactor
             _RADIO_SetCRC
             _RADIO_SetIQInverted
           _RADIO_ReceiveStart
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _RADIO_ReceiveStop
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
           _RADIO_ReleaseData
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxDataDone *
         _RADIO_GetStatus
         _RADIO_ReceiveStart
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_WriteConfiguration
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteFSKBitRate
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFSKFrequencyDeviation
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFrequency
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
               ___llmod
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _RADIO_WritePower
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv
         _RADIO_ReceiveStop
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
         _RADIO_ReleaseData
         _ResetParametersForConfirmedTransmission
         _ResetParametersForUnconfirmedTransmission
         _RxDataDone *
       _RADIO_RxFSKTimeout *
         _LORAWAN_RxTimeout
           _LORAWAN_ReceiveWindow2Callback
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxDataDone *
             _RADIO_GetStatus
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxDataDone *
           _SelectChannelForTransmission *
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
                 _rand
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
           _SetJoinFailState *
             _RxJoinResponse *
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv *
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerStop
       _RADIO_WatchdogTimeout *
         _LORAWAN_RxTimeout
           _LORAWAN_ReceiveWindow2Callback
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxDataDone *
             _RADIO_GetStatus
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxDataDone *
           _SelectChannelForTransmission *
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
                 _rand
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
           _SetJoinFailState *
             _RxJoinResponse *
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv *
         _LORAWAN_TxDone
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_GetStatus
           _RxDataDone *
           _SwTimerIsRunning *
           _SwTimerReadValue *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop *
           ___lldiv *
           ___lmul *
             _SwTimerReadValue (ARG)
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
       _UnconfirmedTransmissionCallback *
         _RADIO_Transmit
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_WriteConfiguration
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteFSKBitRate
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFSKFrequencyDeviation
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFrequency
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
               ___llmod
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _RADIO_WritePower
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop
           ___lldiv
         _ResetParametersForUnconfirmedTransmission
         _RxDataDone *
         _SelectChannelForTransmission *
           _ConfigureRadioTx
             _ConfigureRadio
               _RADIO_SetBandwidth
               _RADIO_SetChannelFrequency
               _RADIO_SetFSKSyncWord
                 _memcpy
               _RADIO_SetFrequencyHopPeriod
               _RADIO_SetLoRaSyncWord
               _RADIO_SetModulation
               _RADIO_SetSpreadingFactor
             _RADIO_SetCRC
             _RADIO_SetIQInverted
             _RADIO_SetOutputPower
           _SearchAvailableChannel
             _Random
               ___lwmod
                 _rand (ARG)
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
               _rand
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
       _UpdateJoinSuccessState *
         _RxJoinResponse *
         _SwTimerSetTimeout *
           ___lldiv (ARG)
         _SwTimerStart *
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         ___lldiv *
   _LORAWAN_SetApplicationSessionKey
     _memcpy
   _LORAWAN_SetDeviceAddress
   _LORAWAN_SetNetworkSessionKey
     _memcpy
   _SYSTEM_Initialize
     _EXT_INT_Initialize
       _INT0_SetInterruptHandler
       _INT1_SetInterruptHandler
       _INT2_SetInterruptHandler
       _INT3_SetInterruptHandler
     _INTERRUPT_Initialize
     _LORAWAN_PlatformInit
       _DIO0_ISR_Lora_Init
         _INT0_SetInterruptHandler
       _DIO1_ISR_Lora_Init
         _INT1_SetInterruptHandler
       _DIO2_ISR_Lora_Init
         _IOCBF4_SetInterruptHandler
       _DIO3_ISR_Lora_Init
       _DIO4_ISR_Lora_Init
       _DIO5_ISR_Lora_Init
         _INT2_SetInterruptHandler
       _SystemTimerInit
       _TMR_ISR_Lora_Init
         _TMR1_SetInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCBF4_SetInterruptHandler
     _SPI2_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
       _TMR1_StartTimer
   _flash
   _sendPacket
     _LORAWAN_Send
       _AssemblePacket
         _AESCmac
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _GenerateSubkey
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _FillSubKey
             _memset
           _memcpy
           _memset
         _AssembleEncryptionBlock
           _memcpy
           _memset
         _CountfOptsLength
         _EncryptFRMPayload
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _AssembleEncryptionBlock
             _memcpy
             _memset
         _FindSmallestDataRate
         _IncludeMacCommandsResponse
           _RADIO_GetPacketSnr
         _memcpy
         _memset
       _LORAWAN_GetMaxPayloadSize
         _CountfOptsLength
       _RADIO_ReceiveStop
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
       _RADIO_Transmit
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteConfiguration
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_WriteFSKBitRate
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             ___lldiv
           _RADIO_WriteFSKFrequencyDeviation
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             ___lldiv
           _RADIO_WriteFrequency
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             ___lldiv
             ___llmod
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
           _RADIO_WritePower
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
           ___lmul
             _SwTimerReadValue (ARG)
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerSetTimeout
           ___lldiv (ARG)
         _SwTimerStart
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         _SwTimerStop
         ___lldiv
       _SelectChannelForTransmission
         _ConfigureRadioTx
           _ConfigureRadio
             _RADIO_SetBandwidth
             _RADIO_SetChannelFrequency
             _RADIO_SetFSKSyncWord
               _memcpy
             _RADIO_SetFrequencyHopPeriod
             _RADIO_SetLoRaSyncWord
             _RADIO_SetModulation
             _RADIO_SetSpreadingFactor
           _RADIO_SetCRC
           _RADIO_SetIQInverted
           _RADIO_SetOutputPower
         _SearchAvailableChannel
           _Random
             ___lwmod
               _rand (ARG)
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
             _rand
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer

 _INTERRUPT_InterruptManager (ROOT)
   _INT1_ISR
     _INT1_CallBack
       Absolute function(Fake) *
       _DIO1_ISR_Lora *
       _INT1_DefaultInterruptHandler *
   _INT2_ISR
     _INT2_CallBack
       Absolute function(Fake) *
       _DIO5_ISR_Lora *
       _INT2_DefaultInterruptHandler *
   _INT3_ISR
     _INT3_CallBack
       Absolute function(Fake) *
       _INT3_DefaultInterruptHandler *
   _PIN_MANAGER_IOC
     _IOCBF4_ISR
       Absolute function(Fake) *
       _DIO2_ISR_Lora *
       _IOCBF4_DefaultInterruptHandler *
   _TMR1_ISR
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *
       _TMR_ISR_lora *
         i2_SwTimersInterrupt
           i2_TMR_GetDeltaTime
             i2_TMR1_ReadTimer
         i2_TMR_SwapTimer
           i2_TMR1_ReadTimer
           i2_TMR1_WriteTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     21E      21       26.5%
EEDATA             400      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      E0      14       87.5%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0      A0      12       62.5%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      F5      10       95.7%
BITBANK1           100      0       0       7        0.0%
BANK1              100     79      FF       8       99.6%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0     9D      A0       6      100.0%
BITCOMRAM           53      0       0       0        0.0%
COMRAM              53     2F      53       1      100.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       2       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     467       3        0.0%
DATA                 0      0     687       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sat May 06 08:16:57 2023

                                        ??_LORAWAN_TxDone 00B2  
                              __end_of_DIO3_ISR_Lora_Init 6264  
                                      ?_LORAWAN_RxTimeout 0001  
                        __size_of_RADIO_FHSSChangeChannel 002E  
                                          HALSPISend@data 0061  
                                             __CFG_CP$OFF 000000  
                                                      PL2 2B96  
                                                      PL4 0CA2  
                                                      PL6 42FC  
                         __end_of_ValidateChannelMaskCntl 5FBE  
                                                      PL8 0CB2  
                                                      l23 1986  
                         __size_of_UpdateJoinSuccessState 0092  
                                     ___wmul@multiplicand 0062  
                                            _TMR_ISR_lora 5276  
                                   __end_of_AESEncodeLoRa 5CC8  
                                             ?_RADIO_DIO0 0001  
                                             ?_RADIO_DIO1 0001  
                                             ?_RADIO_DIO2 0001  
                                             ?_RADIO_DIO3 0001  
                                             ?_RADIO_DIO4 0001  
                                             ?_RADIO_DIO5 0001  
                                                     PL10 3F08  
                                                     PL20 0CE6  
                                                     PL12 430C  
                                                     PL30 2A42  
                                                     PL22 2DA6  
                                                     PL14 2138  
                                                     PL40 47B6  
                                                     PL32 22EE  
                                                     PL24 06BE  
                                                     PL16 2146  
                                                     PL50 3C08  
                                                     PL42 06F0  
                                                     PL34 06DE  
                                                     PL26 06CE  
                                                     PL18 3B36  
                                                     PL60 06FA  
                                                     PL52 3A96  
                                                     PL44 2DE4  
                                                     PL36 32C6  
                                                     PL28 2DC8  
                                                     PL70 1AE4  
                                                     PL62 3AA4  
                                                     PL54 0CFA  
                                                     PL46 2FCE  
                                                     PL38 2DD6  
                                             __CFG_LVP$ON 000000  
                                                     PL80 0D30  
                                                     PL72 1AF2  
                                                     PL64 2DF0  
                                                     PL56 48A6  
                                                     PL48 192C  
                                                     PL90 0704  
                                                     PL82 2A6C  
                                                     PL74 2A5A  
                                                     PL66 3C1A  
                                                     PL58 3002  
                                                     PL92 0D5A  
                                                     PL84 0D3A  
                                                     PL76 2EAA  
                                                     PL68 5AF4  
                                                     PL94 47C6  
                                                     PL86 0D4A  
                                                     PL78 5ACC  
                                                     PL96 0726  
                                                     PL88 1B00  
                                                     PL98 073A  
                                     ??_LORAWAN_RxTimeout 00B7  
                                                     l232 4654  
                                                     l233 469C  
                                                     l261 3DA6  
                                                     l610 4B54  
                                                     l508 3192  
                                                     l532 44F0  
                                                     l541 4500  
                                                     l605 3C04  
                                                     l527 3FF0  
                                                     l529 4040  
                                                     l636 00F6  
                                                     l556 2FC8  
                                             ?_RADIO_Init 0079  
                                                     l822 4CD2  
                                                     l807 46E0  
                                                     l751 1552  
                                                     l648 0200  
                                                     l584 4AF6  
                                                     l665 0396  
                                                     l746 14C8  
                                                     l666 0398  
                                                     l578 33F0  
                                                     l923 1210  
                                                     l747 1558  
                                                     l756 1566  
                                                     l748 1556  
                                                     l686 05AC  
                                                     l938 1306  
                                                     l798 20E0  
                                         ??_UpdateTxPower 0060  
                                                     _GIE 007F97  
                                            __CFG_CPD$OFF 000000  
                    __end_of_SelectChannelForTransmission 4DDA  
                   __size_of_SelectChannelForTransmission 0052  
                            _SelectChannelForTransmission 4D88  
                                  _ExecuteRxParamSetupReq 3022  
                              ??_INT0_SetInterruptHandler 0062  
                                      _DIO2_ISR_Lora_Init 6132  
                                      __size_of_AESEncode 0190  
                                         _timer1ReloadVal 005C  
                              ??_INT3_SetInterruptHandler 0062  
                                         ?_EncKeySchedule 0060  
                                   _RADIO_SetLoRaSyncWord 61AE  
                                                     prod 000FF3  
                                                     tosl 000FFD  
                                                     wreg 000FE8  
                                         __end_of_AESCmac 13D8  
                                 __end_of_SwTimersExecute 47B6  
                                  SystemBlockingWaitMs@ms 0060  
                                 LORAWAN_Join@bufferIndex 00E3  
                                __size_of_RADIO_GetStatus 0006  
                                   ?_SystemBlockingWaitMs 0060  
                                    ??i2_TMR_GetDeltaTime 000B  
                      __end_of_IOCBF4_SetInterruptHandler 615E  
                              _IOCBF4_SetInterruptHandler 6154  
                                ??_SearchAvailableChannel 00A7  
                            __end_of_FindSmallestDataRate 4752  
                     __end_of_RADIO_SetFrequencyHopPeriod 61AE  
                             _RADIO_SetFrequencyHopPeriod 61A4  
                                              _CheckFlags 5496  
                                  ?_TMR_OverrideRemaining 0068  
                                                    PL100 1B0E  
                                                    PL110 074E  
                                                    PL102 1D40  
                                                    PL200 34C6  
                                                    PL120 1D58  
                                                    PL112 48B0  
                                                    PL104 1B22  
                                                    PL210 2CA2  
                                                    PL202 38F2  
                                                    PL130 1D76  
                                                    PL122 113A  
                                                    PL114 1F3C  
                                                    PL106 2C82  
                                                    PL300 2CC4  
                                                    PL220 0826  
                                                    PL212 16E6  
                                                    PL204 2784  
                                                    PL140 4388  
                                                    PL132 437E  
                                                    PL124 076E  
                                                    PL116 4248  
                                                    PL108 1D4C  
                                                    PL310 43B4  
                                                    PL302 3B4E  
                                                    PL230 1B4C  
                                                    PL222 0838  
                                                    PL214 3906  
                                                    PL206 13F2  
                                                    PL150 4C9C  
                                                    PL142 07A4  
                                                    PL134 22F8  
                                                    PL126 0780  
                                                    PL118 38B8  
                                                    PL400 08A0  
                                                    PL320 2BB0  
                                                    PL312 1D92  
                                                    PL304 5B22  
                                                    PL240 4CB6  
                                                    PL232 1B58  
                                                    PL224 24AC  
                                                    PL216 16F2  
                                                    PL208 1D80  
                                                    PL160 28D8  
                                                    PL152 07CA  
                                                    PL144 4046  
                                                    PL136 50C4  
                                                    PL128 0792  
                                                    PL410 291A  
                                                    PL402 1B7C  
                                                    PL330 3306  
                                                    PL322 3B5A  
                                                    PL314 142A  
                                                    PL306 59EC  
                                                    PL250 2EF0  
                                                    PL242 32E2  
                                                    PL234 0840  
                                                    PL226 13FC  
                                                    PL218 0814  
                                                    PL170 4AFA  
                                                    PL162 07DA  
                                                    PL154 54D0  
                                                    PL146 13D8  
                                                    PL138 38D6  
                                                    PL420 194C  
                                                    PL412 60EA  
                                                    PL404 2906  
                                                    PL340 375C  
                                                    PL332 4114  
                                                    PL324 27B0  
                                                    PL316 0880  
                                                    PL308 4632  
                                                    PL260 140C  
                                                    PL252 4DDA  
                                                    PL244 3016  
                                                    PL236 3834  
                                                    PL228 367E  
                                                    PL180 0D6A  
                                                    PL172 230A  
                                                    PL164 4F40  
                                                    PL156 1B42  
                                                    PL148 07B0  
                                                    PL430 2320  
                                                    PL422 493A  
                                                    PL414 1710  
                                                    PL406 117C  
                                                    PL350 1158  
                                                    PL342 1F5C  
                                                    PL334 1F50  
                                                    PL326 3B64  
                                                    PL318 27A6  
                                                    PL270 4B06  
                                                    PL262 2EF8  
                                                    PL254 4624  
                                                    PL246 43AC  
                                                    PL238 1704  
                                                    PL190 4394  
                                                    PL182 3B44  
                                                    PL174 34B0  
                                                    PL166 2ED0  
                                                    PL158 5B78  
                                                    PL440 3B6E  
                                                    PL432 1184  
                                                    PL424 52BC  
                                                    PL416 1718  
                                                    PL408 2910  
                                                    PL360 1164  
                                                    PL352 1440  
                                                    PL344 28F0  
                                                    PL336 088A  
                                                    PL328 1434  
                                                    PL280 2CB4  
                                                    PL272 5812  
                                                    PL264 0858  
                                                    PL256 3C34  
                                                    PL248 32EE  
                                                    PL192 500C  
                                                    PL184 07E2  
                                                    PL176 16C6  
                                                    PL168 4D72  
                                                    PL450 08B4  
                                                    PL442 1192  
                                                    PL434 4A2E  
                                                    PL426 4A24  
                                                    PL418 1F7A  
                                                    PL370 4932  
                                                    PL362 2CD2  
                                                    PL354 144A  
                                                    PL346 1F68  
                                                    PL338 114C  
                                                    PL290 1B74  
                                                    PL282 2798  
                                                    PL274 1938  
                                                    PL266 4266  
                                                    PL258 084C  
                                                    PL194 4060  
                                                    PL186 07F8  
                                                    PL178 2EE6  
                                                    PL460 39DE  
                                                    PL452 2160  
                                                    PL444 1198  
                                                    PL436 501A  
                                                    PL428 08AA  
                                                    PL380 1468  
                                                    PL372 145E  
                                                    PL364 4F56  
                                                    PL356 28FC  
                                                    PL348 2F08  
                                                    PL292 141C  
                                                    PL284 4B10  
                                                    PL276 0868  
                                                    PL268 2BA6  
                                                    PL196 43A2  
                                                    PL188 0806  
                                                    PL454 4942  
                                                    PL446 5072  
                                                    PL438 118A  
                                                    PL390 311E  
                                                    PL382 5FE4  
                                                    PL374 1176  
                                                    PL366 116E  
                                                    PL358 2316  
                                                    PL294 32F8  
                                                    PL286 1414  
                                                    PL278 1B64  
                                                    PL198 16D2  
                                                    PL456 119E  
                                                    PL448 33F2  
                                                    PL392 1942  
                                                    PL384 4D1C  
                                                    PL376 1F74  
                                                    PL368 1456  
                                                    PL296 5672  
                                                    PL288 4106  
                                                    PL458 368A  
                                                    PL394 2156  
                                                    PL386 0896  
                                                    PL378 263C  
                                                    PL298 0872  
                                                    PL396 4F60  
                                                    PL388 5FFC  
                                                    PL398 1472  
                                           _INT1_CallBack 5EF6  
                                ?_AssembleEncryptionBlock 006A  
                                     ?_DIO2_ISR_Lora_Init 0001  
                                       ??_UpdateFrequency 0064  
                                            __CFG_ZCD$OFF 000000  
                                                    l1300 3F92  
                                                    l1213 1754  
                                                    l2102 5734  
                                                    l1310 3FC4  
                                                    l3002 4A9A  
                                                    l1402 592C  
                                                    l1243 6082  
                                                    l1315 2936  
                                                    l1227 1814  
                                                    l3012 4E9C  
                                                    l1414 5FBA  
                                                    l1255 534E  
                                                    l1247 5D9E  
                                                    l1263 2B16  
                                                    l1408 5E5E  
                                                    l1186 0994  
                                                    l1274 26EE  
                                                    l1195 0B42  
                                                    l1443 504C  
                                                    l1291 30CA  
                                                    l2412 60C8  
                                                    l1428 5A5A  
                                                    l1461 1D3A  
                                                    l1703 1060  
                                                    l1368 42BC  
                                                    l3065 56F2  
                                                    l1297 3F32  
                                                    l1619 35E6  
                                                    l1379 3AFA  
                                                    l1395 4FC2  
                                                    l1387 606E  
                                                    l1716 112A  
                                                    l1910 587A  
                   RADIO_WriteConfiguration@symbolTimeout 009C  
                                                    l2297 5FE2  
                                                    l1913 588C  
                                                    l1690 0E3C  
                                                    l1907 5992  
                                                    l1684 0E6C  
                                                    l1829 5A16  
                                                    l1927 4846  
                                                    l2664 5452  
                                                    l1697 0EB4  
                                                    l9872 6092  
                                        _RADIO_WritePower 3918  
                            ??_LORAWAN_SetChannelIdStatus 0065  
                                 _PrepareJoinRequestFrame 2DFA  
                                                    _LATA 000F79  
                                                    _LATB 000F7A  
                                                    _LATC 000F7B  
                                                    _LATD 000F7C  
                                                    _LATE 000F7D  
                                                    _LATF 000F7E  
                                                    _LATG 000F7F  
                                                    _LATH 000F80  
                                     _RADIO_Transmit$2488 00B1  
                                            ?_RADIO_Reset 0001  
                              __size_of_RADIO_ReceiveStop 0018  
                                       ??_UpdateDutyCycle 0062  
                                                    _WPUA 000E91  
                                                    _WPUB 000E99  
                                                    _WPUC 000EA1  
                                  ??_LORAWAN_PlatformInit 0062  
                                                    _WPUD 000EA6  
                                                    _WPUE 000EAE  
                                                    _WPUF 000EB3  
                                                    _WPUG 000EBB  
                                                    _WPUH 000EC0  
                                           _INT2_CallBack 5EBC  
                                           __CFG_FCMEN$ON 000000  
                                ??_InitDefault433Channels 006A  
                                ExecuteNewChannel@drRange 009E  
                                      _PrepareSessionKeys 4FC6  
                                                    _loRa 0200  
                                                    _main 3C3C  
                                                    _rand 5362  
                          __end_of_UpdateMinMaxChDataRate 4B88  
                                                    fsr0h 000FEA  
                                                    fsr1h 000FE2  
                                                    indf0 000FEF  
                                                    fsr2h 000FDA  
                                                    fsr0l 000FE9  
                                                    indf2 000FDF  
                                                    fsr1l 000FE1  
                                                    fsr2l 000FD9  
                                 __size_of_RADIO_Transmit 01A0  
                                                    btemp 0048  
                          __size_of_StopAllSoftwareTimers 004E  
                                           ComputeMic@mic 00D6  
                                           ComputeMic@key 0166  
                               __end_of_LORAWAN_RxTimeout 192C  
                               __size_of_ConfigureRadioRx 0026  
                                           _INT3_CallBack 5E9E  
                               __size_of_ConfigureRadioTx 0042  
                       __size_of_INT2_SetInterruptHandler 000A  
                           __end_of_StopAllSoftwareTimers 53FE  
                               ?_INT2_SetInterruptHandler 0060  
                                                    prodh 000FF4  
                                                    prodl 000FF3  
                                                    start 008E  
                                __end_of_CountfOptsLength 48A6  
                                   ExecuteLinkAdr@txPower 0072  
                                     __size_of_HALSPISend 000A  
                              ??_TMR1_SetInterruptHandler 0062  
                                           __CFG_CSWEN$ON 000000  
                              EnableChannels1@channelMask 0064  
                                        ??_AssemblePacket 00D6  
                                  ?_HALResetPinMakeOutput 0001  
                                     ?_PrepareSessionKeys 006A  
                                  __size_of_TMR_SwapTimer 0036  
                              __end_of_RADIO_GetPacketSnr 6214  
                                            ___param_bank 000000  
                                              _GetRx1Freq 60AC  
                              __size_of_RADIO_ReleaseData 0006  
                                           __CFG_SCANE$ON 000000  
                                    ??_DIO2_ISR_Lora_Init 0062  
                         __end_of_CreateAllSoftwareTimers 5276  
                  SearchAvailableChannel@transmissionType 00A5  
                         __size_of_HALResetPinOutputValue 0014  
                                   MacExecuteCommands@ptr 00AA  
                                   _RADIO_WriteFSKBitRate 4DEA  
                                __size_of_SystemTimerInit 0004  
                                        __end_of_INT1_ISR 6238  
                                        __end_of_INT2_ISR 6232  
                                        __end_of_INT3_ISR 622C  
                          __size_of_OSCILLATOR_Initialize 0012  
                                  ExecuteLinkAdr@dataRate 0075  
                           __end_of_OSCILLATOR_Initialize 60AC  
                                     __size_of_IOCBF4_ISR 0026  
                      __size_of_LORAWAN_LinkCheckCallback 00BA  
                                                   l12100 4E6C  
                                                   l12030 58D2  
                                                   l12022 5B8A  
                                                   l12120 5BE8  
                                                   l12104 4E8E  
                                                   l12200 35CE  
                                                   l12026 5BA8  
                                                   l12124 5BF8  
                                                   l12220 3612  
                                                   l12132 5522  
                                                   l13100 2054  
                                                   l12140 3ACE  
                                                   l12222 361A  
                                                   l13006 3F36  
                                                   l13022 3F96  
                                                   l13030 3FAC  
                                                   l13110 2074  
                                                   l12142 3AD2  
                                                   l10480 5736  
                                                   l12056 421A  
                                                   l12080 4A5E  
                                                   l12240 3652  
                                                   l12216 3608  
                                                   l12224 3620  
                                                   l12208 35E8  
                                                   l12128 54EA  
                                                   l12312 3960  
                                                   l13032 3FB0  
                                                   l13120 2098  
                                                   l13104 2066  
                                                   l12160 3B34  
                                                   l12152 3B1A  
                                                   l12058 4236  
                                                   l12066 5466  
                                                   l12250 366E  
                                                   l12322 3986  
                                                   l12314 396C  
                                                   l12170 47FC  
                                                   l13026 3FA0  
                                                   l13018 3F90  
                                                   l13042 4860  
                                                   l13050 4898  
                                                   l12154 3B1E  
                                                   l14010 4D08  
                                         __end_of___abdiv 5224  
                                                   l12076 4A4E  
                                                   l12252 3678  
                                                   l12236 3644  
                                                   l12340 39B8  
                                                   l13036 3FC0  
                                                   l13052 48A2  
                                                   l13124 20A0  
                                                   l13204 4298  
                                                   l14012 4D0C  
                                                   l12414 4BD0  
                                                   l12078 4A5A  
                                                   l12238 3648  
                                                   l12502 343E  
                                                   l12326 3992  
                                                   l12318 397A  
                                                   l12174 4820  
                                                   l12190 5B3C  
                                                   l14030 54B4  
                                                   l14022 54A0  
                                                   l13046 488C  
                                                   l13070 1FEC  
                                                   l13062 1F8C  
                                                   l13222 42F8  
                                                   l13214 42DA  
                                                   l12088 4A8C  
                                                   l12096 4E5C  
                                                   l10744 4B2A  
                                                   l12520 347C  
                                                   l12512 3474  
                                                   l12600 0EB0  
                                                   l13048 4896  
                                                   l13144 20E6  
                                                   l13128 20AE  
                                                   l13080 200A  
                                                   l13160 212C  
                                                   l13232 5A36  
                                                   l13216 42DE  
                                                   l11720 52CA  
                                                   l12370 3E86  
                                                   l12098 4E68  
                                                   l10754 4B78  
                                                   l12346 39C0  
                                                   l14026 54AA  
                                                   l12450 4350  
                                                   l13138 20CC  
                                                   l13090 2036  
                                                   l13154 20FA  
                                                   l13170 4F98  
                                                   l14050 256E  
                                                   l14042 2522  
                                                   l12380 3EEE  
                                                   l10756 4B7C  
                                                   l11820 2D2E  
                                                   l12508 3462  
                                                   l12620 0EF6  
                                                   l13340 1DC4  
                                                   l13324 4DD4  
                                                   l13156 211E  
                                                   l13084 201C  
                                                   l13172 4F9E  
                                                   l14052 2584  
                                                   l14044 2536  
                                                   l14300 03E0  
                                                   l15100 4614  
                                                   l15004 1C4E  
                                                   l12382 3EF0  
                                                   l11822 2D38  
                                                   l12390 56D2  
                                                   l12294 3930  
                                                   l12710 1100  
                                                   l12702 10D4  
                                                   l12630 0F1C  
                                                   l13414 1F34  
                                                   l13334 1DAE  
                                                   l12454 4360  
                                                   l13086 2028  
                                                   l13158 2120  
                                                   l13510 15D6  
                                                   l12542 502E  
                                                   l12534 5E5A  
                                                   l13190 5928  
                                                   l14054 259A  
                                                   l14046 2542  
                                                   l14038 24CA  
                                                   l14230 02F6  
                                                   l14134 00F8  
                                                   l12376 3EB0  
                                                   l12392 56D6  
                                                   l13408 1EC8  
                                                   l12448 434A  
                                                   l13088 2030  
                                                   l12560 506A  
                                                   l13272 5A6E  
                                                   l14056 25B0  
                                                   l14048 2558  
                                                   l14400 051A  
                                                   l14216 02CE  
                                                   l14152 0160  
                                                   l14128 00C4  
                                                   l15104 4618  
                                                   l15016 1CC8  
                                                   l12298 393C  
                                                   l12706 10E4  
                                                   l13370 1E38  
                                                   l12802 226E  
                                                   l13522 1622  
                                                   l13426 57FE  
                                                   l12554 5058  
                                                   l12546 5038  
                                                   l14058 25C6  
                                                   l14066 25D8  
                                                   l14074 2614  
                                                   l14402 051C  
                                                   l11908 197C  
                                                   l12396 56E8  
                                                   l12388 56CA  
                                                   l12716 1120  
                                                   l13380 1E58  
                                                   l13348 1DDC  
                                                   l12476 4A16  
                                                   l13428 580C  
                                                   l12556 5060  
                                                   l12548 5040  
                                                   l12740 5D9A  
                                                   l13620 2B76  
                                                   l14068 2600  
                                                   l14084 34E8  
                                                   l14308 03EC  
                                                   l14260 0324  
                                                   l14228 02EA  
                                                   l14156 0170  
                                                   l15060 3E50  
                                                   l15044 3E0C  
                                                   l15036 3DEA  
                                                   l11950 1A30  
                                                   l11942 1A02  
                                                   l11934 19C0  
                                                   l11918 1988  
                                                   l12494 3436  
                                                   l12638 0F34  
                                                   l12574 0DFA  
                                                   l12582 0E40  
                                                   l13374 1E48  
                                                   l12814 22E6  
                                                   l13622 2B7A  
                                                   l13710 26D8  
                                                   l14078 2632  
                                                   l14342 0494  
                                                   l14190 0248  
                                                   l15134 4552  
                                                   l11944 1A0C  
                                                   l12912 12C2  
                                                   l12904 1296  
                                                   l15224 2E1C  
                                                   l12680 102A  
                                                   l12672 0FF0  
                                                   l12576 0E0A  
                                                   l12584 0E52  
                                                   l13384 1E6E  
                                                   l13368 1E2A  
                                                   l12808 2292  
                                                   l12840 4718  
                                                   l12832 46E4  
                                                   l13528 1656  
                                                   l13448 14C0  
                                                   l13640 5358  
                                                   l13624 2B8C  
                                                   l14096 3558  
                                                   l14512 06A2  
                                                   l14328 0442  
                                                   l14264 033C  
                                                   l14248 0310  
                                                   l15080 45D8  
                                                   l15048 3E1C  
                                                   l15304 4C4E  
                                                   l11954 1A4A  
                                                   l12922 12D0  
                                                   l12914 12C6  
                                                   l12682 1036  
                                                   l12594 0E9E  
                                                   l12586 0E6E  
                                                   l12578 0E1A  
                                                   l12690 1068  
                                                   l14602 0C4E  
                                                   l12842 471A  
                                                   l12850 4734  
                                                   l13474 151C  
                                                   l13802 3D54  
                                                   l12738 5D92  
                                                   l13618 2B68  
                                                   l13730 2776  
                                                   l13722 2732  
                                                   l14098 355C  
                                                   l14418 0566  
                                                   l14178 01E6  
                                                   l14506 0670  
                                                   l15058 3E4C  
                                                   l15322 579A  
                                                   l11956 1A54  
                                                   l11948 1A26  
                                                   l12908 12B4  
                                                   l15236 2E36  
                                                   l12772 2190  
                                                   l15156 3272  
                                                   l12844 4724  
                                                   l13492 1578  
                                                   l13724 273C  
                                                   l13732 277A  
                                                   l13708 26CE  
                                                   l13660 309A  
                                                   l14452 05F6  
                                                   l14428 05AE  
                                                   l14356 049A  
                                                   l14268 034A  
                                                   l14196 0250  
                                                   l15084 45E6  
                                                   l15308 4C54  
                                                   l16212 3CCE  
                                                   l11974 1AD0  
                                                   l11966 1AC6  
                                                   l11894 1956  
                                                   l12598 0EAA  
                                                   l12782 21CE  
                                                   l12766 217A  
                                                   l14606 0C7C  
                                                   l14550 0A68  
                                                   l12854 4744  
                                                   l13494 1580  
                                                   l13806 3D60  
                                                   l13590 2ADE  
                                                   l12870 58B6  
                                                   l14462 0608  
                                                   l14470 0624  
                                                   l14366 04BE  
                                                   l14358 04A0  
                                                   l14710 51EC  
                                                   l15318 5794  
                                                   l15326 57AC  
                                                   l15334 5552  
                                                   l16054 475A  
                                                   l16206 3CC8  
                                                   l11992 516E  
                                                   l12952 139A  
                                                   l12936 130A  
                                                   l12928 12EE  
                                                   l12688 1052  
                                                   l12792 220C  
                                                   l12784 21F0  
                                                   l12776 21A0  
                                                   l14560 0AC6  
                                                   l14536 094E  
                                                   l13496 158E  
                                                   l13728 276C  
                                                   l13664 30B2  
                                                   l13920 5F20  
                                                   l14480 064E  
                                                   l14472 062A  
                                                   l14392 04EA  
                                                   l14376 04C4  
                                                   l14296 03BE  
                                                   l14640 17DA  
                                                   l14720 51FE  
                                                   l14704 51E2  
                                                   l15168 5DF4  
                                                   l16064 47A6  
                                                   l11986 513A  
                                                   l12946 136E  
                                                   l12890 1222  
                                                   l12778 21AC  
                                                   l14570 0B3A  
                                                   l14554 0AC4  
                                                   l12858 474C  
                                                   l14466 0618  
                                                   l14378 04D6  
                                                   l14634 17B2  
                                                   l14618 1746  
                                                   l15098 460E  
                                                   l14722 5202  
                                                   l15338 5558  
                                                   l13850 44DE  
                                                   l16066 47A8  
                                                   l15612 5414  
                                                   l12884 11FC  
                                                   l12796 2224  
                                                   l13780 3D12  
                                                   l14468 061E  
                                                   l14388 04DC  
                                                   l14652 1806  
                                                   l14716 51F8  
                                                   l14732 521A  
                                                   l15292 4C24  
                                                   l14820 2F88  
                                                   l14804 2F3C  
                                                   l16068 47AC  
                                                   l14750 316A  
                                                   l15614 5418  
                                                   l14590 0BCE  
                                                   l12974 2BD8  
                                                   l12966 2BCA  
                                                   l13598 2B02  
                                                   l13678 3114  
                                                   l13950 2A32  
                                                   l14670 1888  
                                                   l14638 17C0  
                                                   l15294 4C36  
                                                   l13854 44E8  
                                                   l14806 2F48  
                                                   l14814 2F62  
                                                   l16190 3C98  
                                                   l15456 2840  
                                                   l15376 48F2  
                                                   l12896 1252  
                                                   l12992 2C48  
                                                   l12984 2C2C  
                                                   l13784 3D24  
                                                   l14488 065E  
                                                   l14672 188C  
                                                   l14736 5220  
                                                   l14728 5212  
                                                   l15288 4C1E  
                                                   l13880 3BB6  
                                                   l14930 2400  
                                                   l15394 27C8  
                                                   l12898 1270  
                                                   l14578 0B7C  
                                                   l13794 3D46  
                                                   l14658 1818  
                                                   l14682 190A  
                                                   l15298 4C44  
                                                   l13858 44F8  
                                                   l14850 3390  
                                                   l16194 3CA4  
                                                   l16186 3C92  
                                                   l14764 31BC  
                                                   l14756 3182  
                                                   l14940 2438  
                                                   l14932 2416  
                                                   l14596 0C38  
                                                   l13788 3D3A  
                                                   l13948 2A28  
                                                   l14676 18E4  
                                                   l14780 3FF2  
                                                   l14860 33B6  
                                                   l14758 3186  
                                                   l13982 50A6  
                                                   l13974 509C  
                                                   l12998 2C78  
                                                   l14854 3396  
                                                   l14870 33EC  
                                                   l13886 3BE0  
                                                   l14880 4ACA  
                                                   l14776 3FE0  
                                                   l14970 4F24  
                                                   l14954 57CE  
                                                   l13988 50B8  
                                                   l14798 2F2A  
                                                   l14994 1C08  
                                                   l14986 1B9A  
                                                   l14996 1C14  
                                                   ?_main 0001  
                                                   ?_rand 009C  
                                           __CFG_WDTE$OFF 000000  
                                              _FillSubKey 54E0  
                                         _TMR1_StartTimer 6238  
                                           ?_RADIO_SetCRC 0001  
                                         __end_of___lldiv 4AAC  
                                         RADIO_Transmit@i 00B6  
                                                   _T1CLK 000FD2  
                                                   u12160 3758  
                                                   _T1CON 000FCF  
                                         __end_of___llmod 4EAE  
                                                   u13401 3402  
                                       ??_EnableChannels1 0069  
                                                   u14045 11E0  
                                                   u13270 4958  
                                                   _LATC0 007BD8  
                                                   _LATC1 007BD9  
                                                   u12720 5162  
                                                   u16000 0142  
                                    RxJoinResponse@status 0001  
                                                   u13550 0E66  
                                                   u12727 5158  
                                                   u12760 58E2  
                       __end_of_AckRetransmissionCallback 33F2  
                  SearchAvailableChannel@randomNumberCopy 00AB  
                                                   u14370 1FEA  
                                                   u15154 533E  
                                                   u13555 0E5C  
                                                   u15155 5338  
                                                   u13900 227E  
                                                   u16230 035A  
                                                   u13655 0F4C  
                                                   u17015 177E  
                                                   u16081 0232  
                                                   u13915 228A  
                                                   u14820 1EB2  
                                                   u16420 052C  
                                                   u16260 03DC  
                                                   u15508 44C8  
                                                   u15540 3B9C  
                                                   u13925 22A4  
                                                   u15525 5198  
                                                   u16158 02E2  
                                                   u16280 043C  
                                                   u17305 31B2  
                                                   u17145 18A6  
                                                   u16338 047E  
                                                   u16258 03A8  
                                                   u17315 31CE  
                                                   u14835 1EBE  
                                                   u15555 3BAC  
                                                   u17420 2F6E  
                                                   u14845 1EDA  
                                                   u13885 223E  
                                                   u15565 2FE0  
                                          __CFG_DEBUG$OFF 000000  
                                                   u17520 338A  
                                                   u17290 31A4  
                                                   u17435 2F7E  
                                                   u16740 0A2C  
                                                   u15588 3BF0  
                                                   u16750 0A4A  
                                                   u16558 0638  
                                                   u18095 4BFE  
                                                   u16760 0A88  
                                                   u16488 05E0  
                                                   u15945 357A  
                                                   u16850 0BA8  
                                                   u16755 0A40  
                                                   u15788 4CF2  
                                                   u17900 456A  
                                                   u17628 4AE0  
                                                   u17548 33AE  
                                                   u17740 1C98  
                                                   u16765 0A84  
                                                   u16685 0CBC  
                                                   u16865 0BC4  
                                                   u17905 4566  
                                                   u17930 3258  
                                                   u16875 0BE0  
                                                   u17755 1CC0  
                                                   u17940 3266  
                                                   u17588 33D6  
                                                   u17765 1CE2  
                                                   u17950 3286  
                                                   u17880 4534  
                                                   u17945 3264  
                                                   u17890 4544  
                                                   u19458 4792  
                                                   u17955 3284  
                                                   u17895 4540  
                                                   u19807 52EA  
                                                   u19817 52FC  
                                                   u19770 3CBC  
                                                   u19827 5B92  
                                         __end_of___lwmod 56FC  
                                                   u19797 3CD6  
                                           ?_RADIO_RxDone 0001  
                             __size_of_RADIO_ReceiveStart 0186  
                                                   _OSCEN 000E47  
                     __size_of_LORAWAN_SetChannelIdStatus 002E  
                                           ?_RADIO_TxDone 0001  
                                                   _TMR1H 000FCE  
                                                   _TMR1L 000FCD  
                                                   _TRISA 000F81  
                                                   _TRISB 000F82  
                                                   _TRISC 000F83  
                                                   _TRISD 000F84  
                                                   _TRISE 000F85  
                                                   _TRISF 000F86  
                                                   _TRISG 000F87  
                                                   _TRISH 000F88  
                                __size_of_RADIO_RxTimeout 0020  
                                           __CFG_WRT0$OFF 000000  
                                           __CFG_WRT1$OFF 000000  
                           ?_SelectChannelForTransmission 0001  
                                           __CFG_WRT2$OFF 000000  
                                     ___lmul@multiplicand 0094  
                                           __CFG_WRT3$OFF 000000  
                                          _RxJoinResponse 6208  
                                 ?_SetReceptionNotOkState 0001  
                                          __CFG_EBTR0$OFF 000000  
                                          __CFG_EBTR1$OFF 000000  
                                          __CFG_EBTR2$OFF 000000  
                                          __CFG_EBTR3$OFF 000000  
                                    ??_PrepareSessionKeys 0070  
                                        __end_of_TMR1_ISR 5D80  
                               FindSmallestDataRate@found 0061  
                                           __CFG_WRTB$OFF 000000  
                                           __CFG_WRTC$OFF 000000  
                                           __CFG_WRTD$OFF 000000  
                                          ?_INT1_CallBack 0001  
                                  LORAWAN_RxTimeout@minim 00BB  
                             __size_of_RADIO_SetBandwidth 0008  
                                          __CFG_EBTRB$OFF 000000  
                          __size_of_RADIO_WatchdogTimeout 0036  
                                                   __rcon 0046  
                                 __end_of_PIN_MANAGER_IOC 6202  
                                                   _flash 52C6  
                            ??_IncludeMacCommandsResponse 0064  
                           __end_of_RADIO_WatchdogTimeout 5890  
      RADIO_WriteFSKFrequencyDeviation@frequencyDeviation 006D  
                          ??_INT1_DefaultInterruptHandler 0001  
                               __size_of_ValidateDataRate 0014  
                                                   _randx 0054  
                          LORAWAN_RxDone@frmPayloadLength 00F6  
                           ValidateChannelMaskCntl@result 0060  
                                      __CFG_MCLRE$EXTMCLR 000000  
                                                   _srand 6100  
                                        UpdateDataRange@i 0063  
                                LORAWAN_RxDone@joinAccept 00F4  
                                  _UpdateJoinSuccessState 3B76  
                                                   main@x 0177  
                                          ?_INT2_CallBack 0001  
                                _INT1_SetInterruptHandler 6172  
                                              _ComputeMic 5572  
                                 __end_of_TMR1_Initialize 55FC  
                                  UpdateCfList@joinAccept 009C  
                                                   pclath 000FFA  
                                                   tablat 000FF5  
                                                   ltemp0 0048  
                                 RADIO_WriteFrequency@num 0075  
                                                   ltemp1 004C  
                                                   ltemp2 0050  
                          __size_of_UpdateCurrentDataRate 0008  
                          __size_of_UpdateChannelIdStatus 0088  
                              PrepareSessionKeys@appNonce 006C  
                                  UpdateChannelIdStatus@i 0063  
                           __end_of_UpdateCurrentDataRate 61DA  
                            __size_of_RADIO_FSKPacketSent 009E  
                           __end_of_UpdateChannelIdStatus 3B36  
                                                   plusw0 000FEB  
                                                   plusw1 000FE3  
                                                   plusw2 000FDB  
                                                   ttemp0 0048  
                                                   ttemp1 004B  
                                                   ttemp2 004E  
                                                   ttemp3 0051  
                                          ?_INT3_CallBack 0001  
                                UpdateFrequency@channelId 0064  
                                                   status 000FD8  
                                                   wtemp0 0048  
                                                   wtemp1 004A  
                                                   wtemp2 004C  
                                                   wtemp3 004E  
                                                   wtemp4 0050  
                                                   wtemp5 0052  
                                      _MacExecuteCommands 24BE  
                                UpdateCfList@channelIndex 00A5  
                                     __size_of_RADIO_DIO0 0068  
                                     __size_of_RADIO_DIO1 003A  
                                     __size_of_RADIO_DIO2 0048  
                                     __size_of_RADIO_DIO3 0018  
                                     __size_of_RADIO_DIO4 0018  
                                     __size_of_RADIO_DIO5 0018  
                      PrepareJoinRequestFrame@bufferIndex 00E1  
                                            __end_ofPL100 1B22  
                                            __end_ofPL110 076E  
                                            __end_ofPL102 1D4C  
                                            __end_ofPL200 34DA  
                                            __end_ofPL120 1D76  
                                            __end_ofPL112 48D0  
                                            __end_ofPL104 1B42  
                                            __end_ofPL210 2CB4  
                                            __end_ofPL202 3906  
                                            __end_ofPL130 1D80  
                                            __end_ofPL122 114C  
                                            __end_ofPL114 1F50  
                                            __end_ofPL106 2CA2  
                                            __end_ofPL300 2CD2  
                                            __end_ofPL220 0838  
                                            __end_ofPL212 16F2  
                                            __end_ofPL204 2798  
                                            __end_ofPL140 4394  
                                            __end_ofPL132 4388  
                                            __end_ofPL124 0780  
                                            __end_ofPL116 4266  
                                            __end_ofPL108 1D58  
                                            __end_ofPL310 43C2  
                                            __end_ofPL302 3B5A  
                                            __end_ofPL230 1B58  
                                            __end_ofPL222 0840  
                                            __end_ofPL214 3918  
                                            __end_ofPL206 13FC  
                                            __end_ofPL150 4CB6  
                                            __end_ofPL142 07B0  
                                            __end_ofPL134 230A  
                                            __end_ofPL126 0792  
                                            __end_ofPL118 38D6  
                                            __end_ofPL400 08AA  
                                            __end_ofPL320 2BBA  
                                            __end_ofPL312 1D9C  
                                            __end_ofPL304 5B30  
                                            __end_ofPL240 4CC2  
                                            __end_ofPL232 1B64  
                                            __end_ofPL224 24BE  
                                            __end_ofPL216 1704  
                                            __end_ofPL208 1D92  
                                            __end_ofPL160 28F0  
                                            __end_ofPL152 07DA  
                                            __end_ofPL144 4060  
                                            __end_ofPL136 50D2  
                                            __end_ofPL128 07A4  
                                            __end_ofPL410 2924  
                                            __end_ofPL402 1B84  
                                            __end_ofPL330 3312  
                                            __end_ofPL322 3B64  
                                            __end_ofPL314 1434  
                                            __end_ofPL306 59F4  
                                            __end_ofPL250 2EF8  
                                            __end_ofPL242 32EE  
                                            __end_ofPL234 084C  
                                            __end_ofPL226 140C  
                                            __end_ofPL218 0826  
                                            __end_ofPL170 4B06  
                                            __end_ofPL162 07E2  
                                            __end_ofPL154 54E0  
                                            __end_ofPL146 13F2  
                                            __end_ofPL138 38F2  
                                            __end_ofPL420 1954  
                                            __end_ofPL412 60F2  
                                            __end_ofPL404 2910  
                                            __end_ofPL340 3768  
                                            __end_ofPL332 4120  
                                            __end_ofPL324 27BA  
                                            __end_ofPL316 088A  
                                            __end_ofPL308 4640  
                                            __end_ofPL260 1414  
                                            __end_ofPL252 4DEA  
                                            __end_ofPL244 3022  
                                            __end_ofPL236 3840  
                                            __end_ofPL228 368A  
                                            __end_ofPL180 0D72  
                                            __end_ofPL172 2316  
                                            __end_ofPL164 4F56  
                                            __end_ofPL156 1B4C  
                                            __end_ofPL148 07CA  
                                            __end_ofPL430 2326  
                                            __end_ofPL422 4942  
                                            __end_ofPL414 1718  
                                            __end_ofPL406 1184  
                                            __end_ofPL350 1164  
                                            __end_ofPL342 1F68  
                                            __end_ofPL334 1F5C  
                                            __end_ofPL326 3B6E  
                                            __end_ofPL318 27B0  
                                            __end_ofPL270 4B10  
                                            __end_ofPL262 2F08  
                                            __end_ofPL254 4632  
                                            __end_ofPL246 43B4  
                                            __end_ofPL238 1710  
                                            __end_ofPL190 43A2  
                                            __end_ofPL182 3B4E  
                                            __end_ofPL174 34C6  
                                            __end_ofPL166 2EE6  
                                            __end_ofPL158 5B88  
                                            __end_ofPL440 3B76  
                                            __end_ofPL432 118A  
                                            __end_ofPL424 52C6  
                                            __end_ofPL416 1720  
                                            __end_ofPL408 291A  
                                            __end_ofPL360 116E  
                                            __end_ofPL352 144A  
                                            __end_ofPL344 28FC  
                                            __end_ofPL336 0896  
                                            __end_ofPL328 1440  
                                            __end_ofPL280 2CC4  
                                            __end_ofPL272 5822  
                                            __end_ofPL264 0868  
                                            __end_ofPL256 3C3C  
                                            __end_ofPL248 32F8  
                                            __end_ofPL192 501A  
                                            __end_ofPL184 07F8  
                                            __end_ofPL176 16D2  
                                            __end_ofPL168 4D88  
                                            __end_ofPL450 08BC  
                                            __end_ofPL442 1198  
                                            __end_ofPL434 4A36  
                                            __end_ofPL426 4A2E  
                                            __end_ofPL418 1F84  
                                            __end_ofPL370 493A  
                                            __end_ofPL362 2CDC  
                                            __end_ofPL354 1456  
                                            __end_ofPL346 1F74  
                                            __end_ofPL338 1158  
                                            __end_ofPL290 1B7C  
                                            __end_ofPL282 27A6  
                                            __end_ofPL274 1942  
                                            __end_ofPL266 4276  
                                            __end_ofPL258 0858  
                                            __end_ofPL194 4074  
                                            __end_ofPL186 0806  
                                            __end_ofPL178 2EF0  
                                            __end_ofPL460 39E4  
                                            __end_ofPL452 2168  
                                            __end_ofPL444 119E  
                                            __end_ofPL436 5022  
                                            __end_ofPL428 08B4  
                                            __end_ofPL380 1472  
                                            __end_ofPL372 1468  
                                            __end_ofPL364 4F60  
                                            __end_ofPL356 2906  
                                            __end_ofPL348 2F14  
                                            __end_ofPL292 142A  
                                            __end_ofPL284 4B1E  
                                            __end_ofPL276 0872  
                                            __end_ofPL268 2BB0  
                                            __end_ofPL196 43AC  
                                            __end_ofPL188 0814  
                                            __end_ofPL454 4948  
                                            __end_ofPL446 507A  
                                            __end_ofPL438 1192  
                                            __end_ofPL390 3128  
                                            __end_ofPL382 5FEE  
                                            __end_ofPL374 117C  
                                            __end_ofPL366 1176  
                                            __end_ofPL358 2320  
                                            __end_ofPL294 3306  
                                            __end_ofPL286 141C  
                                            __end_ofPL278 1B74  
                                            __end_ofPL198 16E6  
                                            __end_ofPL456 11A4  
                                            __end_ofPL448 33F8  
                                            __end_ofPL392 194C  
                                            __end_ofPL384 4D26  
                                            __end_ofPL376 1F7A  
                                            __end_ofPL368 145E  
                                            __end_ofPL296 5680  
                                            __end_ofPL288 4114  
                                            __end_ofPL458 3690  
                                            __end_ofPL394 2160  
                                            __end_ofPL386 08A0  
                                            __end_ofPL378 2646  
                                            __end_ofPL298 0880  
                                            __end_ofPL396 4F6A  
                                            __end_ofPL388 6006  
                                            __end_ofPL398 147C  
                                         _TMR1_WriteTimer 5FD6  
                       TMR_OverrideRemaining@oldReloadVal 0070  
                                     LORAWAN_RxDone@fPort 00E5  
                                __size_of_RADIO_WriteMode 00C8  
                                       __end_of_AESEncode 1AE4  
                                     __size_of_RADIO_Init 0186  
                        __end_of_RADIO_WriteConfiguration 113A  
                            __size_of_RADIO_SetIQInverted 000A  
                               __size_ofi2_TMR1_ReadTimer 0020  
                               RADIO_WriteMode@dioMapping 0068  
                                         __initialization 43C2  
                            __size_ofi2_SwTimersInterrupt 00AC  
                                        LORAWAN_Send@port 016B  
                             __size_of_DIO1_ISR_Lora_Init 000C  
                                     ?_MacExecuteCommands 00A4  
                                       _SPI2_Exchange8bit 60BE  
                                            __end_of_main 3CF6  
                              AssembleEncryptionBlock@dir 0071  
                                            __end_of_rand 53B0  
                                       ?_TMR_GetDeltaTime 0066  
                                           AESCmac@padded 0130  
                                __end_of_RADIO_ReadRandom 4932  
                                        _SetJoinFailState 5BB4  
                                 RADIO_WriteMode@blocking 0066  
                                    _UpdateJoinInProgress 5F2C  
                                    _ExecuteRxTimingSetup 5D38  
                               __size_of_UpdateDLSettings 001A  
                                      ?_SPI2_Exchange8bit 0001  
                               __size_of_ValidateRxOffset 0014  
                             ?_INTERRUPT_InterruptManager 0001  
                                      ??_TMR_GetDeltaTime 006A  
                                           AESCmac@output 00CA  
                            __end_of_RADIO_SetOutputPower 61E2  
                                               ??_AESCmac 00CF  
                                          ??_RADIO_SetCRC 0060  
                                  MacExecuteCommands@done 00A9  
                                 InitDefault868Channels@i 006A  
                                                  ??_main 0174  
                                                  ??_rand 009E  
                                          ??_RADIO_RxDone 00F9  
                                          ??_RADIO_TxDone 00D4  
                                           __activetblptr 000002  
                                  ?_RADIO_SetLoRaSyncWord 0001  
                                  __end_of_RxJoinResponse 620E  
                       __end_of_LORAWAN_LinkCheckCallback 2FCE  
                          __end_of_SetReceptionNotOkState 4D1C  
                             __end_of_UpdateReceiveDelays 58C6  
                         __end_of_AssembleEncryptionBlock 437E  
                                __size_of_SPI2_Initialize 000C  
                                  ??_SystemBlockingWaitMs 0064  
                                        ??_StartReTxTimer 0090  
                                     ??_SPI2_Exchange8bit 0060  
                        CountfOptsLength@macCommandLength 0066  
                                      EncodeShiftRow@temp 0062  
                                ??_InitDefault868Channels 006A  
                             __size_of_RADIO_RegisterRead 0026  
                                       ?_HALSPICSDeassert 0001  
                                        ?_SwTimersExecute 0001  
                                           _TMR_SwapTimer 58C6  
                                              _RxDataDone 6266  
                                          _EnableChannels 6032  
                               ??_PrepareJoinRequestFrame 00DA  
                                          _HALSPICSAssert 6248  
                                    ??_MacExecuteCommands 00A7  
                                             ?_CheckFlags 0060  
                                 LORAWAN_TxDone@timeOnAir 00B0  
                                              _ExtractMic 5680  
                                                  ?_flash 0001  
                         __size_of_SearchAvailableChannel 00B0  
                                      ??_HALSPICSDeassert 0060  
                                  _HALResetPinOutputValue 6086  
                                        ___llmod@dividend 0060  
                                                  ?_srand 0071  
                  __end_of_LORAWAN_ReceiveWindow1Callback 4046  
                 __size_of_LORAWAN_ReceiveWindow1Callback 007E  
                          _LORAWAN_ReceiveWindow1Callback 3FC8  
                                                  _ANSELA 000E92  
                                                  _ANSELB 000E9A  
                                                  _ANSELD 000EA7  
                                                  _ANSELE 000EAF  
                                                  _ANSELF 000EB4  
                                                  _ANSELG 000EBC  
                                _RADIO_FSKPacketSent$2509 00D8  
                                         _ValidateTxPower 5D80  
                                                  _T1GATE 000FD1  
                                                  _T1GCON 000FD0  
                                 SwTimerReadValue@timerId 008F  
                                 TMR1_WriteTimer@timerVal 0060  
                                          _ExecuteLinkAdr 2A7A  
                                                  _ODCONA 000E90  
                                                  _ODCONB 000E98  
                                                  _ODCONC 000EA0  
                                                  _ODCOND 000EA5  
                                                  _ODCONE 000EAD  
                                                  _ODCONF 000EB2  
                                                  _ODCONG 000EBA  
                                                  _ODCONH 000EBF  
                                                  _RD5PPS 000E6F  
                                                  _RD6PPS 000E70  
                                          __CFG_WDTCCS$SC 000000  
                  __end_of_LORAWAN_ReceiveWindow2Callback 4504  
                 __size_of_LORAWAN_ReceiveWindow2Callback 00A0  
                          _LORAWAN_ReceiveWindow2Callback 4464  
                                                  i2l2173 52BA  
                                                  i2l2390 0062  
                                                  i2l2384 003A  
                                                  i2l2297 5FFA  
                                                  i2l2386 0046  
                                                  i2l2394 006C  
                                                  i2l2388 0052  
                           __size_of_RADIO_SetFSKSyncWord 002C  
                                                  i2l9890 38A6  
                                                  i2l9888 388C  
                                                  _OSCFRQ 000E49  
                                       ??_RADIO_GetStatus 0060  
                        __size_of_ValidateChannelMaskCntl 0018  
                         __size_of_InitDefault433Channels 0034  
                                                  _TRISC0 007C18  
                                           ?_LORAWAN_Init 00A8  
                                           ?_LORAWAN_Join 0001  
                        AssembleEncryptionBlock@firstByte 006F  
                                           ?_LORAWAN_Send 016B  
                         __size_of_AutomaticReplyCallback 0016  
                              __size_of_LORAWAN_RxTimeout 020C  
                                       ?_ExecuteDevStatus 0060  
                              __end_of_DIO0_ISR_Lora_Init 6208  
                                __size_ofi2_TMR_SwapTimer 0034  
                                       ExecuteLinkAdr@ptr 006D  
                           __size_of_RADIO_WriteFrequency 00CC  
                                                  _STable 7E6D  
                             RADIO_WriteFrequency@num_mod 0071  
                                     LORAWAN_TxDone@delta 00C3  
                                          __CFG_PWRTE$OFF 000000  
                                       _EncKeySchedule$26 0064  
                             __size_of_ComputeSessionKeys 0042  
                                               AESCmac@k1 0110  
                                               AESCmac@k2 0100  
                               __end_of_SPI2_Exchange8bit 60D0  
                                     LORAWAN_TxDone@found 00C2  
                                         _CheckMcastFlags 507A  
                                     LORAWAN_TxDone@minim 00CF  
                                      ??_ExecuteDevStatus 0062  
                                                  _Random 5DA2  
                                          __CFG_XINST$OFF 000000  
                                     LORAWAN_TxDone@ticks 00CB  
                      SearchAvailableChannel@randomNumber 00AE  
                    __end_of_TMR1_DefaultInterruptHandler 626A  
                   __size_of_TMR1_DefaultInterruptHandler 0002  
                            _TMR1_DefaultInterruptHandler 6268  
                                             ?_GetRx1Freq 0060  
                           ValidateDataRange@dataRangeNew 0063  
                                 _RADIO_FHSSChangeChannel 59F4  
                                               ??___abdiv 0061  
                                                  ___lmul 544A  
                                  ?_RADIO_WriteFSKBitRate 006D  
                                 __end_of_TMR1_StartTimer 623C  
                                   ?_UpdateJoinInProgress 0001  
                                                  ___wmul 5C30  
                             ?_LORAWAN_LinkCheckConfigure 009C  
                                   ?_ExecuteRxTimingSetup 0067  
                                          __CFG_STVREN$ON 000000  
                                    _FindSmallestDataRate 46CC  
                                               ??___lldiv 0068  
                                               ??___llmod 0068  
                                               ??___lwmod 00A2  
                      RADIO_SetChannelFrequency@frequency 0060  
                                         StartReTxTimer@i 0098  
                               ExecuteRxParamSetupReq@ptr 009C  
                                  __size_of_LORAWAN_Reset 011E  
                                                  _memcpy 5128  
                                                  _memset 5BDE  
                                                  clear_0 440A  
                                                  clear_1 441C  
                                                  clear_2 4428  
                                                  clear_3 4434  
                                                  clear_4 4440  
                                                  clear_5 4454  
                                 SwTimerIsRunning@timerId 0060  
                                                  flash@x 0061  
                             __size_of_DIO5_ISR_Lora_Init 000C  
                                             ?_FillSubKey 0060  
                                       ?_SwTimerIsRunning 0001  
                                       ?_ExecuteLinkCheck 0060  
                                         ?_RxJoinResponse 0001  
                                 __size_of_EncodeShiftRow 00B2  
                                  __end_of_EnableChannels 6048  
                              ??_RADIO_UnhandledInterrupt 0064  
                                            ??_HALSPISend 0061  
                    __end_of_INT2_DefaultInterruptHandler 6270  
                   __size_of_INT2_DefaultInterruptHandler 0002  
                            _INT2_DefaultInterruptHandler 626E  
                                            __pdataCOMRAM 0054  
                                  __end_of_HALSPICSAssert 624C  
                       __size_of_RADIO_SetSpreadingFactor 0008  
                            __size_of_ValidateChannelMask 002E  
                                           ??_SwTimerStop 0060  
                                         ??_INT1_CallBack 0001  
                                       ??_SystemTimerInit 0060  
                               ?_RADIO_SetSpreadingFactor 0001  
                                       ?_SwTimerReadValue 0087  
                                      ??_SwTimerIsRunning 0060  
                                          ?_TMR_SwapTimer 0066  
                                       ?_ExecuteDutyCycle 0060  
                                      ??_ExecuteLinkCheck 0062  
                                            __mediumconst 7E6C  
                                                  tblptrh 000FF7  
                                                  tblptrl 000FF6  
                                                  tblptru 000FF8  
                                                  srand@x 0071  
                                         ??_INT2_CallBack 0001  
                                      ??_SwTimerReadValue 008B  
                                         _UpdateDataRange 4276  
                                  __end_of_ExecuteLinkAdr 2B96  
                                            _AESEncode$40 0081  
                                            _AESEncode$41 0083  
                                            _AESEncode$42 0085  
                                      ??_ExecuteDutyCycle 0062  
              IOCBF4_SetInterruptHandler@InterruptHandler 0060  
                TMR1_SetInterruptHandler@InterruptHandler 0060  
                INT3_SetInterruptHandler@InterruptHandler 0060  
                INT0_SetInterruptHandler@InterruptHandler 0060  
                INT2_SetInterruptHandler@InterruptHandler 0060  
                INT1_SetInterruptHandler@InterruptHandler 0060  
                      __end_of_LORAWAN_SetChannelIdStatus 5A50  
                              _LORAWAN_SetChannelIdStatus 5A22  
                                        ?_PIN_MANAGER_IOC 0001  
                                           AESEncode@aux1 0089  
                                           AESEncode@aux2 0088  
                                           AESEncode@aux3 008A  
                                 __end_of_TMR1_WriteTimer 5FE4  
                                   __end_of_SwTimerCreate 573A  
                                            ??_IOCBF4_ISR 0001  
                          ??_SelectChannelForTransmission 00B0  
                                             ?_ComputeMic 0166  
                           __size_of_INTERRUPT_Initialize 0004  
                                         ??_INT3_CallBack 0001  
                                   __end_of_TMR1_CallBack 5E9E  
                               ExecuteDutyCycle@maxDCycle 0065  
                                       ??_RADIO_RxTimeout 00C0  
                                        ?_TMR1_Initialize 0001  
                             UpdateFrequency@frequencyNew 0060  
                                       _SYSTEM_Initialize 5EDA  
                        __size_of_CreateAllSoftwareTimers 0052  
                                 __size_of_GenerateSubkey 00B8  
                                          ??_LORAWAN_Init 00AC  
                                          ??_LORAWAN_Join 00E3  
                                          ??_LORAWAN_Send 00DD  
                          __size_of_RADIO_FSKPayloadReady 0082  
                                              __accesstop 0060  
                                 __end_of__initialization 445A  
                           __end_of_RADIO_FSKPayloadReady 4624  
                                          _RADIO_Transmit 1D9C  
                                               ?_INT1_ISR 0001  
                                               ?_INT2_ISR 0001  
                                               ?_INT3_ISR 0001  
                                    LORAWAN_RxDone@buffer 016F  
                                  RADIO_ReadRandom@retVal 006E  
                                        _ConfigureRadioRx 5C7C  
                                    __size_of_RADIO_Reset 002E  
                                        _ConfigureRadioTx 55FC  
                                     ExecuteDevStatus@ptr 0060  
                        ??_UpdateReceiveWindow2Parameters 0065  
                         ?_UpdateReceiveWindow2Parameters 0060  
                                      ?_SYSTEM_Initialize 0001  
                                    LORAWAN_RxDone@packet 00EE  
                                          _maxPayloadSize 7F7D  
                           RADIO_SetLoRaSyncWord@syncWord 0060  
                                           ___rparam_used 000001  
                              ValidateChannelId@channelId 0062  
                               ExecuteLinkAdr@channelMask 0070  
                                      __end_of_HALSPISend 61C2  
                                          __pcstackCOMRAM 0001  
                                              ___inthi_sp 0754  
                                  _SearchAvailableChannel 3F18  
                                 ValidateChannelId@result 0061  
                                   ?_FindSmallestDataRate 0001  
                                            __pidataBANK1 5996  
                                     ??_SYSTEM_Initialize 0064  
                              __end_of_DIO4_ISR_Lora_Init 6262  
                                               ?_TMR1_ISR 0001  
                                     __size_of_CheckFlags 003A  
                           ?_TMR1_DefaultInterruptHandler 0001  
                                _RADIO_WriteConfiguration 0D72  
                                           __end_of_flash 5314  
                                       ??_RADIO_WriteMode 0067  
                                         _spreadingFactor 7F94  
                               __size_of_LORAWAN_Mainloop 003C  
                                        ??_EncKeySchedule 0061  
                                __end_of_RADIO_WritePower 39DE  
                                 ?_ExecuteRxParamSetupReq 009C  
                                           __end_of_srand 610E  
                                              __end_ofPL2 2BA6  
                                              __end_ofPL4 0CB2  
                                              __end_ofPL6 430C  
                                              __end_ofPL8 0CE6  
                                       LORAWAN_RxDone@hdr 00F7  
                                            ??_RADIO_DIO0 00FB  
                                            ??_RADIO_DIO1 00C0  
                                            ??_RADIO_DIO2 0079  
                                            ??_RADIO_DIO3 0065  
                                            ??_RADIO_DIO4 0065  
                                            ??_RADIO_DIO5 0065  
                                  _InitDefault433Channels 4F0C  
                                         _UpdateFrequency 5C56  
                                  _AutomaticReplyCallback 6006  
                                      __end_of_IOCBF4_ISR 5D14  
                                ??_INTERRUPT_GetDioStatus 0060  
                                            ??_RADIO_Init 007F  
                               SwTimerSetCallback@timerId 0063  
                              LORAWAN_RxDone@channelIndex 00E6  
                          AssembleEncryptionBlock@blockId 006E  
                             __size_of_EXT_INT_Initialize 0056  
                                         _UpdateDutyCycle 5AD8  
                                         ?_EnableChannels 006A  
                                 ??_TMR_OverrideRemaining 006C  
                                 __end_of_ValidateTxPower 5DA2  
                                         ?_HALSPICSAssert 0001  
                                      _DIO3_ISR_Lora_Init 6262  
                            __end_of_HALResetPinMakeInput 6254  
                                 __size_of_TMR1_ReadTimer 0020  
                        __end_of_INT2_SetInterruptHandler 6172  
                                        RADIO_DIO0@opMode 0173  
                             RADIO_RegisterRead@readValue 0063  
                                             ?_RxDataDone 0060  
                      __end_of_IncludeMacCommandsResponse 2138  
                              _IncludeMacCommandsResponse 1F84  
                           ?_INT2_DefaultInterruptHandler 0001  
                         __size_of_InitDefault868Channels 003A  
                                UpdateCfList@bufferLength 00A0  
                             ?_IOCBF4_SetInterruptHandler 0060  
                                   LORAWAN_Send@confirmed 00DF  
                                             ?_ExtractMic 006A  
                                                 ??_flash 0060  
                                         ?_ExecuteLinkAdr 006D  
                                        _ValidateDataRate 6072  
                         LORAWAN_GetMaxPayloadSize@result 006A  
                                     __size_of_GetRx1Freq 0012  
                               __end_of_SYSTEM_Initialize 5EF6  
                      __size_of_RADIO_SetChannelFrequency 0082  
                                                 ??_srand 0073  
                                  __end_of_RADIO_Transmit 1F3C  
                                       ??_SPI2_Initialize 0060  
                                     ?_DIO3_ISR_Lora_Init 0001  
                                           _LORAWAN_Reset 27BA  
                              ?_RADIO_SetChannelFrequency 0060  
                                              __pbssBANK0 00FD  
                                              __pbssBANK1 0179  
                                              __pbssBANK2 0200  
                                              __pbssBANK3 0300  
                                              __pbssBANK4 0400  
                                     __end_of_SwTimerStop 60E2  
                              ?_SetCallbackSoftwareTimers 0001  
                                 __end_of_CheckMcastFlags 50C4  
                                  __end_of_maxPayloadSize 7F85  
                                              ??_INT1_ISR 0001  
                                              ??_INT2_ISR 0001  
                                              ??_INT3_ISR 0001  
                                      SwTimersInterrupt@i 0086  
                                    _RADIO_SetOutputPower 61DA  
                                              __pnvCOMRAM 005C  
                                    __end_of_RADIO_SetCRC 61A4  
                                 ??_HALResetPinMakeOutput 0060  
                                    __end_of_RADIO_RxDone 3E64  
                              __end_of_RADIO_RxFSKTimeout 5996  
                                    __end_of_RADIO_TxDone 45A2  
                                     __size_of_FillSubKey 004A  
                                      __end_of_RADIO_DIO0 4C5A  
                                      __end_of_RADIO_DIO1 57B0  
                                      __end_of_RADIO_DIO2 5572  
                                      __end_of_RADIO_DIO3 5FA6  
                                      __end_of_RADIO_DIO4 5F8E  
                                      __end_of_RADIO_DIO5 5F76  
                               ??_RADIO_FHSSChangeChannel 0079  
                             __size_of_SwTimerSetCallback 001C  
                               RADIO_SetOutputPower@power 0060  
                              __size_of_SPI2_Exchange8bit 0012  
                                      __end_of_RADIO_Init 24AC  
                       __size_of_LORAWAN_SetDeviceAddress 0018  
                         ?_LORAWAN_EnterContinuousReceive 0001  
                        ??_LORAWAN_EnterContinuousReceive 00B0  
                                                 ?_Random 00A3  
                                       ?_CountfOptsLength 0001  
                                  __size_of_DIO1_ISR_Lora 0004  
                               ?_LORAWAN_SetDeviceAddress 0060  
                                        i2_TMR1_ReadTimer 5E24  
                                          FillSubKey@size 0064  
                                         _EnableChannels1 5022  
                                __size_of_HALDIO5PinValue 0006  
                            __size_of_RADIO_RegisterWrite 001E  
                                  ??_UpdateJoinInProgress 0060  
                        __size_of_AssembleEncryptionBlock 0060  
                                  ??_ExecuteRxTimingSetup 0069  
                                        FillSubKey@source 0060  
            SelectChannelForTransmission@transmissionType 00B0  
                                                 ?___lmul 0090  
                  AssembleEncryptionBlock@multicastStatus 0070  
                          __end_of_ExecuteRxParamSetupReq 311E  
                                      ??_CountfOptsLength 0060  
                                                 ?___wmul 0060  
                                  __size_of_DIO2_ISR_Lora 0004  
                                        ?_TMR1_StartTimer 0001  
                                      EncryptFRMPayload@i 00B4  
                                      EncryptFRMPayload@j 00B5  
                                      EncryptFRMPayload@k 00B3  
                                              ??_TMR1_ISR 0028  
                                         __CFG_PPS1WAY$ON 000000  
                                       ??i2_TMR_SwapTimer 0009  
                                    ??_DIO3_ISR_Lora_Init 0060  
                                        _UpdateDLSettings 5F12  
                                        _ValidateRxOffset 605E  
                                                 ?_memcpy 0060  
                                                 ?_memset 0060  
                                          ___lmul@product 0098  
                                       _TMR_ISR_Lora_Init 611A  
                        ??_IOCBF4_DefaultInterruptHandler 0001  
                         ?_IOCBF4_DefaultInterruptHandler 0001  
                                          _SSP2DATPPSbits 000E1D  
                                  RADIO_RegisterWrite@reg 0063  
                                     __size_of_ComputeMic 0046  
                                  RADIO_Transmit@regValue 00B5  
                            __size_of_RADIO_SetModulation 0008  
                                     _RADIO_FSKPacketSent 3228  
                                                 _AESCmac 11A4  
                                  ComputeMic@bufferLength 016A  
                                 __end_of_UpdateDataRange 42FC  
                                         ??_TMR_SwapTimer 0068  
                                RADIO_WriteFSKBitRate@num 0071  
                                      ?_TMR_ISR_Lora_Init 0001  
                              ??_INT1_SetInterruptHandler 0062  
                                                 i2l10550 564A  
                                                 i2l10580 41B4  
                                                 i2l10574 416E  
                                                 i2l10568 4140  
                                                 i2l10578 41B2  
                                                 i2l16090 5D0E  
                                    EncryptFRMPayload@dir 00A3  
                                      _RADIO_GetPacketSnr 620E  
                                    EncryptFRMPayload@key 00A8  
                                   __end_of_UpdateTxPower 61D2  
                                     _RADIO_SetIQInverted 6190  
                                  __size_of_DIO5_ISR_Lora 0004  
                                                 _OSCCON1 000E43  
                                                 _OSCCON3 000E45  
                                 __size_of_ConfigureRadio 0064  
                                                 _OSCTUNE 000E48  
                             __size_ofi2_TMR_GetDeltaTime 0078  
                                     i2_SwTimersInterrupt 4120  
                                                 _SSP2ADD 000ED6  
                                                 _PPSLOCK 000DEF  
                                                 _SSP2BUF 000ED5  
                                     ??_TMR_ISR_Lora_Init 0062  
                                       __end_of_bandwidth 7F94  
                  UpdateReceiveWindow2Parameters@dataRate 0064  
                                __end_of_SetJoinFailState 5BDE  
                                          ?_LORAWAN_Reset 0001  
                            RADIO_WriteMode@newModulation 0065  
                                  ValidateDataRate@result 0061  
                                        ?_TMR1_WriteTimer 0060  
                                     ?_RADIO_GetPacketSnr 0001  
                                         ___abdiv@divisor 0060  
                                         ?_RADIO_Transmit 00A6  
                                 _ValidateChannelMaskCntl 5FA6  
                                         ___abdiv@counter 0061  
                                     StartReTxTimer@minim 0094  
                              AssemblePacket@bufferLength 0169  
                            PrepareSessionKeys@sessionKey 006A  
                                    ?_RADIO_FSKPacketSent 0001  
                                   TMR_SwapTimer@timerVal 0066  
                       __end_of_RADIO_SetChannelFrequency 4858  
                             PrepareJoinRequestFrame@iCtr 00E2  
                       __end_of_SetCallbackSoftwareTimers 4106  
                                   ?_RADIO_SetOutputPower 0001  
                               _AckRetransmissionCallback 3312  
                             PrepareJoinRequestFrame@mhdr 00E0  
                                  __size_of_AESEncodeLoRa 0026  
                       __size_of_INT0_SetInterruptHandler 0002  
                           __size_of_LORAWAN_PlatformInit 0020  
                       __size_of_INT3_SetInterruptHandler 000A  
                               ?_INT0_SetInterruptHandler 0060  
                               ?_INT3_SetInterruptHandler 0060  
                                          _ticksAccounted 0034  
                                           ?_SwTimerStart 0001  
                                              AESCmac@key 00C8  
                                              AESCmac@ptr 0160  
                                 __end_of_spreadingFactor 7F9B  
                           UpdateCurrentDataRate@valueNew 0060  
                                                 __Hparam 0000  
                                    ?_RADIO_SetIQInverted 0001  
                              PrepareJoinRequestFrame@mic 00DC  
                                  _InitDefault868Channels 57B0  
                                RADIO_RegisterWrite@value 0062  
                                                 __Lparam 0000  
                                  ??_FindSmallestDataRate 0060  
                                LORAWAN_Send@bufferLength 016E  
                                   _StopAllSoftwareTimers 53B0  
                                         __size_of_Random 0022  
                              __CFG_RSTOSC$HFINTOSC_64MHZ 000000  
                                    ?i2_SwTimersInterrupt 0017  
                                 __end_of_UpdateFrequency 5C7C  
                                     AssemblePacket@fCtrl 00DA  
                                                 ___abdiv 51D2  
                                     __size_of_RxDataDone 0002  
                                              AESEncode@i 008B  
                                               _AESEncode 1954  
                                  ValidateRxOffset@result 0061  
                               __end_of_TMR_ISR_Lora_Init 6126  
                                         __size_of___lmul 004C  
                             __size_of_DIO2_ISR_Lora_Init 000C  
                                 __end_of_UpdateDutyCycle 5AF4  
                                                 ___lldiv 4A36  
                                     __size_of_ExtractMic 003E  
                                         __size_of___wmul 0026  
                                    ??_RADIO_GetPacketSnr 0060  
                                                 ___llmod 4E4C  
                                       ?_RADIO_ReadRandom 006C  
                                                 ___lwmod 56BE  
                               SwTimerIsRunning@isRunning 0061  
                                 ??_RADIO_SetLoRaSyncWord 0060  
                                    ValidateChannelMask@i 0062  
                                                 __pcinit 43C2  
                      __size_of_LORAWAN_GetMaxPayloadSize 0028  
                                                 _appSKey 01D7  
                                         __size_of_memcpy 0056  
                              __end_of_RADIO_ReceiveStart 22EE  
                                   RADIO_Init@radioBuffer 0079  
                                         __size_of_memset 002A  
                                                 __ramtop 0800  
                        EncryptFRMPayload@multicastStatus 00AD  
                                      ??_RADIO_ReadRandom 006E  
                              ?_LORAWAN_GetMaxPayloadSize 0001  
           RADIO_SetFrequencyHopPeriod@frequencyHopPeriod 0060  
                                                 __ptext0 3C3C  
                                                 __ptext1 5D14  
                                                 __ptext2 52C6  
                                                 __ptext3 5EDA  
                                                 __ptext4 55B8  
                                                 __ptext5 6238  
                                                 __ptext6 610E  
                                                 __ptext7 3690  
                                                 __ptext8 609A  
                                                 __ptext9 5DC4  
                                    __end_of_LORAWAN_Init 544A  
                                    __end_of_LORAWAN_Join 46CC  
                                    __end_of_LORAWAN_Send 3DAE  
                                           _DIO0_ISR_Lora 000000  
                          ??_TMR1_DefaultInterruptHandler 0001  
                         RADIO_SetFSKSyncWord@syncWordLen 006C  
                                          _EncodeShiftRow 39E4  
                              ExecuteNewChannel@frequency 009F  
                         __size_of_INTERRUPT_GetDioStatus 000E  
                                               _T1CONbits 000FCF  
                      SelectChannelForTransmission@result 00B1  
                                 __size_of_LORAWAN_RxDone 0628  
                                   _OSCILLATOR_Initialize 609A  
                          __end_of_UpdateJoinSuccessState 3C08  
                                 __size_of_LORAWAN_TxDone 03E6  
                              __end_of_RADIO_SetBandwidth 61FA  
                                         _RADIO_GetStatus 6214  
                                        ?_ValidateTxPower 0001  
                                 ?_HALResetPinOutputValue 0001  
                            __end_of_macEndDevCmdReplyLen 7FA2  
                       __size_of_TMR1_SetInterruptHandler 000A  
                                           _DIO1_ISR_Lora 625C  
                                             _SwTimerStop 60D0  
                                                 _payload 01C5  
                                ??_PIN_MANAGER_Initialize 0062  
                               ?_TMR1_SetInterruptHandler 0060  
                                                 _nwkSKey 01E7  
                                               _IOCBFbits 000E93  
                             IncludeMacCommandsResponse@i 006A  
                                           ?_UpdateCfList 009C  
                                       _ExecuteNewChannel 2646  
                                               _IOCBNbits 000E94  
                                               _IOCBPbits 000E95  
                             __size_of_PrepareSessionKeys 0046  
                                            ??_CheckFlags 0062  
                           RADIO_SetModulation@modulation 0060  
                                 UpdateDLSettings@dlRx2Dr 0061  
                               __size_of_TMR_GetDeltaTime 007C  
                                           _DIO2_ISR_Lora 6254  
                              __size_of_SYSTEM_Initialize 001C  
                    __end_of_LORAWAN_SetNetworkSessionKey 5C30  
                   __size_of_LORAWAN_SetNetworkSessionKey 0028  
                            _LORAWAN_SetNetworkSessionKey 5C08  
                                      ?_ExecuteNewChannel 009C  
                                              _sendPacket 5D14  
                              RADIO_WriteMode@currentMode 0069  
                                        ComputeMic@buffer 0168  
                                    end_of_initialization 445A  
                                 _CreateAllSoftwareTimers 5224  
                                     SwTimerCreate@retVal 0060  
                                _INT2_SetInterruptHandler 6168  
                                   ??_RADIO_FSKPacketSent 00D4  
                                          _GenerateSubkey 33F8  
                                   _RADIO_WatchdogTimeout 585A  
                          ??_INT2_DefaultInterruptHandler 0001  
                                              _modulation 7F6D  
                                        ?_CheckMcastFlags 0060  
                                  ExtractMic@bufferLength 006C  
                                                 memcpy@d 0066  
                                                 memcpy@n 0064  
                                                 memcpy@s 0068  
                                 __end_of_EnableChannels1 5072  
                                                 memset@c 0062  
                                                 memset@n 0064  
                                                 memset@p 0066  
                               _LORAWAN_LinkCheckCallback 2F14  
                                           __Lmediumconst 7E6C  
                                               i2u1101_40 565A  
                                          ??_SwTimerStart 0087  
                                     ??_ExecuteNewChannel 009E  
                                   _UpdateCurrentDataRate 61D2  
                                   _UpdateChannelIdStatus 3AAE  
                                 ??_RADIO_WriteFSKBitRate 0071  
                                   ??_RADIO_SetIQInverted 0060  
                              __end_of_DIO1_ISR_Lora_Init 614A  
                                         ___lldiv@divisor 0064  
                                               i2u1963_40 5D76  
                                     _ValidateChannelMask 5A50  
                                              _ticksAdded 0038  
                             HALResetPinOutputValue@value 0060  
                                EncodeShiftRow@stateTable 0060  
                                               i2u1956_48 5CFA  
                               __size_of_HALSPICSDeassert 0004  
                                ValidateDataRate@dataRate 0060  
                                         ___lldiv@counter 006C  
                                           _DIO5_ISR_Lora 6258  
                             TMR_OverrideRemaining@tmrVal 006E  
                                   ??i2_SwTimersInterrupt 001B  
                                ExecuteLinkAdr@redundancy 0073  
                                       GenerateSubkey@key 00A0  
                                    _HALResetPinMakeInput 6250  
                                            ??_GetRx1Freq 0064  
                           UpdateDLSettings@dlRx1DrOffset 0060  
                              LORAWAN_Init@RxJoinResponse 00AA  
                              LORAWAN_RxDone@bufferLength 0171  
                        __end_of_RADIO_SetSpreadingFactor 61EA  
                      AssembleEncryptionBlock@bufferIndex 0072  
                                                 postdec1 000FE5  
                                                 postdec2 000FDD  
                                              ?_AESEncode 0066  
                                         _SystemTimerInit 623C  
                                                 postinc0 000FEE  
                                                 postinc1 000FE6  
                                                 postinc2 000FDE  
                                        ??_RxJoinResponse 0060  
                                        _LORAWAN_Mainloop 573A  
                            __end_of_RADIO_SetFSKSyncWord 5B5C  
                                      LORAWAN_Join@result 00E4  
                                      __end_of_CheckFlags 54D0  
                               ValidateTxPower@txPowerNew 0061  
                                   __CFG_WDTCPS$WDTCPS_31 000000  
                                          AESEncode@block 0066  
                       SearchAvailableChannel@maxChannels 00AD  
                                  __end_of_EncodeShiftRow 3A96  
                                      _DIO0_ISR_Lora_Init 6202  
                                       ??_HALDIO5PinValue 0060  
                                   _INT1_InterruptHandler 005E  
                                               _PORTBbits 000F8A  
                                            ??_FillSubKey 0065  
                                        RxDataDone@status 0063  
                            SwTimersInterrupt@timeElapsed 007E  
                                           _AESEncodeLoRa 5CA2  
                               __size_of_ExecuteDevStatus 000A  
                            __end_of_RADIO_WriteFrequency 3834  
                              __end_of_RADIO_RegisterRead 5CEE  
                       __end_of_LORAWAN_GetMaxPayloadSize 5812  
                          __end_of_HALResetPinOutputValue 609A  
                                        ?_UpdateDataRange 0060  
                                __end_of_ConfigureRadioRx 5CA2  
                                __end_of_ConfigureRadioTx 563E  
                                         _RADIO_RxTimeout 5AAC  
                          UpdateChannelIdStatus@channelId 0062  
                               __end_of_ExecuteNewChannel 2784  
                                        EnableChannels1@i 0069  
                                 __size_of_AssemblePacket 024A  
                                          ?_DIO1_ISR_Lora 0001  
                                    ?_ValidateChannelMask 0060  
                                       _SwTimerSetTimeout 5822  
                                          _TMR1_ReadTimer 5E04  
                                          ??_UpdateCfList 009E  
                                              _txPower868 7FA2  
                                     ?_DIO0_ISR_Lora_Init 0001  
                                         ??_LORAWAN_Reset 00A7  
                                          ?_DIO2_ISR_Lora 0001  
                           __size_of_SystemBlockingWaitMs 002C  
                               ??_ValidateChannelMaskCntl 0060  
                                      ?_SwTimerSetTimeout 006D  
                             __size_of_MacExecuteCommands 017E  
                                    ExecuteNewChannel@ptr 009C  
                                ??_UpdateMinMaxChDataRate 0060  
                                  __end_of_GenerateSubkey 34B0  
                                           RADIO_RxDone@i 00FA  
                                   __size_of_RADIO_SetCRC 000A  
                                 AssemblePacket@macCmdIdx 00DB  
                             ?_LORAWAN_SetChannelIdStatus 0064  
                                        __CFG_FEXTOSC$OFF 000000  
                                          _localDioStatus 017E  
                                      __end_of_GetRx1Freq 60BE  
                                   __size_of_RADIO_RxDone 00B6  
                                            ??_ComputeMic 00D6  
                            __size_of_UpdateReceiveDelays 0036  
                                   __size_of_RADIO_TxDone 009E  
                                  ??_RADIO_SetOutputPower 0060  
                         EncryptFRMPayload@macBufferIndex 00AA  
                           ?_LORAWAN_SetNetworkSessionKey 006A  
                                 UpdateMinMaxChDataRate@i 0061  
                                 LORAWAN_Reset@ismBandNew 00A7  
                               __size_of_SwTimerIsRunning 0016  
                              __end_of_ComputeSessionKeys 4C9C  
                                     ??_SwTimerSetTimeout 0071  
                                __size_of_SwTimersExecute 0064  
                               __size_of_ExecuteLinkCheck 001E  
                                  _INTERRUPT_GetDioStatus 60F2  
                                         _RADIO_WriteMode 35B6  
                              ??_RADIO_WriteConfiguration 009E  
                                   SPI2_Exchange8bit@data 0060  
                                 ?_SearchAvailableChannel 00A5  
                               __size_of_SwTimerReadValue 0034  
                                          ?_DIO5_ISR_Lora 0001  
                             RADIO_FSKPacketSent@irqFlags 00DC  
                               __size_of_ExecuteDutyCycle 004E  
                                  ?_StopAllSoftwareTimers 0001  
                                 AssemblePacket@confirmed 00D8  
                                      __end_of_FillSubKey 552A  
                                 _AssembleEncryptionBlock 431E  
                                       __size_of_INT1_ISR 0006  
                                       __size_of_INT2_ISR 0006  
                                       __size_of_INT3_ISR 0006  
                                    ??_DIO0_ISR_Lora_Init 0062  
                                   ?_HALResetPinMakeInput 0001  
                                          __end_of_STable 7F6D  
                                     AESEncodeLoRa@useKey 0090  
                              SwTimerSetCallback@callback 0060  
                LORAWAN_SetDeviceAddress@deviceAddressNew 0060  
                                        ?_UpdateFrequency 0060  
                                      LORAWAN_Send@buffer 016C  
                                          __end_of_Random 5DC4  
                                 ?_InitDefault433Channels 0001  
                              __size_of_TMR_ISR_Lora_Init 000C  
                                __end_of_ValidateDataRate 6086  
                            __end_of_INTERRUPT_Initialize 6244  
                          EnableChannels1@channelMaskCntl 0066  
                          EnableChannels1@channelIndexMax 0068  
                          EnableChannels1@channelIndexMin 0067  
                     LORAWAN_SetChannelIdStatus@channelId 0066  
                                        ?_UpdateDutyCycle 0060  
                            _INT0_DefaultInterruptHandler 000000  
                              __end_of_DIO5_ISR_Lora_Init 6132  
                                 __end_of_RADIO_GetStatus 621A  
                                          __end_of___lmul 5496  
                                      LORAWAN_Send@result 00DE  
                                        ??_EnableChannels 006D  
                               i2TMR1_WriteTimer@timerVal 0001  
                                          __end_of___wmul 5C56  
                                           ?_TMR_ISR_lora 0001  
                                        ??_HALSPICSAssert 0060  
                     TMR_OverrideRemaining@ticksRemaining 0068  
                                       ?_RADIO_WritePower 0001  
                                           __pidataCOMRAM 61C2  
                                         ?_EncodeShiftRow 0060  
                                          ?_AESEncodeLoRa 008C  
                                       __size_of_TMR1_ISR 0024  
                                      __end_of_ComputeMic 55B8  
                                               Random@max 00A3  
                                          __end_of_memcpy 517E  
                                  ?_OSCILLATOR_Initialize 0001  
                               __end_of_SwTimerSetTimeout 585A  
                                  __end_of_TMR1_ReadTimer 5E24  
                                          __end_of_memset 5C08  
                                         _SPI2_Initialize 610E  
                                ?_PrepareJoinRequestFrame 0001  
                                      ??_RADIO_WritePower 0064  
                                            _RADIO_SetCRC 619A  
                                   ??_ValidateChannelMask 0062  
                                        ??_ExecuteLinkAdr 006F  
                                   UpdateCfList@frequency 00A1  
                                            _RADIO_RxDone 3DAE  
                                            _RADIO_TxDone 4504  
LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew 006A  
                                             __end_ofPL10 3F18  
                                             __end_ofPL20 0CFA  
                                             __end_ofPL12 431E  
                                             __end_ofPL30 2A5A  
                                             __end_ofPL22 2DC8  
                                             __end_ofPL14 2146  
                                             __end_ofPL40 47C6  
                                             __end_ofPL32 22F8  
                                             __end_ofPL24 06CE  
                                             __end_ofPL16 2156  
                                             __end_ofPL50 3C1A  
                                             __end_ofPL42 06FA  
                                             __end_ofPL34 06F0  
                                             __end_ofPL26 06DE  
                                             __end_ofPL18 3B44  
                                             __end_ofPL60 0704  
                                             __end_ofPL52 3AA4  
                                             __end_ofPL44 2DF0  
                                             __end_ofPL36 32E2  
                                             __end_ofPL28 2DD6  
                                             __end_ofPL70 1AF2  
                                             __end_ofPL62 3AAE  
                                             __end_ofPL54 0D30  
                                             __end_ofPL46 3002  
                                             __end_ofPL38 2DE4  
                                             __end_ofPL80 0D3A  
                                             __end_ofPL72 1B00  
                                             __end_ofPL64 2DFA  
                                             __end_ofPL56 48B0  
                                             __end_ofPL48 1938  
                                             __end_ofPL90 0726  
                                             __end_ofPL82 2A7A  
                                             __end_ofPL74 2A6C  
                                             __end_ofPL66 3C34  
                                             __end_ofPL58 3016  
                                             __end_ofPL92 0D6A  
                                             __end_ofPL84 0D4A  
                                             __end_ofPL76 2ED0  
                                             __end_ofPL68 5B04  
                                             __end_ofPL94 47D6  
                                             __end_ofPL86 0D5A  
                                             __end_ofPL78 5AD8  
                                             __end_ofPL96 073A  
                                             __end_ofPL88 1B0E  
                                             __end_ofPL98 074E  
                                     start_initialization 43C2  
                                          _ConfigureRadio 49C0  
                                      LORAWAN_RxDone@mhdr 00E7  
                                      LORAWAN_RxDone@temp 00ED  
                                            ??_RxDataDone 0064  
                                      _DIO4_ISR_Lora_Init 6260  
                                __end_ofi2_TMR1_ReadTimer 5E44  
                          __size_of_TMR_OverrideRemaining 0078  
                                     _RADIO_RegisterWrite 5E62  
                                            AESCmac@mLast 0120  
                               ??_CreateAllSoftwareTimers 0061  
                                    RxDataDone@dataLength 0062  
                         __size_of_PIN_MANAGER_Initialize 00CC  
                    __end_of_INT3_DefaultInterruptHandler 626E  
                   __size_of_INT3_DefaultInterruptHandler 0002  
                            _INT3_DefaultInterruptHandler 626C  
                           __end_of_TMR_OverrideRemaining 49C0  
                             ?_IncludeMacCommandsResponse 0060  
                                   __end_of_INT1_CallBack 5F12  
                                            ??_ExtractMic 006E  
                    EncryptFRMPayload@bufferToBeEncrypted 00AB  
                                            AESCmac@input 00CC  
                        __end_of_LORAWAN_SetDeviceAddress 5F5E  
                                         ?_GenerateSubkey 00A0  
                            ?_RADIO_SetFrequencyHopPeriod 0060  
                                         LORAWAN_TxDone@i 00D3  
                                             ?_sendPacket 0001  
                                   LORAWAN_Init@RxPayload 00A8  
                     AssembleEncryptionBlock@frameCounter 006A  
                                 i2TMR_SwapTimer@timerVal 0007  
                                   __end_of_INT2_CallBack 5EDA  
                                           ??_RADIO_Reset 0065  
                                __end_of_UpdateDLSettings 5F2C  
                              SwTimerStart@ticksRemaining 008B  
                                  RADIO_WriteMode@newMode 006A  
                                __end_of_ValidateRxOffset 6072  
                             ??_RADIO_SetChannelFrequency 0064  
                             ??_SetCallbackSoftwareTimers 0064  
                                     ?_DIO4_ISR_Lora_Init 0001  
                                     _RADIO_SetModulation 61EA  
                           ExecuteNewChannel@channelIndex 00A3  
                          __end_of_SearchAvailableChannel 3FC8  
                                        ?_EnableChannels1 0064  
                                   __end_of_INT3_CallBack 5EBC  
                                         i2_TMR_SwapTimer 563E  
                                 __size_of_StartReTxTimer 00DC  
                                  ?_UpdateCurrentDataRate 0001  
                                  ?_UpdateChannelIdStatus 0060  
                                         ___llmod@divisor 0064  
                              MacExecuteCommands@fOptsLen 00A6  
                                 __end_of_SystemTimerInit 6240  
                          UpdateChannelIdStatus@statusNew 0060  
                       __size_of_RADIO_UnhandledInterrupt 0020  
                                         ___llmod@counter 0068  
                                            _JoinedServer 017D  
                                     TMR_SwapTimer@oldVal 0040  
                               ?_RADIO_UnhandledInterrupt 0001  
                                __size_of_PIN_MANAGER_IOC 0008  
                                     TMR_SwapTimer@retVal 003E  
                                   _RADIO_FSKPayloadReady 45A2  
                          __size_of_HALResetPinMakeOutput 0004  
                           __end_of_HALResetPinMakeOutput 6250  
                                                ??_Random 00A5  
                                                AESCmac@i 0165  
                                                AESCmac@j 0164  
                                        __CFG_LPBOREN$OFF 000000  
                                                AESCmac@n 0163  
                                                AESCmac@x 0150  
                                                AESCmac@y 0140  
                              SwTimerReadValue@ticksCount 008B  
                                    ?_RADIO_RegisterWrite 0062  
                          __end_of_InitDefault433Channels 4F40  
                          __end_of_AutomaticReplyCallback 601C  
                                     RADIO_Init@frequency 007B  
                                __size_of_TMR1_Initialize 0044  
                                    _macEndDevCmdReplyLen 7F9B  
                                                ??___lmul 0098  
                                             ??_AESEncode 0069  
                       RADIO_WriteConfiguration@tempValue 00A1  
                                   __size_of_LORAWAN_Init 004C  
                      __size_of_AckRetransmissionCallback 00E0  
                                   __size_of_LORAWAN_Join 008C  
                                                ??___wmul 0064  
                                   __size_of_LORAWAN_Send 00B8  
                                 __end_of_RADIO_RxTimeout 5ACC  
                                MacExecuteCommands@buffer 00A4  
                                      __end_of_RxDataDone 6268  
                                ??_SetReceptionNotOkState 00B0  
                                          ??_TMR_ISR_lora 0028  
                                             __pdataBANK1 01C7  
                                       _ValidateDataRange 58FC  
                                      __end_of_ExtractMic 56BE  
                i2SwTimersInterrupt@ticksToNextTimerEvent 0023  
                  SwTimersInterrupt@ticksToNextTimerEvent 0082  
                                                ??_memcpy 0066  
                                  __size_of_SwTimerCreate 003E  
                                                ??_memset 0066  
                                    ??_DIO4_ISR_Lora_Init 0060  
                              __end_of_EXT_INT_Initialize 5128  
                                       _ValidateChannelId 5E44  
                                    ?_RADIO_SetModulation 0001  
                                _RADIO_SetSpreadingFactor 61E2  
                                      _RADIO_RxFSKTimeout 5964  
                                                ?_AESCmac 00C8  
                                  __size_of_TMR1_CallBack 001E  
                                         ??_DIO1_ISR_Lora 0001  
                                      ?_ValidateDataRange 0001  
                                ValidateRxOffset@rxOffset 0060  
                                            AESEncode@aux 0087  
                                            AESEncode@key 0071  
                                  TMR_GetDeltaTime@retVal 0030  
                                         ?_TMR1_ReadTimer 0060  
                                  __end_of_ConfigureRadio 4A24  
                                          _LORAWAN_RxDone 0096  
                                      ?_ValidateChannelId 0060  
                                  TMR_GetDeltaTime@tmrVal 0042  
                                          _LORAWAN_TxDone 08BC  
                              __size_of_ExecuteNewChannel 013E  
              LORAWAN_GetMaxPayloadSize@macCommandsLength 0069  
                                    __end_of_SwTimerStart 4BF2  
                  __end_of_LORAWAN_EnterContinuousReceive 4D72  
                 __size_of_LORAWAN_EnterContinuousReceive 004C  
                          _LORAWAN_EnterContinuousReceive 4D26  
                                             __pbssBIGRAM 04E0  
                                   TMR1_ISR@CountCallBack 003C  
                                         ??_DIO2_ISR_Lora 0001  
                               __size_of_CountfOptsLength 004E  
                                       CountfOptsLength@i 0067  
                                             __pbssCOMRAM 0030  
                              __end_of_DefaultChannels433 7FD2  
                              __end_of_DefaultChannels868 7FFC  
                                        ??_RADIO_Transmit 00A9  
                        __end_of_INT0_SetInterruptHandler 6266  
                                      LORAWAN_RxTimeout@i 00BF  
                        __end_of_INT3_SetInterruptHandler 6168  
                                           __pcstackBANK0 0060  
                                           __pcstackBANK1 0100  
                                     ??_ValidateDataRange 0062  
                                        _TMR_GetDeltaTime 41CC  
                           EnableChannels@channelMaskCntl 006C  
                                 __end_of_RADIO_WriteMode 367E  
                 __end_of_UnconfirmedTransmissionCallback 4AFA  
                __size_of_UnconfirmedTransmissionCallback 004E  
                         _UnconfirmedTransmissionCallback 4AAC  
                                 SearchAvailableChannel@i 00AF  
                                     ??_ValidateChannelId 0061  
                                   RADIO_RegisterRead@reg 0062  
                         __size_of_UpdateMinMaxChDataRate 006A  
                           ?_INT3_DefaultInterruptHandler 0001  
                     LORAWAN_SetChannelIdStatus@statusNew 0064  
                                 _RADIO_ReceiveStart$2491 00AC  
                                               _aesBuffer 01B5  
                                 INTERRUPT_GetDioStatus@a 0060  
                  __end_of_IOCBF4_DefaultInterruptHandler 626C  
                 __size_of_IOCBF4_DefaultInterruptHandler 0002  
                          _IOCBF4_DefaultInterruptHandler 626A  
                                       ?_SetJoinFailState 0001  
                                     SwTimerStart@timerId 008F  
                           ??_RADIO_SetFrequencyHopPeriod 0062  
                                    _RADIO_SetFSKSyncWord 5B30  
                             RADIO_SetBandwidth@bandwidth 0060  
                              __end_of_SwTimerSetCallback 5B78  
       __end_of_ResetParametersForUnconfirmedTransmission 6190  
      __size_of_ResetParametersForUnconfirmedTransmission 000A  
              ?_ResetParametersForUnconfirmedTransmission 0001  
             ??_ResetParametersForUnconfirmedTransmission 0060  
               _ResetParametersForUnconfirmedTransmission 6186  
                               ??_AssembleEncryptionBlock 0071  
                                   _INT2_InterruptHandler 01FD  
                                               _bandwidth 7F8D  
                                      ??_SetJoinFailState 0060  
                                         ??_DIO5_ISR_Lora 0001  
                                 ?_InitDefault868Channels 0001  
                                            _LORAWAN_Init 53FE  
                                            _LORAWAN_Join 4640  
                                            _LORAWAN_Send 3CF6  
                                  RADIO_FSKPayloadReady@i 00FA  
                                       _ValidateFrequency 4F6A  
                                               __pnvBANK1 01F7  
                                  ??_HALResetPinMakeInput 0060  
                                    _RADIO_WriteFrequency 3768  
                                         FillSubKey@carry 0066  
                                        _HALSPICSDeassert 6244  
                          ??_LORAWAN_SetNetworkSessionKey 006C  
                                     __end_of_RADIO_Reset 5AAC  
                                   ??_RADIO_RegisterWrite 0063  
                                  _PIN_MANAGER_Initialize 3690  
                                           FillSubKey@key 0062  
                                      ?_ValidateFrequency 0060  
                                    __end_of_UpdateCfList 2A42  
                     RADIO_WriteFSKFrequencyDeviation@num 0071  
                               EnableChannels@channelMask 006A  
                                               _macBuffer 05EF  
                                               _dioStatus 0045  
                               __end_of_ValidateDataRange 5930  
                           RADIO_FSKPayloadReady@irqFlags 00F9  
                                       _SwTimersInterrupt 3E64  
                                       ??_SwTimersExecute 00E0  
                                               __pintcode 0008  
                                                ?___abdiv 0060  
                        __end_of_TMR1_SetInterruptHandler 6154  
                                           __pmediumconst 7E6C  
                                 RADIO_Transmit@bufferLen 00A8  
                                 __end_of_SPI2_Initialize 611A  
                                               __ptext100 4858  
                                               __ptext101 5680  
                                               __ptext110 6214  
                                               __ptext102 4C5A  
                               __end_of_ValidateChannelId 5E62  
                                               __ptext111 4D26  
                                               __ptext103 4FC6  
                                               __ptext200 563E  
                                               __ptext120 4640  
                                               __ptext112 6266  
                                               __ptext104 507A  
                                               __ptext201 5FEE  
                                               __ptext121 5F2C  
                                               __ptext113 6186  
                                               __ptext105 5496  
                                               __ptext210 5E9E  
                                               __ptext202 4120  
                                               __ptext130 61EA  
                                               __ptext122 4D88  
                                               __ptext114 60E2  
                                               __ptext106 3228  
                                               __ptext211 626C  
                                               __ptext203 3840  
                                               __ptext131 61A4  
                                               __ptext123 3F18  
                                               __ptext115 621A  
                                               __ptext107 08BC  
                                               __ptext220 0000  
                                               __ptext212 622C  
                                               __ptext204 5E24  
                                               __ptext140 2DFA  
                                               __ptext132 5B30  
                                               __ptext124 55FC  
                                               __ptext116 5FBE  
                                               __ptext108 5930  
                                               __ptext213 5EBC  
                                               __ptext205 61FA  
                                               __ptext141 5DA2  
                                               __ptext133 47D6  
                                               __ptext125 61DA  
                                               __ptext117 2168  
                                               __ptext109 6048  
                                               __ptext214 6258  
                                               __ptext206 5CEE  
                                               __ptext150 39E4  
                                               __ptext142 5362  
                                               __ptext134 61F2  
                                               __ptext126 6190  
                                               __ptext118 5C7C  
                                               __ptext215 626E  
                                               __ptext207 6254  
                                               __ptext151 2CDC  
                                               __ptext143 56BE  
                                               __ptext135 1D9C  
                                               __ptext127 619A  
                                               __ptext119 60F2  
                                               __ptext216 6232  
                                               __ptext208 626A  
                                               __ptext160 2326  
                                               __ptext152 53FE  
                                               __ptext144 5572  
                                               __ptext136 0D72  
                                               __ptext128 49C0  
                                               __ptext217 5EF6  
                                               __ptext209 6226  
                                               __ptext161 5B5C  
                                               __ptext153 6100  
                                               __ptext145 11A4  
                                               __ptext137 3918  
                                               __ptext129 61E2  
                                               __ptext218 625C  
                                               __ptext170 6244  
                                               __ptext162 35B6  
                                               __ptext154 4074  
                                               __ptext146 33F8  
                                               __ptext138 4EAE  
                                               __ptext219 6270  
                                               __ptext171 6248  
                                               __ptext163 5CC8  
                                               __ptext155 48D0  
                                               __ptext147 54E0  
                                               __ptext139 4DEA  
                                               __ptext180 60D0  
                                               __ptext172 5A7E  
                                               __ptext164 6220  
                                               __ptext156 27BA  
                                               __ptext148 5CA2  
                                               __ptext181 4B88  
                                               __ptext173 5B88  
                                               __ptext165 3768  
                                               __ptext157 4B1E  
                                               __ptext149 1954  
                                               __ptext190 4F0C  
                                               __ptext182 4948  
                                               __ptext174 6086  
                                               __ptext166 4E4C  
                                               __ptext158 53B0  
                                               __ptext191 5BDE  
                                               __ptext183 58C6  
                                               __ptext175 624C  
                                               __ptext167 5E62  
                                               __ptext159 61AE  
                                               __ptext192 5128  
                                               __ptext184 5FD6  
                                               __ptext176 6250  
                                               __ptext168 61B8  
                                               __ptext193 5224  
                                               __ptext185 3E64  
                                               __ptext177 3128  
                                               __ptext169 60BE  
                                               __ptext194 56FC  
                                               __ptext186 41CC  
                                               __ptext178 544A  
                                               __ptext187 5E04  
                                               __ptext179 4A36  
                                               __ptext196 5D5C  
                                               __ptext188 5822  
                                               __ptext197 5E80  
                                               __ptext189 57B0  
                                               __ptext198 6268  
                                               __ptext199 5276  
                                       _EncryptFRMPayload 2BBA  
                                                ?___lldiv 0060  
                            RADIO_FSKPacketSent@timeOnAir 00D4  
                           __size_of_UpdateJoinInProgress 001A  
                                                ?___llmod 0060  
                           __size_of_ExecuteRxTimingSetup 0024  
                                         ??_AESEncodeLoRa 0090  
                SelectChannelForTransmission@channelIndex 00B2  
                         __end_of_PrepareJoinRequestFrame 2EAA  
                                                ?___lwmod 009E  
                                      ?_SwTimersInterrupt 0076  
                               _RADIO_SetChannelFrequency 47D6  
                             __size_of_DIO3_ISR_Lora_Init 0002  
                   IncludeMacCommandsResponse@bufferIndex 006B  
                               _SetCallbackSoftwareTimers 4074  
                                      ConfigureRadio@freq 006D  
                                   ??_RADIO_SetModulation 0060  
                                        ?_RADIO_GetStatus 0001  
                                     __size_of_sendPacket 0024  
                                  __end_of_LORAWAN_RxDone 06BE  
                                     ??_ValidateFrequency 0064  
                                  __end_of_LORAWAN_TxDone 0CA2  
                                      ?_EncryptFRMPayload 00A0  
                            ??_INTERRUPT_InterruptManager 0028  
                            __end_of_LORAWAN_PlatformInit 5DE4  
                          __size_of_RADIO_SetLoRaSyncWord 000A  
                                    GenerateSubkey@F17267 01C7  
                                        _ExecuteDevStatus 617C  
                           __end_of_RADIO_SetLoRaSyncWord 61B8  
                  IncludeMacCommandsResponse@pBufferIndex 0062  
                              __size_of_SwTimerSetTimeout 0038  
                             ??_LORAWAN_GetMaxPayloadSize 0068  
                          LORAWAN_LinkCheckConfigure@iCtr 00A6  
                        ExecuteRxParamSetupReq@dlSettings 00A2  
                                          _AssemblePacket 147C  
                                         ?_ConfigureRadio 006D  
                               AssemblePacket@bufferIndex 00DC  
                              ??_INT2_SetInterruptHandler 0062  
                              __end_ofi2_TMR_GetDeltaTime 38B8  
                                __size_of_TMR1_StartTimer 0004  
                                     ??_SwTimersInterrupt 007A  
                                    RADIO_DIO0@dioMapping 0172  
                                       _DutyCycleCallback 1B84  
                                 InitDefault433Channels@i 006A  
                                   __end_of_TMR_SwapTimer 58FC  
                                            ?_SwTimerStop 0001  
                                     ??_EncryptFRMPayload 00AE  
                                 __end_ofi2_TMR_SwapTimer 5672  
                                 __size_of_EncKeySchedule 00CA  
                                      AssemblePacket@mhdr 00D9  
                                      AssemblePacket@port 0166  
                                          __size_of_flash 004E  
                               __size_of_RADIO_ReadRandom 0062  
                                ConfigureRadioRx@dataRate 0076  
                                      _RADIO_ReceiveStart 2168  
                                          __size_of_srand 000E  
                                __end_of_LORAWAN_Mainloop 5776  
                                   ?_RADIO_SetFSKSyncWord 006A  
                                    _INTERRUPT_Initialize 6240  
                                           _SwTimerCreate 56FC  
                          __end_of_InitDefault868Channels 57EA  
                     IncludeMacCommandsResponse@macBuffer 0060  
                                ?_RADIO_FHSSChangeChannel 0001  
                           ValidateFrequency@frequencyNew 0060  
                                           _TMR1_CallBack 5E80  
                               __end_of_ValidateFrequency 4FC6  
                                        _SwTimerIsRunning 6048  
                                        _ExecuteLinkCheck 5B04  
                                    i2SwTimersInterrupt@i 0027  
                                                _INT1_ISR 6232  
                                _LORAWAN_SetDeviceAddress 5F46  
                                                _INT2_ISR 622C  
                                       EncKeySchedule@key 0060  
                                          ___wmul@product 0064  
                                                _INT3_ISR 6226  
                                      _RADIO_SetBandwidth 61F2  
                                                _LATCbits 000F7B  
                                  ?_RADIO_FSKPayloadReady 0001  
                       __size_of_INT1_SetInterruptHandler 000A  
                                    __end_of_rxWindowSize 7F8D  
                                   ?_RADIO_WriteFrequency 006D  
                               ?_INT1_SetInterruptHandler 0060  
                                        ?_SystemTimerInit 0001  
                                               _reloadVal 00FD  
                                     ?_RADIO_ReceiveStart 00A6  
                                                _PIE0bits 000E29  
                                        _SwTimerReadValue 5930  
                                        _ExecuteDutyCycle 5314  
                                                _PIE5bits 000E2E  
                                         _HALDIO5PinValue 6220  
                                    RADIO_DIO1@dioMapping 00C1  
                               __end_of_SwTimersInterrupt 3F08  
                                __size_of_TMR1_WriteTimer 000E  
                                      AESEncode@masterKey 0068  
                     __size_of_INTERRUPT_InterruptManager 0086  
                              __end_of_DIO2_ISR_Lora_Init 613E  
                                                _PIR0bits 000E33  
                                        GenerateSubkey@k1 00A2  
                                        GenerateSubkey@k2 00A4  
                                    ConfigureRadioRx@freq 0072  
                               __end_of_EncryptFRMPayload 2C82  
                                                _PIR5bits 000E38  
                          __size_of_RADIO_WriteFSKBitRate 0062  
                                UpdateReceiveDelays@delay 0066  
                               LORAWAN_RxDone@bufferIndex 00EC  
                                  __size_of_UpdateTxPower 0008  
                           __end_of_RADIO_WriteFSKBitRate 4E4C  
                                    ConfigureRadioTx@freq 0072  
                                         RxDataDone@pData 0060  
                             UpdateDataRange@dataRangeNew 0060  
                                     ?_RADIO_SetBandwidth 0001  
                      SearchAvailableChannel@channelIndex 00A6  
                                               _rxPayload 0179  
                                  _UpdateMinMaxChDataRate 4B1E  
                           EncryptFRMPayload@bufferLength 00A2  
                                 ValidateDataRange@result 0062  
                                                _SSP2CON1 000ED9  
                             UpdateDutyCycle@dutyCycleNew 0060  
              ValidateChannelId@allowedForDefaultChannels 0060  
                           __size_of_FindSmallestDataRate 0086  
                                                _TMR1_ISR 5D5C  
                                ConfigureRadioTx@dataRate 0076  
                    __size_of_RADIO_SetFrequencyHopPeriod 000A  
                                   ValidateTxPower@result 0060  
                                        ?_RADIO_RxTimeout 0001  
                     __size_of_IncludeMacCommandsResponse 01B4  
                                                _SSP2STAT 000ED8  
                            ??_LORAWAN_LinkCheckConfigure 009E  
                                       ??_PIN_MANAGER_IOC 0001  
                             __size_of_RADIO_GetPacketSnr 0006  
                                     _UpdateReceiveDelays 5890  
                                             _INT0PPSbits 000DF0  
                         __size_of_SetReceptionNotOkState 005A  
                                             _INT1PPSbits 000DF1  
                                  __end_of_AssemblePacket 16C6  
                                         ?_LORAWAN_RxDone 016F  
                                             _INT2PPSbits 000DF2  
                                         ?_LORAWAN_TxDone 00B0  
                                       ??_TMR1_Initialize 0062  
                                             _INT3PPSbits 000DF3  
                                        ___abdiv@dividend 0064  
                                      _DIO1_ISR_Lora_Init 613E  
                               __end_of_DutyCycleCallback 1D40  
                                       ___wmul@multiplier 0060  
                                        __size_of_AESCmac 0234  
                                    ??_RADIO_ReceiveStart 00A8  
                                 ValidateFrequency@result 0064  
                              __end_of_PrepareSessionKeys 500C  
                                       ?_ConfigureRadioRx 0072  
                                       ?_ConfigureRadioTx 0072  
                                    RADIO_DIO2@dioMapping 007A  
                                      AESEncodeLoRa@block 008C  
                                                _Channels 0400  
                             __end_of_RADIO_FSKPacketSent 32C6  
                 RADIO_SetSpreadingFactor@spreadingFactor 0060  
                                      ??_ConfigureRadioRx 0076  
                                      ??_ConfigureRadioTx 0076  
                                    ??_RADIO_SetBandwidth 0060  
                                     ?_DIO1_ISR_Lora_Init 0001  
                           RADIO_SetIQInverted@iqInverted 0060  
                                        ?_RADIO_WriteMode 0065  
                               LORAWAN_RxDone@computedMic 00F0  
                                       ___lmul@multiplier 0090  
                                          ?_SwTimerCreate 0001  
                                               copy_data0 43D6  
                                               copy_data1 43F6  
                                   ?_INTERRUPT_Initialize 0001  
                                 ?_INTERRUPT_GetDioStatus 0001  
                                    ?_UpdateReceiveDelays 0001  
                                _INT0_SetInterruptHandler 6264  
                             __end_of_RADIO_SetIQInverted 619A  
                                          ?_TMR1_CallBack 0001  
                                _INT3_SetInterruptHandler 615E  
                                    __end_of_TMR_ISR_lora 52BC  
                                             _RADIO_Reset 5A7E  
                                     ExecuteLinkCheck@ptr 0060  
                          i2SwTimersInterrupt@timeElapsed 001F  
                                      _RADIO_RegisterRead 5CC8  
                                __size_of_ValidateTxPower 0022  
                                 ??_StopAllSoftwareTimers 0061  
                                          _StartReTxTimer 34DA  
                             __end_ofi2_SwTimersInterrupt 41CC  
                               _LORAWAN_GetMaxPayloadSize 57EA  
                              LORAWAN_RxDone@extractedMic 00E8  
                                             AESCmac@flag 0162  
                           EncryptFRMPayload@frameCounter 00A4  
                                      CheckMcastFlags@hdr 0060  
                                             AESCmac@size 00CE  
                                SwTimerSetTimeout@timerId 0075  
                                SwTimerSetTimeout@timeout 006D  
                                   RADIO_WriteMode@opMode 006B  
                          ??_INT3_DefaultInterruptHandler 0001  
                                ??_ExecuteRxParamSetupReq 009E  
                     __size_of_LORAWAN_LinkCheckConfigure 0100  
                                        ___abdiv@quotient 0063  
                 UpdateReceiveWindow2Parameters@frequency 0060  
                                                __Hrparam 0000  
                                     ?_RADIO_RegisterRead 0001  
                            __end_of_SystemBlockingWaitMs 5BB4  
                  ValidateChannelMaskCntl@channelMaskCntl 0061  
                                       i2_TMR1_WriteTimer 5FEE  
                                                __Lrparam 0000  
                                        ??_EncodeShiftRow 0062  
                                    ??_DIO1_ISR_Lora_Init 0062  
                                __size_of_CheckMcastFlags 004A  
                                      __CFG_BOREN$SBORDIS 000000  
                                   TMR1_ReadTimer@readVal 0064  
                              __size_of_ValidateDataRange 0034  
                               _ticksToScheduledInterrupt 0058  
                            ValidateDataRange@dataRateMax 0064  
                            ValidateDataRange@dataRateMin 0065  
                              __size_of_ValidateChannelId 001E  
                                        ?_SPI2_Initialize 0001  
                                      ?i2_TMR1_WriteTimer 0001  
                                        __size_of___abdiv 0052  
                                 ??_OSCILLATOR_Initialize 0060  
                                       ?_ValidateDataRate 0001  
                                      _ComputeSessionKeys 4C5A  
                                   __size_of_SwTimerStart 006A  
                                        __size_of___lldiv 0076  
                                        __size_of___llmod 0062  
                                        __size_of___lwmod 003E  
                                         ?_AssemblePacket 0166  
                                    AssemblePacket@buffer 0167  
                                        SwTimersExecute@i 00E4  
                                      ??_ValidateDataRate 0060  
                                   _INT3_InterruptHandler 01FB  
                                _TMR1_SetInterruptHandler 614A  
                                             _radioBuffer 04E0  
                                     ??i2_TMR1_WriteTimer 0003  
         __end_of_ResetParametersForConfirmedTransmission 60EA  
        __size_of_ResetParametersForConfirmedTransmission 0008  
                ?_ResetParametersForConfirmedTransmission 0001  
               ??_ResetParametersForConfirmedTransmission 0060  
                 _ResetParametersForConfirmedTransmission 60E2  
                                   _TMR1_InterruptHandler 01F9  
                                        ??_GenerateSubkey 00A6  
                                        _CountfOptsLength 4858  
                                              _HALSPISend 61B8  
                                     ?_ComputeSessionKeys 00A0  
                                          _rxWindowOffset 7F75  
                      RADIO_UnhandledInterrupt@modulation 0064  
                                 _IOCBF4_InterruptHandler 01F7  
                              __end_of_MacExecuteCommands 263C  
                                    ??_RADIO_RegisterRead 0062  
                        __end_of_RADIO_UnhandledInterrupt 5E04  
                                           _UpdateTxPower 61CA  
                                    RADIO_Transmit@buffer 00A6  
                         __end_of_RADIO_FHSSChangeChannel 5A22  
                                         _allocatedTimers 00FF  
                          __end_of_INTERRUPT_GetDioStatus 6100  
                                       ?i2_TMR1_ReadTimer 0001  
                                      _DIO5_ISR_Lora_Init 6126  
                                                __ptext10 611A  
                                                __ptext11 614A  
                                                __ptext20 6240  
                                                __ptext12 623C  
                                                __ptext21 50D2  
                                                __ptext13 6126  
                                                __ptext30 4752  
                                                __ptext22 615E  
                                                __ptext14 6260  
                                                __ptext31 585A  
                                                __ptext23 6168  
                                                __ptext15 6262  
                                                __ptext40 4AAC  
                                                __ptext32 5964  
                                                __ptext24 6172  
                                                __ptext16 6132  
                                                __ptext41 60AC  
                                                __ptext33 1B84  
                                                __ptext25 6264  
                                                __ptext17 6154  
                                                __ptext50 5DE4  
                                                __ptext42 5F5E  
                                                __ptext34 3B76  
                                                __ptext26 5C08  
                                                __ptext18 613E  
                                                __ptext51 4504  
                                                __ptext43 5F76  
                                                __ptext35 6006  
                                                __ptext27 5F46  
                                                __ptext19 6202  
                                                __ptext60 34DA  
                                                __ptext52 3DAE  
                                                __ptext44 5F8E  
                                                __ptext36 3312  
                                                __ptext28 59C6  
                                                __ptext61 4CC2  
                                                __ptext53 51D2  
                                                __ptext45 552A  
                                                __ptext37 2F14  
                                                __ptext29 573A  
                                                __ptext70 601C  
                                                __ptext62 5BB4  
                                                __ptext54 45A2  
                                                __ptext46 5776  
                                                __ptext38 4464  
                                        ?i2_TMR_SwapTimer 0007  
                                                __ptext71 2646  
                                                __ptext63 6208  
                                                __ptext55 1720  
                                                __ptext47 5AAC  
                                                __ptext39 3FC8  
                                                __ptext80 2A7A  
                                                __ptext72 4F6A  
                                                __ptext64 24BE  
                                                __ptext56 0096  
                                                __ptext48 59F4  
                                                __ptext81 5D80  
                                                __ptext73 58FC  
                                                __ptext65 5D38  
                                                __ptext57 517E  
                                                __ptext49 4BF2  
                                                __ptext90 5314  
                                                __ptext82 6072  
                                                __ptext74 5C56  
                                                __ptext66 5890  
                                                __ptext58 5F12  
                                                __ptext91 617C  
                                                __ptext83 5FA6  
                                                __ptext75 5AD8  
                                                __ptext67 5C30  
                                                __ptext59 2924  
                                                __ptext92 3CF6  
                                                __ptext84 5A50  
                                                __ptext76 4276  
                                                __ptext68 3022  
                                                __ptext93 57EA  
                                                __ptext85 61CA  
                                                __ptext77 5A22  
                                                __ptext69 605E  
                                                __ptext94 147C  
                                                __ptext86 61D2  
                                                __ptext78 5E44  
                                                __ptext95 1F84  
                                                __ptext87 6032  
                                                __ptext79 5B04  
                                                __ptext96 620E  
                                                __ptext88 5022  
                                                __ptext97 46CC  
                                                __ptext89 3AAE  
                                                __ptext98 2BBA  
                                                __ptext99 431E  
                                 ExecuteRxTimingSetup@ptr 0067  
                                  ??_RADIO_SetFSKSyncWord 006C  
                            ??_IOCBF4_SetInterruptHandler 0062  
                                   ??_UpdateReceiveDelays 0066  
                                   __end_of_LORAWAN_Reset 28D8  
                                            ??_sendPacket 00E0  
                                  __end_of_StartReTxTimer 35B6  
                                 ??_UpdateCurrentDataRate 0060  
                                 ??_UpdateChannelIdStatus 0061  
                                __size_of_UpdateDataRange 0086  
                                  _SetReceptionNotOkState 4CC2  
                                            _SSP2CON1bits 000ED9  
                                       ??_TMR1_StartTimer 0060  
                                      ??i2_TMR1_ReadTimer 0003  
                               __size_of_RADIO_WritePower 00C6  
                                 __end_of_HALDIO5PinValue 6226  
                                              _IOCBF4_ISR 5CEE  
                                       ?_UpdateDLSettings 0060  
                                  ConfigureRadio@dataRate 0071  
                                       ?_ValidateRxOffset 0001  
                              __size_of_ValidateFrequency 005C  
                        __size_of_PrepareJoinRequestFrame 00B0  
                                           CheckFlags@hdr 0060  
                                  ??_RADIO_WriteFrequency 0071  
                                   __size_of_UpdateCfList 011E  
                                     ?_DIO5_ISR_Lora_Init 0001  
                           __size_of_RADIO_SetOutputPower 0008  
                                           __size_of_main 00BA  
                                           __size_of_rand 004E  
                                       _RADIO_ReceiveStop 5FBE  
                                      ??_UpdateDLSettings 0061  
                                    _LORAWAN_PlatformInit 5DC4  
                                         _FskSyncWordBuff 7FFC  
                                      ??_ValidateRxOffset 0060  
                               __end_ofi2_TMR1_WriteTimer 5FFC  
               IncludeMacCommandsResponse@bIncludeInFopts 0063  
                                    ??_ComputeSessionKeys 00A2  
                                           _timerOverflow 0044  
                                    __CFG_WDTCWS$WDTCWS_7 000000  
                                            _SwTimerStart 4B88  
                              __size_of_SwTimersInterrupt 00A4  
                                      ?_RADIO_ReceiveStop 0001  
                                      __CFG_BORV$VBOR_190 000000  
                              ??_RADIO_SetSpreadingFactor 0060  
                                   RADIO_TxDone@timeOnAir 00D4  
                          ValidateChannelMask@channelMask 0060  
                             __size_of_DIO0_ISR_Lora_Init 0006  
                              __size_of_EncryptFRMPayload 00C8  
                                         GenerateSubkey@i 00C7  
                                         GenerateSubkey@l 00B7  
                                 PrepareSessionKeys@index 0070  
                                __end_of_TMR_GetDeltaTime 4248  
                                      SwTimerStop@timerId 0060  
                                                _swTimers 0300  
                                        ??_TMR1_ReadTimer 0062  
        LORAWAN_SetNetworkSessionKey@networkSessionKeyNew 006A  
                                    RADIO_RxDone@irqFlags 00F9  
                             __end_of_ValidateChannelMask 5A7E  
                                           UpdateCfList@i 00A6  
                      __end_of_INTERRUPT_InterruptManager 008E  
                              _INTERRUPT_InterruptManager 0008  
                                     ??_RADIO_ReceiveStop 006C  
                             PrepareSessionKeys@networkId 006E  
                                       _RADIO_ReleaseData 621A  
                                                main@flag 0175  
                                       ??_TMR1_WriteTimer 0062  
                                      __end_of_sendPacket 5D38  
                                              _RADIO_DIO0 4BF2  
                                              _RADIO_DIO1 5776  
                                              _RADIO_DIO2 552A  
                                              _RADIO_DIO3 5F8E  
                                              _RADIO_DIO4 5F76  
                                              _RADIO_DIO5 5F5E  
                                            _SSP2STATbits 000ED8  
                                    ??_DIO5_ISR_Lora_Init 0062  
                    __end_of_INT1_DefaultInterruptHandler 6272  
                   __size_of_INT1_DefaultInterruptHandler 0002  
                            _INT1_DefaultInterruptHandler 6270  
                       __size_of_RADIO_WriteConfiguration 03C8  
                                  __end_of_rxWindowOffset 7F7D  
                             PIN_MANAGER_Initialize@state 0062  
                     __size_of_IOCBF4_SetInterruptHandler 000A  
                              __size_of_DutyCycleCallback 01BC  
                                 EncryptFRMPayload@buffer 00A0  
                                      ?_RADIO_ReleaseData 0001  
                               ?_RADIO_WriteConfiguration 009C  
                                      __end_of_modulation 7F75  
                                              _RADIO_Init 2326  
                         ExecuteRxParamSetupReq@frequency 009E  
                                __size_of_UpdateFrequency 0026  
                                ?_ValidateChannelMaskCntl 0001  
                                           __roundCounter 0047  
                                              _INTCONbits 000FF2  
                                 ConfigureRadioTx@txPower 0077  
                                __end_of_HALSPICSDeassert 6248  
                                __size_of_UpdateDutyCycle 001C  
                                          ?_UpdateTxPower 0001  
                                                memcpy@d1 0060  
                                                memcpy@s1 0062  
                                          _EncKeySchedule 2CDC  
                      __size_of_SetCallbackSoftwareTimers 0092  
                                 __size_of_RxJoinResponse 0006  
                                         ??_SwTimerCreate 0060  
                                     ExecuteDutyCycle@ptr 0060  
                                            _UpdateCfList 2924  
                                     ??_RADIO_ReleaseData 0060  
                                  ??_INTERRUPT_Initialize 0060  
                                                memset@p1 0060  
                                         ??_TMR1_CallBack 0028  
                                    __size_of_SwTimerStop 0012  
                                        _RADIO_ReadRandom 48D0  
                                       _RADIO_TxDone$2504 00D8  
                                      _EXT_INT_Initialize 50D2  
                                         ?_StartReTxTimer 0001  
                                   _TMR_OverrideRemaining 4948  
                                                intlevel2 0000  
                          RADIO_ReceiveStart@rxWindowSize 00A6  
                               __end_of_RADIO_ReceiveStop 5FD6  
                                         _SwTimersExecute 4752  
                     SwTimerSetCallback@callbackParameter 0062  
                                             FillSubKey@i 0067  
                           RADIO_WriteFrequency@frequency 006D  
                                        ___lwmod@dividend 009E  
                                   ?_LORAWAN_PlatformInit 0001  
                                        ___lldiv@dividend 0060  
                                __end_of_ExecuteDevStatus 6186  
                                 ?_PIN_MANAGER_Initialize 0001  
                                      _DefaultChannels433 7FA8  
                                      _DefaultChannels868 7FD2  
                                       __CFG_CLKOUTEN$OFF 000000  
                                     ?_EXT_INT_Initialize 0001  
                                            ___abdiv@sign 0062  
                                UpdateDutyCycle@channelId 0062  
                                  GenerateSubkey@const_Rb 00A7  
                                             _PPSLOCKbits 000DEF  
                         __size_of_ExecuteRxParamSetupReq 00FC  
                               UpdateJoinInProgress@state 0060  
                                       ??_ValidateTxPower 0060  
                                     _LORAWAN_TxDone$5058 00C7  
                                     _LORAWAN_TxDone$1988 00BA  
                                     _LORAWAN_TxDone$1989 00BE  
                      __end_of_LORAWAN_LinkCheckConfigure 3228  
                               __end_of_RADIO_ReleaseData 6220  
                              _LORAWAN_LinkCheckConfigure 3128  
                                __size_of_EnableChannels1 0050  
                                      __end_of_txPower868 7FA8  
                                   _HALResetPinMakeOutput 624C  
                                ??_HALResetPinOutputValue 0060  
                                  __size_of_INT1_CallBack 001C  
                               RADIO_WriteConfiguration@i 00A0  
                               ExecuteRxTimingSetup@delay 0069  
                                        AESEncodeLoRa@key 008E  
                               __size_of_SetJoinFailState 002A  
                        LORAWAN_LinkCheckConfigure@period 009C  
                                        ??_ConfigureRadio 0071  
                                      _SwTimerSetCallback 5B5C  
             __end_of_UpdateRetransmissionAckTimeoutState 51D2  
            __size_of_UpdateRetransmissionAckTimeoutState 0054  
                    ?_UpdateRetransmissionAckTimeoutState 0001  
                   ??_UpdateRetransmissionAckTimeoutState 0090  
                     _UpdateRetransmissionAckTimeoutState 517E  
                                       RADIO_ReadRandom@i 0070  
                            SearchAvailableChannel@result 00AC  
                                   RADIO_WritePower@paDac 0065  
                                  __size_of_INT2_CallBack 001E  
                             __size_of_DIO4_ISR_Lora_Init 0002  
                                __end_of_SwTimerIsRunning 605E  
                                       ??_CheckMcastFlags 0062  
                                __end_of_ExecuteLinkCheck 5B22  
                                   RADIO_WritePower@power 0066  
                                ?_CreateAllSoftwareTimers 0001  
                        RADIO_WriteMode@currentModulation 0067  
                                    ??_EXT_INT_Initialize 0062  
                            RADIO_SetFSKSyncWord@syncWord 006A  
                                  __size_of_INT3_CallBack 001E  
                                            _rxWindowSize 7F85  
                                  __end_of_EncKeySchedule 2DA6  
                           ?_INT1_DefaultInterruptHandler 0001  
                                   __end_of_DIO1_ISR_Lora 6260  
                                     ?_SwTimerSetCallback 0060  
                                __end_of_SwTimerReadValue 5964  
                                        ___lldiv@quotient 0068  
                                             ?_HALSPISend 0001  
                                __end_of_ExecuteDutyCycle 5362  
                                         ___lwmod@divisor 00A0  
                  __end_of_UpdateReceiveWindow2Parameters 6032  
                 __size_of_UpdateReceiveWindow2Parameters 0016  
                          _UpdateReceiveWindow2Parameters 601C  
                                 UpdateTxPower@txPowerNew 0060  
                                         ___lwmod@counter 00A2  
                         _LORAWAN_LinkCheckConfigure$1034 00A2  
                        __end_of_INT1_SetInterruptHandler 617C  
                            FindSmallestDataRate@dataRate 0063  
                           LORAWAN_Join@activationTypeNew 00E5  
                                   __size_of_TMR_ISR_lora 0046  
                              ??_LORAWAN_SetDeviceAddress 0064  
                                   __end_of_DIO2_ISR_Lora 6258  
                                    _SystemBlockingWaitMs 5B88  
                                   FindSmallestDataRate@i 0062  
                      ComputeSessionKeys@joinAcceptBuffer 00A0  
                                 __size_of_EnableChannels 0016  
                            __end_of_UpdateJoinInProgress 5F46  
                            __end_of_ExecuteRxTimingSetup 5D5C  
                                 __size_of_HALSPICSAssert 0004  
                                 __end_of_FskSyncWordBuff 7FFF  
                __end_of_RADIO_WriteFSKFrequencyDeviation 4F0C  
               __size_of_RADIO_WriteFSKFrequencyDeviation 005E  
                      ??_RADIO_WriteFSKFrequencyDeviation 0071  
                       ?_RADIO_WriteFSKFrequencyDeviation 006D  
                        _RADIO_WriteFSKFrequencyDeviation 4EAE  
                __end_of_LORAWAN_SetApplicationSessionKey 59EC  
               __size_of_LORAWAN_SetApplicationSessionKey 0026  
                      ??_LORAWAN_SetApplicationSessionKey 006C  
                       ?_LORAWAN_SetApplicationSessionKey 006A  
                        _LORAWAN_SetApplicationSessionKey 59C6  
                                        ExtractMic@buffer 006A  
                                 ??_RADIO_FSKPayloadReady 00F9  
                                UpdateDataRange@channelId 0062  
                                             ?_IOCBF4_ISR 0001  
                                _RADIO_UnhandledInterrupt 5DE4  
                                        ?_HALDIO5PinValue 0001  
                          __end_of_PIN_MANAGER_Initialize 375C  
                                       ?_LORAWAN_Mainloop 0001  
                             __end_of_RADIO_RegisterWrite 5E80  
                                 __size_of_ExecuteLinkAdr 011C  
                            RADIO_WriteFSKBitRate@bitRate 006D  
                                      i2_TMR_GetDeltaTime 3840  
                                         RADIO_SetCRC@crc 0060  
                                         _PIN_MANAGER_IOC 61FA  
                                     RADIO_WritePower@ocp 0064  
                                      ??_LORAWAN_Mainloop 00FD  
                              __size_ofi2_TMR1_WriteTimer 000E  
                                    ??_SwTimerSetCallback 0063  
                                   __end_of_DIO5_ISR_Lora 625C  
                                       ??_UpdateDataRange 0061  
                                 ?_UpdateMinMaxChDataRate 0001  
                                         _TMR1_Initialize 55B8  
                        RADIO_WriteConfiguration@regValue 00A5  
                                 i2TMR1_ReadTimer@readVal 0005  
                                      _RadioConfiguration 017F  
                                           ExtractMic@mic 0070  
                                       _LORAWAN_RxTimeout 1720  
                             __end_of_RADIO_SetModulation 61F2  
                           __size_of_HALResetPinMakeInput 0004  
                             __size_of_RADIO_RxFSKTimeout 0032  
                                        ??_LORAWAN_RxDone 00E0  
                                     ?i2_TMR_GetDeltaTime 0007  
