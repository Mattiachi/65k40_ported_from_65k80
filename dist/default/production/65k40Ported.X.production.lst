

Microchip Technology PIC18 PRO Macro Assembler V1.41 build -162212810 
                                                                                               Fri May 05 13:53:51 2023

Microchip Technology Omniscient Code Generator v1.41 (PRO mode) build 201701250102
     1                           	processor	18LF65K40
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    18                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    19                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1,group=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	text72,global,reloc=2,class=CODE,delta=1
    96                           	psect	text73,global,reloc=2,class=CODE,delta=1
    97                           	psect	text74,global,reloc=2,class=CODE,delta=1
    98                           	psect	text75,global,reloc=2,class=CODE,delta=1
    99                           	psect	text76,global,reloc=2,class=CODE,delta=1
   100                           	psect	text77,global,reloc=2,class=CODE,delta=1
   101                           	psect	text78,global,reloc=2,class=CODE,delta=1
   102                           	psect	text79,global,reloc=2,class=CODE,delta=1
   103                           	psect	text80,global,reloc=2,class=CODE,delta=1
   104                           	psect	text81,global,reloc=2,class=CODE,delta=1
   105                           	psect	text82,global,reloc=2,class=CODE,delta=1
   106                           	psect	text83,global,reloc=2,class=CODE,delta=1
   107                           	psect	text84,global,reloc=2,class=CODE,delta=1
   108                           	psect	text85,global,reloc=2,class=CODE,delta=1
   109                           	psect	text86,global,reloc=2,class=CODE,delta=1
   110                           	psect	text87,global,reloc=2,class=CODE,delta=1
   111                           	psect	text88,global,reloc=2,class=CODE,delta=1
   112                           	psect	text89,global,reloc=2,class=CODE,delta=1
   113                           	psect	text90,global,reloc=2,class=CODE,delta=1
   114                           	psect	text91,global,reloc=2,class=CODE,delta=1
   115                           	psect	text92,global,reloc=2,class=CODE,delta=1
   116                           	psect	text93,global,reloc=2,class=CODE,delta=1
   117                           	psect	text94,global,reloc=2,class=CODE,delta=1
   118                           	psect	text95,global,reloc=2,class=CODE,delta=1
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	text119,global,reloc=2,class=CODE,delta=1
   143                           	psect	text120,global,reloc=2,class=CODE,delta=1
   144                           	psect	text121,global,reloc=2,class=CODE,delta=1
   145                           	psect	text122,global,reloc=2,class=CODE,delta=1
   146                           	psect	text123,global,reloc=2,class=CODE,delta=1
   147                           	psect	text124,global,reloc=2,class=CODE,delta=1
   148                           	psect	text125,global,reloc=2,class=CODE,delta=1
   149                           	psect	text126,global,reloc=2,class=CODE,delta=1
   150                           	psect	text127,global,reloc=2,class=CODE,delta=1
   151                           	psect	text128,global,reloc=2,class=CODE,delta=1
   152                           	psect	text129,global,reloc=2,class=CODE,delta=1
   153                           	psect	text130,global,reloc=2,class=CODE,delta=1
   154                           	psect	text131,global,reloc=2,class=CODE,delta=1
   155                           	psect	text132,global,reloc=2,class=CODE,delta=1
   156                           	psect	text133,global,reloc=2,class=CODE,delta=1
   157                           	psect	text134,global,reloc=2,class=CODE,delta=1
   158                           	psect	text135,global,reloc=2,class=CODE,delta=1
   159                           	psect	text136,global,reloc=2,class=CODE,delta=1
   160                           	psect	text137,global,reloc=2,class=CODE,delta=1
   161                           	psect	text138,global,reloc=2,class=CODE,delta=1
   162                           	psect	text139,global,reloc=2,class=CODE,delta=1
   163                           	psect	text140,global,reloc=2,class=CODE,delta=1
   164                           	psect	text141,global,reloc=2,class=CODE,delta=1
   165                           	psect	text142,global,reloc=2,class=CODE,delta=1,group=1
   166                           	psect	text143,global,reloc=2,class=CODE,delta=1,group=1
   167                           	psect	text144,global,reloc=2,class=CODE,delta=1
   168                           	psect	text145,global,reloc=2,class=CODE,delta=1
   169                           	psect	text146,global,reloc=2,class=CODE,delta=1
   170                           	psect	text147,global,reloc=2,class=CODE,delta=1
   171                           	psect	text148,global,reloc=2,class=CODE,delta=1
   172                           	psect	text149,global,reloc=2,class=CODE,delta=1
   173                           	psect	text150,global,reloc=2,class=CODE,delta=1
   174                           	psect	text151,global,reloc=2,class=CODE,delta=1
   175                           	psect	text152,global,reloc=2,class=CODE,delta=1
   176                           	psect	text153,global,reloc=2,class=CODE,delta=1,group=1
   177                           	psect	text154,global,reloc=2,class=CODE,delta=1
   178                           	psect	text155,global,reloc=2,class=CODE,delta=1
   179                           	psect	text156,global,reloc=2,class=CODE,delta=1
   180                           	psect	text157,global,reloc=2,class=CODE,delta=1
   181                           	psect	text158,global,reloc=2,class=CODE,delta=1
   182                           	psect	text159,global,reloc=2,class=CODE,delta=1
   183                           	psect	text160,global,reloc=2,class=CODE,delta=1
   184                           	psect	text161,global,reloc=2,class=CODE,delta=1
   185                           	psect	text162,global,reloc=2,class=CODE,delta=1
   186                           	psect	text163,global,reloc=2,class=CODE,delta=1
   187                           	psect	text164,global,reloc=2,class=CODE,delta=1
   188                           	psect	text165,global,reloc=2,class=CODE,delta=1
   189                           	psect	text166,global,reloc=2,class=CODE,delta=1,group=1
   190                           	psect	text167,global,reloc=2,class=CODE,delta=1
   191                           	psect	text168,global,reloc=2,class=CODE,delta=1
   192                           	psect	text169,global,reloc=2,class=CODE,delta=1
   193                           	psect	text170,global,reloc=2,class=CODE,delta=1
   194                           	psect	text171,global,reloc=2,class=CODE,delta=1
   195                           	psect	text172,global,reloc=2,class=CODE,delta=1
   196                           	psect	text173,global,reloc=2,class=CODE,delta=1
   197                           	psect	text174,global,reloc=2,class=CODE,delta=1
   198                           	psect	text175,global,reloc=2,class=CODE,delta=1
   199                           	psect	text176,global,reloc=2,class=CODE,delta=1
   200                           	psect	text177,global,reloc=2,class=CODE,delta=1
   201                           	psect	text178,global,reloc=2,class=CODE,delta=1,group=1
   202                           	psect	text179,global,reloc=2,class=CODE,delta=1,group=1
   203                           	psect	text180,global,reloc=2,class=CODE,delta=1
   204                           	psect	text181,global,reloc=2,class=CODE,delta=1
   205                           	psect	text182,global,reloc=2,class=CODE,delta=1
   206                           	psect	text183,global,reloc=2,class=CODE,delta=1
   207                           	psect	text184,global,reloc=2,class=CODE,delta=1
   208                           	psect	text185,global,reloc=2,class=CODE,delta=1
   209                           	psect	text186,global,reloc=2,class=CODE,delta=1
   210                           	psect	text187,global,reloc=2,class=CODE,delta=1
   211                           	psect	text188,global,reloc=2,class=CODE,delta=1
   212                           	psect	text189,global,reloc=2,class=CODE,delta=1
   213                           	psect	text190,global,reloc=2,class=CODE,delta=1
   214                           	psect	text191,global,reloc=2,class=CODE,delta=1,group=1
   215                           	psect	text192,global,reloc=2,class=CODE,delta=1,group=1
   216                           	psect	text193,global,reloc=2,class=CODE,delta=1
   217                           	psect	text194,global,reloc=2,class=CODE,delta=1
   218                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   219                           	psect	text196,global,reloc=2,class=CODE,delta=1
   220                           	psect	text197,global,reloc=2,class=CODE,delta=1
   221                           	psect	text198,global,reloc=2,class=CODE,delta=1
   222                           	psect	text199,global,reloc=2,class=CODE,delta=1
   223                           	psect	text200,global,reloc=2,class=CODE,delta=1
   224                           	psect	text201,global,reloc=2,class=CODE,delta=1
   225                           	psect	text202,global,reloc=2,class=CODE,delta=1
   226                           	psect	text203,global,reloc=2,class=CODE,delta=1
   227                           	psect	text204,global,reloc=2,class=CODE,delta=1
   228                           	psect	text205,global,reloc=2,class=CODE,delta=1
   229                           	psect	text206,global,reloc=2,class=CODE,delta=1
   230                           	psect	text207,global,reloc=2,class=CODE,delta=1
   231                           	psect	text208,global,reloc=2,class=CODE,delta=1
   232                           	psect	text209,global,reloc=2,class=CODE,delta=1
   233                           	psect	text210,global,reloc=2,class=CODE,delta=1
   234                           	psect	text211,global,reloc=2,class=CODE,delta=1
   235                           	psect	text212,global,reloc=2,class=CODE,delta=1
   236                           	psect	text213,global,reloc=2,class=CODE,delta=1
   237                           	psect	text214,global,reloc=2,class=CODE,delta=1
   238                           	psect	text215,global,reloc=2,class=CODE,delta=1
   239                           	psect	text216,global,reloc=2,class=CODE,delta=1
   240                           	psect	text217,global,reloc=2,class=CODE,delta=1
   241                           	psect	text218,global,reloc=2,class=CODE,delta=1
   242                           	psect	text219,global,reloc=2,class=CODE,delta=1
   243                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   244                           	psect	text220,global,reloc=2,class=CODE,delta=1
   245                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   246                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   247                           	psect	pa_nodes0,global,class=CODE,delta=1
   248  0000                     
   249                           ; Version 1.41
   250                           ; Generated 25/01/2017 GMT
   251                           ; 
   252                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   253                           ; All rights reserved.
   254                           ; 
   255                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   256                           ; 
   257                           ; Redistribution and use in source and binary forms, with or without modification, are
   258                           ; permitted provided that the following conditions are met:
   259                           ; 
   260                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   261                           ;        conditions and the following disclaimer.
   262                           ; 
   263                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   264                           ;        of conditions and the following disclaimer in the documentation and/or other
   265                           ;        materials provided with the distribution.
   266                           ; 
   267                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   268                           ;        software without specific prior written permission.
   269                           ; 
   270                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   271                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   272                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   273                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   274                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   275                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   276                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   277                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   278                           ; 
   279                           ; 
   280                           ; Code-generator required, PIC18LF65K40 Definitions
   281                           ; 
   282                           ; SFR Addresses
   283  0000                     
   284 ;; Function _INT0_DefaultInterruptHandler is unused but had its address taken
   285  0000                     
   286 ;; Function _DIO0_ISR_Lora is unused but had its address taken
   287  0000                     tosu	equ	0xFFF
   288                           tosh	equ	0xFFE
   289                           tosl	equ	0xFFD
   290                           pclath	equ	0xFFA
   291                           tblptru	equ	0xFF8
   292                           tblptrh	equ	0xFF7
   293                           tblptrl	equ	0xFF6
   294                           tablat	equ	0xFF5
   295                           prodh	equ	0xFF4
   296                           prodl	equ	0xFF3
   297                           intcon	equ	0xFF2
   298                           indf0	equ	0xFEF
   299                           plusw0	equ	0xFEB
   300                           fsr0h	equ	0xFEA
   301                           fsr0l	equ	0xFE9
   302                           wreg	equ	0xFE8
   303                           postinc1	equ	0xFE6
   304                           postdec1	equ	0xFE5
   305                           plusw1	equ	0xFE3
   306                           fsr1h	equ	0xFE2
   307                           fsr1l	equ	0xFE1
   308                           indf2	equ	0xFDF
   309                           postinc2	equ	0xFDE
   310                           postdec2	equ	0xFDD
   311                           plusw2	equ	0xFDB
   312                           fsr2h	equ	0xFDA
   313                           fsr2l	equ	0xFD9
   314                           status	equ	0xFD8
   315                           
   316 ;;UnconfirmedTransmissionCallback@param	offset=-1 (param)
   317 ;;RADIO_WatchdogTimeout@param	offset=-1 (param)
   318 ;;RADIO_RxFSKTimeout@irqFlags	offset	0
   319 ;;RADIO_RxFSKTimeout@param	offset=-1 (param)
   320 ;;LORAWAN_ReceiveWindow1Callback@freq	offset	0
   321 ;;LORAWAN_ReceiveWindow1Callback@param	offset=-1 (param)
   322 ;;_LORAWAN_LinkCheckCallback$2330	offset	0
   323 ;;LORAWAN_LinkCheckCallback@iCtr	offset	4
   324 ;;LORAWAN_LinkCheckCallback@param	offset=-1 (param)
   325 ;;_DutyCycleCallback$3416	offset	0
   326 ;;DutyCycleCallback@minim	offset	4
   327 ;;DutyCycleCallback@i	offset	8
   328 ;;DutyCycleCallback@found	offset	9
   329 ;;DutyCycleCallback@param	offset=-1 (param)
   330 ;;AutomaticReplyCallback@param	offset=-1 (param)
   331 ;;AckRetransmissionCallback@maximumPacketSize	offset	0
   332 ;;AckRetransmissionCallback@param	offset=-1 (param)
   333 ;;_param	offset=-1 (param)
   334 ;;_UpdateJoinSuccessState$2346	offset	0
   335 ;;UpdateJoinSuccessState@param	offset=-1 (param)
   336                           
   337                           	psect	idataCOMRAM
   338  0061BC                     __pidataCOMRAM:
   339                           	opt stack 0
   340                           
   341                           ;initializer for _randx
   342  0061BC  0001               	dw	1
   343  0061BE  0000               	dw	0
   344                           
   345                           ;initializer for _ticksToScheduledInterrupt
   346  0061C0  FFFF               	dw	65535
   347  0061C2  FFFF               	dw	65535
   348                           tosu	equ	0xFFF
   349                           tosh	equ	0xFFE
   350                           tosl	equ	0xFFD
   351                           pclath	equ	0xFFA
   352                           tblptru	equ	0xFF8
   353                           tblptrh	equ	0xFF7
   354                           tblptrl	equ	0xFF6
   355                           tablat	equ	0xFF5
   356                           prodh	equ	0xFF4
   357                           prodl	equ	0xFF3
   358                           intcon	equ	0xFF2
   359                           indf0	equ	0xFEF
   360                           plusw0	equ	0xFEB
   361                           fsr0h	equ	0xFEA
   362                           fsr0l	equ	0xFE9
   363                           wreg	equ	0xFE8
   364                           postinc1	equ	0xFE6
   365                           postdec1	equ	0xFE5
   366                           plusw1	equ	0xFE3
   367                           fsr1h	equ	0xFE2
   368                           fsr1l	equ	0xFE1
   369                           indf2	equ	0xFDF
   370                           postinc2	equ	0xFDE
   371                           postdec2	equ	0xFDD
   372                           plusw2	equ	0xFDB
   373                           fsr2h	equ	0xFDA
   374                           fsr2l	equ	0xFD9
   375                           status	equ	0xFD8
   376                           
   377                           	psect	idataBANK1
   378  005996                     __pidataBANK1:
   379                           	opt stack 0
   380                           
   381                           ;initializer for GenerateSubkey@F17267
   382  005996  00                 	db	0
   383  005997  00                 	db	0
   384  005998  00                 	db	0
   385  005999  00                 	db	0
   386  00599A  00                 	db	0
   387  00599B  00                 	db	0
   388  00599C  00                 	db	0
   389  00599D  00                 	db	0
   390  00599E  00                 	db	0
   391  00599F  00                 	db	0
   392  0059A0  00                 	db	0
   393  0059A1  00                 	db	0
   394  0059A2  00                 	db	0
   395  0059A3  00                 	db	0
   396  0059A4  00                 	db	0
   397  0059A5  87                 	db	135
   398                           
   399                           ;initializer for _appSKey
   400  0059A6  42                 	db	66
   401  0059A7  04                 	db	4
   402  0059A8  91                 	db	145
   403  0059A9  09                 	db	9
   404  0059AA  13                 	db	19
   405  0059AB  54                 	db	84
   406  0059AC  4A                 	db	74
   407  0059AD  49                 	db	73
   408  0059AE  CE                 	db	206
   409  0059AF  A4                 	db	164
   410  0059B0  01                 	db	1
   411  0059B1  F6                 	db	246
   412  0059B2  39                 	db	57
   413  0059B3  27                 	db	39
   414  0059B4  A4                 	db	164
   415  0059B5  93                 	db	147
   416                           
   417                           ;initializer for _nwkSKey
   418  0059B6  3C                 	db	60
   419  0059B7  A0                 	db	160
   420  0059B8  D6                 	db	214
   421  0059B9  06                 	db	6
   422  0059BA  60                 	db	96
   423  0059BB  6E                 	db	110
   424  0059BC  12                 	db	18
   425  0059BD  D5                 	db	213
   426  0059BE  DA                 	db	218
   427  0059BF  A8                 	db	168
   428  0059C0  15                 	db	21
   429  0059C1  79                 	db	121
   430  0059C2  E3                 	db	227
   431  0059C3  70                 	db	112
   432  0059C4  99                 	db	153
   433  0059C5  68                 	db	104
   434                           tosu	equ	0xFFF
   435                           tosh	equ	0xFFE
   436                           tosl	equ	0xFFD
   437                           pclath	equ	0xFFA
   438                           tblptru	equ	0xFF8
   439                           tblptrh	equ	0xFF7
   440                           tblptrl	equ	0xFF6
   441                           tablat	equ	0xFF5
   442                           prodh	equ	0xFF4
   443                           prodl	equ	0xFF3
   444                           intcon	equ	0xFF2
   445                           indf0	equ	0xFEF
   446                           plusw0	equ	0xFEB
   447                           fsr0h	equ	0xFEA
   448                           fsr0l	equ	0xFE9
   449                           wreg	equ	0xFE8
   450                           postinc1	equ	0xFE6
   451                           postdec1	equ	0xFE5
   452                           plusw1	equ	0xFE3
   453                           fsr1h	equ	0xFE2
   454                           fsr1l	equ	0xFE1
   455                           indf2	equ	0xFDF
   456                           postinc2	equ	0xFDE
   457                           postdec2	equ	0xFDD
   458                           plusw2	equ	0xFDB
   459                           fsr2h	equ	0xFDA
   460                           fsr2l	equ	0xFD9
   461                           status	equ	0xFD8
   462                           
   463                           	psect	mediumconst
   464  007E6C                     __pmediumconst:
   465                           	opt stack 0
   466  007E6C  00                 	db	0
   467  007E6D                     _STable:
   468                           	opt stack 0
   469  007E6D  63                 	db	99
   470  007E6E  7C                 	db	124
   471  007E6F  77                 	db	119
   472  007E70  7B                 	db	123
   473  007E71  F2                 	db	242
   474  007E72  6B                 	db	107
   475  007E73  6F                 	db	111
   476  007E74  C5                 	db	197
   477  007E75  30                 	db	48
   478  007E76  01                 	db	1
   479  007E77  67                 	db	103
   480  007E78  2B                 	db	43
   481  007E79  FE                 	db	254
   482  007E7A  D7                 	db	215
   483  007E7B  AB                 	db	171
   484  007E7C  76                 	db	118
   485  007E7D  CA                 	db	202
   486  007E7E  82                 	db	130
   487  007E7F  C9                 	db	201
   488  007E80  7D                 	db	125
   489  007E81  FA                 	db	250
   490  007E82  59                 	db	89
   491  007E83  47                 	db	71
   492  007E84  F0                 	db	240
   493  007E85  AD                 	db	173
   494  007E86  D4                 	db	212
   495  007E87  A2                 	db	162
   496  007E88  AF                 	db	175
   497  007E89  9C                 	db	156
   498  007E8A  A4                 	db	164
   499  007E8B  72                 	db	114
   500  007E8C  C0                 	db	192
   501  007E8D  B7                 	db	183
   502  007E8E  FD                 	db	253
   503  007E8F  93                 	db	147
   504  007E90  26                 	db	38
   505  007E91  36                 	db	54
   506  007E92  3F                 	db	63
   507  007E93  F7                 	db	247
   508  007E94  CC                 	db	204
   509  007E95  34                 	db	52
   510  007E96  A5                 	db	165
   511  007E97  E5                 	db	229
   512  007E98  F1                 	db	241
   513  007E99  71                 	db	113
   514  007E9A  D8                 	db	216
   515  007E9B  31                 	db	49
   516  007E9C  15                 	db	21
   517  007E9D  04                 	db	4
   518  007E9E  C7                 	db	199
   519  007E9F  23                 	db	35
   520  007EA0  C3                 	db	195
   521  007EA1  18                 	db	24
   522  007EA2  96                 	db	150
   523  007EA3  05                 	db	5
   524  007EA4  9A                 	db	154
   525  007EA5  07                 	db	7
   526  007EA6  12                 	db	18
   527  007EA7  80                 	db	128
   528  007EA8  E2                 	db	226
   529  007EA9  EB                 	db	235
   530  007EAA  27                 	db	39
   531  007EAB  B2                 	db	178
   532  007EAC  75                 	db	117
   533  007EAD  09                 	db	9
   534  007EAE  83                 	db	131
   535  007EAF  2C                 	db	44
   536  007EB0  1A                 	db	26
   537  007EB1  1B                 	db	27
   538  007EB2  6E                 	db	110
   539  007EB3  5A                 	db	90
   540  007EB4  A0                 	db	160
   541  007EB5  52                 	db	82
   542  007EB6  3B                 	db	59
   543  007EB7  D6                 	db	214
   544  007EB8  B3                 	db	179
   545  007EB9  29                 	db	41
   546  007EBA  E3                 	db	227
   547  007EBB  2F                 	db	47
   548  007EBC  84                 	db	132
   549  007EBD  53                 	db	83
   550  007EBE  D1                 	db	209
   551  007EBF  00                 	db	0
   552  007EC0  ED                 	db	237
   553  007EC1  20                 	db	32
   554  007EC2  FC                 	db	252
   555  007EC3  B1                 	db	177
   556  007EC4  5B                 	db	91
   557  007EC5  6A                 	db	106
   558  007EC6  CB                 	db	203
   559  007EC7  BE                 	db	190
   560  007EC8  39                 	db	57
   561  007EC9  4A                 	db	74
   562  007ECA  4C                 	db	76
   563  007ECB  58                 	db	88
   564  007ECC  CF                 	db	207
   565  007ECD  D0                 	db	208
   566  007ECE  EF                 	db	239
   567  007ECF  AA                 	db	170
   568  007ED0  FB                 	db	251
   569  007ED1  43                 	db	67
   570  007ED2  4D                 	db	77
   571  007ED3  33                 	db	51
   572  007ED4  85                 	db	133
   573  007ED5  45                 	db	69
   574  007ED6  F9                 	db	249
   575  007ED7  02                 	db	2
   576  007ED8  7F                 	db	127
   577  007ED9  50                 	db	80
   578  007EDA  3C                 	db	60
   579  007EDB  9F                 	db	159
   580  007EDC  A8                 	db	168
   581  007EDD  51                 	db	81
   582  007EDE  A3                 	db	163
   583  007EDF  40                 	db	64
   584  007EE0  8F                 	db	143
   585  007EE1  92                 	db	146
   586  007EE2  9D                 	db	157
   587  007EE3  38                 	db	56
   588  007EE4  F5                 	db	245
   589  007EE5  BC                 	db	188
   590  007EE6  B6                 	db	182
   591  007EE7  DA                 	db	218
   592  007EE8  21                 	db	33
   593  007EE9  10                 	db	16
   594  007EEA  FF                 	db	255
   595  007EEB  F3                 	db	243
   596  007EEC  D2                 	db	210
   597  007EED  CD                 	db	205
   598  007EEE  0C                 	db	12
   599  007EEF  13                 	db	19
   600  007EF0  EC                 	db	236
   601  007EF1  5F                 	db	95
   602  007EF2  97                 	db	151
   603  007EF3  44                 	db	68
   604  007EF4  17                 	db	23
   605  007EF5  C4                 	db	196
   606  007EF6  A7                 	db	167
   607  007EF7  7E                 	db	126
   608  007EF8  3D                 	db	61
   609  007EF9  64                 	db	100
   610  007EFA  5D                 	db	93
   611  007EFB  19                 	db	25
   612  007EFC  73                 	db	115
   613  007EFD  60                 	db	96
   614  007EFE  81                 	db	129
   615  007EFF  4F                 	db	79
   616  007F00  DC                 	db	220
   617  007F01  22                 	db	34
   618  007F02  2A                 	db	42
   619  007F03  90                 	db	144
   620  007F04  88                 	db	136
   621  007F05  46                 	db	70
   622  007F06  EE                 	db	238
   623  007F07  B8                 	db	184
   624  007F08  14                 	db	20
   625  007F09  DE                 	db	222
   626  007F0A  5E                 	db	94
   627  007F0B  0B                 	db	11
   628  007F0C  DB                 	db	219
   629  007F0D  E0                 	db	224
   630  007F0E  32                 	db	50
   631  007F0F  3A                 	db	58
   632  007F10  0A                 	db	10
   633  007F11  49                 	db	73
   634  007F12  06                 	db	6
   635  007F13  24                 	db	36
   636  007F14  5C                 	db	92
   637  007F15  C2                 	db	194
   638  007F16  D3                 	db	211
   639  007F17  AC                 	db	172
   640  007F18  62                 	db	98
   641  007F19  91                 	db	145
   642  007F1A  95                 	db	149
   643  007F1B  E4                 	db	228
   644  007F1C  79                 	db	121
   645  007F1D  E7                 	db	231
   646  007F1E  C8                 	db	200
   647  007F1F  37                 	db	55
   648  007F20  6D                 	db	109
   649  007F21  8D                 	db	141
   650  007F22  D5                 	db	213
   651  007F23  4E                 	db	78
   652  007F24  A9                 	db	169
   653  007F25  6C                 	db	108
   654  007F26  56                 	db	86
   655  007F27  F4                 	db	244
   656  007F28  EA                 	db	234
   657  007F29  65                 	db	101
   658  007F2A  7A                 	db	122
   659  007F2B  AE                 	db	174
   660  007F2C  08                 	db	8
   661  007F2D  BA                 	db	186
   662  007F2E  78                 	db	120
   663  007F2F  25                 	db	37
   664  007F30  2E                 	db	46
   665  007F31  1C                 	db	28
   666  007F32  A6                 	db	166
   667  007F33  B4                 	db	180
   668  007F34  C6                 	db	198
   669  007F35  E8                 	db	232
   670  007F36  DD                 	db	221
   671  007F37  74                 	db	116
   672  007F38  1F                 	db	31
   673  007F39  4B                 	db	75
   674  007F3A  BD                 	db	189
   675  007F3B  8B                 	db	139
   676  007F3C  8A                 	db	138
   677  007F3D  70                 	db	112
   678  007F3E  3E                 	db	62
   679  007F3F  B5                 	db	181
   680  007F40  66                 	db	102
   681  007F41  48                 	db	72
   682  007F42  03                 	db	3
   683  007F43  F6                 	db	246
   684  007F44  0E                 	db	14
   685  007F45  61                 	db	97
   686  007F46  35                 	db	53
   687  007F47  57                 	db	87
   688  007F48  B9                 	db	185
   689  007F49  86                 	db	134
   690  007F4A  C1                 	db	193
   691  007F4B  1D                 	db	29
   692  007F4C  9E                 	db	158
   693  007F4D  E1                 	db	225
   694  007F4E  F8                 	db	248
   695  007F4F  98                 	db	152
   696  007F50  11                 	db	17
   697  007F51  69                 	db	105
   698  007F52  D9                 	db	217
   699  007F53  8E                 	db	142
   700  007F54  94                 	db	148
   701  007F55  9B                 	db	155
   702  007F56  1E                 	db	30
   703  007F57  87                 	db	135
   704  007F58  E9                 	db	233
   705  007F59  CE                 	db	206
   706  007F5A  55                 	db	85
   707  007F5B  28                 	db	40
   708  007F5C  DF                 	db	223
   709  007F5D  8C                 	db	140
   710  007F5E  A1                 	db	161
   711  007F5F  89                 	db	137
   712  007F60  0D                 	db	13
   713  007F61  BF                 	db	191
   714  007F62  E6                 	db	230
   715  007F63  42                 	db	66
   716  007F64  68                 	db	104
   717  007F65  41                 	db	65
   718  007F66  99                 	db	153
   719  007F67  2D                 	db	45
   720  007F68  0F                 	db	15
   721  007F69  B0                 	db	176
   722  007F6A  54                 	db	84
   723  007F6B  BB                 	db	187
   724  007F6C  16                 	db	22
   725  007F6D                     __end_of_STable:
   726                           	opt stack 0
   727  007F6D                     _modulation:
   728                           	opt stack 0
   729  007F6D  01                 	db	1
   730  007F6E  01                 	db	1
   731  007F6F  01                 	db	1
   732  007F70  01                 	db	1
   733  007F71  01                 	db	1
   734  007F72  01                 	db	1
   735  007F73  01                 	db	1
   736  007F74  00                 	db	0
   737  007F75                     __end_of_modulation:
   738                           	opt stack 0
   739  007F75                     _rxWindowOffset:
   740                           	opt stack 0
   741  007F75  DF                 	db	223
   742  007F76  CE                 	db	206
   743  007F77  C6                 	db	198
   744  007F78  C2                 	db	194
   745  007F79  BE                 	db	190
   746  007F7A  BC                 	db	188
   747  007F7B  F1                 	db	241
   748  007F7C  FE                 	db	254
   749  007F7D                     __end_of_rxWindowOffset:
   750                           	opt stack 0
   751  007F7D                     _maxPayloadSize:
   752                           	opt stack 0
   753  007F7D  33                 	db	51
   754  007F7E  33                 	db	51
   755  007F7F  33                 	db	51
   756  007F80  73                 	db	115
   757  007F81  F2                 	db	242
   758  007F82  F2                 	db	242
   759  007F83  F2                 	db	242
   760  007F84  38                 	db	56
   761  007F85                     __end_of_maxPayloadSize:
   762                           	opt stack 0
   763  007F85                     _rxWindowSize:
   764                           	opt stack 0
   765  007F85  08                 	db	8
   766  007F86  0A                 	db	10
   767  007F87  0E                 	db	14
   768  007F88  1A                 	db	26
   769  007F89  31                 	db	49
   770  007F8A  58                 	db	88
   771  007F8B  3C                 	db	60
   772  007F8C  08                 	db	8
   773  007F8D                     __end_of_rxWindowSize:
   774                           	opt stack 0
   775  007F8D                     _bandwidth:
   776                           	opt stack 0
   777  007F8D  07                 	db	7
   778  007F8E  07                 	db	7
   779  007F8F  07                 	db	7
   780  007F90  07                 	db	7
   781  007F91  07                 	db	7
   782  007F92  07                 	db	7
   783  007F93  08                 	db	8
   784  007F94                     __end_of_bandwidth:
   785                           	opt stack 0
   786  007F94                     _spreadingFactor:
   787                           	opt stack 0
   788  007F94  0C                 	db	12
   789  007F95  0B                 	db	11
   790  007F96  0A                 	db	10
   791  007F97  09                 	db	9
   792  007F98  08                 	db	8
   793  007F99  07                 	db	7
   794  007F9A  07                 	db	7
   795  007F9B                     __end_of_spreadingFactor:
   796                           	opt stack 0
   797  007F9B                     _macEndDevCmdReplyLen:
   798                           	opt stack 0
   799  007F9B  01                 	db	1
   800  007F9C  02                 	db	2
   801  007F9D  01                 	db	1
   802  007F9E  02                 	db	2
   803  007F9F  03                 	db	3
   804  007FA0  02                 	db	2
   805  007FA1  01                 	db	1
   806  007FA2                     __end_of_macEndDevCmdReplyLen:
   807                           	opt stack 0
   808  007FA2                     _txPower868:
   809                           	opt stack 0
   810  007FA2  14                 	db	20
   811  007FA3  0E                 	db	14
   812  007FA4  0B                 	db	11
   813  007FA5  08                 	db	8
   814  007FA6  05                 	db	5
   815  007FA7  02                 	db	2
   816  007FA8                     __end_of_txPower868:
   817                           	opt stack 0
   818  007FA8                     _DefaultChannels433:
   819                           	opt stack 0
   820  007FA8  B9D8               	dw	47576
   821  007FAA  19D1               	dw	6609
   822  007FAC  01                 	db	1
   823  007FAD  50                 	db	80
   824  007FAE  012E               	dw	302
   825  007FB0  0000               	dw	0
   826  007FB2  0000               	dw	0
   827  007FB4  01                 	db	1
   828  007FB5  FF                 	db	255
   829  007FB6  C718               	dw	50968
   830  007FB8  19D4               	dw	6612
   831  007FBA  01                 	db	1
   832  007FBB  50                 	db	80
   833  007FBC  012E               	dw	302
   834  007FBE  0000               	dw	0
   835  007FC0  0000               	dw	0
   836  007FC2  01                 	db	1
   837  007FC3  FF                 	db	255
   838  007FC4  D458               	dw	54360
   839  007FC6  19D7               	dw	6615
   840  007FC8  01                 	db	1
   841  007FC9  50                 	db	80
   842  007FCA  012E               	dw	302
   843  007FCC  0000               	dw	0
   844  007FCE  0000               	dw	0
   845  007FD0  01                 	db	1
   846  007FD1  FF                 	db	255
   847  007FD2                     __end_of_DefaultChannels433:
   848                           	opt stack 0
   849  007FD2                     _DefaultChannels868:
   850                           	opt stack 0
   851  007FD2  27A0               	dw	10144
   852  007FD4  33BE               	dw	13246
   853  007FD6  01                 	db	1
   854  007FD7  50                 	db	80
   855  007FD8  012E               	dw	302
   856  007FDA  0000               	dw	0
   857  007FDC  0000               	dw	0
   858  007FDE  01                 	db	1
   859  007FDF  FF                 	db	255
   860  007FE0  34E0               	dw	13536
   861  007FE2  33C1               	dw	13249
   862  007FE4  01                 	db	1
   863  007FE5  50                 	db	80
   864  007FE6  012E               	dw	302
   865  007FE8  0000               	dw	0
   866  007FEA  0000               	dw	0
   867  007FEC  01                 	db	1
   868  007FED  FF                 	db	255
   869  007FEE  4220               	dw	16928
   870  007FF0  33C4               	dw	13252
   871  007FF2  01                 	db	1
   872  007FF3  50                 	db	80
   873  007FF4  012E               	dw	302
   874  007FF6  0000               	dw	0
   875  007FF8  0000               	dw	0
   876  007FFA  01                 	db	1
   877  007FFB  FF                 	db	255
   878  007FFC                     __end_of_DefaultChannels868:
   879                           	opt stack 0
   880  007FFC                     _FskSyncWordBuff:
   881                           	opt stack 0
   882  007FFC  C1                 	db	193
   883  007FFD  94                 	db	148
   884  007FFE  C1                 	db	193
   885  007FFF                     __end_of_FskSyncWordBuff:
   886                           	opt stack 0
   887  007FFF  00                 	db	0	; dummy byte at the end
   888  0000                     tosu	equ	0xFFF
   889                           tosh	equ	0xFFE
   890                           tosl	equ	0xFFD
   891                           pclath	equ	0xFFA
   892                           tblptru	equ	0xFF8
   893                           tblptrh	equ	0xFF7
   894                           tblptrl	equ	0xFF6
   895                           tablat	equ	0xFF5
   896                           prodh	equ	0xFF4
   897                           prodl	equ	0xFF3
   898                           intcon	equ	0xFF2
   899                           indf0	equ	0xFEF
   900                           plusw0	equ	0xFEB
   901                           fsr0h	equ	0xFEA
   902                           fsr0l	equ	0xFE9
   903                           wreg	equ	0xFE8
   904                           postinc1	equ	0xFE6
   905                           postdec1	equ	0xFE5
   906                           plusw1	equ	0xFE3
   907                           fsr1h	equ	0xFE2
   908                           fsr1l	equ	0xFE1
   909                           indf2	equ	0xFDF
   910                           postinc2	equ	0xFDE
   911                           postdec2	equ	0xFDD
   912                           plusw2	equ	0xFDB
   913                           fsr2h	equ	0xFDA
   914                           fsr2l	equ	0xFD9
   915                           status	equ	0xFD8
   916                           
   917                           	psect	nvCOMRAM
   918  00005C                     __pnvCOMRAM:
   919                           	opt stack 0
   920  00005C                     _timer1ReloadVal:
   921                           	opt stack 0
   922  00005C                     	ds	2
   923  00005E                     _INT1_InterruptHandler:
   924                           	opt stack 0
   925  00005E                     	ds	2
   926                           tosu	equ	0xFFF
   927                           tosh	equ	0xFFE
   928                           tosl	equ	0xFFD
   929                           pclath	equ	0xFFA
   930                           tblptru	equ	0xFF8
   931                           tblptrh	equ	0xFF7
   932                           tblptrl	equ	0xFF6
   933                           tablat	equ	0xFF5
   934                           prodh	equ	0xFF4
   935                           prodl	equ	0xFF3
   936                           intcon	equ	0xFF2
   937                           indf0	equ	0xFEF
   938                           plusw0	equ	0xFEB
   939                           fsr0h	equ	0xFEA
   940                           fsr0l	equ	0xFE9
   941                           wreg	equ	0xFE8
   942                           postinc1	equ	0xFE6
   943                           postdec1	equ	0xFE5
   944                           plusw1	equ	0xFE3
   945                           fsr1h	equ	0xFE2
   946                           fsr1l	equ	0xFE1
   947                           indf2	equ	0xFDF
   948                           postinc2	equ	0xFDE
   949                           postdec2	equ	0xFDD
   950                           plusw2	equ	0xFDB
   951                           fsr2h	equ	0xFDA
   952                           fsr2l	equ	0xFD9
   953                           status	equ	0xFD8
   954                           
   955                           	psect	nvBANK1
   956  0001F7                     __pnvBANK1:
   957                           	opt stack 0
   958  0001F7                     _IOCBF4_InterruptHandler:
   959                           	opt stack 0
   960  0001F7                     	ds	2
   961  0001F9                     _TMR1_InterruptHandler:
   962                           	opt stack 0
   963  0001F9                     	ds	2
   964  0001FB                     _INT3_InterruptHandler:
   965                           	opt stack 0
   966  0001FB                     	ds	2
   967  0001FD                     _INT2_InterruptHandler:
   968                           	opt stack 0
   969  0001FD                     	ds	2
   970  0000                     _INT2PPSbits	set	3570
   971  0000                     _INT0PPSbits	set	3568
   972  0000                     _INT3PPSbits	set	3571
   973  0000                     _INT1PPSbits	set	3569
   974  0000                     _PPSLOCKbits	set	3567
   975  0000                     _PPSLOCK	set	3567
   976  0000                     _SSP2DATPPSbits	set	3613
   977  0000                     _RD6PPS	set	3696
   978  0000                     _RD5PPS	set	3695
   979  0000                     _IOCBPbits	set	3733
   980  0000                     _IOCBNbits	set	3732
   981  0000                     _IOCBFbits	set	3731
   982  0000                     _ODCOND	set	3749
   983  0000                     _ODCONC	set	3744
   984  0000                     _ODCONH	set	3775
   985  0000                     _ODCONB	set	3736
   986  0000                     _ODCONG	set	3770
   987  0000                     _ODCONA	set	3728
   988  0000                     _ODCONF	set	3762
   989  0000                     _ODCONE	set	3757
   990  0000                     _WPUH	set	3776
   991  0000                     _WPUC	set	3745
   992  0000                     _WPUA	set	3729
   993  0000                     _WPUG	set	3771
   994  0000                     _WPUB	set	3737
   995  0000                     _WPUE	set	3758
   996  0000                     _WPUF	set	3763
   997  0000                     _WPUD	set	3750
   998  0000                     _ANSELA	set	3730
   999  0000                     _ANSELF	set	3764
  1000  0000                     _ANSELG	set	3772
  1001  0000                     _ANSELE	set	3759
  1002  0000                     _ANSELD	set	3751
  1003  0000                     _ANSELB	set	3738
  1004  0000                     _SSP2STATbits	set	3800
  1005  0000                     _SSP2BUF	set	3797
  1006  0000                     _SSP2CON1bits	set	3801
  1007  0000                     _SSP2ADD	set	3798
  1008  0000                     _SSP2CON1	set	3801
  1009  0000                     _SSP2STAT	set	3800
  1010  0000                     _OSCTUNE	set	3656
  1011  0000                     _OSCFRQ	set	3657
  1012  0000                     _OSCEN	set	3655
  1013  0000                     _OSCCON3	set	3653
  1014  0000                     _OSCCON1	set	3651
  1015  0000                     _PIE5bits	set	3630
  1016  0000                     _PIR5bits	set	3640
  1017  0000                     _PIE0bits	set	3625
  1018  0000                     _PIR0bits	set	3635
  1019  0000                     _PORTBbits	set	3978
  1020  0000                     _LATCbits	set	3963
  1021  0000                     _TRISD	set	3972
  1022  0000                     _TRISC	set	3971
  1023  0000                     _TRISH	set	3976
  1024  0000                     _TRISB	set	3970
  1025  0000                     _TRISG	set	3975
  1026  0000                     _TRISA	set	3969
  1027  0000                     _TRISF	set	3974
  1028  0000                     _TRISE	set	3973
  1029  0000                     _LATH	set	3968
  1030  0000                     _LATC	set	3963
  1031  0000                     _LATG	set	3967
  1032  0000                     _LATB	set	3962
  1033  0000                     _LATF	set	3966
  1034  0000                     _LATA	set	3961
  1035  0000                     _LATD	set	3964
  1036  0000                     _LATE	set	3965
  1037  0000                     _T1CONbits	set	4047
  1038  0000                     _TMR1L	set	4045
  1039  0000                     _TMR1H	set	4046
  1040  0000                     _T1CLK	set	4050
  1041  0000                     _T1GATE	set	4049
  1042  0000                     _T1GCON	set	4048
  1043  0000                     _T1CON	set	4047
  1044  0000                     _INTCONbits	set	4082
  1045  0000                     _LATC1	set	31705
  1046  0000                     _LATC0	set	31704
  1047  0000                     _TRISC0	set	31768
  1048  0000                     _GIE	set	32663
  1049                           
  1050                           ; #config settings
  1051  0000                     tosu	equ	0xFFF
  1052                           tosh	equ	0xFFE
  1053                           tosl	equ	0xFFD
  1054                           pclath	equ	0xFFA
  1055                           tblptru	equ	0xFF8
  1056                           tblptrh	equ	0xFF7
  1057                           tblptrl	equ	0xFF6
  1058                           tablat	equ	0xFF5
  1059                           prodh	equ	0xFF4
  1060                           prodl	equ	0xFF3
  1061                           intcon	equ	0xFF2
  1062                           indf0	equ	0xFEF
  1063                           plusw0	equ	0xFEB
  1064                           fsr0h	equ	0xFEA
  1065                           fsr0l	equ	0xFE9
  1066                           wreg	equ	0xFE8
  1067                           postinc1	equ	0xFE6
  1068                           postdec1	equ	0xFE5
  1069                           plusw1	equ	0xFE3
  1070                           fsr1h	equ	0xFE2
  1071                           fsr1l	equ	0xFE1
  1072                           indf2	equ	0xFDF
  1073                           postinc2	equ	0xFDE
  1074                           postdec2	equ	0xFDD
  1075                           plusw2	equ	0xFDB
  1076                           fsr2h	equ	0xFDA
  1077                           fsr2l	equ	0xFD9
  1078                           status	equ	0xFD8
  1079                           
  1080                           	psect	cinit
  1081  0043C2                     __pcinit:
  1082                           	opt stack 0
  1083  0043C2                     start_initialization:
  1084                           	opt stack 0
  1085  0043C2                     __initialization:
  1086                           	opt stack 0
  1087                           
  1088                           ; Initialize objects allocated to BANK1 (48 bytes)
  1089                           ; load TBLPTR registers with __pidataBANK1
  1090  0043C2  0E96               	movlw	low __pidataBANK1
  1091  0043C4  6EF6               	movwf	tblptrl,c
  1092  0043C6  0E59               	movlw	high __pidataBANK1
  1093  0043C8  6EF7               	movwf	tblptrh,c
  1094  0043CA  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1095  0043CC  6EF8               	movwf	tblptru,c
  1096  0043CE  EE01  F0C7         	lfsr	0,__pdataBANK1
  1097  0043D2  EE20 F030          	lfsr	2,48
  1098  0043D6                     copy_data0:
  1099  0043D6  0009               	tblrd		*+
  1100  0043D8  CFF5 FFEE          	movff	tablat,postinc0
  1101  0043DC  50DD               	movf	postdec2,w,c
  1102  0043DE  50D9               	movf	fsr2l,w,c
  1103  0043E0  E1FA               	bnz	copy_data0
  1104                           
  1105                           ; Initialize objects allocated to COMRAM (8 bytes)
  1106                           ; load TBLPTR registers with __pidataCOMRAM
  1107  0043E2  0EBC               	movlw	low __pidataCOMRAM
  1108  0043E4  6EF6               	movwf	tblptrl,c
  1109  0043E6  0E61               	movlw	high __pidataCOMRAM
  1110  0043E8  6EF7               	movwf	tblptrh,c
  1111  0043EA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1112  0043EC  6EF8               	movwf	tblptru,c
  1113  0043EE  EE00  F054         	lfsr	0,__pdataCOMRAM
  1114  0043F2  EE20 F008          	lfsr	2,8
  1115  0043F6                     copy_data1:
  1116  0043F6  0009               	tblrd		*+
  1117  0043F8  CFF5 FFEE          	movff	tablat,postinc0
  1118  0043FC  50DD               	movf	postdec2,w,c
  1119  0043FE  50D9               	movf	fsr2l,w,c
  1120  004400  E1FA               	bnz	copy_data1
  1121                           
  1122                           ; Clear objects allocated to BIGRAM (542 bytes)
  1123  004402  EE04  F0E0         	lfsr	0,__pbssBIGRAM
  1124  004406  EE22 F01E          	lfsr	2,542
  1125  00440A                     clear_0:
  1126  00440A  6AEE               	clrf	postinc0,c
  1127  00440C  50DD               	movf	postdec2,w,c
  1128  00440E  50D9               	movf	fsr2l,w,c
  1129  004410  E1FC               	bnz	clear_0
  1130  004412  50DA               	movf	fsr2h,w,c
  1131  004414  E1FA               	bnz	clear_0
  1132                           
  1133                           ; Clear objects allocated to BANK4 (224 bytes)
  1134  004416  EE04  F000         	lfsr	0,__pbssBANK4
  1135  00441A  0EE0               	movlw	224
  1136  00441C                     clear_1:
  1137  00441C  6AEE               	clrf	postinc0,c
  1138  00441E  06E8               	decf	wreg,f,c
  1139  004420  E1FD               	bnz	clear_1
  1140                           
  1141                           ; Clear objects allocated to BANK3 (160 bytes)
  1142  004422  EE03  F000         	lfsr	0,__pbssBANK3
  1143  004426  0EA0               	movlw	160
  1144  004428                     clear_2:
  1145  004428  6AEE               	clrf	postinc0,c
  1146  00442A  06E8               	decf	wreg,f,c
  1147  00442C  E1FD               	bnz	clear_2
  1148                           
  1149                           ; Clear objects allocated to BANK2 (245 bytes)
  1150  00442E  EE02  F000         	lfsr	0,__pbssBANK2
  1151  004432  0EF5               	movlw	245
  1152  004434                     clear_3:
  1153  004434  6AEE               	clrf	postinc0,c
  1154  004436  06E8               	decf	wreg,f,c
  1155  004438  E1FD               	bnz	clear_3
  1156                           
  1157                           ; Clear objects allocated to BANK1 (78 bytes)
  1158  00443A  EE01  F079         	lfsr	0,__pbssBANK1
  1159  00443E  0E4E               	movlw	78
  1160  004440                     clear_4:
  1161  004440  6AEE               	clrf	postinc0,c
  1162  004442  06E8               	decf	wreg,f,c
  1163  004444  E1FD               	bnz	clear_4
  1164                           
  1165                           ; Clear objects allocated to BANK0 (3 bytes)
  1166  004446  0100               	movlb	0
  1167  004448  6BFF               	clrf	(__pbssBANK0+2)& (0+255),b
  1168  00444A  6BFE               	clrf	(__pbssBANK0+1)& (0+255),b
  1169  00444C  6BFD               	clrf	__pbssBANK0& (0+255),b
  1170                           
  1171                           ; Clear objects allocated to COMRAM (24 bytes)
  1172  00444E  EE00  F030         	lfsr	0,__pbssCOMRAM
  1173  004452  0E18               	movlw	24
  1174  004454                     clear_5:
  1175  004454  6AEE               	clrf	postinc0,c
  1176  004456  06E8               	decf	wreg,f,c
  1177  004458  E1FD               	bnz	clear_5
  1178  00445A                     end_of_initialization:
  1179                           	opt stack 0
  1180  00445A                     __end_of__initialization:
  1181                           	opt stack 0
  1182  00445A  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1183  00445C  6EF8               	movwf	tblptru,c
  1184  00445E  0100               	movlb	0
  1185  004460  EF1E  F01E         	goto	_main	;jump to C main() function
  1186                           tosu	equ	0xFFF
  1187                           tosh	equ	0xFFE
  1188                           tosl	equ	0xFFD
  1189                           pclath	equ	0xFFA
  1190                           tblptru	equ	0xFF8
  1191                           tblptrh	equ	0xFF7
  1192                           tblptrl	equ	0xFF6
  1193                           tablat	equ	0xFF5
  1194                           prodh	equ	0xFF4
  1195                           prodl	equ	0xFF3
  1196                           intcon	equ	0xFF2
  1197                           indf0	equ	0xFEF
  1198                           postinc0	equ	0xFEE
  1199                           plusw0	equ	0xFEB
  1200                           fsr0h	equ	0xFEA
  1201                           fsr0l	equ	0xFE9
  1202                           wreg	equ	0xFE8
  1203                           postinc1	equ	0xFE6
  1204                           postdec1	equ	0xFE5
  1205                           plusw1	equ	0xFE3
  1206                           fsr1h	equ	0xFE2
  1207                           fsr1l	equ	0xFE1
  1208                           indf2	equ	0xFDF
  1209                           postinc2	equ	0xFDE
  1210                           postdec2	equ	0xFDD
  1211                           plusw2	equ	0xFDB
  1212                           fsr2h	equ	0xFDA
  1213                           fsr2l	equ	0xFD9
  1214                           status	equ	0xFD8
  1215                           
  1216                           	psect	bssCOMRAM
  1217  000030                     __pbssCOMRAM:
  1218                           	opt stack 0
  1219  000030                     TMR_GetDeltaTime@retVal:
  1220                           	opt stack 0
  1221  000030                     	ds	4
  1222  000034                     _ticksAccounted:
  1223                           	opt stack 0
  1224  000034                     	ds	4
  1225  000038                     _ticksAdded:
  1226                           	opt stack 0
  1227  000038                     	ds	4
  1228  00003C                     TMR_SwapTimer@retVal:
  1229                           	opt stack 0
  1230  00003C                     	ds	2
  1231  00003E                     TMR_SwapTimer@oldVal:
  1232                           	opt stack 0
  1233  00003E                     	ds	2
  1234  000040                     TMR_GetDeltaTime@tmrVal:
  1235                           	opt stack 0
  1236  000040                     	ds	2
  1237  000042                     TMR1_ISR@CountCallBack:
  1238                           	opt stack 0
  1239  000042                     	ds	2
  1240  000044                     _timerOverflow:
  1241                           	opt stack 0
  1242  000044                     	ds	1
  1243  000045                     __rcon:
  1244                           	opt stack 0
  1245  000045                     	ds	1
  1246  000046                     __roundCounter:
  1247                           	opt stack 0
  1248  000046                     	ds	1
  1249  000047                     _dioStatus:
  1250                           	opt stack 0
  1251  000047                     	ds	1
  1252                           tosu	equ	0xFFF
  1253                           tosh	equ	0xFFE
  1254                           tosl	equ	0xFFD
  1255                           pclath	equ	0xFFA
  1256                           tblptru	equ	0xFF8
  1257                           tblptrh	equ	0xFF7
  1258                           tblptrl	equ	0xFF6
  1259                           tablat	equ	0xFF5
  1260                           prodh	equ	0xFF4
  1261                           prodl	equ	0xFF3
  1262                           intcon	equ	0xFF2
  1263                           indf0	equ	0xFEF
  1264                           postinc0	equ	0xFEE
  1265                           plusw0	equ	0xFEB
  1266                           fsr0h	equ	0xFEA
  1267                           fsr0l	equ	0xFE9
  1268                           wreg	equ	0xFE8
  1269                           postinc1	equ	0xFE6
  1270                           postdec1	equ	0xFE5
  1271                           plusw1	equ	0xFE3
  1272                           fsr1h	equ	0xFE2
  1273                           fsr1l	equ	0xFE1
  1274                           indf2	equ	0xFDF
  1275                           postinc2	equ	0xFDE
  1276                           postdec2	equ	0xFDD
  1277                           plusw2	equ	0xFDB
  1278                           fsr2h	equ	0xFDA
  1279                           fsr2l	equ	0xFD9
  1280                           status	equ	0xFD8
  1281                           
  1282                           	psect	dataCOMRAM
  1283  000054                     __pdataCOMRAM:
  1284                           	opt stack 0
  1285  000054                     _randx:
  1286                           	opt stack 0
  1287  000054                     	ds	4
  1288  000058                     _ticksToScheduledInterrupt:
  1289                           	opt stack 0
  1290  000058                     	ds	4
  1291                           tosu	equ	0xFFF
  1292                           tosh	equ	0xFFE
  1293                           tosl	equ	0xFFD
  1294                           pclath	equ	0xFFA
  1295                           tblptru	equ	0xFF8
  1296                           tblptrh	equ	0xFF7
  1297                           tblptrl	equ	0xFF6
  1298                           tablat	equ	0xFF5
  1299                           prodh	equ	0xFF4
  1300                           prodl	equ	0xFF3
  1301                           intcon	equ	0xFF2
  1302                           indf0	equ	0xFEF
  1303                           postinc0	equ	0xFEE
  1304                           plusw0	equ	0xFEB
  1305                           fsr0h	equ	0xFEA
  1306                           fsr0l	equ	0xFE9
  1307                           wreg	equ	0xFE8
  1308                           postinc1	equ	0xFE6
  1309                           postdec1	equ	0xFE5
  1310                           plusw1	equ	0xFE3
  1311                           fsr1h	equ	0xFE2
  1312                           fsr1l	equ	0xFE1
  1313                           indf2	equ	0xFDF
  1314                           postinc2	equ	0xFDE
  1315                           postdec2	equ	0xFDD
  1316                           plusw2	equ	0xFDB
  1317                           fsr2h	equ	0xFDA
  1318                           fsr2l	equ	0xFD9
  1319                           status	equ	0xFD8
  1320                           
  1321                           	psect	bssBANK0
  1322  0000FD                     __pbssBANK0:
  1323                           	opt stack 0
  1324  0000FD                     _reloadVal:
  1325                           	opt stack 0
  1326  0000FD                     	ds	2
  1327  0000FF                     _allocatedTimers:
  1328                           	opt stack 0
  1329  0000FF                     	ds	1
  1330                           tosu	equ	0xFFF
  1331                           tosh	equ	0xFFE
  1332                           tosl	equ	0xFFD
  1333                           pclath	equ	0xFFA
  1334                           tblptru	equ	0xFF8
  1335                           tblptrh	equ	0xFF7
  1336                           tblptrl	equ	0xFF6
  1337                           tablat	equ	0xFF5
  1338                           prodh	equ	0xFF4
  1339                           prodl	equ	0xFF3
  1340                           intcon	equ	0xFF2
  1341                           indf0	equ	0xFEF
  1342                           postinc0	equ	0xFEE
  1343                           plusw0	equ	0xFEB
  1344                           fsr0h	equ	0xFEA
  1345                           fsr0l	equ	0xFE9
  1346                           wreg	equ	0xFE8
  1347                           postinc1	equ	0xFE6
  1348                           postdec1	equ	0xFE5
  1349                           plusw1	equ	0xFE3
  1350                           fsr1h	equ	0xFE2
  1351                           fsr1l	equ	0xFE1
  1352                           indf2	equ	0xFDF
  1353                           postinc2	equ	0xFDE
  1354                           postdec2	equ	0xFDD
  1355                           plusw2	equ	0xFDB
  1356                           fsr2h	equ	0xFDA
  1357                           fsr2l	equ	0xFD9
  1358                           status	equ	0xFD8
  1359                           
  1360                           	psect	bssBANK1
  1361  000179                     __pbssBANK1:
  1362                           	opt stack 0
  1363  000179                     _rxPayload:
  1364                           	opt stack 0
  1365  000179                     	ds	4
  1366  00017D                     _localDioStatus:
  1367                           	opt stack 0
  1368  00017D                     	ds	1
  1369  00017E                     _JoinedServer:
  1370                           	opt stack 0
  1371  00017E                     	ds	1
  1372  00017F                     _RadioConfiguration:
  1373                           	opt stack 0
  1374  00017F                     	ds	54
  1375  0001B5                     _aesBuffer:
  1376                           	opt stack 0
  1377  0001B5                     	ds	16
  1378  0001C5                     _payload:
  1379                           	opt stack 0
  1380  0001C5                     	ds	2
  1381                           tosu	equ	0xFFF
  1382                           tosh	equ	0xFFE
  1383                           tosl	equ	0xFFD
  1384                           pclath	equ	0xFFA
  1385                           tblptru	equ	0xFF8
  1386                           tblptrh	equ	0xFF7
  1387                           tblptrl	equ	0xFF6
  1388                           tablat	equ	0xFF5
  1389                           prodh	equ	0xFF4
  1390                           prodl	equ	0xFF3
  1391                           intcon	equ	0xFF2
  1392                           indf0	equ	0xFEF
  1393                           postinc0	equ	0xFEE
  1394                           plusw0	equ	0xFEB
  1395                           fsr0h	equ	0xFEA
  1396                           fsr0l	equ	0xFE9
  1397                           wreg	equ	0xFE8
  1398                           postinc1	equ	0xFE6
  1399                           postdec1	equ	0xFE5
  1400                           plusw1	equ	0xFE3
  1401                           fsr1h	equ	0xFE2
  1402                           fsr1l	equ	0xFE1
  1403                           indf2	equ	0xFDF
  1404                           postinc2	equ	0xFDE
  1405                           postdec2	equ	0xFDD
  1406                           plusw2	equ	0xFDB
  1407                           fsr2h	equ	0xFDA
  1408                           fsr2l	equ	0xFD9
  1409                           status	equ	0xFD8
  1410                           
  1411                           	psect	dataBANK1
  1412  0001C7                     __pdataBANK1:
  1413                           	opt stack 0
  1414  0001C7                     GenerateSubkey@F17267:
  1415                           	opt stack 0
  1416  0001C7                     	ds	16
  1417  0001D7                     _appSKey:
  1418                           	opt stack 0
  1419  0001D7                     	ds	16
  1420  0001E7                     _nwkSKey:
  1421                           	opt stack 0
  1422  0001E7                     	ds	16
  1423                           tosu	equ	0xFFF
  1424                           tosh	equ	0xFFE
  1425                           tosl	equ	0xFFD
  1426                           pclath	equ	0xFFA
  1427                           tblptru	equ	0xFF8
  1428                           tblptrh	equ	0xFF7
  1429                           tblptrl	equ	0xFF6
  1430                           tablat	equ	0xFF5
  1431                           prodh	equ	0xFF4
  1432                           prodl	equ	0xFF3
  1433                           intcon	equ	0xFF2
  1434                           indf0	equ	0xFEF
  1435                           postinc0	equ	0xFEE
  1436                           plusw0	equ	0xFEB
  1437                           fsr0h	equ	0xFEA
  1438                           fsr0l	equ	0xFE9
  1439                           wreg	equ	0xFE8
  1440                           postinc1	equ	0xFE6
  1441                           postdec1	equ	0xFE5
  1442                           plusw1	equ	0xFE3
  1443                           fsr1h	equ	0xFE2
  1444                           fsr1l	equ	0xFE1
  1445                           indf2	equ	0xFDF
  1446                           postinc2	equ	0xFDE
  1447                           postdec2	equ	0xFDD
  1448                           plusw2	equ	0xFDB
  1449                           fsr2h	equ	0xFDA
  1450                           fsr2l	equ	0xFD9
  1451                           status	equ	0xFD8
  1452                           
  1453                           	psect	bssBANK2
  1454  000200                     __pbssBANK2:
  1455                           	opt stack 0
  1456  000200                     _loRa:
  1457                           	opt stack 0
  1458  000200                     	ds	245
  1459                           tosu	equ	0xFFF
  1460                           tosh	equ	0xFFE
  1461                           tosl	equ	0xFFD
  1462                           pclath	equ	0xFFA
  1463                           tblptru	equ	0xFF8
  1464                           tblptrh	equ	0xFF7
  1465                           tblptrl	equ	0xFF6
  1466                           tablat	equ	0xFF5
  1467                           prodh	equ	0xFF4
  1468                           prodl	equ	0xFF3
  1469                           intcon	equ	0xFF2
  1470                           indf0	equ	0xFEF
  1471                           postinc0	equ	0xFEE
  1472                           plusw0	equ	0xFEB
  1473                           fsr0h	equ	0xFEA
  1474                           fsr0l	equ	0xFE9
  1475                           wreg	equ	0xFE8
  1476                           postinc1	equ	0xFE6
  1477                           postdec1	equ	0xFE5
  1478                           plusw1	equ	0xFE3
  1479                           fsr1h	equ	0xFE2
  1480                           fsr1l	equ	0xFE1
  1481                           indf2	equ	0xFDF
  1482                           postinc2	equ	0xFDE
  1483                           postdec2	equ	0xFDD
  1484                           plusw2	equ	0xFDB
  1485                           fsr2h	equ	0xFDA
  1486                           fsr2l	equ	0xFD9
  1487                           status	equ	0xFD8
  1488                           
  1489                           	psect	bssBANK3
  1490  000300                     __pbssBANK3:
  1491                           	opt stack 0
  1492  000300                     _swTimers:
  1493                           	opt stack 0
  1494  000300                     	ds	160
  1495                           tosu	equ	0xFFF
  1496                           tosh	equ	0xFFE
  1497                           tosl	equ	0xFFD
  1498                           pclath	equ	0xFFA
  1499                           tblptru	equ	0xFF8
  1500                           tblptrh	equ	0xFF7
  1501                           tblptrl	equ	0xFF6
  1502                           tablat	equ	0xFF5
  1503                           prodh	equ	0xFF4
  1504                           prodl	equ	0xFF3
  1505                           intcon	equ	0xFF2
  1506                           indf0	equ	0xFEF
  1507                           postinc0	equ	0xFEE
  1508                           plusw0	equ	0xFEB
  1509                           fsr0h	equ	0xFEA
  1510                           fsr0l	equ	0xFE9
  1511                           wreg	equ	0xFE8
  1512                           postinc1	equ	0xFE6
  1513                           postdec1	equ	0xFE5
  1514                           plusw1	equ	0xFE3
  1515                           fsr1h	equ	0xFE2
  1516                           fsr1l	equ	0xFE1
  1517                           indf2	equ	0xFDF
  1518                           postinc2	equ	0xFDE
  1519                           postdec2	equ	0xFDD
  1520                           plusw2	equ	0xFDB
  1521                           fsr2h	equ	0xFDA
  1522                           fsr2l	equ	0xFD9
  1523                           status	equ	0xFD8
  1524                           
  1525                           	psect	bssBANK4
  1526  000400                     __pbssBANK4:
  1527                           	opt stack 0
  1528  000400                     _Channels:
  1529                           	opt stack 0
  1530  000400                     	ds	224
  1531                           tosu	equ	0xFFF
  1532                           tosh	equ	0xFFE
  1533                           tosl	equ	0xFFD
  1534                           pclath	equ	0xFFA
  1535                           tblptru	equ	0xFF8
  1536                           tblptrh	equ	0xFF7
  1537                           tblptrl	equ	0xFF6
  1538                           tablat	equ	0xFF5
  1539                           prodh	equ	0xFF4
  1540                           prodl	equ	0xFF3
  1541                           intcon	equ	0xFF2
  1542                           indf0	equ	0xFEF
  1543                           postinc0	equ	0xFEE
  1544                           plusw0	equ	0xFEB
  1545                           fsr0h	equ	0xFEA
  1546                           fsr0l	equ	0xFE9
  1547                           wreg	equ	0xFE8
  1548                           postinc1	equ	0xFE6
  1549                           postdec1	equ	0xFE5
  1550                           plusw1	equ	0xFE3
  1551                           fsr1h	equ	0xFE2
  1552                           fsr1l	equ	0xFE1
  1553                           indf2	equ	0xFDF
  1554                           postinc2	equ	0xFDE
  1555                           postdec2	equ	0xFDD
  1556                           plusw2	equ	0xFDB
  1557                           fsr2h	equ	0xFDA
  1558                           fsr2l	equ	0xFD9
  1559                           status	equ	0xFD8
  1560                           
  1561                           	psect	bssBIGRAM
  1562  0004E0                     __pbssBIGRAM:
  1563                           	opt stack 0
  1564  0004E0                     _radioBuffer:
  1565                           	opt stack 0
  1566  0004E0                     	ds	271
  1567  0005EF                     _macBuffer:
  1568                           	opt stack 0
  1569  0005EF                     	ds	271
  1570                           tosu	equ	0xFFF
  1571                           tosh	equ	0xFFE
  1572                           tosl	equ	0xFFD
  1573                           pclath	equ	0xFFA
  1574                           tblptru	equ	0xFF8
  1575                           tblptrh	equ	0xFF7
  1576                           tblptrl	equ	0xFF6
  1577                           tablat	equ	0xFF5
  1578                           prodh	equ	0xFF4
  1579                           prodl	equ	0xFF3
  1580                           intcon	equ	0xFF2
  1581                           indf0	equ	0xFEF
  1582                           postinc0	equ	0xFEE
  1583                           plusw0	equ	0xFEB
  1584                           fsr0h	equ	0xFEA
  1585                           fsr0l	equ	0xFE9
  1586                           wreg	equ	0xFE8
  1587                           postinc1	equ	0xFE6
  1588                           postdec1	equ	0xFE5
  1589                           plusw1	equ	0xFE3
  1590                           fsr1h	equ	0xFE2
  1591                           fsr1l	equ	0xFE1
  1592                           indf2	equ	0xFDF
  1593                           postinc2	equ	0xFDE
  1594                           postdec2	equ	0xFDD
  1595                           plusw2	equ	0xFDB
  1596                           fsr2h	equ	0xFDA
  1597                           fsr2l	equ	0xFD9
  1598                           status	equ	0xFD8
  1599                           
  1600                           	psect	cstackBANK1
  1601  000100                     __pcstackBANK1:
  1602                           	opt stack 0
  1603  000100                     AESCmac@k2:
  1604                           	opt stack 0
  1605                           
  1606                           ; 16 bytes @ 0x0
  1607  000100                     	ds	16
  1608  000110                     AESCmac@k1:
  1609                           	opt stack 0
  1610                           
  1611                           ; 16 bytes @ 0x10
  1612  000110                     	ds	16
  1613  000120                     AESCmac@mLast:
  1614                           	opt stack 0
  1615                           
  1616                           ; 16 bytes @ 0x20
  1617  000120                     	ds	16
  1618  000130                     AESCmac@padded:
  1619                           	opt stack 0
  1620                           
  1621                           ; 16 bytes @ 0x30
  1622  000130                     	ds	16
  1623  000140                     AESCmac@y:
  1624                           	opt stack 0
  1625                           
  1626                           ; 16 bytes @ 0x40
  1627  000140                     	ds	16
  1628  000150                     AESCmac@x:
  1629                           	opt stack 0
  1630                           
  1631                           ; 16 bytes @ 0x50
  1632  000150                     	ds	16
  1633  000160                     AESCmac@ptr:
  1634                           	opt stack 0
  1635                           
  1636                           ; 2 bytes @ 0x60
  1637  000160                     	ds	2
  1638  000162                     AESCmac@flag:
  1639                           	opt stack 0
  1640                           
  1641                           ; 1 bytes @ 0x62
  1642  000162                     	ds	1
  1643  000163                     AESCmac@n:
  1644                           	opt stack 0
  1645                           
  1646                           ; 1 bytes @ 0x63
  1647  000163                     	ds	1
  1648  000164                     AESCmac@j:
  1649                           	opt stack 0
  1650                           
  1651                           ; 1 bytes @ 0x64
  1652  000164                     	ds	1
  1653  000165                     AESCmac@i:
  1654                           	opt stack 0
  1655                           
  1656                           ; 1 bytes @ 0x65
  1657  000165                     	ds	1
  1658  000166                     ?_ComputeMic:
  1659                           	opt stack 0
  1660  000166                     AssemblePacket@port:
  1661                           	opt stack 0
  1662  000166                     ComputeMic@key:
  1663                           	opt stack 0
  1664                           
  1665                           ; 2 bytes @ 0x66
  1666  000166                     	ds	1
  1667  000167                     AssemblePacket@buffer:
  1668                           	opt stack 0
  1669                           
  1670                           ; 2 bytes @ 0x67
  1671  000167                     	ds	1
  1672  000168                     ComputeMic@buffer:
  1673                           	opt stack 0
  1674                           
  1675                           ; 2 bytes @ 0x68
  1676  000168                     	ds	1
  1677  000169                     AssemblePacket@bufferLength:
  1678                           	opt stack 0
  1679                           
  1680                           ; 2 bytes @ 0x69
  1681  000169                     	ds	1
  1682  00016A                     ComputeMic@bufferLength:
  1683                           	opt stack 0
  1684                           
  1685                           ; 1 bytes @ 0x6A
  1686  00016A                     	ds	1
  1687  00016B                     LORAWAN_Send@port:
  1688                           	opt stack 0
  1689                           
  1690                           ; 1 bytes @ 0x6B
  1691  00016B                     	ds	1
  1692  00016C                     LORAWAN_Send@buffer:
  1693                           	opt stack 0
  1694                           
  1695                           ; 2 bytes @ 0x6C
  1696  00016C                     	ds	2
  1697  00016E                     LORAWAN_Send@bufferLength:
  1698                           	opt stack 0
  1699                           
  1700                           ; 1 bytes @ 0x6E
  1701  00016E                     	ds	1
  1702  00016F                     LORAWAN_RxDone@buffer:
  1703                           	opt stack 0
  1704                           
  1705                           ; 2 bytes @ 0x6F
  1706  00016F                     	ds	2
  1707  000171                     LORAWAN_RxDone@bufferLength:
  1708                           	opt stack 0
  1709                           
  1710                           ; 1 bytes @ 0x71
  1711  000171                     	ds	1
  1712  000172                     RADIO_DIO0@dioMapping:
  1713                           	opt stack 0
  1714                           
  1715                           ; 1 bytes @ 0x72
  1716  000172                     	ds	1
  1717  000173                     RADIO_DIO0@opMode:
  1718                           	opt stack 0
  1719                           
  1720                           ; 1 bytes @ 0x73
  1721  000173                     	ds	1
  1722  000174                     ??_main:
  1723                           
  1724                           ; 1 bytes @ 0x74
  1725  000174                     	ds	1
  1726  000175                     main@flag:
  1727                           	opt stack 0
  1728                           
  1729                           ; 2 bytes @ 0x75
  1730  000175                     	ds	2
  1731  000177                     main@x:
  1732                           	opt stack 0
  1733                           
  1734                           ; 2 bytes @ 0x77
  1735  000177                     	ds	2
  1736                           tosu	equ	0xFFF
  1737                           tosh	equ	0xFFE
  1738                           tosl	equ	0xFFD
  1739                           pclath	equ	0xFFA
  1740                           tblptru	equ	0xFF8
  1741                           tblptrh	equ	0xFF7
  1742                           tblptrl	equ	0xFF6
  1743                           tablat	equ	0xFF5
  1744                           prodh	equ	0xFF4
  1745                           prodl	equ	0xFF3
  1746                           intcon	equ	0xFF2
  1747                           indf0	equ	0xFEF
  1748                           postinc0	equ	0xFEE
  1749                           plusw0	equ	0xFEB
  1750                           fsr0h	equ	0xFEA
  1751                           fsr0l	equ	0xFE9
  1752                           wreg	equ	0xFE8
  1753                           postinc1	equ	0xFE6
  1754                           postdec1	equ	0xFE5
  1755                           plusw1	equ	0xFE3
  1756                           fsr1h	equ	0xFE2
  1757                           fsr1l	equ	0xFE1
  1758                           indf2	equ	0xFDF
  1759                           postinc2	equ	0xFDE
  1760                           postdec2	equ	0xFDD
  1761                           plusw2	equ	0xFDB
  1762                           fsr2h	equ	0xFDA
  1763                           fsr2l	equ	0xFD9
  1764                           status	equ	0xFD8
  1765                           
  1766                           	psect	cstackBANK0
  1767  000060                     __pcstackBANK0:
  1768                           	opt stack 0
  1769  000060                     ??_flash:
  1770  000060                     ??_FindSmallestDataRate:
  1771  000060                     ??_CountfOptsLength:
  1772  000060                     ??_UpdateMinMaxChDataRate:
  1773  000060                     ?_ExecuteLinkCheck:
  1774                           	opt stack 0
  1775  000060                     ?_ExecuteDutyCycle:
  1776                           	opt stack 0
  1777  000060                     ?_ExecuteDevStatus:
  1778                           	opt stack 0
  1779  000060                     ?_TMR1_ReadTimer:
  1780                           	opt stack 0
  1781  000060                     ?___wmul:
  1782                           	opt stack 0
  1783  000060                     ?_GetRx1Freq:
  1784                           	opt stack 0
  1785  000060                     ?___lldiv:
  1786                           	opt stack 0
  1787  000060                     ?___llmod:
  1788                           	opt stack 0
  1789  000060                     SPI2_Exchange8bit@data:
  1790                           	opt stack 0
  1791  000060                     EncKeySchedule@key:
  1792                           	opt stack 0
  1793  000060                     INTERRUPT_GetDioStatus@a:
  1794                           	opt stack 0
  1795  000060                     UpdateCurrentDataRate@valueNew:
  1796                           	opt stack 0
  1797  000060                     UpdateTxPower@txPowerNew:
  1798                           	opt stack 0
  1799  000060                     UpdateJoinInProgress@state:
  1800                           	opt stack 0
  1801  000060                     ValidateDataRate@dataRate:
  1802                           	opt stack 0
  1803  000060                     ValidateTxPower@result:
  1804                           	opt stack 0
  1805  000060                     UpdateDLSettings@dlRx1DrOffset:
  1806                           	opt stack 0
  1807  000060                     UpdateDataRange@dataRangeNew:
  1808                           	opt stack 0
  1809  000060                     UpdateChannelIdStatus@statusNew:
  1810                           	opt stack 0
  1811  000060                     ValidateRxOffset@rxOffset:
  1812                           	opt stack 0
  1813  000060                     ValidateChannelId@allowedForDefaultChannels:
  1814                           	opt stack 0
  1815  000060                     ValidateChannelMaskCntl@result:
  1816                           	opt stack 0
  1817  000060                     HALResetPinOutputValue@value:
  1818                           	opt stack 0
  1819  000060                     RADIO_SetLoRaSyncWord@syncWord:
  1820                           	opt stack 0
  1821  000060                     RADIO_SetSpreadingFactor@spreadingFactor:
  1822                           	opt stack 0
  1823  000060                     RADIO_SetOutputPower@power:
  1824                           	opt stack 0
  1825  000060                     RADIO_SetCRC@crc:
  1826                           	opt stack 0
  1827  000060                     RADIO_SetIQInverted@iqInverted:
  1828                           	opt stack 0
  1829  000060                     RADIO_SetBandwidth@bandwidth:
  1830                           	opt stack 0
  1831  000060                     RADIO_SetModulation@modulation:
  1832                           	opt stack 0
  1833  000060                     SwTimerCreate@retVal:
  1834                           	opt stack 0
  1835  000060                     SwTimerIsRunning@timerId:
  1836                           	opt stack 0
  1837  000060                     SwTimerStop@timerId:
  1838                           	opt stack 0
  1839  000060                     ___abdiv@divisor:
  1840                           	opt stack 0
  1841  000060                     INT1_SetInterruptHandler@InterruptHandler:
  1842                           	opt stack 0
  1843  000060                     INT2_SetInterruptHandler@InterruptHandler:
  1844                           	opt stack 0
  1845  000060                     INT0_SetInterruptHandler@InterruptHandler:
  1846                           	opt stack 0
  1847  000060                     INT3_SetInterruptHandler@InterruptHandler:
  1848                           	opt stack 0
  1849  000060                     TMR1_WriteTimer@timerVal:
  1850                           	opt stack 0
  1851  000060                     TMR1_SetInterruptHandler@InterruptHandler:
  1852                           	opt stack 0
  1853  000060                     IOCBF4_SetInterruptHandler@InterruptHandler:
  1854                           	opt stack 0
  1855  000060                     RxDataDone@pData:
  1856                           	opt stack 0
  1857  000060                     EncodeShiftRow@stateTable:
  1858                           	opt stack 0
  1859  000060                     ExecuteLinkCheck@ptr:
  1860                           	opt stack 0
  1861  000060                     IncludeMacCommandsResponse@macBuffer:
  1862                           	opt stack 0
  1863  000060                     CheckFlags@hdr:
  1864                           	opt stack 0
  1865  000060                     CheckMcastFlags@hdr:
  1866                           	opt stack 0
  1867  000060                     FillSubKey@source:
  1868                           	opt stack 0
  1869  000060                     ExecuteDutyCycle@ptr:
  1870                           	opt stack 0
  1871  000060                     ExecuteDevStatus@ptr:
  1872                           	opt stack 0
  1873  000060                     UpdateDutyCycle@dutyCycleNew:
  1874                           	opt stack 0
  1875  000060                     ValidateChannelMask@channelMask:
  1876                           	opt stack 0
  1877  000060                     RADIO_SetFrequencyHopPeriod@frequencyHopPeriod:
  1878                           	opt stack 0
  1879  000060                     SwTimerSetCallback@callback:
  1880                           	opt stack 0
  1881  000060                     ___wmul@multiplier:
  1882                           	opt stack 0
  1883  000060                     memcpy@d1:
  1884                           	opt stack 0
  1885  000060                     memset@p1:
  1886                           	opt stack 0
  1887  000060                     LORAWAN_SetDeviceAddress@deviceAddressNew:
  1888                           	opt stack 0
  1889  000060                     UpdateReceiveWindow2Parameters@frequency:
  1890                           	opt stack 0
  1891  000060                     ValidateFrequency@frequencyNew:
  1892                           	opt stack 0
  1893  000060                     UpdateFrequency@frequencyNew:
  1894                           	opt stack 0
  1895  000060                     RADIO_SetChannelFrequency@frequency:
  1896                           	opt stack 0
  1897  000060                     SystemBlockingWaitMs@ms:
  1898                           	opt stack 0
  1899  000060                     ___lldiv@dividend:
  1900                           	opt stack 0
  1901  000060                     ___llmod@dividend:
  1902                           	opt stack 0
  1903                           
  1904                           ; 4 bytes @ 0x0
  1905  000060                     	ds	1
  1906  000061                     ??_UpdateDataRange:
  1907  000061                     ??_UpdateChannelIdStatus:
  1908  000061                     ??_EncKeySchedule:
  1909  000061                     flash@x:
  1910                           	opt stack 0
  1911  000061                     UpdateMinMaxChDataRate@i:
  1912                           	opt stack 0
  1913  000061                     FindSmallestDataRate@found:
  1914                           	opt stack 0
  1915  000061                     ValidateDataRate@result:
  1916                           	opt stack 0
  1917  000061                     ValidateTxPower@txPowerNew:
  1918                           	opt stack 0
  1919  000061                     UpdateDLSettings@dlRx2Dr:
  1920                           	opt stack 0
  1921  000061                     ValidateRxOffset@result:
  1922                           	opt stack 0
  1923  000061                     ValidateChannelId@result:
  1924                           	opt stack 0
  1925  000061                     ValidateChannelMaskCntl@channelMaskCntl:
  1926                           	opt stack 0
  1927  000061                     HALSPISend@data:
  1928                           	opt stack 0
  1929  000061                     SwTimerIsRunning@isRunning:
  1930                           	opt stack 0
  1931  000061                     ___abdiv@counter:
  1932                           	opt stack 0
  1933                           
  1934                           ; 1 bytes @ 0x1
  1935  000061                     	ds	1
  1936  000062                     ??_ExecuteDutyCycle:
  1937  000062                     ??_TMR1_Initialize:
  1938  000062                     ??_TMR1_ReadTimer:
  1939  000062                     PIN_MANAGER_Initialize@state:
  1940                           	opt stack 0
  1941  000062                     RxDataDone@dataLength:
  1942                           	opt stack 0
  1943  000062                     EncodeShiftRow@temp:
  1944                           	opt stack 0
  1945  000062                     IncludeMacCommandsResponse@pBufferIndex:
  1946                           	opt stack 0
  1947  000062                     FindSmallestDataRate@i:
  1948                           	opt stack 0
  1949  000062                     UpdateDataRange@channelId:
  1950                           	opt stack 0
  1951  000062                     UpdateChannelIdStatus@channelId:
  1952                           	opt stack 0
  1953  000062                     ValidateDataRange@result:
  1954                           	opt stack 0
  1955  000062                     ValidateChannelId@channelId:
  1956                           	opt stack 0
  1957  000062                     UpdateDutyCycle@channelId:
  1958                           	opt stack 0
  1959  000062                     ValidateChannelMask@i:
  1960                           	opt stack 0
  1961  000062                     RADIO_RegisterWrite@value:
  1962                           	opt stack 0
  1963  000062                     RADIO_RegisterRead@reg:
  1964                           	opt stack 0
  1965  000062                     SwTimerSetCallback@callbackParameter:
  1966                           	opt stack 0
  1967  000062                     ___abdiv@sign:
  1968                           	opt stack 0
  1969  000062                     FillSubKey@key:
  1970                           	opt stack 0
  1971  000062                     ___wmul@multiplicand:
  1972                           	opt stack 0
  1973  000062                     memcpy@s1:
  1974                           	opt stack 0
  1975  000062                     memset@c:
  1976                           	opt stack 0
  1977                           
  1978                           ; 2 bytes @ 0x2
  1979  000062                     	ds	1
  1980  000063                     RxDataDone@status:
  1981                           	opt stack 0
  1982  000063                     IncludeMacCommandsResponse@bIncludeInFopts:
  1983                           	opt stack 0
  1984  000063                     FindSmallestDataRate@dataRate:
  1985                           	opt stack 0
  1986  000063                     UpdateDataRange@i:
  1987                           	opt stack 0
  1988  000063                     UpdateChannelIdStatus@i:
  1989                           	opt stack 0
  1990  000063                     ValidateDataRange@dataRangeNew:
  1991                           	opt stack 0
  1992  000063                     RADIO_RegisterWrite@reg:
  1993                           	opt stack 0
  1994  000063                     RADIO_RegisterRead@readValue:
  1995                           	opt stack 0
  1996  000063                     SwTimerSetCallback@timerId:
  1997                           	opt stack 0
  1998  000063                     ___abdiv@quotient:
  1999                           	opt stack 0
  2000                           
  2001                           ; 1 bytes @ 0x3
  2002  000063                     	ds	1
  2003  000064                     ??_IncludeMacCommandsResponse:
  2004  000064                     ??_SystemBlockingWaitMs:
  2005  000064                     UpdateReceiveWindow2Parameters@dataRate:
  2006                           	opt stack 0
  2007  000064                     FillSubKey@size:
  2008                           	opt stack 0
  2009  000064                     LORAWAN_SetChannelIdStatus@statusNew:
  2010                           	opt stack 0
  2011  000064                     ValidateFrequency@result:
  2012                           	opt stack 0
  2013  000064                     ValidateDataRange@dataRateMax:
  2014                           	opt stack 0
  2015  000064                     UpdateFrequency@channelId:
  2016                           	opt stack 0
  2017  000064                     RADIO_WritePower@ocp:
  2018                           	opt stack 0
  2019  000064                     RADIO_UnhandledInterrupt@modulation:
  2020                           	opt stack 0
  2021  000064                     ___abdiv@dividend:
  2022                           	opt stack 0
  2023  000064                     TMR1_ReadTimer@readVal:
  2024                           	opt stack 0
  2025  000064                     _EncKeySchedule$1332:
  2026                           	opt stack 0
  2027  000064                     EnableChannels1@channelMask:
  2028                           	opt stack 0
  2029  000064                     ___wmul@product:
  2030                           	opt stack 0
  2031  000064                     memcpy@n:
  2032                           	opt stack 0
  2033  000064                     memset@n:
  2034                           	opt stack 0
  2035  000064                     ___lldiv@divisor:
  2036                           	opt stack 0
  2037  000064                     ___llmod@divisor:
  2038                           	opt stack 0
  2039                           
  2040                           ; 4 bytes @ 0x4
  2041  000064                     	ds	1
  2042  000065                     ??_RADIO_DIO3:
  2043  000065                     ??_RADIO_DIO4:
  2044  000065                     ??_RADIO_DIO5:
  2045  000065                     ??_FillSubKey:
  2046  000065                     ExecuteDutyCycle@maxDCycle:
  2047                           	opt stack 0
  2048  000065                     ValidateDataRange@dataRateMin:
  2049                           	opt stack 0
  2050  000065                     RADIO_WriteMode@newModulation:
  2051                           	opt stack 0
  2052  000065                     RADIO_WritePower@paDac:
  2053                           	opt stack 0
  2054                           
  2055                           ; 1 bytes @ 0x5
  2056  000065                     	ds	1
  2057  000066                     ?_TMR_SwapTimer:
  2058                           	opt stack 0
  2059  000066                     ?_TMR_GetDeltaTime:
  2060                           	opt stack 0
  2061  000066                     UpdateReceiveDelays@delay:
  2062                           	opt stack 0
  2063  000066                     CountfOptsLength@macCommandLength:
  2064                           	opt stack 0
  2065  000066                     FillSubKey@carry:
  2066                           	opt stack 0
  2067  000066                     LORAWAN_SetChannelIdStatus@channelId:
  2068                           	opt stack 0
  2069  000066                     EnableChannels1@channelMaskCntl:
  2070                           	opt stack 0
  2071  000066                     RADIO_WriteMode@blocking:
  2072                           	opt stack 0
  2073  000066                     RADIO_WritePower@power:
  2074                           	opt stack 0
  2075  000066                     AESEncode@block:
  2076                           	opt stack 0
  2077  000066                     TMR_SwapTimer@timerVal:
  2078                           	opt stack 0
  2079  000066                     memcpy@d:
  2080                           	opt stack 0
  2081  000066                     memset@p:
  2082                           	opt stack 0
  2083                           
  2084                           ; 2 bytes @ 0x6
  2085  000066                     	ds	1
  2086  000067                     ?_ExecuteRxTimingSetup:
  2087                           	opt stack 0
  2088  000067                     CountfOptsLength@i:
  2089                           	opt stack 0
  2090  000067                     FillSubKey@i:
  2091                           	opt stack 0
  2092  000067                     EnableChannels1@channelIndexMin:
  2093                           	opt stack 0
  2094  000067                     RADIO_WriteMode@currentModulation:
  2095                           	opt stack 0
  2096  000067                     ExecuteRxTimingSetup@ptr:
  2097                           	opt stack 0
  2098                           
  2099                           ; 2 bytes @ 0x7
  2100  000067                     	ds	1
  2101  000068                     ??_LORAWAN_GetMaxPayloadSize:
  2102  000068                     AESEncode@masterKey:
  2103                           	opt stack 0
  2104  000068                     EnableChannels1@channelIndexMax:
  2105                           	opt stack 0
  2106  000068                     RADIO_WriteMode@dioMapping:
  2107                           	opt stack 0
  2108  000068                     ___llmod@counter:
  2109                           	opt stack 0
  2110  000068                     memcpy@s:
  2111                           	opt stack 0
  2112  000068                     TMR_OverrideRemaining@ticksRemaining:
  2113                           	opt stack 0
  2114  000068                     ___lldiv@quotient:
  2115                           	opt stack 0
  2116                           
  2117                           ; 4 bytes @ 0x8
  2118  000068                     	ds	1
  2119  000069                     ??_AESEncode:
  2120  000069                     LORAWAN_GetMaxPayloadSize@macCommandsLength:
  2121                           	opt stack 0
  2122  000069                     ExecuteRxTimingSetup@delay:
  2123                           	opt stack 0
  2124  000069                     EnableChannels1@i:
  2125                           	opt stack 0
  2126  000069                     RADIO_WriteMode@currentMode:
  2127                           	opt stack 0
  2128                           
  2129                           ; 1 bytes @ 0x9
  2130  000069                     	ds	1
  2131  00006A                     ??_TMR_GetDeltaTime:
  2132  00006A                     ?_ExtractMic:
  2133                           	opt stack 0
  2134  00006A                     LORAWAN_GetMaxPayloadSize@result:
  2135                           	opt stack 0
  2136  00006A                     IncludeMacCommandsResponse@i:
  2137                           	opt stack 0
  2138  00006A                     InitDefault868Channels@i:
  2139                           	opt stack 0
  2140  00006A                     InitDefault433Channels@i:
  2141                           	opt stack 0
  2142  00006A                     RADIO_WriteMode@newMode:
  2143                           	opt stack 0
  2144  00006A                     LORAWAN_SetNetworkSessionKey@networkSessionKeyNew:
  2145                           	opt stack 0
  2146  00006A                     LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew:
  2147                           	opt stack 0
  2148  00006A                     PrepareSessionKeys@sessionKey:
  2149                           	opt stack 0
  2150  00006A                     ExtractMic@buffer:
  2151                           	opt stack 0
  2152  00006A                     EnableChannels@channelMask:
  2153                           	opt stack 0
  2154  00006A                     RADIO_SetFSKSyncWord@syncWord:
  2155                           	opt stack 0
  2156  00006A                     AssembleEncryptionBlock@frameCounter:
  2157                           	opt stack 0
  2158                           
  2159                           ; 4 bytes @ 0xA
  2160  00006A                     	ds	1
  2161  00006B                     IncludeMacCommandsResponse@bufferIndex:
  2162                           	opt stack 0
  2163  00006B                     RADIO_WriteMode@opMode:
  2164                           	opt stack 0
  2165                           
  2166                           ; 1 bytes @ 0xB
  2167  00006B                     	ds	1
  2168  00006C                     ??_TMR_OverrideRemaining:
  2169  00006C                     ?_RADIO_ReadRandom:
  2170                           	opt stack 0
  2171  00006C                     ExtractMic@bufferLength:
  2172                           	opt stack 0
  2173  00006C                     EnableChannels@channelMaskCntl:
  2174                           	opt stack 0
  2175  00006C                     RADIO_SetFSKSyncWord@syncWordLen:
  2176                           	opt stack 0
  2177  00006C                     ___lldiv@counter:
  2178                           	opt stack 0
  2179  00006C                     PrepareSessionKeys@appNonce:
  2180                           	opt stack 0
  2181                           
  2182                           ; 2 bytes @ 0xC
  2183  00006C                     	ds	1
  2184  00006D                     ?_ExecuteLinkAdr:
  2185                           	opt stack 0
  2186  00006D                     ExecuteLinkAdr@ptr:
  2187                           	opt stack 0
  2188  00006D                     ConfigureRadio@freq:
  2189                           	opt stack 0
  2190  00006D                     RADIO_WriteFrequency@frequency:
  2191                           	opt stack 0
  2192  00006D                     RADIO_WriteFSKFrequencyDeviation@frequencyDeviation:
  2193                           	opt stack 0
  2194  00006D                     RADIO_WriteFSKBitRate@bitRate:
  2195                           	opt stack 0
  2196  00006D                     SwTimerSetTimeout@timeout:
  2197                           	opt stack 0
  2198                           
  2199                           ; 4 bytes @ 0xD
  2200  00006D                     	ds	1
  2201  00006E                     ??_ExtractMic:
  2202  00006E                     AssembleEncryptionBlock@blockId:
  2203                           	opt stack 0
  2204  00006E                     PrepareSessionKeys@networkId:
  2205                           	opt stack 0
  2206  00006E                     RADIO_ReadRandom@retVal:
  2207                           	opt stack 0
  2208  00006E                     TMR_OverrideRemaining@tmrVal:
  2209                           	opt stack 0
  2210                           
  2211                           ; 2 bytes @ 0xE
  2212  00006E                     	ds	1
  2213  00006F                     ??_ExecuteLinkAdr:
  2214  00006F                     AssembleEncryptionBlock@firstByte:
  2215                           	opt stack 0
  2216                           
  2217                           ; 1 bytes @ 0xF
  2218  00006F                     	ds	1
  2219  000070                     PrepareSessionKeys@index:
  2220                           	opt stack 0
  2221  000070                     AssembleEncryptionBlock@multicastStatus:
  2222                           	opt stack 0
  2223  000070                     RADIO_ReadRandom@i:
  2224                           	opt stack 0
  2225  000070                     ExecuteLinkAdr@channelMask:
  2226                           	opt stack 0
  2227  000070                     TMR_OverrideRemaining@oldReloadVal:
  2228                           	opt stack 0
  2229  000070                     ExtractMic@mic:
  2230                           	opt stack 0
  2231                           
  2232                           ; 4 bytes @ 0x10
  2233  000070                     	ds	1
  2234  000071                     ??_SwTimerSetTimeout:
  2235  000071                     AssembleEncryptionBlock@dir:
  2236                           	opt stack 0
  2237  000071                     ConfigureRadio@dataRate:
  2238                           	opt stack 0
  2239  000071                     srand@x:
  2240                           	opt stack 0
  2241  000071                     RADIO_WriteFrequency@num_mod:
  2242                           	opt stack 0
  2243  000071                     RADIO_WriteFSKFrequencyDeviation@num:
  2244                           	opt stack 0
  2245  000071                     RADIO_WriteFSKBitRate@num:
  2246                           	opt stack 0
  2247  000071                     AESEncode@key:
  2248                           	opt stack 0
  2249                           
  2250                           ; 16 bytes @ 0x11
  2251  000071                     	ds	1
  2252  000072                     AssembleEncryptionBlock@bufferIndex:
  2253                           	opt stack 0
  2254  000072                     ExecuteLinkAdr@txPower:
  2255                           	opt stack 0
  2256  000072                     ConfigureRadioRx@freq:
  2257                           	opt stack 0
  2258  000072                     ConfigureRadioTx@freq:
  2259                           	opt stack 0
  2260                           
  2261                           ; 4 bytes @ 0x12
  2262  000072                     	ds	1
  2263  000073                     ExecuteLinkAdr@redundancy:
  2264                           	opt stack 0
  2265                           
  2266                           ; 2 bytes @ 0x13
  2267  000073                     	ds	2
  2268  000075                     ExecuteLinkAdr@dataRate:
  2269                           	opt stack 0
  2270  000075                     SwTimerSetTimeout@timerId:
  2271                           	opt stack 0
  2272  000075                     RADIO_WriteFrequency@num:
  2273                           	opt stack 0
  2274                           
  2275                           ; 4 bytes @ 0x15
  2276  000075                     	ds	1
  2277  000076                     ?_SwTimersInterrupt:
  2278                           	opt stack 0
  2279  000076                     ConfigureRadioRx@dataRate:
  2280                           	opt stack 0
  2281  000076                     ConfigureRadioTx@dataRate:
  2282                           	opt stack 0
  2283                           
  2284                           ; 1 bytes @ 0x16
  2285  000076                     	ds	1
  2286  000077                     ConfigureRadioTx@txPower:
  2287                           	opt stack 0
  2288                           
  2289                           ; 1 bytes @ 0x17
  2290  000077                     	ds	2
  2291  000079                     ??_RADIO_DIO2:
  2292  000079                     RADIO_Init@radioBuffer:
  2293                           	opt stack 0
  2294                           
  2295                           ; 2 bytes @ 0x19
  2296  000079                     	ds	1
  2297  00007A                     RADIO_DIO2@dioMapping:
  2298                           	opt stack 0
  2299                           
  2300                           ; 1 bytes @ 0x1A
  2301  00007A                     	ds	1
  2302  00007B                     RADIO_Init@frequency:
  2303                           	opt stack 0
  2304                           
  2305                           ; 4 bytes @ 0x1B
  2306  00007B                     	ds	3
  2307  00007E                     SwTimersInterrupt@timeElapsed:
  2308                           	opt stack 0
  2309                           
  2310                           ; 4 bytes @ 0x1E
  2311  00007E                     	ds	1
  2312  00007F                     ??_RADIO_Init:
  2313                           
  2314                           ; 1 bytes @ 0x1F
  2315  00007F                     	ds	2
  2316  000081                     _AESEncode$1346:
  2317                           	opt stack 0
  2318                           
  2319                           ; 2 bytes @ 0x21
  2320  000081                     	ds	1
  2321  000082                     SwTimersInterrupt@ticksToNextTimerEvent:
  2322                           	opt stack 0
  2323                           
  2324                           ; 4 bytes @ 0x22
  2325  000082                     	ds	1
  2326  000083                     _AESEncode$1347:
  2327                           	opt stack 0
  2328                           
  2329                           ; 2 bytes @ 0x23
  2330  000083                     	ds	2
  2331  000085                     _AESEncode$1348:
  2332                           	opt stack 0
  2333                           
  2334                           ; 2 bytes @ 0x25
  2335  000085                     	ds	1
  2336  000086                     SwTimersInterrupt@i:
  2337                           	opt stack 0
  2338                           
  2339                           ; 1 bytes @ 0x26
  2340  000086                     	ds	1
  2341  000087                     ?_SwTimerReadValue:
  2342                           	opt stack 0
  2343  000087                     AESEncode@aux:
  2344                           	opt stack 0
  2345                           
  2346                           ; 1 bytes @ 0x27
  2347  000087                     	ds	1
  2348  000088                     AESEncode@aux2:
  2349                           	opt stack 0
  2350                           
  2351                           ; 1 bytes @ 0x28
  2352  000088                     	ds	1
  2353  000089                     AESEncode@aux1:
  2354                           	opt stack 0
  2355                           
  2356                           ; 1 bytes @ 0x29
  2357  000089                     	ds	1
  2358  00008A                     AESEncode@aux3:
  2359                           	opt stack 0
  2360                           
  2361                           ; 1 bytes @ 0x2A
  2362  00008A                     	ds	1
  2363  00008B                     AESEncode@i:
  2364                           	opt stack 0
  2365  00008B                     SwTimerReadValue@ticksCount:
  2366                           	opt stack 0
  2367  00008B                     SwTimerStart@ticksRemaining:
  2368                           	opt stack 0
  2369                           
  2370                           ; 4 bytes @ 0x2B
  2371  00008B                     	ds	1
  2372  00008C                     AESEncodeLoRa@block:
  2373                           	opt stack 0
  2374                           
  2375                           ; 2 bytes @ 0x2C
  2376  00008C                     	ds	2
  2377  00008E                     AESEncodeLoRa@key:
  2378                           	opt stack 0
  2379                           
  2380                           ; 2 bytes @ 0x2E
  2381  00008E                     	ds	1
  2382  00008F                     SwTimerReadValue@timerId:
  2383                           	opt stack 0
  2384  00008F                     SwTimerStart@timerId:
  2385                           	opt stack 0
  2386                           
  2387                           ; 1 bytes @ 0x2F
  2388  00008F                     	ds	1
  2389  000090                     ??_UpdateRetransmissionAckTimeoutState:
  2390  000090                     ??_StartReTxTimer:
  2391  000090                     ?___lmul:
  2392                           	opt stack 0
  2393  000090                     ___lmul@multiplier:
  2394                           	opt stack 0
  2395  000090                     AESEncodeLoRa@useKey:
  2396                           	opt stack 0
  2397                           
  2398                           ; 16 bytes @ 0x30
  2399  000090                     	ds	4
  2400  000094                     StartReTxTimer@minim:
  2401                           	opt stack 0
  2402  000094                     ___lmul@multiplicand:
  2403                           	opt stack 0
  2404                           
  2405                           ; 4 bytes @ 0x34
  2406  000094                     	ds	4
  2407  000098                     StartReTxTimer@i:
  2408                           	opt stack 0
  2409  000098                     ___lmul@product:
  2410                           	opt stack 0
  2411                           
  2412                           ; 4 bytes @ 0x38
  2413  000098                     	ds	4
  2414  00009C                     ?_rand:
  2415                           	opt stack 0
  2416  00009C                     ?_ExecuteRxParamSetupReq:
  2417                           	opt stack 0
  2418  00009C                     ?_ExecuteNewChannel:
  2419                           	opt stack 0
  2420  00009C                     LORAWAN_LinkCheckConfigure@period:
  2421                           	opt stack 0
  2422  00009C                     ExecuteNewChannel@ptr:
  2423                           	opt stack 0
  2424  00009C                     ExecuteRxParamSetupReq@ptr:
  2425                           	opt stack 0
  2426  00009C                     UpdateCfList@joinAccept:
  2427                           	opt stack 0
  2428  00009C                     RADIO_WriteConfiguration@symbolTimeout:
  2429                           	opt stack 0
  2430                           
  2431                           ; 2 bytes @ 0x3C
  2432  00009C                     	ds	2
  2433  00009E                     ??_UpdateCfList:
  2434  00009E                     ??_LORAWAN_LinkCheckConfigure:
  2435  00009E                     ??_RADIO_WriteConfiguration:
  2436  00009E                     ?___lwmod:
  2437                           	opt stack 0
  2438  00009E                     ExecuteNewChannel@drRange:
  2439                           	opt stack 0
  2440  00009E                     ___lwmod@dividend:
  2441                           	opt stack 0
  2442  00009E                     ExecuteRxParamSetupReq@frequency:
  2443                           	opt stack 0
  2444                           
  2445                           ; 4 bytes @ 0x3E
  2446  00009E                     	ds	1
  2447  00009F                     ExecuteNewChannel@frequency:
  2448                           	opt stack 0
  2449                           
  2450                           ; 4 bytes @ 0x3F
  2451  00009F                     	ds	1
  2452  0000A0                     UpdateCfList@bufferLength:
  2453                           	opt stack 0
  2454  0000A0                     RADIO_WriteConfiguration@i:
  2455                           	opt stack 0
  2456  0000A0                     ComputeSessionKeys@joinAcceptBuffer:
  2457                           	opt stack 0
  2458  0000A0                     EncryptFRMPayload@buffer:
  2459                           	opt stack 0
  2460  0000A0                     GenerateSubkey@key:
  2461                           	opt stack 0
  2462  0000A0                     ___lwmod@divisor:
  2463                           	opt stack 0
  2464                           
  2465                           ; 2 bytes @ 0x40
  2466  0000A0                     	ds	1
  2467  0000A1                     UpdateCfList@frequency:
  2468                           	opt stack 0
  2469  0000A1                     RADIO_WriteConfiguration@tempValue:
  2470                           	opt stack 0
  2471                           
  2472                           ; 4 bytes @ 0x41
  2473  0000A1                     	ds	1
  2474  0000A2                     EncryptFRMPayload@bufferLength:
  2475                           	opt stack 0
  2476  0000A2                     ExecuteRxParamSetupReq@dlSettings:
  2477                           	opt stack 0
  2478  0000A2                     ___lwmod@counter:
  2479                           	opt stack 0
  2480  0000A2                     GenerateSubkey@k1:
  2481                           	opt stack 0
  2482  0000A2                     _LORAWAN_LinkCheckConfigure$2319:
  2483                           	opt stack 0
  2484                           
  2485                           ; 4 bytes @ 0x42
  2486  0000A2                     	ds	1
  2487  0000A3                     ?_Random:
  2488                           	opt stack 0
  2489  0000A3                     EncryptFRMPayload@dir:
  2490                           	opt stack 0
  2491  0000A3                     ExecuteNewChannel@channelIndex:
  2492                           	opt stack 0
  2493  0000A3                     Random@max:
  2494                           	opt stack 0
  2495                           
  2496                           ; 2 bytes @ 0x43
  2497  0000A3                     	ds	1
  2498  0000A4                     ?_MacExecuteCommands:
  2499                           	opt stack 0
  2500  0000A4                     MacExecuteCommands@buffer:
  2501                           	opt stack 0
  2502  0000A4                     GenerateSubkey@k2:
  2503                           	opt stack 0
  2504  0000A4                     EncryptFRMPayload@frameCounter:
  2505                           	opt stack 0
  2506                           
  2507                           ; 4 bytes @ 0x44
  2508  0000A4                     	ds	1
  2509  0000A5                     SearchAvailableChannel@transmissionType:
  2510                           	opt stack 0
  2511  0000A5                     UpdateCfList@channelIndex:
  2512                           	opt stack 0
  2513  0000A5                     RADIO_WriteConfiguration@regValue:
  2514                           	opt stack 0
  2515                           
  2516                           ; 1 bytes @ 0x45
  2517  0000A5                     	ds	1
  2518  0000A6                     ??_GenerateSubkey:
  2519  0000A6                     ?_RADIO_Transmit:
  2520                           	opt stack 0
  2521  0000A6                     ?_RADIO_ReceiveStart:
  2522                           	opt stack 0
  2523  0000A6                     LORAWAN_LinkCheckConfigure@iCtr:
  2524                           	opt stack 0
  2525  0000A6                     MacExecuteCommands@fOptsLen:
  2526                           	opt stack 0
  2527  0000A6                     SearchAvailableChannel@channelIndex:
  2528                           	opt stack 0
  2529  0000A6                     UpdateCfList@i:
  2530                           	opt stack 0
  2531  0000A6                     RADIO_Transmit@buffer:
  2532                           	opt stack 0
  2533  0000A6                     RADIO_ReceiveStart@rxWindowSize:
  2534                           	opt stack 0
  2535                           
  2536                           ; 2 bytes @ 0x46
  2537  0000A6                     	ds	1
  2538  0000A7                     ??_MacExecuteCommands:
  2539  0000A7                     ??_SearchAvailableChannel:
  2540  0000A7                     LORAWAN_Reset@ismBandNew:
  2541                           	opt stack 0
  2542  0000A7                     GenerateSubkey@const_Rb:
  2543                           	opt stack 0
  2544                           
  2545                           ; 16 bytes @ 0x47
  2546  0000A7                     	ds	1
  2547  0000A8                     ??_RADIO_ReceiveStart:
  2548  0000A8                     RADIO_Transmit@bufferLen:
  2549                           	opt stack 0
  2550  0000A8                     EncryptFRMPayload@key:
  2551                           	opt stack 0
  2552  0000A8                     LORAWAN_Init@RxPayload:
  2553                           	opt stack 0
  2554                           
  2555                           ; 2 bytes @ 0x48
  2556  0000A8                     	ds	1
  2557  0000A9                     ??_RADIO_Transmit:
  2558  0000A9                     MacExecuteCommands@done:
  2559                           	opt stack 0
  2560                           
  2561                           ; 1 bytes @ 0x49
  2562  0000A9                     	ds	1
  2563  0000AA                     EncryptFRMPayload@macBufferIndex:
  2564                           	opt stack 0
  2565  0000AA                     MacExecuteCommands@ptr:
  2566                           	opt stack 0
  2567  0000AA                     LORAWAN_Init@RxJoinResponse:
  2568                           	opt stack 0
  2569                           
  2570                           ; 2 bytes @ 0x4A
  2571  0000AA                     	ds	1
  2572  0000AB                     SearchAvailableChannel@randomNumberCopy:
  2573                           	opt stack 0
  2574  0000AB                     EncryptFRMPayload@bufferToBeEncrypted:
  2575                           	opt stack 0
  2576                           
  2577                           ; 2 bytes @ 0x4B
  2578  0000AB                     	ds	1
  2579  0000AC                     SearchAvailableChannel@result:
  2580                           	opt stack 0
  2581  0000AC                     _RADIO_ReceiveStart$3748:
  2582                           	opt stack 0
  2583                           
  2584                           ; 4 bytes @ 0x4C
  2585  0000AC                     	ds	1
  2586  0000AD                     EncryptFRMPayload@multicastStatus:
  2587                           	opt stack 0
  2588  0000AD                     SearchAvailableChannel@maxChannels:
  2589                           	opt stack 0
  2590                           
  2591                           ; 1 bytes @ 0x4D
  2592  0000AD                     	ds	1
  2593  0000AE                     ??_EncryptFRMPayload:
  2594  0000AE                     SearchAvailableChannel@randomNumber:
  2595                           	opt stack 0
  2596                           
  2597                           ; 1 bytes @ 0x4E
  2598  0000AE                     	ds	1
  2599  0000AF                     SearchAvailableChannel@i:
  2600                           	opt stack 0
  2601                           
  2602                           ; 1 bytes @ 0x4F
  2603  0000AF                     	ds	1
  2604  0000B0                     SelectChannelForTransmission@transmissionType:
  2605                           	opt stack 0
  2606  0000B0                     LORAWAN_TxDone@timeOnAir:
  2607                           	opt stack 0
  2608                           
  2609                           ; 2 bytes @ 0x50
  2610  0000B0                     	ds	1
  2611  0000B1                     SelectChannelForTransmission@result:
  2612                           	opt stack 0
  2613  0000B1                     _RADIO_Transmit$3745:
  2614                           	opt stack 0
  2615                           
  2616                           ; 4 bytes @ 0x51
  2617  0000B1                     	ds	1
  2618  0000B2                     ??_LORAWAN_TxDone:
  2619  0000B2                     SelectChannelForTransmission@channelIndex:
  2620                           	opt stack 0
  2621                           
  2622                           ; 1 bytes @ 0x52
  2623  0000B2                     	ds	1
  2624  0000B3                     EncryptFRMPayload@k:
  2625                           	opt stack 0
  2626                           
  2627                           ; 1 bytes @ 0x53
  2628  0000B3                     	ds	1
  2629  0000B4                     EncryptFRMPayload@i:
  2630                           	opt stack 0
  2631                           
  2632                           ; 1 bytes @ 0x54
  2633  0000B4                     	ds	1
  2634  0000B5                     EncryptFRMPayload@j:
  2635                           	opt stack 0
  2636  0000B5                     RADIO_Transmit@regValue:
  2637                           	opt stack 0
  2638                           
  2639                           ; 1 bytes @ 0x55
  2640  0000B5                     	ds	1
  2641  0000B6                     RADIO_Transmit@i:
  2642                           	opt stack 0
  2643                           
  2644                           ; 1 bytes @ 0x56
  2645  0000B6                     	ds	1
  2646  0000B7                     ??_LORAWAN_RxTimeout:
  2647  0000B7                     GenerateSubkey@l:
  2648                           	opt stack 0
  2649                           
  2650                           ; 16 bytes @ 0x57
  2651  0000B7                     	ds	3
  2652  0000BA                     _LORAWAN_TxDone$3265:
  2653                           	opt stack 0
  2654                           
  2655                           ; 4 bytes @ 0x5A
  2656  0000BA                     	ds	1
  2657  0000BB                     LORAWAN_RxTimeout@minim:
  2658                           	opt stack 0
  2659                           
  2660                           ; 4 bytes @ 0x5B
  2661  0000BB                     	ds	3
  2662  0000BE                     _LORAWAN_TxDone$3266:
  2663                           	opt stack 0
  2664                           
  2665                           ; 4 bytes @ 0x5E
  2666  0000BE                     	ds	1
  2667  0000BF                     LORAWAN_RxTimeout@i:
  2668                           	opt stack 0
  2669                           
  2670                           ; 1 bytes @ 0x5F
  2671  0000BF                     	ds	1
  2672  0000C0                     ??_RADIO_DIO1:
  2673  0000C0                     
  2674                           ; 1 bytes @ 0x60
  2675  0000C0                     	ds	1
  2676  0000C1                     RADIO_DIO1@dioMapping:
  2677                           	opt stack 0
  2678                           
  2679                           ; 1 bytes @ 0x61
  2680  0000C1                     	ds	1
  2681  0000C2                     LORAWAN_TxDone@found:
  2682                           	opt stack 0
  2683                           
  2684                           ; 1 bytes @ 0x62
  2685  0000C2                     	ds	1
  2686  0000C3                     LORAWAN_TxDone@delta:
  2687                           	opt stack 0
  2688                           
  2689                           ; 4 bytes @ 0x63
  2690  0000C3                     	ds	4
  2691  0000C7                     GenerateSubkey@i:
  2692                           	opt stack 0
  2693  0000C7                     _LORAWAN_TxDone$5060:
  2694                           	opt stack 0
  2695                           
  2696                           ; 4 bytes @ 0x67
  2697  0000C7                     	ds	1
  2698  0000C8                     AESCmac@key:
  2699                           	opt stack 0
  2700                           
  2701                           ; 2 bytes @ 0x68
  2702  0000C8                     	ds	2
  2703  0000CA                     AESCmac@output:
  2704                           	opt stack 0
  2705                           
  2706                           ; 2 bytes @ 0x6A
  2707  0000CA                     	ds	1
  2708  0000CB                     LORAWAN_TxDone@ticks:
  2709                           	opt stack 0
  2710                           
  2711                           ; 4 bytes @ 0x6B
  2712  0000CB                     	ds	1
  2713  0000CC                     AESCmac@input:
  2714                           	opt stack 0
  2715                           
  2716                           ; 2 bytes @ 0x6C
  2717  0000CC                     	ds	2
  2718  0000CE                     AESCmac@size:
  2719                           	opt stack 0
  2720                           
  2721                           ; 1 bytes @ 0x6E
  2722  0000CE                     	ds	1
  2723  0000CF                     ??_AESCmac:
  2724  0000CF                     LORAWAN_TxDone@minim:
  2725                           	opt stack 0
  2726                           
  2727                           ; 4 bytes @ 0x6F
  2728  0000CF                     	ds	4
  2729  0000D3                     LORAWAN_TxDone@i:
  2730                           	opt stack 0
  2731                           
  2732                           ; 1 bytes @ 0x73
  2733  0000D3                     	ds	1
  2734  0000D4                     RADIO_TxDone@timeOnAir:
  2735                           	opt stack 0
  2736  0000D4                     RADIO_FSKPacketSent@timeOnAir:
  2737                           	opt stack 0
  2738                           
  2739                           ; 4 bytes @ 0x74
  2740  0000D4                     	ds	2
  2741  0000D6                     ??_AssemblePacket:
  2742  0000D6                     ComputeMic@mic:
  2743                           	opt stack 0
  2744                           
  2745                           ; 4 bytes @ 0x76
  2746  0000D6                     	ds	2
  2747  0000D8                     AssemblePacket@confirmed:
  2748                           	opt stack 0
  2749  0000D8                     _RADIO_TxDone$3761:
  2750                           	opt stack 0
  2751  0000D8                     _RADIO_FSKPacketSent$3766:
  2752                           	opt stack 0
  2753                           
  2754                           ; 4 bytes @ 0x78
  2755  0000D8                     	ds	1
  2756  0000D9                     AssemblePacket@mhdr:
  2757                           	opt stack 0
  2758                           
  2759                           ; 1 bytes @ 0x79
  2760  0000D9                     	ds	1
  2761  0000DA                     ??_PrepareJoinRequestFrame:
  2762  0000DA                     AssemblePacket@fCtrl:
  2763                           	opt stack 0
  2764                           
  2765                           ; 1 bytes @ 0x7A
  2766  0000DA                     	ds	1
  2767  0000DB                     AssemblePacket@macCmdIdx:
  2768                           	opt stack 0
  2769                           
  2770                           ; 1 bytes @ 0x7B
  2771  0000DB                     	ds	1
  2772  0000DC                     AssemblePacket@bufferIndex:
  2773                           	opt stack 0
  2774  0000DC                     RADIO_FSKPacketSent@irqFlags:
  2775                           	opt stack 0
  2776  0000DC                     PrepareJoinRequestFrame@mic:
  2777                           	opt stack 0
  2778                           
  2779                           ; 4 bytes @ 0x7C
  2780  0000DC                     	ds	1
  2781  0000DD                     ??_LORAWAN_Send:
  2782                           
  2783                           ; 1 bytes @ 0x7D
  2784  0000DD                     	ds	1
  2785  0000DE                     LORAWAN_Send@result:
  2786                           	opt stack 0
  2787                           
  2788                           ; 1 bytes @ 0x7E
  2789  0000DE                     	ds	1
  2790  0000DF                     LORAWAN_Send@confirmed:
  2791                           	opt stack 0
  2792                           
  2793                           ; 1 bytes @ 0x7F
  2794  0000DF                     	ds	1
  2795  0000E0                     ??_LORAWAN_RxDone:
  2796  0000E0                     PrepareJoinRequestFrame@mhdr:
  2797                           	opt stack 0
  2798                           
  2799                           ; 1 bytes @ 0x80
  2800  0000E0                     	ds	1
  2801  0000E1                     PrepareJoinRequestFrame@bufferIndex:
  2802                           	opt stack 0
  2803                           
  2804                           ; 1 bytes @ 0x81
  2805  0000E1                     	ds	1
  2806  0000E2                     PrepareJoinRequestFrame@iCtr:
  2807                           	opt stack 0
  2808                           
  2809                           ; 1 bytes @ 0x82
  2810  0000E2                     	ds	1
  2811  0000E3                     LORAWAN_Join@bufferIndex:
  2812                           	opt stack 0
  2813                           
  2814                           ; 1 bytes @ 0x83
  2815  0000E3                     	ds	1
  2816  0000E4                     LORAWAN_Join@result:
  2817                           	opt stack 0
  2818  0000E4                     SwTimersExecute@i:
  2819                           	opt stack 0
  2820                           
  2821                           ; 1 bytes @ 0x84
  2822  0000E4                     	ds	1
  2823  0000E5                     LORAWAN_Join@activationTypeNew:
  2824                           	opt stack 0
  2825  0000E5                     LORAWAN_RxDone@fPort:
  2826                           	opt stack 0
  2827                           
  2828                           ; 1 bytes @ 0x85
  2829  0000E5                     	ds	1
  2830  0000E6                     LORAWAN_RxDone@channelIndex:
  2831                           	opt stack 0
  2832                           
  2833                           ; 1 bytes @ 0x86
  2834  0000E6                     	ds	1
  2835  0000E7                     LORAWAN_RxDone@mhdr:
  2836                           	opt stack 0
  2837                           
  2838                           ; 1 bytes @ 0x87
  2839  0000E7                     	ds	1
  2840  0000E8                     LORAWAN_RxDone@extractedMic:
  2841                           	opt stack 0
  2842                           
  2843                           ; 4 bytes @ 0x88
  2844  0000E8                     	ds	4
  2845  0000EC                     LORAWAN_RxDone@bufferIndex:
  2846                           	opt stack 0
  2847                           
  2848                           ; 1 bytes @ 0x8C
  2849  0000EC                     	ds	1
  2850  0000ED                     LORAWAN_RxDone@temp:
  2851                           	opt stack 0
  2852                           
  2853                           ; 1 bytes @ 0x8D
  2854  0000ED                     	ds	1
  2855  0000EE                     LORAWAN_RxDone@packet:
  2856                           	opt stack 0
  2857                           
  2858                           ; 2 bytes @ 0x8E
  2859  0000EE                     	ds	2
  2860  0000F0                     LORAWAN_RxDone@computedMic:
  2861                           	opt stack 0
  2862                           
  2863                           ; 4 bytes @ 0x90
  2864  0000F0                     	ds	4
  2865  0000F4                     LORAWAN_RxDone@joinAccept:
  2866                           	opt stack 0
  2867                           
  2868                           ; 2 bytes @ 0x94
  2869  0000F4                     	ds	2
  2870  0000F6                     LORAWAN_RxDone@frmPayloadLength:
  2871                           	opt stack 0
  2872                           
  2873                           ; 1 bytes @ 0x96
  2874  0000F6                     	ds	1
  2875  0000F7                     LORAWAN_RxDone@hdr:
  2876                           	opt stack 0
  2877                           
  2878                           ; 2 bytes @ 0x97
  2879  0000F7                     	ds	2
  2880  0000F9                     RADIO_RxDone@irqFlags:
  2881                           	opt stack 0
  2882  0000F9                     RADIO_FSKPayloadReady@irqFlags:
  2883                           	opt stack 0
  2884                           
  2885                           ; 1 bytes @ 0x99
  2886  0000F9                     	ds	1
  2887  0000FA                     RADIO_RxDone@i:
  2888                           	opt stack 0
  2889  0000FA                     RADIO_FSKPayloadReady@i:
  2890                           	opt stack 0
  2891                           
  2892                           ; 1 bytes @ 0x9A
  2893  0000FA                     	ds	1
  2894  0000FB                     ??_RADIO_DIO0:
  2895                           
  2896                           ; 1 bytes @ 0x9B
  2897  0000FB                     	ds	2
  2898  0000FD                     tosu	equ	0xFFF
  2899                           tosh	equ	0xFFE
  2900                           tosl	equ	0xFFD
  2901                           pclath	equ	0xFFA
  2902                           tblptru	equ	0xFF8
  2903                           tblptrh	equ	0xFF7
  2904                           tblptrl	equ	0xFF6
  2905                           tablat	equ	0xFF5
  2906                           prodh	equ	0xFF4
  2907                           prodl	equ	0xFF3
  2908                           intcon	equ	0xFF2
  2909                           indf0	equ	0xFEF
  2910                           postinc0	equ	0xFEE
  2911                           plusw0	equ	0xFEB
  2912                           fsr0h	equ	0xFEA
  2913                           fsr0l	equ	0xFE9
  2914                           wreg	equ	0xFE8
  2915                           postinc1	equ	0xFE6
  2916                           postdec1	equ	0xFE5
  2917                           plusw1	equ	0xFE3
  2918                           fsr1h	equ	0xFE2
  2919                           fsr1l	equ	0xFE1
  2920                           indf2	equ	0xFDF
  2921                           postinc2	equ	0xFDE
  2922                           postdec2	equ	0xFDD
  2923                           plusw2	equ	0xFDB
  2924                           fsr2h	equ	0xFDA
  2925                           fsr2l	equ	0xFD9
  2926                           status	equ	0xFD8
  2927                           
  2928                           ; 1 bytes @ 0x9D
  2929                           
  2930                           	psect	cstackCOMRAM
  2931  000001                     __pcstackCOMRAM:
  2932                           	opt stack 0
  2933  000001                     ?i2_TMR1_ReadTimer:
  2934                           	opt stack 0
  2935  000001                     i2TMR1_WriteTimer@timerVal:
  2936                           	opt stack 0
  2937                           
  2938                           ; 2 bytes @ 0x0
  2939  000001                     	ds	2
  2940  000003                     ??i2_TMR1_ReadTimer:
  2941  000003                     
  2942                           ; 1 bytes @ 0x2
  2943  000003                     	ds	2
  2944  000005                     i2TMR1_ReadTimer@readVal:
  2945                           	opt stack 0
  2946                           
  2947                           ; 2 bytes @ 0x4
  2948  000005                     	ds	2
  2949  000007                     ?i2_TMR_SwapTimer:
  2950                           	opt stack 0
  2951  000007                     ?i2_TMR_GetDeltaTime:
  2952                           	opt stack 0
  2953  000007                     i2TMR_SwapTimer@timerVal:
  2954                           	opt stack 0
  2955                           
  2956                           ; 2 bytes @ 0x6
  2957  000007                     	ds	2
  2958  000009                     
  2959                           ; 1 bytes @ 0x8
  2960  000009                     	ds	2
  2961  00000B                     ??i2_TMR_GetDeltaTime:
  2962                           
  2963                           ; 1 bytes @ 0xA
  2964  00000B                     	ds	12
  2965  000017                     ?i2_SwTimersInterrupt:
  2966                           	opt stack 0
  2967                           
  2968                           ; 4 bytes @ 0x16
  2969  000017                     	ds	4
  2970  00001B                     
  2971                           ; 1 bytes @ 0x1A
  2972  00001B                     	ds	4
  2973  00001F                     i2SwTimersInterrupt@timeElapsed:
  2974                           	opt stack 0
  2975                           
  2976                           ; 4 bytes @ 0x1E
  2977  00001F                     	ds	4
  2978  000023                     i2SwTimersInterrupt@ticksToNextTimerEvent:
  2979                           	opt stack 0
  2980                           
  2981                           ; 4 bytes @ 0x22
  2982  000023                     	ds	4
  2983  000027                     i2SwTimersInterrupt@i:
  2984                           	opt stack 0
  2985                           
  2986                           ; 1 bytes @ 0x26
  2987  000027                     	ds	1
  2988  000028                     ??_INTERRUPT_InterruptManager:
  2989                           
  2990                           ; 1 bytes @ 0x27
  2991  000028                     	ds	8
  2992                           tosu	equ	0xFFF
  2993                           tosh	equ	0xFFE
  2994                           tosl	equ	0xFFD
  2995                           pclath	equ	0xFFA
  2996                           tblptru	equ	0xFF8
  2997                           tblptrh	equ	0xFF7
  2998                           tblptrl	equ	0xFF6
  2999                           tablat	equ	0xFF5
  3000                           prodh	equ	0xFF4
  3001                           prodl	equ	0xFF3
  3002                           intcon	equ	0xFF2
  3003                           indf0	equ	0xFEF
  3004                           postinc0	equ	0xFEE
  3005                           plusw0	equ	0xFEB
  3006                           fsr0h	equ	0xFEA
  3007                           fsr0l	equ	0xFE9
  3008                           wreg	equ	0xFE8
  3009                           postinc1	equ	0xFE6
  3010                           postdec1	equ	0xFE5
  3011                           plusw1	equ	0xFE3
  3012                           fsr1h	equ	0xFE2
  3013                           fsr1l	equ	0xFE1
  3014                           indf2	equ	0xFDF
  3015                           postinc2	equ	0xFDE
  3016                           postdec2	equ	0xFDD
  3017                           plusw2	equ	0xFDB
  3018                           fsr2h	equ	0xFDA
  3019                           fsr2l	equ	0xFD9
  3020                           status	equ	0xFD8
  3021                           
  3022 ;;
  3023 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3024 ;;
  3025 ;; *************** function _main *****************
  3026 ;; Defined at:
  3027 ;;		line 70 in file "main.c"
  3028 ;; Parameters:    Size  Location     Type
  3029 ;;		None
  3030 ;; Auto vars:     Size  Location     Type
  3031 ;;  x               2  119[BANK1 ] int 
  3032 ;;  flag            2  117[BANK1 ] int 
  3033 ;; Return value:  Size  Location     Type
  3034 ;;                  1    wreg      void 
  3035 ;; Registers used:
  3036 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+4, btemp+5, btem
      +p+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3037 ;; Tracked objects:
  3038 ;;		On entry : 0/0
  3039 ;;		On exit  : 3F/1
  3040 ;;		Unchanged: 0/0
  3041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3042 ;;      Params:         0       0       0       0       0       0       0       0       0
  3043 ;;      Locals:         0       0       4       0       0       0       0       0       0
  3044 ;;      Temps:          0       0       1       0       0       0       0       0       0
  3045 ;;      Totals:         0       0       5       0       0       0       0       0       0
  3046 ;;Total ram usage:        5 bytes
  3047 ;; Hardware stack levels required when called:   19
  3048 ;; This function calls:
  3049 ;;		_LORAWAN_Init
  3050 ;;		_LORAWAN_Join
  3051 ;;		_LORAWAN_Mainloop
  3052 ;;		_LORAWAN_SetApplicationSessionKey
  3053 ;;		_LORAWAN_SetDeviceAddress
  3054 ;;		_LORAWAN_SetNetworkSessionKey
  3055 ;;		_SYSTEM_Initialize
  3056 ;;		_flash
  3057 ;;		_sendPacket
  3058 ;; This function is called by:
  3059 ;;		Startup code after reset
  3060 ;; This function uses a non-reentrant model
  3061 ;;
  3062                           
  3063                           	psect	text0
  3064  003C3C                     __ptext0:
  3065                           	opt stack 0
  3066  003C3C                     _main:
  3067                           	opt stack 12
  3068                           
  3069                           ;main.c: 73: SYSTEM_Initialize();
  3070                           
  3071                           ; BSR set to: 14
  3072                           ;incstack = 0
  3073  003C3C  EC6A  F02F         	call	_SYSTEM_Initialize	;wreg free
  3074                           
  3075                           ; BSR set to: 0
  3076                           ;main.c: 76: (INTCONbits.GIE = 1);
  3077  003C40  8EF2               	bsf	intcon,7,c	;volatile
  3078                           
  3079                           ; BSR set to: 0
  3080                           ;main.c: 77: (INTCONbits.PEIE = 1);
  3081  003C42  8CF2               	bsf	intcon,6,c	;volatile
  3082                           
  3083                           ; BSR set to: 0
  3084  003C44  847B               	bsf	3963,2,c	;volatile
  3085                           
  3086                           ; BSR set to: 0
  3087                           ;main.c: 80: LORAWAN_Init(RxDataDone, RxJoinResponse);
  3088  003C46  0E60               	movlw	low _RxDataDone
  3089  003C48  6FA8               	movwf	LORAWAN_Init@RxPayload& (0+255),b
  3090  003C4A  0E62               	movlw	high _RxDataDone
  3091  003C4C  6FA9               	movwf	(LORAWAN_Init@RxPayload+1)& (0+255),b
  3092  003C4E  0E02               	movlw	low _RxJoinResponse
  3093  003C50  6FAA               	movwf	LORAWAN_Init@RxJoinResponse& (0+255),b
  3094  003C52  0E62               	movlw	high _RxJoinResponse
  3095  003C54  6FAB               	movwf	(LORAWAN_Init@RxJoinResponse+1)& (0+255),b
  3096  003C56  ECFF  F029         	call	_LORAWAN_Init	;wreg free
  3097                           
  3098                           ;main.c: 81: LORAWAN_SetNetworkSessionKey(nwkSKey);
  3099  003C5A  0EE7               	movlw	low _nwkSKey
  3100  003C5C  0100               	movlb	0	; () banked
  3101  003C5E  6F6A               	movwf	LORAWAN_SetNetworkSessionKey@networkSessionKeyNew& (0+255),b
  3102  003C60  0E01               	movlw	high _nwkSKey
  3103  003C62  6F6B               	movwf	(LORAWAN_SetNetworkSessionKey@networkSessionKeyNew+1)& (0+255),b
  3104  003C64  EC04  F02E         	call	_LORAWAN_SetNetworkSessionKey	;wreg free
  3105                           
  3106                           ;main.c: 82: LORAWAN_SetApplicationSessionKey(appSKey);
  3107  003C68  0ED7               	movlw	low _appSKey
  3108  003C6A  0100               	movlb	0	; () banked
  3109  003C6C  6F6A               	movwf	LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew& (0+255),b
  3110  003C6E  0E01               	movlw	high _appSKey
  3111  003C70  6F6B               	movwf	(LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew+1)& (0+255),b
  3112  003C72  ECE3  F02C         	call	_LORAWAN_SetApplicationSessionKey	;wreg free
  3113                           
  3114                           ;main.c: 83: LORAWAN_SetDeviceAddress(devAddr);
  3115  003C76  0E80               	movlw	128
  3116  003C78  0100               	movlb	0	; () banked
  3117  003C7A  6F60               	movwf	LORAWAN_SetDeviceAddress@deviceAddressNew& (0+255),b
  3118  003C7C  0E65               	movlw	101
  3119  003C7E  6F61               	movwf	(LORAWAN_SetDeviceAddress@deviceAddressNew+1)& (0+255),b
  3120  003C80  0E00               	movlw	0
  3121  003C82  6B62               	clrf	(LORAWAN_SetDeviceAddress@deviceAddressNew+2)& (0+255),b
  3122  003C84  6B63               	clrf	(LORAWAN_SetDeviceAddress@deviceAddressNew+3)& (0+255),b
  3123  003C86  ECA0  F02F         	call	_LORAWAN_SetDeviceAddress	;wreg free
  3124                           
  3125                           ; BSR set to: 2
  3126                           ;main.c: 84: LORAWAN_Join(ABP);
  3127  003C8A  0E01               	movlw	1
  3128  003C8C  EC20  F023         	call	_LORAWAN_Join
  3129                           
  3130                           ;main.c: 86: while(JoinedServer == 0){
  3131  003C90  D003               	goto	l16180
  3132  003C92                     l16176:
  3133                           
  3134                           ; BSR set to: 1
  3135                           ;main.c: 87: LORAWAN_Mainloop();
  3136  003C92  EC9D  F02B         	call	_LORAWAN_Mainloop	;wreg free
  3137  003C96  947B               	bcf	3963,2,c	;volatile
  3138  003C98                     l16180:
  3139  003C98  0101               	movlb	1	; () banked
  3140  003C9A  517E               	movf	_JoinedServer& (0+255),w,b
  3141  003C9C  E0FA               	bz	l16176
  3142                           
  3143                           ; BSR set to: 1
  3144                           ;main.c: 89: }
  3145                           ;main.c: 91: int flag = 5;
  3146  003C9E  6B76               	clrf	(main@flag+1)& (0+255),b
  3147  003CA0  0E05               	movlw	5
  3148  003CA2  6F75               	movwf	main@flag& (0+255),b
  3149  003CA4                     l16184:
  3150                           
  3151                           ; BSR set to: 1
  3152                           ;main.c: 94: {
  3153                           ;main.c: 95: LORAWAN_Mainloop();
  3154  003CA4  EC9D  F02B         	call	_LORAWAN_Mainloop	;wreg free
  3155                           
  3156                           ;main.c: 96: flag++;
  3157  003CA8  0101               	movlb	1	; () banked
  3158  003CAA  4B75               	infsnz	main@flag& (0+255),f,b
  3159  003CAC  2B76               	incf	(main@flag+1)& (0+255),f,b
  3160                           
  3161                           ; BSR set to: 1
  3162                           ;main.c: 98: if(flag > 10){
  3163  003CAE  BF76               	btfsc	(main@flag+1)& (0+255),7,b
  3164  003CB0  D00B               	goto	l16196
  3165  003CB2  5176               	movf	(main@flag+1)& (0+255),w,b
  3166  003CB4  E103               	bnz	u19770
  3167  003CB6  0E0B               	movlw	11
  3168  003CB8  5D75               	subwf	main@flag& (0+255),w,b
  3169  003CBA  E306               	bnc	l16196
  3170  003CBC                     u19770:
  3171                           
  3172                           ; BSR set to: 1
  3173                           ;main.c: 99: flag = 0;
  3174  003CBC  6B75               	clrf	main@flag& (0+255),b
  3175  003CBE  6B76               	clrf	(main@flag+1)& (0+255),b
  3176                           
  3177                           ; BSR set to: 1
  3178                           ;main.c: 100: flash();
  3179  003CC0  EC63  F029         	call	_flash	;wreg free
  3180                           
  3181                           ; BSR set to: 0
  3182                           ;main.c: 101: sendPacket();
  3183  003CC4  EC10  F02F         	call	_sendPacket	;wreg free
  3184  003CC8                     l16196:
  3185                           
  3186                           ;main.c: 102: }
  3187                           ;main.c: 103: for(int x = 0; x < 1000; x++) _delay((unsigned long)((1)*(16000000/4000.0)
      +                          ));
  3188  003CC8  0101               	movlb	1	; () banked
  3189  003CCA  6B77               	clrf	main@x& (0+255),b
  3190  003CCC  6B78               	clrf	(main@x+1)& (0+255),b
  3191  003CCE                     l16202:
  3192                           
  3193                           ; BSR set to: 1
  3194  003CCE  0E06               	movlw	6
  3195  003CD0  0101               	movlb	1	; () banked
  3196  003CD2  6F74               	movwf	??_main& (0+255),b
  3197  003CD4  0E30               	movlw	48
  3198  003CD6                     u19797:
  3199  003CD6  2EE8               	decfsz	wreg,f,c
  3200  003CD8  D7FE               	bra	u19797
  3201  003CDA  2F74               	decfsz	??_main& (0+255),f,b
  3202  003CDC  D7FC               	bra	u19797
  3203  003CDE  F000               	nop	
  3204  003CE0  0101               	movlb	1	; () banked
  3205  003CE2  4B77               	infsnz	main@x& (0+255),f,b
  3206  003CE4  2B78               	incf	(main@x+1)& (0+255),f,b
  3207  003CE6  BF78               	btfsc	(main@x+1)& (0+255),7,b
  3208  003CE8  D7F2               	goto	l16202
  3209  003CEA  0EE8               	movlw	232
  3210  003CEC  5D77               	subwf	main@x& (0+255),w,b
  3211  003CEE  0E03               	movlw	3
  3212  003CF0  5978               	subwfb	(main@x+1)& (0+255),w,b
  3213  003CF2  E2D8               	bc	l16184
  3214  003CF4  D7EC               	goto	l16202
  3215  003CF6                     __end_of_main:
  3216                           	opt stack 0
  3217                           tosu	equ	0xFFF
  3218                           tosh	equ	0xFFE
  3219                           tosl	equ	0xFFD
  3220                           pclath	equ	0xFFA
  3221                           tblptru	equ	0xFF8
  3222                           tblptrh	equ	0xFF7
  3223                           tblptrl	equ	0xFF6
  3224                           tablat	equ	0xFF5
  3225                           prodh	equ	0xFF4
  3226                           prodl	equ	0xFF3
  3227                           intcon	equ	0xFF2
  3228                           indf0	equ	0xFEF
  3229                           postinc0	equ	0xFEE
  3230                           plusw0	equ	0xFEB
  3231                           fsr0h	equ	0xFEA
  3232                           fsr0l	equ	0xFE9
  3233                           wreg	equ	0xFE8
  3234                           postinc1	equ	0xFE6
  3235                           postdec1	equ	0xFE5
  3236                           plusw1	equ	0xFE3
  3237                           fsr1h	equ	0xFE2
  3238                           fsr1l	equ	0xFE1
  3239                           indf2	equ	0xFDF
  3240                           postinc2	equ	0xFDE
  3241                           postdec2	equ	0xFDD
  3242                           plusw2	equ	0xFDB
  3243                           fsr2h	equ	0xFDA
  3244                           fsr2l	equ	0xFD9
  3245                           status	equ	0xFD8
  3246                           
  3247 ;; *************** function _sendPacket *****************
  3248 ;; Defined at:
  3249 ;;		line 108 in file "main.c"
  3250 ;; Parameters:    Size  Location     Type
  3251 ;;		None
  3252 ;; Auto vars:     Size  Location     Type
  3253 ;;		None
  3254 ;; Return value:  Size  Location     Type
  3255 ;;                  1    wreg      void 
  3256 ;; Registers used:
  3257 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3258 ;; Tracked objects:
  3259 ;;		On entry : 3F/0
  3260 ;;		On exit  : 3C/0
  3261 ;;		Unchanged: 0/0
  3262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3263 ;;      Params:         0       0       0       0       0       0       0       0       0
  3264 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3265 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3266 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3267 ;;Total ram usage:        0 bytes
  3268 ;; Hardware stack levels used:    1
  3269 ;; Hardware stack levels required when called:   14
  3270 ;; This function calls:
  3271 ;;		_LORAWAN_Send
  3272 ;; This function is called by:
  3273 ;;		_main
  3274 ;; This function uses a non-reentrant model
  3275 ;;
  3276                           
  3277                           	psect	text1
  3278  005E20                     __ptext1:
  3279                           	opt stack 0
  3280  005E20                     _sendPacket:
  3281                           	opt stack 16
  3282                           
  3283                           ; BSR set to: 0
  3284                           ;main.c: 110: payload[0] = 0xFF00;
  3285                           
  3286                           ; BSR set to: 1
  3287                           ;incstack = 0
  3288  005E20  0101               	movlb	1	; () banked
  3289  005E22  69C6               	setf	(_payload+1)& (0+255),b
  3290  005E24  0E00               	movlw	0
  3291  005E26  6FC5               	movwf	_payload& (0+255),b
  3292                           
  3293                           ; BSR set to: 1
  3294                           ;main.c: 113: count++;
  3295  005E28  0E02               	movlw	2
  3296  005E2A  6F6B               	movwf	LORAWAN_Send@port& (0+255),b
  3297  005E2C  0EC5               	movlw	low _payload
  3298  005E2E  6F6C               	movwf	LORAWAN_Send@buffer& (0+255),b
  3299  005E30  0E01               	movlw	high _payload
  3300  005E32  6F6D               	movwf	(LORAWAN_Send@buffer+1)& (0+255),b
  3301  005E34  0E02               	movlw	2
  3302  005E36  6F6E               	movwf	LORAWAN_Send@bufferLength& (0+255),b
  3303  005E38  0E00               	movlw	0
  3304  005E3A  EF7B  F01E         	goto	_LORAWAN_Send
  3305  005E3E                     __end_of_sendPacket:
  3306                           	opt stack 0
  3307                           tosu	equ	0xFFF
  3308                           tosh	equ	0xFFE
  3309                           tosl	equ	0xFFD
  3310                           pclath	equ	0xFFA
  3311                           tblptru	equ	0xFF8
  3312                           tblptrh	equ	0xFF7
  3313                           tblptrl	equ	0xFF6
  3314                           tablat	equ	0xFF5
  3315                           prodh	equ	0xFF4
  3316                           prodl	equ	0xFF3
  3317                           intcon	equ	0xFF2
  3318                           indf0	equ	0xFEF
  3319                           postinc0	equ	0xFEE
  3320                           plusw0	equ	0xFEB
  3321                           fsr0h	equ	0xFEA
  3322                           fsr0l	equ	0xFE9
  3323                           wreg	equ	0xFE8
  3324                           postinc1	equ	0xFE6
  3325                           postdec1	equ	0xFE5
  3326                           plusw1	equ	0xFE3
  3327                           fsr1h	equ	0xFE2
  3328                           fsr1l	equ	0xFE1
  3329                           indf2	equ	0xFDF
  3330                           postinc2	equ	0xFDE
  3331                           postdec2	equ	0xFDD
  3332                           plusw2	equ	0xFDB
  3333                           fsr2h	equ	0xFDA
  3334                           fsr2l	equ	0xFD9
  3335                           status	equ	0xFD8
  3336                           
  3337 ;; *************** function _flash *****************
  3338 ;; Defined at:
  3339 ;;		line 126 in file "main.c"
  3340 ;; Parameters:    Size  Location     Type
  3341 ;;		None
  3342 ;; Auto vars:     Size  Location     Type
  3343 ;;  x               1    1[BANK0 ] unsigned char 
  3344 ;; Return value:  Size  Location     Type
  3345 ;;                  1    wreg      void 
  3346 ;; Registers used:
  3347 ;;		wreg, status,2, status,0
  3348 ;; Tracked objects:
  3349 ;;		On entry : 3F/1
  3350 ;;		On exit  : 3F/0
  3351 ;;		Unchanged: 0/0
  3352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3353 ;;      Params:         0       0       0       0       0       0       0       0       0
  3354 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3355 ;;      Temps:          0       1       0       0       0       0       0       0       0
  3356 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3357 ;;Total ram usage:        2 bytes
  3358 ;; Hardware stack levels used:    1
  3359 ;; Hardware stack levels required when called:    7
  3360 ;; This function calls:
  3361 ;;		Nothing
  3362 ;; This function is called by:
  3363 ;;		_main
  3364 ;; This function uses a non-reentrant model
  3365 ;;
  3366                           
  3367                           	psect	text2
  3368  0052C6                     __ptext2:
  3369                           	opt stack 0
  3370  0052C6                     _flash:
  3371                           	opt stack 23
  3372                           
  3373                           ; BSR set to: 1
  3374                           ;main.c: 127: for(uint8_t x = 0; x < 10; x++){
  3375                           
  3376                           ;incstack = 0
  3377  0052C6  0100               	movlb	0	; () banked
  3378  0052C8  6B61               	clrf	flash@x& (0+255),b
  3379  0052CA                     l11714:
  3380  0052CA  0E01               	movlw	1
  3381                           
  3382                           ; BSR set to: 0
  3383  0052CC  A47B               	btfss	3963,2,c	;volatile
  3384  0052CE  0E00               	movlw	0
  3385  0052D0  0AFF               	xorlw	255
  3386  0052D2  6F60               	movwf	??_flash& (0+255),b
  3387  0052D4  4760               	rlncf	??_flash& (0+255),f,b
  3388  0052D6  4760               	rlncf	??_flash& (0+255),f,b
  3389  0052D8  507B               	movf	3963,w,c	;volatile
  3390  0052DA  1960               	xorwf	??_flash& (0+255),w,b
  3391  0052DC  0BFB               	andlw	-5
  3392  0052DE  1960               	xorwf	??_flash& (0+255),w,b
  3393  0052E0  6E7B               	movwf	3963,c	;volatile
  3394                           
  3395                           ; BSR set to: 0
  3396                           ;main.c: 129: _delay((unsigned long)((25)*(16000000/4000.0)));
  3397  0052E2  0E82               	movlw	130
  3398  0052E4  0100               	movlb	0	; () banked
  3399  0052E6  6F60               	movwf	??_flash& (0+255),b
  3400  0052E8  0EDD               	movlw	221
  3401  0052EA                     u19807:
  3402  0052EA  2EE8               	decfsz	wreg,f,c
  3403  0052EC  D7FE               	bra	u19807
  3404  0052EE  2F60               	decfsz	??_flash& (0+255),f,b
  3405  0052F0  D7FC               	bra	u19807
  3406  0052F2  D000               	nop2	
  3407                           
  3408                           ;main.c: 130: _delay((unsigned long)((25)*(16000000/4000.0)));
  3409  0052F4  0E82               	movlw	130
  3410  0052F6  0100               	movlb	0	; () banked
  3411  0052F8  6F60               	movwf	??_flash& (0+255),b
  3412  0052FA  0EDD               	movlw	221
  3413  0052FC                     u19817:
  3414  0052FC  2EE8               	decfsz	wreg,f,c
  3415  0052FE  D7FE               	bra	u19817
  3416  005300  2F60               	decfsz	??_flash& (0+255),f,b
  3417  005302  D7FC               	bra	u19817
  3418  005304  D000               	nop2	
  3419  005306  0100               	movlb	0	; () banked
  3420  005308  2B61               	incf	flash@x& (0+255),f,b
  3421                           
  3422                           ; BSR set to: 0
  3423  00530A  0E09               	movlw	9
  3424  00530C  6561               	cpfsgt	flash@x& (0+255),b
  3425  00530E  D7DD               	goto	l11714
  3426                           
  3427                           ; BSR set to: 0
  3428                           
  3429                           ;main.c: 131: }
  3430                           ;main.c: 132: do { LATCbits.LATC2 = 0; } while(0);
  3431  005310  947B               	bcf	3963,2,c	;volatile
  3432                           
  3433                           ; BSR set to: 0
  3434  005312  0C09               	retlw	9	;funcret
  3435  005314                     __end_of_flash:
  3436                           	opt stack 0
  3437                           tosu	equ	0xFFF
  3438                           tosh	equ	0xFFE
  3439                           tosl	equ	0xFFD
  3440                           pclath	equ	0xFFA
  3441                           tblptru	equ	0xFF8
  3442                           tblptrh	equ	0xFF7
  3443                           tblptrl	equ	0xFF6
  3444                           tablat	equ	0xFF5
  3445                           prodh	equ	0xFF4
  3446                           prodl	equ	0xFF3
  3447                           intcon	equ	0xFF2
  3448                           indf0	equ	0xFEF
  3449                           postinc0	equ	0xFEE
  3450                           plusw0	equ	0xFEB
  3451                           fsr0h	equ	0xFEA
  3452                           fsr0l	equ	0xFE9
  3453                           wreg	equ	0xFE8
  3454                           postinc1	equ	0xFE6
  3455                           postdec1	equ	0xFE5
  3456                           plusw1	equ	0xFE3
  3457                           fsr1h	equ	0xFE2
  3458                           fsr1l	equ	0xFE1
  3459                           indf2	equ	0xFDF
  3460                           postinc2	equ	0xFDE
  3461                           postdec2	equ	0xFDD
  3462                           plusw2	equ	0xFDB
  3463                           fsr2h	equ	0xFDA
  3464                           fsr2l	equ	0xFD9
  3465                           status	equ	0xFD8
  3466                           
  3467 ;; *************** function _SYSTEM_Initialize *****************
  3468 ;; Defined at:
  3469 ;;		line 107 in file "mcc_generated_files/mcc.c"
  3470 ;; Parameters:    Size  Location     Type
  3471 ;;		None
  3472 ;; Auto vars:     Size  Location     Type
  3473 ;;		None
  3474 ;; Return value:  Size  Location     Type
  3475 ;;                  1    wreg      void 
  3476 ;; Registers used:
  3477 ;;		wreg, status,2, status,0, cstack
  3478 ;; Tracked objects:
  3479 ;;		On entry : 0/0
  3480 ;;		On exit  : 3F/0
  3481 ;;		Unchanged: 0/0
  3482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3483 ;;      Params:         0       0       0       0       0       0       0       0       0
  3484 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3485 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3486 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3487 ;;Total ram usage:        0 bytes
  3488 ;; Hardware stack levels used:    1
  3489 ;; Hardware stack levels required when called:   10
  3490 ;; This function calls:
  3491 ;;		_EXT_INT_Initialize
  3492 ;;		_INTERRUPT_Initialize
  3493 ;;		_LORAWAN_PlatformInit
  3494 ;;		_OSCILLATOR_Initialize
  3495 ;;		_PIN_MANAGER_Initialize
  3496 ;;		_SPI2_Initialize
  3497 ;;		_TMR1_Initialize
  3498 ;; This function is called by:
  3499 ;;		_main
  3500 ;; This function uses a non-reentrant model
  3501 ;;
  3502                           
  3503                           	psect	text3
  3504  005ED4                     __ptext3:
  3505                           	opt stack 0
  3506  005ED4                     _SYSTEM_Initialize:
  3507                           	opt stack 20
  3508                           
  3509                           ;mcc.c: 110: INTERRUPT_Initialize();
  3510                           
  3511                           ; BSR set to: 0
  3512                           ;incstack = 0
  3513  005ED4  EC1D  F031         	call	_INTERRUPT_Initialize	;wreg free
  3514                           
  3515                           ;mcc.c: 111: PIN_MANAGER_Initialize();
  3516  005ED8  EC48  F01B         	call	_PIN_MANAGER_Initialize	;wreg free
  3517                           
  3518                           ;mcc.c: 112: OSCILLATOR_Initialize();
  3519  005EDC  EC4A  F030         	call	_OSCILLATOR_Initialize	;wreg free
  3520                           
  3521                           ; BSR set to: 14
  3522                           ;mcc.c: 113: SPI2_Initialize();
  3523  005EE0  EC84  F030         	call	_SPI2_Initialize	;wreg free
  3524                           
  3525                           ; BSR set to: 14
  3526                           ;mcc.c: 114: EXT_INT_Initialize();
  3527  005EE4  EC69  F028         	call	_EXT_INT_Initialize	;wreg free
  3528                           
  3529                           ; BSR set to: 14
  3530                           ;mcc.c: 115: TMR1_Initialize();
  3531  005EE8  ECDC  F02A         	call	_TMR1_Initialize	;wreg free
  3532                           
  3533                           ; BSR set to: 0
  3534                           ;mcc.c: 116: LORAWAN_PlatformInit();
  3535  005EEC  EFD0  F02E         	goto	_LORAWAN_PlatformInit	;wreg free
  3536  005EF0                     __end_of_SYSTEM_Initialize:
  3537                           	opt stack 0
  3538                           tosu	equ	0xFFF
  3539                           tosh	equ	0xFFE
  3540                           tosl	equ	0xFFD
  3541                           pclath	equ	0xFFA
  3542                           tblptru	equ	0xFF8
  3543                           tblptrh	equ	0xFF7
  3544                           tblptrl	equ	0xFF6
  3545                           tablat	equ	0xFF5
  3546                           prodh	equ	0xFF4
  3547                           prodl	equ	0xFF3
  3548                           intcon	equ	0xFF2
  3549                           indf0	equ	0xFEF
  3550                           postinc0	equ	0xFEE
  3551                           plusw0	equ	0xFEB
  3552                           fsr0h	equ	0xFEA
  3553                           fsr0l	equ	0xFE9
  3554                           wreg	equ	0xFE8
  3555                           postinc1	equ	0xFE6
  3556                           postdec1	equ	0xFE5
  3557                           plusw1	equ	0xFE3
  3558                           fsr1h	equ	0xFE2
  3559                           fsr1l	equ	0xFE1
  3560                           indf2	equ	0xFDF
  3561                           postinc2	equ	0xFDE
  3562                           postdec2	equ	0xFDD
  3563                           plusw2	equ	0xFDB
  3564                           fsr2h	equ	0xFDA
  3565                           fsr2l	equ	0xFD9
  3566                           status	equ	0xFD8
  3567                           
  3568 ;; *************** function _TMR1_Initialize *****************
  3569 ;; Defined at:
  3570 ;;		line 63 in file "mcc_generated_files/tmr1.c"
  3571 ;; Parameters:    Size  Location     Type
  3572 ;;		None
  3573 ;; Auto vars:     Size  Location     Type
  3574 ;;		None
  3575 ;; Return value:  Size  Location     Type
  3576 ;;                  1    wreg      void 
  3577 ;; Registers used:
  3578 ;;		wreg, status,2, status,0, cstack
  3579 ;; Tracked objects:
  3580 ;;		On entry : 3F/E
  3581 ;;		On exit  : 3F/0
  3582 ;;		Unchanged: 0/0
  3583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3584 ;;      Params:         0       0       0       0       0       0       0       0       0
  3585 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3586 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3587 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3588 ;;Total ram usage:        2 bytes
  3589 ;; Hardware stack levels used:    1
  3590 ;; Hardware stack levels required when called:    8
  3591 ;; This function calls:
  3592 ;;		_TMR1_SetInterruptHandler
  3593 ;;		_TMR1_StartTimer
  3594 ;; This function is called by:
  3595 ;;		_SYSTEM_Initialize
  3596 ;; This function uses a non-reentrant model
  3597 ;;
  3598                           
  3599                           	psect	text4
  3600  0055B8                     __ptext4:
  3601                           	opt stack 0
  3602  0055B8                     _TMR1_Initialize:
  3603                           	opt stack 21
  3604                           
  3605                           ; BSR set to: 14
  3606                           ;tmr1.c: 68: T1CON = 0x34;
  3607                           
  3608                           ; BSR set to: 0
  3609                           ;incstack = 0
  3610  0055B8  0E34               	movlw	52
  3611  0055BA  6ECF               	movwf	4047,c	;volatile
  3612                           
  3613                           ; BSR set to: 14
  3614                           ;tmr1.c: 71: T1GCON = 0x00;
  3615  0055BC  6AD0               	clrf	4048,c	;volatile
  3616                           
  3617                           ; BSR set to: 14
  3618                           ;tmr1.c: 74: T1GATE = 0x00;
  3619  0055BE  6AD1               	clrf	4049,c	;volatile
  3620                           
  3621                           ;tmr1.c: 77: T1CLK = 0x01;
  3622  0055C0  0E01               	movlw	1
  3623  0055C2  6ED2               	movwf	4050,c	;volatile
  3624                           
  3625                           ;tmr1.c: 80: TMR1H = 0x0B;
  3626  0055C4  0E0B               	movlw	11
  3627  0055C6  6ECE               	movwf	4046,c	;volatile
  3628                           
  3629                           ;tmr1.c: 83: TMR1L = 0xDC;
  3630  0055C8  0EDC               	movlw	220
  3631  0055CA  6ECD               	movwf	4045,c	;volatile
  3632                           
  3633                           ; BSR set to: 14
  3634                           ;tmr1.c: 86: timer1ReloadVal=(TMR1H << 8) | TMR1L;
  3635  0055CC  50CD               	movf	4045,w,c	;volatile
  3636  0055CE  CFCE F062          	movff	4046,??_TMR1_Initialize	;volatile
  3637  0055D2  0100               	movlb	0	; () banked
  3638  0055D4  6B63               	clrf	(??_TMR1_Initialize+1)& (0+255),b
  3639  0055D6  C062  F063         	movff	??_TMR1_Initialize,??_TMR1_Initialize+1
  3640  0055DA  6B62               	clrf	??_TMR1_Initialize& (0+255),b
  3641  0055DC  1162               	iorwf	??_TMR1_Initialize& (0+255),w,b
  3642  0055DE  6E5C               	movwf	_timer1ReloadVal,c	;volatile
  3643  0055E0  5163               	movf	(??_TMR1_Initialize+1)& (0+255),w,b
  3644  0055E2  6E5D               	movwf	_timer1ReloadVal+1,c	;volatile
  3645                           
  3646                           ; BSR set to: 0
  3647                           ;tmr1.c: 89: PIR5bits.TMR1IF = 0;
  3648  0055E4  010E               	movlb	14	; () banked
  3649  0055E6  9138               	bcf	56,0,b	;volatile
  3650                           
  3651                           ; BSR set to: 14
  3652                           ;tmr1.c: 92: PIE5bits.TMR1IE = 1;
  3653  0055E8  812E               	bsf	46,0,b	;volatile
  3654                           
  3655                           ; BSR set to: 14
  3656                           ;tmr1.c: 95: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
  3657  0055EA  0E62               	movlw	low _TMR1_DefaultInterruptHandler
  3658  0055EC  0100               	movlb	0	; () banked
  3659  0055EE  6F60               	movwf	TMR1_SetInterruptHandler@InterruptHandler& (0+255),b
  3660  0055F0  0E62               	movlw	high _TMR1_DefaultInterruptHandler
  3661  0055F2  6F61               	movwf	(TMR1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  3662  0055F4  ECA2  F030         	call	_TMR1_SetInterruptHandler	;wreg free
  3663                           
  3664                           ; BSR set to: 0
  3665                           ;tmr1.c: 98: TMR1_StartTimer();
  3666  0055F8  EF19  F031         	goto	_TMR1_StartTimer	;wreg free
  3667  0055FC                     __end_of_TMR1_Initialize:
  3668                           	opt stack 0
  3669                           tosu	equ	0xFFF
  3670                           tosh	equ	0xFFE
  3671                           tosl	equ	0xFFD
  3672                           pclath	equ	0xFFA
  3673                           tblptru	equ	0xFF8
  3674                           tblptrh	equ	0xFF7
  3675                           tblptrl	equ	0xFF6
  3676                           tablat	equ	0xFF5
  3677                           prodh	equ	0xFF4
  3678                           prodl	equ	0xFF3
  3679                           intcon	equ	0xFF2
  3680                           indf0	equ	0xFEF
  3681                           postinc0	equ	0xFEE
  3682                           plusw0	equ	0xFEB
  3683                           fsr0h	equ	0xFEA
  3684                           fsr0l	equ	0xFE9
  3685                           wreg	equ	0xFE8
  3686                           postinc1	equ	0xFE6
  3687                           postdec1	equ	0xFE5
  3688                           plusw1	equ	0xFE3
  3689                           fsr1h	equ	0xFE2
  3690                           fsr1l	equ	0xFE1
  3691                           indf2	equ	0xFDF
  3692                           postinc2	equ	0xFDE
  3693                           postdec2	equ	0xFDD
  3694                           plusw2	equ	0xFDB
  3695                           fsr2h	equ	0xFDA
  3696                           fsr2l	equ	0xFD9
  3697                           status	equ	0xFD8
  3698                           
  3699 ;; *************** function _TMR1_StartTimer *****************
  3700 ;; Defined at:
  3701 ;;		line 101 in file "mcc_generated_files/tmr1.c"
  3702 ;; Parameters:    Size  Location     Type
  3703 ;;		None
  3704 ;; Auto vars:     Size  Location     Type
  3705 ;;		None
  3706 ;; Return value:  Size  Location     Type
  3707 ;;                  1    wreg      void 
  3708 ;; Registers used:
  3709 ;;		None
  3710 ;; Tracked objects:
  3711 ;;		On entry : 3F/0
  3712 ;;		On exit  : 3F/0
  3713 ;;		Unchanged: 3F/0
  3714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3715 ;;      Params:         0       0       0       0       0       0       0       0       0
  3716 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3717 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3718 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3719 ;;Total ram usage:        0 bytes
  3720 ;; Hardware stack levels used:    1
  3721 ;; Hardware stack levels required when called:    7
  3722 ;; This function calls:
  3723 ;;		Nothing
  3724 ;; This function is called by:
  3725 ;;		_TMR1_Initialize
  3726 ;; This function uses a non-reentrant model
  3727 ;;
  3728                           
  3729                           	psect	text5
  3730  006232                     __ptext5:
  3731                           	opt stack 0
  3732  006232                     _TMR1_StartTimer:
  3733                           	opt stack 21
  3734                           
  3735                           ; BSR set to: 0
  3736                           ;tmr1.c: 104: T1CONbits.TMR1ON = 1;
  3737                           
  3738                           ; BSR set to: 0
  3739                           ;incstack = 0
  3740  006232  80CF               	bsf	4047,0,c	;volatile
  3741                           
  3742                           ; BSR set to: 0
  3743  006234  0012               	return		;funcret
  3744  006236                     __end_of_TMR1_StartTimer:
  3745                           	opt stack 0
  3746                           tosu	equ	0xFFF
  3747                           tosh	equ	0xFFE
  3748                           tosl	equ	0xFFD
  3749                           pclath	equ	0xFFA
  3750                           tblptru	equ	0xFF8
  3751                           tblptrh	equ	0xFF7
  3752                           tblptrl	equ	0xFF6
  3753                           tablat	equ	0xFF5
  3754                           prodh	equ	0xFF4
  3755                           prodl	equ	0xFF3
  3756                           intcon	equ	0xFF2
  3757                           indf0	equ	0xFEF
  3758                           postinc0	equ	0xFEE
  3759                           plusw0	equ	0xFEB
  3760                           fsr0h	equ	0xFEA
  3761                           fsr0l	equ	0xFE9
  3762                           wreg	equ	0xFE8
  3763                           postinc1	equ	0xFE6
  3764                           postdec1	equ	0xFE5
  3765                           plusw1	equ	0xFE3
  3766                           fsr1h	equ	0xFE2
  3767                           fsr1l	equ	0xFE1
  3768                           indf2	equ	0xFDF
  3769                           postinc2	equ	0xFDE
  3770                           postdec2	equ	0xFDD
  3771                           plusw2	equ	0xFDB
  3772                           fsr2h	equ	0xFDA
  3773                           fsr2l	equ	0xFD9
  3774                           status	equ	0xFD8
  3775                           
  3776 ;; *************** function _SPI2_Initialize *****************
  3777 ;; Defined at:
  3778 ;;		line 63 in file "mcc_generated_files/spi2.c"
  3779 ;; Parameters:    Size  Location     Type
  3780 ;;		None
  3781 ;; Auto vars:     Size  Location     Type
  3782 ;;		None
  3783 ;; Return value:  Size  Location     Type
  3784 ;;                  1    wreg      void 
  3785 ;; Registers used:
  3786 ;;		wreg, status,2
  3787 ;; Tracked objects:
  3788 ;;		On entry : 3F/E
  3789 ;;		On exit  : 3F/E
  3790 ;;		Unchanged: 0/0
  3791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3792 ;;      Params:         0       0       0       0       0       0       0       0       0
  3793 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3794 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3795 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3796 ;;Total ram usage:        0 bytes
  3797 ;; Hardware stack levels used:    1
  3798 ;; Hardware stack levels required when called:    7
  3799 ;; This function calls:
  3800 ;;		Nothing
  3801 ;; This function is called by:
  3802 ;;		_SYSTEM_Initialize
  3803 ;; This function uses a non-reentrant model
  3804 ;;
  3805                           
  3806                           	psect	text6
  3807  006108                     __ptext6:
  3808                           	opt stack 0
  3809  006108                     _SPI2_Initialize:
  3810                           	opt stack 22
  3811                           
  3812                           ; BSR set to: 14
  3813                           ;spi2.c: 68: SSP2STAT = 0x40;
  3814                           
  3815                           ; BSR set to: 0
  3816                           ;incstack = 0
  3817  006108  0E40               	movlw	64
  3818  00610A  6FD8               	movwf	216,b	;volatile
  3819                           
  3820                           ;spi2.c: 71: SSP2CON1 = 0x20;
  3821  00610C  0E20               	movlw	32
  3822  00610E  6FD9               	movwf	217,b	;volatile
  3823                           
  3824                           ; BSR set to: 14
  3825                           ;spi2.c: 74: SSP2ADD = 0x00;
  3826  006110  6BD6               	clrf	214,b	;volatile
  3827                           
  3828                           ; BSR set to: 14
  3829  006112  0012               	return		;funcret
  3830  006114                     __end_of_SPI2_Initialize:
  3831                           	opt stack 0
  3832                           tosu	equ	0xFFF
  3833                           tosh	equ	0xFFE
  3834                           tosl	equ	0xFFD
  3835                           pclath	equ	0xFFA
  3836                           tblptru	equ	0xFF8
  3837                           tblptrh	equ	0xFF7
  3838                           tblptrl	equ	0xFF6
  3839                           tablat	equ	0xFF5
  3840                           prodh	equ	0xFF4
  3841                           prodl	equ	0xFF3
  3842                           intcon	equ	0xFF2
  3843                           indf0	equ	0xFEF
  3844                           postinc0	equ	0xFEE
  3845                           plusw0	equ	0xFEB
  3846                           fsr0h	equ	0xFEA
  3847                           fsr0l	equ	0xFE9
  3848                           wreg	equ	0xFE8
  3849                           postinc1	equ	0xFE6
  3850                           postdec1	equ	0xFE5
  3851                           plusw1	equ	0xFE3
  3852                           fsr1h	equ	0xFE2
  3853                           fsr1l	equ	0xFE1
  3854                           indf2	equ	0xFDF
  3855                           postinc2	equ	0xFDE
  3856                           postdec2	equ	0xFDD
  3857                           plusw2	equ	0xFDB
  3858                           fsr2h	equ	0xFDA
  3859                           fsr2l	equ	0xFD9
  3860                           status	equ	0xFD8
  3861                           
  3862 ;; *************** function _PIN_MANAGER_Initialize *****************
  3863 ;; Defined at:
  3864 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  3865 ;; Parameters:    Size  Location     Type
  3866 ;;		None
  3867 ;; Auto vars:     Size  Location     Type
  3868 ;;  state           1    2[BANK0 ] unsigned char 
  3869 ;; Return value:  Size  Location     Type
  3870 ;;                  1    wreg      void 
  3871 ;; Registers used:
  3872 ;;		wreg, status,2, status,0, cstack
  3873 ;; Tracked objects:
  3874 ;;		On entry : 0/0
  3875 ;;		On exit  : 0/0
  3876 ;;		Unchanged: 0/0
  3877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3878 ;;      Params:         0       0       0       0       0       0       0       0       0
  3879 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3880 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3881 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3882 ;;Total ram usage:        1 bytes
  3883 ;; Hardware stack levels used:    1
  3884 ;; Hardware stack levels required when called:    8
  3885 ;; This function calls:
  3886 ;;		_IOCBF4_SetInterruptHandler
  3887 ;; This function is called by:
  3888 ;;		_SYSTEM_Initialize
  3889 ;; This function uses a non-reentrant model
  3890 ;;
  3891                           
  3892                           	psect	text7
  3893  003690                     __ptext7:
  3894                           	opt stack 0
  3895  003690                     _PIN_MANAGER_Initialize:
  3896                           	opt stack 21
  3897                           
  3898                           ;pin_manager.c: 57: LATE = 0x00;
  3899                           
  3900                           ; BSR set to: 14
  3901                           ;incstack = 0
  3902  003690  6A7D               	clrf	3965,c	;volatile
  3903                           
  3904                           ;pin_manager.c: 58: LATD = 0x00;
  3905  003692  6A7C               	clrf	3964,c	;volatile
  3906                           
  3907                           ;pin_manager.c: 59: LATA = 0x00;
  3908  003694  6A79               	clrf	3961,c	;volatile
  3909                           
  3910                           ;pin_manager.c: 60: LATF = 0x00;
  3911  003696  6A7E               	clrf	3966,c	;volatile
  3912                           
  3913                           ;pin_manager.c: 61: LATB = 0x00;
  3914  003698  6A7A               	clrf	3962,c	;volatile
  3915                           
  3916                           ;pin_manager.c: 62: LATG = 0x00;
  3917  00369A  6A7F               	clrf	3967,c	;volatile
  3918                           
  3919                           ;pin_manager.c: 63: LATC = 0x00;
  3920  00369C  6A7B               	clrf	3963,c	;volatile
  3921                           
  3922                           ;pin_manager.c: 64: LATH = 0x00;
  3923  00369E  6A80               	clrf	3968,c	;volatile
  3924                           
  3925                           ;pin_manager.c: 69: TRISE = 0xFF;
  3926  0036A0  6885               	setf	3973,c	;volatile
  3927                           
  3928                           ;pin_manager.c: 70: TRISF = 0xFF;
  3929  0036A2  6886               	setf	3974,c	;volatile
  3930                           
  3931                           ;pin_manager.c: 71: TRISA = 0xFF;
  3932  0036A4  6881               	setf	3969,c	;volatile
  3933                           
  3934                           ;pin_manager.c: 72: TRISG = 0xDF;
  3935  0036A6  0EDF               	movlw	223
  3936  0036A8  6E87               	movwf	3975,c	;volatile
  3937                           
  3938                           ;pin_manager.c: 73: TRISB = 0xFF;
  3939  0036AA  6882               	setf	3970,c	;volatile
  3940                           
  3941                           ;pin_manager.c: 74: TRISH = 0x0F;
  3942  0036AC  0E0F               	movlw	15
  3943  0036AE  6E88               	movwf	3976,c	;volatile
  3944                           
  3945                           ;pin_manager.c: 75: TRISC = 0xF9;
  3946  0036B0  0EF9               	movlw	249
  3947  0036B2  6E83               	movwf	3971,c	;volatile
  3948                           
  3949                           ;pin_manager.c: 76: TRISD = 0x9F;
  3950  0036B4  0E9F               	movlw	159
  3951  0036B6  6E84               	movwf	3972,c	;volatile
  3952                           
  3953                           ;pin_manager.c: 81: ANSELB = 0xE0;
  3954  0036B8  0EE0               	movlw	224
  3955  0036BA  010E               	movlb	14	; () banked
  3956  0036BC  6F9A               	movwf	154,b	;volatile
  3957                           
  3958                           ;pin_manager.c: 82: ANSELD = 0x7F;
  3959  0036BE  0E7F               	movlw	127
  3960  0036C0  6FA7               	movwf	167,b	;volatile
  3961                           
  3962                           ; BSR set to: 14
  3963                           ;pin_manager.c: 83: ANSELE = 0xFF;
  3964  0036C2  69AF               	setf	175,b	;volatile
  3965                           
  3966                           ; BSR set to: 14
  3967                           ;pin_manager.c: 84: ANSELG = 0xFF;
  3968  0036C4  69BC               	setf	188,b	;volatile
  3969                           
  3970                           ; BSR set to: 14
  3971                           ;pin_manager.c: 85: ANSELF = 0xFF;
  3972  0036C6  69B4               	setf	180,b	;volatile
  3973                           
  3974                           ; BSR set to: 14
  3975                           ;pin_manager.c: 86: ANSELA = 0xFF;
  3976  0036C8  6992               	setf	146,b	;volatile
  3977                           
  3978                           ; BSR set to: 14
  3979                           ;pin_manager.c: 91: WPUD = 0xFF;
  3980  0036CA  69A6               	setf	166,b	;volatile
  3981                           
  3982                           ; BSR set to: 14
  3983                           ;pin_manager.c: 92: WPUF = 0xFF;
  3984  0036CC  69B3               	setf	179,b	;volatile
  3985                           
  3986                           ; BSR set to: 14
  3987                           ;pin_manager.c: 93: WPUE = 0xFF;
  3988  0036CE  69AE               	setf	174,b	;volatile
  3989                           
  3990                           ; BSR set to: 14
  3991                           ;pin_manager.c: 94: WPUB = 0xFF;
  3992  0036D0  6999               	setf	153,b	;volatile
  3993                           
  3994                           ; BSR set to: 14
  3995                           ;pin_manager.c: 95: WPUG = 0xFF;
  3996  0036D2  69BB               	setf	187,b	;volatile
  3997                           
  3998                           ; BSR set to: 14
  3999                           ;pin_manager.c: 96: WPUA = 0xFF;
  4000  0036D4  6991               	setf	145,b	;volatile
  4001                           
  4002                           ; BSR set to: 14
  4003                           ;pin_manager.c: 97: WPUC = 0xFF;
  4004  0036D6  69A1               	setf	161,b	;volatile
  4005                           
  4006                           ;pin_manager.c: 98: WPUH = 0x0F;
  4007  0036D8  0E0F               	movlw	15
  4008  0036DA  6FC0               	movwf	192,b	;volatile
  4009                           
  4010                           ; BSR set to: 14
  4011                           ;pin_manager.c: 103: ODCONE = 0x00;
  4012  0036DC  6BAD               	clrf	173,b	;volatile
  4013                           
  4014                           ; BSR set to: 14
  4015                           ;pin_manager.c: 104: ODCONF = 0x00;
  4016  0036DE  6BB2               	clrf	178,b	;volatile
  4017                           
  4018                           ; BSR set to: 14
  4019                           ;pin_manager.c: 105: ODCONA = 0x00;
  4020  0036E0  6B90               	clrf	144,b	;volatile
  4021                           
  4022                           ; BSR set to: 14
  4023                           ;pin_manager.c: 106: ODCONG = 0x00;
  4024  0036E2  6BBA               	clrf	186,b	;volatile
  4025                           
  4026                           ; BSR set to: 14
  4027                           ;pin_manager.c: 107: ODCONB = 0x00;
  4028  0036E4  6B98               	clrf	152,b	;volatile
  4029                           
  4030                           ; BSR set to: 14
  4031                           ;pin_manager.c: 108: ODCONH = 0x00;
  4032  0036E6  6BBF               	clrf	191,b	;volatile
  4033                           
  4034                           ; BSR set to: 14
  4035                           ;pin_manager.c: 109: ODCONC = 0x00;
  4036  0036E8  6BA0               	clrf	160,b	;volatile
  4037                           
  4038                           ; BSR set to: 14
  4039                           ;pin_manager.c: 110: ODCOND = 0x00;
  4040  0036EA  6BA5               	clrf	165,b	;volatile
  4041                           
  4042                           ; BSR set to: 14
  4043                           ;pin_manager.c: 117: IOCBFbits.IOCBF4 = 0;
  4044  0036EC  9993               	bcf	147,4,b	;volatile
  4045                           
  4046                           ; BSR set to: 14
  4047                           ;pin_manager.c: 119: IOCBNbits.IOCBN4 = 1;
  4048  0036EE  8994               	bsf	148,4,b	;volatile
  4049                           
  4050                           ; BSR set to: 14
  4051                           ;pin_manager.c: 121: IOCBPbits.IOCBP4 = 1;
  4052  0036F0  8995               	bsf	149,4,b	;volatile
  4053                           
  4054                           ; BSR set to: 14
  4055                           ;pin_manager.c: 124: IOCBF4_SetInterruptHandler(IOCBF4_DefaultInterruptHandler);
  4056  0036F2  0E64               	movlw	low _IOCBF4_DefaultInterruptHandler
  4057  0036F4  0100               	movlb	0	; () banked
  4058  0036F6  6F60               	movwf	IOCBF4_SetInterruptHandler@InterruptHandler& (0+255),b
  4059  0036F8  0E62               	movlw	high _IOCBF4_DefaultInterruptHandler
  4060  0036FA  6F61               	movwf	(IOCBF4_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4061  0036FC  ECA7  F030         	call	_IOCBF4_SetInterruptHandler	;wreg free
  4062                           
  4063                           ; BSR set to: 0
  4064                           ;pin_manager.c: 127: PIE0bits.IOCIE = 1;
  4065  003700  010E               	movlb	14	; () banked
  4066  003702  8929               	bsf	41,4,b	;volatile
  4067                           
  4068                           ; BSR set to: 14
  4069                           ;pin_manager.c: 130: bool state = GIE;
  4070  003704  0E00               	movlw	0
  4071  003706  BEF2               	btfsc	intcon,7,c	;volatile
  4072  003708  0E01               	movlw	1
  4073  00370A  0100               	movlb	0	; () banked
  4074  00370C  6F62               	movwf	PIN_MANAGER_Initialize@state& (0+255),b
  4075                           
  4076                           ; BSR set to: 0
  4077                           ;pin_manager.c: 131: GIE = 0;
  4078  00370E  9EF2               	bcf	intcon,7,c	;volatile
  4079                           
  4080                           ; BSR set to: 0
  4081                           ;pin_manager.c: 132: PPSLOCK = 0x55;
  4082                           
  4083                           ; BSR set to: 13
  4084                           ;pin_manager.c: 133: PPSLOCK = 0xAA;
  4085  003710  D825               	call	PL340	;call to abstracted procedure
  4086                           
  4087                           ; BSR set to: 13
  4088                           ;pin_manager.c: 134: PPSLOCKbits.PPSLOCKED = 0x00;
  4089  003712  91EF               	bcf	239,0,b	;volatile
  4090                           
  4091                           ; BSR set to: 13
  4092                           ;pin_manager.c: 136: INT1PPSbits.INT1PPS = 0x09;
  4093  003714  51F1               	movf	241,w,b	;volatile
  4094  003716  0BC0               	andlw	-64
  4095  003718  0909               	iorlw	9
  4096  00371A  6FF1               	movwf	241,b	;volatile
  4097                           
  4098                           ; BSR set to: 13
  4099                           ;pin_manager.c: 137: INT3PPSbits.INT3PPS = 0x0B;
  4100  00371C  51F3               	movf	243,w,b	;volatile
  4101  00371E  0BC0               	andlw	-64
  4102  003720  090B               	iorlw	11
  4103  003722  6FF3               	movwf	243,b	;volatile
  4104                           
  4105                           ; BSR set to: 13
  4106                           ;pin_manager.c: 138: RD5PPS = 0x1C;
  4107  003724  0E1C               	movlw	28
  4108  003726  010E               	movlb	14	; () banked
  4109  003728  6F6F               	movwf	111,b	;volatile
  4110                           
  4111                           ; BSR set to: 14
  4112                           ;pin_manager.c: 139: INT0PPSbits.INT0PPS = 0x08;
  4113  00372A  010D               	movlb	13	; () banked
  4114  00372C  51F0               	movf	240,w,b	;volatile
  4115  00372E  0BC0               	andlw	-64
  4116  003730  0908               	iorlw	8
  4117  003732  6FF0               	movwf	240,b	;volatile
  4118                           
  4119                           ; BSR set to: 13
  4120                           ;pin_manager.c: 140: INT2PPSbits.INT2PPS = 0x0A;
  4121  003734  51F2               	movf	242,w,b	;volatile
  4122  003736  0BC0               	andlw	-64
  4123  003738  090A               	iorlw	10
  4124  00373A  6FF2               	movwf	242,b	;volatile
  4125                           
  4126                           ; BSR set to: 13
  4127                           ;pin_manager.c: 141: RD6PPS = 0x1B;
  4128  00373C  0E1B               	movlw	27
  4129  00373E  010E               	movlb	14	; () banked
  4130  003740  6F70               	movwf	112,b	;volatile
  4131                           
  4132                           ; BSR set to: 14
  4133                           ;pin_manager.c: 142: SSP2DATPPSbits.SSP2DATPPS = 0x1F;
  4134  003742  511D               	movf	29,w,b	;volatile
  4135  003744  0BC0               	andlw	-64
  4136  003746  091F               	iorlw	31
  4137  003748  6F1D               	movwf	29,b	;volatile
  4138                           
  4139                           ; BSR set to: 14
  4140                           ;pin_manager.c: 144: PPSLOCK = 0x55;
  4141                           
  4142                           ; BSR set to: 13
  4143                           ;pin_manager.c: 145: PPSLOCK = 0xAA;
  4144  00374A  D808               	call	PL340	;call to abstracted procedure
  4145                           
  4146                           ; BSR set to: 13
  4147                           ;pin_manager.c: 146: PPSLOCKbits.PPSLOCKED = 0x01;
  4148  00374C  81EF               	bsf	239,0,b	;volatile
  4149                           
  4150                           ; BSR set to: 13
  4151                           ;pin_manager.c: 148: GIE = state;
  4152  00374E  0100               	movlb	0	; () banked
  4153  003750  A162               	btfss	PIN_MANAGER_Initialize@state& (0+255),0,b
  4154  003752  D002               	goto	u11970
  4155  003754  8EF2               	bsf	intcon,7,c	;volatile
  4156  003756  0CAA               	retlw	170
  4157  003758                     u11970:
  4158  003758  9EF2               	bcf	intcon,7,c	;volatile
  4159  00375A  0012               	return		;funcret
  4160  00375C                     __end_of_PIN_MANAGER_Initialize:
  4161                           	opt stack 0
  4162  00375C                     PL340:
  4163                           	opt stack 21
  4164  00375C  0E55               	movlw	85
  4165  00375E  010D               	movlb	13	; () banked
  4166  003760  6FEF               	movwf	239,b	;volatile
  4167  003762  0EAA               	movlw	170
  4168  003764  6FEF               	movwf	239,b	;volatile
  4169  003766  0CAA               	retlw	170
  4170  003768                     __end_ofPL340:
  4171                           	opt stack 0
  4172                           tosu	equ	0xFFF
  4173                           tosh	equ	0xFFE
  4174                           tosl	equ	0xFFD
  4175                           pclath	equ	0xFFA
  4176                           tblptru	equ	0xFF8
  4177                           tblptrh	equ	0xFF7
  4178                           tblptrl	equ	0xFF6
  4179                           tablat	equ	0xFF5
  4180                           prodh	equ	0xFF4
  4181                           prodl	equ	0xFF3
  4182                           intcon	equ	0xFF2
  4183                           indf0	equ	0xFEF
  4184                           postinc0	equ	0xFEE
  4185                           plusw0	equ	0xFEB
  4186                           fsr0h	equ	0xFEA
  4187                           fsr0l	equ	0xFE9
  4188                           wreg	equ	0xFE8
  4189                           postinc1	equ	0xFE6
  4190                           postdec1	equ	0xFE5
  4191                           plusw1	equ	0xFE3
  4192                           fsr1h	equ	0xFE2
  4193                           fsr1l	equ	0xFE1
  4194                           indf2	equ	0xFDF
  4195                           postinc2	equ	0xFDE
  4196                           postdec2	equ	0xFDD
  4197                           plusw2	equ	0xFDB
  4198                           fsr2h	equ	0xFDA
  4199                           fsr2l	equ	0xFD9
  4200                           status	equ	0xFD8
  4201                           
  4202 ;; *************** function _OSCILLATOR_Initialize *****************
  4203 ;; Defined at:
  4204 ;;		line 119 in file "mcc_generated_files/mcc.c"
  4205 ;; Parameters:    Size  Location     Type
  4206 ;;		None
  4207 ;; Auto vars:     Size  Location     Type
  4208 ;;		None
  4209 ;; Return value:  Size  Location     Type
  4210 ;;                  1    wreg      void 
  4211 ;; Registers used:
  4212 ;;		wreg, status,2
  4213 ;; Tracked objects:
  4214 ;;		On entry : 0/0
  4215 ;;		On exit  : 3F/E
  4216 ;;		Unchanged: 0/0
  4217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4218 ;;      Params:         0       0       0       0       0       0       0       0       0
  4219 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4220 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4221 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4222 ;;Total ram usage:        0 bytes
  4223 ;; Hardware stack levels used:    1
  4224 ;; Hardware stack levels required when called:    7
  4225 ;; This function calls:
  4226 ;;		Nothing
  4227 ;; This function is called by:
  4228 ;;		_SYSTEM_Initialize
  4229 ;; This function uses a non-reentrant model
  4230 ;;
  4231                           
  4232                           	psect	text8
  4233  006094                     __ptext8:
  4234                           	opt stack 0
  4235  006094                     _OSCILLATOR_Initialize:
  4236                           	opt stack 22
  4237                           
  4238                           ;mcc.c: 122: OSCCON1 = 0x60;
  4239                           
  4240                           ;incstack = 0
  4241  006094  0E60               	movlw	96
  4242  006096  010E               	movlb	14	; () banked
  4243  006098  6F43               	movwf	67,b	;volatile
  4244                           
  4245                           ; BSR set to: 14
  4246                           ;mcc.c: 124: OSCCON3 = 0x00;
  4247  00609A  6B45               	clrf	69,b	;volatile
  4248                           
  4249                           ; BSR set to: 14
  4250                           ;mcc.c: 126: OSCEN = 0x00;
  4251  00609C  6B47               	clrf	71,b	;volatile
  4252                           
  4253                           ;mcc.c: 128: OSCFRQ = 0x05;
  4254  00609E  0E05               	movlw	5
  4255  0060A0  6F49               	movwf	73,b	;volatile
  4256                           
  4257                           ; BSR set to: 14
  4258                           ;mcc.c: 130: OSCTUNE = 0x00;
  4259  0060A2  6B48               	clrf	72,b	;volatile
  4260                           
  4261                           ; BSR set to: 14
  4262  0060A4  0012               	return		;funcret
  4263  0060A6                     __end_of_OSCILLATOR_Initialize:
  4264                           	opt stack 0
  4265                           tosu	equ	0xFFF
  4266                           tosh	equ	0xFFE
  4267                           tosl	equ	0xFFD
  4268                           pclath	equ	0xFFA
  4269                           tblptru	equ	0xFF8
  4270                           tblptrh	equ	0xFF7
  4271                           tblptrl	equ	0xFF6
  4272                           tablat	equ	0xFF5
  4273                           prodh	equ	0xFF4
  4274                           prodl	equ	0xFF3
  4275                           intcon	equ	0xFF2
  4276                           indf0	equ	0xFEF
  4277                           postinc0	equ	0xFEE
  4278                           plusw0	equ	0xFEB
  4279                           fsr0h	equ	0xFEA
  4280                           fsr0l	equ	0xFE9
  4281                           wreg	equ	0xFE8
  4282                           postinc1	equ	0xFE6
  4283                           postdec1	equ	0xFE5
  4284                           plusw1	equ	0xFE3
  4285                           fsr1h	equ	0xFE2
  4286                           fsr1l	equ	0xFE1
  4287                           indf2	equ	0xFDF
  4288                           postinc2	equ	0xFDE
  4289                           postdec2	equ	0xFDD
  4290                           plusw2	equ	0xFDB
  4291                           fsr2h	equ	0xFDA
  4292                           fsr2l	equ	0xFD9
  4293                           status	equ	0xFD8
  4294                           
  4295 ;; *************** function _LORAWAN_PlatformInit *****************
  4296 ;; Defined at:
  4297 ;;		line 72 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4298 ;; Parameters:    Size  Location     Type
  4299 ;;		None
  4300 ;; Auto vars:     Size  Location     Type
  4301 ;;		None
  4302 ;; Return value:  Size  Location     Type
  4303 ;;                  1    wreg      void 
  4304 ;; Registers used:
  4305 ;;		wreg, status,2, status,0, cstack
  4306 ;; Tracked objects:
  4307 ;;		On entry : 3F/0
  4308 ;;		On exit  : 3F/0
  4309 ;;		Unchanged: 0/0
  4310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4311 ;;      Params:         0       0       0       0       0       0       0       0       0
  4312 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4313 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4314 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4315 ;;Total ram usage:        0 bytes
  4316 ;; Hardware stack levels used:    1
  4317 ;; Hardware stack levels required when called:    9
  4318 ;; This function calls:
  4319 ;;		_DIO0_ISR_Lora_Init
  4320 ;;		_DIO1_ISR_Lora_Init
  4321 ;;		_DIO2_ISR_Lora_Init
  4322 ;;		_DIO3_ISR_Lora_Init
  4323 ;;		_DIO4_ISR_Lora_Init
  4324 ;;		_DIO5_ISR_Lora_Init
  4325 ;;		_SystemTimerInit
  4326 ;;		_TMR_ISR_Lora_Init
  4327 ;; This function is called by:
  4328 ;;		_SYSTEM_Initialize
  4329 ;; This function uses a non-reentrant model
  4330 ;;
  4331                           
  4332                           	psect	text9
  4333  005DA0                     __ptext9:
  4334                           	opt stack 0
  4335  005DA0                     _LORAWAN_PlatformInit:
  4336                           	opt stack 20
  4337                           
  4338                           ; BSR set to: 0
  4339                           ;lorawan_init.c: 74: TMR_ISR_Lora_Init();
  4340                           
  4341                           ; BSR set to: 14
  4342                           ;incstack = 0
  4343  005DA0  EC8A  F030         	call	_TMR_ISR_Lora_Init	;wreg free
  4344                           
  4345                           ;lorawan_init.c: 75: DIO0_ISR_Lora_Init();
  4346  005DA4  ECFE  F030         	call	_DIO0_ISR_Lora_Init	;wreg free
  4347                           
  4348                           ;lorawan_init.c: 76: DIO1_ISR_Lora_Init();
  4349  005DA8  EC9C  F030         	call	_DIO1_ISR_Lora_Init	;wreg free
  4350                           
  4351                           ;lorawan_init.c: 77: DIO2_ISR_Lora_Init();
  4352  005DAC  EC96  F030         	call	_DIO2_ISR_Lora_Init	;wreg free
  4353                           
  4354                           ; BSR set to: 0
  4355                           ;lorawan_init.c: 78: DIO3_ISR_Lora_Init();
  4356  005DB0  EC2E  F031         	call	_DIO3_ISR_Lora_Init	;wreg free
  4357                           
  4358                           ; BSR set to: 0
  4359                           ;lorawan_init.c: 79: DIO4_ISR_Lora_Init();
  4360  005DB4  EC2D  F031         	call	_DIO4_ISR_Lora_Init	;wreg free
  4361                           
  4362                           ;lorawan_init.c: 80: DIO5_ISR_Lora_Init();
  4363  005DB8  EC90  F030         	call	_DIO5_ISR_Lora_Init	;wreg free
  4364                           
  4365                           ; BSR set to: 0
  4366                           ;lorawan_init.c: 81: SystemTimerInit();
  4367  005DBC  EF1B  F031         	goto	_SystemTimerInit	;wreg free
  4368  005DC0                     __end_of_LORAWAN_PlatformInit:
  4369                           	opt stack 0
  4370                           tosu	equ	0xFFF
  4371                           tosh	equ	0xFFE
  4372                           tosl	equ	0xFFD
  4373                           pclath	equ	0xFFA
  4374                           tblptru	equ	0xFF8
  4375                           tblptrh	equ	0xFF7
  4376                           tblptrl	equ	0xFF6
  4377                           tablat	equ	0xFF5
  4378                           prodh	equ	0xFF4
  4379                           prodl	equ	0xFF3
  4380                           intcon	equ	0xFF2
  4381                           indf0	equ	0xFEF
  4382                           postinc0	equ	0xFEE
  4383                           plusw0	equ	0xFEB
  4384                           fsr0h	equ	0xFEA
  4385                           fsr0l	equ	0xFE9
  4386                           wreg	equ	0xFE8
  4387                           postinc1	equ	0xFE6
  4388                           postdec1	equ	0xFE5
  4389                           plusw1	equ	0xFE3
  4390                           fsr1h	equ	0xFE2
  4391                           fsr1l	equ	0xFE1
  4392                           indf2	equ	0xFDF
  4393                           postinc2	equ	0xFDE
  4394                           postdec2	equ	0xFDD
  4395                           plusw2	equ	0xFDB
  4396                           fsr2h	equ	0xFDA
  4397                           fsr2l	equ	0xFD9
  4398                           status	equ	0xFD8
  4399                           
  4400 ;; *************** function _TMR_ISR_Lora_Init *****************
  4401 ;; Defined at:
  4402 ;;		line 54 in file "mcc_generated_files/LoRaWAN/tmr_lora_addons.c"
  4403 ;; Parameters:    Size  Location     Type
  4404 ;;		None
  4405 ;; Auto vars:     Size  Location     Type
  4406 ;;		None
  4407 ;; Return value:  Size  Location     Type
  4408 ;;                  1    wreg      void 
  4409 ;; Registers used:
  4410 ;;		wreg, status,2, status,0, cstack
  4411 ;; Tracked objects:
  4412 ;;		On entry : 3F/0
  4413 ;;		On exit  : 3F/0
  4414 ;;		Unchanged: 0/0
  4415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4416 ;;      Params:         0       0       0       0       0       0       0       0       0
  4417 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4418 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4419 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4420 ;;Total ram usage:        0 bytes
  4421 ;; Hardware stack levels used:    1
  4422 ;; Hardware stack levels required when called:    8
  4423 ;; This function calls:
  4424 ;;		_TMR1_SetInterruptHandler
  4425 ;; This function is called by:
  4426 ;;		_LORAWAN_PlatformInit
  4427 ;; This function uses a non-reentrant model
  4428 ;;
  4429                           
  4430                           	psect	text10
  4431  006114                     __ptext10:
  4432                           	opt stack 0
  4433  006114                     _TMR_ISR_Lora_Init:
  4434                           	opt stack 20
  4435                           
  4436                           ; BSR set to: 0
  4437                           ;tmr_lora_addons.c: 56: TMR1_SetInterruptHandler(TMR_ISR_lora);
  4438                           
  4439                           ; BSR set to: 0
  4440                           ;incstack = 0
  4441  006114  0E76               	movlw	low _TMR_ISR_lora
  4442  006116  6F60               	movwf	TMR1_SetInterruptHandler@InterruptHandler& (0+255),b
  4443  006118  0E52               	movlw	high _TMR_ISR_lora
  4444  00611A  6F61               	movwf	(TMR1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4445  00611C  EFA2  F030         	goto	_TMR1_SetInterruptHandler	;wreg free
  4446  006120                     __end_of_TMR_ISR_Lora_Init:
  4447                           	opt stack 0
  4448                           tosu	equ	0xFFF
  4449                           tosh	equ	0xFFE
  4450                           tosl	equ	0xFFD
  4451                           pclath	equ	0xFFA
  4452                           tblptru	equ	0xFF8
  4453                           tblptrh	equ	0xFF7
  4454                           tblptrl	equ	0xFF6
  4455                           tablat	equ	0xFF5
  4456                           prodh	equ	0xFF4
  4457                           prodl	equ	0xFF3
  4458                           intcon	equ	0xFF2
  4459                           indf0	equ	0xFEF
  4460                           postinc0	equ	0xFEE
  4461                           plusw0	equ	0xFEB
  4462                           fsr0h	equ	0xFEA
  4463                           fsr0l	equ	0xFE9
  4464                           wreg	equ	0xFE8
  4465                           postinc1	equ	0xFE6
  4466                           postdec1	equ	0xFE5
  4467                           plusw1	equ	0xFE3
  4468                           fsr1h	equ	0xFE2
  4469                           fsr1l	equ	0xFE1
  4470                           indf2	equ	0xFDF
  4471                           postinc2	equ	0xFDE
  4472                           postdec2	equ	0xFDD
  4473                           plusw2	equ	0xFDB
  4474                           fsr2h	equ	0xFDA
  4475                           fsr2l	equ	0xFD9
  4476                           status	equ	0xFD8
  4477                           
  4478 ;; *************** function _TMR1_SetInterruptHandler *****************
  4479 ;; Defined at:
  4480 ;;		line 191 in file "mcc_generated_files/tmr1.c"
  4481 ;; Parameters:    Size  Location     Type
  4482 ;;  InterruptHan    2    0[BANK0 ] PTR void 
  4483 ;;		 -> TMR_ISR_lora(1), TMR1_DefaultInterruptHandler(1), 
  4484 ;; Auto vars:     Size  Location     Type
  4485 ;;		None
  4486 ;; Return value:  Size  Location     Type
  4487 ;;                  1    wreg      void 
  4488 ;; Registers used:
  4489 ;;		wreg, status,2, status,0
  4490 ;; Tracked objects:
  4491 ;;		On entry : 3F/0
  4492 ;;		On exit  : 3F/0
  4493 ;;		Unchanged: 3F/0
  4494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4495 ;;      Params:         0       2       0       0       0       0       0       0       0
  4496 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4497 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4498 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4499 ;;Total ram usage:        2 bytes
  4500 ;; Hardware stack levels used:    1
  4501 ;; Hardware stack levels required when called:    7
  4502 ;; This function calls:
  4503 ;;		Nothing
  4504 ;; This function is called by:
  4505 ;;		_TMR1_Initialize
  4506 ;;		_TMR_ISR_Lora_Init
  4507 ;; This function uses a non-reentrant model
  4508 ;;
  4509                           
  4510                           	psect	text11
  4511  006144                     __ptext11:
  4512                           	opt stack 0
  4513  006144                     _TMR1_SetInterruptHandler:
  4514                           	opt stack 21
  4515                           
  4516                           ; BSR set to: 0
  4517                           ;tmr1.c: 192: TMR1_InterruptHandler = InterruptHandler;
  4518                           
  4519                           ; BSR set to: 0
  4520                           ;incstack = 0
  4521  006144  C060  F1F9         	movff	TMR1_SetInterruptHandler@InterruptHandler,_TMR1_InterruptHandler
  4522  006148  C061  F1FA         	movff	TMR1_SetInterruptHandler@InterruptHandler+1,_TMR1_InterruptHandler+1
  4523                           
  4524                           ; BSR set to: 0
  4525  00614C  0012               	return		;funcret
  4526  00614E                     __end_of_TMR1_SetInterruptHandler:
  4527                           	opt stack 0
  4528                           tosu	equ	0xFFF
  4529                           tosh	equ	0xFFE
  4530                           tosl	equ	0xFFD
  4531                           pclath	equ	0xFFA
  4532                           tblptru	equ	0xFF8
  4533                           tblptrh	equ	0xFF7
  4534                           tblptrl	equ	0xFF6
  4535                           tablat	equ	0xFF5
  4536                           prodh	equ	0xFF4
  4537                           prodl	equ	0xFF3
  4538                           intcon	equ	0xFF2
  4539                           indf0	equ	0xFEF
  4540                           postinc0	equ	0xFEE
  4541                           plusw0	equ	0xFEB
  4542                           fsr0h	equ	0xFEA
  4543                           fsr0l	equ	0xFE9
  4544                           wreg	equ	0xFE8
  4545                           postinc1	equ	0xFE6
  4546                           postdec1	equ	0xFE5
  4547                           plusw1	equ	0xFE3
  4548                           fsr1h	equ	0xFE2
  4549                           fsr1l	equ	0xFE1
  4550                           indf2	equ	0xFDF
  4551                           postinc2	equ	0xFDE
  4552                           postdec2	equ	0xFDD
  4553                           plusw2	equ	0xFDB
  4554                           fsr2h	equ	0xFDA
  4555                           fsr2l	equ	0xFD9
  4556                           status	equ	0xFD8
  4557                           
  4558 ;; *************** function _SystemTimerInit *****************
  4559 ;; Defined at:
  4560 ;;		line 135 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
  4561 ;; Parameters:    Size  Location     Type
  4562 ;;		None
  4563 ;; Auto vars:     Size  Location     Type
  4564 ;;		None
  4565 ;; Return value:  Size  Location     Type
  4566 ;;                  1    wreg      void 
  4567 ;; Registers used:
  4568 ;;		None
  4569 ;; Tracked objects:
  4570 ;;		On entry : 3F/0
  4571 ;;		On exit  : 3F/0
  4572 ;;		Unchanged: 0/0
  4573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4574 ;;      Params:         0       0       0       0       0       0       0       0       0
  4575 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4576 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4577 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4578 ;;Total ram usage:        0 bytes
  4579 ;; Hardware stack levels used:    1
  4580 ;; Hardware stack levels required when called:    7
  4581 ;; This function calls:
  4582 ;;		Nothing
  4583 ;; This function is called by:
  4584 ;;		_LORAWAN_PlatformInit
  4585 ;; This function uses a non-reentrant model
  4586 ;;
  4587                           
  4588                           	psect	text12
  4589  006236                     __ptext12:
  4590                           	opt stack 0
  4591  006236                     _SystemTimerInit:
  4592                           	opt stack 21
  4593                           
  4594                           ; BSR set to: 0
  4595                           ;sw_timer.c: 137: allocatedTimers = 0;
  4596                           
  4597                           ; BSR set to: 0
  4598                           ;incstack = 0
  4599  006236  6BFF               	clrf	_allocatedTimers& (0+255),b	;volatile
  4600                           
  4601                           ; BSR set to: 0
  4602  006238  0012               	return		;funcret
  4603  00623A                     __end_of_SystemTimerInit:
  4604                           	opt stack 0
  4605                           tosu	equ	0xFFF
  4606                           tosh	equ	0xFFE
  4607                           tosl	equ	0xFFD
  4608                           pclath	equ	0xFFA
  4609                           tblptru	equ	0xFF8
  4610                           tblptrh	equ	0xFF7
  4611                           tblptrl	equ	0xFF6
  4612                           tablat	equ	0xFF5
  4613                           prodh	equ	0xFF4
  4614                           prodl	equ	0xFF3
  4615                           intcon	equ	0xFF2
  4616                           indf0	equ	0xFEF
  4617                           postinc0	equ	0xFEE
  4618                           plusw0	equ	0xFEB
  4619                           fsr0h	equ	0xFEA
  4620                           fsr0l	equ	0xFE9
  4621                           wreg	equ	0xFE8
  4622                           postinc1	equ	0xFE6
  4623                           postdec1	equ	0xFE5
  4624                           plusw1	equ	0xFE3
  4625                           fsr1h	equ	0xFE2
  4626                           fsr1l	equ	0xFE1
  4627                           indf2	equ	0xFDF
  4628                           postinc2	equ	0xFDE
  4629                           postdec2	equ	0xFDD
  4630                           plusw2	equ	0xFDB
  4631                           fsr2h	equ	0xFDA
  4632                           fsr2l	equ	0xFD9
  4633                           status	equ	0xFD8
  4634                           
  4635 ;; *************** function _DIO5_ISR_Lora_Init *****************
  4636 ;; Defined at:
  4637 ;;		line 67 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4638 ;; Parameters:    Size  Location     Type
  4639 ;;		None
  4640 ;; Auto vars:     Size  Location     Type
  4641 ;;		None
  4642 ;; Return value:  Size  Location     Type
  4643 ;;                  1    wreg      void 
  4644 ;; Registers used:
  4645 ;;		wreg, status,2, status,0, cstack
  4646 ;; Tracked objects:
  4647 ;;		On entry : 3F/0
  4648 ;;		On exit  : 3F/0
  4649 ;;		Unchanged: 0/0
  4650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4651 ;;      Params:         0       0       0       0       0       0       0       0       0
  4652 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4653 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4654 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4655 ;;Total ram usage:        0 bytes
  4656 ;; Hardware stack levels used:    1
  4657 ;; Hardware stack levels required when called:    8
  4658 ;; This function calls:
  4659 ;;		_INT2_SetInterruptHandler
  4660 ;; This function is called by:
  4661 ;;		_LORAWAN_PlatformInit
  4662 ;; This function uses a non-reentrant model
  4663 ;;
  4664                           
  4665                           	psect	text13
  4666  006120                     __ptext13:
  4667                           	opt stack 0
  4668  006120                     _DIO5_ISR_Lora_Init:
  4669                           	opt stack 20
  4670                           
  4671                           ; BSR set to: 0
  4672                           ;lorawan_init.c: 69: INT2_SetInterruptHandler(DIO5_ISR_Lora);
  4673                           
  4674                           ; BSR set to: 0
  4675                           ;incstack = 0
  4676  006120  0E52               	movlw	low _DIO5_ISR_Lora
  4677  006122  6F60               	movwf	INT2_SetInterruptHandler@InterruptHandler& (0+255),b
  4678  006124  0E62               	movlw	high _DIO5_ISR_Lora
  4679  006126  6F61               	movwf	(INT2_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4680  006128  EFB1  F030         	goto	_INT2_SetInterruptHandler	;wreg free
  4681  00612C                     __end_of_DIO5_ISR_Lora_Init:
  4682                           	opt stack 0
  4683                           tosu	equ	0xFFF
  4684                           tosh	equ	0xFFE
  4685                           tosl	equ	0xFFD
  4686                           pclath	equ	0xFFA
  4687                           tblptru	equ	0xFF8
  4688                           tblptrh	equ	0xFF7
  4689                           tblptrl	equ	0xFF6
  4690                           tablat	equ	0xFF5
  4691                           prodh	equ	0xFF4
  4692                           prodl	equ	0xFF3
  4693                           intcon	equ	0xFF2
  4694                           indf0	equ	0xFEF
  4695                           postinc0	equ	0xFEE
  4696                           plusw0	equ	0xFEB
  4697                           fsr0h	equ	0xFEA
  4698                           fsr0l	equ	0xFE9
  4699                           wreg	equ	0xFE8
  4700                           postinc1	equ	0xFE6
  4701                           postdec1	equ	0xFE5
  4702                           plusw1	equ	0xFE3
  4703                           fsr1h	equ	0xFE2
  4704                           fsr1l	equ	0xFE1
  4705                           indf2	equ	0xFDF
  4706                           postinc2	equ	0xFDE
  4707                           postdec2	equ	0xFDD
  4708                           plusw2	equ	0xFDB
  4709                           fsr2h	equ	0xFDA
  4710                           fsr2l	equ	0xFD9
  4711                           status	equ	0xFD8
  4712                           
  4713 ;; *************** function _DIO4_ISR_Lora_Init *****************
  4714 ;; Defined at:
  4715 ;;		line 63 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4716 ;; Parameters:    Size  Location     Type
  4717 ;;		None
  4718 ;; Auto vars:     Size  Location     Type
  4719 ;;		None
  4720 ;; Return value:  Size  Location     Type
  4721 ;;                  1    wreg      void 
  4722 ;; Registers used:
  4723 ;;		None
  4724 ;; Tracked objects:
  4725 ;;		On entry : 3F/0
  4726 ;;		On exit  : 3F/0
  4727 ;;		Unchanged: 3F/0
  4728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4729 ;;      Params:         0       0       0       0       0       0       0       0       0
  4730 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4731 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4732 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4733 ;;Total ram usage:        0 bytes
  4734 ;; Hardware stack levels used:    1
  4735 ;; Hardware stack levels required when called:    7
  4736 ;; This function calls:
  4737 ;;		Nothing
  4738 ;; This function is called by:
  4739 ;;		_LORAWAN_PlatformInit
  4740 ;; This function uses a non-reentrant model
  4741 ;;
  4742                           
  4743                           	psect	text14
  4744  00625A                     __ptext14:
  4745                           	opt stack 0
  4746  00625A                     _DIO4_ISR_Lora_Init:
  4747                           	opt stack 21
  4748                           
  4749                           ; BSR set to: 0
  4750                           
  4751                           ; BSR set to: 0
  4752                           ;incstack = 0
  4753  00625A  0012               	return		;funcret
  4754  00625C                     __end_of_DIO4_ISR_Lora_Init:
  4755                           	opt stack 0
  4756                           tosu	equ	0xFFF
  4757                           tosh	equ	0xFFE
  4758                           tosl	equ	0xFFD
  4759                           pclath	equ	0xFFA
  4760                           tblptru	equ	0xFF8
  4761                           tblptrh	equ	0xFF7
  4762                           tblptrl	equ	0xFF6
  4763                           tablat	equ	0xFF5
  4764                           prodh	equ	0xFF4
  4765                           prodl	equ	0xFF3
  4766                           intcon	equ	0xFF2
  4767                           indf0	equ	0xFEF
  4768                           postinc0	equ	0xFEE
  4769                           plusw0	equ	0xFEB
  4770                           fsr0h	equ	0xFEA
  4771                           fsr0l	equ	0xFE9
  4772                           wreg	equ	0xFE8
  4773                           postinc1	equ	0xFE6
  4774                           postdec1	equ	0xFE5
  4775                           plusw1	equ	0xFE3
  4776                           fsr1h	equ	0xFE2
  4777                           fsr1l	equ	0xFE1
  4778                           indf2	equ	0xFDF
  4779                           postinc2	equ	0xFDE
  4780                           postdec2	equ	0xFDD
  4781                           plusw2	equ	0xFDB
  4782                           fsr2h	equ	0xFDA
  4783                           fsr2l	equ	0xFD9
  4784                           status	equ	0xFD8
  4785                           
  4786 ;; *************** function _DIO3_ISR_Lora_Init *****************
  4787 ;; Defined at:
  4788 ;;		line 59 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4789 ;; Parameters:    Size  Location     Type
  4790 ;;		None
  4791 ;; Auto vars:     Size  Location     Type
  4792 ;;		None
  4793 ;; Return value:  Size  Location     Type
  4794 ;;                  1    wreg      void 
  4795 ;; Registers used:
  4796 ;;		None
  4797 ;; Tracked objects:
  4798 ;;		On entry : 3F/0
  4799 ;;		On exit  : 3F/0
  4800 ;;		Unchanged: 3F/0
  4801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4802 ;;      Params:         0       0       0       0       0       0       0       0       0
  4803 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4804 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4805 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4806 ;;Total ram usage:        0 bytes
  4807 ;; Hardware stack levels used:    1
  4808 ;; Hardware stack levels required when called:    7
  4809 ;; This function calls:
  4810 ;;		Nothing
  4811 ;; This function is called by:
  4812 ;;		_LORAWAN_PlatformInit
  4813 ;; This function uses a non-reentrant model
  4814 ;;
  4815                           
  4816                           	psect	text15
  4817  00625C                     __ptext15:
  4818                           	opt stack 0
  4819  00625C                     _DIO3_ISR_Lora_Init:
  4820                           	opt stack 21
  4821                           
  4822                           ; BSR set to: 0
  4823                           
  4824                           ; BSR set to: 0
  4825                           ;incstack = 0
  4826  00625C  0012               	return		;funcret
  4827  00625E                     __end_of_DIO3_ISR_Lora_Init:
  4828                           	opt stack 0
  4829                           tosu	equ	0xFFF
  4830                           tosh	equ	0xFFE
  4831                           tosl	equ	0xFFD
  4832                           pclath	equ	0xFFA
  4833                           tblptru	equ	0xFF8
  4834                           tblptrh	equ	0xFF7
  4835                           tblptrl	equ	0xFF6
  4836                           tablat	equ	0xFF5
  4837                           prodh	equ	0xFF4
  4838                           prodl	equ	0xFF3
  4839                           intcon	equ	0xFF2
  4840                           indf0	equ	0xFEF
  4841                           postinc0	equ	0xFEE
  4842                           plusw0	equ	0xFEB
  4843                           fsr0h	equ	0xFEA
  4844                           fsr0l	equ	0xFE9
  4845                           wreg	equ	0xFE8
  4846                           postinc1	equ	0xFE6
  4847                           postdec1	equ	0xFE5
  4848                           plusw1	equ	0xFE3
  4849                           fsr1h	equ	0xFE2
  4850                           fsr1l	equ	0xFE1
  4851                           indf2	equ	0xFDF
  4852                           postinc2	equ	0xFDE
  4853                           postdec2	equ	0xFDD
  4854                           plusw2	equ	0xFDB
  4855                           fsr2h	equ	0xFDA
  4856                           fsr2l	equ	0xFD9
  4857                           status	equ	0xFD8
  4858                           
  4859 ;; *************** function _DIO2_ISR_Lora_Init *****************
  4860 ;; Defined at:
  4861 ;;		line 54 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4862 ;; Parameters:    Size  Location     Type
  4863 ;;		None
  4864 ;; Auto vars:     Size  Location     Type
  4865 ;;		None
  4866 ;; Return value:  Size  Location     Type
  4867 ;;                  1    wreg      void 
  4868 ;; Registers used:
  4869 ;;		wreg, status,2, status,0, cstack
  4870 ;; Tracked objects:
  4871 ;;		On entry : 3F/0
  4872 ;;		On exit  : 3F/0
  4873 ;;		Unchanged: 0/0
  4874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4875 ;;      Params:         0       0       0       0       0       0       0       0       0
  4876 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4877 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4878 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4879 ;;Total ram usage:        0 bytes
  4880 ;; Hardware stack levels used:    1
  4881 ;; Hardware stack levels required when called:    8
  4882 ;; This function calls:
  4883 ;;		_IOCBF4_SetInterruptHandler
  4884 ;; This function is called by:
  4885 ;;		_LORAWAN_PlatformInit
  4886 ;; This function uses a non-reentrant model
  4887 ;;
  4888                           
  4889                           	psect	text16
  4890  00612C                     __ptext16:
  4891                           	opt stack 0
  4892  00612C                     _DIO2_ISR_Lora_Init:
  4893                           	opt stack 20
  4894                           
  4895                           ; BSR set to: 0
  4896                           ;lorawan_init.c: 56: IOCBF4_SetInterruptHandler(DIO2_ISR_Lora);
  4897                           
  4898                           ; BSR set to: 0
  4899                           ;incstack = 0
  4900  00612C  0E4E               	movlw	low _DIO2_ISR_Lora
  4901  00612E  6F60               	movwf	IOCBF4_SetInterruptHandler@InterruptHandler& (0+255),b
  4902  006130  0E62               	movlw	high _DIO2_ISR_Lora
  4903  006132  6F61               	movwf	(IOCBF4_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4904  006134  EFA7  F030         	goto	_IOCBF4_SetInterruptHandler	;wreg free
  4905  006138                     __end_of_DIO2_ISR_Lora_Init:
  4906                           	opt stack 0
  4907                           tosu	equ	0xFFF
  4908                           tosh	equ	0xFFE
  4909                           tosl	equ	0xFFD
  4910                           pclath	equ	0xFFA
  4911                           tblptru	equ	0xFF8
  4912                           tblptrh	equ	0xFF7
  4913                           tblptrl	equ	0xFF6
  4914                           tablat	equ	0xFF5
  4915                           prodh	equ	0xFF4
  4916                           prodl	equ	0xFF3
  4917                           intcon	equ	0xFF2
  4918                           indf0	equ	0xFEF
  4919                           postinc0	equ	0xFEE
  4920                           plusw0	equ	0xFEB
  4921                           fsr0h	equ	0xFEA
  4922                           fsr0l	equ	0xFE9
  4923                           wreg	equ	0xFE8
  4924                           postinc1	equ	0xFE6
  4925                           postdec1	equ	0xFE5
  4926                           plusw1	equ	0xFE3
  4927                           fsr1h	equ	0xFE2
  4928                           fsr1l	equ	0xFE1
  4929                           indf2	equ	0xFDF
  4930                           postinc2	equ	0xFDE
  4931                           postdec2	equ	0xFDD
  4932                           plusw2	equ	0xFDB
  4933                           fsr2h	equ	0xFDA
  4934                           fsr2l	equ	0xFD9
  4935                           status	equ	0xFD8
  4936                           
  4937 ;; *************** function _IOCBF4_SetInterruptHandler *****************
  4938 ;; Defined at:
  4939 ;;		line 180 in file "mcc_generated_files/pin_manager.c"
  4940 ;; Parameters:    Size  Location     Type
  4941 ;;  InterruptHan    2    0[BANK0 ] PTR void 
  4942 ;;		 -> DIO2_ISR_Lora(1), IOCBF4_DefaultInterruptHandler(1), 
  4943 ;; Auto vars:     Size  Location     Type
  4944 ;;		None
  4945 ;; Return value:  Size  Location     Type
  4946 ;;                  1    wreg      void 
  4947 ;; Registers used:
  4948 ;;		wreg, status,2, status,0
  4949 ;; Tracked objects:
  4950 ;;		On entry : 3F/0
  4951 ;;		On exit  : 3F/0
  4952 ;;		Unchanged: 3F/0
  4953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4954 ;;      Params:         0       2       0       0       0       0       0       0       0
  4955 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4956 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4957 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4958 ;;Total ram usage:        2 bytes
  4959 ;; Hardware stack levels used:    1
  4960 ;; Hardware stack levels required when called:    7
  4961 ;; This function calls:
  4962 ;;		Nothing
  4963 ;; This function is called by:
  4964 ;;		_PIN_MANAGER_Initialize
  4965 ;;		_DIO2_ISR_Lora_Init
  4966 ;; This function uses a non-reentrant model
  4967 ;;
  4968                           
  4969                           	psect	text17
  4970  00614E                     __ptext17:
  4971                           	opt stack 0
  4972  00614E                     _IOCBF4_SetInterruptHandler:
  4973                           	opt stack 21
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;pin_manager.c: 181: IOCBF4_InterruptHandler = InterruptHandler;
  4977                           
  4978                           ; BSR set to: 0
  4979                           ;incstack = 0
  4980  00614E  C060  F1F7         	movff	IOCBF4_SetInterruptHandler@InterruptHandler,_IOCBF4_InterruptHandler
  4981  006152  C061  F1F8         	movff	IOCBF4_SetInterruptHandler@InterruptHandler+1,_IOCBF4_InterruptHandler+1
  4982                           
  4983                           ; BSR set to: 0
  4984  006156  0012               	return		;funcret
  4985  006158                     __end_of_IOCBF4_SetInterruptHandler:
  4986                           	opt stack 0
  4987                           tosu	equ	0xFFF
  4988                           tosh	equ	0xFFE
  4989                           tosl	equ	0xFFD
  4990                           pclath	equ	0xFFA
  4991                           tblptru	equ	0xFF8
  4992                           tblptrh	equ	0xFF7
  4993                           tblptrl	equ	0xFF6
  4994                           tablat	equ	0xFF5
  4995                           prodh	equ	0xFF4
  4996                           prodl	equ	0xFF3
  4997                           intcon	equ	0xFF2
  4998                           indf0	equ	0xFEF
  4999                           postinc0	equ	0xFEE
  5000                           plusw0	equ	0xFEB
  5001                           fsr0h	equ	0xFEA
  5002                           fsr0l	equ	0xFE9
  5003                           wreg	equ	0xFE8
  5004                           postinc1	equ	0xFE6
  5005                           postdec1	equ	0xFE5
  5006                           plusw1	equ	0xFE3
  5007                           fsr1h	equ	0xFE2
  5008                           fsr1l	equ	0xFE1
  5009                           indf2	equ	0xFDF
  5010                           postinc2	equ	0xFDE
  5011                           postdec2	equ	0xFDD
  5012                           plusw2	equ	0xFDB
  5013                           fsr2h	equ	0xFDA
  5014                           fsr2l	equ	0xFD9
  5015                           status	equ	0xFD8
  5016                           
  5017 ;; *************** function _DIO1_ISR_Lora_Init *****************
  5018 ;; Defined at:
  5019 ;;		line 49 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  5020 ;; Parameters:    Size  Location     Type
  5021 ;;		None
  5022 ;; Auto vars:     Size  Location     Type
  5023 ;;		None
  5024 ;; Return value:  Size  Location     Type
  5025 ;;                  1    wreg      void 
  5026 ;; Registers used:
  5027 ;;		wreg, status,2, status,0, cstack
  5028 ;; Tracked objects:
  5029 ;;		On entry : 3F/0
  5030 ;;		On exit  : 3F/0
  5031 ;;		Unchanged: 0/0
  5032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5033 ;;      Params:         0       0       0       0       0       0       0       0       0
  5034 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5035 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5036 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5037 ;;Total ram usage:        0 bytes
  5038 ;; Hardware stack levels used:    1
  5039 ;; Hardware stack levels required when called:    8
  5040 ;; This function calls:
  5041 ;;		_INT1_SetInterruptHandler
  5042 ;; This function is called by:
  5043 ;;		_LORAWAN_PlatformInit
  5044 ;; This function uses a non-reentrant model
  5045 ;;
  5046                           
  5047                           	psect	text18
  5048  006138                     __ptext18:
  5049                           	opt stack 0
  5050  006138                     _DIO1_ISR_Lora_Init:
  5051                           	opt stack 20
  5052                           
  5053                           ; BSR set to: 0
  5054                           ;lorawan_init.c: 51: INT1_SetInterruptHandler(DIO1_ISR_Lora);
  5055                           
  5056                           ; BSR set to: 0
  5057                           ;incstack = 0
  5058  006138  0E56               	movlw	low _DIO1_ISR_Lora
  5059  00613A  6F60               	movwf	INT1_SetInterruptHandler@InterruptHandler& (0+255),b
  5060  00613C  0E62               	movlw	high _DIO1_ISR_Lora
  5061  00613E  6F61               	movwf	(INT1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5062  006140  EFB6  F030         	goto	_INT1_SetInterruptHandler	;wreg free
  5063  006144                     __end_of_DIO1_ISR_Lora_Init:
  5064                           	opt stack 0
  5065                           tosu	equ	0xFFF
  5066                           tosh	equ	0xFFE
  5067                           tosl	equ	0xFFD
  5068                           pclath	equ	0xFFA
  5069                           tblptru	equ	0xFF8
  5070                           tblptrh	equ	0xFF7
  5071                           tblptrl	equ	0xFF6
  5072                           tablat	equ	0xFF5
  5073                           prodh	equ	0xFF4
  5074                           prodl	equ	0xFF3
  5075                           intcon	equ	0xFF2
  5076                           indf0	equ	0xFEF
  5077                           postinc0	equ	0xFEE
  5078                           plusw0	equ	0xFEB
  5079                           fsr0h	equ	0xFEA
  5080                           fsr0l	equ	0xFE9
  5081                           wreg	equ	0xFE8
  5082                           postinc1	equ	0xFE6
  5083                           postdec1	equ	0xFE5
  5084                           plusw1	equ	0xFE3
  5085                           fsr1h	equ	0xFE2
  5086                           fsr1l	equ	0xFE1
  5087                           indf2	equ	0xFDF
  5088                           postinc2	equ	0xFDE
  5089                           postdec2	equ	0xFDD
  5090                           plusw2	equ	0xFDB
  5091                           fsr2h	equ	0xFDA
  5092                           fsr2l	equ	0xFD9
  5093                           status	equ	0xFD8
  5094                           
  5095 ;; *************** function _DIO0_ISR_Lora_Init *****************
  5096 ;; Defined at:
  5097 ;;		line 44 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  5098 ;; Parameters:    Size  Location     Type
  5099 ;;		None
  5100 ;; Auto vars:     Size  Location     Type
  5101 ;;		None
  5102 ;; Return value:  Size  Location     Type
  5103 ;;                  1    wreg      void 
  5104 ;; Registers used:
  5105 ;;		wreg, status,2, status,0, cstack
  5106 ;; Tracked objects:
  5107 ;;		On entry : 3F/0
  5108 ;;		On exit  : 3F/0
  5109 ;;		Unchanged: 0/0
  5110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5111 ;;      Params:         0       0       0       0       0       0       0       0       0
  5112 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5113 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5114 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5115 ;;Total ram usage:        0 bytes
  5116 ;; Hardware stack levels used:    1
  5117 ;; Hardware stack levels required when called:    8
  5118 ;; This function calls:
  5119 ;;		_INT0_SetInterruptHandler
  5120 ;; This function is called by:
  5121 ;;		_LORAWAN_PlatformInit
  5122 ;; This function uses a non-reentrant model
  5123 ;;
  5124                           
  5125                           	psect	text19
  5126  0061FC                     __ptext19:
  5127                           	opt stack 0
  5128  0061FC                     _DIO0_ISR_Lora_Init:
  5129                           	opt stack 20
  5130                           
  5131                           ; BSR set to: 0
  5132                           ;lorawan_init.c: 46: INT0_SetInterruptHandler(DIO0_ISR_Lora);
  5133                           
  5134                           ; BSR set to: 0
  5135                           ;incstack = 0
  5136  0061FC  6B60               	clrf	INT0_SetInterruptHandler@InterruptHandler& (0+255),b
  5137  0061FE  6B61               	clrf	(INT0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5138  006200  0C00               	retlw	0	;wreg free
  5139  006202                     __end_of_DIO0_ISR_Lora_Init:
  5140                           	opt stack 0
  5141                           tosu	equ	0xFFF
  5142                           tosh	equ	0xFFE
  5143                           tosl	equ	0xFFD
  5144                           pclath	equ	0xFFA
  5145                           tblptru	equ	0xFF8
  5146                           tblptrh	equ	0xFF7
  5147                           tblptrl	equ	0xFF6
  5148                           tablat	equ	0xFF5
  5149                           prodh	equ	0xFF4
  5150                           prodl	equ	0xFF3
  5151                           intcon	equ	0xFF2
  5152                           indf0	equ	0xFEF
  5153                           postinc0	equ	0xFEE
  5154                           plusw0	equ	0xFEB
  5155                           fsr0h	equ	0xFEA
  5156                           fsr0l	equ	0xFE9
  5157                           wreg	equ	0xFE8
  5158                           postinc1	equ	0xFE6
  5159                           postdec1	equ	0xFE5
  5160                           plusw1	equ	0xFE3
  5161                           fsr1h	equ	0xFE2
  5162                           fsr1l	equ	0xFE1
  5163                           indf2	equ	0xFDF
  5164                           postinc2	equ	0xFDE
  5165                           postdec2	equ	0xFDD
  5166                           plusw2	equ	0xFDB
  5167                           fsr2h	equ	0xFDA
  5168                           fsr2l	equ	0xFD9
  5169                           status	equ	0xFD8
  5170                           
  5171 ;; *************** function _INTERRUPT_Initialize *****************
  5172 ;; Defined at:
  5173 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  5174 ;; Parameters:    Size  Location     Type
  5175 ;;		None
  5176 ;; Auto vars:     Size  Location     Type
  5177 ;;		None
  5178 ;; Return value:  Size  Location     Type
  5179 ;;                  1    wreg      void 
  5180 ;; Registers used:
  5181 ;;		None
  5182 ;; Tracked objects:
  5183 ;;		On entry : 0/0
  5184 ;;		On exit  : 0/0
  5185 ;;		Unchanged: 0/0
  5186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5187 ;;      Params:         0       0       0       0       0       0       0       0       0
  5188 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5189 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5190 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5191 ;;Total ram usage:        0 bytes
  5192 ;; Hardware stack levels used:    1
  5193 ;; Hardware stack levels required when called:    7
  5194 ;; This function calls:
  5195 ;;		Nothing
  5196 ;; This function is called by:
  5197 ;;		_SYSTEM_Initialize
  5198 ;; This function uses a non-reentrant model
  5199 ;;
  5200                           
  5201                           	psect	text20
  5202  00623A                     __ptext20:
  5203                           	opt stack 0
  5204  00623A                     _INTERRUPT_Initialize:
  5205                           	opt stack 22
  5206                           
  5207                           ;interrupt_manager.c: 54: INTCONbits.IPEN = 0;
  5208                           
  5209                           ; BSR set to: 0
  5210                           ;incstack = 0
  5211  00623A  9AF2               	bcf	intcon,5,c	;volatile
  5212  00623C  0012               	return		;funcret
  5213  00623E                     __end_of_INTERRUPT_Initialize:
  5214                           	opt stack 0
  5215                           tosu	equ	0xFFF
  5216                           tosh	equ	0xFFE
  5217                           tosl	equ	0xFFD
  5218                           pclath	equ	0xFFA
  5219                           tblptru	equ	0xFF8
  5220                           tblptrh	equ	0xFF7
  5221                           tblptrl	equ	0xFF6
  5222                           tablat	equ	0xFF5
  5223                           prodh	equ	0xFF4
  5224                           prodl	equ	0xFF3
  5225                           intcon	equ	0xFF2
  5226                           indf0	equ	0xFEF
  5227                           postinc0	equ	0xFEE
  5228                           plusw0	equ	0xFEB
  5229                           fsr0h	equ	0xFEA
  5230                           fsr0l	equ	0xFE9
  5231                           wreg	equ	0xFE8
  5232                           postinc1	equ	0xFE6
  5233                           postdec1	equ	0xFE5
  5234                           plusw1	equ	0xFE3
  5235                           fsr1h	equ	0xFE2
  5236                           fsr1l	equ	0xFE1
  5237                           indf2	equ	0xFDF
  5238                           postinc2	equ	0xFDE
  5239                           postdec2	equ	0xFDD
  5240                           plusw2	equ	0xFDB
  5241                           fsr2h	equ	0xFDA
  5242                           fsr2l	equ	0xFD9
  5243                           status	equ	0xFD8
  5244                           
  5245 ;; *************** function _EXT_INT_Initialize *****************
  5246 ;; Defined at:
  5247 ;;		line 219 in file "mcc_generated_files/ext_int.c"
  5248 ;; Parameters:    Size  Location     Type
  5249 ;;		None
  5250 ;; Auto vars:     Size  Location     Type
  5251 ;;		None
  5252 ;; Return value:  Size  Location     Type
  5253 ;;                  1    wreg      void 
  5254 ;; Registers used:
  5255 ;;		wreg, status,2, status,0, cstack
  5256 ;; Tracked objects:
  5257 ;;		On entry : 3F/E
  5258 ;;		On exit  : 3F/E
  5259 ;;		Unchanged: 0/0
  5260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5261 ;;      Params:         0       0       0       0       0       0       0       0       0
  5262 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5263 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5264 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5265 ;;Total ram usage:        0 bytes
  5266 ;; Hardware stack levels used:    1
  5267 ;; Hardware stack levels required when called:    8
  5268 ;; This function calls:
  5269 ;;		_INT0_SetInterruptHandler
  5270 ;;		_INT1_SetInterruptHandler
  5271 ;;		_INT2_SetInterruptHandler
  5272 ;;		_INT3_SetInterruptHandler
  5273 ;; This function is called by:
  5274 ;;		_SYSTEM_Initialize
  5275 ;; This function uses a non-reentrant model
  5276 ;;
  5277                           
  5278                           	psect	text21
  5279  0050D2                     __ptext21:
  5280                           	opt stack 0
  5281  0050D2                     _EXT_INT_Initialize:
  5282                           	opt stack 21
  5283                           
  5284                           ; BSR set to: 14
  5285                           ;ext_int.c: 228: (PIR0bits.INT1IF = 0);
  5286                           
  5287                           ;incstack = 0
  5288  0050D2  9333               	bcf	51,1,b	;volatile
  5289                           
  5290                           ;ext_int.c: 229: (INTCONbits.INT1EDG = 1);
  5291  0050D4  82F2               	bsf	intcon,1,c	;volatile
  5292                           
  5293                           ; BSR set to: 14
  5294                           ;ext_int.c: 231: INT1_SetInterruptHandler(INT1_DefaultInterruptHandler);
  5295  0050D6  0E6A               	movlw	low _INT1_DefaultInterruptHandler
  5296  0050D8  0100               	movlb	0	; () banked
  5297  0050DA  6F60               	movwf	INT1_SetInterruptHandler@InterruptHandler& (0+255),b
  5298  0050DC  0E62               	movlw	high _INT1_DefaultInterruptHandler
  5299  0050DE  6F61               	movwf	(INT1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5300  0050E0  ECB6  F030         	call	_INT1_SetInterruptHandler	;wreg free
  5301                           
  5302                           ; BSR set to: 0
  5303                           ;ext_int.c: 232: (PIE0bits.INT1IE = 1);
  5304  0050E4  010E               	movlb	14	; () banked
  5305  0050E6  8329               	bsf	41,1,b	;volatile
  5306                           
  5307                           ; BSR set to: 14
  5308                           ;ext_int.c: 243: (PIR0bits.INT2IF = 0);
  5309  0050E8  9533               	bcf	51,2,b	;volatile
  5310                           
  5311                           ; BSR set to: 14
  5312                           ;ext_int.c: 244: (INTCONbits.INT2EDG = 1);
  5313  0050EA  84F2               	bsf	intcon,2,c	;volatile
  5314                           
  5315                           ;ext_int.c: 246: INT2_SetInterruptHandler(INT2_DefaultInterruptHandler);
  5316  0050EC  0E68               	movlw	low _INT2_DefaultInterruptHandler
  5317  0050EE  0100               	movlb	0	; () banked
  5318  0050F0  6F60               	movwf	INT2_SetInterruptHandler@InterruptHandler& (0+255),b
  5319  0050F2  0E62               	movlw	high _INT2_DefaultInterruptHandler
  5320  0050F4  6F61               	movwf	(INT2_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5321  0050F6  ECB1  F030         	call	_INT2_SetInterruptHandler	;wreg free
  5322                           
  5323                           ; BSR set to: 0
  5324                           ;ext_int.c: 247: (PIE0bits.INT2IE = 1);
  5325  0050FA  010E               	movlb	14	; () banked
  5326  0050FC  8529               	bsf	41,2,b	;volatile
  5327                           
  5328                           ; BSR set to: 14
  5329                           ;ext_int.c: 258: (PIR0bits.INT0IF = 0);
  5330  0050FE  9133               	bcf	51,0,b	;volatile
  5331                           
  5332                           ; BSR set to: 14
  5333                           ;ext_int.c: 259: (INTCONbits.INT0EDG = 1);
  5334  005100  80F2               	bsf	intcon,0,c	;volatile
  5335                           
  5336                           ;ext_int.c: 261: INT0_SetInterruptHandler(INT0_DefaultInterruptHandler);
  5337  005102  0E00               	movlw	0
  5338  005104  0100               	movlb	0	; () banked
  5339  005106  6B60               	clrf	INT0_SetInterruptHandler@InterruptHandler& (0+255),b
  5340  005108  6B61               	clrf	(INT0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5341  00510A  EC2F  F031         	call	_INT0_SetInterruptHandler	;wreg free
  5342                           
  5343                           ; BSR set to: 0
  5344                           ;ext_int.c: 272: (PIR0bits.INT3IF = 0);
  5345  00510E  010E               	movlb	14	; () banked
  5346  005110  9733               	bcf	51,3,b	;volatile
  5347                           
  5348                           ; BSR set to: 14
  5349                           ;ext_int.c: 273: (INTCONbits.INT3EDG = 1);
  5350  005112  86F2               	bsf	intcon,3,c	;volatile
  5351                           
  5352                           ;ext_int.c: 275: INT3_SetInterruptHandler(INT3_DefaultInterruptHandler);
  5353  005114  0E66               	movlw	low _INT3_DefaultInterruptHandler
  5354  005116  0100               	movlb	0	; () banked
  5355  005118  6F60               	movwf	INT3_SetInterruptHandler@InterruptHandler& (0+255),b
  5356  00511A  0E62               	movlw	high _INT3_DefaultInterruptHandler
  5357  00511C  6F61               	movwf	(INT3_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5358  00511E  ECAC  F030         	call	_INT3_SetInterruptHandler	;wreg free
  5359                           
  5360                           ; BSR set to: 0
  5361                           ;ext_int.c: 276: (PIE0bits.INT3IE = 1);
  5362  005122  010E               	movlb	14	; () banked
  5363  005124  8729               	bsf	41,3,b	;volatile
  5364                           
  5365                           ; BSR set to: 14
  5366  005126  0012               	return		;funcret
  5367  005128                     __end_of_EXT_INT_Initialize:
  5368                           	opt stack 0
  5369                           tosu	equ	0xFFF
  5370                           tosh	equ	0xFFE
  5371                           tosl	equ	0xFFD
  5372                           pclath	equ	0xFFA
  5373                           tblptru	equ	0xFF8
  5374                           tblptrh	equ	0xFF7
  5375                           tblptrl	equ	0xFF6
  5376                           tablat	equ	0xFF5
  5377                           prodh	equ	0xFF4
  5378                           prodl	equ	0xFF3
  5379                           intcon	equ	0xFF2
  5380                           indf0	equ	0xFEF
  5381                           postinc0	equ	0xFEE
  5382                           plusw0	equ	0xFEB
  5383                           fsr0h	equ	0xFEA
  5384                           fsr0l	equ	0xFE9
  5385                           wreg	equ	0xFE8
  5386                           postinc1	equ	0xFE6
  5387                           postdec1	equ	0xFE5
  5388                           plusw1	equ	0xFE3
  5389                           fsr1h	equ	0xFE2
  5390                           fsr1l	equ	0xFE1
  5391                           indf2	equ	0xFDF
  5392                           postinc2	equ	0xFDE
  5393                           postdec2	equ	0xFDD
  5394                           plusw2	equ	0xFDB
  5395                           fsr2h	equ	0xFDA
  5396                           fsr2l	equ	0xFD9
  5397                           status	equ	0xFD8
  5398                           
  5399 ;; *************** function _INT3_SetInterruptHandler *****************
  5400 ;; Defined at:
  5401 ;;		line 196 in file "mcc_generated_files/ext_int.c"
  5402 ;; Parameters:    Size  Location     Type
  5403 ;;  InterruptHan    2    0[BANK0 ] PTR void 
  5404 ;;		 -> INT3_DefaultInterruptHandler(1), 
  5405 ;; Auto vars:     Size  Location     Type
  5406 ;;		None
  5407 ;; Return value:  Size  Location     Type
  5408 ;;                  1    wreg      void 
  5409 ;; Registers used:
  5410 ;;		wreg, status,2, status,0
  5411 ;; Tracked objects:
  5412 ;;		On entry : 3F/0
  5413 ;;		On exit  : 3F/0
  5414 ;;		Unchanged: 3F/0
  5415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5416 ;;      Params:         0       2       0       0       0       0       0       0       0
  5417 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5418 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5419 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5420 ;;Total ram usage:        2 bytes
  5421 ;; Hardware stack levels used:    1
  5422 ;; Hardware stack levels required when called:    7
  5423 ;; This function calls:
  5424 ;;		Nothing
  5425 ;; This function is called by:
  5426 ;;		_EXT_INT_Initialize
  5427 ;; This function uses a non-reentrant model
  5428 ;;
  5429                           
  5430                           	psect	text22
  5431  006158                     __ptext22:
  5432                           	opt stack 0
  5433  006158                     _INT3_SetInterruptHandler:
  5434                           	opt stack 21
  5435                           
  5436                           ; BSR set to: 0
  5437                           ;ext_int.c: 197: INT3_InterruptHandler = InterruptHandler;
  5438                           
  5439                           ; BSR set to: 14
  5440                           ;incstack = 0
  5441  006158  C060  F1FB         	movff	INT3_SetInterruptHandler@InterruptHandler,_INT3_InterruptHandler
  5442  00615C  C061  F1FC         	movff	INT3_SetInterruptHandler@InterruptHandler+1,_INT3_InterruptHandler+1
  5443                           
  5444                           ; BSR set to: 0
  5445  006160  0012               	return		;funcret
  5446  006162                     __end_of_INT3_SetInterruptHandler:
  5447                           	opt stack 0
  5448                           tosu	equ	0xFFF
  5449                           tosh	equ	0xFFE
  5450                           tosl	equ	0xFFD
  5451                           pclath	equ	0xFFA
  5452                           tblptru	equ	0xFF8
  5453                           tblptrh	equ	0xFF7
  5454                           tblptrl	equ	0xFF6
  5455                           tablat	equ	0xFF5
  5456                           prodh	equ	0xFF4
  5457                           prodl	equ	0xFF3
  5458                           intcon	equ	0xFF2
  5459                           indf0	equ	0xFEF
  5460                           postinc0	equ	0xFEE
  5461                           plusw0	equ	0xFEB
  5462                           fsr0h	equ	0xFEA
  5463                           fsr0l	equ	0xFE9
  5464                           wreg	equ	0xFE8
  5465                           postinc1	equ	0xFE6
  5466                           postdec1	equ	0xFE5
  5467                           plusw1	equ	0xFE3
  5468                           fsr1h	equ	0xFE2
  5469                           fsr1l	equ	0xFE1
  5470                           indf2	equ	0xFDF
  5471                           postinc2	equ	0xFDE
  5472                           postdec2	equ	0xFDD
  5473                           plusw2	equ	0xFDB
  5474                           fsr2h	equ	0xFDA
  5475                           fsr2l	equ	0xFD9
  5476                           status	equ	0xFD8
  5477                           
  5478 ;; *************** function _INT2_SetInterruptHandler *****************
  5479 ;; Defined at:
  5480 ;;		line 114 in file "mcc_generated_files/ext_int.c"
  5481 ;; Parameters:    Size  Location     Type
  5482 ;;  InterruptHan    2    0[BANK0 ] PTR void 
  5483 ;;		 -> DIO5_ISR_Lora(1), INT2_DefaultInterruptHandler(1), 
  5484 ;; Auto vars:     Size  Location     Type
  5485 ;;		None
  5486 ;; Return value:  Size  Location     Type
  5487 ;;                  1    wreg      void 
  5488 ;; Registers used:
  5489 ;;		wreg, status,2, status,0
  5490 ;; Tracked objects:
  5491 ;;		On entry : 3F/0
  5492 ;;		On exit  : 3F/0
  5493 ;;		Unchanged: 3F/0
  5494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5495 ;;      Params:         0       2       0       0       0       0       0       0       0
  5496 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5497 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5498 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5499 ;;Total ram usage:        2 bytes
  5500 ;; Hardware stack levels used:    1
  5501 ;; Hardware stack levels required when called:    7
  5502 ;; This function calls:
  5503 ;;		Nothing
  5504 ;; This function is called by:
  5505 ;;		_EXT_INT_Initialize
  5506 ;;		_DIO5_ISR_Lora_Init
  5507 ;; This function uses a non-reentrant model
  5508 ;;
  5509                           
  5510                           	psect	text23
  5511  006162                     __ptext23:
  5512                           	opt stack 0
  5513  006162                     _INT2_SetInterruptHandler:
  5514                           	opt stack 20
  5515                           
  5516                           ; BSR set to: 0
  5517                           ;ext_int.c: 115: INT2_InterruptHandler = InterruptHandler;
  5518                           
  5519                           ; BSR set to: 0
  5520                           ;incstack = 0
  5521  006162  C060  F1FD         	movff	INT2_SetInterruptHandler@InterruptHandler,_INT2_InterruptHandler
  5522  006166  C061  F1FE         	movff	INT2_SetInterruptHandler@InterruptHandler+1,_INT2_InterruptHandler+1
  5523                           
  5524                           ; BSR set to: 0
  5525  00616A  0012               	return		;funcret
  5526  00616C                     __end_of_INT2_SetInterruptHandler:
  5527                           	opt stack 0
  5528                           tosu	equ	0xFFF
  5529                           tosh	equ	0xFFE
  5530                           tosl	equ	0xFFD
  5531                           pclath	equ	0xFFA
  5532                           tblptru	equ	0xFF8
  5533                           tblptrh	equ	0xFF7
  5534                           tblptrl	equ	0xFF6
  5535                           tablat	equ	0xFF5
  5536                           prodh	equ	0xFF4
  5537                           prodl	equ	0xFF3
  5538                           intcon	equ	0xFF2
  5539                           indf0	equ	0xFEF
  5540                           postinc0	equ	0xFEE
  5541                           plusw0	equ	0xFEB
  5542                           fsr0h	equ	0xFEA
  5543                           fsr0l	equ	0xFE9
  5544                           wreg	equ	0xFE8
  5545                           postinc1	equ	0xFE6
  5546                           postdec1	equ	0xFE5
  5547                           plusw1	equ	0xFE3
  5548                           fsr1h	equ	0xFE2
  5549                           fsr1l	equ	0xFE1
  5550                           indf2	equ	0xFDF
  5551                           postinc2	equ	0xFDE
  5552                           postdec2	equ	0xFDD
  5553                           plusw2	equ	0xFDB
  5554                           fsr2h	equ	0xFDA
  5555                           fsr2l	equ	0xFD9
  5556                           status	equ	0xFD8
  5557                           
  5558 ;; *************** function _INT1_SetInterruptHandler *****************
  5559 ;; Defined at:
  5560 ;;		line 73 in file "mcc_generated_files/ext_int.c"
  5561 ;; Parameters:    Size  Location     Type
  5562 ;;  InterruptHan    2    0[BANK0 ] PTR void 
  5563 ;;		 -> DIO1_ISR_Lora(1), INT1_DefaultInterruptHandler(1), 
  5564 ;; Auto vars:     Size  Location     Type
  5565 ;;		None
  5566 ;; Return value:  Size  Location     Type
  5567 ;;                  1    wreg      void 
  5568 ;; Registers used:
  5569 ;;		wreg, status,2, status,0
  5570 ;; Tracked objects:
  5571 ;;		On entry : 3F/0
  5572 ;;		On exit  : 3F/0
  5573 ;;		Unchanged: 3F/0
  5574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5575 ;;      Params:         0       2       0       0       0       0       0       0       0
  5576 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5577 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5578 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5579 ;;Total ram usage:        2 bytes
  5580 ;; Hardware stack levels used:    1
  5581 ;; Hardware stack levels required when called:    7
  5582 ;; This function calls:
  5583 ;;		Nothing
  5584 ;; This function is called by:
  5585 ;;		_EXT_INT_Initialize
  5586 ;;		_DIO1_ISR_Lora_Init
  5587 ;; This function uses a non-reentrant model
  5588 ;;
  5589                           
  5590                           	psect	text24
  5591  00616C                     __ptext24:
  5592                           	opt stack 0
  5593  00616C                     _INT1_SetInterruptHandler:
  5594                           	opt stack 20
  5595                           
  5596                           ; BSR set to: 0
  5597                           ;ext_int.c: 74: INT1_InterruptHandler = InterruptHandler;
  5598                           
  5599                           ; BSR set to: 0
  5600                           ;incstack = 0
  5601  00616C  C060  F05E         	movff	INT1_SetInterruptHandler@InterruptHandler,_INT1_InterruptHandler
  5602  006170  C061  F05F         	movff	INT1_SetInterruptHandler@InterruptHandler+1,_INT1_InterruptHandler+1
  5603                           
  5604                           ; BSR set to: 0
  5605  006174  0012               	return		;funcret
  5606  006176                     __end_of_INT1_SetInterruptHandler:
  5607                           	opt stack 0
  5608                           tosu	equ	0xFFF
  5609                           tosh	equ	0xFFE
  5610                           tosl	equ	0xFFD
  5611                           pclath	equ	0xFFA
  5612                           tblptru	equ	0xFF8
  5613                           tblptrh	equ	0xFF7
  5614                           tblptrl	equ	0xFF6
  5615                           tablat	equ	0xFF5
  5616                           prodh	equ	0xFF4
  5617                           prodl	equ	0xFF3
  5618                           intcon	equ	0xFF2
  5619                           indf0	equ	0xFEF
  5620                           postinc0	equ	0xFEE
  5621                           plusw0	equ	0xFEB
  5622                           fsr0h	equ	0xFEA
  5623                           fsr0l	equ	0xFE9
  5624                           wreg	equ	0xFE8
  5625                           postinc1	equ	0xFE6
  5626                           postdec1	equ	0xFE5
  5627                           plusw1	equ	0xFE3
  5628                           fsr1h	equ	0xFE2
  5629                           fsr1l	equ	0xFE1
  5630                           indf2	equ	0xFDF
  5631                           postinc2	equ	0xFDE
  5632                           postdec2	equ	0xFDD
  5633                           plusw2	equ	0xFDB
  5634                           fsr2h	equ	0xFDA
  5635                           fsr2l	equ	0xFD9
  5636                           status	equ	0xFD8
  5637                           
  5638 ;; *************** function _INT0_SetInterruptHandler *****************
  5639 ;; Defined at:
  5640 ;;		line 155 in file "mcc_generated_files/ext_int.c"
  5641 ;; Parameters:    Size  Location     Type
  5642 ;;  InterruptHan    2    0[BANK0 ] PTR void 
  5643 ;;		 -> DIO0_ISR_Lora(1), INT0_DefaultInterruptHandler(1), 
  5644 ;; Auto vars:     Size  Location     Type
  5645 ;;		None
  5646 ;; Return value:  Size  Location     Type
  5647 ;;                  1    wreg      void 
  5648 ;; Registers used:
  5649 ;;		None
  5650 ;; Tracked objects:
  5651 ;;		On entry : 3F/0
  5652 ;;		On exit  : 3F/0
  5653 ;;		Unchanged: 3F/0
  5654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5655 ;;      Params:         0       2       0       0       0       0       0       0       0
  5656 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5657 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5658 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5659 ;;Total ram usage:        2 bytes
  5660 ;; Hardware stack levels used:    1
  5661 ;; Hardware stack levels required when called:    7
  5662 ;; This function calls:
  5663 ;;		Nothing
  5664 ;; This function is called by:
  5665 ;;		_EXT_INT_Initialize
  5666 ;;		_DIO0_ISR_Lora_Init
  5667 ;; This function uses a non-reentrant model
  5668 ;;
  5669                           
  5670                           	psect	text25
  5671  00625E                     __ptext25:
  5672                           	opt stack 0
  5673  00625E                     _INT0_SetInterruptHandler:
  5674                           	opt stack 20
  5675                           
  5676                           ; BSR set to: 0
  5677                           
  5678                           ; BSR set to: 0
  5679                           ;incstack = 0
  5680  00625E  0012               	return		;funcret
  5681  006260                     __end_of_INT0_SetInterruptHandler:
  5682                           	opt stack 0
  5683                           tosu	equ	0xFFF
  5684                           tosh	equ	0xFFE
  5685                           tosl	equ	0xFFD
  5686                           pclath	equ	0xFFA
  5687                           tblptru	equ	0xFF8
  5688                           tblptrh	equ	0xFF7
  5689                           tblptrl	equ	0xFF6
  5690                           tablat	equ	0xFF5
  5691                           prodh	equ	0xFF4
  5692                           prodl	equ	0xFF3
  5693                           intcon	equ	0xFF2
  5694                           indf0	equ	0xFEF
  5695                           postinc0	equ	0xFEE
  5696                           plusw0	equ	0xFEB
  5697                           fsr0h	equ	0xFEA
  5698                           fsr0l	equ	0xFE9
  5699                           wreg	equ	0xFE8
  5700                           postinc1	equ	0xFE6
  5701                           postdec1	equ	0xFE5
  5702                           plusw1	equ	0xFE3
  5703                           fsr1h	equ	0xFE2
  5704                           fsr1l	equ	0xFE1
  5705                           indf2	equ	0xFDF
  5706                           postinc2	equ	0xFDE
  5707                           postdec2	equ	0xFDD
  5708                           plusw2	equ	0xFDB
  5709                           fsr2h	equ	0xFDA
  5710                           fsr2l	equ	0xFD9
  5711                           status	equ	0xFD8
  5712                           
  5713 ;; *************** function _LORAWAN_SetNetworkSessionKey *****************
  5714 ;; Defined at:
  5715 ;;		line 379 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  5716 ;; Parameters:    Size  Location     Type
  5717 ;;  networkSessi    2   10[BANK0 ] PTR unsigned char 
  5718 ;;		 -> nwkSKey(16), 
  5719 ;; Auto vars:     Size  Location     Type
  5720 ;;		None
  5721 ;; Return value:  Size  Location     Type
  5722 ;;                  1    wreg      void 
  5723 ;; Registers used:
  5724 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5725 ;; Tracked objects:
  5726 ;;		On entry : 3F/0
  5727 ;;		On exit  : 3D/0
  5728 ;;		Unchanged: 0/0
  5729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5730 ;;      Params:         0       2       0       0       0       0       0       0       0
  5731 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5732 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5733 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5734 ;;Total ram usage:        2 bytes
  5735 ;; Hardware stack levels used:    1
  5736 ;; Hardware stack levels required when called:    8
  5737 ;; This function calls:
  5738 ;;		_memcpy
  5739 ;; This function is called by:
  5740 ;;		_main
  5741 ;; This function uses a non-reentrant model
  5742 ;;
  5743                           
  5744                           	psect	text26
  5745  005C08                     __ptext26:
  5746                           	opt stack 0
  5747  005C08                     _LORAWAN_SetNetworkSessionKey:
  5748                           	opt stack 22
  5749                           
  5750                           ; BSR set to: 0
  5751                           ;lorawan.c: 381: if (networkSessionKeyNew != (0))
  5752                           
  5753                           ; BSR set to: 0
  5754                           ;incstack = 0
  5755  005C08  516A               	movf	LORAWAN_SetNetworkSessionKey@networkSessionKeyNew& (0+255),w,b
  5756  005C0A  116B               	iorwf	(LORAWAN_SetNetworkSessionKey@networkSessionKeyNew+1)& (0+255),w,b
  5757  005C0C  B4D8               	btfsc	status,2,c
  5758  005C0E  0012               	return	
  5759                           
  5760                           ; BSR set to: 0
  5761                           ;lorawan.c: 382: {
  5762                           ;lorawan.c: 383: memcpy(loRa.activationParameters.networkSessionKey, networkSessionKeyNe
      +                          w, 16);
  5763  005C10  0E22               	movlw	low (_loRa+34)
  5764  005C12  6F60               	movwf	memcpy@d1& (0+255),b
  5765  005C14  0E02               	movlw	high (_loRa+34)
  5766  005C16  6F61               	movwf	(memcpy@d1+1)& (0+255),b
  5767  005C18  C06A  F062         	movff	LORAWAN_SetNetworkSessionKey@networkSessionKeyNew,memcpy@s1
  5768  005C1C  C06B  F063         	movff	LORAWAN_SetNetworkSessionKey@networkSessionKeyNew+1,memcpy@s1+1
  5769  005C20  ECF6  F02C         	call	PL306	;call to abstracted procedure
  5770  005C24  EC94  F028         	call	_memcpy	;wreg free
  5771                           
  5772                           ; BSR set to: 0
  5773                           ;lorawan.c: 384: loRa.macKeys.networkSessionKey = 1;
  5774  005C28  0102               	movlb	2	; () banked
  5775  005C2A  89A5               	bsf	(_loRa+165)& (0+255),4,b
  5776                           
  5777                           ; BSR set to: 2
  5778                           ;lorawan.c: 385: loRa.macStatus.networkJoined = 0;
  5779  005C2C  9902               	bcf	(_loRa+2)& (0+255),4,b
  5780  005C2E  0012               	return		;funcret
  5781  005C30                     __end_of_LORAWAN_SetNetworkSessionKey:
  5782                           	opt stack 0
  5783                           tosu	equ	0xFFF
  5784                           tosh	equ	0xFFE
  5785                           tosl	equ	0xFFD
  5786                           pclath	equ	0xFFA
  5787                           tblptru	equ	0xFF8
  5788                           tblptrh	equ	0xFF7
  5789                           tblptrl	equ	0xFF6
  5790                           tablat	equ	0xFF5
  5791                           prodh	equ	0xFF4
  5792                           prodl	equ	0xFF3
  5793                           intcon	equ	0xFF2
  5794                           indf0	equ	0xFEF
  5795                           postinc0	equ	0xFEE
  5796                           plusw0	equ	0xFEB
  5797                           fsr0h	equ	0xFEA
  5798                           fsr0l	equ	0xFE9
  5799                           wreg	equ	0xFE8
  5800                           postinc1	equ	0xFE6
  5801                           postdec1	equ	0xFE5
  5802                           plusw1	equ	0xFE3
  5803                           fsr1h	equ	0xFE2
  5804                           fsr1l	equ	0xFE1
  5805                           indf2	equ	0xFDF
  5806                           postinc2	equ	0xFDE
  5807                           postdec2	equ	0xFDD
  5808                           plusw2	equ	0xFDB
  5809                           fsr2h	equ	0xFDA
  5810                           fsr2l	equ	0xFD9
  5811                           status	equ	0xFD8
  5812                           
  5813 ;; *************** function _LORAWAN_SetDeviceAddress *****************
  5814 ;; Defined at:
  5815 ;;		line 367 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  5816 ;; Parameters:    Size  Location     Type
  5817 ;;  deviceAddres    4    0[BANK0 ] unsigned long 
  5818 ;; Auto vars:     Size  Location     Type
  5819 ;;		None
  5820 ;; Return value:  Size  Location     Type
  5821 ;;                  1    wreg      void 
  5822 ;; Registers used:
  5823 ;;		None
  5824 ;; Tracked objects:
  5825 ;;		On entry : 3F/0
  5826 ;;		On exit  : 3F/2
  5827 ;;		Unchanged: 0/0
  5828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5829 ;;      Params:         0       4       0       0       0       0       0       0       0
  5830 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5831 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5832 ;;      Totals:         0       4       0       0       0       0       0       0       0
  5833 ;;Total ram usage:        4 bytes
  5834 ;; Hardware stack levels used:    1
  5835 ;; Hardware stack levels required when called:    7
  5836 ;; This function calls:
  5837 ;;		Nothing
  5838 ;; This function is called by:
  5839 ;;		_main
  5840 ;; This function uses a non-reentrant model
  5841 ;;
  5842                           
  5843                           	psect	text27
  5844  005F40                     __ptext27:
  5845                           	opt stack 0
  5846  005F40                     _LORAWAN_SetDeviceAddress:
  5847                           	opt stack 23
  5848                           
  5849                           ; BSR set to: 0
  5850                           ;lorawan.c: 369: loRa.activationParameters.deviceAddress.value = deviceAddressNew;
  5851                           
  5852                           ;incstack = 0
  5853  005F40  C060  F21E         	movff	LORAWAN_SetDeviceAddress@deviceAddressNew,_loRa+30
  5854  005F44  C061  F21F         	movff	LORAWAN_SetDeviceAddress@deviceAddressNew+1,_loRa+31
  5855  005F48  C062  F220         	movff	LORAWAN_SetDeviceAddress@deviceAddressNew+2,_loRa+32
  5856  005F4C  C063  F221         	movff	LORAWAN_SetDeviceAddress@deviceAddressNew+3,_loRa+33
  5857                           
  5858                           ;lorawan.c: 370: loRa.macKeys.deviceAddress = 1;
  5859  005F50  0102               	movlb	2	; () banked
  5860  005F52  85A5               	bsf	(_loRa+165)& (0+255),2,b
  5861                           
  5862                           ;lorawan.c: 371: loRa.macStatus.networkJoined = 0;
  5863  005F54  9902               	bcf	(_loRa+2)& (0+255),4,b
  5864                           
  5865                           ; BSR set to: 2
  5866  005F56  0012               	return		;funcret
  5867  005F58                     __end_of_LORAWAN_SetDeviceAddress:
  5868                           	opt stack 0
  5869                           tosu	equ	0xFFF
  5870                           tosh	equ	0xFFE
  5871                           tosl	equ	0xFFD
  5872                           pclath	equ	0xFFA
  5873                           tblptru	equ	0xFF8
  5874                           tblptrh	equ	0xFF7
  5875                           tblptrl	equ	0xFF6
  5876                           tablat	equ	0xFF5
  5877                           prodh	equ	0xFF4
  5878                           prodl	equ	0xFF3
  5879                           intcon	equ	0xFF2
  5880                           indf0	equ	0xFEF
  5881                           postinc0	equ	0xFEE
  5882                           plusw0	equ	0xFEB
  5883                           fsr0h	equ	0xFEA
  5884                           fsr0l	equ	0xFE9
  5885                           wreg	equ	0xFE8
  5886                           postinc1	equ	0xFE6
  5887                           postdec1	equ	0xFE5
  5888                           plusw1	equ	0xFE3
  5889                           fsr1h	equ	0xFE2
  5890                           fsr1l	equ	0xFE1
  5891                           indf2	equ	0xFDF
  5892                           postinc2	equ	0xFDE
  5893                           postdec2	equ	0xFDD
  5894                           plusw2	equ	0xFDB
  5895                           fsr2h	equ	0xFDA
  5896                           fsr2l	equ	0xFD9
  5897                           status	equ	0xFD8
  5898                           
  5899 ;; *************** function _LORAWAN_SetApplicationSessionKey *****************
  5900 ;; Defined at:
  5901 ;;		line 394 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  5902 ;; Parameters:    Size  Location     Type
  5903 ;;  applicationS    2   10[BANK0 ] PTR unsigned char 
  5904 ;;		 -> appSKey(16), 
  5905 ;; Auto vars:     Size  Location     Type
  5906 ;;		None
  5907 ;; Return value:  Size  Location     Type
  5908 ;;                  1    wreg      void 
  5909 ;; Registers used:
  5910 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5911 ;; Tracked objects:
  5912 ;;		On entry : 3F/0
  5913 ;;		On exit  : 3D/0
  5914 ;;		Unchanged: 0/0
  5915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5916 ;;      Params:         0       2       0       0       0       0       0       0       0
  5917 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5918 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5919 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5920 ;;Total ram usage:        2 bytes
  5921 ;; Hardware stack levels used:    1
  5922 ;; Hardware stack levels required when called:    8
  5923 ;; This function calls:
  5924 ;;		_memcpy
  5925 ;; This function is called by:
  5926 ;;		_main
  5927 ;; This function uses a non-reentrant model
  5928 ;;
  5929                           
  5930                           	psect	text28
  5931  0059C6                     __ptext28:
  5932                           	opt stack 0
  5933  0059C6                     _LORAWAN_SetApplicationSessionKey:
  5934                           	opt stack 22
  5935                           
  5936                           ; BSR set to: 0
  5937                           ;lorawan.c: 396: if (applicationSessionKeyNew != (0))
  5938                           
  5939                           ; BSR set to: 2
  5940                           ;incstack = 0
  5941  0059C6  516A               	movf	LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew& (0+255),w,b
  5942  0059C8  116B               	iorwf	(LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew+1)& (0+255),w,b
  5943  0059CA  B4D8               	btfsc	status,2,c
  5944  0059CC  0012               	return	
  5945                           
  5946                           ; BSR set to: 0
  5947                           ;lorawan.c: 397: {
  5948                           ;lorawan.c: 398: memcpy( loRa.activationParameters.applicationSessionKey, applicationSes
      +                          sionKeyNew, 16);
  5949  0059CE  0E32               	movlw	low (_loRa+50)
  5950  0059D0  6F60               	movwf	memcpy@d1& (0+255),b
  5951  0059D2  0E02               	movlw	high (_loRa+50)
  5952  0059D4  6F61               	movwf	(memcpy@d1+1)& (0+255),b
  5953  0059D6  C06A  F062         	movff	LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew,memcpy@s1
  5954  0059DA  C06B  F063         	movff	LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew+1,memcpy@s1+1
  5955  0059DE  D806               	call	PL306	;call to abstracted procedure
  5956  0059E0  EC94  F028         	call	_memcpy	;wreg free
  5957                           
  5958                           ; BSR set to: 0
  5959                           ;lorawan.c: 399: loRa.macKeys.applicationSessionKey = 1;
  5960  0059E4  0102               	movlb	2	; () banked
  5961  0059E6  8BA5               	bsf	(_loRa+165)& (0+255),5,b
  5962                           
  5963                           ; BSR set to: 2
  5964                           ;lorawan.c: 400: loRa.macStatus.networkJoined = 0;
  5965  0059E8  9902               	bcf	(_loRa+2)& (0+255),4,b
  5966  0059EA  0012               	return		;funcret
  5967  0059EC                     __end_of_LORAWAN_SetApplicationSessionKey:
  5968                           	opt stack 0
  5969  0059EC                     PL306:
  5970                           	opt stack 22
  5971  0059EC  6B65               	clrf	(memcpy@n+1)& (0+255),b
  5972  0059EE  0E10               	movlw	16
  5973  0059F0  6F64               	movwf	memcpy@n& (0+255),b
  5974  0059F2  0C10               	retlw	16
  5975  0059F4                     __end_ofPL306:
  5976                           	opt stack 0
  5977                           tosu	equ	0xFFF
  5978                           tosh	equ	0xFFE
  5979                           tosl	equ	0xFFD
  5980                           pclath	equ	0xFFA
  5981                           tblptru	equ	0xFF8
  5982                           tblptrh	equ	0xFF7
  5983                           tblptrl	equ	0xFF6
  5984                           tablat	equ	0xFF5
  5985                           prodh	equ	0xFF4
  5986                           prodl	equ	0xFF3
  5987                           intcon	equ	0xFF2
  5988                           indf0	equ	0xFEF
  5989                           postinc0	equ	0xFEE
  5990                           plusw0	equ	0xFEB
  5991                           fsr0h	equ	0xFEA
  5992                           fsr0l	equ	0xFE9
  5993                           wreg	equ	0xFE8
  5994                           postinc1	equ	0xFE6
  5995                           postdec1	equ	0xFE5
  5996                           plusw1	equ	0xFE3
  5997                           fsr1h	equ	0xFE2
  5998                           fsr1l	equ	0xFE1
  5999                           indf2	equ	0xFDF
  6000                           postinc2	equ	0xFDE
  6001                           postdec2	equ	0xFDD
  6002                           plusw2	equ	0xFDB
  6003                           fsr2h	equ	0xFDA
  6004                           fsr2l	equ	0xFD9
  6005                           status	equ	0xFD8
  6006                           
  6007 ;; *************** function _LORAWAN_Mainloop *****************
  6008 ;; Defined at:
  6009 ;;		line 2238 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  6010 ;; Parameters:    Size  Location     Type
  6011 ;;		None
  6012 ;; Auto vars:     Size  Location     Type
  6013 ;;		None
  6014 ;; Return value:  Size  Location     Type
  6015 ;;                  1    wreg      void 
  6016 ;; Registers used:
  6017 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+4, btemp+5, btem
      +p+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6018 ;; Tracked objects:
  6019 ;;		On entry : 0/1
  6020 ;;		On exit  : 30/0
  6021 ;;		Unchanged: 0/0
  6022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6023 ;;      Params:         0       0       0       0       0       0       0       0       0
  6024 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6025 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6026 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6027 ;;Total ram usage:        0 bytes
  6028 ;; Hardware stack levels used:    1
  6029 ;; Hardware stack levels required when called:   18
  6030 ;; This function calls:
  6031 ;;		_INTERRUPT_GetDioStatus
  6032 ;;		_RADIO_DIO0
  6033 ;;		_RADIO_DIO1
  6034 ;;		_RADIO_DIO2
  6035 ;;		_RADIO_DIO3
  6036 ;;		_RADIO_DIO4
  6037 ;;		_RADIO_DIO5
  6038 ;;		_SwTimersExecute
  6039 ;; This function is called by:
  6040 ;;		_main
  6041 ;; This function uses a non-reentrant model
  6042 ;;
  6043                           
  6044                           	psect	text29
  6045  00573A                     __ptext29:
  6046                           	opt stack 0
  6047  00573A                     _LORAWAN_Mainloop:
  6048                           	opt stack 12
  6049                           
  6050                           ;lorawan.c: 2240: SwTimersExecute();
  6051                           
  6052                           ;incstack = 0
  6053  00573A  ECA9  F023         	call	_SwTimersExecute	;wreg free
  6054                           
  6055                           ; BSR set to: 0
  6056                           ;lorawan.c: 2243: localDioStatus = INTERRUPT_GetDioStatus();
  6057  00573E  EC76  F030         	call	_INTERRUPT_GetDioStatus	;wreg free
  6058  005742  0101               	movlb	1	; () banked
  6059  005744  6F7D               	movwf	_localDioStatus& (0+255),b
  6060                           
  6061                           ; BSR set to: 1
  6062                           ;lorawan.c: 2245: if ((localDioStatus & 0x01) != 0)
  6063  005746  B17D               	btfsc	_localDioStatus& (0+255),0,b
  6064                           
  6065                           ; BSR set to: 1
  6066                           ;lorawan.c: 2246: {
  6067                           ;lorawan.c: 2247: RADIO_DIO0();
  6068  005748  ECF9  F025         	call	_RADIO_DIO0	;wreg free
  6069                           
  6070                           ;lorawan.c: 2248: }
  6071                           ;lorawan.c: 2249: if ((localDioStatus & 0x02) != 0)
  6072  00574C  0101               	movlb	1	; () banked
  6073  00574E  B37D               	btfsc	_localDioStatus& (0+255),1,b
  6074                           
  6075                           ; BSR set to: 1
  6076                           ;lorawan.c: 2250: {
  6077                           ;lorawan.c: 2251: RADIO_DIO1();
  6078  005750  ECBB  F02B         	call	_RADIO_DIO1	;wreg free
  6079                           
  6080                           ;lorawan.c: 2252: }
  6081                           ;lorawan.c: 2253: if ((localDioStatus & 0x04) != 0)
  6082  005754  0101               	movlb	1	; () banked
  6083  005756  B57D               	btfsc	_localDioStatus& (0+255),2,b
  6084                           
  6085                           ; BSR set to: 1
  6086                           ;lorawan.c: 2254: {
  6087                           ;lorawan.c: 2255: RADIO_DIO2();
  6088  005758  EC95  F02A         	call	_RADIO_DIO2	;wreg free
  6089                           
  6090                           ;lorawan.c: 2256: }
  6091                           ;lorawan.c: 2257: if ((localDioStatus & 0x08) != 0)
  6092  00575C  0101               	movlb	1	; () banked
  6093  00575E  B77D               	btfsc	_localDioStatus& (0+255),3,b
  6094                           
  6095                           ; BSR set to: 1
  6096                           ;lorawan.c: 2258: {
  6097                           ;lorawan.c: 2259: RADIO_DIO3();
  6098  005760  ECC4  F02F         	call	_RADIO_DIO3	;wreg free
  6099                           
  6100                           ;lorawan.c: 2260: }
  6101                           ;lorawan.c: 2261: if ((localDioStatus & 0x10) != 0)
  6102  005764  0101               	movlb	1	; () banked
  6103  005766  B97D               	btfsc	_localDioStatus& (0+255),4,b
  6104                           
  6105                           ; BSR set to: 1
  6106                           ;lorawan.c: 2262: {
  6107                           ;lorawan.c: 2263: RADIO_DIO4();
  6108  005768  ECB8  F02F         	call	_RADIO_DIO4	;wreg free
  6109                           
  6110                           ;lorawan.c: 2264: }
  6111                           ;lorawan.c: 2265: if ((localDioStatus & 0x20) != 0)
  6112  00576C  0101               	movlb	1	; () banked
  6113  00576E  BB7D               	btfsc	_localDioStatus& (0+255),5,b
  6114                           
  6115                           ; BSR set to: 1
  6116                           ;lorawan.c: 2266: {
  6117                           ;lorawan.c: 2267: RADIO_DIO5();
  6118  005770  ECAC  F02F         	call	_RADIO_DIO5	;wreg free
  6119  005774  0012               	return		;funcret
  6120  005776                     __end_of_LORAWAN_Mainloop:
  6121                           	opt stack 0
  6122                           tosu	equ	0xFFF
  6123                           tosh	equ	0xFFE
  6124                           tosl	equ	0xFFD
  6125                           pclath	equ	0xFFA
  6126                           tblptru	equ	0xFF8
  6127                           tblptrh	equ	0xFF7
  6128                           tblptrl	equ	0xFF6
  6129                           tablat	equ	0xFF5
  6130                           prodh	equ	0xFF4
  6131                           prodl	equ	0xFF3
  6132                           intcon	equ	0xFF2
  6133                           indf0	equ	0xFEF
  6134                           postinc0	equ	0xFEE
  6135                           plusw0	equ	0xFEB
  6136                           fsr0h	equ	0xFEA
  6137                           fsr0l	equ	0xFE9
  6138                           wreg	equ	0xFE8
  6139                           postinc1	equ	0xFE6
  6140                           postdec1	equ	0xFE5
  6141                           plusw1	equ	0xFE3
  6142                           fsr1h	equ	0xFE2
  6143                           fsr1l	equ	0xFE1
  6144                           indf2	equ	0xFDF
  6145                           postinc2	equ	0xFDE
  6146                           postdec2	equ	0xFDD
  6147                           plusw2	equ	0xFDB
  6148                           fsr2h	equ	0xFDA
  6149                           fsr2l	equ	0xFD9
  6150                           status	equ	0xFD8
  6151                           
  6152 ;; *************** function _SwTimersExecute *****************
  6153 ;; Defined at:
  6154 ;;		line 260 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
  6155 ;; Parameters:    Size  Location     Type
  6156 ;;		None
  6157 ;; Auto vars:     Size  Location     Type
  6158 ;;  i               1  132[BANK0 ] unsigned char 
  6159 ;; Return value:  Size  Location     Type
  6160 ;;                  1    wreg      void 
  6161 ;; Registers used:
  6162 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+4, btemp+5, btem
      +p+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6163 ;; Tracked objects:
  6164 ;;		On entry : 0/1
  6165 ;;		On exit  : 3F/0
  6166 ;;		Unchanged: 0/0
  6167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6168 ;;      Params:         0       0       0       0       0       0       0       0       0
  6169 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6170 ;;      Temps:          0       4       0       0       0       0       0       0       0
  6171 ;;      Totals:         0       5       0       0       0       0       0       0       0
  6172 ;;Total ram usage:        5 bytes
  6173 ;; Hardware stack levels used:    1
  6174 ;; Hardware stack levels required when called:   17
  6175 ;; This function calls:
  6176 ;;		Absolute function
  6177 ;;		_AckRetransmissionCallback
  6178 ;;		_AutomaticReplyCallback
  6179 ;;		_DutyCycleCallback
  6180 ;;		_LORAWAN_LinkCheckCallback
  6181 ;;		_LORAWAN_ReceiveWindow1Callback
  6182 ;;		_LORAWAN_ReceiveWindow2Callback
  6183 ;;		_RADIO_RxFSKTimeout
  6184 ;;		_RADIO_WatchdogTimeout
  6185 ;;		_UnconfirmedTransmissionCallback
  6186 ;;		_UpdateJoinSuccessState
  6187 ;; This function is called by:
  6188 ;;		_LORAWAN_Mainloop
  6189 ;; This function uses a non-reentrant model
  6190 ;;
  6191                           
  6192                           	psect	text30
  6193  004752                     __ptext30:
  6194                           	opt stack 0
  6195  004752                     _SwTimersExecute:
  6196                           	opt stack 12
  6197                           
  6198                           ;sw_timer.c: 262: uint8_t i;
  6199                           ;sw_timer.c: 264: (INTCONbits.GIE = 0);
  6200                           
  6201                           ;incstack = 0
  6202  004752  9EF2               	bcf	intcon,7,c	;volatile
  6203                           
  6204                           ;sw_timer.c: 265: for (i = 0; i < allocatedTimers; i++)
  6205  004754  0100               	movlb	0	; () banked
  6206  004756  6BE4               	clrf	SwTimersExecute@i& (0+255),b
  6207  004758  D029               	goto	l16080
  6208  00475A                     l16066:
  6209                           
  6210                           ; BSR set to: 0
  6211                           ;sw_timer.c: 266: {
  6212                           ;sw_timer.c: 269: if (swTimers[i].running == 1)
  6213  00475A  51E4               	movf	SwTimersExecute@i& (0+255),w,b
  6214  00475C  D82C               	call	PL40	;call to abstracted procedure
  6215  00475E  04DE               	decf	postinc2,w,c
  6216  004760  E123               	bnz	l16078
  6217                           
  6218                           ; BSR set to: 0
  6219                           ;sw_timer.c: 270: {
  6220                           ;sw_timer.c: 271: if (0 == swTimers[i].ticksRemaining)
  6221  004762  51E4               	movf	SwTimersExecute@i& (0+255),w,b
  6222  004764  EC84  F01F         	call	PL10	;call to abstracted procedure
  6223  004768  ECBB  F00E         	call	PL130	;call to abstracted procedure
  6224  00476C  E11D               	bnz	l16078
  6225                           
  6226                           ; BSR set to: 0
  6227                           ;sw_timer.c: 272: {
  6228                           ;sw_timer.c: 273: swTimers[i].running = 0;
  6229  00476E  51E4               	movf	SwTimersExecute@i& (0+255),w,b
  6230  004770  D822               	call	PL40	;call to abstracted procedure
  6231  004772  6ADF               	clrf	indf2,c
  6232                           
  6233                           ;sw_timer.c: 274: if ((0) != swTimers[i].callback)
  6234  004774  51E4               	movf	SwTimersExecute@i& (0+255),w,b
  6235  004776  D827               	call	PL94	;call to abstracted procedure
  6236  004778  50DE               	movf	postinc2,w,c
  6237  00477A  10DE               	iorwf	postinc2,w,c
  6238  00477C  E015               	bz	l16078
  6239                           
  6240                           ; BSR set to: 0
  6241                           ;sw_timer.c: 275: {
  6242                           ;sw_timer.c: 276: (INTCONbits.GIE = 1);
  6243  00477E  8EF2               	bsf	intcon,7,c	;volatile
  6244                           
  6245                           ; BSR set to: 0
  6246                           ;sw_timer.c: 277: swTimers[i].callback(swTimers[i].callbackParameter);
  6247  004780  51E4               	movf	SwTimersExecute@i& (0+255),w,b
  6248  004782  ECBC  F02D         	call	PL158	;call to abstracted procedure
  6249  004786  50DF               	movf	indf2,w,c
  6250  004788  6EE6               	movwf	postinc1,c
  6251  00478A  51E4               	movf	SwTimersExecute@i& (0+255),w,b
  6252  00478C  D81C               	call	PL94	;call to abstracted procedure
  6253  00478E  D801               	call	u19558
  6254  004790  D00A               	goto	l16076
  6255  004792                     u19558:
  6256  004792  0005               	push	
  6257  004794  6EFA               	movwf	pclath,c
  6258  004796  50DE               	movf	postinc2,w,c
  6259  004798  6EFD               	movwf	tosl,c
  6260  00479A  50DE               	movf	postinc2,w,c
  6261  00479C  6EFE               	movwf	tosh,c
  6262  00479E  50F8               	movf	tblptru,w,c
  6263  0047A0  6EFF               	movwf	tosu,c
  6264  0047A2  50FA               	movf	pclath,w,c
  6265  0047A4  0012               	return		;indir
  6266  0047A6                     l16076:
  6267                           
  6268                           ;sw_timer.c: 278: (INTCONbits.GIE = 0);
  6269  0047A6  9EF2               	bcf	intcon,7,c	;volatile
  6270  0047A8                     l16078:
  6271  0047A8  0100               	movlb	0	; () banked
  6272  0047AA  2BE4               	incf	SwTimersExecute@i& (0+255),f,b
  6273  0047AC                     l16080:
  6274                           
  6275                           ; BSR set to: 0
  6276  0047AC  51FF               	movf	_allocatedTimers& (0+255),w,b	;volatile
  6277  0047AE  5DE4               	subwf	SwTimersExecute@i& (0+255),w,b
  6278  0047B0  E3D4               	bnc	l16066
  6279                           
  6280                           ; BSR set to: 0
  6281                           ;sw_timer.c: 279: }
  6282                           ;sw_timer.c: 280: }
  6283                           ;sw_timer.c: 281: }
  6284                           ;sw_timer.c: 282: }
  6285                           ;sw_timer.c: 283: (INTCONbits.GIE = 1);
  6286  0047B2  8EF2               	bsf	intcon,7,c	;volatile
  6287                           
  6288                           ; BSR set to: 0
  6289  0047B4  0012               	return		;funcret
  6290  0047B6                     __end_of_SwTimersExecute:
  6291                           	opt stack 0
  6292  0047B6                     PL40:
  6293                           	opt stack 12
  6294  0047B6  0D08               	mullw	8
  6295  0047B8  0E04               	movlw	low (_swTimers+4)
  6296  0047BA  24F3               	addwf	prodl,w,c
  6297  0047BC  6ED9               	movwf	fsr2l,c
  6298  0047BE  0E03               	movlw	high (_swTimers+4)
  6299  0047C0  20F4               	addwfc	prodh,w,c
  6300  0047C2  6EDA               	movwf	fsr2h,c
  6301  0047C4  0012               	return	
  6302  0047C6                     __end_ofPL40:
  6303                           	opt stack 0
  6304  0047C6                     PL94:
  6305                           	opt stack 12
  6306  0047C6  0D08               	mullw	8
  6307  0047C8  0E06               	movlw	low (_swTimers+6)
  6308  0047CA  24F3               	addwf	prodl,w,c
  6309  0047CC  6ED9               	movwf	fsr2l,c
  6310  0047CE  0E03               	movlw	high (_swTimers+6)
  6311  0047D0  20F4               	addwfc	prodh,w,c
  6312  0047D2  6EDA               	movwf	fsr2h,c
  6313  0047D4  0012               	return	
  6314  0047D6                     __end_ofPL94:
  6315                           	opt stack 0
  6316                           tosu	equ	0xFFF
  6317                           tosh	equ	0xFFE
  6318                           tosl	equ	0xFFD
  6319                           pclath	equ	0xFFA
  6320                           tblptru	equ	0xFF8
  6321                           tblptrh	equ	0xFF7
  6322                           tblptrl	equ	0xFF6
  6323                           tablat	equ	0xFF5
  6324                           prodh	equ	0xFF4
  6325                           prodl	equ	0xFF3
  6326                           intcon	equ	0xFF2
  6327                           indf0	equ	0xFEF
  6328                           postinc0	equ	0xFEE
  6329                           plusw0	equ	0xFEB
  6330                           fsr0h	equ	0xFEA
  6331                           fsr0l	equ	0xFE9
  6332                           wreg	equ	0xFE8
  6333                           postinc1	equ	0xFE6
  6334                           postdec1	equ	0xFE5
  6335                           plusw1	equ	0xFE3
  6336                           fsr1h	equ	0xFE2
  6337                           fsr1l	equ	0xFE1
  6338                           indf2	equ	0xFDF
  6339                           postinc2	equ	0xFDE
  6340                           postdec2	equ	0xFDD
  6341                           plusw2	equ	0xFDB
  6342                           fsr2h	equ	0xFDA
  6343                           fsr2l	equ	0xFD9
  6344                           status	equ	0xFD8
  6345                           
  6346 ;; *************** function _RADIO_WatchdogTimeout *****************
  6347 ;; Defined at:
  6348 ;;		line 1408 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  6349 ;; Parameters:    Size  Location     Type
  6350 ;;  param           1  [STACK] unsigned char 
  6351 ;; Auto vars:     Size  Location     Type
  6352 ;;		None
  6353 ;; Return value:  Size  Location     Type
  6354 ;;                  1  [STACK] void 
  6355 ;; Registers used:
  6356 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tb
      +lptru, prodl, prodh, cstack
  6357 ;; Tracked objects:
  6358 ;;		On entry : 3F/0
  6359 ;;		On exit  : 3C/0
  6360 ;;		Unchanged: 0/0
  6361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6362 ;;      Params:         0       0       0       0       0       0       0       0       0
  6363 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6364 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6365 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6366 ;;Total ram usage:        0 bytes
  6367 ;; Hardware stack levels used:    1
  6368 ;; Hardware stack levels required when called:   16
  6369 ;; This function calls:
  6370 ;;		_LORAWAN_RxTimeout
  6371 ;;		_LORAWAN_TxDone
  6372 ;;		_RADIO_WriteMode
  6373 ;; This function is called by:
  6374 ;;		_RADIO_Init
  6375 ;;		_SwTimersExecute
  6376 ;; This function uses a reentrant model
  6377 ;;
  6378                           
  6379                           	psect	text31
  6380  00585A                     __ptext31:
  6381                           	opt stack 0
  6382  00585A                     _RADIO_WatchdogTimeout:
  6383                           	opt stack 0
  6384                           
  6385                           ;radio_driver_SX1276.c: 1410: RADIO_WriteMode(MODE_STANDBY, RadioConfiguration.modulatio
      +                          n, 1);
  6386                           
  6387                           ; BSR set to: 0
  6388                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  6389                           ;incstack = 0
  6390  00585A  ECB4  F00F         	call	PL346	;call to abstracted procedure
  6391  00585E  ECDB  F01A         	call	_RADIO_WriteMode
  6392                           
  6393                           ;radio_driver_SX1276.c: 1411: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  6394  005862  EC66  F02D         	call	PL78	;call to abstracted procedure
  6395  005866  ECDB  F01A         	call	_RADIO_WriteMode
  6396                           
  6397                           ;radio_driver_SX1276.c: 1412: RadioConfiguration.flags |= (1 << (4));
  6398  00586A  0101               	movlb	1	; () banked
  6399  00586C  89A2               	bsf	(_RadioConfiguration+35)& (0+255),4,b
  6400                           
  6401                           ; BSR set to: 1
  6402                           ;radio_driver_SX1276.c: 1413: if ((RadioConfiguration.flags & (1 << (1))) != 0)
  6403  00586E  A3A2               	btfss	(_RadioConfiguration+35)& (0+255),1,b
  6404  005870  D004               	goto	l2385
  6405                           
  6406                           ; BSR set to: 1
  6407                           ;radio_driver_SX1276.c: 1414: {
  6408                           ;radio_driver_SX1276.c: 1415: RadioConfiguration.flags &= ~(1 << (1));
  6409  005872  93A2               	bcf	(_RadioConfiguration+35)& (0+255),1,b
  6410                           
  6411                           ; BSR set to: 1
  6412                           ;radio_driver_SX1276.c: 1416: LORAWAN_RxTimeout();
  6413  005874  EC90  F00B         	call	_LORAWAN_RxTimeout	;wreg free
  6414                           
  6415                           ;radio_driver_SX1276.c: 1417: }
  6416  005878  D009               	goto	l2388
  6417  00587A                     l2385:
  6418                           
  6419                           ; BSR set to: 1
  6420                           ;radio_driver_SX1276.c: 1418: else if ((RadioConfiguration.flags & (1 << (0))) != 0)
  6421  00587A  A1A2               	btfss	(_RadioConfiguration+35)& (0+255),0,b
  6422  00587C  D007               	goto	l2388
  6423                           
  6424                           ; BSR set to: 1
  6425                           ;radio_driver_SX1276.c: 1419: {
  6426                           ;radio_driver_SX1276.c: 1420: RadioConfiguration.flags &= ~(1 << (0));
  6427  00587E  91A2               	bcf	(_RadioConfiguration+35)& (0+255),0,b
  6428                           
  6429                           ; BSR set to: 1
  6430                           ;radio_driver_SX1276.c: 1425: LORAWAN_TxDone(RadioConfiguration.watchdogTimerTimeout);
  6431  005880  C1A9  F0B0         	movff	_RadioConfiguration+42,LORAWAN_TxDone@timeOnAir
  6432  005884  C1AA  F0B1         	movff	_RadioConfiguration+43,LORAWAN_TxDone@timeOnAir+1
  6433  005888  EC5E  F004         	call	_LORAWAN_TxDone	;wreg free
  6434  00588C                     l2388:
  6435                           
  6436                           ; _RADIO_WatchdogTimeout: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 pars
      +                          ize = 1, argsize = 1, vargsize = 0
  6437  00588C  52E5               	movf	postdec1,f,c
  6438  00588E  0012               	return		;funcret
  6439  005890                     __end_of_RADIO_WatchdogTimeout:
  6440                           	opt stack 0
  6441                           tosu	equ	0xFFF
  6442                           tosh	equ	0xFFE
  6443                           tosl	equ	0xFFD
  6444                           pclath	equ	0xFFA
  6445                           tblptru	equ	0xFF8
  6446                           tblptrh	equ	0xFF7
  6447                           tblptrl	equ	0xFF6
  6448                           tablat	equ	0xFF5
  6449                           prodh	equ	0xFF4
  6450                           prodl	equ	0xFF3
  6451                           intcon	equ	0xFF2
  6452                           indf0	equ	0xFEF
  6453                           postinc0	equ	0xFEE
  6454                           plusw0	equ	0xFEB
  6455                           fsr0h	equ	0xFEA
  6456                           fsr0l	equ	0xFE9
  6457                           wreg	equ	0xFE8
  6458                           postinc1	equ	0xFE6
  6459                           postdec1	equ	0xFE5
  6460                           plusw1	equ	0xFE3
  6461                           fsr1h	equ	0xFE2
  6462                           fsr1l	equ	0xFE1
  6463                           indf2	equ	0xFDF
  6464                           postinc2	equ	0xFDE
  6465                           postdec2	equ	0xFDD
  6466                           plusw2	equ	0xFDB
  6467                           fsr2h	equ	0xFDA
  6468                           fsr2l	equ	0xFD9
  6469                           status	equ	0xFD8
  6470                           
  6471 ;; *************** function _RADIO_RxFSKTimeout *****************
  6472 ;; Defined at:
  6473 ;;		line 1392 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  6474 ;; Parameters:    Size  Location     Type
  6475 ;;  param           1  [STACK] unsigned char 
  6476 ;; Auto vars:     Size  Location     Type
  6477 ;;  irqFlags        1  [STACK] unsigned char 
  6478 ;; Return value:  Size  Location     Type
  6479 ;;                  1  [STACK] void 
  6480 ;; Registers used:
  6481 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+11, tosl, tblptr
      +l, tblptrh, tblptru, prodl, prodh, cstack
  6482 ;; Tracked objects:
  6483 ;;		On entry : 3F/0
  6484 ;;		On exit  : 3C/0
  6485 ;;		Unchanged: 0/0
  6486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6487 ;;      Params:         0       0       0       0       0       0       0       0       0
  6488 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6489 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6490 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6491 ;;Total ram usage:        0 bytes
  6492 ;; Hardware stack levels used:    1
  6493 ;; Hardware stack levels required when called:   16
  6494 ;; This function calls:
  6495 ;;		_LORAWAN_RxTimeout
  6496 ;;		_RADIO_RegisterRead
  6497 ;;		_RADIO_WriteMode
  6498 ;;		_SwTimerStop
  6499 ;; This function is called by:
  6500 ;;		_RADIO_Init
  6501 ;;		_SwTimersExecute
  6502 ;; This function uses a reentrant model
  6503 ;;
  6504                           
  6505                           	psect	text32
  6506  005964                     __ptext32:
  6507                           	opt stack 0
  6508  005964                     _RADIO_RxFSKTimeout:
  6509                           	opt stack 0
  6510                           
  6511                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  6512  005964  52E6               	movf	postinc1,f,c
  6513                           
  6514                           ;radio_driver_SX1276.c: 1394: uint8_t irqFlags;
  6515                           ;radio_driver_SX1276.c: 1395: irqFlags = RADIO_RegisterRead(0x3E);
  6516                           
  6517                           ;incstack = 0
  6518  005966  0E3E               	movlw	62
  6519  005968  EC64  F02E         	call	_RADIO_RegisterRead
  6520  00596C  6E53               	movwf	btemp+11,c
  6521                           
  6522                           ;stkvar	RADIO_RxFSKTimeout@irqFlags @ sp[(-1)+0]
  6523  00596E  0EFF               	movlw	-1
  6524  005970  C053  FFE3         	movff	btemp+11,plusw1
  6525                           
  6526                           ; BSR set to: 0
  6527                           ;radio_driver_SX1276.c: 1396: if (0 == (irqFlags & (1<<(0))))
  6528                           ;stkvar	RADIO_RxFSKTimeout@irqFlags @ sp[(-1)+0]
  6529  005974  B0E3               	btfsc	plusw1,0,c
  6530  005976  EFF9  F019         	goto	PL448
  6531                           
  6532                           ; BSR set to: 0
  6533                           ;radio_driver_SX1276.c: 1397: {
  6534                           ;radio_driver_SX1276.c: 1399: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  6535  00597A  EC77  F019         	call	PL278	;call to abstracted procedure
  6536  00597E  ECDB  F01A         	call	_RADIO_WriteMode
  6537                           
  6538                           ;radio_driver_SX1276.c: 1401: SwTimerStop(RadioConfiguration.watchdogTimerId);
  6539  005982  0101               	movlb	1	; () banked
  6540  005984  51A8               	movf	(_RadioConfiguration+41)& (0+255),w,b
  6541  005986  EC65  F030         	call	_SwTimerStop
  6542                           
  6543                           ; BSR set to: 0
  6544                           ;radio_driver_SX1276.c: 1402: RadioConfiguration.flags &= ~(1 << (1));
  6545  00598A  0101               	movlb	1	; () banked
  6546  00598C  93A2               	bcf	(_RadioConfiguration+35)& (0+255),1,b
  6547                           
  6548                           ; BSR set to: 1
  6549                           ;radio_driver_SX1276.c: 1403: LORAWAN_RxTimeout();
  6550  00598E  EC90  F00B         	call	_LORAWAN_RxTimeout	;wreg free
  6551  005992                     l2382:
  6552                           
  6553                           ; _RADIO_RxFSKTimeout: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize
      +                           = 1, argsize = 1, vargsize = 0
  6554  005992  EFF9  F019         	goto	PL448	;call to abstracted procedure
  6555  005996                     __end_of_RADIO_RxFSKTimeout:
  6556                           	opt stack 0
  6557                           tosu	equ	0xFFF
  6558                           tosh	equ	0xFFE
  6559                           tosl	equ	0xFFD
  6560                           pclath	equ	0xFFA
  6561                           tblptru	equ	0xFF8
  6562                           tblptrh	equ	0xFF7
  6563                           tblptrl	equ	0xFF6
  6564                           tablat	equ	0xFF5
  6565                           prodh	equ	0xFF4
  6566                           prodl	equ	0xFF3
  6567                           intcon	equ	0xFF2
  6568                           indf0	equ	0xFEF
  6569                           postinc0	equ	0xFEE
  6570                           plusw0	equ	0xFEB
  6571                           fsr0h	equ	0xFEA
  6572                           fsr0l	equ	0xFE9
  6573                           wreg	equ	0xFE8
  6574                           postinc1	equ	0xFE6
  6575                           postdec1	equ	0xFE5
  6576                           plusw1	equ	0xFE3
  6577                           fsr1h	equ	0xFE2
  6578                           fsr1l	equ	0xFE1
  6579                           indf2	equ	0xFDF
  6580                           postinc2	equ	0xFDE
  6581                           postdec2	equ	0xFDD
  6582                           plusw2	equ	0xFDB
  6583                           fsr2h	equ	0xFDA
  6584                           fsr2l	equ	0xFD9
  6585                           status	equ	0xFD8
  6586                           
  6587 ;; *************** function _DutyCycleCallback *****************
  6588 ;; Defined at:
  6589 ;;		line 1221 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
  6590 ;; Parameters:    Size  Location     Type
  6591 ;;  param           1  [STACK] unsigned char 
  6592 ;; Auto vars:     Size  Location     Type
  6593 ;;  minim           4  [STACK] unsigned long 
  6594 ;;  i               1  [STACK] unsigned char 
  6595 ;;  found           1  [STACK] unsigned char 
  6596 ;; Return value:  Size  Location     Type
  6597 ;;                  1  [STACK] void 
  6598 ;; Registers used:
  6599 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+1, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9,
      + btemp+10, btemp+11, prodl, prodh, cstack
  6600 ;; Tracked objects:
  6601 ;;		On entry : 3F/0
  6602 ;;		On exit  : 0/0
  6603 ;;		Unchanged: 0/0
  6604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6605 ;;      Params:         0       0       0       0       0       0       0       0       0
  6606 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6607 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6608 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6609 ;;Total ram usage:        0 bytes
  6610 ;; Hardware stack levels used:    1
  6611 ;; Hardware stack levels required when called:   11
  6612 ;; This function calls:
  6613 ;;		_SwTimerSetTimeout
  6614 ;;		_SwTimerStart
  6615 ;;		___lldiv
  6616 ;; This function is called by:
  6617 ;;		_SetCallbackSoftwareTimers
  6618 ;;		_SwTimersExecute
  6619 ;; This function uses a reentrant model
  6620 ;;
  6621                           
  6622                           	psect	text33
  6623  001B84                     __ptext33:
  6624                           	opt stack 0
  6625  001B84                     _DutyCycleCallback:
  6626                           	opt stack 0
  6627                           
  6628                           ; autosize = 10, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 va
      +                          rgsize = 0, retsize = 0
  6629  001B84  0E0A               	movlw	10
  6630  001B86  26E1               	addwf	fsr1l,f,c
  6631  001B88  0E00               	movlw	0
  6632  001B8A  22E2               	addwfc	fsr1h,f,c
  6633                           
  6634                           ;lorawan_eu.c: 1223: uint32_t minim = (4294967295UL);
  6635                           
  6636                           ;incstack = 0
  6637  001B8C  6850               	setf	btemp+8,c
  6638  001B8E  6851               	setf	btemp+9,c
  6639  001B90  6852               	setf	btemp+10,c
  6640  001B92  6853               	setf	btemp+11,c
  6641                           
  6642                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6643                           
  6644                           ;lorawan_eu.c: 1224: bool found = 0;
  6645                           ;stkvar	DutyCycleCallback@found @ sp[(-10)+9]
  6646  001B94  D8E1               	call	PL118	;call to abstracted procedure
  6647                           
  6648                           ;lorawan_eu.c: 1225: uint8_t i;
  6649                           ;lorawan_eu.c: 1227: for (i=0; i < 16; i++)
  6650                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6651  001B96  0EFE               	movlw	-2
  6652  001B98  6AE3               	clrf	plusw1,c
  6653  001B9A                     l14978:
  6654                           
  6655                           ;lorawan_eu.c: 1228: {
  6656                           ;lorawan_eu.c: 1230: if ((Channels[i].status == 1) && ( Channels[i].channelTimer != 0 ))
  6657                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6658  001B9A  0EFE               	movlw	-2
  6659  001B9C  50E3               	movf	plusw1,w,c
  6660  001B9E  EC86  F021         	call	PL12	;call to abstracted procedure
  6661  001BA2  E155               	bnz	l14996
  6662                           
  6663                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6664  001BA4  0EFE               	movlw	-2
  6665  001BA6  50E3               	movf	plusw1,w,c
  6666  001BA8  EC51  F006         	call	PL4	;call to abstracted procedure
  6667  001BAC  D8E4               	call	PL130	;call to abstracted procedure
  6668  001BAE  E04F               	bz	l14996
  6669                           
  6670                           ;lorawan_eu.c: 1231: {
  6671                           ;lorawan_eu.c: 1232: if ( Channels[i].channelTimer > loRa.lastTimerValue )
  6672                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6673  001BB0  0EFE               	movlw	-2
  6674  001BB2  50E3               	movf	plusw1,w,c
  6675  001BB4  EC51  F006         	call	PL4	;call to abstracted procedure
  6676  001BB8  50DE               	movf	postinc2,w,c
  6677  001BBA  0102               	movlb	2	; () banked
  6678  001BBC  5DC8               	subwf	(_loRa+200)& (0+255),w,b
  6679  001BBE  50DE               	movf	postinc2,w,c
  6680  001BC0  59C9               	subwfb	(_loRa+201)& (0+255),w,b
  6681  001BC2  50DE               	movf	postinc2,w,c
  6682  001BC4  59CA               	subwfb	(_loRa+202)& (0+255),w,b
  6683  001BC6  50DE               	movf	postinc2,w,c
  6684  001BC8  59CB               	subwfb	(_loRa+203)& (0+255),w,b
  6685  001BCA  E21E               	bc	l14986
  6686                           
  6687                           ; BSR set to: 2
  6688                           ;lorawan_eu.c: 1233: {
  6689                           ;lorawan_eu.c: 1234: Channels[i].channelTimer = Channels[i].channelTimer - loRa.lastTime
      +                          rValue;
  6690                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6691  001BCC  0EFE               	movlw	-2
  6692  001BCE  50E3               	movf	plusw1,w,c
  6693  001BD0  EC51  F006         	call	PL4	;call to abstracted procedure
  6694  001BD4  D8D5               	call	PL208	;call to abstracted procedure
  6695  001BD6  51C8               	movf	(_loRa+200)& (0+255),w,b
  6696  001BD8  5C50               	subwf	btemp+8,w,c
  6697  001BDA  6E4C               	movwf	btemp+4,c
  6698  001BDC  51C9               	movf	(_loRa+201)& (0+255),w,b
  6699  001BDE  5851               	subwfb	btemp+9,w,c
  6700  001BE0  6E4D               	movwf	btemp+5,c
  6701  001BE2  51CA               	movf	(_loRa+202)& (0+255),w,b
  6702  001BE4  5852               	subwfb	btemp+10,w,c
  6703  001BE6  6E4E               	movwf	btemp+6,c
  6704  001BE8  51CB               	movf	(_loRa+203)& (0+255),w,b
  6705  001BEA  5853               	subwfb	btemp+11,w,c
  6706  001BEC  6E4F               	movwf	btemp+7,c
  6707                           
  6708                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6709  001BEE  0EFE               	movlw	-2
  6710  001BF0  50E3               	movf	plusw1,w,c
  6711  001BF2  EC51  F006         	call	PL4	;call to abstracted procedure
  6712  001BF6  C04C  FFDE         	movff	btemp+4,postinc2
  6713  001BFA  C04D  FFDE         	movff	btemp+5,postinc2
  6714  001BFE  C04E  FFDE         	movff	btemp+6,postinc2
  6715  001C02  C04F  FFDE         	movff	btemp+7,postinc2
  6716                           
  6717                           ;lorawan_eu.c: 1235: }
  6718  001C06  D006               	goto	l14988
  6719  001C08                     l14986:
  6720                           
  6721                           ; BSR set to: 2
  6722                           ;lorawan_eu.c: 1236: else
  6723                           ;lorawan_eu.c: 1237: {
  6724                           ;lorawan_eu.c: 1238: Channels[i].channelTimer = 0;
  6725                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6726  001C08  0EFE               	movlw	-2
  6727  001C0A  50E3               	movf	plusw1,w,c
  6728  001C0C  EC51  F006         	call	PL4	;call to abstracted procedure
  6729  001C10  ECA2  F01D         	call	PL182	;call to abstracted procedure
  6730  001C14                     l14988:
  6731                           
  6732                           ; BSR set to: 2
  6733                           ;lorawan_eu.c: 1239: }
  6734                           ;lorawan_eu.c: 1240: if ( (Channels[i].channelTimer <= minim) && (Channels[i].channelTim
      +                          er != 0) )
  6735                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6736  001C14  0EFE               	movlw	-2
  6737  001C16  50E3               	movf	plusw1,w,c
  6738  001C18  EC51  F006         	call	PL4	;call to abstracted procedure
  6739                           
  6740                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6741  001C1C  0EFA               	movlw	-6
  6742  001C1E  CFE3 F049          	movff	plusw1,btemp+1
  6743  001C22  50DE               	movf	postinc2,w,c
  6744  001C24  5C49               	subwf	btemp+1,w,c
  6745  001C26  0EFB               	movlw	-5
  6746  001C28  D8B4               	call	PL312	;call to abstracted procedure
  6747  001C2A  0EFC               	movlw	-4
  6748  001C2C  D8B2               	call	PL312	;call to abstracted procedure
  6749  001C2E  0EFD               	movlw	-3
  6750  001C30  D8B0               	call	PL312	;call to abstracted procedure
  6751  001C32  E30D               	bnc	l14996
  6752                           
  6753                           ; BSR set to: 2
  6754                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6755  001C34  0EFE               	movlw	-2
  6756  001C36  50E3               	movf	plusw1,w,c
  6757  001C38  EC51  F006         	call	PL4	;call to abstracted procedure
  6758  001C3C  D89C               	call	PL130	;call to abstracted procedure
  6759  001C3E  E007               	bz	l14996
  6760                           
  6761                           ; BSR set to: 2
  6762                           ;lorawan_eu.c: 1241: {
  6763                           ;lorawan_eu.c: 1242: minim = Channels[i].channelTimer;
  6764                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6765  001C40  0EFE               	movlw	-2
  6766  001C42  50E3               	movf	plusw1,w,c
  6767  001C44  EC51  F006         	call	PL4	;call to abstracted procedure
  6768  001C48  D89B               	call	PL208	;call to abstracted procedure
  6769                           
  6770                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6771                           
  6772                           ; BSR set to: 2
  6773                           ;lorawan_eu.c: 1243: found = 1;
  6774                           ;stkvar	DutyCycleCallback@found @ sp[(-10)+9]
  6775  001C4A  D886               	call	PL118	;call to abstracted procedure
  6776  001C4C  2AE3               	incf	plusw1,f,c
  6777  001C4E                     l14996:
  6778                           
  6779                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6780  001C4E  0EFE               	movlw	-2
  6781  001C50  2AE3               	incf	plusw1,f,c
  6782                           
  6783                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6784  001C52  CFE3 F049          	movff	plusw1,btemp+1
  6785  001C56  0E0F               	movlw	15
  6786  001C58  6449               	cpfsgt	btemp+1,c
  6787  001C5A  D79F               	goto	l14978
  6788                           
  6789                           ;lorawan_eu.c: 1244: }
  6790                           ;lorawan_eu.c: 1245: }
  6791                           ;lorawan_eu.c: 1246: }
  6792                           ;lorawan_eu.c: 1247: if ( found == 1 )
  6793                           ;stkvar	DutyCycleCallback@found @ sp[(-10)+9]
  6794  001C5C  0EFF               	movlw	-1
  6795  001C5E  04E3               	decf	plusw1,w,c
  6796  001C60  E16C               	bnz	l1936
  6797                           
  6798                           ;lorawan_eu.c: 1248: {
  6799                           ;lorawan_eu.c: 1249: loRa.lastTimerValue = minim;
  6800                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6801  001C62  50E1               	movf	fsr1l,w,c
  6802  001C64  0FFA               	addlw	-6
  6803  001C66  D86C               	call	PL102	;call to abstracted procedure
  6804  001C68  CFDE F2C8          	movff	postinc2,_loRa+200
  6805  001C6C  CFDE F2C9          	movff	postinc2,_loRa+201
  6806  001C70  CFDE F2CA          	movff	postinc2,_loRa+202
  6807  001C74  CFDE F2CB          	movff	postinc2,_loRa+203
  6808                           
  6809                           ;lorawan_eu.c: 1250: SwTimerSetTimeout (loRa.dutyCycleTimerId, ((minim) < 0x000FFFFFUL ?
      +                           ( (((uint32_t)(minim)) << (12)) / 125UL ) : ( (((uint32_t)(minim)) / 125UL) << (12) ) )
      +                          );
  6810                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6811  001C78  0EFD               	movlw	-3
  6812  001C7A  50E3               	movf	plusw1,w,c
  6813  001C7C  E10D               	bnz	u17740
  6814  001C7E  0EFA               	movlw	-6
  6815  001C80  28E3               	incf	plusw1,w,c
  6816  001C82  0EFB               	movlw	-5
  6817  001C84  CFE3 F049          	movff	plusw1,btemp+1
  6818  001C88  0EFF               	movlw	255
  6819  001C8A  5A49               	subwfb	btemp+1,f,c
  6820  001C8C  0EFC               	movlw	-4
  6821  001C8E  CFE3 F049          	movff	plusw1,btemp+1
  6822  001C92  0E0F               	movlw	15
  6823  001C94  5A49               	subwfb	btemp+1,f,c
  6824  001C96  E318               	bnc	l15008
  6825  001C98                     u17740:
  6826                           
  6827                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6828  001C98  50E1               	movf	fsr1l,w,c
  6829  001C9A  0FFA               	addlw	-6
  6830  001C9C  D851               	call	PL102	;call to abstracted procedure
  6831  001C9E  CFDE F060          	movff	postinc2,___lldiv@dividend
  6832  001CA2  CFDE F061          	movff	postinc2,___lldiv@dividend+1
  6833  001CA6  CFDE F062          	movff	postinc2,___lldiv@dividend+2
  6834  001CAA  CFDE F063          	movff	postinc2,___lldiv@dividend+3
  6835  001CAE  0E7D               	movlw	125
  6836  001CB0  0100               	movlb	0	; () banked
  6837  001CB2  EC77  F011         	call	PL32	;call to abstracted procedure
  6838  001CB6  EC1B  F025         	call	___lldiv	;wreg free
  6839  001CBA  EC04  F01E         	call	PL50	;call to abstracted procedure
  6840  001CBE  0E0C               	movlw	12
  6841  001CC0                     u17755:
  6842  001CC0  D845               	call	PL108	;call to abstracted procedure
  6843  001CC2  2EE8               	decfsz	wreg,f,c
  6844  001CC4  D7FD               	goto	u17755
  6845  001CC6  D020               	goto	L1
  6846  001CC8                     l15008:
  6847                           
  6848                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6849  001CC8  0EFA               	movlw	-6
  6850  001CCA  CFE3 F050          	movff	plusw1,btemp+8
  6851  001CCE  0EFB               	movlw	-5
  6852  001CD0  CFE3 F051          	movff	plusw1,btemp+9
  6853  001CD4  0EFC               	movlw	-4
  6854  001CD6  CFE3 F052          	movff	plusw1,btemp+10
  6855  001CDA  0EFD               	movlw	-3
  6856  001CDC  CFE3 F053          	movff	plusw1,btemp+11
  6857  001CE0  0E0C               	movlw	12
  6858  001CE2                     u17765:
  6859  001CE2  D834               	call	PL108	;call to abstracted procedure
  6860  001CE4  2EE8               	decfsz	wreg,f,c
  6861  001CE6  D7FD               	goto	u17765
  6862  001CE8  C050  F060         	movff	btemp+8,___lldiv@dividend
  6863  001CEC  C051  F061         	movff	btemp+9,___lldiv@dividend+1
  6864  001CF0  C052  F062         	movff	btemp+10,___lldiv@dividend+2
  6865  001CF4  C053  F063         	movff	btemp+11,___lldiv@dividend+3
  6866  001CF8  0E7D               	movlw	125
  6867  001CFA  0100               	movlb	0	; () banked
  6868  001CFC  EC77  F011         	call	PL32	;call to abstracted procedure
  6869  001D00  EC1B  F025         	call	___lldiv	;wreg free
  6870  001D04  EC04  F01E         	call	PL50	;call to abstracted procedure
  6871  001D08                     L1:
  6872                           
  6873                           ;stkvar	_DutyCycleCallback$3416 @ sp[(-10)+0]
  6874  001D08  0EF6               	movlw	-10
  6875  001D0A  C050  FFE3         	movff	btemp+8,plusw1
  6876  001D0E  0EF7               	movlw	-9
  6877  001D10  C051  FFE3         	movff	btemp+9,plusw1
  6878  001D14  0EF8               	movlw	-8
  6879  001D16  C052  FFE3         	movff	btemp+10,plusw1
  6880  001D1A  0EF9               	movlw	-7
  6881  001D1C  C053  FFE3         	movff	btemp+11,plusw1
  6882                           
  6883                           ; BSR set to: 0
  6884                           ;stkvar	_DutyCycleCallback$3416 @ sp[(-10)+0]
  6885  001D20  50E1               	movf	fsr1l,w,c
  6886  001D22  0FF6               	addlw	-10
  6887  001D24  6ED9               	movwf	fsr2l,c
  6888  001D26  50E2               	movf	fsr1h,w,c
  6889  001D28  EC0D  F01E         	call	PL66	;call to abstracted procedure
  6890  001D2C  51E9               	movf	(_loRa+233)& (0+255),w,b
  6891  001D2E  EC11  F02C         	call	_SwTimerSetTimeout
  6892                           
  6893                           ; BSR set to: 0
  6894                           ;lorawan_eu.c: 1251: SwTimerStart (loRa.dutyCycleTimerId);
  6895  001D32  0102               	movlb	2	; () banked
  6896  001D34  51E9               	movf	(_loRa+233)& (0+255),w,b
  6897  001D36  ECC4  F025         	call	_SwTimerStart
  6898  001D3A                     l1936:
  6899                           
  6900                           ; _DutyCycleCallback: autosize = 10, savesize = 0, parsavesize = 0, tempsize = 0 parsize
      +                           = 1, argsize = 1, vargsize = 0
  6901  001D3A  0EF5               	movlw	245
  6902  001D3C  EF1A  F01E         	goto	PL250	;call to abstracted procedure
  6903  001D40                     __end_of_DutyCycleCallback:
  6904                           	opt stack 0
  6905  001D40                     PL102:
  6906                           	opt stack 17
  6907  001D40  6ED9               	movwf	fsr2l,c
  6908  001D42  50E2               	movf	fsr1h,w,c
  6909  001D44  6EDA               	movwf	fsr2h,c
  6910  001D46  0EFF               	movlw	255
  6911  001D48  22DA               	addwfc	fsr2h,f,c
  6912  001D4A  0CFF               	retlw	255
  6913  001D4C                     __end_ofPL102:
  6914                           	opt stack 0
  6915  001D4C                     PL108:
  6916                           	opt stack 17
  6917  001D4C  90D8               	bcf	status,0,c
  6918  001D4E  3650               	rlcf	btemp+8,f,c
  6919  001D50  3651               	rlcf	btemp+9,f,c
  6920  001D52  3652               	rlcf	btemp+10,f,c
  6921  001D54  3653               	rlcf	btemp+11,f,c
  6922  001D56  0012               	return	
  6923  001D58                     __end_ofPL108:
  6924                           	opt stack 0
  6925  001D58                     PL118:
  6926                           	opt stack 17
  6927  001D58  0EFA               	movlw	-6
  6928  001D5A  C050  FFE3         	movff	btemp+8,plusw1
  6929  001D5E  0EFB               	movlw	-5
  6930  001D60  C051  FFE3         	movff	btemp+9,plusw1
  6931  001D64  0EFC               	movlw	-4
  6932  001D66  C052  FFE3         	movff	btemp+10,plusw1
  6933  001D6A  0EFD               	movlw	-3
  6934  001D6C  C053  FFE3         	movff	btemp+11,plusw1
  6935  001D70  0EFF               	movlw	-1
  6936  001D72  6AE3               	clrf	plusw1,c
  6937  001D74  0012               	return	
  6938  001D76                     __end_ofPL118:
  6939                           	opt stack 0
  6940  001D76                     PL130:
  6941                           	opt stack 12
  6942  001D76  50DE               	movf	postinc2,w,c
  6943  001D78  10DE               	iorwf	postinc2,w,c
  6944  001D7A  10DE               	iorwf	postinc2,w,c
  6945  001D7C  10DE               	iorwf	postinc2,w,c
  6946  001D7E  0012               	return	
  6947  001D80                     __end_ofPL130:
  6948                           	opt stack 0
  6949  001D80                     PL208:
  6950                           	opt stack 17
  6951  001D80  CFDE F050          	movff	postinc2,btemp+8
  6952  001D84  CFDE F051          	movff	postinc2,btemp+9
  6953  001D88  CFDE F052          	movff	postinc2,btemp+10
  6954  001D8C  CFDE F053          	movff	postinc2,btemp+11
  6955  001D90  0012               	return	
  6956  001D92                     __end_ofPL208:
  6957                           	opt stack 0
  6958  001D92                     PL312:
  6959                           	opt stack 17
  6960  001D92  CFE3 F049          	movff	plusw1,btemp+1
  6961  001D96  50DE               	movf	postinc2,w,c
  6962  001D98  5849               	subwfb	btemp+1,w,c
  6963  001D9A  0012               	return	
  6964  001D9C                     __end_ofPL312:
  6965                           	opt stack 0
  6966                           tosu	equ	0xFFF
  6967                           tosh	equ	0xFFE
  6968                           tosl	equ	0xFFD
  6969                           pclath	equ	0xFFA
  6970                           tblptru	equ	0xFF8
  6971                           tblptrh	equ	0xFF7
  6972                           tblptrl	equ	0xFF6
  6973                           tablat	equ	0xFF5
  6974                           prodh	equ	0xFF4
  6975                           prodl	equ	0xFF3
  6976                           intcon	equ	0xFF2
  6977                           indf0	equ	0xFEF
  6978                           postinc0	equ	0xFEE
  6979                           plusw0	equ	0xFEB
  6980                           fsr0h	equ	0xFEA
  6981                           fsr0l	equ	0xFE9
  6982                           wreg	equ	0xFE8
  6983                           postinc1	equ	0xFE6
  6984                           postdec1	equ	0xFE5
  6985                           plusw1	equ	0xFE3
  6986                           fsr1h	equ	0xFE2
  6987                           fsr1l	equ	0xFE1
  6988                           indf2	equ	0xFDF
  6989                           postinc2	equ	0xFDE
  6990                           postdec2	equ	0xFDD
  6991                           plusw2	equ	0xFDB
  6992                           fsr2h	equ	0xFDA
  6993                           fsr2l	equ	0xFD9
  6994                           status	equ	0xFD8
  6995                           
  6996 ;; *************** function _UpdateJoinSuccessState *****************
  6997 ;; Defined at:
  6998 ;;		line 1041 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  6999 ;; Parameters:    Size  Location     Type
  7000 ;;  param           1  [STACK] unsigned char 
  7001 ;; Auto vars:     Size  Location     Type
  7002 ;;		None
  7003 ;; Return value:  Size  Location     Type
  7004 ;;                  1  [STACK] void 
  7005 ;; Registers used:
  7006 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+8, btemp+9, btemp+10, btemp+11, tosl, prodl, pro
      +dh, cstack
  7007 ;; Tracked objects:
  7008 ;;		On entry : 3F/0
  7009 ;;		On exit  : 3F/1
  7010 ;;		Unchanged: 0/0
  7011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7012 ;;      Params:         0       0       0       0       0       0       0       0       0
  7013 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7014 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7015 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7016 ;;Total ram usage:        0 bytes
  7017 ;; Hardware stack levels used:    1
  7018 ;; Hardware stack levels required when called:   11
  7019 ;; This function calls:
  7020 ;;		_RxJoinResponse
  7021 ;;		_SwTimerSetTimeout
  7022 ;;		_SwTimerStart
  7023 ;;		___lldiv
  7024 ;; This function is called by:
  7025 ;;		_LORAWAN_RxDone
  7026 ;;		_SetCallbackSoftwareTimers
  7027 ;;		_SwTimersExecute
  7028 ;; This function uses a reentrant model
  7029 ;;
  7030                           
  7031                           	psect	text34
  7032  003B76                     __ptext34:
  7033                           	opt stack 0
  7034  003B76                     _UpdateJoinSuccessState:
  7035                           	opt stack 0
  7036                           
  7037                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  7038  003B76  52E6               	movf	postinc1,f,c
  7039  003B78  52E6               	movf	postinc1,f,c
  7040  003B7A  52E6               	movf	postinc1,f,c
  7041  003B7C  52E6               	movf	postinc1,f,c
  7042                           
  7043                           ;lorawan.c: 1043: loRa.lorawanMacStatus.joining = 0;
  7044                           
  7045                           ;incstack = 0
  7046  003B7E  0102               	movlb	2	; () banked
  7047  003B80  9500               	bcf	_loRa& (0+255),2,b
  7048                           
  7049                           ;lorawan.c: 1044: loRa.macStatus.networkJoined = 1;
  7050  003B82  8902               	bsf	(_loRa+2)& (0+255),4,b
  7051                           
  7052                           ; BSR set to: 2
  7053                           ;lorawan.c: 1045: loRa.macStatus.macState = IDLE;
  7054  003B84  0EF0               	movlw	-16
  7055  003B86  1702               	andwf	(_loRa+2)& (0+255),f,b
  7056                           
  7057                           ; BSR set to: 2
  7058                           ;lorawan.c: 1047: loRa.adrAckCnt = 0;
  7059  003B88  6BD0               	clrf	(_loRa+208)& (0+255),b
  7060  003B8A  6BD1               	clrf	(_loRa+209)& (0+255),b
  7061                           
  7062                           ; BSR set to: 2
  7063                           ;lorawan.c: 1048: loRa.counterAdrAckDelay = 0;
  7064  003B8C  6BEE               	clrf	(_loRa+238)& (0+255),b
  7065                           
  7066                           ; BSR set to: 2
  7067                           ;lorawan.c: 1051: if (loRa.macStatus.linkCheck == 1)
  7068  003B8E  A503               	btfss	(_loRa+3)& (0+255),2,b
  7069  003B90  D027               	goto	l13878
  7070                           
  7071                           ; BSR set to: 2
  7072                           ;lorawan.c: 1052: {
  7073                           ;lorawan.c: 1053: SwTimerSetTimeout(loRa.linkCheckTimerId, ((loRa.periodForLinkCheck) < 
      +                          0x000FFFFFUL ? ( (((uint32_t)(loRa.periodForLinkCheck)) << (12)) / 125UL ) : ( (((uint32
      +                          _t)(loRa.periodForLinkCheck)) / 125UL) << (12) ) ));
  7074  003B92  51CF               	movf	(_loRa+207)& (0+255),w,b
  7075  003B94  E103               	bnz	u15540
  7076  003B96  EC0B  F018         	call	PL244	;call to abstracted procedure
  7077  003B9A  E30D               	bnc	l13872
  7078  003B9C                     u15540:
  7079                           
  7080                           ; BSR set to: 2
  7081  003B9C  EC01  F018         	call	PL58	;call to abstracted procedure
  7082  003BA0  EC77  F011         	call	PL32	;call to abstracted procedure
  7083  003BA4  EC1B  F025         	call	___lldiv	;wreg free
  7084  003BA8  D82F               	call	PL50	;call to abstracted procedure
  7085  003BAA  0E0C               	movlw	12
  7086  003BAC                     u15555:
  7087  003BAC  ECA6  F00E         	call	PL108	;call to abstracted procedure
  7088  003BB0  2EE8               	decfsz	wreg,f,c
  7089  003BB2  D7FC               	goto	u15555
  7090  003BB4  D007               	goto	L2
  7091  003BB6                     l13872:
  7092                           
  7093                           ; BSR set to: 2
  7094  003BB6  ECE7  F017         	call	PL46	;call to abstracted procedure
  7095  003BBA  EC77  F011         	call	PL32	;call to abstracted procedure
  7096  003BBE  EC1B  F025         	call	___lldiv	;wreg free
  7097  003BC2  D822               	call	PL50	;call to abstracted procedure
  7098  003BC4                     L2:
  7099                           
  7100                           ;stkvar	_UpdateJoinSuccessState$2346 @ sp[(-4)+0]
  7101  003BC4  EC23  F020         	call	PL144	;call to abstracted procedure
  7102                           
  7103                           ; BSR set to: 0
  7104                           ;stkvar	_UpdateJoinSuccessState$2346 @ sp[(-4)+0]
  7105  003BC8  50E1               	movf	fsr1l,w,c
  7106  003BCA  0FFC               	addlw	-4
  7107  003BCC  6ED9               	movwf	fsr2l,c
  7108  003BCE  50E2               	movf	fsr1h,w,c
  7109  003BD0  D824               	call	PL66	;call to abstracted procedure
  7110  003BD2  51E7               	movf	(_loRa+231)& (0+255),w,b
  7111  003BD4  EC11  F02C         	call	_SwTimerSetTimeout
  7112                           
  7113                           ; BSR set to: 0
  7114                           ;lorawan.c: 1054: SwTimerStart(loRa.linkCheckTimerId);
  7115  003BD8  0102               	movlb	2	; () banked
  7116  003BDA  51E7               	movf	(_loRa+231)& (0+255),w,b
  7117  003BDC  ECC4  F025         	call	_SwTimerStart
  7118  003BE0                     l13878:
  7119                           
  7120                           ;lorawan.c: 1055: }
  7121                           ;lorawan.c: 1057: if (rxPayload.RxJoinResponse != (0))
  7122  003BE0  0101               	movlb	1	; () banked
  7123  003BE2  517B               	movf	(_rxPayload+2)& (0+255),w,b
  7124  003BE4  117C               	iorwf	(_rxPayload+3)& (0+255),w,b
  7125  003BE6  E00E               	bz	l1080
  7126                           
  7127                           ; BSR set to: 1
  7128                           ;lorawan.c: 1058: {
  7129                           ;lorawan.c: 1059: rxPayload.RxJoinResponse(1);
  7130  003BE8  EE21  F07B         	lfsr	2,_rxPayload+2
  7131  003BEC  D801               	call	u15588
  7132  003BEE  D00A               	goto	l1080
  7133  003BF0                     u15588:
  7134  003BF0  0005               	push	
  7135  003BF2  6EFA               	movwf	pclath,c
  7136  003BF4  50DE               	movf	postinc2,w,c
  7137  003BF6  6EFD               	movwf	tosl,c
  7138  003BF8  50DE               	movf	postinc2,w,c
  7139  003BFA  6EFE               	movwf	tosh,c
  7140  003BFC  50F8               	movf	tblptru,w,c
  7141  003BFE  6EFF               	movwf	tosu,c
  7142  003C00  50FA               	movf	pclath,w,c
  7143  003C02  0C01               	retlw	1	;indir
  7144  003C04                     l1080:
  7145                           
  7146                           ; BSR set to: 1
  7147                           ; _UpdateJoinSuccessState: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 1, argsize = 1, vargsize = 0
  7148  003C04  0EFB               	movlw	251
  7149  003C06  D016               	goto	PL250	;call to abstracted procedure
  7150  003C08                     __end_of_UpdateJoinSuccessState:
  7151                           	opt stack 0
  7152  003C08                     PL50:
  7153                           	opt stack 17
  7154  003C08  C060  F050         	movff	?___lldiv,btemp+8
  7155  003C0C  C061  F051         	movff	?___lldiv+1,btemp+9
  7156  003C10  C062  F052         	movff	?___lldiv+2,btemp+10
  7157  003C14  C063  F053         	movff	?___lldiv+3,btemp+11
  7158  003C18  0012               	return	
  7159  003C1A                     __end_ofPL50:
  7160                           	opt stack 0
  7161  003C1A                     PL66:
  7162                           	opt stack 17
  7163  003C1A  6EDA               	movwf	fsr2h,c
  7164  003C1C  0EFF               	movlw	255
  7165  003C1E  22DA               	addwfc	fsr2h,f,c
  7166  003C20  CFDE F06D          	movff	postinc2,SwTimerSetTimeout@timeout
  7167  003C24  CFDE F06E          	movff	postinc2,SwTimerSetTimeout@timeout+1
  7168  003C28  CFDE F06F          	movff	postinc2,SwTimerSetTimeout@timeout+2
  7169  003C2C  CFDE F070          	movff	postinc2,SwTimerSetTimeout@timeout+3
  7170  003C30  0102               	movlb	2	; () banked
  7171  003C32  0CFF               	retlw	255
  7172  003C34                     __end_ofPL66:
  7173                           	opt stack 0
  7174  003C34                     PL250:
  7175                           	opt stack 17
  7176  003C34  26E1               	addwf	fsr1l,f,c
  7177  003C36  0EFF               	movlw	255
  7178  003C38  22E2               	addwfc	fsr1h,f,c
  7179  003C3A  0CFF               	retlw	255	;funcret
  7180  003C3C                     __end_ofPL250:
  7181                           	opt stack 0
  7182                           tosu	equ	0xFFF
  7183                           tosh	equ	0xFFE
  7184                           tosl	equ	0xFFD
  7185                           pclath	equ	0xFFA
  7186                           tblptru	equ	0xFF8
  7187                           tblptrh	equ	0xFF7
  7188                           tblptrl	equ	0xFF6
  7189                           tablat	equ	0xFF5
  7190                           prodh	equ	0xFF4
  7191                           prodl	equ	0xFF3
  7192                           intcon	equ	0xFF2
  7193                           indf0	equ	0xFEF
  7194                           postinc0	equ	0xFEE
  7195                           plusw0	equ	0xFEB
  7196                           fsr0h	equ	0xFEA
  7197                           fsr0l	equ	0xFE9
  7198                           wreg	equ	0xFE8
  7199                           postinc1	equ	0xFE6
  7200                           postdec1	equ	0xFE5
  7201                           plusw1	equ	0xFE3
  7202                           fsr1h	equ	0xFE2
  7203                           fsr1l	equ	0xFE1
  7204                           indf2	equ	0xFDF
  7205                           postinc2	equ	0xFDE
  7206                           postdec2	equ	0xFDD
  7207                           plusw2	equ	0xFDB
  7208                           fsr2h	equ	0xFDA
  7209                           fsr2l	equ	0xFD9
  7210                           status	equ	0xFD8
  7211                           
  7212 ;; *************** function _AutomaticReplyCallback *****************
  7213 ;; Defined at:
  7214 ;;		line 1017 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  7215 ;; Parameters:    Size  Location     Type
  7216 ;;  param           1  [STACK] unsigned char 
  7217 ;; Auto vars:     Size  Location     Type
  7218 ;;		None
  7219 ;; Return value:  Size  Location     Type
  7220 ;;                  1  [STACK] void 
  7221 ;; Registers used:
  7222 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7223 ;; Tracked objects:
  7224 ;;		On entry : 3F/0
  7225 ;;		On exit  : 3F/2
  7226 ;;		Unchanged: 0/0
  7227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7228 ;;      Params:         0       0       0       0       0       0       0       0       0
  7229 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7230 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7231 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7232 ;;Total ram usage:        0 bytes
  7233 ;; Hardware stack levels used:    1
  7234 ;; Hardware stack levels required when called:   14
  7235 ;; This function calls:
  7236 ;;		_LORAWAN_Send
  7237 ;; This function is called by:
  7238 ;;		_SetCallbackSoftwareTimers
  7239 ;;		_SwTimersExecute
  7240 ;; This function uses a reentrant model
  7241 ;;
  7242                           
  7243                           	psect	text35
  7244  006000                     __ptext35:
  7245                           	opt stack 0
  7246  006000                     _AutomaticReplyCallback:
  7247                           	opt stack 14
  7248                           
  7249                           ;lorawan.c: 1019: loRa.macStatus.macState = IDLE;
  7250                           
  7251                           ; BSR set to: 1
  7252                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  7253                           ;incstack = 0
  7254  006000  0EF0               	movlw	-16
  7255  006002  0102               	movlb	2	; () banked
  7256  006004  1702               	andwf	(_loRa+2)& (0+255),f,b
  7257                           
  7258                           ; BSR set to: 2
  7259                           ;lorawan.c: 1020: LORAWAN_Send (0, 0, 0, 0);
  7260  006006  ECFC  F003         	call	PL186	;call to abstracted procedure
  7261  00600A  EC7B  F01E         	call	_LORAWAN_Send
  7262                           
  7263                           ;lorawan.c: 1021: loRa.lorawanMacStatus.fPending = 0;
  7264  00600E  0102               	movlb	2	; () banked
  7265  006010  9700               	bcf	_loRa& (0+255),3,b
  7266                           
  7267                           ; BSR set to: 2
  7268                           ; _AutomaticReplyCallback: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 1, argsize = 1, vargsize = 0
  7269  006012  52E5               	movf	postdec1,f,c
  7270  006014  0012               	return		;funcret
  7271  006016                     __end_of_AutomaticReplyCallback:
  7272                           	opt stack 0
  7273                           tosu	equ	0xFFF
  7274                           tosh	equ	0xFFE
  7275                           tosl	equ	0xFFD
  7276                           pclath	equ	0xFFA
  7277                           tblptru	equ	0xFF8
  7278                           tblptrh	equ	0xFF7
  7279                           tblptrl	equ	0xFF6
  7280                           tablat	equ	0xFF5
  7281                           prodh	equ	0xFF4
  7282                           prodl	equ	0xFF3
  7283                           intcon	equ	0xFF2
  7284                           indf0	equ	0xFEF
  7285                           postinc0	equ	0xFEE
  7286                           plusw0	equ	0xFEB
  7287                           fsr0h	equ	0xFEA
  7288                           fsr0l	equ	0xFE9
  7289                           wreg	equ	0xFE8
  7290                           postinc1	equ	0xFE6
  7291                           postdec1	equ	0xFE5
  7292                           plusw1	equ	0xFE3
  7293                           fsr1h	equ	0xFE2
  7294                           fsr1l	equ	0xFE1
  7295                           indf2	equ	0xFDF
  7296                           postinc2	equ	0xFDE
  7297                           postdec2	equ	0xFDD
  7298                           plusw2	equ	0xFDB
  7299                           fsr2h	equ	0xFDA
  7300                           fsr2l	equ	0xFD9
  7301                           status	equ	0xFD8
  7302                           
  7303 ;; *************** function _AckRetransmissionCallback *****************
  7304 ;; Defined at:
  7305 ;;		line 934 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  7306 ;; Parameters:    Size  Location     Type
  7307 ;;  param           1  [STACK] unsigned char 
  7308 ;; Auto vars:     Size  Location     Type
  7309 ;;  maximumPacke    1  [STACK] unsigned char 
  7310 ;; Return value:  Size  Location     Type
  7311 ;;                  1  [STACK] void 
  7312 ;; Registers used:
  7313 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+10, btemp+11, to
      +sl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7314 ;; Tracked objects:
  7315 ;;		On entry : 3F/0
  7316 ;;		On exit  : 3C/0
  7317 ;;		Unchanged: 0/0
  7318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7319 ;;      Params:         0       0       0       0       0       0       0       0       0
  7320 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7321 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7322 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7323 ;;Total ram usage:        0 bytes
  7324 ;; Hardware stack levels used:    1
  7325 ;; Hardware stack levels required when called:   13
  7326 ;; This function calls:
  7327 ;;		_FindSmallestDataRate
  7328 ;;		_LORAWAN_GetMaxPayloadSize
  7329 ;;		_RADIO_Transmit
  7330 ;;		_ResetParametersForConfirmedTransmission
  7331 ;;		_RxDataDone
  7332 ;;		_SelectChannelForTransmission
  7333 ;;		_UpdateRetransmissionAckTimeoutState
  7334 ;; This function is called by:
  7335 ;;		_SetCallbackSoftwareTimers
  7336 ;;		_SwTimersExecute
  7337 ;; This function uses a reentrant model
  7338 ;;
  7339                           
  7340                           	psect	text36
  7341  003312                     __ptext36:
  7342                           	opt stack 0
  7343  003312                     _AckRetransmissionCallback:
  7344                           	opt stack 0
  7345                           
  7346                           ; BSR set to: 2
  7347                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  7348  003312  52E6               	movf	postinc1,f,c
  7349                           
  7350                           ;lorawan.c: 936: uint8_t maximumPacketSize;
  7351                           ;lorawan.c: 938: if (loRa.macStatus.macPause == 0)
  7352                           
  7353                           ;incstack = 0
  7354  003314  0102               	movlb	2	; () banked
  7355  003316  B103               	btfsc	(_loRa+3)& (0+255),0,b
  7356  003318  D069               	goto	l14862
  7357                           
  7358                           ; BSR set to: 2
  7359                           ;lorawan.c: 939: {
  7360                           ;lorawan.c: 940: if (loRa.counterRepetitionsConfirmedUplink <= loRa.maxRepetitionsConfir
      +                          medUplink)
  7361  00331A  51D9               	movf	(_loRa+217)& (0+255),w,b
  7362  00331C  5DD7               	subwf	(_loRa+215)& (0+255),w,b
  7363  00331E  E34B               	bnc	l14852
  7364                           
  7365                           ; BSR set to: 2
  7366                           ;lorawan.c: 941: {
  7367                           ;lorawan.c: 942: maximumPacketSize = LORAWAN_GetMaxPayloadSize () + 13;
  7368  003320  ECF5  F02B         	call	_LORAWAN_GetMaxPayloadSize	;wreg free
  7369  003324  6E53               	movwf	btemp+11,c
  7370  003326  0E0D               	movlw	13
  7371  003328  2653               	addwf	btemp+11,f,c
  7372                           
  7373                           ;stkvar	AckRetransmissionCallback@maximumPacketSize @ sp[(-1)+0]
  7374  00332A  0EFF               	movlw	-1
  7375  00332C  C053  FFE3         	movff	btemp+11,plusw1
  7376                           
  7377                           ; BSR set to: 0
  7378                           ;lorawan.c: 945: if (loRa.lastPacketLength <= maximumPacketSize)
  7379                           ;stkvar	AckRetransmissionCallback@maximumPacketSize @ sp[(-1)+0]
  7380  003330  50E3               	movf	plusw1,w,c
  7381  003332  6E49               	movwf	btemp+1,c
  7382  003334  6A4A               	clrf	btemp+2,c
  7383  003336  0102               	movlb	2	; () banked
  7384  003338  51D4               	movf	(_loRa+212)& (0+255),w,b
  7385  00333A  5C49               	subwf	btemp+1,w,c
  7386  00333C  51D5               	movf	(_loRa+213)& (0+255),w,b
  7387  00333E  584A               	subwfb	btemp+2,w,c
  7388  003340  E32A               	bnc	l14846
  7389                           
  7390                           ; BSR set to: 2
  7391                           ;lorawan.c: 946: {
  7392                           ;lorawan.c: 947: if (SelectChannelForTransmission (1) == OK)
  7393  003342  0E01               	movlw	1
  7394  003344  ECC4  F026         	call	_SelectChannelForTransmission
  7395  003348  0900               	iorlw	0
  7396  00334A  E122               	bnz	l14842
  7397                           
  7398                           ; BSR set to: 0
  7399                           ;lorawan.c: 948: {
  7400                           ;lorawan.c: 950: if (RADIO_Transmit (&macBuffer[16], loRa.lastPacketLength) == OK)
  7401  00334C  0EFF               	movlw	low (_macBuffer+16)
  7402  00334E  EC7D  F025         	call	PL170	;call to abstracted procedure
  7403  003352  ECCE  F00E         	call	_RADIO_Transmit	;wreg free
  7404  003356  EC88  F025         	call	PL284	;call to abstracted procedure
  7405  00335A  E11A               	bnz	l14842
  7406                           
  7407                           ; BSR set to: 0
  7408                           ;lorawan.c: 951: {
  7409                           ;lorawan.c: 952: loRa.macStatus.macState = TRANSMISSION_OCCURRING;
  7410  00335C  0102               	movlb	2	; () banked
  7411  00335E  EC83  F025         	call	PL264	;call to abstracted procedure
  7412                           
  7413                           ; BSR set to: 2
  7414                           ;lorawan.c: 953: loRa.counterRepetitionsConfirmedUplink ++ ;
  7415  003362  2BD9               	incf	(_loRa+217)& (0+255),f,b
  7416                           
  7417                           ; BSR set to: 2
  7418                           ;lorawan.c: 956: if ( ( (loRa.counterRepetitionsConfirmedUplink % 2) == 0) && (loRa.curr
      +                          entDataRate != 0) && (loRa.counterRepetitionsConfirmedUplink != (loRa.maxRepetitionsConf
      +                          irmedUplink + 1) ) )
  7419  003364  B1D9               	btfsc	(_loRa+217)& (0+255),0,b
  7420  003366  D045               	goto	PL448
  7421                           
  7422                           ; BSR set to: 2
  7423  003368  51DF               	movf	(_loRa+223)& (0+255),w,b
  7424  00336A  E043               	bz	PL448
  7425                           
  7426                           ; BSR set to: 2
  7427  00336C  51D9               	movf	(_loRa+217)& (0+255),w,b
  7428  00336E  6E49               	movwf	btemp+1,c
  7429  003370  6A4A               	clrf	btemp+2,c
  7430  003372  51D7               	movf	(_loRa+215)& (0+255),w,b
  7431  003374  6E52               	movwf	btemp+10,c
  7432  003376  6A53               	clrf	btemp+11,c
  7433  003378  2A52               	incf	btemp+10,f,c
  7434  00337A  0E00               	movlw	0
  7435  00337C  2253               	addwfc	btemp+11,f,c
  7436  00337E  5049               	movf	btemp+1,w,c
  7437  003380  1852               	xorwf	btemp+10,w,c
  7438  003382  E103               	bnz	u17520
  7439  003384  504A               	movf	btemp+2,w,c
  7440  003386  1853               	xorwf	btemp+11,w,c
  7441  003388  E034               	bz	PL448
  7442  00338A                     u17520:
  7443                           
  7444                           ; BSR set to: 2
  7445                           ;lorawan.c: 957: {
  7446                           ;lorawan.c: 958: FindSmallestDataRate();
  7447  00338A  EC66  F023         	call	_FindSmallestDataRate	;wreg free
  7448  00338E  D031               	goto	PL448
  7449  003390                     l14842:
  7450                           
  7451                           ; BSR set to: 0
  7452                           ;lorawan.c: 961: else
  7453                           ;lorawan.c: 962: {
  7454                           ;lorawan.c: 964: UpdateRetransmissionAckTimeoutState ();
  7455  003390  ECBF  F028         	call	_UpdateRetransmissionAckTimeoutState	;wreg free
  7456  003394  D02E               	goto	PL448
  7457  003396                     l14846:
  7458                           
  7459                           ; BSR set to: 2
  7460                           ;lorawan.c: 973: else
  7461                           ;lorawan.c: 974: {
  7462                           ;lorawan.c: 975: ResetParametersForConfirmedTransmission ();
  7463  003396  EC6E  F030         	call	_ResetParametersForConfirmedTransmission	;wreg free
  7464                           
  7465                           ; BSR set to: 2
  7466                           ;lorawan.c: 976: if (rxPayload.RxAppData != (0))
  7467  00339A  0101               	movlb	1	; () banked
  7468  00339C  5179               	movf	_rxPayload& (0+255),w,b
  7469  00339E  117A               	iorwf	(_rxPayload+1)& (0+255),w,b
  7470  0033A0  E028               	bz	PL448
  7471                           
  7472                           ; BSR set to: 1
  7473                           ;lorawan.c: 977: {
  7474                           ;lorawan.c: 978: rxPayload.RxAppData((0), 0, INVALID_BUFFER_LEN);
  7475  0033A2  EC96  F00C         	call	PL48	;call to abstracted procedure
  7476  0033A6  0E04               	movlw	4
  7477  0033A8  6F63               	movwf	RxDataDone@status& (0+255),b
  7478  0033AA  D801               	call	u17548
  7479  0033AC  D022               	goto	PL448
  7480  0033AE                     u17548:
  7481  0033AE  0005               	push	
  7482  0033B0  0101               	movlb	1	; () banked
  7483  0033B2  6EFA               	movwf	pclath,c
  7484  0033B4  D013               	goto	L3
  7485  0033B6                     l14852:
  7486                           
  7487                           ; BSR set to: 2
  7488                           ;lorawan.c: 982: else if ( (loRa.counterRepetitionsConfirmedUplink > loRa.maxRepetitions
      +                          ConfirmedUplink) && (loRa.macStatus.macPause == 0) )
  7489  0033B6  51D9               	movf	(_loRa+217)& (0+255),w,b
  7490  0033B8  5DD7               	subwf	(_loRa+215)& (0+255),w,b
  7491  0033BA  E21B               	bc	PL448
  7492                           
  7493                           ; BSR set to: 2
  7494  0033BC  B103               	btfsc	(_loRa+3)& (0+255),0,b
  7495  0033BE  D019               	goto	PL448
  7496                           
  7497                           ; BSR set to: 2
  7498                           ;lorawan.c: 983: {
  7499                           ;lorawan.c: 984: ResetParametersForConfirmedTransmission ();
  7500  0033C0  EC6E  F030         	call	_ResetParametersForConfirmedTransmission	;wreg free
  7501                           
  7502                           ; BSR set to: 2
  7503                           ;lorawan.c: 985: if (rxPayload.RxAppData != (0))
  7504  0033C4  0101               	movlb	1	; () banked
  7505  0033C6  5179               	movf	_rxPayload& (0+255),w,b
  7506  0033C8  117A               	iorwf	(_rxPayload+1)& (0+255),w,b
  7507  0033CA  E013               	bz	PL448
  7508                           
  7509                           ; BSR set to: 1
  7510                           ;lorawan.c: 986: {
  7511                           ;lorawan.c: 987: rxPayload.RxAppData((0), 0, MAC_NOT_OK);
  7512  0033CC  EC96  F00C         	call	PL48	;call to abstracted procedure
  7513  0033D0  6F63               	movwf	RxDataDone@status& (0+255),b
  7514  0033D2  D801               	call	u17588
  7515  0033D4  D00E               	goto	PL448
  7516  0033D6                     u17588:
  7517  0033D6  0005               	push	
  7518  0033D8  0101               	movlb	1	; () banked
  7519  0033DA  6EFA               	movwf	pclath,c
  7520  0033DC                     L3:
  7521  0033DC  5179               	movf	_rxPayload& (0+255),w,b
  7522  0033DE  6EFD               	movwf	tosl,c
  7523  0033E0  517A               	movf	(_rxPayload+1)& (0+255),w,b
  7524  0033E2  6EFE               	movwf	tosh,c
  7525  0033E4  50F8               	movf	tblptru,w,c
  7526  0033E6  6EFF               	movwf	tosu,c
  7527  0033E8  50FA               	movf	pclath,w,c
  7528  0033EA  0012               	return		;indir
  7529  0033EC                     l14862:
  7530                           
  7531                           ; BSR set to: 2
  7532                           ;lorawan.c: 991: else
  7533                           ;lorawan.c: 992: {
  7534                           ;lorawan.c: 993: ResetParametersForConfirmedTransmission ();
  7535  0033EC  EC6E  F030         	call	_ResetParametersForConfirmedTransmission	;wreg free
  7536  0033F0                     l1053:
  7537                           
  7538                           ; _AckRetransmissionCallback: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 
      +                          parsize = 1, argsize = 1, vargsize = 0
  7539  0033F0  D000               	goto	PL448	;call to abstracted procedure
  7540  0033F2                     __end_of_AckRetransmissionCallback:
  7541                           	opt stack 0
  7542  0033F2                     PL448:
  7543                           	opt stack 12
  7544  0033F2  52E5               	movf	postdec1,f,c
  7545  0033F4  52E5               	movf	postdec1,f,c
  7546  0033F6  0012               	return		;funcret
  7547  0033F8                     __end_ofPL448:
  7548                           	opt stack 0
  7549                           tosu	equ	0xFFF
  7550                           tosh	equ	0xFFE
  7551                           tosl	equ	0xFFD
  7552                           pclath	equ	0xFFA
  7553                           tblptru	equ	0xFF8
  7554                           tblptrh	equ	0xFF7
  7555                           tblptrl	equ	0xFF6
  7556                           tablat	equ	0xFF5
  7557                           prodh	equ	0xFF4
  7558                           prodl	equ	0xFF3
  7559                           intcon	equ	0xFF2
  7560                           indf0	equ	0xFEF
  7561                           postinc0	equ	0xFEE
  7562                           plusw0	equ	0xFEB
  7563                           fsr0h	equ	0xFEA
  7564                           fsr0l	equ	0xFE9
  7565                           wreg	equ	0xFE8
  7566                           postinc1	equ	0xFE6
  7567                           postdec1	equ	0xFE5
  7568                           plusw1	equ	0xFE3
  7569                           fsr1h	equ	0xFE2
  7570                           fsr1l	equ	0xFE1
  7571                           indf2	equ	0xFDF
  7572                           postinc2	equ	0xFDE
  7573                           postdec2	equ	0xFDD
  7574                           plusw2	equ	0xFDB
  7575                           fsr2h	equ	0xFDA
  7576                           fsr2l	equ	0xFD9
  7577                           status	equ	0xFD8
  7578                           
  7579 ;; *************** function _LORAWAN_LinkCheckCallback *****************
  7580 ;; Defined at:
  7581 ;;		line 881 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  7582 ;; Parameters:    Size  Location     Type
  7583 ;;  param           1  [STACK] unsigned char 
  7584 ;; Auto vars:     Size  Location     Type
  7585 ;;  iCtr            1  [STACK] unsigned char 
  7586 ;; Return value:  Size  Location     Type
  7587 ;;                  1  [STACK] void 
  7588 ;; Registers used:
  7589 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh, c
      +stack
  7590 ;; Tracked objects:
  7591 ;;		On entry : 3F/0
  7592 ;;		On exit  : 3D/0
  7593 ;;		Unchanged: 0/0
  7594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7595 ;;      Params:         0       0       0       0       0       0       0       0       0
  7596 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7597 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7598 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7599 ;;Total ram usage:        0 bytes
  7600 ;; Hardware stack levels used:    1
  7601 ;; Hardware stack levels required when called:   11
  7602 ;; This function calls:
  7603 ;;		_SwTimerSetTimeout
  7604 ;;		_SwTimerStart
  7605 ;;		___lldiv
  7606 ;; This function is called by:
  7607 ;;		_SetCallbackSoftwareTimers
  7608 ;;		_SwTimersExecute
  7609 ;; This function uses a reentrant model
  7610 ;;
  7611                           
  7612                           	psect	text37
  7613  002F14                     __ptext37:
  7614                           	opt stack 0
  7615  002F14                     _LORAWAN_LinkCheckCallback:
  7616                           	opt stack 0
  7617                           
  7618                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  7619  002F14  0E05               	movlw	5
  7620  002F16  26E1               	addwf	fsr1l,f,c
  7621  002F18  0E00               	movlw	0
  7622  002F1A  22E2               	addwfc	fsr1h,f,c
  7623                           
  7624                           ;lorawan.c: 885: if ((loRa.macStatus.macPause == 0) && (loRa.macStatus.linkCheck == 1))
  7625                           
  7626                           ;incstack = 0
  7627  002F1C  0102               	movlb	2	; () banked
  7628  002F1E  A103               	btfss	(_loRa+3)& (0+255),0,b
  7629                           
  7630                           ; BSR set to: 2
  7631  002F20  A503               	btfss	(_loRa+3)& (0+255),2,b
  7632  002F22  D01F               	goto	l14806
  7633                           
  7634                           ; BSR set to: 2
  7635                           ;lorawan.c: 886: {
  7636                           ;lorawan.c: 888: for(iCtr = 0; iCtr < loRa.crtMacCmdIndex; iCtr ++)
  7637                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  7638  002F24  0EFF               	movlw	-1
  7639  002F26  6AE3               	clrf	plusw1,c
  7640  002F28  D009               	goto	l14796
  7641  002F2A                     l14790:
  7642                           
  7643                           ; BSR set to: 2
  7644                           ;lorawan.c: 889: {
  7645                           ;lorawan.c: 890: if(loRa.macCommands[iCtr].receivedCid == LINK_CHECK_CID)
  7646                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  7647  002F2A  0EFF               	movlw	-1
  7648  002F2C  50E3               	movf	plusw1,w,c
  7649  002F2E  ECA3  F010         	call	PL16	;call to abstracted procedure
  7650  002F32  0E02               	movlw	2
  7651  002F34  18DE               	xorwf	postinc2,w,c
  7652  002F36  E008               	bz	l14798
  7653                           
  7654                           ; BSR set to: 2
  7655                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  7656  002F38  0EFF               	movlw	-1
  7657  002F3A  2AE3               	incf	plusw1,f,c
  7658  002F3C                     l14796:
  7659                           
  7660                           ; BSR set to: 2
  7661                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  7662  002F3C  0EFF               	movlw	-1
  7663  002F3E  CFE3 F049          	movff	plusw1,btemp+1
  7664  002F42  51A7               	movf	(_loRa+167)& (0+255),w,b
  7665  002F44  5C49               	subwf	btemp+1,w,c
  7666  002F46  E3F1               	bnc	l14790
  7667  002F48                     l14798:
  7668                           
  7669                           ; BSR set to: 2
  7670                           ;lorawan.c: 893: }
  7671                           ;lorawan.c: 894: }
  7672                           ;lorawan.c: 896: if(iCtr == loRa.crtMacCmdIndex)
  7673                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  7674  002F48  0EFF               	movlw	-1
  7675  002F4A  50E3               	movf	plusw1,w,c
  7676  002F4C  19A7               	xorwf	(_loRa+167)& (0+255),w,b
  7677  002F4E  E109               	bnz	l14806
  7678                           
  7679                           ; BSR set to: 2
  7680                           ;lorawan.c: 897: {
  7681                           ;lorawan.c: 898: loRa.macCommands[loRa.crtMacCmdIndex].receivedCid = LINK_CHECK_CID;
  7682  002F50  51A7               	movf	(_loRa+167)& (0+255),w,b
  7683  002F52  ECA3  F010         	call	PL16	;call to abstracted procedure
  7684  002F56  0E02               	movlw	2
  7685  002F58  6EDF               	movwf	indf2,c
  7686                           
  7687                           ; BSR set to: 2
  7688                           ;lorawan.c: 900: if(loRa.crtMacCmdIndex < 16)
  7689  002F5A  0E10               	movlw	16
  7690  002F5C  61A7               	cpfslt	(_loRa+167)& (0+255),b
  7691  002F5E  D001               	goto	l14806
  7692                           
  7693                           ; BSR set to: 2
  7694                           ;lorawan.c: 901: {
  7695                           ;lorawan.c: 902: loRa.crtMacCmdIndex ++;
  7696  002F60  2BA7               	incf	(_loRa+167)& (0+255),f,b
  7697  002F62                     l14806:
  7698                           
  7699                           ; BSR set to: 2
  7700                           ;lorawan.c: 903: }
  7701                           ;lorawan.c: 904: }
  7702                           ;lorawan.c: 905: }
  7703                           ;lorawan.c: 908: if (loRa.macStatus.linkCheck == 1)
  7704  002F62  A503               	btfss	(_loRa+3)& (0+255),2,b
  7705  002F64  D031               	goto	l1031
  7706                           
  7707                           ; BSR set to: 2
  7708                           ;lorawan.c: 909: {
  7709                           ;lorawan.c: 910: SwTimerSetTimeout(loRa.linkCheckTimerId, ((loRa.periodForLinkCheck) < 0
      +                          x000FFFFFUL ? ( (((uint32_t)(loRa.periodForLinkCheck)) << (12)) / 125UL ) : ( (((uint32_
      +                          t)(loRa.periodForLinkCheck)) / 125UL) << (12) ) ));
  7710  002F66  51CF               	movf	(_loRa+207)& (0+255),w,b
  7711  002F68  E102               	bnz	u17420
  7712  002F6A  D855               	call	PL244	;call to abstracted procedure
  7713  002F6C  E30D               	bnc	l14812
  7714  002F6E                     u17420:
  7715                           
  7716                           ; BSR set to: 2
  7717  002F6E  D849               	call	PL58	;call to abstracted procedure
  7718  002F70  EC77  F011         	call	PL32	;call to abstracted procedure
  7719  002F74  EC1B  F025         	call	___lldiv	;wreg free
  7720  002F78  EC04  F01E         	call	PL50	;call to abstracted procedure
  7721  002F7C  0E0C               	movlw	12
  7722  002F7E                     u17435:
  7723  002F7E  ECA6  F00E         	call	PL108	;call to abstracted procedure
  7724  002F82  2EE8               	decfsz	wreg,f,c
  7725  002F84  D7FC               	goto	u17435
  7726  002F86  D007               	goto	L4
  7727  002F88                     l14812:
  7728                           
  7729                           ; BSR set to: 2
  7730  002F88  D822               	call	PL46	;call to abstracted procedure
  7731  002F8A  EC77  F011         	call	PL32	;call to abstracted procedure
  7732  002F8E  EC1B  F025         	call	___lldiv	;wreg free
  7733  002F92  EC04  F01E         	call	PL50	;call to abstracted procedure
  7734  002F96                     L4:
  7735                           
  7736                           ;stkvar	_LORAWAN_LinkCheckCallback$2330 @ sp[(-5)+0]
  7737  002F96  0EFB               	movlw	-5
  7738  002F98  C050  FFE3         	movff	btemp+8,plusw1
  7739  002F9C  0EFC               	movlw	-4
  7740  002F9E  C051  FFE3         	movff	btemp+9,plusw1
  7741  002FA2  0EFD               	movlw	-3
  7742  002FA4  C052  FFE3         	movff	btemp+10,plusw1
  7743  002FA8  0EFE               	movlw	-2
  7744  002FAA  C053  FFE3         	movff	btemp+11,plusw1
  7745                           
  7746                           ; BSR set to: 0
  7747                           ;stkvar	_LORAWAN_LinkCheckCallback$2330 @ sp[(-5)+0]
  7748  002FAE  50E1               	movf	fsr1l,w,c
  7749  002FB0  0FFB               	addlw	-5
  7750  002FB2  6ED9               	movwf	fsr2l,c
  7751  002FB4  50E2               	movf	fsr1h,w,c
  7752  002FB6  EC0D  F01E         	call	PL66	;call to abstracted procedure
  7753  002FBA  51E7               	movf	(_loRa+231)& (0+255),w,b
  7754  002FBC  EC11  F02C         	call	_SwTimerSetTimeout
  7755                           
  7756                           ; BSR set to: 0
  7757                           ;lorawan.c: 911: SwTimerStart(loRa.linkCheckTimerId);
  7758  002FC0  0102               	movlb	2	; () banked
  7759  002FC2  51E7               	movf	(_loRa+231)& (0+255),w,b
  7760  002FC4  ECC4  F025         	call	_SwTimerStart
  7761  002FC8                     l1031:
  7762                           
  7763                           ; _LORAWAN_LinkCheckCallback: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 
      +                          parsize = 1, argsize = 1, vargsize = 0
  7764  002FC8  0EFA               	movlw	250
  7765  002FCA  EF1A  F01E         	goto	PL250	;call to abstracted procedure
  7766  002FCE                     __end_of_LORAWAN_LinkCheckCallback:
  7767                           	opt stack 0
  7768  002FCE                     PL46:
  7769                           	opt stack 17
  7770  002FCE  C2CC  F050         	movff	_loRa+204,btemp+8
  7771  002FD2  C2CD  F051         	movff	_loRa+205,btemp+9
  7772  002FD6  C2CE  F052         	movff	_loRa+206,btemp+10
  7773  002FDA  C2CF  F053         	movff	_loRa+207,btemp+11
  7774  002FDE  0E0C               	movlw	12
  7775  002FE0                     u15565:
  7776  002FE0  90D8               	bcf	status,0,c
  7777  002FE2  3650               	rlcf	btemp+8,f,c
  7778  002FE4  3651               	rlcf	btemp+9,f,c
  7779  002FE6  3652               	rlcf	btemp+10,f,c
  7780  002FE8  3653               	rlcf	btemp+11,f,c
  7781  002FEA  2EE8               	decfsz	wreg,f,c
  7782  002FEC  D7F9               	goto	u15565
  7783  002FEE  C050  F060         	movff	btemp+8,___lldiv@dividend
  7784  002FF2  C051  F061         	movff	btemp+9,___lldiv@dividend+1
  7785  002FF6  C052  F062         	movff	btemp+10,___lldiv@dividend+2
  7786  002FFA  C053  F063         	movff	btemp+11,___lldiv@dividend+3
  7787  002FFE  0100               	movlb	0	; () banked
  7788  003000  0C7D               	retlw	125
  7789  003002                     __end_ofPL46:
  7790                           	opt stack 0
  7791  003002                     PL58:
  7792                           	opt stack 17
  7793  003002  C2CC  F060         	movff	_loRa+204,___lldiv@dividend
  7794  003006  C2CD  F061         	movff	_loRa+205,___lldiv@dividend+1
  7795  00300A  C2CE  F062         	movff	_loRa+206,___lldiv@dividend+2
  7796  00300E  C2CF  F063         	movff	_loRa+207,___lldiv@dividend+3
  7797  003012  0100               	movlb	0	; () banked
  7798  003014  0C7D               	retlw	125
  7799  003016                     __end_ofPL58:
  7800                           	opt stack 0
  7801  003016                     PL244:
  7802                           	opt stack 17
  7803  003016  29CC               	incf	(_loRa+204)& (0+255),w,b
  7804  003018  0EFF               	movlw	255
  7805  00301A  59CD               	subwfb	(_loRa+205)& (0+255),w,b
  7806  00301C  0E0F               	movlw	15
  7807  00301E  59CE               	subwfb	(_loRa+206)& (0+255),w,b
  7808  003020  0012               	return	
  7809  003022                     __end_ofPL244:
  7810                           	opt stack 0
  7811                           tosu	equ	0xFFF
  7812                           tosh	equ	0xFFE
  7813                           tosl	equ	0xFFD
  7814                           pclath	equ	0xFFA
  7815                           tblptru	equ	0xFF8
  7816                           tblptrh	equ	0xFF7
  7817                           tblptrl	equ	0xFF6
  7818                           tablat	equ	0xFF5
  7819                           prodh	equ	0xFF4
  7820                           prodl	equ	0xFF3
  7821                           intcon	equ	0xFF2
  7822                           indf0	equ	0xFEF
  7823                           postinc0	equ	0xFEE
  7824                           plusw0	equ	0xFEB
  7825                           fsr0h	equ	0xFEA
  7826                           fsr0l	equ	0xFE9
  7827                           wreg	equ	0xFE8
  7828                           postinc1	equ	0xFE6
  7829                           postdec1	equ	0xFE5
  7830                           plusw1	equ	0xFE3
  7831                           fsr1h	equ	0xFE2
  7832                           fsr1l	equ	0xFE1
  7833                           indf2	equ	0xFDF
  7834                           postinc2	equ	0xFDE
  7835                           postdec2	equ	0xFDD
  7836                           plusw2	equ	0xFDB
  7837                           fsr2h	equ	0xFDA
  7838                           fsr2l	equ	0xFD9
  7839                           status	equ	0xFD8
  7840                           
  7841 ;; *************** function _LORAWAN_ReceiveWindow2Callback *****************
  7842 ;; Defined at:
  7843 ;;		line 827 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  7844 ;; Parameters:    Size  Location     Type
  7845 ;;  param           1  [STACK] unsigned char 
  7846 ;; Auto vars:     Size  Location     Type
  7847 ;;		None
  7848 ;; Return value:  Size  Location     Type
  7849 ;;                  1  [STACK] void 
  7850 ;; Registers used:
  7851 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tb
      +lptru, prodl, prodh, cstack
  7852 ;; Tracked objects:
  7853 ;;		On entry : 3D/0
  7854 ;;		On exit  : 3C/0
  7855 ;;		Unchanged: 0/0
  7856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7857 ;;      Params:         0       0       0       0       0       0       0       0       0
  7858 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7859 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7860 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7861 ;;Total ram usage:        0 bytes
  7862 ;; Hardware stack levels used:    1
  7863 ;; Hardware stack levels required when called:   14
  7864 ;; This function calls:
  7865 ;;		_ConfigureRadioRx
  7866 ;;		_LORAWAN_EnterContinuousReceive
  7867 ;;		_RADIO_GetStatus
  7868 ;;		_RADIO_ReceiveStart
  7869 ;;		_RADIO_ReceiveStop
  7870 ;;		_RADIO_ReleaseData
  7871 ;;		_ResetParametersForConfirmedTransmission
  7872 ;;		_ResetParametersForUnconfirmedTransmission
  7873 ;;		_RxDataDone
  7874 ;; This function is called by:
  7875 ;;		_LORAWAN_RxTimeout
  7876 ;;		_SetCallbackSoftwareTimers
  7877 ;;		_SwTimersExecute
  7878 ;; This function uses a reentrant model
  7879 ;;
  7880                           
  7881                           	psect	text38
  7882  004464                     __ptext38:
  7883                           	opt stack 0
  7884  004464                     _LORAWAN_ReceiveWindow2Callback:
  7885                           	opt stack 12
  7886                           
  7887                           ;lorawan.c: 830: if (loRa.macStatus.macPause == 0)
  7888                           
  7889                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  7890                           ;incstack = 0
  7891  004464  0102               	movlb	2	; () banked
  7892  004466  B103               	btfsc	(_loRa+3)& (0+255),0,b
  7893  004468  D043               	goto	l1007
  7894                           
  7895                           ; BSR set to: 2
  7896                           ;lorawan.c: 831: {
  7897                           ;lorawan.c: 832: if((RADIO_GetStatus() & (1 << (1))) == 0)
  7898  00446A  EC07  F031         	call	_RADIO_GetStatus	;wreg free
  7899  00446E  6E53               	movwf	btemp+11,c
  7900  004470  B253               	btfsc	btemp+11,1,c
  7901  004472  D03A               	goto	l13846
  7902                           
  7903                           ; BSR set to: 1
  7904                           ;lorawan.c: 833: {
  7905                           ;lorawan.c: 834: loRa.macStatus.macState = RX2_OPEN;
  7906  004474  0102               	movlb	2	; () banked
  7907  004476  5102               	movf	(_loRa+2)& (0+255),w,b
  7908  004478  0BF0               	andlw	-16
  7909  00447A  0905               	iorlw	5
  7910  00447C  6F02               	movwf	(_loRa+2)& (0+255),b
  7911                           
  7912                           ; BSR set to: 2
  7913                           ;lorawan.c: 836: RADIO_ReceiveStop();
  7914  00447E  ECDC  F02F         	call	_RADIO_ReceiveStop	;wreg free
  7915                           
  7916                           ; BSR set to: 1
  7917                           ;lorawan.c: 837: RADIO_ReleaseData();
  7918  004482  EC0A  F031         	call	_RADIO_ReleaseData	;wreg free
  7919                           
  7920                           ; BSR set to: 1
  7921                           ;lorawan.c: 839: ConfigureRadioRx(loRa.receiveWindow2Parameters.dataRate, loRa.receiveWi
      +                          ndow2Parameters.frequency);
  7922  004486  ECB9  F026         	call	PL168	;call to abstracted procedure
  7923  00448A  EC3E  F02E         	call	_ConfigureRadioRx
  7924                           
  7925                           ;lorawan.c: 841: if (CLASS_A == loRa.deviceClass)
  7926  00448E  0102               	movlb	2	; () banked
  7927  004490  5112               	movf	(_loRa+18)& (0+255),w,b
  7928  004492  E125               	bnz	l13842
  7929                           
  7930                           ; BSR set to: 2
  7931                           ;lorawan.c: 842: {
  7932                           ;lorawan.c: 843: if (RADIO_ReceiveStart(rxWindowSize[loRa.receiveWindow2Parameters.dataR
      +                          ate]) != OK)
  7933  004494  0E85               	movlw	low _rxWindowSize
  7934  004496  251C               	addwf	(_loRa+28)& (0+255),w,b
  7935  004498  EC30  F020         	call	PL194	;call to abstracted procedure
  7936  00449C  ECB4  F010         	call	_RADIO_ReceiveStart	;wreg free
  7937  0044A0  C0A6  F049         	movff	?_RADIO_ReceiveStart,btemp+1
  7938  0044A4  C0A7  F04A         	movff	?_RADIO_ReceiveStart+1,btemp+2
  7939  0044A8  5049               	movf	btemp+1,w,c
  7940  0044AA  104A               	iorwf	btemp+2,w,c
  7941  0044AC  E029               	bz	l1016
  7942                           
  7943                           ; BSR set to: 0
  7944                           ;lorawan.c: 844: {
  7945                           ;lorawan.c: 845: ResetParametersForConfirmedTransmission ();
  7946  0044AE  EC6E  F030         	call	_ResetParametersForConfirmedTransmission	;wreg free
  7947                           
  7948                           ;lorawan.c: 846: ResetParametersForUnconfirmedTransmission ();
  7949  0044B2  ECC0  F030         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
  7950                           
  7951                           ; BSR set to: 2
  7952                           ;lorawan.c: 847: if (rxPayload.RxAppData != (0))
  7953  0044B6  0101               	movlb	1	; () banked
  7954  0044B8  5179               	movf	_rxPayload& (0+255),w,b
  7955  0044BA  117A               	iorwf	(_rxPayload+1)& (0+255),w,b
  7956  0044BC  E021               	bz	l1016
  7957                           
  7958                           ; BSR set to: 1
  7959                           ;lorawan.c: 848: {
  7960                           ;lorawan.c: 849: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
  7961  0044BE  EC96  F00C         	call	PL48	;call to abstracted procedure
  7962  0044C2  6F63               	movwf	RxDataDone@status& (0+255),b
  7963  0044C4  D801               	call	u15508
  7964  0044C6  D01C               	goto	l1016
  7965  0044C8                     u15508:
  7966  0044C8  0005               	push	
  7967  0044CA  0101               	movlb	1	; () banked
  7968  0044CC  6EFA               	movwf	pclath,c
  7969  0044CE  5179               	movf	_rxPayload& (0+255),w,b
  7970  0044D0  6EFD               	movwf	tosl,c
  7971  0044D2  517A               	movf	(_rxPayload+1)& (0+255),w,b
  7972  0044D4  6EFE               	movwf	tosh,c
  7973  0044D6  50F8               	movf	tblptru,w,c
  7974  0044D8  6EFF               	movwf	tosu,c
  7975  0044DA  50FA               	movf	pclath,w,c
  7976  0044DC  0012               	return		;indir
  7977  0044DE                     l13842:
  7978                           
  7979                           ; BSR set to: 2
  7980                           ;lorawan.c: 853: else
  7981                           ;lorawan.c: 854: {
  7982                           ;lorawan.c: 855: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
  7983  0044DE  EC40  F004         	call	PL316	;call to abstracted procedure
  7984                           
  7985                           ; BSR set to: 2
  7986                           ;lorawan.c: 856: LORAWAN_EnterContinuousReceive();
  7987  0044E2  EC93  F026         	call	_LORAWAN_EnterContinuousReceive	;wreg free
  7988  0044E6  D00C               	goto	l1016
  7989  0044E8                     l13846:
  7990                           
  7991                           ; BSR set to: 1
  7992                           ;lorawan.c: 859: else
  7993                           ;lorawan.c: 860: {
  7994                           ;lorawan.c: 863: loRa.rx2DelayExpired = 1;
  7995  0044E8  0E01               	movlw	1
  7996  0044EA  0102               	movlb	2	; () banked
  7997  0044EC  6FF1               	movwf	(_loRa+241)& (0+255),b
  7998                           
  7999                           ; BSR set to: 1
  8000                           ;lorawan.c: 864: }
  8001                           ;lorawan.c: 865: }
  8002  0044EE  D008               	goto	l1016
  8003  0044F0                     l1007:
  8004                           
  8005                           ; BSR set to: 2
  8006                           ;lorawan.c: 866: else
  8007                           ;lorawan.c: 867: {
  8008                           ;lorawan.c: 870: if (loRa.lorawanMacStatus.joining == 1)
  8009  0044F0  A500               	btfss	_loRa& (0+255),2,b
  8010  0044F2  D002               	goto	l13850
  8011                           
  8012                           ; BSR set to: 2
  8013                           ;lorawan.c: 871: {
  8014                           ;lorawan.c: 872: loRa.lorawanMacStatus.joining = 0;
  8015  0044F4  9500               	bcf	_loRa& (0+255),2,b
  8016                           
  8017                           ;lorawan.c: 873: loRa.macStatus.networkJoined = 0;
  8018  0044F6  9902               	bcf	(_loRa+2)& (0+255),4,b
  8019  0044F8                     l13850:
  8020                           
  8021                           ; BSR set to: 2
  8022                           ;lorawan.c: 874: }
  8023                           ;lorawan.c: 876: ResetParametersForUnconfirmedTransmission();
  8024  0044F8  ECC0  F030         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
  8025                           
  8026                           ;lorawan.c: 877: ResetParametersForConfirmedTransmission();
  8027  0044FC  EC6E  F030         	call	_ResetParametersForConfirmedTransmission	;wreg free
  8028  004500                     l1016:
  8029                           
  8030                           ; _LORAWAN_ReceiveWindow2Callback: autosize = 0, savesize = 0, parsavesize = 0, tempsize
      +                           = 0 parsize = 1, argsize = 1, vargsize = 0
  8031  004500  52E5               	movf	postdec1,f,c
  8032  004502  0012               	return		;funcret
  8033  004504                     __end_of_LORAWAN_ReceiveWindow2Callback:
  8034                           	opt stack 0
  8035                           tosu	equ	0xFFF
  8036                           tosh	equ	0xFFE
  8037                           tosl	equ	0xFFD
  8038                           pclath	equ	0xFFA
  8039                           tblptru	equ	0xFF8
  8040                           tblptrh	equ	0xFF7
  8041                           tblptrl	equ	0xFF6
  8042                           tablat	equ	0xFF5
  8043                           prodh	equ	0xFF4
  8044                           prodl	equ	0xFF3
  8045                           intcon	equ	0xFF2
  8046                           indf0	equ	0xFEF
  8047                           postinc0	equ	0xFEE
  8048                           plusw0	equ	0xFEB
  8049                           fsr0h	equ	0xFEA
  8050                           fsr0l	equ	0xFE9
  8051                           wreg	equ	0xFE8
  8052                           postinc1	equ	0xFE6
  8053                           postdec1	equ	0xFE5
  8054                           plusw1	equ	0xFE3
  8055                           fsr1h	equ	0xFE2
  8056                           fsr1l	equ	0xFE1
  8057                           indf2	equ	0xFDF
  8058                           postinc2	equ	0xFDE
  8059                           postdec2	equ	0xFDD
  8060                           plusw2	equ	0xFDB
  8061                           fsr2h	equ	0xFDA
  8062                           fsr2l	equ	0xFD9
  8063                           status	equ	0xFD8
  8064                           
  8065 ;; *************** function _LORAWAN_ReceiveWindow1Callback *****************
  8066 ;; Defined at:
  8067 ;;		line 796 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  8068 ;; Parameters:    Size  Location     Type
  8069 ;;  param           1  [STACK] unsigned char 
  8070 ;; Auto vars:     Size  Location     Type
  8071 ;;  freq            4  [STACK] unsigned long 
  8072 ;; Return value:  Size  Location     Type
  8073 ;;                  1  [STACK] void 
  8074 ;; Registers used:
  8075 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, t
      +blptrh, tblptru, prodl, prodh, cstack
  8076 ;; Tracked objects:
  8077 ;;		On entry : 3F/0
  8078 ;;		On exit  : 3D/0
  8079 ;;		Unchanged: 0/0
  8080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8081 ;;      Params:         0       0       0       0       0       0       0       0       0
  8082 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8083 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8084 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8085 ;;Total ram usage:        0 bytes
  8086 ;; Hardware stack levels used:    1
  8087 ;; Hardware stack levels required when called:   13
  8088 ;; This function calls:
  8089 ;;		_ConfigureRadioRx
  8090 ;;		_GetRx1Freq
  8091 ;;		_RADIO_ReceiveStart
  8092 ;;		_RADIO_ReceiveStop
  8093 ;;		_RADIO_ReleaseData
  8094 ;; This function is called by:
  8095 ;;		_SetCallbackSoftwareTimers
  8096 ;;		_SwTimersExecute
  8097 ;; This function uses a reentrant model
  8098 ;;
  8099                           
  8100                           	psect	text39
  8101  003FC8                     __ptext39:
  8102                           	opt stack 0
  8103  003FC8                     _LORAWAN_ReceiveWindow1Callback:
  8104                           	opt stack 0
  8105                           
  8106                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  8107  003FC8  52E6               	movf	postinc1,f,c
  8108  003FCA  52E6               	movf	postinc1,f,c
  8109  003FCC  52E6               	movf	postinc1,f,c
  8110  003FCE  52E6               	movf	postinc1,f,c
  8111                           
  8112                           ;lorawan.c: 798: uint32_t freq;
  8113                           ;lorawan.c: 800: if(loRa.macStatus.macPause == 0)
  8114                           
  8115                           ;incstack = 0
  8116  003FD0  0102               	movlb	2	; () banked
  8117  003FD2  B103               	btfsc	(_loRa+3)& (0+255),0,b
  8118  003FD4  D035               	goto	l1004
  8119                           
  8120                           ; BSR set to: 2
  8121                           ;lorawan.c: 801: {
  8122                           ;lorawan.c: 802: if (CLASS_C == loRa.deviceClass)
  8123  003FD6  0E02               	movlw	2
  8124  003FD8  1912               	xorwf	(_loRa+18)& (0+255),w,b
  8125  003FDA  E102               	bnz	l14768
  8126                           
  8127                           ; BSR set to: 2
  8128                           ;lorawan.c: 803: {
  8129                           ;lorawan.c: 804: RADIO_ReceiveStop();
  8130  003FDC  ECDC  F02F         	call	_RADIO_ReceiveStop	;wreg free
  8131  003FE0                     l14768:
  8132                           
  8133                           ;lorawan.c: 805: }
  8134                           ;lorawan.c: 806: if (loRa.receiveWindow1Parameters.dataRate >= loRa.offset)
  8135  003FE0  0102               	movlb	2	; () banked
  8136  003FE2  51EF               	movf	(_loRa+239)& (0+255),w,b
  8137  003FE4  5D17               	subwf	(_loRa+23)& (0+255),w,b
  8138  003FE6  E304               	bnc	l1002
  8139                           
  8140                           ; BSR set to: 2
  8141                           ;lorawan.c: 807: {
  8142                           ;lorawan.c: 808: loRa.receiveWindow1Parameters.dataRate = loRa.receiveWindow1Parameters.
      +                          dataRate - loRa.offset;
  8143  003FE8  51EF               	movf	(_loRa+239)& (0+255),w,b
  8144  003FEA  5D17               	subwf	(_loRa+23)& (0+255),w,b
  8145  003FEC  6F17               	movwf	(_loRa+23)& (0+255),b
  8146                           
  8147                           ;lorawan.c: 809: }
  8148  003FEE  D001               	goto	l14772
  8149  003FF0                     l1002:
  8150                           
  8151                           ; BSR set to: 2
  8152                           ;lorawan.c: 810: else
  8153                           ;lorawan.c: 811: {
  8154                           ;lorawan.c: 812: loRa.receiveWindow1Parameters.dataRate = 0;
  8155  003FF0  6B17               	clrf	(_loRa+23)& (0+255),b
  8156  003FF2                     l14772:
  8157                           
  8158                           ; BSR set to: 2
  8159                           ;lorawan.c: 813: }
  8160                           ;lorawan.c: 815: freq = GetRx1Freq();
  8161  003FF2  EC53  F030         	call	_GetRx1Freq	;wreg free
  8162  003FF6  C060  F050         	movff	?_GetRx1Freq,btemp+8
  8163  003FFA  C061  F051         	movff	?_GetRx1Freq+1,btemp+9
  8164  003FFE  C062  F052         	movff	?_GetRx1Freq+2,btemp+10
  8165  004002  C063  F053         	movff	?_GetRx1Freq+3,btemp+11
  8166                           
  8167                           ;stkvar	LORAWAN_ReceiveWindow1Callback@freq @ sp[(-4)+0]
  8168  004006  D81F               	call	PL144	;call to abstracted procedure
  8169                           
  8170                           ; BSR set to: 2
  8171                           ;lorawan.c: 817: loRa.macStatus.macState = RX1_OPEN;
  8172  004008  5102               	movf	(_loRa+2)& (0+255),w,b
  8173  00400A  0BF0               	andlw	-16
  8174  00400C  0903               	iorlw	3
  8175  00400E  6F02               	movwf	(_loRa+2)& (0+255),b
  8176                           
  8177                           ; BSR set to: 2
  8178                           ;lorawan.c: 819: RADIO_ReleaseData();
  8179  004010  EC0A  F031         	call	_RADIO_ReleaseData	;wreg free
  8180                           
  8181                           ; BSR set to: 1
  8182                           ;lorawan.c: 821: ConfigureRadioRx(loRa.receiveWindow1Parameters.dataRate, freq);
  8183                           ;stkvar	LORAWAN_ReceiveWindow1Callback@freq @ sp[(-4)+0]
  8184  004014  50E1               	movf	fsr1l,w,c
  8185  004016  0FFC               	addlw	-4
  8186  004018  ECA0  F00E         	call	PL102	;call to abstracted procedure
  8187  00401C  CFDE F072          	movff	postinc2,ConfigureRadioRx@freq
  8188  004020  CFDE F073          	movff	postinc2,ConfigureRadioRx@freq+1
  8189  004024  CFDE F074          	movff	postinc2,ConfigureRadioRx@freq+2
  8190  004028  CFDE F075          	movff	postinc2,ConfigureRadioRx@freq+3
  8191  00402C  0102               	movlb	2	; () banked
  8192  00402E  5117               	movf	(_loRa+23)& (0+255),w,b
  8193  004030  EC3E  F02E         	call	_ConfigureRadioRx
  8194                           
  8195                           ;lorawan.c: 823: RADIO_ReceiveStart(rxWindowSize[loRa.receiveWindow1Parameters.dataRate]
      +                          );
  8196  004034  0E85               	movlw	low _rxWindowSize
  8197  004036  0102               	movlb	2	; () banked
  8198  004038  2517               	addwf	(_loRa+23)& (0+255),w,b
  8199  00403A  D812               	call	PL194	;call to abstracted procedure
  8200  00403C  ECB4  F010         	call	_RADIO_ReceiveStart	;wreg free
  8201  004040                     l1004:
  8202                           
  8203                           ; _LORAWAN_ReceiveWindow1Callback: autosize = 4, savesize = 0, parsavesize = 0, tempsize
      +                           = 0 parsize = 1, argsize = 1, vargsize = 0
  8204  004040  0EFB               	movlw	251
  8205  004042  EF1A  F01E         	goto	PL250	;call to abstracted procedure
  8206  004046                     __end_of_LORAWAN_ReceiveWindow1Callback:
  8207                           	opt stack 0
  8208  004046                     PL144:
  8209                           	opt stack 17
  8210  004046  0EFC               	movlw	-4
  8211  004048  C050  FFE3         	movff	btemp+8,plusw1
  8212  00404C  0EFD               	movlw	-3
  8213  00404E  C051  FFE3         	movff	btemp+9,plusw1
  8214  004052  0EFE               	movlw	-2
  8215  004054  C052  FFE3         	movff	btemp+10,plusw1
  8216  004058  0EFF               	movlw	-1
  8217  00405A  C053  FFE3         	movff	btemp+11,plusw1
  8218  00405E  0CFF               	retlw	255
  8219  004060                     __end_ofPL144:
  8220                           	opt stack 0
  8221  004060                     PL194:
  8222                           	opt stack 12
  8223  004060  6EF6               	movwf	tblptrl,c
  8224  004062  6AF7               	clrf	tblptrh,c
  8225  004064  0E7F               	movlw	high _rxWindowSize
  8226  004066  22F7               	addwfc	tblptrh,f,c
  8227  004068                     	if	0	;There are less than 3 active tblptr bytes
  8228  004068                     	endif
  8229  004068  0008               	tblrd		*
  8230  00406A  50F5               	movf	tablat,w,c
  8231  00406C  0100               	movlb	0	; () banked
  8232  00406E  6FA6               	movwf	RADIO_ReceiveStart@rxWindowSize& (0+255),b
  8233  004070  6BA7               	clrf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),b
  8234  004072  0012               	return	
  8235  004074                     __end_ofPL194:
  8236                           	opt stack 0
  8237                           tosu	equ	0xFFF
  8238                           tosh	equ	0xFFE
  8239                           tosl	equ	0xFFD
  8240                           pclath	equ	0xFFA
  8241                           tblptru	equ	0xFF8
  8242                           tblptrh	equ	0xFF7
  8243                           tblptrl	equ	0xFF6
  8244                           tablat	equ	0xFF5
  8245                           prodh	equ	0xFF4
  8246                           prodl	equ	0xFF3
  8247                           intcon	equ	0xFF2
  8248                           indf0	equ	0xFEF
  8249                           postinc0	equ	0xFEE
  8250                           plusw0	equ	0xFEB
  8251                           fsr0h	equ	0xFEA
  8252                           fsr0l	equ	0xFE9
  8253                           wreg	equ	0xFE8
  8254                           postinc1	equ	0xFE6
  8255                           postdec1	equ	0xFE5
  8256                           plusw1	equ	0xFE3
  8257                           fsr1h	equ	0xFE2
  8258                           fsr1l	equ	0xFE1
  8259                           indf2	equ	0xFDF
  8260                           postinc2	equ	0xFDE
  8261                           postdec2	equ	0xFDD
  8262                           plusw2	equ	0xFDB
  8263                           fsr2h	equ	0xFDA
  8264                           fsr2l	equ	0xFD9
  8265                           status	equ	0xFD8
  8266                           
  8267 ;; *************** function _UnconfirmedTransmissionCallback *****************
  8268 ;; Defined at:
  8269 ;;		line 997 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  8270 ;; Parameters:    Size  Location     Type
  8271 ;;  param           1  [STACK] unsigned char 
  8272 ;; Auto vars:     Size  Location     Type
  8273 ;;		None
  8274 ;; Return value:  Size  Location     Type
  8275 ;;                  1  [STACK] void 
  8276 ;; Registers used:
  8277 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, tosl, tblptrl, tblptrh, tblptru, pro
      +dl, prodh, cstack
  8278 ;; Tracked objects:
  8279 ;;		On entry : 3F/0
  8280 ;;		On exit  : 3C/0
  8281 ;;		Unchanged: 0/0
  8282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8283 ;;      Params:         0       0       0       0       0       0       0       0       0
  8284 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8285 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8286 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8287 ;;Total ram usage:        0 bytes
  8288 ;; Hardware stack levels used:    1
  8289 ;; Hardware stack levels required when called:   13
  8290 ;; This function calls:
  8291 ;;		_RADIO_Transmit
  8292 ;;		_ResetParametersForUnconfirmedTransmission
  8293 ;;		_RxDataDone
  8294 ;;		_SelectChannelForTransmission
  8295 ;; This function is called by:
  8296 ;;		_SetCallbackSoftwareTimers
  8297 ;;		_SwTimersExecute
  8298 ;; This function uses a reentrant model
  8299 ;;
  8300                           
  8301                           	psect	text40
  8302  004AAC                     __ptext40:
  8303                           	opt stack 0
  8304  004AAC                     _UnconfirmedTransmissionCallback:
  8305                           	opt stack 15
  8306                           
  8307                           ;lorawan.c: 1000: if ( (SelectChannelForTransmission (1) == OK) && (RADIO_Transmit (&mac
      +                          Buffer[16], loRa.lastPacketLength) == OK) )
  8308                           
  8309                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  8310                           ;incstack = 0
  8311  004AAC  0E01               	movlw	1
  8312  004AAE  ECC4  F026         	call	_SelectChannelForTransmission
  8313  004AB2  0900               	iorlw	0
  8314  004AB4  E10A               	bnz	l14872
  8315                           
  8316                           ; BSR set to: 0
  8317  004AB6  0EFF               	movlw	low (_macBuffer+16)
  8318  004AB8  D820               	call	PL170	;call to abstracted procedure
  8319  004ABA  ECCE  F00E         	call	_RADIO_Transmit	;wreg free
  8320  004ABE  D828               	call	PL284	;call to abstracted procedure
  8321  004AC0  E104               	bnz	l14872
  8322                           
  8323                           ; BSR set to: 0
  8324                           ;lorawan.c: 1001: {
  8325                           ;lorawan.c: 1002: loRa.counterRepetitionsUnconfirmedUplink ++ ;
  8326  004AC2  0102               	movlb	2	; () banked
  8327  004AC4  2BD8               	incf	(_loRa+216)& (0+255),f,b
  8328                           
  8329                           ; BSR set to: 2
  8330                           ;lorawan.c: 1003: loRa.macStatus.macState = TRANSMISSION_OCCURRING;
  8331  004AC6  D81F               	call	PL264	;call to abstracted procedure
  8332                           
  8333                           ;lorawan.c: 1005: }
  8334  004AC8  D016               	goto	l1059
  8335  004ACA                     l14872:
  8336                           
  8337                           ; BSR set to: 0
  8338                           ;lorawan.c: 1006: else
  8339                           ;lorawan.c: 1008: {
  8340                           ;lorawan.c: 1009: ResetParametersForUnconfirmedTransmission ();
  8341  004ACA  ECC0  F030         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
  8342                           
  8343                           ; BSR set to: 2
  8344                           ;lorawan.c: 1010: if (rxPayload.RxAppData != (0))
  8345  004ACE  0101               	movlb	1	; () banked
  8346  004AD0  5179               	movf	_rxPayload& (0+255),w,b
  8347  004AD2  117A               	iorwf	(_rxPayload+1)& (0+255),w,b
  8348  004AD4  E010               	bz	l1059
  8349                           
  8350                           ; BSR set to: 1
  8351                           ;lorawan.c: 1011: {
  8352                           ;lorawan.c: 1012: rxPayload.RxAppData((0), 0, MAC_NOT_OK);
  8353  004AD6  EC96  F00C         	call	PL48	;call to abstracted procedure
  8354  004ADA  6F63               	movwf	RxDataDone@status& (0+255),b
  8355  004ADC  D801               	call	u17628
  8356  004ADE  D00B               	goto	l1059
  8357  004AE0                     u17628:
  8358  004AE0  0005               	push	
  8359  004AE2  0101               	movlb	1	; () banked
  8360  004AE4  6EFA               	movwf	pclath,c
  8361  004AE6  5179               	movf	_rxPayload& (0+255),w,b
  8362  004AE8  6EFD               	movwf	tosl,c
  8363  004AEA  517A               	movf	(_rxPayload+1)& (0+255),w,b
  8364  004AEC  6EFE               	movwf	tosh,c
  8365  004AEE  50F8               	movf	tblptru,w,c
  8366  004AF0  6EFF               	movwf	tosu,c
  8367  004AF2  50FA               	movf	pclath,w,c
  8368  004AF4  0012               	return		;indir
  8369  004AF6                     l1059:
  8370                           
  8371                           ; _UnconfirmedTransmissionCallback: autosize = 0, savesize = 0, parsavesize = 0, tempsiz
      +                          e = 0 parsize = 1, argsize = 1, vargsize = 0
  8372  004AF6  52E5               	movf	postdec1,f,c
  8373  004AF8  0012               	return		;funcret
  8374  004AFA                     __end_of_UnconfirmedTransmissionCallback:
  8375                           	opt stack 0
  8376  004AFA                     PL170:
  8377                           	opt stack 15
  8378  004AFA  6FA6               	movwf	RADIO_Transmit@buffer& (0+255),b
  8379  004AFC  0E05               	movlw	high (_macBuffer+16)
  8380  004AFE  6FA7               	movwf	(RADIO_Transmit@buffer+1)& (0+255),b
  8381  004B00  C2D4  F0A8         	movff	_loRa+212,RADIO_Transmit@bufferLen
  8382  004B04  0012               	return	
  8383  004B06                     __end_ofPL170:
  8384                           	opt stack 0
  8385  004B06                     PL264:
  8386                           	opt stack 15
  8387  004B06  5102               	movf	(_loRa+2)& (0+255),w,b
  8388  004B08  0BF0               	andlw	-16
  8389  004B0A  0901               	iorlw	1
  8390  004B0C  6F02               	movwf	(_loRa+2)& (0+255),b
  8391  004B0E  0012               	return	
  8392  004B10                     __end_ofPL264:
  8393                           	opt stack 0
  8394  004B10                     PL284:
  8395                           	opt stack 15
  8396  004B10  C0A6  F049         	movff	?_RADIO_Transmit,btemp+1
  8397  004B14  C0A7  F04A         	movff	?_RADIO_Transmit+1,btemp+2
  8398  004B18  5049               	movf	btemp+1,w,c
  8399  004B1A  104A               	iorwf	btemp+2,w,c
  8400  004B1C  0012               	return	
  8401  004B1E                     __end_ofPL284:
  8402                           	opt stack 0
  8403                           tosu	equ	0xFFF
  8404                           tosh	equ	0xFFE
  8405                           tosl	equ	0xFFD
  8406                           pclath	equ	0xFFA
  8407                           tblptru	equ	0xFF8
  8408                           tblptrh	equ	0xFF7
  8409                           tblptrl	equ	0xFF6
  8410                           tablat	equ	0xFF5
  8411                           prodh	equ	0xFF4
  8412                           prodl	equ	0xFF3
  8413                           intcon	equ	0xFF2
  8414                           indf0	equ	0xFEF
  8415                           postinc0	equ	0xFEE
  8416                           plusw0	equ	0xFEB
  8417                           fsr0h	equ	0xFEA
  8418                           fsr0l	equ	0xFE9
  8419                           wreg	equ	0xFE8
  8420                           postinc1	equ	0xFE6
  8421                           postdec1	equ	0xFE5
  8422                           plusw1	equ	0xFE3
  8423                           fsr1h	equ	0xFE2
  8424                           fsr1l	equ	0xFE1
  8425                           indf2	equ	0xFDF
  8426                           postinc2	equ	0xFDE
  8427                           postdec2	equ	0xFDD
  8428                           plusw2	equ	0xFDB
  8429                           fsr2h	equ	0xFDA
  8430                           fsr2l	equ	0xFD9
  8431                           status	equ	0xFD8
  8432                           
  8433 ;; *************** function _GetRx1Freq *****************
  8434 ;; Defined at:
  8435 ;;		line 883 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
  8436 ;; Parameters:    Size  Location     Type
  8437 ;;		None
  8438 ;; Auto vars:     Size  Location     Type
  8439 ;;		None
  8440 ;; Return value:  Size  Location     Type
  8441 ;;                  4    0[BANK0 ] unsigned long 
  8442 ;; Registers used:
  8443 ;;		None
  8444 ;; Tracked objects:
  8445 ;;		On entry : 3F/2
  8446 ;;		On exit  : 3F/2
  8447 ;;		Unchanged: 3F/0
  8448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8449 ;;      Params:         0       4       0       0       0       0       0       0       0
  8450 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8451 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8452 ;;      Totals:         0       4       0       0       0       0       0       0       0
  8453 ;;Total ram usage:        4 bytes
  8454 ;; Hardware stack levels used:    1
  8455 ;; Hardware stack levels required when called:    7
  8456 ;; This function calls:
  8457 ;;		Nothing
  8458 ;; This function is called by:
  8459 ;;		_LORAWAN_ReceiveWindow1Callback
  8460 ;; This function uses a non-reentrant model
  8461 ;;
  8462                           
  8463                           	psect	text41
  8464  0060A6                     __ptext41:
  8465                           	opt stack 0
  8466  0060A6                     _GetRx1Freq:
  8467                           	opt stack 20
  8468                           
  8469                           ; BSR set to: 2
  8470                           ;lorawan_eu.c: 885: return loRa.receiveWindow1Parameters.frequency;
  8471                           
  8472                           ;incstack = 0
  8473  0060A6  C213  F060         	movff	_loRa+19,?_GetRx1Freq
  8474  0060AA  C214  F061         	movff	_loRa+20,?_GetRx1Freq+1
  8475  0060AE  C215  F062         	movff	_loRa+21,?_GetRx1Freq+2
  8476  0060B2  C216  F063         	movff	_loRa+22,?_GetRx1Freq+3
  8477                           
  8478                           ; BSR set to: 2
  8479  0060B6  0012               	return		;funcret
  8480  0060B8                     __end_of_GetRx1Freq:
  8481                           	opt stack 0
  8482                           tosu	equ	0xFFF
  8483                           tosh	equ	0xFFE
  8484                           tosl	equ	0xFFD
  8485                           pclath	equ	0xFFA
  8486                           tblptru	equ	0xFF8
  8487                           tblptrh	equ	0xFF7
  8488                           tblptrl	equ	0xFF6
  8489                           tablat	equ	0xFF5
  8490                           prodh	equ	0xFF4
  8491                           prodl	equ	0xFF3
  8492                           intcon	equ	0xFF2
  8493                           indf0	equ	0xFEF
  8494                           postinc0	equ	0xFEE
  8495                           plusw0	equ	0xFEB
  8496                           fsr0h	equ	0xFEA
  8497                           fsr0l	equ	0xFE9
  8498                           wreg	equ	0xFE8
  8499                           postinc1	equ	0xFE6
  8500                           postdec1	equ	0xFE5
  8501                           plusw1	equ	0xFE3
  8502                           fsr1h	equ	0xFE2
  8503                           fsr1l	equ	0xFE1
  8504                           indf2	equ	0xFDF
  8505                           postinc2	equ	0xFDE
  8506                           postdec2	equ	0xFDD
  8507                           plusw2	equ	0xFDB
  8508                           fsr2h	equ	0xFDA
  8509                           fsr2l	equ	0xFD9
  8510                           status	equ	0xFD8
  8511                           
  8512 ;; *************** function _RADIO_DIO5 *****************
  8513 ;; Defined at:
  8514 ;;		line 1344 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8515 ;; Parameters:    Size  Location     Type
  8516 ;;		None
  8517 ;; Auto vars:     Size  Location     Type
  8518 ;;  dioMapping      1    0        unsigned char 
  8519 ;; Return value:  Size  Location     Type
  8520 ;;                  1    wreg      void 
  8521 ;; Registers used:
  8522 ;;		wreg, status,2, status,0, cstack
  8523 ;; Tracked objects:
  8524 ;;		On entry : 3F/1
  8525 ;;		On exit  : 31/0
  8526 ;;		Unchanged: 0/0
  8527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8528 ;;      Params:         0       0       0       0       0       0       0       0       0
  8529 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8530 ;;      Temps:          0       1       0       0       0       0       0       0       0
  8531 ;;      Totals:         0       1       0       0       0       0       0       0       0
  8532 ;;Total ram usage:        1 bytes
  8533 ;; Hardware stack levels used:    1
  8534 ;; Hardware stack levels required when called:   11
  8535 ;; This function calls:
  8536 ;;		_RADIO_RegisterRead
  8537 ;;		_RADIO_UnhandledInterrupt
  8538 ;; This function is called by:
  8539 ;;		_LORAWAN_Mainloop
  8540 ;; This function uses a non-reentrant model
  8541 ;;
  8542                           
  8543                           	psect	text42
  8544  005F58                     __ptext42:
  8545                           	opt stack 0
  8546  005F58                     _RADIO_DIO5:
  8547                           	opt stack 18
  8548                           
  8549                           ; BSR set to: 1
  8550                           ;radio_driver_SX1276.c: 1347: uint8_t dioMapping;
  8551                           ;radio_driver_SX1276.c: 1348: dioMapping = (RADIO_RegisterRead(0x41) & 0x30) >> (4);
  8552                           
  8553                           ; BSR set to: 2
  8554                           ;incstack = 0
  8555  005F58  0E41               	movlw	65
  8556  005F5A  EC64  F02E         	call	_RADIO_RegisterRead
  8557                           
  8558                           ;radio_driver_SX1276.c: 1350: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  8559  005F5E  0E01               	movlw	1
  8560  005F60  EC64  F02E         	call	_RADIO_RegisterRead
  8561  005F64  6F65               	movwf	??_RADIO_DIO5& (0+255),b
  8562  005F66  AF65               	btfss	??_RADIO_DIO5& (0+255),7,b
  8563  005F68  0012               	return	
  8564                           
  8565                           ; BSR set to: 0
  8566                           ;radio_driver_SX1276.c: 1356: RADIO_UnhandledInterrupt(MODULATION_LORA);
  8567  005F6A  0E01               	movlw	1
  8568  005F6C  EFE0  F02E         	goto	_RADIO_UnhandledInterrupt
  8569  005F70                     __end_of_RADIO_DIO5:
  8570                           	opt stack 0
  8571                           tosu	equ	0xFFF
  8572                           tosh	equ	0xFFE
  8573                           tosl	equ	0xFFD
  8574                           pclath	equ	0xFFA
  8575                           tblptru	equ	0xFF8
  8576                           tblptrh	equ	0xFF7
  8577                           tblptrl	equ	0xFF6
  8578                           tablat	equ	0xFF5
  8579                           prodh	equ	0xFF4
  8580                           prodl	equ	0xFF3
  8581                           intcon	equ	0xFF2
  8582                           indf0	equ	0xFEF
  8583                           postinc0	equ	0xFEE
  8584                           plusw0	equ	0xFEB
  8585                           fsr0h	equ	0xFEA
  8586                           fsr0l	equ	0xFE9
  8587                           wreg	equ	0xFE8
  8588                           postinc1	equ	0xFE6
  8589                           postdec1	equ	0xFE5
  8590                           plusw1	equ	0xFE3
  8591                           fsr1h	equ	0xFE2
  8592                           fsr1l	equ	0xFE1
  8593                           indf2	equ	0xFDF
  8594                           postinc2	equ	0xFDE
  8595                           postdec2	equ	0xFDD
  8596                           plusw2	equ	0xFDB
  8597                           fsr2h	equ	0xFDA
  8598                           fsr2l	equ	0xFD9
  8599                           status	equ	0xFD8
  8600                           
  8601 ;; *************** function _RADIO_DIO4 *****************
  8602 ;; Defined at:
  8603 ;;		line 1321 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8604 ;; Parameters:    Size  Location     Type
  8605 ;;		None
  8606 ;; Auto vars:     Size  Location     Type
  8607 ;;  dioMapping      1    0        unsigned char 
  8608 ;; Return value:  Size  Location     Type
  8609 ;;                  1    wreg      void 
  8610 ;; Registers used:
  8611 ;;		wreg, status,2, status,0, cstack
  8612 ;; Tracked objects:
  8613 ;;		On entry : 3F/1
  8614 ;;		On exit  : 31/0
  8615 ;;		Unchanged: 0/0
  8616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8617 ;;      Params:         0       0       0       0       0       0       0       0       0
  8618 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8619 ;;      Temps:          0       1       0       0       0       0       0       0       0
  8620 ;;      Totals:         0       1       0       0       0       0       0       0       0
  8621 ;;Total ram usage:        1 bytes
  8622 ;; Hardware stack levels used:    1
  8623 ;; Hardware stack levels required when called:   11
  8624 ;; This function calls:
  8625 ;;		_RADIO_RegisterRead
  8626 ;;		_RADIO_UnhandledInterrupt
  8627 ;; This function is called by:
  8628 ;;		_LORAWAN_Mainloop
  8629 ;; This function uses a non-reentrant model
  8630 ;;
  8631                           
  8632                           	psect	text43
  8633  005F70                     __ptext43:
  8634                           	opt stack 0
  8635  005F70                     _RADIO_DIO4:
  8636                           	opt stack 18
  8637                           
  8638                           ; BSR set to: 1
  8639                           ;radio_driver_SX1276.c: 1324: uint8_t dioMapping;
  8640                           ;radio_driver_SX1276.c: 1325: dioMapping = (RADIO_RegisterRead(0x41) & 0xC0) >> (6);
  8641                           
  8642                           ;incstack = 0
  8643  005F70  0E41               	movlw	65
  8644  005F72  EC64  F02E         	call	_RADIO_RegisterRead
  8645                           
  8646                           ;radio_driver_SX1276.c: 1327: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  8647  005F76  0E01               	movlw	1
  8648  005F78  EC64  F02E         	call	_RADIO_RegisterRead
  8649  005F7C  6F65               	movwf	??_RADIO_DIO4& (0+255),b
  8650  005F7E  AF65               	btfss	??_RADIO_DIO4& (0+255),7,b
  8651  005F80  0012               	return	
  8652                           
  8653                           ; BSR set to: 0
  8654                           ;radio_driver_SX1276.c: 1333: RADIO_UnhandledInterrupt(MODULATION_LORA);
  8655  005F82  0E01               	movlw	1
  8656  005F84  EFE0  F02E         	goto	_RADIO_UnhandledInterrupt
  8657  005F88                     __end_of_RADIO_DIO4:
  8658                           	opt stack 0
  8659                           tosu	equ	0xFFF
  8660                           tosh	equ	0xFFE
  8661                           tosl	equ	0xFFD
  8662                           pclath	equ	0xFFA
  8663                           tblptru	equ	0xFF8
  8664                           tblptrh	equ	0xFF7
  8665                           tblptrl	equ	0xFF6
  8666                           tablat	equ	0xFF5
  8667                           prodh	equ	0xFF4
  8668                           prodl	equ	0xFF3
  8669                           intcon	equ	0xFF2
  8670                           indf0	equ	0xFEF
  8671                           postinc0	equ	0xFEE
  8672                           plusw0	equ	0xFEB
  8673                           fsr0h	equ	0xFEA
  8674                           fsr0l	equ	0xFE9
  8675                           wreg	equ	0xFE8
  8676                           postinc1	equ	0xFE6
  8677                           postdec1	equ	0xFE5
  8678                           plusw1	equ	0xFE3
  8679                           fsr1h	equ	0xFE2
  8680                           fsr1l	equ	0xFE1
  8681                           indf2	equ	0xFDF
  8682                           postinc2	equ	0xFDE
  8683                           postdec2	equ	0xFDD
  8684                           plusw2	equ	0xFDB
  8685                           fsr2h	equ	0xFDA
  8686                           fsr2l	equ	0xFD9
  8687                           status	equ	0xFD8
  8688                           
  8689 ;; *************** function _RADIO_DIO3 *****************
  8690 ;; Defined at:
  8691 ;;		line 1298 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8692 ;; Parameters:    Size  Location     Type
  8693 ;;		None
  8694 ;; Auto vars:     Size  Location     Type
  8695 ;;  dioMapping      1    0        unsigned char 
  8696 ;; Return value:  Size  Location     Type
  8697 ;;                  1    wreg      void 
  8698 ;; Registers used:
  8699 ;;		wreg, status,2, status,0, cstack
  8700 ;; Tracked objects:
  8701 ;;		On entry : 3F/1
  8702 ;;		On exit  : 31/0
  8703 ;;		Unchanged: 0/0
  8704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8705 ;;      Params:         0       0       0       0       0       0       0       0       0
  8706 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8707 ;;      Temps:          0       1       0       0       0       0       0       0       0
  8708 ;;      Totals:         0       1       0       0       0       0       0       0       0
  8709 ;;Total ram usage:        1 bytes
  8710 ;; Hardware stack levels used:    1
  8711 ;; Hardware stack levels required when called:   11
  8712 ;; This function calls:
  8713 ;;		_RADIO_RegisterRead
  8714 ;;		_RADIO_UnhandledInterrupt
  8715 ;; This function is called by:
  8716 ;;		_LORAWAN_Mainloop
  8717 ;; This function uses a non-reentrant model
  8718 ;;
  8719                           
  8720                           	psect	text44
  8721  005F88                     __ptext44:
  8722                           	opt stack 0
  8723  005F88                     _RADIO_DIO3:
  8724                           	opt stack 18
  8725                           
  8726                           ; BSR set to: 1
  8727                           ;radio_driver_SX1276.c: 1301: uint8_t dioMapping;
  8728                           ;radio_driver_SX1276.c: 1302: dioMapping = RADIO_RegisterRead(0x40) & 0x03;
  8729                           
  8730                           ;incstack = 0
  8731  005F88  0E40               	movlw	64
  8732  005F8A  EC64  F02E         	call	_RADIO_RegisterRead
  8733                           
  8734                           ;radio_driver_SX1276.c: 1304: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  8735  005F8E  0E01               	movlw	1
  8736  005F90  EC64  F02E         	call	_RADIO_RegisterRead
  8737  005F94  6F65               	movwf	??_RADIO_DIO3& (0+255),b
  8738  005F96  AF65               	btfss	??_RADIO_DIO3& (0+255),7,b
  8739  005F98  0012               	return	
  8740                           
  8741                           ; BSR set to: 0
  8742                           ;radio_driver_SX1276.c: 1310: RADIO_UnhandledInterrupt(MODULATION_LORA);
  8743  005F9A  0E01               	movlw	1
  8744  005F9C  EFE0  F02E         	goto	_RADIO_UnhandledInterrupt
  8745  005FA0                     __end_of_RADIO_DIO3:
  8746                           	opt stack 0
  8747                           tosu	equ	0xFFF
  8748                           tosh	equ	0xFFE
  8749                           tosl	equ	0xFFD
  8750                           pclath	equ	0xFFA
  8751                           tblptru	equ	0xFF8
  8752                           tblptrh	equ	0xFF7
  8753                           tblptrl	equ	0xFF6
  8754                           tablat	equ	0xFF5
  8755                           prodh	equ	0xFF4
  8756                           prodl	equ	0xFF3
  8757                           intcon	equ	0xFF2
  8758                           indf0	equ	0xFEF
  8759                           postinc0	equ	0xFEE
  8760                           plusw0	equ	0xFEB
  8761                           fsr0h	equ	0xFEA
  8762                           fsr0l	equ	0xFE9
  8763                           wreg	equ	0xFE8
  8764                           postinc1	equ	0xFE6
  8765                           postdec1	equ	0xFE5
  8766                           plusw1	equ	0xFE3
  8767                           fsr1h	equ	0xFE2
  8768                           fsr1l	equ	0xFE1
  8769                           indf2	equ	0xFDF
  8770                           postinc2	equ	0xFDE
  8771                           postdec2	equ	0xFDD
  8772                           plusw2	equ	0xFDB
  8773                           fsr2h	equ	0xFDA
  8774                           fsr2l	equ	0xFD9
  8775                           status	equ	0xFD8
  8776                           
  8777 ;; *************** function _RADIO_DIO2 *****************
  8778 ;; Defined at:
  8779 ;;		line 1268 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8780 ;; Parameters:    Size  Location     Type
  8781 ;;		None
  8782 ;; Auto vars:     Size  Location     Type
  8783 ;;  dioMapping      1   26[BANK0 ] unsigned char 
  8784 ;;  opMode          1    0        unsigned char 
  8785 ;; Return value:  Size  Location     Type
  8786 ;;                  1    wreg      void 
  8787 ;; Registers used:
  8788 ;;		wreg, status,2, status,0, cstack
  8789 ;; Tracked objects:
  8790 ;;		On entry : 3F/1
  8791 ;;		On exit  : 31/0
  8792 ;;		Unchanged: 0/0
  8793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8794 ;;      Params:         0       0       0       0       0       0       0       0       0
  8795 ;;      Locals:         0       1       0       0       0       0       0       0       0
  8796 ;;      Temps:          0       1       0       0       0       0       0       0       0
  8797 ;;      Totals:         0       2       0       0       0       0       0       0       0
  8798 ;;Total ram usage:        2 bytes
  8799 ;; Hardware stack levels used:    1
  8800 ;; Hardware stack levels required when called:   12
  8801 ;; This function calls:
  8802 ;;		_RADIO_FHSSChangeChannel
  8803 ;;		_RADIO_RegisterRead
  8804 ;;		_RADIO_UnhandledInterrupt
  8805 ;; This function is called by:
  8806 ;;		_LORAWAN_Mainloop
  8807 ;; This function uses a non-reentrant model
  8808 ;;
  8809                           
  8810                           	psect	text45
  8811  00552A                     __ptext45:
  8812                           	opt stack 0
  8813  00552A                     _RADIO_DIO2:
  8814                           	opt stack 17
  8815                           
  8816                           ; BSR set to: 1
  8817                           ;radio_driver_SX1276.c: 1271: uint8_t dioMapping;
  8818                           ;radio_driver_SX1276.c: 1272: uint8_t opMode;
  8819                           ;radio_driver_SX1276.c: 1273: dioMapping = (RADIO_RegisterRead(0x40) & 0x0C) >> (2);
  8820                           
  8821                           ;incstack = 0
  8822  00552A  0E40               	movlw	64
  8823  00552C  EC64  F02E         	call	_RADIO_RegisterRead
  8824  005530  6F79               	movwf	??_RADIO_DIO2& (0+255),b
  8825  005532  90D8               	bcf	status,0,c
  8826  005534  3379               	rrcf	??_RADIO_DIO2& (0+255),f,b
  8827  005536  90D8               	bcf	status,0,c
  8828  005538  3179               	rrcf	??_RADIO_DIO2& (0+255),w,b
  8829  00553A  0B03               	andlw	3
  8830  00553C  6F7A               	movwf	RADIO_DIO2@dioMapping& (0+255),b
  8831                           
  8832                           ;radio_driver_SX1276.c: 1274: opMode = RADIO_RegisterRead(0x01);
  8833  00553E  0E01               	movlw	1
  8834  005540  EC64  F02E         	call	_RADIO_RegisterRead
  8835                           
  8836                           ;radio_driver_SX1276.c: 1276: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  8837  005544  0E01               	movlw	1
  8838  005546  EC64  F02E         	call	_RADIO_RegisterRead
  8839  00554A  6F79               	movwf	??_RADIO_DIO2& (0+255),b
  8840  00554C  AF79               	btfss	??_RADIO_DIO2& (0+255),7,b
  8841  00554E  0012               	return	
  8842  005550  D003               	goto	l15352
  8843  005552                     l15348:
  8844                           
  8845                           ; BSR set to: 0
  8846                           ;radio_driver_SX1276.c: 1288: RADIO_UnhandledInterrupt(MODULATION_LORA);
  8847  005552  0E01               	movlw	1
  8848  005554  EFE0  F02E         	goto	_RADIO_UnhandledInterrupt
  8849  005558                     l15352:
  8850                           
  8851                           ; BSR set to: 0
  8852  005558  517A               	movf	RADIO_DIO2@dioMapping& (0+255),w,b
  8853                           
  8854                           ; Switch size 1, requested type "space"
  8855                           ; Number of cases is 3, Range of values is 0 to 2
  8856                           ; switch strategies available:
  8857                           ; Name         Instructions Cycles
  8858                           ; simple_byte           10     6 (average)
  8859                           ;	Chosen strategy is simple_byte
  8860  00555A  E102 EFFA  F02C    	bz	_RADIO_FHSSChangeChannel
  8861  005560  0A01               	xorlw	1	; case 1
  8862  005562  E102 EFFA  F02C    	bz	_RADIO_FHSSChangeChannel
  8863  005568  0A03               	xorlw	3	; case 2
  8864  00556A  E102 EFFA  F02C    	bz	_RADIO_FHSSChangeChannel
  8865  005570  D7F0               	goto	l15348
  8866  005572                     __end_of_RADIO_DIO2:
  8867                           	opt stack 0
  8868                           tosu	equ	0xFFF
  8869                           tosh	equ	0xFFE
  8870                           tosl	equ	0xFFD
  8871                           pclath	equ	0xFFA
  8872                           tblptru	equ	0xFF8
  8873                           tblptrh	equ	0xFF7
  8874                           tblptrl	equ	0xFF6
  8875                           tablat	equ	0xFF5
  8876                           prodh	equ	0xFF4
  8877                           prodl	equ	0xFF3
  8878                           intcon	equ	0xFF2
  8879                           indf0	equ	0xFEF
  8880                           postinc0	equ	0xFEE
  8881                           plusw0	equ	0xFEB
  8882                           fsr0h	equ	0xFEA
  8883                           fsr0l	equ	0xFE9
  8884                           wreg	equ	0xFE8
  8885                           postinc1	equ	0xFE6
  8886                           postdec1	equ	0xFE5
  8887                           plusw1	equ	0xFE3
  8888                           fsr1h	equ	0xFE2
  8889                           fsr1l	equ	0xFE1
  8890                           indf2	equ	0xFDF
  8891                           postinc2	equ	0xFDE
  8892                           postdec2	equ	0xFDD
  8893                           plusw2	equ	0xFDB
  8894                           fsr2h	equ	0xFDA
  8895                           fsr2l	equ	0xFD9
  8896                           status	equ	0xFD8
  8897                           
  8898 ;; *************** function _RADIO_DIO1 *****************
  8899 ;; Defined at:
  8900 ;;		line 1231 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8901 ;; Parameters:    Size  Location     Type
  8902 ;;		None
  8903 ;; Auto vars:     Size  Location     Type
  8904 ;;  dioMapping      1   97[BANK0 ] unsigned char 
  8905 ;; Return value:  Size  Location     Type
  8906 ;;                  1    wreg      void 
  8907 ;; Registers used:
  8908 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tb
      +lptru, prodl, prodh, cstack
  8909 ;; Tracked objects:
  8910 ;;		On entry : 3F/1
  8911 ;;		On exit  : 30/0
  8912 ;;		Unchanged: 0/0
  8913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8914 ;;      Params:         0       0       0       0       0       0       0       0       0
  8915 ;;      Locals:         0       1       0       0       0       0       0       0       0
  8916 ;;      Temps:          0       1       0       0       0       0       0       0       0
  8917 ;;      Totals:         0       2       0       0       0       0       0       0       0
  8918 ;;Total ram usage:        2 bytes
  8919 ;; Hardware stack levels used:    1
  8920 ;; Hardware stack levels required when called:   17
  8921 ;; This function calls:
  8922 ;;		_RADIO_FHSSChangeChannel
  8923 ;;		_RADIO_RegisterRead
  8924 ;;		_RADIO_RxTimeout
  8925 ;;		_RADIO_UnhandledInterrupt
  8926 ;; This function is called by:
  8927 ;;		_LORAWAN_Mainloop
  8928 ;; This function uses a non-reentrant model
  8929 ;;
  8930                           
  8931                           	psect	text46
  8932  005776                     __ptext46:
  8933                           	opt stack 0
  8934  005776                     _RADIO_DIO1:
  8935                           	opt stack 12
  8936                           
  8937                           ; BSR set to: 1
  8938                           ;radio_driver_SX1276.c: 1234: uint8_t dioMapping;
  8939                           ;radio_driver_SX1276.c: 1235: dioMapping = (RADIO_RegisterRead(0x40) & 0x30) >> (4);
  8940                           
  8941                           ;incstack = 0
  8942  005776  0E40               	movlw	64
  8943  005778  EC64  F02E         	call	_RADIO_RegisterRead
  8944  00577C  6FC0               	movwf	??_RADIO_DIO1& (0+255),b
  8945  00577E  39C0               	swapf	??_RADIO_DIO1& (0+255),w,b
  8946  005780  0B0F               	andlw	15
  8947  005782  0B03               	andlw	3
  8948  005784  6FC1               	movwf	RADIO_DIO1@dioMapping& (0+255),b
  8949                           
  8950                           ;radio_driver_SX1276.c: 1237: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  8951  005786  0E01               	movlw	1
  8952  005788  EC64  F02E         	call	_RADIO_RegisterRead
  8953  00578C  6FC0               	movwf	??_RADIO_DIO1& (0+255),b
  8954  00578E  AFC0               	btfss	??_RADIO_DIO1& (0+255),7,b
  8955  005790  D00D               	goto	l15340
  8956  005792  D003               	goto	l15336
  8957  005794                     l15332:
  8958                           
  8959                           ; BSR set to: 0
  8960                           ;radio_driver_SX1276.c: 1249: RADIO_UnhandledInterrupt(MODULATION_LORA);
  8961  005794  0E01               	movlw	1
  8962  005796  EFE0  F02E         	goto	_RADIO_UnhandledInterrupt
  8963  00579A                     l15336:
  8964                           
  8965                           ; BSR set to: 0
  8966  00579A  51C1               	movf	RADIO_DIO1@dioMapping& (0+255),w,b
  8967                           
  8968                           ; Switch size 1, requested type "space"
  8969                           ; Number of cases is 2, Range of values is 0 to 1
  8970                           ; switch strategies available:
  8971                           ; Name         Instructions Cycles
  8972                           ; simple_byte            7     4 (average)
  8973                           ;	Chosen strategy is simple_byte
  8974  00579C  E102 EF56  F02D    	bz	_RADIO_RxTimeout
  8975  0057A2  0A01               	xorlw	1	; case 1
  8976  0057A4  E102 EFFA  F02C    	bz	_RADIO_FHSSChangeChannel
  8977  0057AA  D7F4               	goto	l15332
  8978  0057AC                     l15340:
  8979                           
  8980                           ; BSR set to: 0
  8981  0057AC  51C1               	movf	RADIO_DIO1@dioMapping& (0+255),w,b
  8982                           
  8983                           ; Switch size 1, requested type "space"
  8984                           ; Number of cases is 1, Range of values is 0 to 0
  8985                           ; switch strategies available:
  8986                           ; Name         Instructions Cycles
  8987                           ; simple_byte            4     3 (average)
  8988                           ;	Chosen strategy is simple_byte
  8989  0057AE  0012               	return	
  8990  0057B0                     __end_of_RADIO_DIO1:
  8991                           	opt stack 0
  8992                           tosu	equ	0xFFF
  8993                           tosh	equ	0xFFE
  8994                           tosl	equ	0xFFD
  8995                           pclath	equ	0xFFA
  8996                           tblptru	equ	0xFF8
  8997                           tblptrh	equ	0xFF7
  8998                           tblptrl	equ	0xFF6
  8999                           tablat	equ	0xFF5
  9000                           prodh	equ	0xFF4
  9001                           prodl	equ	0xFF3
  9002                           intcon	equ	0xFF2
  9003                           indf0	equ	0xFEF
  9004                           postinc0	equ	0xFEE
  9005                           plusw0	equ	0xFEB
  9006                           fsr0h	equ	0xFEA
  9007                           fsr0l	equ	0xFE9
  9008                           wreg	equ	0xFE8
  9009                           postinc1	equ	0xFE6
  9010                           postdec1	equ	0xFE5
  9011                           plusw1	equ	0xFE3
  9012                           fsr1h	equ	0xFE2
  9013                           fsr1l	equ	0xFE1
  9014                           indf2	equ	0xFDF
  9015                           postinc2	equ	0xFDE
  9016                           postdec2	equ	0xFDD
  9017                           plusw2	equ	0xFDB
  9018                           fsr2h	equ	0xFDA
  9019                           fsr2l	equ	0xFD9
  9020                           status	equ	0xFD8
  9021                           
  9022 ;; *************** function _RADIO_RxTimeout *****************
  9023 ;; Defined at:
  9024 ;;		line 1066 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9025 ;; Parameters:    Size  Location     Type
  9026 ;;		None
  9027 ;; Auto vars:     Size  Location     Type
  9028 ;;		None
  9029 ;; Return value:  Size  Location     Type
  9030 ;;                  1    wreg      void 
  9031 ;; Registers used:
  9032 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tb
      +lptru, prodl, prodh, cstack
  9033 ;; Tracked objects:
  9034 ;;		On entry : 3E/0
  9035 ;;		On exit  : 3C/0
  9036 ;;		Unchanged: 0/0
  9037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9038 ;;      Params:         0       0       0       0       0       0       0       0       0
  9039 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9040 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9041 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9042 ;;Total ram usage:        0 bytes
  9043 ;; Hardware stack levels used:    1
  9044 ;; Hardware stack levels required when called:   16
  9045 ;; This function calls:
  9046 ;;		_LORAWAN_RxTimeout
  9047 ;;		_RADIO_RegisterWrite
  9048 ;;		_RADIO_WriteMode
  9049 ;;		_SwTimerStop
  9050 ;; This function is called by:
  9051 ;;		_RADIO_DIO1
  9052 ;; This function uses a non-reentrant model
  9053 ;;
  9054                           
  9055                           	psect	text47
  9056  005AAC                     __ptext47:
  9057                           	opt stack 0
  9058  005AAC                     _RADIO_RxTimeout:
  9059                           	opt stack 12
  9060                           
  9061                           ;radio_driver_SX1276.c: 1069: SwTimerStop(RadioConfiguration.watchdogTimerId);
  9062                           
  9063                           ;incstack = 0
  9064  005AAC  0101               	movlb	1	; () banked
  9065  005AAE  51A8               	movf	(_RadioConfiguration+41)& (0+255),w,b
  9066  005AB0  EC65  F030         	call	_SwTimerStop
  9067                           
  9068                           ; BSR set to: 0
  9069                           ;radio_driver_SX1276.c: 1070: RADIO_RegisterWrite(0x12, 1<<(7));
  9070  005AB4  0E80               	movlw	128
  9071  005AB6  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
  9072  005AB8  0E12               	movlw	18
  9073  005ABA  EC2E  F02F         	call	_RADIO_RegisterWrite
  9074                           
  9075                           ;radio_driver_SX1276.c: 1072: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  9076  005ABE  D806               	call	PL78	;call to abstracted procedure
  9077  005AC0  ECDB  F01A         	call	_RADIO_WriteMode
  9078                           
  9079                           ;radio_driver_SX1276.c: 1073: RadioConfiguration.flags &= ~(1 << (1));
  9080  005AC4  0101               	movlb	1	; () banked
  9081  005AC6  93A2               	bcf	(_RadioConfiguration+35)& (0+255),1,b
  9082                           
  9083                           ; BSR set to: 1
  9084                           ;radio_driver_SX1276.c: 1075: LORAWAN_RxTimeout ();
  9085  005AC8  EF90  F00B         	goto	_LORAWAN_RxTimeout	;wreg free
  9086  005ACC                     __end_of_RADIO_RxTimeout:
  9087                           	opt stack 0
  9088  005ACC                     PL78:
  9089                           	opt stack 12
  9090  005ACC  C197  F065         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
  9091  005AD0  0E00               	movlw	0
  9092  005AD2  0100               	movlb	0	; () banked
  9093  005AD4  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
  9094  005AD6  0C00               	retlw	0
  9095  005AD8                     __end_ofPL78:
  9096                           	opt stack 0
  9097                           tosu	equ	0xFFF
  9098                           tosh	equ	0xFFE
  9099                           tosl	equ	0xFFD
  9100                           pclath	equ	0xFFA
  9101                           tblptru	equ	0xFF8
  9102                           tblptrh	equ	0xFF7
  9103                           tblptrl	equ	0xFF6
  9104                           tablat	equ	0xFF5
  9105                           prodh	equ	0xFF4
  9106                           prodl	equ	0xFF3
  9107                           intcon	equ	0xFF2
  9108                           indf0	equ	0xFEF
  9109                           postinc0	equ	0xFEE
  9110                           plusw0	equ	0xFEB
  9111                           fsr0h	equ	0xFEA
  9112                           fsr0l	equ	0xFE9
  9113                           wreg	equ	0xFE8
  9114                           postinc1	equ	0xFE6
  9115                           postdec1	equ	0xFE5
  9116                           plusw1	equ	0xFE3
  9117                           fsr1h	equ	0xFE2
  9118                           fsr1l	equ	0xFE1
  9119                           indf2	equ	0xFDF
  9120                           postinc2	equ	0xFDE
  9121                           postdec2	equ	0xFDD
  9122                           plusw2	equ	0xFDB
  9123                           fsr2h	equ	0xFDA
  9124                           fsr2l	equ	0xFD9
  9125                           status	equ	0xFD8
  9126                           
  9127 ;; *************** function _RADIO_FHSSChangeChannel *****************
  9128 ;; Defined at:
  9129 ;;		line 1158 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9130 ;; Parameters:    Size  Location     Type
  9131 ;;		None
  9132 ;; Auto vars:     Size  Location     Type
  9133 ;;  irqFlags        1    0        unsigned char 
  9134 ;; Return value:  Size  Location     Type
  9135 ;;                  1    wreg      void 
  9136 ;; Registers used:
  9137 ;;		wreg, status,2, status,0, cstack
  9138 ;; Tracked objects:
  9139 ;;		On entry : 3E/0
  9140 ;;		On exit  : 31/0
  9141 ;;		Unchanged: 0/0
  9142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9143 ;;      Params:         0       0       0       0       0       0       0       0       0
  9144 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9145 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9146 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9147 ;;Total ram usage:        0 bytes
  9148 ;; Hardware stack levels used:    1
  9149 ;; Hardware stack levels required when called:   11
  9150 ;; This function calls:
  9151 ;;		_RADIO_RegisterRead
  9152 ;;		_RADIO_RegisterWrite
  9153 ;;		_RADIO_WriteFrequency
  9154 ;; This function is called by:
  9155 ;;		_RADIO_DIO1
  9156 ;;		_RADIO_DIO2
  9157 ;; This function uses a non-reentrant model
  9158 ;;
  9159                           
  9160                           	psect	text48
  9161  0059F4                     __ptext48:
  9162                           	opt stack 0
  9163  0059F4                     _RADIO_FHSSChangeChannel:
  9164                           	opt stack 17
  9165                           
  9166                           ;radio_driver_SX1276.c: 1160: uint8_t irqFlags;
  9167                           ;radio_driver_SX1276.c: 1161: irqFlags = RADIO_RegisterRead(0x12);
  9168                           
  9169                           ;incstack = 0
  9170  0059F4  0E12               	movlw	18
  9171  0059F6  EC64  F02E         	call	_RADIO_RegisterRead
  9172                           
  9173                           ; BSR set to: 0
  9174                           ;radio_driver_SX1276.c: 1163: if ((0) != RadioConfiguration.frequencyHopPeriod)
  9175  0059FA  0101               	movlb	1	; () banked
  9176  0059FC  519D               	movf	(_RadioConfiguration+30)& (0+255),w,b
  9177  0059FE  119E               	iorwf	(_RadioConfiguration+31)& (0+255),w,b
  9178  005A00  E00A               	bz	l2304
  9179                           
  9180                           ; BSR set to: 1
  9181                           ;radio_driver_SX1276.c: 1164: {
  9182                           ;radio_driver_SX1276.c: 1165: if ((0) != RadioConfiguration.fhssNextFrequency)
  9183  005A02  51AE               	movf	(_RadioConfiguration+47)& (0+255),w,b
  9184  005A04  11AF               	iorwf	(_RadioConfiguration+48)& (0+255),w,b
  9185  005A06  E007               	bz	l2304
  9186                           
  9187                           ; BSR set to: 1
  9188                           ;radio_driver_SX1276.c: 1166: {
  9189                           ;radio_driver_SX1276.c: 1167: RADIO_WriteFrequency(RadioConfiguration.fhssNextFrequency(
      +                          ));
  9190  005A08  0100               	movlb	0	; () banked
  9191  005A0A  6B6D               	clrf	RADIO_WriteFrequency@frequency& (0+255),b
  9192  005A0C  6B6E               	clrf	(RADIO_WriteFrequency@frequency+1)& (0+255),b
  9193  005A0E  6B6F               	clrf	(RADIO_WriteFrequency@frequency+2)& (0+255),b
  9194  005A10  6B70               	clrf	(RADIO_WriteFrequency@frequency+3)& (0+255),b
  9195  005A12  ECB4  F01B         	call	_RADIO_WriteFrequency	;wreg free
  9196  005A16                     l2304:
  9197                           
  9198                           ;radio_driver_SX1276.c: 1168: }
  9199                           ;radio_driver_SX1276.c: 1169: }
  9200                           ;radio_driver_SX1276.c: 1172: RADIO_RegisterWrite(0x12, 1<<(1));
  9201  005A16  0E02               	movlw	2
  9202  005A18  0100               	movlb	0	; () banked
  9203  005A1A  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
  9204  005A1C  0E12               	movlw	18
  9205  005A1E  EF2E  F02F         	goto	_RADIO_RegisterWrite
  9206  005A22                     __end_of_RADIO_FHSSChangeChannel:
  9207                           	opt stack 0
  9208                           tosu	equ	0xFFF
  9209                           tosh	equ	0xFFE
  9210                           tosl	equ	0xFFD
  9211                           pclath	equ	0xFFA
  9212                           tblptru	equ	0xFF8
  9213                           tblptrh	equ	0xFF7
  9214                           tblptrl	equ	0xFF6
  9215                           tablat	equ	0xFF5
  9216                           prodh	equ	0xFF4
  9217                           prodl	equ	0xFF3
  9218                           intcon	equ	0xFF2
  9219                           indf0	equ	0xFEF
  9220                           postinc0	equ	0xFEE
  9221                           plusw0	equ	0xFEB
  9222                           fsr0h	equ	0xFEA
  9223                           fsr0l	equ	0xFE9
  9224                           wreg	equ	0xFE8
  9225                           postinc1	equ	0xFE6
  9226                           postdec1	equ	0xFE5
  9227                           plusw1	equ	0xFE3
  9228                           fsr1h	equ	0xFE2
  9229                           fsr1l	equ	0xFE1
  9230                           indf2	equ	0xFDF
  9231                           postinc2	equ	0xFDE
  9232                           postdec2	equ	0xFDD
  9233                           plusw2	equ	0xFDB
  9234                           fsr2h	equ	0xFDA
  9235                           fsr2l	equ	0xFD9
  9236                           status	equ	0xFD8
  9237                           
  9238 ;; *************** function _RADIO_DIO0 *****************
  9239 ;; Defined at:
  9240 ;;		line 1176 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9241 ;; Parameters:    Size  Location     Type
  9242 ;;		None
  9243 ;; Auto vars:     Size  Location     Type
  9244 ;;  opMode          1  115[BANK1 ] unsigned char 
  9245 ;;  dioMapping      1  114[BANK1 ] unsigned char 
  9246 ;; Return value:  Size  Location     Type
  9247 ;;                  1    wreg      void 
  9248 ;; Registers used:
  9249 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+8, btemp+9, btem
      +p+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9250 ;; Tracked objects:
  9251 ;;		On entry : 3F/1
  9252 ;;		On exit  : 30/0
  9253 ;;		Unchanged: 0/0
  9254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9255 ;;      Params:         0       0       0       0       0       0       0       0       0
  9256 ;;      Locals:         0       0       2       0       0       0       0       0       0
  9257 ;;      Temps:          0       2       0       0       0       0       0       0       0
  9258 ;;      Totals:         0       2       2       0       0       0       0       0       0
  9259 ;;Total ram usage:        4 bytes
  9260 ;; Hardware stack levels used:    1
  9261 ;; Hardware stack levels required when called:   17
  9262 ;; This function calls:
  9263 ;;		_RADIO_FSKPacketSent
  9264 ;;		_RADIO_FSKPayloadReady
  9265 ;;		_RADIO_RegisterRead
  9266 ;;		_RADIO_RxDone
  9267 ;;		_RADIO_TxDone
  9268 ;;		_RADIO_UnhandledInterrupt
  9269 ;; This function is called by:
  9270 ;;		_LORAWAN_Mainloop
  9271 ;; This function uses a non-reentrant model
  9272 ;;
  9273                           
  9274                           	psect	text49
  9275  004BF2                     __ptext49:
  9276                           	opt stack 0
  9277  004BF2                     _RADIO_DIO0:
  9278                           	opt stack 12
  9279                           
  9280                           ; BSR set to: 1
  9281                           ;radio_driver_SX1276.c: 1179: uint8_t dioMapping;
  9282                           ;radio_driver_SX1276.c: 1180: uint8_t opMode;
  9283                           ;radio_driver_SX1276.c: 1181: dioMapping = (RADIO_RegisterRead(0x40) & 0xC0) >> (6);
  9284                           
  9285                           ;incstack = 0
  9286  004BF2  0E40               	movlw	64
  9287  004BF4  EC64  F02E         	call	_RADIO_RegisterRead
  9288  004BF8  6FFB               	movwf	??_RADIO_DIO0& (0+255),b
  9289  004BFA  0E06               	movlw	6
  9290  004BFC  6FFC               	movwf	(??_RADIO_DIO0+1)& (0+255),b
  9291  004BFE                     u18195:
  9292  004BFE  90D8               	bcf	status,0,c
  9293  004C00  33FB               	rrcf	??_RADIO_DIO0& (0+255),f,b
  9294  004C02  2FFC               	decfsz	(??_RADIO_DIO0+1)& (0+255),f,b
  9295  004C04  D7FC               	goto	u18195
  9296  004C06  51FB               	movf	??_RADIO_DIO0& (0+255),w,b
  9297  004C08  0B03               	andlw	3
  9298  004C0A  0101               	movlb	1	; () banked
  9299  004C0C  6F72               	movwf	RADIO_DIO0@dioMapping& (0+255),b
  9300                           
  9301                           ;radio_driver_SX1276.c: 1182: opMode = RADIO_RegisterRead(0x01);
  9302  004C0E  0E01               	movlw	1
  9303  004C10  EC64  F02E         	call	_RADIO_RegisterRead
  9304  004C14  0101               	movlb	1	; () banked
  9305  004C16  6F73               	movwf	RADIO_DIO0@opMode& (0+255),b
  9306                           
  9307                           ; BSR set to: 1
  9308                           ;radio_driver_SX1276.c: 1184: if ((opMode & 0x80) != 0)
  9309  004C18  AF73               	btfss	RADIO_DIO0@opMode& (0+255),7,b
  9310  004C1A  D01C               	goto	l15322
  9311  004C1C  D003               	goto	l15306
  9312  004C1E                     l15302:
  9313                           
  9314                           ; BSR set to: 1
  9315                           ;radio_driver_SX1276.c: 1196: RADIO_UnhandledInterrupt(MODULATION_LORA);
  9316  004C1E  0E01               	movlw	1
  9317  004C20  EFE0  F02E         	goto	_RADIO_UnhandledInterrupt
  9318  004C24                     l15306:
  9319                           
  9320                           ; BSR set to: 1
  9321  004C24  5172               	movf	RADIO_DIO0@dioMapping& (0+255),w,b
  9322                           
  9323                           ; Switch size 1, requested type "space"
  9324                           ; Number of cases is 2, Range of values is 0 to 1
  9325                           ; switch strategies available:
  9326                           ; Name         Instructions Cycles
  9327                           ; simple_byte            7     4 (average)
  9328                           ;	Chosen strategy is simple_byte
  9329  004C26  E102 EFD7  F01E    	bz	_RADIO_RxDone
  9330  004C2C  0A01               	xorlw	1	; case 1
  9331  004C2E  E102 EF82  F022    	bz	_RADIO_TxDone
  9332  004C34  D7F4               	goto	l15302
  9333  004C36                     l15308:
  9334                           
  9335                           ; BSR set to: 1
  9336                           ;radio_driver_SX1276.c: 1207: opMode &= 0x07;
  9337  004C36  0E07               	movlw	7
  9338  004C38  1773               	andwf	RADIO_DIO0@opMode& (0+255),f,b
  9339                           
  9340                           ;radio_driver_SX1276.c: 1208: if (MODE_TX == opMode)
  9341  004C3A  0E03               	movlw	3
  9342  004C3C  1973               	xorwf	RADIO_DIO0@opMode& (0+255),w,b
  9343  004C3E  E102               	bnz	l15312
  9344                           
  9345                           ; BSR set to: 1
  9346                           ;radio_driver_SX1276.c: 1209: {
  9347                           ;radio_driver_SX1276.c: 1211: RADIO_FSKPacketSent();
  9348  004C40  EF14  F019         	goto	_RADIO_FSKPacketSent	;wreg free
  9349  004C44                     l15312:
  9350                           
  9351                           ; BSR set to: 1
  9352                           ;radio_driver_SX1276.c: 1213: else if (MODE_RXCONT == opMode)
  9353  004C44  0E05               	movlw	5
  9354  004C46  1973               	xorwf	RADIO_DIO0@opMode& (0+255),w,b
  9355  004C48  E102               	bnz	l15318
  9356                           
  9357                           ; BSR set to: 1
  9358                           ;radio_driver_SX1276.c: 1214: {
  9359                           ;radio_driver_SX1276.c: 1216: RADIO_FSKPayloadReady();
  9360  004C4A  EFD1  F022         	goto	_RADIO_FSKPayloadReady	;wreg free
  9361  004C4E                     l15318:
  9362                           
  9363                           ; BSR set to: 1
  9364                           ;radio_driver_SX1276.c: 1224: RADIO_UnhandledInterrupt(MODULATION_FSK);
  9365  004C4E  0E00               	movlw	0
  9366  004C50  EFE0  F02E         	goto	_RADIO_UnhandledInterrupt
  9367  004C54                     l15322:
  9368                           
  9369                           ; BSR set to: 1
  9370  004C54  5172               	movf	RADIO_DIO0@dioMapping& (0+255),w,b
  9371                           
  9372                           ; Switch size 1, requested type "space"
  9373                           ; Number of cases is 1, Range of values is 0 to 0
  9374                           ; switch strategies available:
  9375                           ; Name         Instructions Cycles
  9376                           ; simple_byte            4     3 (average)
  9377                           ;	Chosen strategy is simple_byte
  9378  004C56  E0EF               	bz	l15308
  9379  004C58  D7FA               	goto	l15318
  9380  004C5A                     __end_of_RADIO_DIO0:
  9381                           	opt stack 0
  9382                           tosu	equ	0xFFF
  9383                           tosh	equ	0xFFE
  9384                           tosl	equ	0xFFD
  9385                           pclath	equ	0xFFA
  9386                           tblptru	equ	0xFF8
  9387                           tblptrh	equ	0xFF7
  9388                           tblptrl	equ	0xFF6
  9389                           tablat	equ	0xFF5
  9390                           prodh	equ	0xFF4
  9391                           prodl	equ	0xFF3
  9392                           intcon	equ	0xFF2
  9393                           indf0	equ	0xFEF
  9394                           postinc0	equ	0xFEE
  9395                           plusw0	equ	0xFEB
  9396                           fsr0h	equ	0xFEA
  9397                           fsr0l	equ	0xFE9
  9398                           wreg	equ	0xFE8
  9399                           postinc1	equ	0xFE6
  9400                           postdec1	equ	0xFE5
  9401                           plusw1	equ	0xFE3
  9402                           fsr1h	equ	0xFE2
  9403                           fsr1l	equ	0xFE1
  9404                           indf2	equ	0xFDF
  9405                           postinc2	equ	0xFDE
  9406                           postdec2	equ	0xFDD
  9407                           plusw2	equ	0xFDB
  9408                           fsr2h	equ	0xFDA
  9409                           fsr2l	equ	0xFD9
  9410                           status	equ	0xFD8
  9411                           
  9412 ;; *************** function _RADIO_UnhandledInterrupt *****************
  9413 ;; Defined at:
  9414 ;;		line 1139 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9415 ;; Parameters:    Size  Location     Type
  9416 ;;  modulation      1    wreg     enum E17148
  9417 ;; Auto vars:     Size  Location     Type
  9418 ;;  modulation      1    4[BANK0 ] enum E17148
  9419 ;; Return value:  Size  Location     Type
  9420 ;;                  1    wreg      void 
  9421 ;; Registers used:
  9422 ;;		wreg, status,2, status,0, cstack
  9423 ;; Tracked objects:
  9424 ;;		On entry : 3E/0
  9425 ;;		On exit  : 31/0
  9426 ;;		Unchanged: 0/0
  9427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9428 ;;      Params:         0       0       0       0       0       0       0       0       0
  9429 ;;      Locals:         0       1       0       0       0       0       0       0       0
  9430 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9431 ;;      Totals:         0       1       0       0       0       0       0       0       0
  9432 ;;Total ram usage:        1 bytes
  9433 ;; Hardware stack levels used:    1
  9434 ;; Hardware stack levels required when called:   10
  9435 ;; This function calls:
  9436 ;;		_RADIO_RegisterWrite
  9437 ;; This function is called by:
  9438 ;;		_RADIO_DIO0
  9439 ;;		_RADIO_DIO1
  9440 ;;		_RADIO_DIO2
  9441 ;;		_RADIO_DIO3
  9442 ;;		_RADIO_DIO4
  9443 ;;		_RADIO_DIO5
  9444 ;; This function uses a non-reentrant model
  9445 ;;
  9446                           
  9447                           	psect	text50
  9448  005DC0                     __ptext50:
  9449                           	opt stack 0
  9450  005DC0                     _RADIO_UnhandledInterrupt:
  9451                           	opt stack 18
  9452                           
  9453                           ;incstack = 0
  9454                           ;RADIO_UnhandledInterrupt@modulation stored from wreg
  9455  005DC0  0100               	movlb	0	; () banked
  9456  005DC2  6F64               	movwf	RADIO_UnhandledInterrupt@modulation& (0+255),b
  9457                           
  9458                           ;radio_driver_SX1276.c: 1144: if (MODULATION_LORA == modulation)
  9459  005DC4  0564               	decf	RADIO_UnhandledInterrupt@modulation& (0+255),w,b
  9460  005DC6  E104               	bnz	l15160
  9461                           
  9462                           ; BSR set to: 0
  9463                           ;radio_driver_SX1276.c: 1145: {
  9464                           ;radio_driver_SX1276.c: 1146: RADIO_RegisterWrite(0x12, 0xFF);
  9465  005DC8  6962               	setf	RADIO_RegisterWrite@value& (0+255),b
  9466  005DCA  0E12               	movlw	18
  9467  005DCC  EF2E  F02F         	goto	_RADIO_RegisterWrite
  9468  005DD0                     l15160:
  9469                           
  9470                           ; BSR set to: 0
  9471                           ;radio_driver_SX1276.c: 1148: else
  9472                           ;radio_driver_SX1276.c: 1149: {
  9473                           ;radio_driver_SX1276.c: 1152: RADIO_RegisterWrite(0x3E, 0xFF);
  9474  005DD0  6962               	setf	RADIO_RegisterWrite@value& (0+255),b
  9475  005DD2  0E3E               	movlw	62
  9476  005DD4  EC2E  F02F         	call	_RADIO_RegisterWrite
  9477                           
  9478                           ;radio_driver_SX1276.c: 1153: RADIO_RegisterWrite(0x3F, 0xFF);
  9479  005DD8  ECCC  F008         	call	PL444	;call to abstracted procedure
  9480  005DDC  EF2E  F02F         	goto	_RADIO_RegisterWrite
  9481  005DE0                     __end_of_RADIO_UnhandledInterrupt:
  9482                           	opt stack 0
  9483                           tosu	equ	0xFFF
  9484                           tosh	equ	0xFFE
  9485                           tosl	equ	0xFFD
  9486                           pclath	equ	0xFFA
  9487                           tblptru	equ	0xFF8
  9488                           tblptrh	equ	0xFF7
  9489                           tblptrl	equ	0xFF6
  9490                           tablat	equ	0xFF5
  9491                           prodh	equ	0xFF4
  9492                           prodl	equ	0xFF3
  9493                           intcon	equ	0xFF2
  9494                           indf0	equ	0xFEF
  9495                           postinc0	equ	0xFEE
  9496                           plusw0	equ	0xFEB
  9497                           fsr0h	equ	0xFEA
  9498                           fsr0l	equ	0xFE9
  9499                           wreg	equ	0xFE8
  9500                           postinc1	equ	0xFE6
  9501                           postdec1	equ	0xFE5
  9502                           plusw1	equ	0xFE3
  9503                           fsr1h	equ	0xFE2
  9504                           fsr1l	equ	0xFE1
  9505                           indf2	equ	0xFDF
  9506                           postinc2	equ	0xFDE
  9507                           postdec2	equ	0xFDD
  9508                           plusw2	equ	0xFDB
  9509                           fsr2h	equ	0xFDA
  9510                           fsr2l	equ	0xFD9
  9511                           status	equ	0xFD8
  9512                           
  9513 ;; *************** function _RADIO_TxDone *****************
  9514 ;; Defined at:
  9515 ;;		line 1078 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9516 ;; Parameters:    Size  Location     Type
  9517 ;;		None
  9518 ;; Auto vars:     Size  Location     Type
  9519 ;;  timeOnAir       4  116[BANK0 ] unsigned long 
  9520 ;; Return value:  Size  Location     Type
  9521 ;;                  1    wreg      void 
  9522 ;; Registers used:
  9523 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9524 ;; Tracked objects:
  9525 ;;		On entry : 3F/1
  9526 ;;		On exit  : 3C/0
  9527 ;;		Unchanged: 0/0
  9528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9529 ;;      Params:         0       0       0       0       0       0       0       0       0
  9530 ;;      Locals:         0       8       0       0       0       0       0       0       0
  9531 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9532 ;;      Totals:         0       8       0       0       0       0       0       0       0
  9533 ;;Total ram usage:        8 bytes
  9534 ;; Hardware stack levels used:    1
  9535 ;; Hardware stack levels required when called:   15
  9536 ;; This function calls:
  9537 ;;		_LORAWAN_TxDone
  9538 ;;		_RADIO_RegisterWrite
  9539 ;;		_RADIO_WriteMode
  9540 ;;		_SwTimerReadValue
  9541 ;;		_SwTimerStop
  9542 ;;		___lmul
  9543 ;; This function is called by:
  9544 ;;		_RADIO_DIO0
  9545 ;; This function uses a non-reentrant model
  9546 ;;
  9547                           
  9548                           	psect	text51
  9549  004504                     __ptext51:
  9550                           	opt stack 0
  9551  004504                     _RADIO_TxDone:
  9552                           	opt stack 13
  9553                           
  9554                           ; BSR set to: 1
  9555                           ;radio_driver_SX1276.c: 1080: uint32_t timeOnAir;
  9556                           ;radio_driver_SX1276.c: 1082: SwTimerStop(RadioConfiguration.watchdogTimerId);
  9557                           
  9558                           ;incstack = 0
  9559  004504  51A8               	movf	(_RadioConfiguration+41)& (0+255),w,b
  9560  004506  EC65  F030         	call	_SwTimerStop
  9561                           
  9562                           ; BSR set to: 0
  9563                           ;radio_driver_SX1276.c: 1083: RADIO_RegisterWrite(0x12, 1<<(3));
  9564  00450A  0E08               	movlw	8
  9565  00450C  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
  9566  00450E  0E12               	movlw	18
  9567  004510  EC2E  F02F         	call	_RADIO_RegisterWrite
  9568                           
  9569                           ;radio_driver_SX1276.c: 1084: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  9570  004514  EC66  F02D         	call	PL78	;call to abstracted procedure
  9571  004518  ECDB  F01A         	call	_RADIO_WriteMode
  9572                           
  9573                           ;radio_driver_SX1276.c: 1085: RadioConfiguration.flags &= ~(1 << (0));
  9574  00451C  0101               	movlb	1	; () banked
  9575  00451E  91A2               	bcf	(_RadioConfiguration+35)& (0+255),0,b
  9576                           
  9577                           ; BSR set to: 1
  9578                           ;radio_driver_SX1276.c: 1086: if ((RadioConfiguration.flags & (1 << (4))) == 0)
  9579  004520  B9A2               	btfsc	(_RadioConfiguration+35)& (0+255),4,b
  9580  004522  0012               	return	
  9581                           
  9582                           ; BSR set to: 1
  9583                           ;radio_driver_SX1276.c: 1087: {
  9584                           ;radio_driver_SX1276.c: 1088: timeOnAir = ((uint32_t)20000) - ((SwTimerReadValue(RadioCo
      +                          nfiguration.timeOnAirTimerId)) < 0x00DFAC1FUL ? ( (((uint32_t)(SwTimerReadValue(RadioCon
      +                          figuration.timeOnAirTimerId))) * 125UL) >> (12) ) : ( (((uint32_t)(SwTimerReadValue(Radi
      +                          oConfiguration.t
  9585  004524  51A6               	movf	(_RadioConfiguration+39)& (0+255),w,b
  9586  004526  EC98  F02C         	call	_SwTimerReadValue
  9587  00452A  518A               	movf	(?_SwTimerReadValue+3)& (0+255),w,b
  9588  00452C  E103               	bnz	u17880
  9589  00452E  EC7C  F019         	call	PL294	;call to abstracted procedure
  9590  004532  E30F               	bnc	l15126
  9591  004534                     u17880:
  9592                           
  9593                           ; BSR set to: 0
  9594  004534  0101               	movlb	1	; () banked
  9595  004536  51A6               	movf	(_RadioConfiguration+39)& (0+255),w,b
  9596  004538  EC98  F02C         	call	_SwTimerReadValue
  9597  00453C  0E0D               	movlw	13
  9598  00453E  D002               	goto	u17890
  9599  004540                     u17895:
  9600  004540  EC83  F019         	call	PL330	;call to abstracted procedure
  9601  004544                     u17890:
  9602  004544  2EE8               	decfsz	wreg,f,c
  9603  004546  D7FC               	goto	u17895
  9604  004548  EC63  F019         	call	PL36	;call to abstracted procedure
  9605  00454C  EC25  F02A         	call	___lmul	;wreg free
  9606  004550  D00E               	goto	L5
  9607  004552                     l15126:
  9608                           
  9609                           ; BSR set to: 0
  9610  004552  0101               	movlb	1	; () banked
  9611  004554  51A6               	movf	(_RadioConfiguration+39)& (0+255),w,b
  9612  004556  EC98  F02C         	call	_SwTimerReadValue
  9613  00455A  EC63  F019         	call	PL36	;call to abstracted procedure
  9614  00455E  EC25  F02A         	call	___lmul	;wreg free
  9615  004562  0E0D               	movlw	13
  9616  004564  D002               	goto	u17900
  9617  004566                     u17905:
  9618  004566  EC71  F019         	call	PL242	;call to abstracted procedure
  9619  00456A                     u17900:
  9620  00456A  2EE8               	decfsz	wreg,f,c
  9621  00456C  D7FC               	goto	u17905
  9622  00456E                     L5:
  9623  00456E  C090  F0D8         	movff	?___lmul,_RADIO_TxDone$3761
  9624  004572  C091  F0D9         	movff	?___lmul+1,_RADIO_TxDone$3761+1
  9625  004576  C092  F0DA         	movff	?___lmul+2,_RADIO_TxDone$3761+2
  9626  00457A  C093  F0DB         	movff	?___lmul+3,_RADIO_TxDone$3761+3
  9627                           
  9628                           ; BSR set to: 0
  9629  00457E  51D8               	movf	_RADIO_TxDone$3761& (0+255),w,b
  9630  004580  0820               	sublw	32
  9631  004582  6FD4               	movwf	RADIO_TxDone@timeOnAir& (0+255),b
  9632  004584  0E4E               	movlw	78
  9633  004586  55D9               	subfwb	(_RADIO_TxDone$3761+1)& (0+255),w,b
  9634  004588  6FD5               	movwf	(RADIO_TxDone@timeOnAir+1)& (0+255),b
  9635  00458A  0E00               	movlw	0
  9636  00458C  55DA               	subfwb	(_RADIO_TxDone$3761+2)& (0+255),w,b
  9637  00458E  6FD6               	movwf	(RADIO_TxDone@timeOnAir+2)& (0+255),b
  9638  004590  0E00               	movlw	0
  9639  004592  55DB               	subfwb	(_RADIO_TxDone$3761+3)& (0+255),w,b
  9640  004594  6FD7               	movwf	(RADIO_TxDone@timeOnAir+3)& (0+255),b
  9641                           
  9642                           ; BSR set to: 0
  9643                           ;radio_driver_SX1276.c: 1089: LORAWAN_TxDone((uint16_t)timeOnAir);
  9644  004596  C0D4  F0B0         	movff	RADIO_TxDone@timeOnAir,LORAWAN_TxDone@timeOnAir
  9645  00459A  C0D5  F0B1         	movff	RADIO_TxDone@timeOnAir+1,LORAWAN_TxDone@timeOnAir+1
  9646  00459E  EF5E  F004         	goto	_LORAWAN_TxDone	;wreg free
  9647  0045A2                     __end_of_RADIO_TxDone:
  9648                           	opt stack 0
  9649                           tosu	equ	0xFFF
  9650                           tosh	equ	0xFFE
  9651                           tosl	equ	0xFFD
  9652                           pclath	equ	0xFFA
  9653                           tblptru	equ	0xFF8
  9654                           tblptrh	equ	0xFF7
  9655                           tblptrl	equ	0xFF6
  9656                           tablat	equ	0xFF5
  9657                           prodh	equ	0xFF4
  9658                           prodl	equ	0xFF3
  9659                           intcon	equ	0xFF2
  9660                           indf0	equ	0xFEF
  9661                           postinc0	equ	0xFEE
  9662                           plusw0	equ	0xFEB
  9663                           fsr0h	equ	0xFEA
  9664                           fsr0l	equ	0xFE9
  9665                           wreg	equ	0xFE8
  9666                           postinc1	equ	0xFE6
  9667                           postdec1	equ	0xFE5
  9668                           plusw1	equ	0xFE3
  9669                           fsr1h	equ	0xFE2
  9670                           fsr1l	equ	0xFE1
  9671                           indf2	equ	0xFDF
  9672                           postinc2	equ	0xFDE
  9673                           postdec2	equ	0xFDD
  9674                           plusw2	equ	0xFDB
  9675                           fsr2h	equ	0xFDA
  9676                           fsr2l	equ	0xFD9
  9677                           status	equ	0xFD8
  9678                           
  9679 ;; *************** function _RADIO_RxDone *****************
  9680 ;; Defined at:
  9681 ;;		line 961 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9682 ;; Parameters:    Size  Location     Type
  9683 ;;		None
  9684 ;; Auto vars:     Size  Location     Type
  9685 ;;  i               1  154[BANK0 ] unsigned char 
  9686 ;;  irqFlags        1  153[BANK0 ] unsigned char 
  9687 ;; Return value:  Size  Location     Type
  9688 ;;                  1    wreg      void 
  9689 ;; Registers used:
  9690 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+8, btemp+9, btemp+10, btemp+11, to
      +sl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9691 ;; Tracked objects:
  9692 ;;		On entry : 3F/1
  9693 ;;		On exit  : 3C/0
  9694 ;;		Unchanged: 0/0
  9695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9696 ;;      Params:         0       0       0       0       0       0       0       0       0
  9697 ;;      Locals:         0       2       0       0       0       0       0       0       0
  9698 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9699 ;;      Totals:         0       2       0       0       0       0       0       0       0
  9700 ;;Total ram usage:        2 bytes
  9701 ;; Hardware stack levels used:    1
  9702 ;; Hardware stack levels required when called:   16
  9703 ;; This function calls:
  9704 ;;		_HALSPICSAssert
  9705 ;;		_HALSPICSDeassert
  9706 ;;		_HALSPISend
  9707 ;;		_LORAWAN_RxDone
  9708 ;;		_RADIO_RegisterRead
  9709 ;;		_RADIO_RegisterWrite
  9710 ;;		_RADIO_WriteMode
  9711 ;;		_SwTimerStop
  9712 ;;		___abdiv
  9713 ;; This function is called by:
  9714 ;;		_RADIO_DIO0
  9715 ;; This function uses a non-reentrant model
  9716 ;;
  9717                           
  9718                           	psect	text52
  9719  003DAE                     __ptext52:
  9720                           	opt stack 0
  9721  003DAE                     _RADIO_RxDone:
  9722                           	opt stack 12
  9723                           
  9724                           ; BSR set to: 1
  9725                           ;radio_driver_SX1276.c: 963: uint8_t i, irqFlags;
  9726                           ;radio_driver_SX1276.c: 964: irqFlags = RADIO_RegisterRead(0x12);
  9727                           
  9728                           ;incstack = 0
  9729  003DAE  0E12               	movlw	18
  9730  003DB0  EC64  F02E         	call	_RADIO_RegisterRead
  9731  003DB4  6FF9               	movwf	RADIO_RxDone@irqFlags& (0+255),b
  9732                           
  9733                           ;radio_driver_SX1276.c: 967: RADIO_RegisterWrite(0x12, (1<<(6)) | (1<<(5)) | (1<<(4)));
  9734  003DB6  0E70               	movlw	112
  9735  003DB8  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
  9736  003DBA  0E12               	movlw	18
  9737  003DBC  EC2E  F02F         	call	_RADIO_RegisterWrite
  9738                           
  9739                           ;radio_driver_SX1276.c: 968: if (((1<<(6)) | (1<<(4))) == (irqFlags & ((1<<(6)) | (1<<(4
      +                          )))))
  9740  003DC0  0100               	movlb	0	; () banked
  9741  003DC2  51F9               	movf	RADIO_RxDone@irqFlags& (0+255),w,b
  9742  003DC4  0B50               	andlw	80
  9743  003DC6  0A50               	xorlw	80
  9744  003DC8  A4D8               	btfss	status,2,c
  9745  003DCA  0012               	return	
  9746                           
  9747                           ; BSR set to: 0
  9748                           ;radio_driver_SX1276.c: 969: {
  9749                           ;radio_driver_SX1276.c: 971: SwTimerStop(RadioConfiguration.watchdogTimerId);
  9750  003DCC  0101               	movlb	1	; () banked
  9751  003DCE  51A8               	movf	(_RadioConfiguration+41)& (0+255),w,b
  9752  003DD0  EC65  F030         	call	_SwTimerStop
  9753                           
  9754                           ; BSR set to: 0
  9755                           ;radio_driver_SX1276.c: 974: i = RADIO_RegisterRead(0x1C);
  9756  003DD4  0E1C               	movlw	28
  9757  003DD6  EC64  F02E         	call	_RADIO_RegisterRead
  9758  003DDA  6FFA               	movwf	RADIO_RxDone@i& (0+255),b
  9759                           
  9760                           ; BSR set to: 0
  9761                           ;radio_driver_SX1276.c: 975: if ((0 == RadioConfiguration.crcOn) || ((0 == (irqFlags & (
      +                          1<<(5)))) && (0 != (i & (1<<(6))))))
  9762  003DDC  0101               	movlb	1	; () banked
  9763  003DDE  519B               	movf	(_RadioConfiguration+28)& (0+255),w,b
  9764  003DE0  E004               	bz	l15028
  9765                           
  9766                           ; BSR set to: 1
  9767  003DE2  0100               	movlb	0	; () banked
  9768  003DE4  ABF9               	btfss	RADIO_RxDone@irqFlags& (0+255),5,b
  9769                           
  9770                           ; BSR set to: 0
  9771  003DE6  ADFA               	btfss	RADIO_RxDone@i& (0+255),6,b
  9772  003DE8  D031               	goto	l15050
  9773  003DEA                     l15028:
  9774                           
  9775                           ;radio_driver_SX1276.c: 976: {
  9776                           ;radio_driver_SX1276.c: 984: RadioConfiguration.dataBufferLen = RADIO_RegisterRead(0x13)
      +                          ;
  9777  003DEA  0E13               	movlw	19
  9778  003DEC  EC64  F02E         	call	_RADIO_RegisterRead
  9779  003DF0  0101               	movlb	1	; () banked
  9780  003DF2  6FA3               	movwf	(_RadioConfiguration+36)& (0+255),b
  9781                           
  9782                           ;radio_driver_SX1276.c: 985: RADIO_RegisterWrite(0x0D, 0x00);
  9783  003DF4  ECCF  F008         	call	PL456	;call to abstracted procedure
  9784  003DF8  EC2E  F02F         	call	_RADIO_RegisterWrite
  9785                           
  9786                           ;radio_driver_SX1276.c: 987: HALSPICSAssert();
  9787  003DFC  EC21  F031         	call	_HALSPICSAssert	;wreg free
  9788                           
  9789                           ;radio_driver_SX1276.c: 988: HALSPISend(0x00);
  9790  003E00  0E00               	movlw	0
  9791  003E02  ECD9  F030         	call	_HALSPISend
  9792                           
  9793                           ; BSR set to: 14
  9794                           ;radio_driver_SX1276.c: 989: for (i = 0; i < RadioConfiguration.dataBufferLen; i++)
  9795  003E06  0100               	movlb	0	; () banked
  9796  003E08  6BFA               	clrf	RADIO_RxDone@i& (0+255),b
  9797  003E0A  D008               	goto	l15040
  9798  003E0C                     l15036:
  9799                           
  9800                           ; BSR set to: 0
  9801                           ;radio_driver_SX1276.c: 990: {
  9802                           ;radio_driver_SX1276.c: 991: RadioConfiguration.dataBuffer[i] = HALSPISend(0xFF);
  9803  003E0C  51FA               	movf	RADIO_RxDone@i& (0+255),w,b
  9804  003E0E  EC12  F023         	call	PL248	;call to abstracted procedure
  9805  003E12  ECD9  F030         	call	_HALSPISend
  9806  003E16  6EDF               	movwf	indf2,c
  9807                           
  9808                           ; BSR set to: 14
  9809  003E18  0100               	movlb	0	; () banked
  9810  003E1A  2BFA               	incf	RADIO_RxDone@i& (0+255),f,b
  9811  003E1C                     l15040:
  9812                           
  9813                           ; BSR set to: 0
  9814  003E1C  0101               	movlb	1	; () banked
  9815  003E1E  51A3               	movf	(_RadioConfiguration+36)& (0+255),w,b
  9816  003E20  0100               	movlb	0	; () banked
  9817  003E22  5DFA               	subwf	RADIO_RxDone@i& (0+255),w,b
  9818  003E24  E3F3               	bnc	l15036
  9819                           
  9820                           ; BSR set to: 0
  9821                           ;radio_driver_SX1276.c: 992: }
  9822                           ;radio_driver_SX1276.c: 993: HALSPICSDeassert();
  9823  003E26  EC1F  F031         	call	_HALSPICSDeassert	;wreg free
  9824                           
  9825                           ;radio_driver_SX1276.c: 994: RadioConfiguration.flags |= (1 << (2));
  9826  003E2A  0101               	movlb	1	; () banked
  9827  003E2C  85A2               	bsf	(_RadioConfiguration+35)& (0+255),2,b
  9828                           
  9829                           ; BSR set to: 1
  9830                           ;radio_driver_SX1276.c: 996: RadioConfiguration.packetSNR = RADIO_RegisterRead(0x19);
  9831  003E2E  0E19               	movlw	25
  9832  003E30  EC64  F02E         	call	_RADIO_RegisterRead
  9833  003E34  0101               	movlb	1	; () banked
  9834  003E36  6FB1               	movwf	(_RadioConfiguration+50)& (0+255),b
  9835                           
  9836                           ; BSR set to: 1
  9837                           ;radio_driver_SX1276.c: 997: RadioConfiguration.packetSNR /= (int8_t)4;
  9838  003E38  0E04               	movlw	4
  9839  003E3A  0100               	movlb	0	; () banked
  9840  003E3C  6F60               	movwf	___abdiv@divisor& (0+255),b
  9841  003E3E  0101               	movlb	1	; () banked
  9842  003E40  51B1               	movf	(_RadioConfiguration+50)& (0+255),w,b
  9843  003E42  ECE9  F028         	call	___abdiv
  9844  003E46  0101               	movlb	1	; () banked
  9845  003E48  6FB1               	movwf	(_RadioConfiguration+50)& (0+255),b
  9846                           
  9847                           ;radio_driver_SX1276.c: 998: }
  9848  003E4A  D002               	goto	l15052
  9849  003E4C                     l15050:
  9850                           
  9851                           ; BSR set to: 0
  9852                           ;radio_driver_SX1276.c: 999: else
  9853                           ;radio_driver_SX1276.c: 1000: {
  9854                           ;radio_driver_SX1276.c: 1002: RadioConfiguration.flags |= (1 << (3));
  9855  003E4C  0101               	movlb	1	; () banked
  9856  003E4E  87A2               	bsf	(_RadioConfiguration+35)& (0+255),3,b
  9857  003E50                     l15052:
  9858                           
  9859                           ; BSR set to: 1
  9860                           ;radio_driver_SX1276.c: 1003: }
  9861                           ;radio_driver_SX1276.c: 1004: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  9862  003E50  EC66  F02D         	call	PL78	;call to abstracted procedure
  9863  003E54  ECDB  F01A         	call	_RADIO_WriteMode
  9864                           
  9865                           ;radio_driver_SX1276.c: 1005: RadioConfiguration.flags &= ~(1 << (1));
  9866  003E58  0101               	movlb	1	; () banked
  9867  003E5A  93A2               	bcf	(_RadioConfiguration+35)& (0+255),1,b
  9868                           
  9869                           ; BSR set to: 1
  9870                           ;radio_driver_SX1276.c: 1006: LORAWAN_RxDone(RadioConfiguration.dataBuffer, RadioConfigu
      +                          ration.dataBufferLen);
  9871  003E5C  EC19  F023         	call	PL308	;call to abstracted procedure
  9872  003E60  EF4B  F000         	goto	_LORAWAN_RxDone	;wreg free
  9873  003E64                     __end_of_RADIO_RxDone:
  9874                           	opt stack 0
  9875                           tosu	equ	0xFFF
  9876                           tosh	equ	0xFFE
  9877                           tosl	equ	0xFFD
  9878                           pclath	equ	0xFFA
  9879                           tblptru	equ	0xFF8
  9880                           tblptrh	equ	0xFF7
  9881                           tblptrl	equ	0xFF6
  9882                           tablat	equ	0xFF5
  9883                           prodh	equ	0xFF4
  9884                           prodl	equ	0xFF3
  9885                           intcon	equ	0xFF2
  9886                           indf0	equ	0xFEF
  9887                           postinc0	equ	0xFEE
  9888                           plusw0	equ	0xFEB
  9889                           fsr0h	equ	0xFEA
  9890                           fsr0l	equ	0xFE9
  9891                           wreg	equ	0xFE8
  9892                           postinc1	equ	0xFE6
  9893                           postdec1	equ	0xFE5
  9894                           plusw1	equ	0xFE3
  9895                           fsr1h	equ	0xFE2
  9896                           fsr1l	equ	0xFE1
  9897                           indf2	equ	0xFDF
  9898                           postinc2	equ	0xFDE
  9899                           postdec2	equ	0xFDD
  9900                           plusw2	equ	0xFDB
  9901                           fsr2h	equ	0xFDA
  9902                           fsr2l	equ	0xFD9
  9903                           status	equ	0xFD8
  9904                           
  9905 ;; *************** function ___abdiv *****************
  9906 ;; Defined at:
  9907 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\abdiv.c"
  9908 ;; Parameters:    Size  Location     Type
  9909 ;;  dividend        1    wreg     char 
  9910 ;;  divisor         1    0[BANK0 ] char 
  9911 ;; Auto vars:     Size  Location     Type
  9912 ;;  dividend        1    4[BANK0 ] char 
  9913 ;;  quotient        1    3[BANK0 ] char 
  9914 ;;  sign            1    2[BANK0 ] unsigned char 
  9915 ;;  counter         1    1[BANK0 ] unsigned char 
  9916 ;; Return value:  Size  Location     Type
  9917 ;;                  1    wreg      char 
  9918 ;; Registers used:
  9919 ;;		wreg, status,2, status,0
  9920 ;; Tracked objects:
  9921 ;;		On entry : 3F/1
  9922 ;;		On exit  : 3F/0
  9923 ;;		Unchanged: 0/0
  9924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9925 ;;      Params:         0       1       0       0       0       0       0       0       0
  9926 ;;      Locals:         0       4       0       0       0       0       0       0       0
  9927 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9928 ;;      Totals:         0       5       0       0       0       0       0       0       0
  9929 ;;Total ram usage:        5 bytes
  9930 ;; Hardware stack levels used:    1
  9931 ;; Hardware stack levels required when called:    7
  9932 ;; This function calls:
  9933 ;;		Nothing
  9934 ;; This function is called by:
  9935 ;;		_RADIO_RxDone
  9936 ;; This function uses a non-reentrant model
  9937 ;;
  9938                           
  9939                           	psect	text53
  9940  0051D2                     __ptext53:
  9941                           	opt stack 0
  9942  0051D2                     ___abdiv:
  9943                           	opt stack 20
  9944                           
  9945                           ;incstack = 0
  9946                           ;___abdiv@dividend stored from wreg
  9947  0051D2  0100               	movlb	0	; () banked
  9948  0051D4  6F64               	movwf	___abdiv@dividend& (0+255),b
  9949  0051D6  6B62               	clrf	___abdiv@sign& (0+255),b
  9950                           
  9951                           ; BSR set to: 0
  9952  0051D8  AF60               	btfss	___abdiv@divisor& (0+255),7,b
  9953  0051DA  D003               	goto	l14696
  9954                           
  9955                           ; BSR set to: 0
  9956  0051DC  6D60               	negf	___abdiv@divisor& (0+255),b
  9957                           
  9958                           ; BSR set to: 0
  9959  0051DE  0E01               	movlw	1
  9960  0051E0  6F62               	movwf	___abdiv@sign& (0+255),b
  9961  0051E2                     l14696:
  9962                           
  9963                           ; BSR set to: 0
  9964  0051E2  AF64               	btfss	___abdiv@dividend& (0+255),7,b
  9965  0051E4  D003               	goto	l14702
  9966                           
  9967                           ; BSR set to: 0
  9968  0051E6  6D64               	negf	___abdiv@dividend& (0+255),b
  9969                           
  9970                           ; BSR set to: 0
  9971  0051E8  0E01               	movlw	1
  9972  0051EA  1B62               	xorwf	___abdiv@sign& (0+255),f,b
  9973  0051EC                     l14702:
  9974                           
  9975                           ; BSR set to: 0
  9976  0051EC  6B63               	clrf	___abdiv@quotient& (0+255),b
  9977                           
  9978                           ; BSR set to: 0
  9979  0051EE  5160               	movf	___abdiv@divisor& (0+255),w,b
  9980  0051F0  E014               	bz	l14724
  9981                           
  9982                           ; BSR set to: 0
  9983  0051F2  0E01               	movlw	1
  9984  0051F4  6F61               	movwf	___abdiv@counter& (0+255),b
  9985  0051F6  D003               	goto	l14712
  9986  0051F8                     l14708:
  9987                           
  9988                           ; BSR set to: 0
  9989  0051F8  90D8               	bcf	status,0,c
  9990  0051FA  3760               	rlcf	___abdiv@divisor& (0+255),f,b
  9991                           
  9992                           ; BSR set to: 0
  9993  0051FC  2B61               	incf	___abdiv@counter& (0+255),f,b
  9994  0051FE                     l14712:
  9995                           
  9996                           ; BSR set to: 0
  9997  0051FE  AF60               	btfss	___abdiv@divisor& (0+255),7,b
  9998  005200  D7FB               	goto	l14708
  9999  005202                     l14714:
 10000                           
 10001                           ; BSR set to: 0
 10002  005202  90D8               	bcf	status,0,c
 10003  005204  3763               	rlcf	___abdiv@quotient& (0+255),f,b
 10004  005206  5160               	movf	___abdiv@divisor& (0+255),w,b
 10005  005208  5D64               	subwf	___abdiv@dividend& (0+255),w,b
 10006  00520A  E303               	bnc	l14720
 10007                           
 10008                           ; BSR set to: 0
 10009  00520C  5160               	movf	___abdiv@divisor& (0+255),w,b
 10010  00520E  5F64               	subwf	___abdiv@dividend& (0+255),f,b
 10011                           
 10012                           ; BSR set to: 0
 10013  005210  8163               	bsf	___abdiv@quotient& (0+255),0,b
 10014  005212                     l14720:
 10015                           
 10016                           ; BSR set to: 0
 10017  005212  90D8               	bcf	status,0,c
 10018  005214  3360               	rrcf	___abdiv@divisor& (0+255),f,b
 10019                           
 10020                           ; BSR set to: 0
 10021  005216  2F61               	decfsz	___abdiv@counter& (0+255),f,b
 10022  005218  D7F4               	goto	l14714
 10023  00521A                     l14724:
 10024                           
 10025                           ; BSR set to: 0
 10026  00521A  5162               	movf	___abdiv@sign& (0+255),w,b
 10027  00521C  E001               	bz	l14728
 10028                           
 10029                           ; BSR set to: 0
 10030  00521E  6D63               	negf	___abdiv@quotient& (0+255),b
 10031  005220                     l14728:
 10032                           
 10033                           ; BSR set to: 0
 10034  005220  5163               	movf	___abdiv@quotient& (0+255),w,b
 10035                           
 10036                           ; BSR set to: 0
 10037  005222  0012               	return		;funcret
 10038  005224                     __end_of___abdiv:
 10039                           	opt stack 0
 10040                           tosu	equ	0xFFF
 10041                           tosh	equ	0xFFE
 10042                           tosl	equ	0xFFD
 10043                           pclath	equ	0xFFA
 10044                           tblptru	equ	0xFF8
 10045                           tblptrh	equ	0xFF7
 10046                           tblptrl	equ	0xFF6
 10047                           tablat	equ	0xFF5
 10048                           prodh	equ	0xFF4
 10049                           prodl	equ	0xFF3
 10050                           intcon	equ	0xFF2
 10051                           indf0	equ	0xFEF
 10052                           postinc0	equ	0xFEE
 10053                           plusw0	equ	0xFEB
 10054                           fsr0h	equ	0xFEA
 10055                           fsr0l	equ	0xFE9
 10056                           wreg	equ	0xFE8
 10057                           postinc1	equ	0xFE6
 10058                           postdec1	equ	0xFE5
 10059                           plusw1	equ	0xFE3
 10060                           fsr1h	equ	0xFE2
 10061                           fsr1l	equ	0xFE1
 10062                           indf2	equ	0xFDF
 10063                           postinc2	equ	0xFDE
 10064                           postdec2	equ	0xFDD
 10065                           plusw2	equ	0xFDB
 10066                           fsr2h	equ	0xFDA
 10067                           fsr2l	equ	0xFD9
 10068                           status	equ	0xFD8
 10069                           
 10070 ;; *************** function _RADIO_FSKPayloadReady *****************
 10071 ;; Defined at:
 10072 ;;		line 1010 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 10073 ;; Parameters:    Size  Location     Type
 10074 ;;		None
 10075 ;; Auto vars:     Size  Location     Type
 10076 ;;  i               1  154[BANK0 ] unsigned char 
 10077 ;;  irqFlags        1  153[BANK0 ] unsigned char 
 10078 ;; Return value:  Size  Location     Type
 10079 ;;                  1    wreg      void 
 10080 ;; Registers used:
 10081 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+8, btemp+9, btem
      +p+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10082 ;; Tracked objects:
 10083 ;;		On entry : 3F/1
 10084 ;;		On exit  : 3C/0
 10085 ;;		Unchanged: 0/0
 10086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10087 ;;      Params:         0       0       0       0       0       0       0       0       0
 10088 ;;      Locals:         0       2       0       0       0       0       0       0       0
 10089 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10090 ;;      Totals:         0       2       0       0       0       0       0       0       0
 10091 ;;Total ram usage:        2 bytes
 10092 ;; Hardware stack levels used:    1
 10093 ;; Hardware stack levels required when called:   16
 10094 ;; This function calls:
 10095 ;;		_HALSPICSAssert
 10096 ;;		_HALSPICSDeassert
 10097 ;;		_HALSPISend
 10098 ;;		_LORAWAN_RxDone
 10099 ;;		_LORAWAN_RxTimeout
 10100 ;;		_RADIO_RegisterRead
 10101 ;;		_RADIO_WriteMode
 10102 ;;		_SwTimerStop
 10103 ;; This function is called by:
 10104 ;;		_RADIO_DIO0
 10105 ;; This function uses a non-reentrant model
 10106 ;;
 10107                           
 10108                           	psect	text54
 10109  0045A2                     __ptext54:
 10110                           	opt stack 0
 10111  0045A2                     _RADIO_FSKPayloadReady:
 10112                           	opt stack 12
 10113                           
 10114                           ; BSR set to: 1
 10115                           ;radio_driver_SX1276.c: 1012: uint8_t irqFlags;
 10116                           ;radio_driver_SX1276.c: 1013: uint8_t i;
 10117                           ;radio_driver_SX1276.c: 1015: irqFlags = RADIO_RegisterRead(0x3F);
 10118                           
 10119                           ; BSR set to: 0
 10120                           ;incstack = 0
 10121  0045A2  0E3F               	movlw	63
 10122  0045A4  EC64  F02E         	call	_RADIO_RegisterRead
 10123  0045A8  6FF9               	movwf	RADIO_FSKPayloadReady@irqFlags& (0+255),b
 10124                           
 10125                           ; BSR set to: 0
 10126                           ;radio_driver_SX1276.c: 1016: if ((1<<(2)) == (irqFlags & (1<<(2))))
 10127  0045AA  A5F9               	btfss	RADIO_FSKPayloadReady@irqFlags& (0+255),2,b
 10128  0045AC  0012               	return	
 10129                           
 10130                           ; BSR set to: 0
 10131                           ;radio_driver_SX1276.c: 1017: {
 10132                           ;radio_driver_SX1276.c: 1022: SwTimerStop(RadioConfiguration.watchdogTimerId);
 10133  0045AE  0101               	movlb	1	; () banked
 10134  0045B0  51A8               	movf	(_RadioConfiguration+41)& (0+255),w,b
 10135  0045B2  EC65  F030         	call	_SwTimerStop
 10136                           
 10137                           ;radio_driver_SX1276.c: 1023: SwTimerStop(RadioConfiguration.fskRxWindowTimerId);
 10138  0045B6  0101               	movlb	1	; () banked
 10139  0045B8  51A7               	movf	(_RadioConfiguration+40)& (0+255),w,b
 10140  0045BA  EC65  F030         	call	_SwTimerStop
 10141                           
 10142                           ; BSR set to: 0
 10143                           ;radio_driver_SX1276.c: 1025: HALSPICSAssert();
 10144  0045BE  EC21  F031         	call	_HALSPICSAssert	;wreg free
 10145                           
 10146                           ;radio_driver_SX1276.c: 1026: HALSPISend(0x00);
 10147  0045C2  0E00               	movlw	0
 10148  0045C4  ECD9  F030         	call	_HALSPISend
 10149                           
 10150                           ; BSR set to: 14
 10151                           ;radio_driver_SX1276.c: 1027: RadioConfiguration.dataBufferLen = HALSPISend(0xFF);
 10152  0045C8  0EFF               	movlw	255
 10153  0045CA  ECD9  F030         	call	_HALSPISend
 10154  0045CE  0101               	movlb	1	; () banked
 10155  0045D0  6FA3               	movwf	(_RadioConfiguration+36)& (0+255),b
 10156                           
 10157                           ; BSR set to: 1
 10158                           ;radio_driver_SX1276.c: 1028: for (i = 0; i < RadioConfiguration.dataBufferLen; i++)
 10159  0045D2  0100               	movlb	0	; () banked
 10160  0045D4  6BFA               	clrf	RADIO_FSKPayloadReady@i& (0+255),b
 10161  0045D6  D007               	goto	l15076
 10162  0045D8                     l15072:
 10163                           
 10164                           ; BSR set to: 0
 10165                           ;radio_driver_SX1276.c: 1029: {
 10166                           ;radio_driver_SX1276.c: 1030: RadioConfiguration.dataBuffer[i] = HALSPISend(0xFF);
 10167  0045D8  51FA               	movf	RADIO_FSKPayloadReady@i& (0+255),w,b
 10168  0045DA  D824               	call	PL248	;call to abstracted procedure
 10169  0045DC  ECD9  F030         	call	_HALSPISend
 10170  0045E0  6EDF               	movwf	indf2,c
 10171                           
 10172                           ; BSR set to: 14
 10173  0045E2  0100               	movlb	0	; () banked
 10174  0045E4  2BFA               	incf	RADIO_FSKPayloadReady@i& (0+255),f,b
 10175  0045E6                     l15076:
 10176                           
 10177                           ; BSR set to: 0
 10178  0045E6  0101               	movlb	1	; () banked
 10179  0045E8  51A3               	movf	(_RadioConfiguration+36)& (0+255),w,b
 10180  0045EA  0100               	movlb	0	; () banked
 10181  0045EC  5DFA               	subwf	RADIO_FSKPayloadReady@i& (0+255),w,b
 10182  0045EE  E3F4               	bnc	l15072
 10183                           
 10184                           ; BSR set to: 0
 10185                           ;radio_driver_SX1276.c: 1031: }
 10186                           ;radio_driver_SX1276.c: 1032: HALSPICSDeassert();
 10187  0045F0  EC1F  F031         	call	_HALSPICSDeassert	;wreg free
 10188                           
 10189                           ;radio_driver_SX1276.c: 1034: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
 10190  0045F4  EC66  F02D         	call	PL78	;call to abstracted procedure
 10191  0045F8  ECDB  F01A         	call	_RADIO_WriteMode
 10192                           
 10193                           ;radio_driver_SX1276.c: 1035: RadioConfiguration.flags &= ~(1 << (1));
 10194  0045FC  0101               	movlb	1	; () banked
 10195  0045FE  93A2               	bcf	(_RadioConfiguration+35)& (0+255),1,b
 10196                           
 10197                           ; BSR set to: 1
 10198                           ;radio_driver_SX1276.c: 1037: RadioConfiguration.packetSNR = -128;
 10199  004600  0E80               	movlw	128
 10200  004602  6FB1               	movwf	(_RadioConfiguration+50)& (0+255),b
 10201                           
 10202                           ; BSR set to: 1
 10203                           ;radio_driver_SX1276.c: 1039: if (1 == RadioConfiguration.crcOn)
 10204  004604  059B               	decf	(_RadioConfiguration+28)& (0+255),w,b
 10205  004606  E103               	bnz	l15090
 10206                           
 10207                           ; BSR set to: 1
 10208                           ;radio_driver_SX1276.c: 1040: {
 10209                           ;radio_driver_SX1276.c: 1041: if ((1<<(1)) == (irqFlags & (1<<(1))))
 10210  004608  0100               	movlb	0	; () banked
 10211  00460A  A3F9               	btfss	RADIO_FSKPayloadReady@irqFlags& (0+255),1,b
 10212  00460C  D003               	goto	l15092
 10213  00460E                     l15090:
 10214                           
 10215                           ;radio_driver_SX1276.c: 1042: {
 10216                           ;radio_driver_SX1276.c: 1043: RadioConfiguration.flags |= (1 << (2));
 10217  00460E  0101               	movlb	1	; () banked
 10218  004610  85A2               	bsf	(_RadioConfiguration+35)& (0+255),2,b
 10219                           
 10220                           ;radio_driver_SX1276.c: 1044: }
 10221  004612  D002               	goto	l15096
 10222  004614                     l15092:
 10223                           
 10224                           ; BSR set to: 0
 10225                           ;radio_driver_SX1276.c: 1045: else
 10226                           ;radio_driver_SX1276.c: 1046: {
 10227                           ;radio_driver_SX1276.c: 1047: RadioConfiguration.flags &= ~(1 << (2));
 10228  004614  0101               	movlb	1	; () banked
 10229  004616  95A2               	bcf	(_RadioConfiguration+35)& (0+255),2,b
 10230  004618                     l15096:
 10231                           
 10232                           ; BSR set to: 1
 10233                           ;radio_driver_SX1276.c: 1053: }
 10234                           ;radio_driver_SX1276.c: 1055: if ((RadioConfiguration.flags & (1 << (2))) != 0)
 10235  004618  A5A2               	btfss	(_RadioConfiguration+35)& (0+255),2,b
 10236  00461A  EF90  F00B         	goto	_LORAWAN_RxTimeout
 10237                           
 10238                           ; BSR set to: 1
 10239                           ;radio_driver_SX1276.c: 1056: {
 10240                           ;radio_driver_SX1276.c: 1057: LORAWAN_RxDone(RadioConfiguration.dataBuffer, RadioConfigu
      +                          ration.dataBufferLen);
 10241  00461E  D809               	call	PL308	;call to abstracted procedure
 10242  004620  EF4B  F000         	goto	_LORAWAN_RxDone	;wreg free
 10243  004624                     __end_of_RADIO_FSKPayloadReady:
 10244                           	opt stack 0
 10245  004624                     PL248:
 10246                           	opt stack 12
 10247  004624  0101               	movlb	1	; () banked
 10248  004626  25A4               	addwf	(_RadioConfiguration+37)& (0+255),w,b
 10249  004628  6ED9               	movwf	fsr2l,c
 10250  00462A  0E00               	movlw	0
 10251  00462C  21A5               	addwfc	(_RadioConfiguration+38)& (0+255),w,b
 10252  00462E  6EDA               	movwf	fsr2h,c
 10253  004630  0CFF               	retlw	255
 10254  004632                     __end_ofPL248:
 10255                           	opt stack 0
 10256  004632                     PL308:
 10257                           	opt stack 12
 10258  004632  C1A4  F16F         	movff	_RadioConfiguration+37,LORAWAN_RxDone@buffer
 10259  004636  C1A5  F170         	movff	_RadioConfiguration+38,LORAWAN_RxDone@buffer+1
 10260  00463A  C1A3  F171         	movff	_RadioConfiguration+36,LORAWAN_RxDone@bufferLength
 10261  00463E  0012               	return	
 10262  004640                     __end_ofPL308:
 10263                           	opt stack 0
 10264                           tosu	equ	0xFFF
 10265                           tosh	equ	0xFFE
 10266                           tosl	equ	0xFFD
 10267                           pclath	equ	0xFFA
 10268                           tblptru	equ	0xFF8
 10269                           tblptrh	equ	0xFF7
 10270                           tblptrl	equ	0xFF6
 10271                           tablat	equ	0xFF5
 10272                           prodh	equ	0xFF4
 10273                           prodl	equ	0xFF3
 10274                           intcon	equ	0xFF2
 10275                           indf0	equ	0xFEF
 10276                           postinc0	equ	0xFEE
 10277                           plusw0	equ	0xFEB
 10278                           fsr0h	equ	0xFEA
 10279                           fsr0l	equ	0xFE9
 10280                           wreg	equ	0xFE8
 10281                           postinc1	equ	0xFE6
 10282                           postdec1	equ	0xFE5
 10283                           plusw1	equ	0xFE3
 10284                           fsr1h	equ	0xFE2
 10285                           fsr1l	equ	0xFE1
 10286                           indf2	equ	0xFDF
 10287                           postinc2	equ	0xFDE
 10288                           postdec2	equ	0xFDD
 10289                           plusw2	equ	0xFDB
 10290                           fsr2h	equ	0xFDA
 10291                           fsr2l	equ	0xFD9
 10292                           status	equ	0xFD8
 10293                           
 10294 ;; *************** function _LORAWAN_RxTimeout *****************
 10295 ;; Defined at:
 10296 ;;		line 464 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 10297 ;; Parameters:    Size  Location     Type
 10298 ;;		None
 10299 ;; Auto vars:     Size  Location     Type
 10300 ;;  minim           4   91[BANK0 ] unsigned long 
 10301 ;;  i               1   95[BANK0 ] unsigned char 
 10302 ;; Return value:  Size  Location     Type
 10303 ;;                  1    wreg      void 
 10304 ;; Registers used:
 10305 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tb
      +lptru, prodl, prodh, cstack
 10306 ;; Tracked objects:
 10307 ;;		On entry : 3F/1
 10308 ;;		On exit  : 3C/0
 10309 ;;		Unchanged: 0/0
 10310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10311 ;;      Params:         0       0       0       0       0       0       0       0       0
 10312 ;;      Locals:         0       5       0       0       0       0       0       0       0
 10313 ;;      Temps:          0       4       0       0       0       0       0       0       0
 10314 ;;      Totals:         0       9       0       0       0       0       0       0       0
 10315 ;;Total ram usage:        9 bytes
 10316 ;; Hardware stack levels used:    1
 10317 ;; Hardware stack levels required when called:   15
 10318 ;; This function calls:
 10319 ;;		_LORAWAN_ReceiveWindow2Callback
 10320 ;;		_RADIO_Transmit
 10321 ;;		_ResetParametersForConfirmedTransmission
 10322 ;;		_ResetParametersForUnconfirmedTransmission
 10323 ;;		_RxDataDone
 10324 ;;		_SelectChannelForTransmission
 10325 ;;		_SetJoinFailState
 10326 ;;		_SwTimerSetTimeout
 10327 ;;		_SwTimerStart
 10328 ;;		___lldiv
 10329 ;; This function is called by:
 10330 ;;		_RADIO_FSKPayloadReady
 10331 ;;		_RADIO_RxTimeout
 10332 ;;		_RADIO_RxFSKTimeout
 10333 ;;		_RADIO_WatchdogTimeout
 10334 ;; This function uses a non-reentrant model
 10335 ;;
 10336                           
 10337                           	psect	text55
 10338  001720                     __ptext55:
 10339                           	opt stack 0
 10340  001720                     _LORAWAN_RxTimeout:
 10341                           	opt stack 12
 10342                           
 10343                           ; BSR set to: 1
 10344                           ;lorawan_eu.c: 466: uint8_t i;
 10345                           ;lorawan_eu.c: 467: uint32_t minim = (4294967295UL);
 10346                           
 10347                           ;incstack = 0
 10348  001720  0100               	movlb	0	; () banked
 10349  001722  69BB               	setf	LORAWAN_RxTimeout@minim& (0+255),b
 10350  001724  69BC               	setf	(LORAWAN_RxTimeout@minim+1)& (0+255),b
 10351  001726  69BD               	setf	(LORAWAN_RxTimeout@minim+2)& (0+255),b
 10352  001728  69BE               	setf	(LORAWAN_RxTimeout@minim+3)& (0+255),b
 10353                           
 10354                           ;lorawan_eu.c: 469: if (loRa.macStatus.macPause == 0)
 10355  00172A  0102               	movlb	2	; () banked
 10356  00172C  B103               	btfsc	(_loRa+3)& (0+255),0,b
 10357  00172E  D0ED               	goto	l14674
 10358                           
 10359                           ; BSR set to: 2
 10360                           ;lorawan_eu.c: 470: {
 10361                           ;lorawan_eu.c: 472: if ( loRa.macStatus.macState == RX1_OPEN )
 10362  001730  5102               	movf	(_loRa+2)& (0+255),w,b
 10363  001732  0B0F               	andlw	15
 10364  001734  0A03               	xorlw	3
 10365  001736  E10E               	bnz	l1688
 10366                           
 10367                           ; BSR set to: 2
 10368                           ;lorawan_eu.c: 473: {
 10369                           ;lorawan_eu.c: 474: if (CLASS_A == loRa.deviceClass)
 10370  001738  5112               	movf	(_loRa+18)& (0+255),w,b
 10371  00173A  E105               	bnz	l14610
 10372                           
 10373                           ; BSR set to: 2
 10374                           ;lorawan_eu.c: 475: {
 10375                           ;lorawan_eu.c: 476: loRa.macStatus.macState = BETWEEN_RX1_RX2;
 10376  00173C  5102               	movf	(_loRa+2)& (0+255),w,b
 10377  00173E  0BF0               	andlw	-16
 10378  001740  0904               	iorlw	4
 10379  001742  6F02               	movwf	(_loRa+2)& (0+255),b
 10380                           
 10381                           ;lorawan_eu.c: 477: }
 10382  001744  0012               	return	
 10383  001746                     l14610:
 10384                           
 10385                           ; BSR set to: 2
 10386                           ;lorawan_eu.c: 478: else if (CLASS_C == loRa.deviceClass)
 10387  001746  0E02               	movlw	2
 10388  001748  1912               	xorwf	(_loRa+18)& (0+255),w,b
 10389  00174A  A4D8               	btfss	status,2,c
 10390  00174C  0012               	return	
 10391                           
 10392                           ; BSR set to: 2
 10393                           ;lorawan_eu.c: 479: {
 10394                           ;lorawan_eu.c: 480: LORAWAN_ReceiveWindow2Callback(0);
 10395  00174E  6AE6               	clrf	postinc1,c
 10396  001750  EF32  F022         	goto	_LORAWAN_ReceiveWindow2Callback	;wreg free
 10397  001754                     l1688:
 10398                           
 10399                           ; BSR set to: 2
 10400                           ;lorawan_eu.c: 483: else
 10401                           ;lorawan_eu.c: 484: {
 10402                           ;lorawan_eu.c: 486: if (loRa.lorawanMacStatus.joining == 1)
 10403  001754  B500               	btfsc	_loRa& (0+255),2,b
 10404                           
 10405                           ; BSR set to: 2
 10406                           ;lorawan_eu.c: 487: {
 10407                           ;lorawan_eu.c: 488: SetJoinFailState();
 10408  001756  EFDA  F02D         	goto	_SetJoinFailState	;wreg free
 10409                           
 10410                           ; BSR set to: 2
 10411                           ;lorawan_eu.c: 491: else if (loRa.macStatus.networkJoined == 1)
 10412                           
 10413                           ;lorawan_eu.c: 489: }
 10414  00175A  A902               	btfss	(_loRa+2)& (0+255),4,b
 10415  00175C  0012               	return	
 10416                           
 10417                           ; BSR set to: 2
 10418                           ;lorawan_eu.c: 492: {
 10419                           ;lorawan_eu.c: 493: if (loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage == 1)
 10420  00175E  A100               	btfss	_loRa& (0+255),0,b
 10421  001760  D03C               	goto	l14632
 10422                           
 10423                           ; BSR set to: 2
 10424                           ;lorawan_eu.c: 494: {
 10425                           ;lorawan_eu.c: 495: if (loRa.counterRepetitionsConfirmedUplink <= loRa.maxRepetitionsCon
      +                          firmedUplink)
 10426  001762  51D9               	movf	(_loRa+217)& (0+255),w,b
 10427  001764  5DD7               	subwf	(_loRa+215)& (0+255),w,b
 10428  001766  E325               	bnc	l14626
 10429                           
 10430                           ; BSR set to: 2
 10431                           ;lorawan_eu.c: 496: {
 10432                           ;lorawan_eu.c: 497: loRa.macStatus.macState = RETRANSMISSION_DELAY;
 10433  001768  D8E7               	call	PL268	;call to abstracted procedure
 10434                           
 10435                           ; BSR set to: 2
 10436                           ;lorawan_eu.c: 498: SwTimerSetTimeout(loRa.ackTimeoutTimerId, ( (((uint32_t)(loRa.protoc
      +                          olParameters.ackTimeout)) << (12)) / 125UL ));
 10437  00176A  51A0               	movf	(_loRa+160)& (0+255),w,b
 10438  00176C  0100               	movlb	0	; () banked
 10439  00176E  6FB7               	movwf	??_LORAWAN_RxTimeout& (0+255),b
 10440  001770  0102               	movlb	2	; () banked
 10441  001772  51A1               	movf	(_loRa+161)& (0+255),w,b
 10442  001774  0100               	movlb	0	; () banked
 10443  001776  6FB8               	movwf	(??_LORAWAN_RxTimeout+1)& (0+255),b
 10444  001778  6BB9               	clrf	(??_LORAWAN_RxTimeout+2)& (0+255),b
 10445  00177A  6BBA               	clrf	(??_LORAWAN_RxTimeout+3)& (0+255),b
 10446  00177C  0E0C               	movlw	12
 10447  00177E                     u17015:
 10448  00177E  90D8               	bcf	status,0,c
 10449  001780  D8E0               	call	PL390	;call to abstracted procedure
 10450  001782  2EE8               	decfsz	wreg,f,c
 10451  001784  D7FC               	goto	u17015
 10452  001786  C0B7  F060         	movff	??_LORAWAN_RxTimeout,___lldiv@dividend
 10453  00178A  C0B8  F061         	movff	??_LORAWAN_RxTimeout+1,___lldiv@dividend+1
 10454  00178E  C0B9  F062         	movff	??_LORAWAN_RxTimeout+2,___lldiv@dividend+2
 10455  001792  C0BA  F063         	movff	??_LORAWAN_RxTimeout+3,___lldiv@dividend+3
 10456  001796  0E7D               	movlw	125
 10457  001798  EC77  F011         	call	PL32	;call to abstracted procedure
 10458  00179C  EC1B  F025         	call	___lldiv	;wreg free
 10459  0017A0  EC73  F006         	call	PL20	;call to abstracted procedure
 10460  0017A4  51E8               	movf	(_loRa+232)& (0+255),w,b
 10461  0017A6  EC11  F02C         	call	_SwTimerSetTimeout
 10462                           
 10463                           ; BSR set to: 0
 10464                           ;lorawan_eu.c: 499: SwTimerStart(loRa.ackTimeoutTimerId);
 10465  0017AA  0102               	movlb	2	; () banked
 10466  0017AC  51E8               	movf	(_loRa+232)& (0+255),w,b
 10467  0017AE  EFC4  F025         	goto	_SwTimerStart
 10468  0017B2                     l14626:
 10469                           
 10470                           ; BSR set to: 2
 10471                           ;lorawan_eu.c: 501: else
 10472                           ;lorawan_eu.c: 502: {
 10473                           ;lorawan_eu.c: 503: ResetParametersForConfirmedTransmission ();
 10474  0017B2  EC6E  F030         	call	_ResetParametersForConfirmedTransmission	;wreg free
 10475                           
 10476                           ; BSR set to: 2
 10477                           ;lorawan_eu.c: 504: if (rxPayload.RxAppData != (0))
 10478  0017B6  0101               	movlb	1	; () banked
 10479  0017B8  5179               	movf	_rxPayload& (0+255),w,b
 10480  0017BA  117A               	iorwf	(_rxPayload+1)& (0+255),w,b
 10481  0017BC  B4D8               	btfsc	status,2,c
 10482  0017BE  0012               	return	
 10483  0017C0                     l14630:
 10484                           
 10485                           ; BSR set to: 1
 10486                           ;lorawan_eu.c: 505: {
 10487                           ;lorawan_eu.c: 506: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
 10488  0017C0  D8B5               	call	PL48	;call to abstracted procedure
 10489  0017C2  6F63               	movwf	RxDataDone@status& (0+255),b
 10490  0017C4  0005               	push	
 10491  0017C6  0101               	movlb	1	; () banked
 10492  0017C8  6EFA               	movwf	pclath,c
 10493  0017CA  5179               	movf	_rxPayload& (0+255),w,b
 10494  0017CC  6EFD               	movwf	tosl,c
 10495  0017CE  517A               	movf	(_rxPayload+1)& (0+255),w,b
 10496  0017D0  6EFE               	movwf	tosh,c
 10497  0017D2  50F8               	movf	tblptru,w,c
 10498  0017D4  6EFF               	movwf	tosu,c
 10499  0017D6  50FA               	movf	pclath,w,c
 10500  0017D8  0012               	return		;indir
 10501  0017DA                     l14632:
 10502                           
 10503                           ; BSR set to: 2
 10504                           ;lorawan_eu.c: 511: else
 10505                           ;lorawan_eu.c: 512: {
 10506                           ;lorawan_eu.c: 513: if (loRa.counterRepetitionsUnconfirmedUplink <= loRa.maxRepetitionsU
      +                          nconfirmedUplink)
 10507  0017DA  51D8               	movf	(_loRa+216)& (0+255),w,b
 10508  0017DC  5DD6               	subwf	(_loRa+214)& (0+255),w,b
 10509  0017DE  E201 D081          	bnc	l14668
 10510                           
 10511                           ; BSR set to: 2
 10512                           ;lorawan_eu.c: 514: {
 10513                           ;lorawan_eu.c: 515: loRa.macStatus.macState = RETRANSMISSION_DELAY;
 10514  0017E2  D8AA               	call	PL268	;call to abstracted procedure
 10515                           
 10516                           ; BSR set to: 2
 10517                           ;lorawan_eu.c: 516: if (SelectChannelForTransmission (1) == OK)
 10518  0017E4  0E01               	movlw	1
 10519  0017E6  ECC4  F026         	call	_SelectChannelForTransmission
 10520  0017EA  0900               	iorlw	0
 10521  0017EC  E113               	bnz	l1702
 10522                           
 10523                           ; BSR set to: 0
 10524                           ;lorawan_eu.c: 517: {
 10525                           ;lorawan_eu.c: 519: if (RADIO_Transmit (&macBuffer[16], loRa.lastPacketLength) == OK)
 10526  0017EE  0EFF               	movlw	low (_macBuffer+16)
 10527  0017F0  EC7D  F025         	call	PL170	;call to abstracted procedure
 10528  0017F4  ECCE  F00E         	call	_RADIO_Transmit	;wreg free
 10529  0017F8  51A6               	movf	?_RADIO_Transmit& (0+255),w,b
 10530  0017FA  11A7               	iorwf	(?_RADIO_Transmit+1)& (0+255),w,b
 10531  0017FC  E104               	bnz	l14644
 10532                           
 10533                           ; BSR set to: 0
 10534                           ;lorawan_eu.c: 520: {
 10535                           ;lorawan_eu.c: 521: loRa.counterRepetitionsUnconfirmedUplink ++ ;
 10536  0017FE  0102               	movlb	2	; () banked
 10537  001800  2BD8               	incf	(_loRa+216)& (0+255),f,b
 10538                           
 10539                           ; BSR set to: 2
 10540                           ;lorawan_eu.c: 522: loRa.macStatus.macState = TRANSMISSION_OCCURRING;
 10541  001802  EF83  F025         	goto	PL264	;call to abstracted procedure
 10542  001806                     l14644:
 10543                           
 10544                           ; BSR set to: 0
 10545                           ;lorawan_eu.c: 524: else
 10546                           ;lorawan_eu.c: 526: {
 10547                           ;lorawan_eu.c: 527: ResetParametersForUnconfirmedTransmission ();
 10548  001806  ECC0  F030         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
 10549                           
 10550                           ; BSR set to: 2
 10551                           ;lorawan_eu.c: 528: if (rxPayload.RxAppData != (0))
 10552  00180A  0101               	movlb	1	; () banked
 10553  00180C  5179               	movf	_rxPayload& (0+255),w,b
 10554  00180E  117A               	iorwf	(_rxPayload+1)& (0+255),w,b
 10555  001810  E1D7               	bnz	l14630
 10556  001812  0012               	return	
 10557  001814                     l1702:
 10558                           
 10559                           ; BSR set to: 0
 10560                           ;lorawan_eu.c: 534: else
 10561                           ;lorawan_eu.c: 535: {
 10562                           ;lorawan_eu.c: 537: for (i = 0; i <= loRa.maxChannels; i ++)
 10563  001814  6BBF               	clrf	LORAWAN_RxTimeout@i& (0+255),b
 10564  001816  D03A               	goto	l14664
 10565  001818                     l14650:
 10566                           
 10567                           ; BSR set to: 2
 10568                           ;lorawan_eu.c: 538: {
 10569                           ;lorawan_eu.c: 539: if ( (Channels[i].status == 1) && (Channels[i].channelTimer != 0) &&
      +                           (Channels[i].channelTimer <= minim) && (loRa.currentDataRate >= Channels[i].dataRange.m
      +                          in) && (loRa.currentDataRate <= Channels[i].dataRange.max) )
 10570  001818  0100               	movlb	0	; () banked
 10571  00181A  51BF               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 10572  00181C  EC86  F021         	call	PL12	;call to abstracted procedure
 10573  001820  E133               	bnz	l14662
 10574                           
 10575                           ; BSR set to: 0
 10576  001822  51BF               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 10577  001824  EC51  F006         	call	PL4	;call to abstracted procedure
 10578  001828  ECBB  F00E         	call	PL130	;call to abstracted procedure
 10579  00182C  E02D               	bz	l14662
 10580                           
 10581                           ; BSR set to: 0
 10582  00182E  51BF               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 10583  001830  EC51  F006         	call	PL4	;call to abstracted procedure
 10584  001834  50DE               	movf	postinc2,w,c
 10585  001836  5DBB               	subwf	LORAWAN_RxTimeout@minim& (0+255),w,b
 10586  001838  50DE               	movf	postinc2,w,c
 10587  00183A  59BC               	subwfb	(LORAWAN_RxTimeout@minim+1)& (0+255),w,b
 10588  00183C  50DE               	movf	postinc2,w,c
 10589  00183E  59BD               	subwfb	(LORAWAN_RxTimeout@minim+2)& (0+255),w,b
 10590  001840  50DE               	movf	postinc2,w,c
 10591  001842  59BE               	subwfb	(LORAWAN_RxTimeout@minim+3)& (0+255),w,b
 10592  001844  E321               	bnc	l14662
 10593                           
 10594                           ; BSR set to: 0
 10595  001846  51BF               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 10596  001848  EC7E  F021         	call	PL6	;call to abstracted procedure
 10597  00184C  50DF               	movf	223,w,c
 10598  00184E  0B0F               	andlw	15
 10599  001850  6FB7               	movwf	??_LORAWAN_RxTimeout& (0+255),b
 10600  001852  51B7               	movf	??_LORAWAN_RxTimeout& (0+255),w,b
 10601  001854  0102               	movlb	2	; () banked
 10602  001856  5DDF               	subwf	(_loRa+223)& (0+255),w,b
 10603  001858  E317               	bnc	l14662
 10604                           
 10605                           ; BSR set to: 2
 10606  00185A  0100               	movlb	0	; () banked
 10607  00185C  51BF               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 10608  00185E  EC7E  F021         	call	PL6	;call to abstracted procedure
 10609  001862  38DF               	swapf	223,w,c
 10610  001864  0B0F               	andlw	15
 10611  001866  6FB7               	movwf	??_LORAWAN_RxTimeout& (0+255),b
 10612  001868  0102               	movlb	2	; () banked
 10613  00186A  51DF               	movf	(_loRa+223)& (0+255),w,b
 10614  00186C  0100               	movlb	0	; () banked
 10615  00186E  5DB7               	subwf	??_LORAWAN_RxTimeout& (0+255),w,b
 10616  001870  E30B               	bnc	l14662
 10617                           
 10618                           ; BSR set to: 0
 10619                           ;lorawan_eu.c: 540: {
 10620                           ;lorawan_eu.c: 541: minim = Channels[i].channelTimer;
 10621  001872  51BF               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 10622  001874  EC51  F006         	call	PL4	;call to abstracted procedure
 10623  001878  CFDE F0BB          	movff	postinc2,LORAWAN_RxTimeout@minim
 10624  00187C  CFDE F0BC          	movff	postinc2,LORAWAN_RxTimeout@minim+1
 10625  001880  CFDE F0BD          	movff	postinc2,LORAWAN_RxTimeout@minim+2
 10626  001884  CFDE F0BE          	movff	postinc2,LORAWAN_RxTimeout@minim+3
 10627  001888                     l14662:
 10628  001888  0100               	movlb	0	; () banked
 10629  00188A  2BBF               	incf	LORAWAN_RxTimeout@i& (0+255),f,b
 10630  00188C                     l14664:
 10631                           
 10632                           ; BSR set to: 0
 10633  00188C  51BF               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 10634  00188E  0102               	movlb	2	; () banked
 10635  001890  5DED               	subwf	(_loRa+237)& (0+255),w,b
 10636  001892  E2C2               	bc	l14650
 10637                           
 10638                           ; BSR set to: 2
 10639                           ;lorawan_eu.c: 542: }
 10640                           ;lorawan_eu.c: 543: }
 10641                           ;lorawan_eu.c: 544: SwTimerSetTimeout (loRa.unconfirmedRetransmisionTimerId, ( (((uint32
      +                          _t)(minim + 50)) << (12)) / 125UL ) );
 10642  001894  C0BB  F0B7         	movff	LORAWAN_RxTimeout@minim,??_LORAWAN_RxTimeout
 10643  001898  C0BC  F0B8         	movff	LORAWAN_RxTimeout@minim+1,??_LORAWAN_RxTimeout+1
 10644  00189C  C0BD  F0B9         	movff	LORAWAN_RxTimeout@minim+2,??_LORAWAN_RxTimeout+2
 10645  0018A0  C0BE  F0BA         	movff	LORAWAN_RxTimeout@minim+3,??_LORAWAN_RxTimeout+3
 10646  0018A4  0E0C               	movlw	12
 10647  0018A6                     u17145:
 10648  0018A6  90D8               	bcf	status,0,c
 10649  0018A8  0100               	movlb	0	; () banked
 10650  0018AA  D84B               	call	PL390	;call to abstracted procedure
 10651  0018AC  2EE8               	decfsz	wreg,f,c
 10652  0018AE  D7FB               	goto	u17145
 10653  0018B0  0E00               	movlw	0
 10654  0018B2  25B7               	addwf	??_LORAWAN_RxTimeout& (0+255),w,b
 10655  0018B4  6F60               	movwf	___lldiv@dividend& (0+255),b
 10656  0018B6  0E20               	movlw	32
 10657  0018B8  21B8               	addwfc	(??_LORAWAN_RxTimeout+1)& (0+255),w,b
 10658  0018BA  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
 10659  0018BC  0E03               	movlw	3
 10660  0018BE  21B9               	addwfc	(??_LORAWAN_RxTimeout+2)& (0+255),w,b
 10661  0018C0  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
 10662  0018C2  0E00               	movlw	0
 10663  0018C4  21BA               	addwfc	(??_LORAWAN_RxTimeout+3)& (0+255),w,b
 10664  0018C6  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
 10665  0018C8  0E7D               	movlw	125
 10666  0018CA  EC77  F011         	call	PL32	;call to abstracted procedure
 10667  0018CE  EC1B  F025         	call	___lldiv	;wreg free
 10668  0018D2  EC73  F006         	call	PL20	;call to abstracted procedure
 10669  0018D6  51EA               	movf	(_loRa+234)& (0+255),w,b
 10670  0018D8  EC11  F02C         	call	_SwTimerSetTimeout
 10671                           
 10672                           ;lorawan_eu.c: 545: SwTimerStart (loRa.unconfirmedRetransmisionTimerId);
 10673  0018DC  0102               	movlb	2	; () banked
 10674  0018DE  51EA               	movf	(_loRa+234)& (0+255),w,b
 10675  0018E0  EFC4  F025         	goto	_SwTimerStart
 10676  0018E4                     l14668:
 10677                           
 10678                           ; BSR set to: 2
 10679                           ;lorawan_eu.c: 548: else
 10680                           ;lorawan_eu.c: 549: {
 10681                           ;lorawan_eu.c: 550: ResetParametersForUnconfirmedTransmission ();
 10682  0018E4  ECC0  F030         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
 10683                           
 10684                           ; BSR set to: 2
 10685                           ;lorawan_eu.c: 551: if (rxPayload.RxAppData != (0))
 10686  0018E8  D831               	call	PL418	;call to abstracted procedure
 10687  0018EA  B4D8               	btfsc	status,2,c
 10688  0018EC  0012               	return	
 10689                           
 10690                           ; BSR set to: 1
 10691                           ;lorawan_eu.c: 552: {
 10692                           ;lorawan_eu.c: 553: rxPayload.RxAppData((0), 0, MAC_OK);
 10693  0018EE  D81E               	call	PL48	;call to abstracted procedure
 10694  0018F0  0E01               	movlw	1
 10695  0018F2  6F63               	movwf	RxDataDone@status& (0+255),b
 10696  0018F4  0005               	push	
 10697  0018F6  0101               	movlb	1	; () banked
 10698  0018F8  6EFA               	movwf	pclath,c
 10699  0018FA  5179               	movf	_rxPayload& (0+255),w,b
 10700  0018FC  6EFD               	movwf	tosl,c
 10701  0018FE  517A               	movf	(_rxPayload+1)& (0+255),w,b
 10702  001900  6EFE               	movwf	tosh,c
 10703  001902  50F8               	movf	tblptru,w,c
 10704  001904  6EFF               	movwf	tosu,c
 10705  001906  50FA               	movf	pclath,w,c
 10706  001908  0012               	return		;indir
 10707  00190A                     l14674:
 10708                           
 10709                           ; BSR set to: 2
 10710                           ;lorawan_eu.c: 560: else
 10711                           ;lorawan_eu.c: 561: {
 10712                           ;lorawan_eu.c: 563: if (rxPayload.RxAppData != (0))
 10713  00190A  D820               	call	PL418	;call to abstracted procedure
 10714  00190C  B4D8               	btfsc	status,2,c
 10715  00190E  0012               	return	
 10716                           
 10717                           ; BSR set to: 1
 10718                           ;lorawan_eu.c: 564: {
 10719                           ;lorawan_eu.c: 565: rxPayload.RxAppData((0), 0, RADIO_NOT_OK);
 10720  001910  D80D               	call	PL48	;call to abstracted procedure
 10721  001912  0E02               	movlw	2
 10722  001914  6F63               	movwf	RxDataDone@status& (0+255),b
 10723  001916  0005               	push	
 10724  001918  0101               	movlb	1	; () banked
 10725  00191A  6EFA               	movwf	pclath,c
 10726  00191C  5179               	movf	_rxPayload& (0+255),w,b
 10727  00191E  6EFD               	movwf	tosl,c
 10728  001920  517A               	movf	(_rxPayload+1)& (0+255),w,b
 10729  001922  6EFE               	movwf	tosh,c
 10730  001924  50F8               	movf	tblptru,w,c
 10731  001926  6EFF               	movwf	tosu,c
 10732  001928  50FA               	movf	pclath,w,c
 10733  00192A  0012               	return		;indir
 10734  00192C                     __end_of_LORAWAN_RxTimeout:
 10735                           	opt stack 0
 10736  00192C                     PL48:
 10737                           	opt stack 15
 10738  00192C  0E00               	movlw	0
 10739  00192E  0100               	movlb	0	; () banked
 10740  001930  6F60               	movwf	RxDataDone@pData& (0+255),b
 10741  001932  6F61               	movwf	(RxDataDone@pData+1)& (0+255),b
 10742  001934  6F62               	movwf	RxDataDone@dataLength& (0+255),b
 10743  001936  0C00               	retlw	0
 10744  001938                     __end_ofPL48:
 10745                           	opt stack 0
 10746  001938                     PL268:
 10747                           	opt stack 12
 10748  001938  5102               	movf	(_loRa+2)& (0+255),w,b
 10749  00193A  0BF0               	andlw	-16
 10750  00193C  0906               	iorlw	6
 10751  00193E  6F02               	movwf	(_loRa+2)& (0+255),b
 10752  001940  0012               	return	
 10753  001942                     __end_ofPL268:
 10754                           	opt stack 0
 10755  001942                     PL390:
 10756                           	opt stack 12
 10757  001942  37B7               	rlcf	??_LORAWAN_RxTimeout& (0+255),f,b
 10758  001944  37B8               	rlcf	(??_LORAWAN_RxTimeout+1)& (0+255),f,b
 10759  001946  37B9               	rlcf	(??_LORAWAN_RxTimeout+2)& (0+255),f,b
 10760  001948  37BA               	rlcf	(??_LORAWAN_RxTimeout+3)& (0+255),f,b
 10761  00194A  0012               	return	
 10762  00194C                     __end_ofPL390:
 10763                           	opt stack 0
 10764  00194C                     PL418:
 10765                           	opt stack 12
 10766  00194C  0101               	movlb	1	; () banked
 10767  00194E  5179               	movf	_rxPayload& (0+255),w,b
 10768  001950  117A               	iorwf	(_rxPayload+1)& (0+255),w,b
 10769  001952  0012               	return	
 10770  001954                     __end_ofPL418:
 10771                           	opt stack 0
 10772                           tosu	equ	0xFFF
 10773                           tosh	equ	0xFFE
 10774                           tosl	equ	0xFFD
 10775                           pclath	equ	0xFFA
 10776                           tblptru	equ	0xFF8
 10777                           tblptrh	equ	0xFF7
 10778                           tblptrl	equ	0xFF6
 10779                           tablat	equ	0xFF5
 10780                           prodh	equ	0xFF4
 10781                           prodl	equ	0xFF3
 10782                           intcon	equ	0xFF2
 10783                           indf0	equ	0xFEF
 10784                           postinc0	equ	0xFEE
 10785                           plusw0	equ	0xFEB
 10786                           fsr0h	equ	0xFEA
 10787                           fsr0l	equ	0xFE9
 10788                           wreg	equ	0xFE8
 10789                           postinc1	equ	0xFE6
 10790                           postdec1	equ	0xFE5
 10791                           plusw1	equ	0xFE3
 10792                           fsr1h	equ	0xFE2
 10793                           fsr1l	equ	0xFE1
 10794                           indf2	equ	0xFDF
 10795                           postinc2	equ	0xFDE
 10796                           postdec2	equ	0xFDD
 10797                           plusw2	equ	0xFDB
 10798                           fsr2h	equ	0xFDA
 10799                           fsr2l	equ	0xFD9
 10800                           status	equ	0xFD8
 10801                           
 10802 ;; *************** function _LORAWAN_RxDone *****************
 10803 ;; Defined at:
 10804 ;;		line 1121 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 10805 ;; Parameters:    Size  Location     Type
 10806 ;;  buffer          2  111[BANK1 ] PTR unsigned char 
 10807 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 10808 ;;  bufferLength    1  113[BANK1 ] unsigned char 
 10809 ;; Auto vars:     Size  Location     Type
 10810 ;;  hdr             2  151[BANK0 ] PTR struct .
 10811 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 10812 ;;  joinAccept      2  148[BANK0 ] PTR struct .
 10813 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 10814 ;;  computedMic     4  144[BANK0 ] unsigned long 
 10815 ;;  extractedMic    4  136[BANK0 ] unsigned long 
 10816 ;;  packet          2  142[BANK0 ] PTR unsigned char 
 10817 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), NULL(0), 
 10818 ;;  frmPayloadLe    1  150[BANK0 ] unsigned char 
 10819 ;;  temp            1  141[BANK0 ] unsigned char 
 10820 ;;  bufferIndex     1  140[BANK0 ] unsigned char 
 10821 ;;  mhdr            1  135[BANK0 ] struct .
 10822 ;;  channelIndex    1  134[BANK0 ] unsigned char 
 10823 ;;  fPort           1  133[BANK0 ] unsigned char 
 10824 ;; Return value:  Size  Location     Type
 10825 ;;                  1    wreg      enum E17354
 10826 ;; Registers used:
 10827 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+8, btemp+9, btemp+10, btemp+11, to
      +sl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10828 ;; Tracked objects:
 10829 ;;		On entry : 3F/1
 10830 ;;		On exit  : 3C/0
 10831 ;;		Unchanged: 0/0
 10832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10833 ;;      Params:         0       0       3       0       0       0       0       0       0
 10834 ;;      Locals:         0      20       0       0       0       0       0       0       0
 10835 ;;      Temps:          0       5       0       0       0       0       0       0       0
 10836 ;;      Totals:         0      25       3       0       0       0       0       0       0
 10837 ;;Total ram usage:       28 bytes
 10838 ;; Hardware stack levels used:    1
 10839 ;; Hardware stack levels required when called:   15
 10840 ;; This function calls:
 10841 ;;		_AESCmac
 10842 ;;		_AESEncodeLoRa
 10843 ;;		_AssembleEncryptionBlock
 10844 ;;		_CheckFlags
 10845 ;;		_CheckMcastFlags
 10846 ;;		_ComputeMic
 10847 ;;		_ComputeSessionKeys
 10848 ;;		_EncryptFRMPayload
 10849 ;;		_ExtractMic
 10850 ;;		_LORAWAN_EnterContinuousReceive
 10851 ;;		_LORAWAN_Send
 10852 ;;		_MacExecuteCommands
 10853 ;;		_RADIO_GetStatus
 10854 ;;		_RADIO_ReleaseData
 10855 ;;		_RxDataDone
 10856 ;;		_SearchAvailableChannel
 10857 ;;		_SetJoinFailState
 10858 ;;		_SetReceptionNotOkState
 10859 ;;		_StartReTxTimer
 10860 ;;		_SwTimerStop
 10861 ;;		_UpdateCfList
 10862 ;;		_UpdateDLSettings
 10863 ;;		_UpdateJoinSuccessState
 10864 ;;		_UpdateReceiveDelays
 10865 ;;		_UpdateRetransmissionAckTimeoutState
 10866 ;;		_memcpy
 10867 ;; This function is called by:
 10868 ;;		_RADIO_RxDone
 10869 ;;		_RADIO_FSKPayloadReady
 10870 ;; This function uses a non-reentrant model
 10871 ;;
 10872                           
 10873                           	psect	text56
 10874  000096                     __ptext56:
 10875                           	opt stack 0
 10876  000096                     _LORAWAN_RxDone:
 10877                           	opt stack 12
 10878                           
 10879                           ; BSR set to: 1
 10880                           ;lorawan.c: 1123: uint32_t computedMic, extractedMic;
 10881                           ;lorawan.c: 1124: Mhdr_t mhdr;
 10882                           ;lorawan.c: 1125: uint8_t fPort, bufferIndex, channelIndex;
 10883                           ;lorawan.c: 1126: uint8_t frmPayloadLength;
 10884                           ;lorawan.c: 1127: uint8_t *packet;
 10885                           ;lorawan.c: 1128: uint8_t temp;
 10886                           ;lorawan.c: 1130: RADIO_ReleaseData();
 10887                           
 10888                           ;incstack = 0
 10889  000096  EC0A  F031         	call	_RADIO_ReleaseData	;wreg free
 10890                           
 10891                           ; BSR set to: 1
 10892                           ;lorawan.c: 1132: if (loRa.macStatus.macPause == 0)
 10893  00009A  0102               	movlb	2	; () banked
 10894  00009C  B103               	btfsc	(_loRa+3)& (0+255),0,b
 10895  00009E  D2E8               	goto	l14498
 10896                           
 10897                           ; BSR set to: 2
 10898                           ;lorawan.c: 1133: {
 10899                           ;lorawan.c: 1134: mhdr.value = buffer[0];
 10900  0000A0  DBCF               	call	PL234	;call to abstracted procedure
 10901  0000A2  0100               	movlb	0	; () banked
 10902  0000A4  6FE7               	movwf	LORAWAN_RxDone@mhdr& (0+255),b
 10903                           
 10904                           ; BSR set to: 0
 10905                           ;lorawan.c: 1135: if ( (mhdr.bits.mType == FRAME_TYPE_JOIN_ACCEPT) && (loRa.activationPa
      +                          rameters.activationType == 0) )
 10906  0000A6  39E7               	swapf	LORAWAN_RxDone@mhdr& (0+255),w,b
 10907  0000A8  32E8               	rrcf	wreg,f,c
 10908  0000AA  0B07               	andlw	7
 10909  0000AC  06E8               	decf	wreg,f,c
 10910  0000AE  E001 D09A          	bnz	l14170
 10911                           
 10912                           ; BSR set to: 0
 10913  0000B2  0102               	movlb	2	; () banked
 10914  0000B4  511D               	movf	(_loRa+29)& (0+255),w,b
 10915  0000B6  E001 D096          	bnz	l14170
 10916                           
 10917                           ; BSR set to: 2
 10918                           ;lorawan.c: 1136: {
 10919                           ;lorawan.c: 1137: temp = bufferLength - 1;
 10920  0000BA  0101               	movlb	1	; () banked
 10921  0000BC  0571               	decf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 10922  0000BE  0100               	movlb	0	; () banked
 10923  0000C0  6FED               	movwf	LORAWAN_RxDone@temp& (0+255),b
 10924                           
 10925                           ;lorawan.c: 1138: while (temp > 0)
 10926  0000C2  D01A               	goto	l14126
 10927  0000C4                     l14120:
 10928                           
 10929                           ; BSR set to: 0
 10930                           ;lorawan.c: 1139: {
 10931                           ;lorawan.c: 1141: AESEncodeLoRa (&buffer[bufferLength - temp], loRa.activationParameters
      +                          .applicationKey);
 10932  0000C4  0101               	movlb	1	; () banked
 10933  0000C6  5171               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 10934  0000C8  256F               	addwf	LORAWAN_RxDone@buffer& (0+255),w,b
 10935  0000CA  0100               	movlb	0	; () banked
 10936  0000CC  6FE0               	movwf	??_LORAWAN_RxDone& (0+255),b
 10937  0000CE  0E00               	movlw	0
 10938  0000D0  0101               	movlb	1	; () banked
 10939  0000D2  2170               	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),w,b
 10940  0000D4  0100               	movlb	0	; () banked
 10941  0000D6  6FE1               	movwf	(??_LORAWAN_RxDone+1)& (0+255),b
 10942  0000D8  51ED               	movf	LORAWAN_RxDone@temp& (0+255),w,b
 10943  0000DA  5DE0               	subwf	??_LORAWAN_RxDone& (0+255),w,b
 10944  0000DC  6F8C               	movwf	AESEncodeLoRa@block& (0+255),b
 10945  0000DE  51E1               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 10946  0000E0  A0D8               	btfss	status,0,c
 10947  0000E2  05E1               	decf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 10948  0000E4  EC5B  F026         	call	PL240	;call to abstracted procedure
 10949  0000E8  EC51  F02E         	call	_AESEncodeLoRa	;wreg free
 10950                           
 10951                           ; BSR set to: 0
 10952                           ;lorawan.c: 1142: if (temp > 16)
 10953  0000EC  0E10               	movlw	16
 10954  0000EE  65ED               	cpfsgt	LORAWAN_RxDone@temp& (0+255),b
 10955  0000F0  D002               	goto	l1111
 10956                           
 10957                           ; BSR set to: 0
 10958                           ;lorawan.c: 1143: {
 10959                           ;lorawan.c: 1144: temp -= 16;
 10960  0000F2  5FED               	subwf	LORAWAN_RxDone@temp& (0+255),f,b
 10961                           
 10962                           ;lorawan.c: 1145: }
 10963  0000F4  D001               	goto	l14126
 10964  0000F6                     l1111:
 10965                           
 10966                           ; BSR set to: 0
 10967                           ;lorawan.c: 1146: else
 10968                           ;lorawan.c: 1147: {
 10969                           ;lorawan.c: 1148: temp = 0;
 10970  0000F6  6BED               	clrf	LORAWAN_RxDone@temp& (0+255),b
 10971  0000F8                     l14126:
 10972                           
 10973                           ; BSR set to: 0
 10974  0000F8  51ED               	movf	LORAWAN_RxDone@temp& (0+255),w,b
 10975  0000FA  E1E4               	bnz	l14120
 10976                           
 10977                           ; BSR set to: 0
 10978                           ;lorawan.c: 1149: }
 10979                           ;lorawan.c: 1150: }
 10980                           ;lorawan.c: 1153: computedMic = ComputeMic (loRa.activationParameters.applicationKey, bu
      +                          ffer, bufferLength - sizeof(extractedMic));
 10981  0000FC  EC84  F017         	call	PL348	;call to abstracted procedure
 10982  000100  C16F  F168         	movff	LORAWAN_RxDone@buffer,ComputeMic@buffer
 10983  000104  C170  F169         	movff	LORAWAN_RxDone@buffer+1,ComputeMic@buffer+1
 10984  000108  5171               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 10985  00010A  0FFC               	addlw	252
 10986  00010C  6F6A               	movwf	ComputeMic@bufferLength& (0+255),b
 10987  00010E  ECB9  F02A         	call	_ComputeMic	;wreg free
 10988  000112  C166  F0F0         	movff	?_ComputeMic,LORAWAN_RxDone@computedMic
 10989  000116  C167  F0F1         	movff	?_ComputeMic+1,LORAWAN_RxDone@computedMic+1
 10990  00011A  C168  F0F2         	movff	?_ComputeMic+2,LORAWAN_RxDone@computedMic+2
 10991  00011E  C169  F0F3         	movff	?_ComputeMic+3,LORAWAN_RxDone@computedMic+3
 10992                           
 10993                           ; BSR set to: 0
 10994                           ;lorawan.c: 1154: extractedMic = ExtractMic (buffer, bufferLength);
 10995  000122  DB71               	call	PL188	;call to abstracted procedure
 10996  000124  EC40  F02B         	call	_ExtractMic	;wreg free
 10997  000128  DB2B               	call	PL126	;call to abstracted procedure
 10998                           
 10999                           ; BSR set to: 0
 11000                           ;lorawan.c: 1155: if (extractedMic != computedMic)
 11001  00012A  51F0               	movf	LORAWAN_RxDone@computedMic& (0+255),w,b
 11002  00012C  19E8               	xorwf	LORAWAN_RxDone@extractedMic& (0+255),w,b
 11003  00012E  E109               	bnz	u16000
 11004  000130  51F1               	movf	(LORAWAN_RxDone@computedMic+1)& (0+255),w,b
 11005  000132  19E9               	xorwf	(LORAWAN_RxDone@extractedMic+1)& (0+255),w,b
 11006  000134  E106               	bnz	u16000
 11007  000136  51F2               	movf	(LORAWAN_RxDone@computedMic+2)& (0+255),w,b
 11008  000138  19EA               	xorwf	(LORAWAN_RxDone@extractedMic+2)& (0+255),w,b
 11009  00013A  E103               	bnz	u16000
 11010  00013C  51F3               	movf	(LORAWAN_RxDone@computedMic+3)& (0+255),w,b
 11011  00013E  19EB               	xorwf	(LORAWAN_RxDone@extractedMic+3)& (0+255),w,b
 11012  000140  E00F               	bz	l14144
 11013  000142                     u16000:
 11014                           
 11015                           ; BSR set to: 0
 11016                           ;lorawan.c: 1156: {
 11017                           ;lorawan.c: 1157: if ((loRa.macStatus.macState == RX2_OPEN) || ((loRa.macStatus.macState
      +                           == RX1_OPEN) && (loRa.rx2DelayExpired)))
 11018  000142  EC8E  F026         	call	PL382	;call to abstracted procedure
 11019  000146  E102 EFDA  F02D    	bz	_SetJoinFailState
 11020                           
 11021                           ; BSR set to: 2
 11022  00014C  5102               	movf	(_loRa+2)& (0+255),w,b
 11023  00014E  0B0F               	andlw	15
 11024  000150  0A03               	xorlw	3
 11025  000152  A4D8               	btfss	status,2,c
 11026  000154  0012               	return	
 11027                           
 11028                           ; BSR set to: 2
 11029  000156  51F1               	movf	(_loRa+241)& (0+255),w,b
 11030  000158  B4D8               	btfsc	status,2,c
 11031  00015A  0012               	return	
 11032                           
 11033                           ; BSR set to: 2
 11034                           ;lorawan.c: 1158: {
 11035                           ;lorawan.c: 1159: SetJoinFailState();
 11036  00015C  EFDA  F02D         	goto	_SetJoinFailState	;wreg free
 11037  000160                     l14144:
 11038                           
 11039                           ; BSR set to: 0
 11040                           ;lorawan.c: 1163: }
 11041                           ;lorawan.c: 1166: if (loRa.macStatus.macState == RX1_OPEN)
 11042  000160  0102               	movlb	2	; () banked
 11043  000162  5102               	movf	(_loRa+2)& (0+255),w,b
 11044  000164  0B0F               	andlw	15
 11045  000166  0A03               	xorlw	3
 11046  000168  E103               	bnz	l14148
 11047                           
 11048                           ; BSR set to: 2
 11049                           ;lorawan.c: 1167: {
 11050                           ;lorawan.c: 1168: SwTimerStop (loRa.joinAccept2TimerId);
 11051  00016A  51E3               	movf	(_loRa+227)& (0+255),w,b
 11052  00016C  EC65  F030         	call	_SwTimerStop
 11053  000170                     l14148:
 11054                           
 11055                           ;lorawan.c: 1169: }
 11056                           ;lorawan.c: 1171: JoinAccept_t *joinAccept;
 11057                           ;lorawan.c: 1172: joinAccept = (JoinAccept_t*)buffer;
 11058  000170  C16F  F0F4         	movff	LORAWAN_RxDone@buffer,LORAWAN_RxDone@joinAccept
 11059  000174  C170  F0F5         	movff	LORAWAN_RxDone@buffer+1,LORAWAN_RxDone@joinAccept+1
 11060                           
 11061                           ;lorawan.c: 1174: loRa.activationParameters.deviceAddress.value = joinAccept->members.de
      +                          viceAddress.value;
 11062  000178  0100               	movlb	0	; () banked
 11063  00017A  EE20 F007          	lfsr	2,7
 11064  00017E  DB74               	call	PL270	;call to abstracted procedure
 11065  000180  CFDE F21E          	movff	postinc2,_loRa+30
 11066  000184  CFDE F21F          	movff	postinc2,_loRa+31
 11067  000188  CFDE F220          	movff	postinc2,_loRa+32
 11068  00018C  CFDE F221          	movff	postinc2,_loRa+33
 11069                           
 11070                           ; BSR set to: 0
 11071                           ;lorawan.c: 1176: UpdateReceiveDelays (joinAccept->members.rxDelay & 0x0F);
 11072  000190  EE20 F00C          	lfsr	2,12
 11073  000194  DB69               	call	PL270	;call to abstracted procedure
 11074  000196  50DF               	movf	indf2,w,c
 11075  000198  0B0F               	andlw	15
 11076  00019A  EC48  F02C         	call	_UpdateReceiveDelays
 11077                           
 11078                           ; BSR set to: 2
 11079                           ;lorawan.c: 1178: UpdateDLSettings(joinAccept->members.DLSettings.bits.rx2DataRate, join
      +                          Accept->members.DLSettings.bits.rx1DROffset);
 11080  00019E  0100               	movlb	0	; () banked
 11081  0001A0  EE20 F00B          	lfsr	2,11
 11082  0001A4  DB61               	call	PL270	;call to abstracted procedure
 11083  0001A6  38DF               	swapf	223,w,c
 11084  0001A8  0B07               	andlw	7
 11085  0001AA  6F60               	movwf	UpdateDLSettings@dlRx1DrOffset& (0+255),b
 11086  0001AC  EE20 F00B          	lfsr	2,11
 11087  0001B0  DB5B               	call	PL270	;call to abstracted procedure
 11088  0001B2  50DF               	movf	223,w,c
 11089  0001B4  0B0F               	andlw	15
 11090  0001B6  EC86  F02F         	call	_UpdateDLSettings
 11091                           
 11092                           ; BSR set to: 0
 11093                           ;lorawan.c: 1180: UpdateCfList (bufferLength, joinAccept);
 11094  0001BA  C0F4  F09C         	movff	LORAWAN_RxDone@joinAccept,UpdateCfList@joinAccept
 11095  0001BE  C0F5  F09D         	movff	LORAWAN_RxDone@joinAccept+1,UpdateCfList@joinAccept+1
 11096  0001C2  0101               	movlb	1	; () banked
 11097  0001C4  5171               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 11098  0001C6  EC92  F014         	call	_UpdateCfList
 11099                           
 11100                           ;lorawan.c: 1182: ComputeSessionKeys (joinAccept);
 11101  0001CA  C0F4  F0A0         	movff	LORAWAN_RxDone@joinAccept,ComputeSessionKeys@joinAcceptBuffer
 11102  0001CE  C0F5  F0A1         	movff	LORAWAN_RxDone@joinAccept+1,ComputeSessionKeys@joinAcceptBuffer+1
 11103  0001D2  EC2D  F026         	call	_ComputeSessionKeys	;wreg free
 11104                           
 11105                           ; BSR set to: 0
 11106                           ;lorawan.c: 1184: UpdateJoinSuccessState(0);
 11107  0001D6  6AE6               	clrf	postinc1,c
 11108  0001D8  ECBB  F01D         	call	_UpdateJoinSuccessState	;wreg free
 11109                           
 11110                           ; BSR set to: 1
 11111                           ;lorawan.c: 1186: loRa.fCntUp.value = 0;
 11112  0001DC  0102               	movlb	2	; () banked
 11113  0001DE  EC8D  F014         	call	PL428	;call to abstracted procedure
 11114                           
 11115                           ; BSR set to: 2
 11116                           ;lorawan.c: 1187: loRa.fCntDown.value = 0;
 11117  0001E2  EF88  F014         	goto	PL408	;call to abstracted procedure
 11118  0001E6                     l14170:
 11119                           
 11120                           ;lorawan.c: 1191: else if ( (mhdr.bits.mType == FRAME_TYPE_DATA_UNCONFIRMED_DOWN) || (mh
      +                          dr.bits.mType == FRAME_TYPE_DATA_CONFIRMED_DOWN) )
 11121  0001E6  0100               	movlb	0	; () banked
 11122  0001E8  39E7               	swapf	LORAWAN_RxDone@mhdr& (0+255),w,b
 11123  0001EA  32E8               	rrcf	wreg,f,c
 11124  0001EC  0B07               	andlw	7
 11125  0001EE  0A03               	xorlw	3
 11126  0001F0  E007               	bz	l1123
 11127                           
 11128                           ; BSR set to: 0
 11129  0001F2  39E7               	swapf	LORAWAN_RxDone@mhdr& (0+255),w,b
 11130  0001F4  32E8               	rrcf	wreg,f,c
 11131  0001F6  0B07               	andlw	7
 11132  0001F8  0A05               	xorlw	5
 11133  0001FA  E002 EF61  F026    	bnz	_SetReceptionNotOkState
 11134  000200                     l1123:
 11135                           
 11136                           ; BSR set to: 0
 11137                           ;lorawan.c: 1192: {
 11138                           ;lorawan.c: 1193: loRa.crtMacCmdIndex = 0;
 11139  000200  0102               	movlb	2	; () banked
 11140  000202  6BA7               	clrf	(_loRa+167)& (0+255),b
 11141                           
 11142                           ; BSR set to: 2
 11143                           ;lorawan.c: 1195: Hdr_t *hdr;
 11144                           ;lorawan.c: 1196: hdr=(Hdr_t*)buffer;
 11145  000204  C16F  F0F7         	movff	LORAWAN_RxDone@buffer,LORAWAN_RxDone@hdr
 11146  000208  C170  F0F8         	movff	LORAWAN_RxDone@buffer+1,LORAWAN_RxDone@hdr+1
 11147                           
 11148                           ;lorawan.c: 1199: if ( (CLASS_C == loRa.deviceClass) && (hdr->members.devAddr.value == l
      +                          oRa.activationParameters.mcastDeviceAddress.value) && (1 == loRa.macStatus.mcastEnable) 
      +                          )
 11149  00020C  0E02               	movlw	2
 11150  00020E  1912               	xorwf	(_loRa+18)& (0+255),w,b
 11151  000210  E001 D0D5          	bnz	l14288
 11152                           
 11153                           ; BSR set to: 2
 11154  000214  DB11               	call	PL222	;call to abstracted procedure
 11155  000216  DA6C               	call	PL42	;call to abstracted procedure
 11156  000218  0102               	movlb	2	; () banked
 11157  00021A  5162               	movf	(_loRa+98)& (0+255),w,b
 11158  00021C  18DE               	xorwf	postinc2,w,c
 11159  00021E  E109               	bnz	u16081
 11160  000220  5163               	movf	(_loRa+99)& (0+255),w,b
 11161  000222  18DE               	xorwf	postinc2,w,c
 11162  000224  E106               	bnz	u16081
 11163  000226  5164               	movf	(_loRa+100)& (0+255),w,b
 11164  000228  18DE               	xorwf	postinc2,w,c
 11165  00022A  E103               	bnz	u16081
 11166  00022C  5165               	movf	(_loRa+101)& (0+255),w,b
 11167  00022E  18DE               	xorwf	postinc2,w,c
 11168  000230  A4D8               	btfss	status,2,c
 11169  000232                     u16081:
 11170  000232  D0C5               	goto	l14288
 11171                           
 11172                           ; BSR set to: 2
 11173  000234  A504               	btfss	(_loRa+4)& (0+255),2,b
 11174  000236  D0C3               	goto	l14288
 11175                           
 11176                           ; BSR set to: 2
 11177                           ;lorawan.c: 1200: {
 11178                           ;lorawan.c: 1202: if (0 == CheckMcastFlags(hdr))
 11179  000238  C0F7  F060         	movff	LORAWAN_RxDone@hdr,CheckMcastFlags@hdr
 11180  00023C  C0F8  F061         	movff	LORAWAN_RxDone@hdr+1,CheckMcastFlags@hdr+1
 11181  000240  EC3D  F028         	call	_CheckMcastFlags	;wreg free
 11182  000244  0900               	iorlw	0
 11183  000246  E104               	bnz	l14188
 11184  000248                     l14182:
 11185                           
 11186                           ;lorawan.c: 1203: {
 11187                           ;lorawan.c: 1204: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 11188  000248  0102               	movlb	2	; () banked
 11189  00024A  DB1A               	call	PL316	;call to abstracted procedure
 11190                           
 11191                           ; BSR set to: 2
 11192                           ;lorawan.c: 1205: LORAWAN_EnterContinuousReceive();
 11193  00024C  EF93  F026         	goto	_LORAWAN_EnterContinuousReceive	;wreg free
 11194  000250                     l14188:
 11195                           
 11196                           ;lorawan.c: 1207: }
 11197                           ;lorawan.c: 1209: AssembleEncryptionBlock (1, hdr->members.fCnt, bufferLength - sizeof (
      +                          computedMic), 0x49, 1);
 11198  000250  DA36               	call	PL24	;call to abstracted procedure
 11199  000252  CFDE F0E0          	movff	postinc2,??_LORAWAN_RxDone
 11200  000256  DA7B               	call	PL110	;call to abstracted procedure
 11201  000258  0E01               	movlw	1
 11202  00025A  6F70               	movwf	AssembleEncryptionBlock@multicastStatus& (0+255),b
 11203  00025C  EC8F  F021         	call	_AssembleEncryptionBlock
 11204                           
 11205                           ;lorawan.c: 1210: memcpy (&radioBuffer[0], aesBuffer, sizeof (aesBuffer));
 11206  000260  DABC               	call	PL162	;call to abstracted procedure
 11207  000262  DA85               	call	PL124	;call to abstracted procedure
 11208  000264  EC94  F028         	call	_memcpy	;wreg free
 11209                           
 11210                           ;lorawan.c: 1211: memcpy (&radioBuffer[16], buffer, bufferLength-sizeof(computedMic));
 11211  000268  DA4D               	call	PL90	;call to abstracted procedure
 11212  00026A  EC94  F028         	call	_memcpy	;wreg free
 11213                           
 11214                           ; BSR set to: 0
 11215                           ;lorawan.c: 1212: AESCmac(loRa.activationParameters.mcastNetworkSessionKey, aesBuffer, &
      +                          radioBuffer[0], bufferLength - sizeof(computedMic) + sizeof (aesBuffer));
 11216  00026E  0E66               	movlw	low (_loRa+102)
 11217  000270  6FC8               	movwf	AESCmac@key& (0+255),b
 11218  000272  0E02               	movlw	high (_loRa+102)
 11219  000274  6FC9               	movwf	(AESCmac@key+1)& (0+255),b
 11220  000276  0EB5               	movlw	low _aesBuffer
 11221  000278  DA9B               	call	PL148	;call to abstracted procedure
 11222  00027A  ECD2  F008         	call	_AESCmac	;wreg free
 11223                           
 11224                           ; BSR set to: 0
 11225                           ;lorawan.c: 1214: memcpy(&computedMic, aesBuffer, sizeof(computedMic));
 11226  00027E  0EF0               	movlw	low LORAWAN_RxDone@computedMic
 11227  000280  DA5C               	call	PL98	;call to abstracted procedure
 11228  000282  EC94  F028         	call	_memcpy	;wreg free
 11229                           
 11230                           ; BSR set to: 0
 11231                           ;lorawan.c: 1215: extractedMic = ExtractMic (&buffer[0], bufferLength);
 11232  000286  DABF               	call	PL188	;call to abstracted procedure
 11233  000288  EC40  F02B         	call	_ExtractMic	;wreg free
 11234  00028C  DA79               	call	PL126	;call to abstracted procedure
 11235                           
 11236                           ; BSR set to: 0
 11237                           ;lorawan.c: 1217: if (computedMic != extractedMic)
 11238  00028E  51E8               	movf	LORAWAN_RxDone@extractedMic& (0+255),w,b
 11239  000290  19F0               	xorwf	LORAWAN_RxDone@computedMic& (0+255),w,b
 11240  000292  E1DA               	bnz	l14182
 11241  000294  51E9               	movf	(LORAWAN_RxDone@extractedMic+1)& (0+255),w,b
 11242  000296  19F1               	xorwf	(LORAWAN_RxDone@computedMic+1)& (0+255),w,b
 11243  000298  E1D7               	bnz	l14182
 11244  00029A  51EA               	movf	(LORAWAN_RxDone@extractedMic+2)& (0+255),w,b
 11245  00029C  19F2               	xorwf	(LORAWAN_RxDone@computedMic+2)& (0+255),w,b
 11246  00029E  E1D4               	bnz	l14182
 11247  0002A0  51EB               	movf	(LORAWAN_RxDone@extractedMic+3)& (0+255),w,b
 11248  0002A2  19F3               	xorwf	(LORAWAN_RxDone@computedMic+3)& (0+255),w,b
 11249  0002A4  E1D1               	bnz	l14182
 11250                           
 11251                           ; BSR set to: 0
 11252                           ;lorawan.c: 1222: }
 11253                           ;lorawan.c: 1224: if (hdr->members.fCnt >= loRa.fMcastCntDown.members.valueLow)
 11254  0002A6  DA13               	call	PL26	;call to abstracted procedure
 11255  0002A8  510E               	movf	(_loRa+14)& (0+255),w,b
 11256  0002AA  5CDE               	subwf	postinc2,w,c
 11257  0002AC  510F               	movf	(_loRa+15)& (0+255),w,b
 11258  0002AE  58DE               	subwfb	postinc2,w,c
 11259  0002B0  E322               	bnc	l14222
 11260                           
 11261                           ; BSR set to: 2
 11262                           ;lorawan.c: 1225: {
 11263                           ;lorawan.c: 1226: if ( (hdr->members.fCnt - loRa.fMcastCntDown.members.valueLow) > loRa.
      +                          protocolParameters.maxMultiFcntGap )
 11264  0002B2  DA05               	call	PL24	;call to abstracted procedure
 11265  0002B4  DACB               	call	PL252	;call to abstracted procedure
 11266  0002B6  510E               	movf	(_loRa+14)& (0+255),w,b
 11267  0002B8  0100               	movlb	0	; () banked
 11268  0002BA  5FE0               	subwf	??_LORAWAN_RxDone& (0+255),f,b
 11269  0002BC  0102               	movlb	2	; () banked
 11270  0002BE  510F               	movf	(_loRa+15)& (0+255),w,b
 11271  0002C0  DAF4               	call	PL426	;call to abstracted procedure
 11272  0002C2  5D9E               	subwf	(_loRa+158)& (0+255),w,b
 11273  0002C4  0100               	movlb	0	; () banked
 11274  0002C6  51E1               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 11275  0002C8  0102               	movlb	2	; () banked
 11276  0002CA  599F               	subwfb	(_loRa+159)& (0+255),w,b
 11277  0002CC  E20E               	bc	l14220
 11278  0002CE                     l14208:
 11279                           
 11280                           ; BSR set to: 2
 11281                           ;lorawan.c: 1227: {
 11282                           ;lorawan.c: 1228: if (rxPayload.RxAppData != (0))
 11283  0002CE  0101               	movlb	1	; () banked
 11284  0002D0  5179               	movf	_rxPayload& (0+255),w,b
 11285  0002D2  117A               	iorwf	(_rxPayload+1)& (0+255),w,b
 11286  0002D4  E0B9               	bz	l14182
 11287                           
 11288                           ; BSR set to: 1
 11289                           ;lorawan.c: 1229: {
 11290                           ;lorawan.c: 1230: rxPayload.RxAppData ((0), 0, MCAST_RE_KEYING_NEEDED);
 11291  0002D6  EC96  F00C         	call	PL48	;call to abstracted procedure
 11292  0002DA  0E05               	movlw	5
 11293  0002DC  6F63               	movwf	RxDataDone@status& (0+255),b
 11294  0002DE  D801               	call	u16158
 11295  0002E0  D7B3               	goto	l14182
 11296  0002E2                     u16158:
 11297  0002E2  0005               	push	
 11298  0002E4  0101               	movlb	1	; () banked
 11299  0002E6  6EFA               	movwf	pclath,c
 11300  0002E8  D062               	goto	L6
 11301  0002EA                     l14220:
 11302                           
 11303                           ; BSR set to: 2
 11304                           ;lorawan.c: 1237: else
 11305                           ;lorawan.c: 1238: {
 11306                           ;lorawan.c: 1239: loRa.fMcastCntDown.members.valueLow = hdr->members.fCnt;
 11307  0002EA  D9E9               	call	PL24	;call to abstracted procedure
 11308  0002EC  CFDE F20E          	movff	postinc2,_loRa+14
 11309  0002F0  CFDD F20F          	movff	postdec2,_loRa+15
 11310  0002F4  D00D               	goto	l14240
 11311  0002F6                     l14222:
 11312                           
 11313                           ; BSR set to: 2
 11314                           ;lorawan.c: 1242: else
 11315                           ;lorawan.c: 1243: {
 11316                           ;lorawan.c: 1244: if ( (0 == hdr->members.fCnt) && (0xFFFF == loRa.fMcastCntDown.members
      +                          .valueLow) )
 11317  0002F6  D9E3               	call	PL24	;call to abstracted procedure
 11318  0002F8  50DE               	movf	postinc2,w,c
 11319  0002FA  10DE               	iorwf	postinc2,w,c
 11320  0002FC  E1E8               	bnz	l14208
 11321                           
 11322                           ; BSR set to: 0
 11323  0002FE  0102               	movlb	2	; () banked
 11324  000300  290E               	incf	(_loRa+14)& (0+255),w,b
 11325  000302  E1E5               	bnz	l14208
 11326  000304  290F               	incf	(_loRa+15)& (0+255),w,b
 11327  000306  E1E3               	bnz	l14208
 11328                           
 11329                           ; BSR set to: 2
 11330                           ;lorawan.c: 1245: {
 11331                           ;lorawan.c: 1246: loRa.fMcastCntDown.members.valueLow = 0;
 11332  000308  6B0E               	clrf	(_loRa+14)& (0+255),b
 11333  00030A  6B0F               	clrf	(_loRa+15)& (0+255),b
 11334                           
 11335                           ; BSR set to: 2
 11336                           ;lorawan.c: 1247: loRa.fMcastCntDown.members.valueHigh ++;
 11337  00030C  4B10               	infsnz	(_loRa+16)& (0+255),f,b
 11338  00030E  2B11               	incf	(_loRa+17)& (0+255),f,b
 11339  000310                     l14240:
 11340                           
 11341                           ;lorawan.c: 1259: }
 11342                           ;lorawan.c: 1260: }
 11343                           ;lorawan.c: 1262: if (loRa.fMcastCntDown.value == (4294967295UL))
 11344  000310  0102               	movlb	2	; () banked
 11345  000312  290E               	incf	(_loRa+14)& (0+255),w,b
 11346  000314  E107               	bnz	l14252
 11347  000316  290F               	incf	(_loRa+15)& (0+255),w,b
 11348  000318  E105               	bnz	l14252
 11349  00031A  2910               	incf	(_loRa+16)& (0+255),w,b
 11350  00031C  E103               	bnz	l14252
 11351  00031E  2911               	incf	(_loRa+17)& (0+255),w,b
 11352  000320  E101               	bnz	l14252
 11353  000322  D7D5               	goto	l14208
 11354  000324                     l14252:
 11355                           
 11356                           ; BSR set to: 2
 11357                           ;lorawan.c: 1272: }
 11358                           ;lorawan.c: 1274: if (CLASS_C_RX2_1_OPEN == loRa.macStatus.macState)
 11359  000324  5102               	movf	(_loRa+2)& (0+255),w,b
 11360  000326  0B0F               	andlw	15
 11361  000328  0A08               	xorlw	8
 11362  00032A  E108               	bnz	l14256
 11363                           
 11364                           ; BSR set to: 2
 11365                           ;lorawan.c: 1275: {
 11366                           ;lorawan.c: 1276: SwTimerStop (loRa.receiveWindow1TimerId);
 11367  00032C  51E4               	movf	(_loRa+228)& (0+255),w,b
 11368  00032E  EC65  F030         	call	_SwTimerStop
 11369                           
 11370                           ;lorawan.c: 1277: SwTimerStop (loRa.receiveWindow2TimerId);
 11371  000332  0102               	movlb	2	; () banked
 11372  000334  51E5               	movf	(_loRa+229)& (0+255),w,b
 11373  000336  EC65  F030         	call	_SwTimerStop
 11374                           
 11375                           ;lorawan.c: 1278: }
 11376  00033A  D007               	goto	l14260
 11377  00033C                     l14256:
 11378                           
 11379                           ; BSR set to: 2
 11380                           ;lorawan.c: 1279: else if (RX1_OPEN == loRa.macStatus.macState)
 11381  00033C  5102               	movf	(_loRa+2)& (0+255),w,b
 11382  00033E  0B0F               	andlw	15
 11383  000340  0A03               	xorlw	3
 11384  000342  E103               	bnz	l14260
 11385                           
 11386                           ; BSR set to: 2
 11387                           ;lorawan.c: 1280: {
 11388                           ;lorawan.c: 1281: SwTimerStop (loRa.receiveWindow2TimerId);
 11389  000344  51E5               	movf	(_loRa+229)& (0+255),w,b
 11390  000346  EC65  F030         	call	_SwTimerStop
 11391  00034A                     l14260:
 11392                           
 11393                           ;lorawan.c: 1282: }
 11394                           ;lorawan.c: 1284: buffer = buffer + 8;
 11395  00034A  DA9F               	call	PL336	;call to abstracted procedure
 11396                           
 11397                           ; BSR set to: 1
 11398                           ;lorawan.c: 1286: if ( (sizeof(extractedMic) + hdr->members.fCtrl.fOptsLen + 8) != buffe
      +                          rLength)
 11399  00034C  D9D6               	call	PL60	;call to abstracted procedure
 11400  00034E  D9C7               	call	PL34	;call to abstracted procedure
 11401  000350  DA6A               	call	PL220	;call to abstracted procedure
 11402  000352  E103               	bnz	u16230
 11403  000354  51E1               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 11404  000356  19E3               	xorwf	(??_LORAWAN_RxDone+3)& (0+255),w,b
 11405  000358  E01E               	bz	l1140
 11406  00035A                     u16230:
 11407                           
 11408                           ; BSR set to: 0
 11409                           ;lorawan.c: 1287: {
 11410                           ;lorawan.c: 1288: fPort = *(buffer++);
 11411  00035A  DA72               	call	PL234	;call to abstracted procedure
 11412  00035C  6FE5               	movwf	LORAWAN_RxDone@fPort& (0+255),b
 11413                           
 11414                           ; BSR set to: 0
 11415  00035E  0101               	movlb	1	; () banked
 11416  000360  4B6F               	infsnz	LORAWAN_RxDone@buffer& (0+255),f,b
 11417  000362  2B70               	incf	(LORAWAN_RxDone@buffer+1)& (0+255),f,b
 11418                           
 11419                           ; BSR set to: 1
 11420                           ;lorawan.c: 1290: frmPayloadLength = bufferLength - 8 - sizeof (extractedMic);
 11421  000364  5171               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 11422  000366  0FF4               	addlw	244
 11423  000368  0100               	movlb	0	; () banked
 11424  00036A  6FF6               	movwf	LORAWAN_RxDone@frmPayloadLength& (0+255),b
 11425                           
 11426                           ; BSR set to: 0
 11427                           ;lorawan.c: 1291: bufferIndex = 16 + 9;
 11428  00036C  0E19               	movlw	25
 11429  00036E  6FEC               	movwf	LORAWAN_RxDone@bufferIndex& (0+255),b
 11430                           
 11431                           ; BSR set to: 0
 11432                           ;lorawan.c: 1293: EncryptFRMPayload (buffer, frmPayloadLength - 1, 1, loRa.fMcastCntDown
      +                          .value, loRa.activationParameters.mcastApplicationSessionKey, bufferIndex, radioBuffer, 
      +                          1);
 11433  000370  DA10               	call	PL128	;call to abstracted procedure
 11434  000372  C20E  F0A4         	movff	_loRa+14,EncryptFRMPayload@frameCounter
 11435  000376  C20F  F0A5         	movff	_loRa+15,EncryptFRMPayload@frameCounter+1
 11436  00037A  C210  F0A6         	movff	_loRa+16,EncryptFRMPayload@frameCounter+2
 11437  00037E  C211  F0A7         	movff	_loRa+17,EncryptFRMPayload@frameCounter+3
 11438  000382  0E76               	movlw	low (_loRa+118)
 11439  000384  6FA8               	movwf	EncryptFRMPayload@key& (0+255),b
 11440  000386  0E02               	movlw	high (_loRa+118)
 11441  000388  DA20               	call	PL152	;call to abstracted procedure
 11442  00038A  0E01               	movlw	1
 11443  00038C  6FAD               	movwf	EncryptFRMPayload@multicastStatus& (0+255),b
 11444  00038E  ECDD  F015         	call	_EncryptFRMPayload	;wreg free
 11445                           
 11446                           ; BSR set to: 0
 11447                           ;lorawan.c: 1294: packet = buffer - 1;
 11448  000392  DA27               	call	PL184	;call to abstracted procedure
 11449                           
 11450                           ;lorawan.c: 1295: }
 11451  000394  D001               	goto	l1141
 11452  000396                     l1140:
 11453                           
 11454                           ; BSR set to: 0
 11455                           ;lorawan.c: 1296: else
 11456                           ;lorawan.c: 1297: {
 11457                           ;lorawan.c: 1298: frmPayloadLength = 0;
 11458                           
 11459                           ;lorawan.c: 1299: packet = (0);
 11460  000396  DA8E               	call	PL450	;call to abstracted procedure
 11461  000398                     l1141:
 11462                           
 11463                           ; BSR set to: 0
 11464                           ;lorawan.c: 1300: }
 11465                           ;lorawan.c: 1302: loRa.macStatus.rxDone = 1;
 11466  000398  0102               	movlb	2	; () banked
 11467  00039A  8303               	bsf	(_loRa+3)& (0+255),1,b
 11468                           
 11469                           ; BSR set to: 2
 11470                           ;lorawan.c: 1303: loRa.macStatus.macState = IDLE;
 11471                           
 11472                           ; BSR set to: 2
 11473                           ;lorawan.c: 1305: if (rxPayload.RxAppData != (0))
 11474  00039C  DA03               	call	PL142	;call to abstracted procedure
 11475  00039E  E101 D753          	bz	l14182
 11476                           
 11477                           ; BSR set to: 1
 11478                           ;lorawan.c: 1306: {
 11479                           ;lorawan.c: 1307: rxPayload.RxAppData (packet, frmPayloadLength, MAC_OK);
 11480  0003A2  D9C1               	call	PL96	;call to abstracted procedure
 11481  0003A4  D801               	call	u16258
 11482  0003A6  D750               	goto	l14182
 11483  0003A8                     u16258:
 11484  0003A8  0005               	push	
 11485  0003AA  0101               	movlb	1	; () banked
 11486  0003AC  6EFA               	movwf	pclath,c
 11487  0003AE                     L6:
 11488  0003AE  5179               	movf	_rxPayload& (0+255),w,b
 11489  0003B0  6EFD               	movwf	tosl,c
 11490  0003B2  517A               	movf	(_rxPayload+1)& (0+255),w,b
 11491  0003B4  6EFE               	movwf	tosh,c
 11492  0003B6  50F8               	movf	tblptru,w,c
 11493  0003B8  6EFF               	movwf	tosu,c
 11494  0003BA  50FA               	movf	pclath,w,c
 11495  0003BC  0012               	return		;indir
 11496  0003BE                     l14288:
 11497                           
 11498                           ; BSR set to: 2
 11499                           ;lorawan.c: 1313: }
 11500                           ;lorawan.c: 1316: if (hdr->members.devAddr.value != loRa.activationParameters.deviceAddr
      +                          ess.value)
 11501  0003BE  DA3C               	call	PL222	;call to abstracted procedure
 11502  0003C0  D997               	call	PL42	;call to abstracted procedure
 11503  0003C2  0102               	movlb	2	; () banked
 11504  0003C4  511E               	movf	(_loRa+30)& (0+255),w,b
 11505  0003C6  18DE               	xorwf	postinc2,w,c
 11506  0003C8  E109               	bnz	u16260
 11507  0003CA  511F               	movf	(_loRa+31)& (0+255),w,b
 11508  0003CC  18DE               	xorwf	postinc2,w,c
 11509  0003CE  E106               	bnz	u16260
 11510  0003D0  5120               	movf	(_loRa+32)& (0+255),w,b
 11511  0003D2  18DE               	xorwf	postinc2,w,c
 11512  0003D4  E103               	bnz	u16260
 11513  0003D6  5121               	movf	(_loRa+33)& (0+255),w,b
 11514  0003D8  18DE               	xorwf	postinc2,w,c
 11515  0003DA  E008               	bz	l14300
 11516  0003DC                     u16260:
 11517                           
 11518                           ; BSR set to: 2
 11519                           ;lorawan.c: 1317: {
 11520                           ;lorawan.c: 1318: SetReceptionNotOkState();
 11521  0003DC  EC61  F026         	call	_SetReceptionNotOkState	;wreg free
 11522  0003E0                     l14292:
 11523                           
 11524                           ;lorawan.c: 1319: if (CLASS_C == loRa.deviceClass)
 11525  0003E0  0E02               	movlw	2
 11526  0003E2  0102               	movlb	2	; () banked
 11527  0003E4                     L7:
 11528  0003E4  1912               	xorwf	(_loRa+18)& (0+255),w,b
 11529  0003E6  E101 D72F          	bz	l14182
 11530  0003EA  0012               	return	
 11531  0003EC                     l14300:
 11532                           
 11533                           ; BSR set to: 2
 11534                           ;lorawan.c: 1325: }
 11535                           ;lorawan.c: 1327: AssembleEncryptionBlock (1, hdr->members.fCnt, bufferLength - sizeof (
      +                          computedMic), 0x49, 0);
 11536  0003EC  D968               	call	PL24	;call to abstracted procedure
 11537  0003EE  CFDE F0E0          	movff	postinc2,??_LORAWAN_RxDone
 11538  0003F2  D9AD               	call	PL110	;call to abstracted procedure
 11539  0003F4  6B70               	clrf	AssembleEncryptionBlock@multicastStatus& (0+255),b
 11540  0003F6  0E01               	movlw	1
 11541  0003F8  EC8F  F021         	call	_AssembleEncryptionBlock
 11542                           
 11543                           ;lorawan.c: 1328: memcpy (&radioBuffer[0], aesBuffer, sizeof (aesBuffer));
 11544  0003FC  D9EE               	call	PL162	;call to abstracted procedure
 11545  0003FE  D9B7               	call	PL124	;call to abstracted procedure
 11546  000400  EC94  F028         	call	_memcpy	;wreg free
 11547                           
 11548                           ;lorawan.c: 1329: memcpy (&radioBuffer[16], buffer, bufferLength-sizeof(computedMic));
 11549  000404  D97F               	call	PL90	;call to abstracted procedure
 11550  000406  EC94  F028         	call	_memcpy	;wreg free
 11551                           
 11552                           ; BSR set to: 0
 11553                           ;lorawan.c: 1330: AESCmac(loRa.activationParameters.networkSessionKey, aesBuffer, &radio
      +                          Buffer[0], bufferLength - sizeof(computedMic) + sizeof (aesBuffer));
 11554  00040A  EC73  F00B         	call	PL212	;call to abstracted procedure
 11555  00040E  D9D0               	call	PL148	;call to abstracted procedure
 11556  000410  ECD2  F008         	call	_AESCmac	;wreg free
 11557                           
 11558                           ; BSR set to: 0
 11559                           ;lorawan.c: 1332: memcpy(&computedMic, aesBuffer, sizeof(computedMic));
 11560  000414  0EF0               	movlw	low LORAWAN_RxDone@computedMic
 11561  000416  D991               	call	PL98	;call to abstracted procedure
 11562  000418  EC94  F028         	call	_memcpy	;wreg free
 11563                           
 11564                           ; BSR set to: 0
 11565                           ;lorawan.c: 1333: extractedMic = ExtractMic (&buffer[0], bufferLength);
 11566  00041C  D9F4               	call	PL188	;call to abstracted procedure
 11567  00041E  EC40  F02B         	call	_ExtractMic	;wreg free
 11568  000422  D9AE               	call	PL126	;call to abstracted procedure
 11569                           
 11570                           ; BSR set to: 0
 11571                           ;lorawan.c: 1336: if (computedMic != extractedMic)
 11572  000424  51E8               	movf	LORAWAN_RxDone@extractedMic& (0+255),w,b
 11573  000426  19F0               	xorwf	LORAWAN_RxDone@computedMic& (0+255),w,b
 11574  000428  E109               	bnz	u16280
 11575  00042A  51E9               	movf	(LORAWAN_RxDone@extractedMic+1)& (0+255),w,b
 11576  00042C  19F1               	xorwf	(LORAWAN_RxDone@computedMic+1)& (0+255),w,b
 11577  00042E  E106               	bnz	u16280
 11578  000430  51EA               	movf	(LORAWAN_RxDone@extractedMic+2)& (0+255),w,b
 11579  000432  19F2               	xorwf	(LORAWAN_RxDone@computedMic+2)& (0+255),w,b
 11580  000434  E103               	bnz	u16280
 11581  000436  51EB               	movf	(LORAWAN_RxDone@extractedMic+3)& (0+255),w,b
 11582  000438  19F3               	xorwf	(LORAWAN_RxDone@computedMic+3)& (0+255),w,b
 11583  00043A  E003               	bz	l14320
 11584  00043C                     u16280:
 11585                           
 11586                           ; BSR set to: 0
 11587                           ;lorawan.c: 1337: {
 11588                           ;lorawan.c: 1338: SetReceptionNotOkState();
 11589  00043C  EC61  F026         	call	_SetReceptionNotOkState	;wreg free
 11590  000440  D7CF               	goto	l14292
 11591  000442                     l14320:
 11592                           
 11593                           ; BSR set to: 0
 11594                           ;lorawan.c: 1345: }
 11595                           ;lorawan.c: 1348: if (hdr->members.fCnt >= loRa.fCntDown.members.valueLow)
 11596  000442  D945               	call	PL26	;call to abstracted procedure
 11597  000444  510A               	movf	(_loRa+10)& (0+255),w,b
 11598  000446  5CDE               	subwf	postinc2,w,c
 11599  000448  510B               	movf	(_loRa+11)& (0+255),w,b
 11600  00044A  58DE               	subwfb	postinc2,w,c
 11601  00044C  E329               	bnc	l14350
 11602                           
 11603                           ; BSR set to: 2
 11604                           ;lorawan.c: 1349: {
 11605                           ;lorawan.c: 1350: if ((hdr->members.fCnt - loRa.fCntDown.members.valueLow) > loRa.protoc
      +                          olParameters.maxFcntGap)
 11606  00044E  D937               	call	PL24	;call to abstracted procedure
 11607  000450  D9FD               	call	PL252	;call to abstracted procedure
 11608  000452  510A               	movf	(_loRa+10)& (0+255),w,b
 11609  000454  0100               	movlb	0	; () banked
 11610  000456  5FE0               	subwf	??_LORAWAN_RxDone& (0+255),f,b
 11611  000458  0102               	movlb	2	; () banked
 11612  00045A  510B               	movf	(_loRa+11)& (0+255),w,b
 11613  00045C  DA26               	call	PL426	;call to abstracted procedure
 11614  00045E  5D9C               	subwf	(_loRa+156)& (0+255),w,b
 11615  000460  0100               	movlb	0	; () banked
 11616  000462  51E1               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 11617  000464  0102               	movlb	2	; () banked
 11618  000466  599D               	subwfb	(_loRa+157)& (0+255),w,b
 11619  000468  E218               	bc	l14348
 11620                           
 11621                           ; BSR set to: 2
 11622                           ;lorawan.c: 1351: {
 11623                           ;lorawan.c: 1352: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 0;
 11624  00046A  9100               	bcf	_loRa& (0+255),0,b
 11625                           
 11626                           ; BSR set to: 2
 11627                           ;lorawan.c: 1353: loRa.macStatus.macState = IDLE;
 11628                           
 11629                           ; BSR set to: 2
 11630                           ;lorawan.c: 1354: if (rxPayload.RxAppData != (0))
 11631  00046C  D99B               	call	PL142	;call to abstracted procedure
 11632  00046E  E012               	bz	l14334
 11633                           
 11634                           ; BSR set to: 1
 11635                           ;lorawan.c: 1355: {
 11636                           ;lorawan.c: 1356: loRa.lorawanMacStatus.synchronization = 0;
 11637  000470  0102               	movlb	2	; () banked
 11638  000472  9B00               	bcf	_loRa& (0+255),5,b
 11639                           
 11640                           ; BSR set to: 2
 11641                           ;lorawan.c: 1357: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
 11642  000474  EC96  F00C         	call	PL48	;call to abstracted procedure
 11643  000478  6F63               	movwf	RxDataDone@status& (0+255),b
 11644  00047A  D801               	call	u16338
 11645  00047C  D00B               	goto	l14334
 11646  00047E                     u16338:
 11647  00047E  0005               	push	
 11648  000480  0101               	movlb	1	; () banked
 11649  000482  6EFA               	movwf	pclath,c
 11650  000484  5179               	movf	_rxPayload& (0+255),w,b
 11651  000486  6EFD               	movwf	tosl,c
 11652  000488  517A               	movf	(_rxPayload+1)& (0+255),w,b
 11653  00048A  6EFE               	movwf	tosh,c
 11654  00048C  50F8               	movf	tblptru,w,c
 11655  00048E  6EFF               	movwf	tosu,c
 11656  000490  50FA               	movf	pclath,w,c
 11657  000492  0012               	return		;indir
 11658  000494                     l14334:
 11659                           
 11660                           ; BSR set to: 1
 11661                           ;lorawan.c: 1358: }
 11662                           ;lorawan.c: 1359: loRa.macStatus.rxDone = 0;
 11663  000494  0102               	movlb	2	; () banked
 11664  000496  9303               	bcf	(_loRa+3)& (0+255),1,b
 11665  000498  D01E               	goto	l14370
 11666  00049A                     l14348:
 11667                           
 11668                           ; BSR set to: 2
 11669                           ;lorawan.c: 1370: else
 11670                           ;lorawan.c: 1371: {
 11671                           ;lorawan.c: 1372: loRa.fCntDown.members.valueLow = hdr->members.fCnt;
 11672  00049A  D911               	call	PL24	;call to abstracted procedure
 11673  00049C  D9FC               	call	PL384	;call to abstracted procedure
 11674  00049E  D012               	goto	l14368
 11675  0004A0                     l14350:
 11676                           
 11677                           ; BSR set to: 2
 11678                           ;lorawan.c: 1375: else
 11679                           ;lorawan.c: 1376: {
 11680                           ;lorawan.c: 1377: if((hdr->members.fCnt == 0) && (loRa.fCntDown.members.valueLow == 0xFF
      +                          FF))
 11681  0004A0  D90E               	call	PL24	;call to abstracted procedure
 11682  0004A2  50DE               	movf	postinc2,w,c
 11683  0004A4  10DE               	iorwf	postinc2,w,c
 11684  0004A6  E10B               	bnz	l14358
 11685                           
 11686                           ; BSR set to: 0
 11687  0004A8  0102               	movlb	2	; () banked
 11688  0004AA  290A               	incf	(_loRa+10)& (0+255),w,b
 11689  0004AC  E108               	bnz	l14358
 11690  0004AE  290B               	incf	(_loRa+11)& (0+255),w,b
 11691  0004B0  E106               	bnz	l14358
 11692                           
 11693                           ; BSR set to: 2
 11694                           ;lorawan.c: 1378: {
 11695                           ;lorawan.c: 1380: loRa.fCntDown.members.valueLow = hdr->members.fCnt;
 11696  0004B2  D905               	call	PL24	;call to abstracted procedure
 11697  0004B4  D9F0               	call	PL384	;call to abstracted procedure
 11698                           
 11699                           ; BSR set to: 0
 11700                           ;lorawan.c: 1381: loRa.fCntDown.members.valueHigh ++;
 11701  0004B6  0102               	movlb	2	; () banked
 11702  0004B8  4B0C               	infsnz	(_loRa+12)& (0+255),f,b
 11703  0004BA  2B0D               	incf	(_loRa+13)& (0+255),f,b
 11704                           
 11705                           ;lorawan.c: 1382: }
 11706  0004BC  D003               	goto	l14368
 11707  0004BE                     l14358:
 11708                           
 11709                           ;lorawan.c: 1383: else
 11710                           ;lorawan.c: 1384: {
 11711                           ;lorawan.c: 1385: SetReceptionNotOkState();
 11712  0004BE  EC61  F026         	call	_SetReceptionNotOkState	;wreg free
 11713  0004C2  D78E               	goto	l14292
 11714  0004C4                     l14368:
 11715                           
 11716                           ;lorawan.c: 1393: }
 11717                           ;lorawan.c: 1394: }
 11718                           ;lorawan.c: 1396: if (loRa.fCntDown.value == (4294967295UL))
 11719  0004C4  0102               	movlb	2	; () banked
 11720  0004C6  290A               	incf	(_loRa+10)& (0+255),w,b
 11721  0004C8  E109               	bnz	l14380
 11722  0004CA  290B               	incf	(_loRa+11)& (0+255),w,b
 11723  0004CC  E107               	bnz	l14380
 11724  0004CE  290C               	incf	(_loRa+12)& (0+255),w,b
 11725  0004D0  E105               	bnz	l14380
 11726  0004D2  290D               	incf	(_loRa+13)& (0+255),w,b
 11727  0004D4  E103               	bnz	l14380
 11728  0004D6                     l14370:
 11729                           
 11730                           ; BSR set to: 2
 11731                           ;lorawan.c: 1397: {
 11732                           ;lorawan.c: 1400: loRa.macStatus.rejoinNeeded = 1;
 11733  0004D6  8304               	bsf	(_loRa+4)& (0+255),1,b
 11734                           
 11735                           ; BSR set to: 2
 11736                           ;lorawan.c: 1401: if (CLASS_C == loRa.deviceClass)
 11737  0004D8  0E02               	movlw	2
 11738  0004DA  D784               	goto	L7
 11739  0004DC                     l14380:
 11740                           
 11741                           ; BSR set to: 2
 11742                           ;lorawan.c: 1407: }
 11743                           ;lorawan.c: 1410: if (loRa.macStatus.macState == RX1_OPEN)
 11744  0004DC  5102               	movf	(_loRa+2)& (0+255),w,b
 11745  0004DE  0B0F               	andlw	15
 11746  0004E0  0A03               	xorlw	3
 11747  0004E2  E103               	bnz	l14384
 11748                           
 11749                           ; BSR set to: 2
 11750                           ;lorawan.c: 1411: {
 11751                           ;lorawan.c: 1412: SwTimerStop (loRa.receiveWindow2TimerId);
 11752  0004E4  51E5               	movf	(_loRa+229)& (0+255),w,b
 11753  0004E6  EC65  F030         	call	_SwTimerStop
 11754  0004EA                     l14384:
 11755                           
 11756                           ;lorawan.c: 1413: }
 11757                           ;lorawan.c: 1415: loRa.counterRepetitionsUnconfirmedUplink = 1;
 11758  0004EA  0E01               	movlw	1
 11759  0004EC  0102               	movlb	2	; () banked
 11760  0004EE  6FD8               	movwf	(_loRa+216)& (0+255),b
 11761                           
 11762                           ; BSR set to: 2
 11763                           ;lorawan.c: 1417: CheckFlags (hdr);
 11764  0004F0  C0F7  F060         	movff	LORAWAN_RxDone@hdr,CheckFlags@hdr
 11765  0004F4  C0F8  F061         	movff	LORAWAN_RxDone@hdr+1,CheckFlags@hdr+1
 11766  0004F8  EC4B  F02A         	call	_CheckFlags	;wreg free
 11767                           
 11768                           ;lorawan.c: 1419: if (hdr->members.fCtrl.fOptsLen != 0)
 11769  0004FC  0100               	movlb	0	; () banked
 11770  0004FE  D8EF               	call	PL34	;call to abstracted procedure
 11771  000500  E00C               	bz	l14392
 11772                           
 11773                           ; BSR set to: 0
 11774                           ;lorawan.c: 1420: {
 11775                           ;lorawan.c: 1421: buffer = MacExecuteCommands(hdr->members.MacCommands, hdr->members.fCt
      +                          rl.fOptsLen);
 11776  000502  0E08               	movlw	8
 11777  000504  25F7               	addwf	LORAWAN_RxDone@hdr& (0+255),w,b
 11778  000506  6FA4               	movwf	MacExecuteCommands@buffer& (0+255),b
 11779  000508  0E00               	movlw	0
 11780  00050A  21F8               	addwfc	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11781  00050C  6FA5               	movwf	(MacExecuteCommands@buffer+1)& (0+255),b
 11782  00050E  D8E7               	call	PL34	;call to abstracted procedure
 11783  000510  6FA6               	movwf	MacExecuteCommands@fOptsLen& (0+255),b
 11784  000512  EC5F  F012         	call	_MacExecuteCommands	;wreg free
 11785  000516  D9C4               	call	PL398	;call to abstracted procedure
 11786                           
 11787                           ;lorawan.c: 1422: }
 11788  000518  D001               	goto	l14394
 11789  00051A                     l14392:
 11790                           
 11791                           ; BSR set to: 0
 11792                           ;lorawan.c: 1423: else
 11793                           ;lorawan.c: 1424: {
 11794                           ;lorawan.c: 1425: buffer = buffer + 8;
 11795  00051A  D9B7               	call	PL336	;call to abstracted procedure
 11796  00051C                     l14394:
 11797                           
 11798                           ;lorawan.c: 1426: }
 11799                           ;lorawan.c: 1427: if ( (sizeof(extractedMic) + hdr->members.fCtrl.fOptsLen + 8) != buffe
      +                          rLength)
 11800  00051C  0101               	movlb	1	; () banked
 11801  00051E  D8ED               	call	PL60	;call to abstracted procedure
 11802  000520  D8DE               	call	PL34	;call to abstracted procedure
 11803  000522  D981               	call	PL220	;call to abstracted procedure
 11804  000524  E103               	bnz	u16420
 11805  000526  51E1               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 11806  000528  19E3               	xorwf	(??_LORAWAN_RxDone+3)& (0+255),w,b
 11807  00052A  E040               	bz	l1161
 11808  00052C                     u16420:
 11809                           
 11810                           ; BSR set to: 0
 11811                           ;lorawan.c: 1428: {
 11812                           ;lorawan.c: 1429: fPort = *(buffer++);
 11813  00052C  D989               	call	PL234	;call to abstracted procedure
 11814  00052E  6FE5               	movwf	LORAWAN_RxDone@fPort& (0+255),b
 11815                           
 11816                           ; BSR set to: 0
 11817  000530  0101               	movlb	1	; () banked
 11818  000532  4B6F               	infsnz	LORAWAN_RxDone@buffer& (0+255),f,b
 11819  000534  2B70               	incf	(LORAWAN_RxDone@buffer+1)& (0+255),f,b
 11820                           
 11821                           ; BSR set to: 1
 11822                           ;lorawan.c: 1431: frmPayloadLength = bufferLength - 8 - hdr->members.fCtrl.fOptsLen - si
      +                          zeof (extractedMic);
 11823  000536  0100               	movlb	0	; () banked
 11824  000538  D8D2               	call	PL34	;call to abstracted procedure
 11825  00053A  6FE0               	movwf	??_LORAWAN_RxDone& (0+255),b
 11826  00053C  51E0               	movf	??_LORAWAN_RxDone& (0+255),w,b
 11827  00053E  0101               	movlb	1	; () banked
 11828  000540  5D71               	subwf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 11829  000542  0FF4               	addlw	244
 11830  000544  0100               	movlb	0	; () banked
 11831  000546  6FF6               	movwf	LORAWAN_RxDone@frmPayloadLength& (0+255),b
 11832                           
 11833                           ; BSR set to: 0
 11834                           ;lorawan.c: 1432: bufferIndex = 16 + 8 + hdr->members.fCtrl.fOptsLen + sizeof (fPort);
 11835  000548  D8CA               	call	PL34	;call to abstracted procedure
 11836  00054A  0F19               	addlw	25
 11837  00054C  6FEC               	movwf	LORAWAN_RxDone@bufferIndex& (0+255),b
 11838                           
 11839                           ; BSR set to: 0
 11840                           ;lorawan.c: 1434: if (fPort != 0)
 11841  00054E  51E5               	movf	LORAWAN_RxDone@fPort& (0+255),w,b
 11842  000550  E00A               	bz	l14410
 11843                           
 11844                           ; BSR set to: 0
 11845                           ;lorawan.c: 1435: {
 11846                           ;lorawan.c: 1436: EncryptFRMPayload (buffer, frmPayloadLength - 1, 1, loRa.fCntDown.valu
      +                          e, loRa.activationParameters.applicationSessionKey, bufferIndex, radioBuffer, 0);
 11847  000552  D91F               	call	PL128	;call to abstracted procedure
 11848  000554  D95F               	call	PL218	;call to abstracted procedure
 11849  000556  EC8C  F00B         	call	PL414	;call to abstracted procedure
 11850  00055A  D937               	call	PL152	;call to abstracted procedure
 11851  00055C  6BAD               	clrf	EncryptFRMPayload@multicastStatus& (0+255),b
 11852  00055E  ECDD  F015         	call	_EncryptFRMPayload	;wreg free
 11853                           
 11854                           ; BSR set to: 0
 11855                           ;lorawan.c: 1437: packet = buffer - 1;
 11856  000562  D93F               	call	PL184	;call to abstracted procedure
 11857                           
 11858                           ;lorawan.c: 1438: }
 11859  000564  D024               	goto	l14420
 11860  000566                     l14410:
 11861                           
 11862                           ; BSR set to: 0
 11863                           ;lorawan.c: 1439: else
 11864                           ;lorawan.c: 1440: {
 11865                           ;lorawan.c: 1442: if(bufferLength > (13 + hdr->members.fCtrl.fOptsLen))
 11866  000566  0101               	movlb	1	; () banked
 11867  000568  D8C8               	call	PL60	;call to abstracted procedure
 11868  00056A  D8B9               	call	PL34	;call to abstracted procedure
 11869  00056C  6FE2               	movwf	(??_LORAWAN_RxDone+2)& (0+255),b
 11870  00056E  6BE3               	clrf	(??_LORAWAN_RxDone+3)& (0+255),b
 11871  000570  0E0D               	movlw	13
 11872  000572  27E2               	addwf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 11873  000574  0E00               	movlw	0
 11874  000576  23E3               	addwfc	(??_LORAWAN_RxDone+3)& (0+255),f,b
 11875  000578  51E0               	movf	??_LORAWAN_RxDone& (0+255),w,b
 11876  00057A  5DE2               	subwf	(??_LORAWAN_RxDone+2)& (0+255),w,b
 11877  00057C  51E3               	movf	(??_LORAWAN_RxDone+3)& (0+255),w,b
 11878  00057E  0A80               	xorlw	128
 11879  000580  6FE4               	movwf	(??_LORAWAN_RxDone+4)& (0+255),b
 11880  000582  51E1               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 11881  000584  0A80               	xorlw	128
 11882  000586  59E4               	subwfb	(??_LORAWAN_RxDone+4)& (0+255),w,b
 11883  000588  E211               	bc	l1161
 11884                           
 11885                           ; BSR set to: 0
 11886                           ;lorawan.c: 1443: {
 11887                           ;lorawan.c: 1445: EncryptFRMPayload (buffer, frmPayloadLength - 1, 1, loRa.fCntDown.valu
      +                          e, loRa.activationParameters.networkSessionKey, bufferIndex, radioBuffer, 0);
 11888  00058A  D903               	call	PL128	;call to abstracted procedure
 11889  00058C  D943               	call	PL218	;call to abstracted procedure
 11890  00058E  EC88  F00B         	call	PL412	;call to abstracted procedure
 11891  000592  D91B               	call	PL152	;call to abstracted procedure
 11892  000594  6BAD               	clrf	EncryptFRMPayload@multicastStatus& (0+255),b
 11893  000596  ECDD  F015         	call	_EncryptFRMPayload	;wreg free
 11894                           
 11895                           ; BSR set to: 0
 11896                           ;lorawan.c: 1446: buffer = MacExecuteCommands(buffer, frmPayloadLength - 1 );
 11897  00059A  C16F  F0A4         	movff	LORAWAN_RxDone@buffer,MacExecuteCommands@buffer
 11898  00059E  C170  F0A5         	movff	LORAWAN_RxDone@buffer+1,MacExecuteCommands@buffer+1
 11899  0005A2  05F6               	decf	LORAWAN_RxDone@frmPayloadLength& (0+255),w,b
 11900  0005A4  6FA6               	movwf	MacExecuteCommands@fOptsLen& (0+255),b
 11901  0005A6  EC5F  F012         	call	_MacExecuteCommands	;wreg free
 11902  0005AA  D97A               	call	PL398	;call to abstracted procedure
 11903  0005AC                     l1161:
 11904                           
 11905                           ; BSR set to: 0
 11906                           ;lorawan.c: 1453: else
 11907                           ;lorawan.c: 1454: {
 11908                           ;lorawan.c: 1455: frmPayloadLength = 0;
 11909                           
 11910                           ;lorawan.c: 1456: packet = (0);
 11911  0005AC  D983               	call	PL450	;call to abstracted procedure
 11912  0005AE                     l14420:
 11913                           
 11914                           ; BSR set to: 0
 11915                           ;lorawan.c: 1457: }
 11916                           ;lorawan.c: 1459: loRa.counterRepetitionsUnconfirmedUplink = 1;
 11917  0005AE  0E01               	movlw	1
 11918  0005B0  0102               	movlb	2	; () banked
 11919  0005B2  6FD8               	movwf	(_loRa+216)& (0+255),b
 11920                           
 11921                           ; BSR set to: 2
 11922                           ;lorawan.c: 1461: loRa.adrAckCnt = 0;
 11923  0005B4  6BD0               	clrf	(_loRa+208)& (0+255),b
 11924  0005B6  6BD1               	clrf	(_loRa+209)& (0+255),b
 11925                           
 11926                           ; BSR set to: 2
 11927                           ;lorawan.c: 1462: loRa.counterAdrAckDelay = 0;
 11928  0005B8  6BEE               	clrf	(_loRa+238)& (0+255),b
 11929                           
 11930                           ; BSR set to: 2
 11931                           ;lorawan.c: 1463: loRa.lorawanMacStatus.adrAckRequest = 0;
 11932  0005BA  9900               	bcf	_loRa& (0+255),4,b
 11933                           
 11934                           ; BSR set to: 2
 11935                           ;lorawan.c: 1465: loRa.macStatus.rxDone = 1;
 11936  0005BC  8303               	bsf	(_loRa+3)& (0+255),1,b
 11937                           
 11938                           ; BSR set to: 2
 11939                           ;lorawan.c: 1467: if ( loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage == 1 )
 11940  0005BE  A100               	btfss	_loRa& (0+255),0,b
 11941  0005C0  D034               	goto	l14464
 11942                           
 11943                           ; BSR set to: 2
 11944                           ;lorawan.c: 1468: {
 11945                           ;lorawan.c: 1469: if (hdr->members.fCtrl.ack == 1)
 11946  0005C2  0100               	movlb	0	; () banked
 11947  0005C4  EE20 F005          	lfsr	2,5
 11948  0005C8  D893               	call	PL42	;call to abstracted procedure
 11949  0005CA  AADF               	btfss	indf2,5,c
 11950  0005CC  D02B               	goto	l14462
 11951                           
 11952                           ; BSR set to: 0
 11953                           ;lorawan.c: 1470: {
 11954                           ;lorawan.c: 1471: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 0;
 11955  0005CE  0102               	movlb	2	; () banked
 11956  0005D0  9100               	bcf	_loRa& (0+255),0,b
 11957                           
 11958                           ; BSR set to: 2
 11959                           ;lorawan.c: 1472: loRa.macStatus.macState = IDLE;
 11960                           
 11961                           ; BSR set to: 2
 11962                           ;lorawan.c: 1473: if (rxPayload.RxAppData != (0))
 11963  0005D2  D8E8               	call	PL142	;call to abstracted procedure
 11964  0005D4  E010               	bz	l14444
 11965                           
 11966                           ; BSR set to: 1
 11967                           ;lorawan.c: 1474: {
 11968                           ;lorawan.c: 1475: loRa.lorawanMacStatus.synchronization = 0;
 11969  0005D6  0102               	movlb	2	; () banked
 11970  0005D8  9B00               	bcf	_loRa& (0+255),5,b
 11971                           
 11972                           ; BSR set to: 2
 11973                           ;lorawan.c: 1476: rxPayload.RxAppData (packet, frmPayloadLength, MAC_OK);
 11974  0005DA  D8A5               	call	PL96	;call to abstracted procedure
 11975  0005DC  D801               	call	u16488
 11976  0005DE  D00B               	goto	l14444
 11977  0005E0                     u16488:
 11978  0005E0  0005               	push	
 11979  0005E2  0101               	movlb	1	; () banked
 11980  0005E4  6EFA               	movwf	pclath,c
 11981  0005E6  5179               	movf	_rxPayload& (0+255),w,b
 11982  0005E8  6EFD               	movwf	tosl,c
 11983  0005EA  517A               	movf	(_rxPayload+1)& (0+255),w,b
 11984  0005EC  6EFE               	movwf	tosh,c
 11985  0005EE  50F8               	movf	tblptru,w,c
 11986  0005F0  6EFF               	movwf	tosu,c
 11987  0005F2  50FA               	movf	pclath,w,c
 11988  0005F4  0012               	return		;indir
 11989  0005F6                     l14444:
 11990                           
 11991                           ; BSR set to: 1
 11992                           ;lorawan.c: 1477: }
 11993                           ;lorawan.c: 1478: loRa.macStatus.rxDone = 0;
 11994  0005F6  0102               	movlb	2	; () banked
 11995  0005F8  9303               	bcf	(_loRa+3)& (0+255),1,b
 11996                           
 11997                           ; BSR set to: 2
 11998                           ;lorawan.c: 1479: if ( (loRa.macStatus.automaticReply == 1) && (loRa.lorawanMacStatus.sy
      +                          nchronization == 0) && ( (loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage == 1) |
      +                          | (loRa.lorawanMacStatus.fPending == 1) ) )
 11999  0005FA  BB02               	btfsc	(_loRa+2)& (0+255),5,b
 12000                           
 12001                           ; BSR set to: 2
 12002  0005FC  BB00               	btfsc	_loRa& (0+255),5,b
 12003  0005FE  D6F0               	goto	l14292
 12004                           
 12005                           ; BSR set to: 2
 12006  000600  B300               	btfsc	_loRa& (0+255),1,b
 12007  000602  D002               	goto	l14454
 12008                           
 12009                           ; BSR set to: 2
 12010  000604  A700               	btfss	_loRa& (0+255),3,b
 12011  000606  D6EC               	goto	l14292
 12012  000608                     l14454:
 12013                           
 12014                           ; BSR set to: 2
 12015                           ;lorawan.c: 1480: {
 12016                           ;lorawan.c: 1481: if (SearchAvailableChannel (loRa.maxChannels, 1, &channelIndex) == OK)
 12017  000608  D927               	call	PL258	;call to abstracted procedure
 12018  00060A  EC8C  F01F         	call	_SearchAvailableChannel
 12019  00060E  0900               	iorlw	0
 12020  000610  E106               	bnz	l14460
 12021                           
 12022                           ; BSR set to: 0
 12023                           ;lorawan.c: 1482: {
 12024                           ;lorawan.c: 1483: LORAWAN_Send (0, 0, 0, 0);
 12025  000612  D8F2               	call	PL186	;call to abstracted procedure
 12026  000614  EC7B  F01E         	call	_LORAWAN_Send
 12027  000618                     l14458:
 12028                           
 12029                           ;lorawan.c: 1484: loRa.lorawanMacStatus.fPending = 0;
 12030  000618  0102               	movlb	2	; () banked
 12031  00061A  9700               	bcf	_loRa& (0+255),3,b
 12032                           
 12033                           ;lorawan.c: 1485: }
 12034  00061C  D6E1               	goto	l14292
 12035  00061E                     l14460:
 12036                           
 12037                           ; BSR set to: 0
 12038                           ;lorawan.c: 1486: else
 12039                           ;lorawan.c: 1487: {
 12040                           ;lorawan.c: 1489: StartReTxTimer();
 12041  00061E  EC6D  F01A         	call	_StartReTxTimer	;wreg free
 12042  000622  D6DE               	goto	l14292
 12043  000624                     l14462:
 12044                           
 12045                           ; BSR set to: 0
 12046                           ;lorawan.c: 1494: else
 12047                           ;lorawan.c: 1495: {
 12048                           ;lorawan.c: 1496: UpdateRetransmissionAckTimeoutState ();
 12049  000624  ECBF  F028         	call	_UpdateRetransmissionAckTimeoutState	;wreg free
 12050  000628  D6DB               	goto	l14292
 12051  00062A                     l14464:
 12052                           
 12053                           ; BSR set to: 2
 12054                           ;lorawan.c: 1499: else
 12055                           ;lorawan.c: 1500: {
 12056                           ;lorawan.c: 1501: loRa.macStatus.macState = IDLE;
 12057                           
 12058                           ; BSR set to: 2
 12059                           ;lorawan.c: 1503: if (rxPayload.RxAppData != (0))
 12060  00062A  D8BC               	call	PL142	;call to abstracted procedure
 12061  00062C  E010               	bz	l14472
 12062                           
 12063                           ; BSR set to: 1
 12064                           ;lorawan.c: 1504: {
 12065                           ;lorawan.c: 1505: loRa.lorawanMacStatus.synchronization = 0;
 12066  00062E  0102               	movlb	2	; () banked
 12067  000630  9B00               	bcf	_loRa& (0+255),5,b
 12068                           
 12069                           ; BSR set to: 2
 12070                           ;lorawan.c: 1506: rxPayload.RxAppData (packet, frmPayloadLength, MAC_OK);
 12071  000632  D879               	call	PL96	;call to abstracted procedure
 12072  000634  D801               	call	u16558
 12073  000636  D00B               	goto	l14472
 12074  000638                     u16558:
 12075  000638  0005               	push	
 12076  00063A  0101               	movlb	1	; () banked
 12077  00063C  6EFA               	movwf	pclath,c
 12078  00063E  5179               	movf	_rxPayload& (0+255),w,b
 12079  000640  6EFD               	movwf	tosl,c
 12080  000642  517A               	movf	(_rxPayload+1)& (0+255),w,b
 12081  000644  6EFE               	movwf	tosh,c
 12082  000646  50F8               	movf	tblptru,w,c
 12083  000648  6EFF               	movwf	tosu,c
 12084  00064A  50FA               	movf	pclath,w,c
 12085  00064C  0012               	return		;indir
 12086  00064E                     l14472:
 12087                           
 12088                           ; BSR set to: 1
 12089                           ;lorawan.c: 1507: }
 12090                           ;lorawan.c: 1509: if ( (loRa.macStatus.automaticReply == 1) && (loRa.lorawanMacStatus.sy
      +                          nchronization == 0) && ( (loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage == 1) |
      +                          | (loRa.lorawanMacStatus.fPending == 1) ) )
 12091  00064E  0102               	movlb	2	; () banked
 12092  000650  BB02               	btfsc	(_loRa+2)& (0+255),5,b
 12093                           
 12094                           ; BSR set to: 2
 12095  000652  BB00               	btfsc	_loRa& (0+255),5,b
 12096  000654  D6C5               	goto	l14292
 12097                           
 12098                           ; BSR set to: 2
 12099  000656  B300               	btfsc	_loRa& (0+255),1,b
 12100  000658  D002               	goto	l14480
 12101                           
 12102                           ; BSR set to: 2
 12103  00065A  A700               	btfss	_loRa& (0+255),3,b
 12104  00065C  D6C1               	goto	l14292
 12105  00065E                     l14480:
 12106                           
 12107                           ; BSR set to: 2
 12108                           ;lorawan.c: 1510: {
 12109                           ;lorawan.c: 1511: if (SearchAvailableChannel (loRa.maxChannels, 1, &channelIndex) == OK)
 12110  00065E  D8FC               	call	PL258	;call to abstracted procedure
 12111  000660  EC8C  F01F         	call	_SearchAvailableChannel
 12112  000664  0900               	iorlw	0
 12113  000666  E1DB               	bnz	l14460
 12114                           
 12115                           ; BSR set to: 0
 12116                           ;lorawan.c: 1512: {
 12117                           ;lorawan.c: 1513: LORAWAN_Send (0, 0, 0, 0);
 12118  000668  D8C7               	call	PL186	;call to abstracted procedure
 12119  00066A  EC7B  F01E         	call	_LORAWAN_Send
 12120  00066E  D7D4               	goto	l14458
 12121  000670                     l14498:
 12122                           
 12123                           ; BSR set to: 2
 12124                           ;lorawan.c: 1537: else
 12125                           ;lorawan.c: 1538: {
 12126                           ;lorawan.c: 1540: if ( rxPayload.RxAppData != (0) )
 12127  000670  0101               	movlb	1	; () banked
 12128  000672  5179               	movf	_rxPayload& (0+255),w,b
 12129  000674  117A               	iorwf	(_rxPayload+1)& (0+255),w,b
 12130  000676  B4D8               	btfsc	status,2,c
 12131  000678  0012               	return	
 12132                           
 12133                           ; BSR set to: 1
 12134                           ;lorawan.c: 1541: {
 12135                           ;lorawan.c: 1542: if ((RADIO_GetStatus() & (1 << (3))) == 0)
 12136  00067A  EC07  F031         	call	_RADIO_GetStatus	;wreg free
 12137  00067E  0100               	movlb	0	; () banked
 12138  000680  6FE0               	movwf	??_LORAWAN_RxDone& (0+255),b
 12139  000682  B7E0               	btfsc	??_LORAWAN_RxDone& (0+255),3,b
 12140  000684  D00E               	goto	l14504
 12141                           
 12142                           ; BSR set to: 0
 12143                           ;lorawan.c: 1543: {
 12144                           ;lorawan.c: 1544: rxPayload.RxAppData(buffer, bufferLength, RADIO_OK);
 12145  000686  D8F5               	call	PL298	;call to abstracted procedure
 12146  000688  0E03               	movlw	3
 12147  00068A  6F63               	movwf	RxDataDone@status& (0+255),b
 12148  00068C  0005               	push	
 12149  00068E  0101               	movlb	1	; () banked
 12150  000690  6EFA               	movwf	pclath,c
 12151  000692  5179               	movf	_rxPayload& (0+255),w,b
 12152  000694  6EFD               	movwf	tosl,c
 12153  000696  517A               	movf	(_rxPayload+1)& (0+255),w,b
 12154  000698  6EFE               	movwf	tosh,c
 12155  00069A  50F8               	movf	tblptru,w,c
 12156  00069C  6EFF               	movwf	tosu,c
 12157  00069E  50FA               	movf	pclath,w,c
 12158  0006A0  0012               	return		;indir
 12159  0006A2                     l14504:
 12160                           
 12161                           ; BSR set to: 0
 12162                           ;lorawan.c: 1546: else
 12163                           ;lorawan.c: 1547: {
 12164                           ;lorawan.c: 1548: rxPayload.RxAppData(buffer, bufferLength, RADIO_NOT_OK);
 12165  0006A2  D8E7               	call	PL298	;call to abstracted procedure
 12166  0006A4  0E02               	movlw	2
 12167  0006A6  6F63               	movwf	RxDataDone@status& (0+255),b
 12168  0006A8  0005               	push	
 12169  0006AA  0101               	movlb	1	; () banked
 12170  0006AC  6EFA               	movwf	pclath,c
 12171  0006AE  5179               	movf	_rxPayload& (0+255),w,b
 12172  0006B0  6EFD               	movwf	tosl,c
 12173  0006B2  517A               	movf	(_rxPayload+1)& (0+255),w,b
 12174  0006B4  6EFE               	movwf	tosh,c
 12175  0006B6  50F8               	movf	tblptru,w,c
 12176  0006B8  6EFF               	movwf	tosu,c
 12177  0006BA  50FA               	movf	pclath,w,c
 12178  0006BC  0012               	return		;indir
 12179  0006BE                     __end_of_LORAWAN_RxDone:
 12180                           	opt stack 0
 12181  0006BE                     PL24:
 12182                           	opt stack 12
 12183  0006BE  0100               	movlb	0	; () banked
 12184  0006C0  EE20 F006          	lfsr	2,6
 12185  0006C4  51F7               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12186  0006C6  26D9               	addwf	fsr2l,f,c
 12187  0006C8  51F8               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12188  0006CA  22DA               	addwfc	fsr2h,f,c
 12189  0006CC  0012               	return	
 12190  0006CE                     __end_ofPL24:
 12191                           	opt stack 0
 12192  0006CE                     PL26:
 12193                           	opt stack 12
 12194  0006CE  EE20 F006          	lfsr	2,6
 12195  0006D2  51F7               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12196  0006D4  26D9               	addwf	fsr2l,f,c
 12197  0006D6  51F8               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12198  0006D8  22DA               	addwfc	fsr2h,f,c
 12199  0006DA  0102               	movlb	2	; () banked
 12200  0006DC  0012               	return	
 12201  0006DE                     __end_ofPL26:
 12202                           	opt stack 0
 12203  0006DE                     PL34:
 12204                           	opt stack 12
 12205  0006DE  EE20 F005          	lfsr	2,5
 12206  0006E2  51F7               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12207  0006E4  26D9               	addwf	fsr2l,f,c
 12208  0006E6  51F8               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12209  0006E8  22DA               	addwfc	fsr2h,f,c
 12210  0006EA  50DF               	movf	223,w,c
 12211  0006EC  0B0F               	andlw	15
 12212  0006EE  0012               	return	
 12213  0006F0                     __end_ofPL34:
 12214                           	opt stack 0
 12215  0006F0                     PL42:
 12216                           	opt stack 12
 12217  0006F0  51F7               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12218  0006F2  26D9               	addwf	fsr2l,f,c
 12219  0006F4  51F8               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12220  0006F6  22DA               	addwfc	fsr2h,f,c
 12221  0006F8  0012               	return	
 12222  0006FA                     __end_ofPL42:
 12223                           	opt stack 0
 12224  0006FA                     PL60:
 12225                           	opt stack 12
 12226  0006FA  5171               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 12227  0006FC  0100               	movlb	0	; () banked
 12228  0006FE  6FE0               	movwf	??_LORAWAN_RxDone& (0+255),b
 12229  000700  6BE1               	clrf	(??_LORAWAN_RxDone+1)& (0+255),b
 12230  000702  0012               	return	
 12231  000704                     __end_ofPL60:
 12232                           	opt stack 0
 12233  000704                     PL90:
 12234                           	opt stack 12
 12235  000704  0EF0               	movlw	low (_radioBuffer+16)
 12236  000706  6F60               	movwf	memcpy@d1& (0+255),b
 12237  000708  0E04               	movlw	high (_radioBuffer+16)
 12238  00070A  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 12239  00070C  C16F  F062         	movff	LORAWAN_RxDone@buffer,memcpy@s1
 12240  000710  C170  F063         	movff	LORAWAN_RxDone@buffer+1,memcpy@s1+1
 12241  000714  0EFC               	movlw	252
 12242  000716  0101               	movlb	1	; () banked
 12243  000718  2571               	addwf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 12244  00071A  0100               	movlb	0	; () banked
 12245  00071C  6F64               	movwf	memcpy@n& (0+255),b
 12246  00071E  6B65               	clrf	(memcpy@n+1)& (0+255),b
 12247  000720  0EFF               	movlw	255
 12248  000722  2365               	addwfc	(memcpy@n+1)& (0+255),f,b
 12249  000724  0CFF               	retlw	255
 12250  000726                     __end_ofPL90:
 12251                           	opt stack 0
 12252  000726                     PL96:
 12253                           	opt stack 12
 12254  000726  C0EE  F060         	movff	LORAWAN_RxDone@packet,RxDataDone@pData
 12255  00072A  C0EF  F061         	movff	LORAWAN_RxDone@packet+1,RxDataDone@pData+1
 12256  00072E  C0F6  F062         	movff	LORAWAN_RxDone@frmPayloadLength,RxDataDone@dataLength
 12257  000732  0E01               	movlw	1
 12258  000734  0100               	movlb	0	; () banked
 12259  000736  6F63               	movwf	RxDataDone@status& (0+255),b
 12260  000738  0C01               	retlw	1
 12261  00073A                     __end_ofPL96:
 12262                           	opt stack 0
 12263  00073A                     PL98:
 12264                           	opt stack 12
 12265  00073A  6F60               	movwf	memcpy@d1& (0+255),b
 12266  00073C  6B61               	clrf	(memcpy@d1+1)& (0+255),b
 12267  00073E  0EB5               	movlw	low _aesBuffer
 12268  000740  6F62               	movwf	memcpy@s1& (0+255),b
 12269  000742  0E01               	movlw	high _aesBuffer
 12270  000744  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 12271  000746  6B65               	clrf	(memcpy@n+1)& (0+255),b
 12272  000748  0E04               	movlw	4
 12273  00074A  6F64               	movwf	memcpy@n& (0+255),b
 12274  00074C  0C04               	retlw	4
 12275  00074E                     __end_ofPL98:
 12276                           	opt stack 0
 12277  00074E                     PL110:
 12278                           	opt stack 12
 12279  00074E  CFDD F0E1          	movff	postdec2,??_LORAWAN_RxDone+1
 12280  000752  C0E0  F06A         	movff	??_LORAWAN_RxDone,AssembleEncryptionBlock@frameCounter
 12281  000756  C0E1  F06B         	movff	??_LORAWAN_RxDone+1,AssembleEncryptionBlock@frameCounter+1
 12282  00075A  6B6C               	clrf	(AssembleEncryptionBlock@frameCounter+2)& (0+255),b
 12283  00075C  6B6D               	clrf	(AssembleEncryptionBlock@frameCounter+3)& (0+255),b
 12284  00075E  0101               	movlb	1	; () banked
 12285  000760  5171               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 12286  000762  0FFC               	addlw	252
 12287  000764  0100               	movlb	0	; () banked
 12288  000766  6F6E               	movwf	AssembleEncryptionBlock@blockId& (0+255),b
 12289  000768  0E49               	movlw	73
 12290  00076A  6F6F               	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 12291  00076C  0C49               	retlw	73
 12292  00076E                     __end_ofPL110:
 12293                           	opt stack 0
 12294  00076E                     PL124:
 12295                           	opt stack 12
 12296  00076E  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 12297  000770  0EB5               	movlw	low _aesBuffer
 12298  000772  6F62               	movwf	memcpy@s1& (0+255),b
 12299  000774  0E01               	movlw	high _aesBuffer
 12300  000776  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 12301  000778  6B65               	clrf	(memcpy@n+1)& (0+255),b
 12302  00077A  0E10               	movlw	16
 12303  00077C  6F64               	movwf	memcpy@n& (0+255),b
 12304  00077E  0C10               	retlw	16
 12305  000780                     __end_ofPL124:
 12306                           	opt stack 0
 12307  000780                     PL126:
 12308                           	opt stack 12
 12309  000780  C06A  F0E8         	movff	?_ExtractMic,LORAWAN_RxDone@extractedMic
 12310  000784  C06B  F0E9         	movff	?_ExtractMic+1,LORAWAN_RxDone@extractedMic+1
 12311  000788  C06C  F0EA         	movff	?_ExtractMic+2,LORAWAN_RxDone@extractedMic+2
 12312  00078C  C06D  F0EB         	movff	?_ExtractMic+3,LORAWAN_RxDone@extractedMic+3
 12313  000790  0012               	return	
 12314  000792                     __end_ofPL126:
 12315                           	opt stack 0
 12316  000792                     PL128:
 12317                           	opt stack 12
 12318  000792  C16F  F0A0         	movff	LORAWAN_RxDone@buffer,EncryptFRMPayload@buffer
 12319  000796  C170  F0A1         	movff	LORAWAN_RxDone@buffer+1,EncryptFRMPayload@buffer+1
 12320  00079A  05F6               	decf	LORAWAN_RxDone@frmPayloadLength& (0+255),w,b
 12321  00079C  6FA2               	movwf	EncryptFRMPayload@bufferLength& (0+255),b
 12322  00079E  0E01               	movlw	1
 12323  0007A0  6FA3               	movwf	EncryptFRMPayload@dir& (0+255),b
 12324  0007A2  0C01               	retlw	1
 12325  0007A4                     __end_ofPL128:
 12326                           	opt stack 0
 12327  0007A4                     PL142:
 12328                           	opt stack 12
 12329  0007A4  0EF0               	movlw	-16
 12330  0007A6  1702               	andwf	(_loRa+2)& (0+255),f,b
 12331  0007A8  0101               	movlb	1	; () banked
 12332  0007AA  5179               	movf	_rxPayload& (0+255),w,b
 12333  0007AC  117A               	iorwf	(_rxPayload+1)& (0+255),w,b
 12334  0007AE  0012               	return	
 12335  0007B0                     __end_ofPL142:
 12336                           	opt stack 0
 12337  0007B0                     PL148:
 12338                           	opt stack 12
 12339  0007B0  6FCA               	movwf	AESCmac@output& (0+255),b
 12340  0007B2  0E01               	movlw	high _aesBuffer
 12341  0007B4  6FCB               	movwf	(AESCmac@output+1)& (0+255),b
 12342  0007B6  0EE0               	movlw	low _radioBuffer
 12343  0007B8  6FCC               	movwf	AESCmac@input& (0+255),b
 12344  0007BA  0E04               	movlw	high _radioBuffer
 12345  0007BC  6FCD               	movwf	(AESCmac@input+1)& (0+255),b
 12346  0007BE  0101               	movlb	1	; () banked
 12347  0007C0  5171               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 12348  0007C2  0F0C               	addlw	12
 12349  0007C4  0100               	movlb	0	; () banked
 12350  0007C6  6FCE               	movwf	AESCmac@size& (0+255),b
 12351  0007C8  0012               	return	
 12352  0007CA                     __end_ofPL148:
 12353                           	opt stack 0
 12354  0007CA                     PL152:
 12355                           	opt stack 12
 12356  0007CA  6FA9               	movwf	(EncryptFRMPayload@key+1)& (0+255),b
 12357  0007CC  C0EC  F0AA         	movff	LORAWAN_RxDone@bufferIndex,EncryptFRMPayload@macBufferIndex
 12358  0007D0  0EE0               	movlw	low _radioBuffer
 12359  0007D2  6FAB               	movwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),b
 12360  0007D4  0E04               	movlw	high _radioBuffer
 12361  0007D6  6FAC               	movwf	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),b
 12362  0007D8  0012               	return	
 12363  0007DA                     __end_ofPL152:
 12364                           	opt stack 0
 12365  0007DA                     PL162:
 12366                           	opt stack 12
 12367  0007DA  0EE0               	movlw	low _radioBuffer
 12368  0007DC  6F60               	movwf	memcpy@d1& (0+255),b
 12369  0007DE  0E04               	movlw	high _radioBuffer
 12370  0007E0  0012               	return	
 12371  0007E2                     __end_ofPL162:
 12372                           	opt stack 0
 12373  0007E2                     PL184:
 12374                           	opt stack 12
 12375  0007E2  0EFF               	movlw	255
 12376  0007E4  0101               	movlb	1	; () banked
 12377  0007E6  256F               	addwf	LORAWAN_RxDone@buffer& (0+255),w,b
 12378  0007E8  0100               	movlb	0	; () banked
 12379  0007EA  6FEE               	movwf	LORAWAN_RxDone@packet& (0+255),b
 12380  0007EC  0EFF               	movlw	255
 12381  0007EE  0101               	movlb	1	; () banked
 12382  0007F0  2170               	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),w,b
 12383  0007F2  0100               	movlb	0	; () banked
 12384  0007F4  6FEF               	movwf	(LORAWAN_RxDone@packet+1)& (0+255),b
 12385  0007F6  0012               	return	
 12386  0007F8                     __end_ofPL184:
 12387                           	opt stack 0
 12388  0007F8                     PL186:
 12389                           	opt stack 14
 12390  0007F8  0E00               	movlw	0
 12391  0007FA  0101               	movlb	1	; () banked
 12392  0007FC  6F6B               	movwf	LORAWAN_Send@port& (0+255),b
 12393  0007FE  6F6C               	movwf	LORAWAN_Send@buffer& (0+255),b
 12394  000800  6F6D               	movwf	(LORAWAN_Send@buffer+1)& (0+255),b
 12395  000802  6F6E               	movwf	LORAWAN_Send@bufferLength& (0+255),b
 12396  000804  0C00               	retlw	0
 12397  000806                     __end_ofPL186:
 12398                           	opt stack 0
 12399  000806                     PL188:
 12400                           	opt stack 12
 12401  000806  C16F  F06A         	movff	LORAWAN_RxDone@buffer,ExtractMic@buffer
 12402  00080A  C170  F06B         	movff	LORAWAN_RxDone@buffer+1,ExtractMic@buffer+1
 12403  00080E  C171  F06C         	movff	LORAWAN_RxDone@bufferLength,ExtractMic@bufferLength
 12404  000812  0012               	return	
 12405  000814                     __end_ofPL188:
 12406                           	opt stack 0
 12407  000814                     PL218:
 12408                           	opt stack 12
 12409  000814  C20A  F0A4         	movff	_loRa+10,EncryptFRMPayload@frameCounter
 12410  000818  C20B  F0A5         	movff	_loRa+11,EncryptFRMPayload@frameCounter+1
 12411  00081C  C20C  F0A6         	movff	_loRa+12,EncryptFRMPayload@frameCounter+2
 12412  000820  C20D  F0A7         	movff	_loRa+13,EncryptFRMPayload@frameCounter+3
 12413  000824  0012               	return	
 12414  000826                     __end_ofPL218:
 12415                           	opt stack 0
 12416  000826                     PL220:
 12417                           	opt stack 12
 12418  000826  6FE2               	movwf	(??_LORAWAN_RxDone+2)& (0+255),b
 12419  000828  6BE3               	clrf	(??_LORAWAN_RxDone+3)& (0+255),b
 12420  00082A  0E0C               	movlw	12
 12421  00082C  27E2               	addwf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 12422  00082E  0E00               	movlw	0
 12423  000830  23E3               	addwfc	(??_LORAWAN_RxDone+3)& (0+255),f,b
 12424  000832  51E0               	movf	??_LORAWAN_RxDone& (0+255),w,b
 12425  000834  19E2               	xorwf	(??_LORAWAN_RxDone+2)& (0+255),w,b
 12426  000836  0012               	return	
 12427  000838                     __end_ofPL220:
 12428                           	opt stack 0
 12429  000838                     PL222:
 12430                           	opt stack 12
 12431  000838  0100               	movlb	0	; () banked
 12432  00083A  EE20 F001          	lfsr	2,1
 12433  00083E  0012               	return	
 12434  000840                     __end_ofPL222:
 12435                           	opt stack 0
 12436  000840                     PL234:
 12437                           	opt stack 12
 12438  000840  C16F  FFD9         	movff	LORAWAN_RxDone@buffer,fsr2l
 12439  000844  C170  FFDA         	movff	LORAWAN_RxDone@buffer+1,fsr2h
 12440  000848  50DF               	movf	indf2,w,c
 12441  00084A  0012               	return	
 12442  00084C                     __end_ofPL234:
 12443                           	opt stack 0
 12444  00084C                     PL252:
 12445                           	opt stack 12
 12446  00084C  CFDE F0E0          	movff	postinc2,??_LORAWAN_RxDone
 12447  000850  CFDD F0E1          	movff	postdec2,??_LORAWAN_RxDone+1
 12448  000854  0102               	movlb	2	; () banked
 12449  000856  0012               	return	
 12450  000858                     __end_ofPL252:
 12451                           	opt stack 0
 12452  000858                     PL258:
 12453                           	opt stack 12
 12454  000858  0E01               	movlw	1
 12455  00085A  0100               	movlb	0	; () banked
 12456  00085C  6FA5               	movwf	SearchAvailableChannel@transmissionType& (0+255),b
 12457  00085E  0EE6               	movlw	low LORAWAN_RxDone@channelIndex
 12458  000860  6FA6               	movwf	SearchAvailableChannel@channelIndex& (0+255),b
 12459  000862  0102               	movlb	2	; () banked
 12460  000864  51ED               	movf	(_loRa+237)& (0+255),w,b
 12461  000866  0012               	return	
 12462  000868                     __end_ofPL258:
 12463                           	opt stack 0
 12464  000868                     PL270:
 12465                           	opt stack 12
 12466  000868  51F4               	movf	LORAWAN_RxDone@joinAccept& (0+255),w,b
 12467  00086A  26D9               	addwf	fsr2l,f,c
 12468  00086C  51F5               	movf	(LORAWAN_RxDone@joinAccept+1)& (0+255),w,b
 12469  00086E  22DA               	addwfc	fsr2h,f,c
 12470  000870  0012               	return	
 12471  000872                     __end_ofPL270:
 12472                           	opt stack 0
 12473  000872                     PL298:
 12474                           	opt stack 12
 12475  000872  C16F  F060         	movff	LORAWAN_RxDone@buffer,RxDataDone@pData
 12476  000876  C170  F061         	movff	LORAWAN_RxDone@buffer+1,RxDataDone@pData+1
 12477  00087A  C171  F062         	movff	LORAWAN_RxDone@bufferLength,RxDataDone@dataLength
 12478  00087E  0012               	return	
 12479  000880                     __end_ofPL298:
 12480                           	opt stack 0
 12481  000880                     PL316:
 12482                           	opt stack 12
 12483  000880  5102               	movf	(_loRa+2)& (0+255),w,b
 12484  000882  0BF0               	andlw	-16
 12485  000884  0909               	iorlw	9
 12486  000886  6F02               	movwf	(_loRa+2)& (0+255),b
 12487  000888  0012               	return	
 12488  00088A                     __end_ofPL316:
 12489                           	opt stack 0
 12490  00088A                     PL336:
 12491                           	opt stack 12
 12492  00088A  0E08               	movlw	8
 12493  00088C  0101               	movlb	1	; () banked
 12494  00088E  276F               	addwf	LORAWAN_RxDone@buffer& (0+255),f,b
 12495  000890  0E00               	movlw	0
 12496  000892  2370               	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),f,b
 12497  000894  0C00               	retlw	0
 12498  000896                     __end_ofPL336:
 12499                           	opt stack 0
 12500  000896                     PL384:
 12501                           	opt stack 12
 12502  000896  CFDE F20A          	movff	postinc2,_loRa+10
 12503  00089A  CFDD F20B          	movff	postdec2,_loRa+11
 12504  00089E  0012               	return	
 12505  0008A0                     __end_ofPL384:
 12506                           	opt stack 0
 12507  0008A0                     PL398:
 12508                           	opt stack 12
 12509  0008A0  C0A4  F16F         	movff	?_MacExecuteCommands,LORAWAN_RxDone@buffer
 12510  0008A4  C0A5  F170         	movff	?_MacExecuteCommands+1,LORAWAN_RxDone@buffer+1
 12511  0008A8  0012               	return	
 12512  0008AA                     __end_ofPL398:
 12513                           	opt stack 0
 12514  0008AA                     PL426:
 12515                           	opt stack 12
 12516  0008AA  0100               	movlb	0	; () banked
 12517  0008AC  5BE1               	subwfb	(??_LORAWAN_RxDone+1)& (0+255),f,b
 12518  0008AE  51E0               	movf	??_LORAWAN_RxDone& (0+255),w,b
 12519  0008B0  0102               	movlb	2	; () banked
 12520  0008B2  0012               	return	
 12521  0008B4                     __end_ofPL426:
 12522                           	opt stack 0
 12523  0008B4                     PL450:
 12524                           	opt stack 12
 12525  0008B4  6BF6               	clrf	LORAWAN_RxDone@frmPayloadLength& (0+255),b
 12526  0008B6  6BEE               	clrf	LORAWAN_RxDone@packet& (0+255),b
 12527  0008B8  6BEF               	clrf	(LORAWAN_RxDone@packet+1)& (0+255),b
 12528  0008BA  0012               	return	
 12529  0008BC                     __end_ofPL450:
 12530                           	opt stack 0
 12531                           tosu	equ	0xFFF
 12532                           tosh	equ	0xFFE
 12533                           tosl	equ	0xFFD
 12534                           pclath	equ	0xFFA
 12535                           tblptru	equ	0xFF8
 12536                           tblptrh	equ	0xFF7
 12537                           tblptrl	equ	0xFF6
 12538                           tablat	equ	0xFF5
 12539                           prodh	equ	0xFF4
 12540                           prodl	equ	0xFF3
 12541                           intcon	equ	0xFF2
 12542                           indf0	equ	0xFEF
 12543                           postinc0	equ	0xFEE
 12544                           plusw0	equ	0xFEB
 12545                           fsr0h	equ	0xFEA
 12546                           fsr0l	equ	0xFE9
 12547                           wreg	equ	0xFE8
 12548                           postinc1	equ	0xFE6
 12549                           postdec1	equ	0xFE5
 12550                           plusw1	equ	0xFE3
 12551                           fsr1h	equ	0xFE2
 12552                           fsr1l	equ	0xFE1
 12553                           indf2	equ	0xFDF
 12554                           postinc2	equ	0xFDE
 12555                           postdec2	equ	0xFDD
 12556                           plusw2	equ	0xFDB
 12557                           fsr2h	equ	0xFDA
 12558                           fsr2l	equ	0xFD9
 12559                           status	equ	0xFD8
 12560                           
 12561 ;; *************** function _UpdateRetransmissionAckTimeoutState *****************
 12562 ;; Defined at:
 12563 ;;		line 1034 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 12564 ;; Parameters:    Size  Location     Type
 12565 ;;		None
 12566 ;; Auto vars:     Size  Location     Type
 12567 ;;		None
 12568 ;; Return value:  Size  Location     Type
 12569 ;;                  1    wreg      void 
 12570 ;; Registers used:
 12571 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12572 ;; Tracked objects:
 12573 ;;		On entry : 3F/0
 12574 ;;		On exit  : 3F/0
 12575 ;;		Unchanged: 0/0
 12576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12577 ;;      Params:         0       0       0       0       0       0       0       0       0
 12578 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12579 ;;      Temps:          0       4       0       0       0       0       0       0       0
 12580 ;;      Totals:         0       4       0       0       0       0       0       0       0
 12581 ;;Total ram usage:        4 bytes
 12582 ;; Hardware stack levels used:    1
 12583 ;; Hardware stack levels required when called:   11
 12584 ;; This function calls:
 12585 ;;		_SwTimerSetTimeout
 12586 ;;		_SwTimerStart
 12587 ;;		___lldiv
 12588 ;; This function is called by:
 12589 ;;		_AckRetransmissionCallback
 12590 ;;		_LORAWAN_RxDone
 12591 ;; This function uses a non-reentrant model
 12592 ;;
 12593                           
 12594                           	psect	text57
 12595  00517E                     __ptext57:
 12596                           	opt stack 0
 12597  00517E                     _UpdateRetransmissionAckTimeoutState:
 12598                           	opt stack 16
 12599                           
 12600                           ; BSR set to: 0
 12601                           ;lorawan.c: 1036: loRa.macStatus.macState = RETRANSMISSION_DELAY;
 12602                           
 12603                           ;incstack = 0
 12604  00517E  0102               	movlb	2	; () banked
 12605  005180  EC9C  F00C         	call	PL268	;call to abstracted procedure
 12606                           
 12607                           ; BSR set to: 2
 12608                           ;lorawan.c: 1037: SwTimerSetTimeout(loRa.ackTimeoutTimerId, ( (((uint32_t)(loRa.protocol
      +                          Parameters.ackTimeout)) << (12)) / 125UL ));
 12609  005184  51A0               	movf	(_loRa+160)& (0+255),w,b
 12610  005186  0100               	movlb	0	; () banked
 12611  005188  6F90               	movwf	??_UpdateRetransmissionAckTimeoutState& (0+255),b
 12612  00518A  0102               	movlb	2	; () banked
 12613  00518C  51A1               	movf	(_loRa+161)& (0+255),w,b
 12614  00518E  0100               	movlb	0	; () banked
 12615  005190  6F91               	movwf	(??_UpdateRetransmissionAckTimeoutState+1)& (0+255),b
 12616  005192  6B92               	clrf	(??_UpdateRetransmissionAckTimeoutState+2)& (0+255),b
 12617  005194  6B93               	clrf	(??_UpdateRetransmissionAckTimeoutState+3)& (0+255),b
 12618  005196  0E0C               	movlw	12
 12619  005198                     u15525:
 12620  005198  90D8               	bcf	status,0,c
 12621  00519A  3790               	rlcf	??_UpdateRetransmissionAckTimeoutState& (0+255),f,b
 12622  00519C  3791               	rlcf	(??_UpdateRetransmissionAckTimeoutState+1)& (0+255),f,b
 12623  00519E  3792               	rlcf	(??_UpdateRetransmissionAckTimeoutState+2)& (0+255),f,b
 12624  0051A0  3793               	rlcf	(??_UpdateRetransmissionAckTimeoutState+3)& (0+255),f,b
 12625  0051A2  2EE8               	decfsz	wreg,f,c
 12626  0051A4  D7F9               	goto	u15525
 12627  0051A6  C090  F060         	movff	??_UpdateRetransmissionAckTimeoutState,___lldiv@dividend
 12628  0051AA  C091  F061         	movff	??_UpdateRetransmissionAckTimeoutState+1,___lldiv@dividend+1
 12629  0051AE  C092  F062         	movff	??_UpdateRetransmissionAckTimeoutState+2,___lldiv@dividend+2
 12630  0051B2  C093  F063         	movff	??_UpdateRetransmissionAckTimeoutState+3,___lldiv@dividend+3
 12631  0051B6  0E7D               	movlw	125
 12632  0051B8  EC77  F011         	call	PL32	;call to abstracted procedure
 12633  0051BC  EC1B  F025         	call	___lldiv	;wreg free
 12634  0051C0  EC73  F006         	call	PL20	;call to abstracted procedure
 12635  0051C4  51E8               	movf	(_loRa+232)& (0+255),w,b
 12636  0051C6  EC11  F02C         	call	_SwTimerSetTimeout
 12637                           
 12638                           ; BSR set to: 0
 12639                           ;lorawan.c: 1038: SwTimerStart(loRa.ackTimeoutTimerId);
 12640  0051CA  0102               	movlb	2	; () banked
 12641  0051CC  51E8               	movf	(_loRa+232)& (0+255),w,b
 12642  0051CE  EFC4  F025         	goto	_SwTimerStart
 12643  0051D2                     __end_of_UpdateRetransmissionAckTimeoutState:
 12644                           	opt stack 0
 12645                           tosu	equ	0xFFF
 12646                           tosh	equ	0xFFE
 12647                           tosl	equ	0xFFD
 12648                           pclath	equ	0xFFA
 12649                           tblptru	equ	0xFF8
 12650                           tblptrh	equ	0xFF7
 12651                           tblptrl	equ	0xFF6
 12652                           tablat	equ	0xFF5
 12653                           prodh	equ	0xFF4
 12654                           prodl	equ	0xFF3
 12655                           intcon	equ	0xFF2
 12656                           indf0	equ	0xFEF
 12657                           postinc0	equ	0xFEE
 12658                           plusw0	equ	0xFEB
 12659                           fsr0h	equ	0xFEA
 12660                           fsr0l	equ	0xFE9
 12661                           wreg	equ	0xFE8
 12662                           postinc1	equ	0xFE6
 12663                           postdec1	equ	0xFE5
 12664                           plusw1	equ	0xFE3
 12665                           fsr1h	equ	0xFE2
 12666                           fsr1l	equ	0xFE1
 12667                           indf2	equ	0xFDF
 12668                           postinc2	equ	0xFDE
 12669                           postdec2	equ	0xFDD
 12670                           plusw2	equ	0xFDB
 12671                           fsr2h	equ	0xFDA
 12672                           fsr2l	equ	0xFD9
 12673                           status	equ	0xFD8
 12674                           
 12675 ;; *************** function _UpdateDLSettings *****************
 12676 ;; Defined at:
 12677 ;;		line 888 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 12678 ;; Parameters:    Size  Location     Type
 12679 ;;  dlRx2Dr         1    wreg     unsigned char 
 12680 ;;  dlRx1DrOffse    1    0[BANK0 ] unsigned char 
 12681 ;; Auto vars:     Size  Location     Type
 12682 ;;  dlRx2Dr         1    1[BANK0 ] unsigned char 
 12683 ;; Return value:  Size  Location     Type
 12684 ;;                  1    wreg      void 
 12685 ;; Registers used:
 12686 ;;		wreg, status,2, status,0
 12687 ;; Tracked objects:
 12688 ;;		On entry : 3F/0
 12689 ;;		On exit  : 3F/0
 12690 ;;		Unchanged: 0/0
 12691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12692 ;;      Params:         0       1       0       0       0       0       0       0       0
 12693 ;;      Locals:         0       1       0       0       0       0       0       0       0
 12694 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12695 ;;      Totals:         0       2       0       0       0       0       0       0       0
 12696 ;;Total ram usage:        2 bytes
 12697 ;; Hardware stack levels used:    1
 12698 ;; Hardware stack levels required when called:    7
 12699 ;; This function calls:
 12700 ;;		Nothing
 12701 ;; This function is called by:
 12702 ;;		_LORAWAN_RxDone
 12703 ;; This function uses a non-reentrant model
 12704 ;;
 12705                           
 12706                           	psect	text58
 12707  005F0C                     __ptext58:
 12708                           	opt stack 0
 12709  005F0C                     _UpdateDLSettings:
 12710                           	opt stack 19
 12711                           
 12712                           ; BSR set to: 0
 12713                           ;incstack = 0
 12714                           ;UpdateDLSettings@dlRx2Dr stored from wreg
 12715  005F0C  6F61               	movwf	UpdateDLSettings@dlRx2Dr& (0+255),b
 12716                           
 12717                           ;lorawan_eu.c: 890: if (dlRx2Dr <= 7)
 12718  005F0E  0E08               	movlw	8
 12719  005F10  0100               	movlb	0	; () banked
 12720  005F12  6161               	cpfslt	UpdateDLSettings@dlRx2Dr& (0+255),b
 12721  005F14  D002               	goto	l13912
 12722                           
 12723                           ; BSR set to: 0
 12724                           ;lorawan_eu.c: 891: {
 12725                           ;lorawan_eu.c: 892: loRa.receiveWindow2Parameters.dataRate = dlRx2Dr;
 12726  005F16  C061  F21C         	movff	UpdateDLSettings@dlRx2Dr,_loRa+28
 12727  005F1A                     l13912:
 12728                           
 12729                           ; BSR set to: 0
 12730                           ;lorawan_eu.c: 893: }
 12731                           ;lorawan_eu.c: 895: if (dlRx1DrOffset <= 5)
 12732  005F1A  0E06               	movlw	6
 12733  005F1C  6160               	cpfslt	UpdateDLSettings@dlRx1DrOffset& (0+255),b
 12734  005F1E  0C06               	retlw	6
 12735                           
 12736                           ; BSR set to: 0
 12737                           ;lorawan_eu.c: 896: {
 12738                           ;lorawan_eu.c: 898: loRa.offset = dlRx1DrOffset;
 12739  005F20  C060  F2EF         	movff	UpdateDLSettings@dlRx1DrOffset,_loRa+239
 12740                           
 12741                           ; BSR set to: 0
 12742  005F24  0C06               	retlw	6	;funcret
 12743  005F26                     __end_of_UpdateDLSettings:
 12744                           	opt stack 0
 12745                           tosu	equ	0xFFF
 12746                           tosh	equ	0xFFE
 12747                           tosl	equ	0xFFD
 12748                           pclath	equ	0xFFA
 12749                           tblptru	equ	0xFF8
 12750                           tblptrh	equ	0xFF7
 12751                           tblptrl	equ	0xFF6
 12752                           tablat	equ	0xFF5
 12753                           prodh	equ	0xFF4
 12754                           prodl	equ	0xFF3
 12755                           intcon	equ	0xFF2
 12756                           indf0	equ	0xFEF
 12757                           postinc0	equ	0xFEE
 12758                           plusw0	equ	0xFEB
 12759                           fsr0h	equ	0xFEA
 12760                           fsr0l	equ	0xFE9
 12761                           wreg	equ	0xFE8
 12762                           postinc1	equ	0xFE6
 12763                           postdec1	equ	0xFE5
 12764                           plusw1	equ	0xFE3
 12765                           fsr1h	equ	0xFE2
 12766                           fsr1l	equ	0xFE1
 12767                           indf2	equ	0xFDF
 12768                           postinc2	equ	0xFDE
 12769                           postdec2	equ	0xFDD
 12770                           plusw2	equ	0xFDB
 12771                           fsr2h	equ	0xFDA
 12772                           fsr2l	equ	0xFD9
 12773                           status	equ	0xFD8
 12774                           
 12775 ;; *************** function _UpdateCfList *****************
 12776 ;; Defined at:
 12777 ;;		line 824 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 12778 ;; Parameters:    Size  Location     Type
 12779 ;;  bufferLength    1    wreg     unsigned char 
 12780 ;;  joinAccept      2   60[BANK0 ] PTR struct .
 12781 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 12782 ;; Auto vars:     Size  Location     Type
 12783 ;;  bufferLength    1   64[BANK0 ] unsigned char 
 12784 ;;  frequency       4   65[BANK0 ] unsigned long 
 12785 ;;  i               1   70[BANK0 ] unsigned char 
 12786 ;;  channelIndex    1   69[BANK0 ] unsigned char 
 12787 ;; Return value:  Size  Location     Type
 12788 ;;                  1    wreg      void 
 12789 ;; Registers used:
 12790 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12791 ;; Tracked objects:
 12792 ;;		On entry : 3F/1
 12793 ;;		On exit  : 3D/0
 12794 ;;		Unchanged: 0/0
 12795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12796 ;;      Params:         0       2       0       0       0       0       0       0       0
 12797 ;;      Locals:         0       7       0       0       0       0       0       0       0
 12798 ;;      Temps:          0       2       0       0       0       0       0       0       0
 12799 ;;      Totals:         0      11       0       0       0       0       0       0       0
 12800 ;;Total ram usage:       11 bytes
 12801 ;; Hardware stack levels used:    1
 12802 ;; Hardware stack levels required when called:    9
 12803 ;; This function calls:
 12804 ;;		_LORAWAN_SetChannelIdStatus
 12805 ;;		_ValidateFrequency
 12806 ;;		___lmul
 12807 ;;		_memcpy
 12808 ;; This function is called by:
 12809 ;;		_LORAWAN_RxDone
 12810 ;; This function uses a non-reentrant model
 12811 ;;
 12812                           
 12813                           	psect	text59
 12814  002924                     __ptext59:
 12815                           	opt stack 0
 12816  002924                     _UpdateCfList:
 12817                           	opt stack 17
 12818                           
 12819                           ; BSR set to: 0
 12820                           ;incstack = 0
 12821                           ;UpdateCfList@bufferLength stored from wreg
 12822  002924  0100               	movlb	0	; () banked
 12823  002926  6FA0               	movwf	UpdateCfList@bufferLength& (0+255),b
 12824                           
 12825                           ;lorawan_eu.c: 826: uint8_t i;
 12826                           ;lorawan_eu.c: 827: uint32_t frequency;
 12827                           ;lorawan_eu.c: 828: uint8_t channelIndex;
 12828                           ;lorawan_eu.c: 830: if ( (bufferLength == 33) )
 12829  002928  0E21               	movlw	33
 12830  00292A  19A0               	xorwf	UpdateCfList@bufferLength& (0+255),w,b
 12831  00292C  A4D8               	btfss	status,2,c
 12832  00292E  0012               	return	
 12833                           
 12834                           ; BSR set to: 0
 12835                           ;lorawan_eu.c: 831: {
 12836                           ;lorawan_eu.c: 833: channelIndex = 3;
 12837  002930  0E03               	movlw	3
 12838  002932  6FA5               	movwf	UpdateCfList@channelIndex& (0+255),b
 12839                           
 12840                           ; BSR set to: 0
 12841                           ;lorawan_eu.c: 835: for (i = 0; i < 5; i++ )
 12842  002934  6BA6               	clrf	UpdateCfList@i& (0+255),b
 12843  002936                     l1790:
 12844                           
 12845                           ; BSR set to: 0
 12846                           ;lorawan_eu.c: 836: {
 12847                           ;lorawan_eu.c: 837: frequency = 0;
 12848  002936  6BA1               	clrf	UpdateCfList@frequency& (0+255),b
 12849  002938  6BA2               	clrf	(UpdateCfList@frequency+1)& (0+255),b
 12850  00293A  6BA3               	clrf	(UpdateCfList@frequency+2)& (0+255),b
 12851  00293C  6BA4               	clrf	(UpdateCfList@frequency+3)& (0+255),b
 12852                           
 12853                           ; BSR set to: 0
 12854                           ;lorawan_eu.c: 838: memcpy (&frequency, joinAccept->members.cfList + 3*i, 3);
 12855  00293E  0EA1               	movlw	low UpdateCfList@frequency
 12856  002940  6F60               	movwf	memcpy@d1& (0+255),b
 12857  002942  6B61               	clrf	(memcpy@d1+1)& (0+255),b
 12858  002944  51A6               	movf	UpdateCfList@i& (0+255),w,b
 12859  002946  0D03               	mullw	3
 12860  002948  C09C  F09E         	movff	UpdateCfList@joinAccept,??_UpdateCfList
 12861  00294C  C09D  F09F         	movff	UpdateCfList@joinAccept+1,??_UpdateCfList+1
 12862  002950  50F3               	movf	prodl,w,c
 12863  002952  279E               	addwf	??_UpdateCfList& (0+255),f,b
 12864  002954  50F4               	movf	prodh,w,c
 12865  002956  239F               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 12866  002958  0E0D               	movlw	13
 12867  00295A  259E               	addwf	??_UpdateCfList& (0+255),w,b
 12868  00295C  6F62               	movwf	memcpy@s1& (0+255),b
 12869  00295E  0E00               	movlw	0
 12870  002960  219F               	addwfc	(??_UpdateCfList+1)& (0+255),w,b
 12871  002962  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 12872  002964  EC0D  F028         	call	PL436	;call to abstracted procedure
 12873  002968  EC94  F028         	call	_memcpy	;wreg free
 12874                           
 12875                           ; BSR set to: 0
 12876                           ;lorawan_eu.c: 839: frequency *= 100;
 12877  00296C  C0A1  F090         	movff	UpdateCfList@frequency,___lmul@multiplier
 12878  002970  C0A2  F091         	movff	UpdateCfList@frequency+1,___lmul@multiplier+1
 12879  002974  C0A3  F092         	movff	UpdateCfList@frequency+2,___lmul@multiplier+2
 12880  002978  C0A4  F093         	movff	UpdateCfList@frequency+3,___lmul@multiplier+3
 12881  00297C  0E64               	movlw	100
 12882  00297E  EC98  F006         	call	PL80	;call to abstracted procedure
 12883  002982  EC25  F02A         	call	___lmul	;wreg free
 12884  002986  C090  F0A1         	movff	?___lmul,UpdateCfList@frequency
 12885  00298A  C091  F0A2         	movff	?___lmul+1,UpdateCfList@frequency+1
 12886  00298E  C092  F0A3         	movff	?___lmul+2,UpdateCfList@frequency+2
 12887  002992  C093  F0A4         	movff	?___lmul+3,UpdateCfList@frequency+3
 12888                           
 12889                           ; BSR set to: 0
 12890                           ;lorawan_eu.c: 840: if (frequency != 0)
 12891  002996  51A1               	movf	UpdateCfList@frequency& (0+255),w,b
 12892  002998  11A2               	iorwf	(UpdateCfList@frequency+1)& (0+255),w,b
 12893  00299A  11A3               	iorwf	(UpdateCfList@frequency+2)& (0+255),w,b
 12894  00299C  11A4               	iorwf	(UpdateCfList@frequency+3)& (0+255),w,b
 12895  00299E  E044               	bz	l13940
 12896                           
 12897                           ; BSR set to: 0
 12898                           ;lorawan_eu.c: 841: {
 12899                           ;lorawan_eu.c: 842: if (ValidateFrequency (frequency) == OK)
 12900  0029A0  C0A1  F060         	movff	UpdateCfList@frequency,ValidateFrequency@frequencyNew
 12901  0029A4  C0A2  F061         	movff	UpdateCfList@frequency+1,ValidateFrequency@frequencyNew+1
 12902  0029A8  C0A3  F062         	movff	UpdateCfList@frequency+2,ValidateFrequency@frequencyNew+2
 12903  0029AC  C0A4  F063         	movff	UpdateCfList@frequency+3,ValidateFrequency@frequencyNew+3
 12904  0029B0  ECB5  F027         	call	_ValidateFrequency	;wreg free
 12905  0029B4  0900               	iorlw	0
 12906  0029B6  E13D               	bnz	l13942
 12907                           
 12908                           ; BSR set to: 0
 12909                           ;lorawan_eu.c: 843: {
 12910                           ;lorawan_eu.c: 844: Channels[i+channelIndex].frequency = frequency;
 12911  0029B8  D859               	call	PL82	;call to abstracted procedure
 12912  0029BA  50F3               	movf	prodl,w,c
 12913  0029BC  D842               	call	PL30	;call to abstracted procedure
 12914  0029BE  C0A1  FFDE         	movff	UpdateCfList@frequency,postinc2
 12915  0029C2  C0A2  FFDE         	movff	UpdateCfList@frequency+1,postinc2
 12916  0029C6  C0A3  FFDE         	movff	UpdateCfList@frequency+2,postinc2
 12917  0029CA  C0A4  FFDE         	movff	UpdateCfList@frequency+3,postinc2
 12918                           
 12919                           ;lorawan_eu.c: 845: Channels[i+channelIndex].dataRange.max = 5;
 12920  0029CE  51A6               	movf	UpdateCfList@i& (0+255),w,b
 12921  0029D0  0D0E               	mullw	14
 12922  0029D2  0E00               	movlw	low _Channels
 12923  0029D4  D842               	call	PL74	;call to abstracted procedure
 12924  0029D6  D835               	call	PL30	;call to abstracted procedure
 12925  0029D8  50DF               	movf	223,w,c
 12926  0029DA  0B0F               	andlw	-241
 12927  0029DC  0950               	iorlw	80
 12928  0029DE  6EDF               	movwf	223,c
 12929                           
 12930                           ;lorawan_eu.c: 846: Channels[i+channelIndex].dataRange.min = 0;
 12931  0029E0  0100               	movlb	0	; () banked
 12932  0029E2  51A6               	movf	UpdateCfList@i& (0+255),w,b
 12933  0029E4  0D0E               	mullw	14
 12934  0029E6  0E00               	movlw	low _Channels
 12935  0029E8  D838               	call	PL74	;call to abstracted procedure
 12936  0029EA  D82B               	call	PL30	;call to abstracted procedure
 12937  0029EC  0EF0               	movlw	-16
 12938  0029EE  16DF               	andwf	223,f,c
 12939                           
 12940                           ;lorawan_eu.c: 847: Channels[i+channelIndex].dutyCycle = 999;
 12941  0029F0  D83D               	call	PL82	;call to abstracted procedure
 12942  0029F2  0E06               	movlw	6
 12943  0029F4  279E               	addwf	??_UpdateCfList& (0+255),f,b
 12944  0029F6  0E00               	movlw	0
 12945  0029F8  239F               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 12946  0029FA  50F3               	movf	prodl,w,c
 12947  0029FC  D822               	call	PL30	;call to abstracted procedure
 12948  0029FE  0EE7               	movlw	231
 12949  002A00  6EDE               	movwf	postinc2,c
 12950  002A02  0E03               	movlw	3
 12951  002A04  6EDD               	movwf	postdec2,c
 12952                           
 12953                           ;lorawan_eu.c: 848: Channels[i+channelIndex].parametersDefined = 0xFF;
 12954  002A06  D832               	call	PL82	;call to abstracted procedure
 12955  002A08  0E0D               	movlw	13
 12956  002A0A  279E               	addwf	??_UpdateCfList& (0+255),f,b
 12957  002A0C  0E00               	movlw	0
 12958  002A0E  239F               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 12959  002A10  50F3               	movf	prodl,w,c
 12960  002A12  D817               	call	PL30	;call to abstracted procedure
 12961  002A14  68DF               	setf	indf2,c
 12962                           
 12963                           ; BSR set to: 0
 12964                           ;lorawan_eu.c: 849: LORAWAN_SetChannelIdStatus(i+channelIndex, 1);
 12965  002A16  0E01               	movlw	1
 12966  002A18  6F64               	movwf	LORAWAN_SetChannelIdStatus@statusNew& (0+255),b
 12967  002A1A  51A6               	movf	UpdateCfList@i& (0+255),w,b
 12968  002A1C  25A5               	addwf	UpdateCfList@channelIndex& (0+255),w,b
 12969  002A1E  EC11  F02D         	call	_LORAWAN_SetChannelIdStatus
 12970                           
 12971                           ;lorawan_eu.c: 850: loRa.macStatus.channelsModified = 1;
 12972  002A22  0102               	movlb	2	; () banked
 12973  002A24  8703               	bsf	(_loRa+3)& (0+255),3,b
 12974  002A26  D005               	goto	l13942
 12975  002A28                     l13940:
 12976                           
 12977                           ; BSR set to: 0
 12978                           ;lorawan_eu.c: 853: else
 12979                           ;lorawan_eu.c: 854: {
 12980                           ;lorawan_eu.c: 855: LORAWAN_SetChannelIdStatus(i+channelIndex, 0);
 12981  002A28  6B64               	clrf	LORAWAN_SetChannelIdStatus@statusNew& (0+255),b
 12982  002A2A  51A6               	movf	UpdateCfList@i& (0+255),w,b
 12983  002A2C  25A5               	addwf	UpdateCfList@channelIndex& (0+255),w,b
 12984  002A2E  EC11  F02D         	call	_LORAWAN_SetChannelIdStatus
 12985  002A32                     l13942:
 12986  002A32  0100               	movlb	0	; () banked
 12987  002A34  2BA6               	incf	UpdateCfList@i& (0+255),f,b
 12988                           
 12989                           ; BSR set to: 0
 12990  002A36  0E04               	movlw	4
 12991  002A38  65A6               	cpfsgt	UpdateCfList@i& (0+255),b
 12992  002A3A  D77D               	goto	l1790
 12993                           
 12994                           ; BSR set to: 0
 12995                           ;lorawan_eu.c: 856: }
 12996                           ;lorawan_eu.c: 857: }
 12997                           ;lorawan_eu.c: 859: loRa.macStatus.channelsModified = 1;
 12998  002A3C  0102               	movlb	2	; () banked
 12999  002A3E  8703               	bsf	(_loRa+3)& (0+255),3,b
 13000  002A40  0C04               	retlw	4	;funcret
 13001  002A42                     __end_of_UpdateCfList:
 13002                           	opt stack 0
 13003  002A42                     PL30:
 13004                           	opt stack 17
 13005  002A42  279E               	addwf	??_UpdateCfList& (0+255),f,b
 13006  002A44  50F4               	movf	prodh,w,c
 13007  002A46  239F               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 13008  002A48  51A5               	movf	UpdateCfList@channelIndex& (0+255),w,b
 13009  002A4A  0D0E               	mullw	14
 13010  002A4C  50F3               	movf	prodl,w,c
 13011  002A4E  259E               	addwf	??_UpdateCfList& (0+255),w,b
 13012  002A50  6ED9               	movwf	fsr2l,c
 13013  002A52  50F4               	movf	prodh,w,c
 13014  002A54  219F               	addwfc	(??_UpdateCfList+1)& (0+255),w,b
 13015  002A56  6EDA               	movwf	fsr2h,c
 13016  002A58  0012               	return	
 13017  002A5A                     __end_ofPL30:
 13018                           	opt stack 0
 13019  002A5A                     PL74:
 13020                           	opt stack 17
 13021  002A5A  6F9E               	movwf	??_UpdateCfList& (0+255),b
 13022  002A5C  0E04               	movlw	high _Channels
 13023  002A5E  6F9F               	movwf	(??_UpdateCfList+1)& (0+255),b
 13024  002A60  0E05               	movlw	5
 13025  002A62  279E               	addwf	??_UpdateCfList& (0+255),f,b
 13026  002A64  0E00               	movlw	0
 13027  002A66  239F               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 13028  002A68  50F3               	movf	prodl,w,c
 13029  002A6A  0012               	return	
 13030  002A6C                     __end_ofPL74:
 13031                           	opt stack 0
 13032  002A6C                     PL82:
 13033                           	opt stack 17
 13034  002A6C  51A6               	movf	UpdateCfList@i& (0+255),w,b
 13035  002A6E  0D0E               	mullw	14
 13036  002A70  0E00               	movlw	low _Channels
 13037  002A72  6F9E               	movwf	??_UpdateCfList& (0+255),b
 13038  002A74  0E04               	movlw	high _Channels
 13039  002A76  6F9F               	movwf	(??_UpdateCfList+1)& (0+255),b
 13040  002A78  0012               	return	
 13041  002A7A                     __end_ofPL82:
 13042                           	opt stack 0
 13043                           tosu	equ	0xFFF
 13044                           tosh	equ	0xFFE
 13045                           tosl	equ	0xFFD
 13046                           pclath	equ	0xFFA
 13047                           tblptru	equ	0xFF8
 13048                           tblptrh	equ	0xFF7
 13049                           tblptrl	equ	0xFF6
 13050                           tablat	equ	0xFF5
 13051                           prodh	equ	0xFF4
 13052                           prodl	equ	0xFF3
 13053                           intcon	equ	0xFF2
 13054                           indf0	equ	0xFEF
 13055                           postinc0	equ	0xFEE
 13056                           plusw0	equ	0xFEB
 13057                           fsr0h	equ	0xFEA
 13058                           fsr0l	equ	0xFE9
 13059                           wreg	equ	0xFE8
 13060                           postinc1	equ	0xFE6
 13061                           postdec1	equ	0xFE5
 13062                           plusw1	equ	0xFE3
 13063                           fsr1h	equ	0xFE2
 13064                           fsr1l	equ	0xFE1
 13065                           indf2	equ	0xFDF
 13066                           postinc2	equ	0xFDE
 13067                           postdec2	equ	0xFDD
 13068                           plusw2	equ	0xFDB
 13069                           fsr2h	equ	0xFDA
 13070                           fsr2l	equ	0xFD9
 13071                           status	equ	0xFD8
 13072                           
 13073 ;; *************** function _StartReTxTimer *****************
 13074 ;; Defined at:
 13075 ;;		line 902 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 13076 ;; Parameters:    Size  Location     Type
 13077 ;;		None
 13078 ;; Auto vars:     Size  Location     Type
 13079 ;;  minim           4   52[BANK0 ] unsigned long 
 13080 ;;  i               1   56[BANK0 ] unsigned char 
 13081 ;; Return value:  Size  Location     Type
 13082 ;;                  1    wreg      void 
 13083 ;; Registers used:
 13084 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13085 ;; Tracked objects:
 13086 ;;		On entry : 3E/0
 13087 ;;		On exit  : 3F/0
 13088 ;;		Unchanged: 0/0
 13089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13090 ;;      Params:         0       0       0       0       0       0       0       0       0
 13091 ;;      Locals:         0       5       0       0       0       0       0       0       0
 13092 ;;      Temps:          0       4       0       0       0       0       0       0       0
 13093 ;;      Totals:         0       9       0       0       0       0       0       0       0
 13094 ;;Total ram usage:        9 bytes
 13095 ;; Hardware stack levels used:    1
 13096 ;; Hardware stack levels required when called:   11
 13097 ;; This function calls:
 13098 ;;		_SwTimerSetTimeout
 13099 ;;		_SwTimerStart
 13100 ;;		___lldiv
 13101 ;; This function is called by:
 13102 ;;		_LORAWAN_RxDone
 13103 ;; This function uses a non-reentrant model
 13104 ;;
 13105                           
 13106                           	psect	text60
 13107  0034DA                     __ptext60:
 13108                           	opt stack 0
 13109  0034DA                     _StartReTxTimer:
 13110                           	opt stack 15
 13111                           
 13112                           ;lorawan_eu.c: 904: uint8_t i;
 13113                           ;lorawan_eu.c: 905: uint32_t minim = (4294967295UL);
 13114                           
 13115                           ;incstack = 0
 13116  0034DA  0100               	movlb	0	; () banked
 13117  0034DC  6994               	setf	StartReTxTimer@minim& (0+255),b
 13118  0034DE  6995               	setf	(StartReTxTimer@minim+1)& (0+255),b
 13119  0034E0  6996               	setf	(StartReTxTimer@minim+2)& (0+255),b
 13120  0034E2  6997               	setf	(StartReTxTimer@minim+3)& (0+255),b
 13121                           
 13122                           ;lorawan_eu.c: 907: for (i = 0; i <= loRa.maxChannels; i++)
 13123  0034E4  6B98               	clrf	StartReTxTimer@i& (0+255),b
 13124  0034E6  D03A               	goto	l14090
 13125  0034E8                     l14076:
 13126                           
 13127                           ; BSR set to: 2
 13128                           ;lorawan_eu.c: 908: {
 13129                           ;lorawan_eu.c: 909: if ( (Channels[i].status == 1) && (Channels[i].channelTimer != 0) &&
      +                           (Channels[i].channelTimer <= minim) && (loRa.currentDataRate >= Channels[i].dataRange.m
      +                          in) && (loRa.currentDataRate <= Channels[i].dataRange.max) )
 13130  0034E8  0100               	movlb	0	; () banked
 13131  0034EA  5198               	movf	StartReTxTimer@i& (0+255),w,b
 13132  0034EC  EC86  F021         	call	PL12	;call to abstracted procedure
 13133  0034F0  E133               	bnz	l14088
 13134                           
 13135                           ; BSR set to: 0
 13136  0034F2  5198               	movf	StartReTxTimer@i& (0+255),w,b
 13137  0034F4  EC51  F006         	call	PL4	;call to abstracted procedure
 13138  0034F8  ECBB  F00E         	call	PL130	;call to abstracted procedure
 13139  0034FC  E02D               	bz	l14088
 13140                           
 13141                           ; BSR set to: 0
 13142  0034FE  5198               	movf	StartReTxTimer@i& (0+255),w,b
 13143  003500  EC51  F006         	call	PL4	;call to abstracted procedure
 13144  003504  50DE               	movf	postinc2,w,c
 13145  003506  5D94               	subwf	StartReTxTimer@minim& (0+255),w,b
 13146  003508  50DE               	movf	postinc2,w,c
 13147  00350A  5995               	subwfb	(StartReTxTimer@minim+1)& (0+255),w,b
 13148  00350C  50DE               	movf	postinc2,w,c
 13149  00350E  5996               	subwfb	(StartReTxTimer@minim+2)& (0+255),w,b
 13150  003510  50DE               	movf	postinc2,w,c
 13151  003512  5997               	subwfb	(StartReTxTimer@minim+3)& (0+255),w,b
 13152  003514  E321               	bnc	l14088
 13153                           
 13154                           ; BSR set to: 0
 13155  003516  5198               	movf	StartReTxTimer@i& (0+255),w,b
 13156  003518  EC7E  F021         	call	PL6	;call to abstracted procedure
 13157  00351C  50DF               	movf	223,w,c
 13158  00351E  0B0F               	andlw	15
 13159  003520  6F90               	movwf	??_StartReTxTimer& (0+255),b
 13160  003522  5190               	movf	??_StartReTxTimer& (0+255),w,b
 13161  003524  0102               	movlb	2	; () banked
 13162  003526  5DDF               	subwf	(_loRa+223)& (0+255),w,b
 13163  003528  E317               	bnc	l14088
 13164                           
 13165                           ; BSR set to: 2
 13166  00352A  0100               	movlb	0	; () banked
 13167  00352C  5198               	movf	StartReTxTimer@i& (0+255),w,b
 13168  00352E  EC7E  F021         	call	PL6	;call to abstracted procedure
 13169  003532  38DF               	swapf	223,w,c
 13170  003534  0B0F               	andlw	15
 13171  003536  6F90               	movwf	??_StartReTxTimer& (0+255),b
 13172  003538  0102               	movlb	2	; () banked
 13173  00353A  51DF               	movf	(_loRa+223)& (0+255),w,b
 13174  00353C  0100               	movlb	0	; () banked
 13175  00353E  5D90               	subwf	??_StartReTxTimer& (0+255),w,b
 13176  003540  E30B               	bnc	l14088
 13177                           
 13178                           ; BSR set to: 0
 13179                           ;lorawan_eu.c: 910: {
 13180                           ;lorawan_eu.c: 911: minim = Channels[i].channelTimer;
 13181  003542  5198               	movf	StartReTxTimer@i& (0+255),w,b
 13182  003544  EC51  F006         	call	PL4	;call to abstracted procedure
 13183  003548  CFDE F094          	movff	postinc2,StartReTxTimer@minim
 13184  00354C  CFDE F095          	movff	postinc2,StartReTxTimer@minim+1
 13185  003550  CFDE F096          	movff	postinc2,StartReTxTimer@minim+2
 13186  003554  CFDE F097          	movff	postinc2,StartReTxTimer@minim+3
 13187  003558                     l14088:
 13188  003558  0100               	movlb	0	; () banked
 13189  00355A  2B98               	incf	StartReTxTimer@i& (0+255),f,b
 13190  00355C                     l14090:
 13191                           
 13192                           ; BSR set to: 0
 13193  00355C  5198               	movf	StartReTxTimer@i& (0+255),w,b
 13194  00355E  0102               	movlb	2	; () banked
 13195  003560  5DED               	subwf	(_loRa+237)& (0+255),w,b
 13196  003562  E2C2               	bc	l14076
 13197                           
 13198                           ; BSR set to: 2
 13199                           ;lorawan_eu.c: 912: }
 13200                           ;lorawan_eu.c: 913: }
 13201                           ;lorawan_eu.c: 914: loRa.macStatus.macState = RETRANSMISSION_DELAY;
 13202  003564  EC9C  F00C         	call	PL268	;call to abstracted procedure
 13203                           
 13204                           ; BSR set to: 2
 13205                           ;lorawan_eu.c: 915: SwTimerSetTimeout (loRa.automaticReplyTimerId, ( (((uint32_t)(minim)
      +                          ) << (12)) / 125UL ) );
 13206  003568  C094  F090         	movff	StartReTxTimer@minim,??_StartReTxTimer
 13207  00356C  C095  F091         	movff	StartReTxTimer@minim+1,??_StartReTxTimer+1
 13208  003570  C096  F092         	movff	StartReTxTimer@minim+2,??_StartReTxTimer+2
 13209  003574  C097  F093         	movff	StartReTxTimer@minim+3,??_StartReTxTimer+3
 13210  003578  0E0C               	movlw	12
 13211  00357A                     u15945:
 13212  00357A  90D8               	bcf	status,0,c
 13213  00357C  0100               	movlb	0	; () banked
 13214  00357E  3790               	rlcf	??_StartReTxTimer& (0+255),f,b
 13215  003580  3791               	rlcf	(??_StartReTxTimer+1)& (0+255),f,b
 13216  003582  3792               	rlcf	(??_StartReTxTimer+2)& (0+255),f,b
 13217  003584  3793               	rlcf	(??_StartReTxTimer+3)& (0+255),f,b
 13218  003586  2EE8               	decfsz	wreg,f,c
 13219  003588  D7F8               	goto	u15945
 13220  00358A  C090  F060         	movff	??_StartReTxTimer,___lldiv@dividend
 13221  00358E  C091  F061         	movff	??_StartReTxTimer+1,___lldiv@dividend+1
 13222  003592  C092  F062         	movff	??_StartReTxTimer+2,___lldiv@dividend+2
 13223  003596  C093  F063         	movff	??_StartReTxTimer+3,___lldiv@dividend+3
 13224  00359A  0E7D               	movlw	125
 13225  00359C  EC77  F011         	call	PL32	;call to abstracted procedure
 13226  0035A0  EC1B  F025         	call	___lldiv	;wreg free
 13227  0035A4  EC73  F006         	call	PL20	;call to abstracted procedure
 13228  0035A8  51E6               	movf	(_loRa+230)& (0+255),w,b
 13229  0035AA  EC11  F02C         	call	_SwTimerSetTimeout
 13230                           
 13231                           ; BSR set to: 0
 13232                           ;lorawan_eu.c: 916: SwTimerStart (loRa.automaticReplyTimerId);
 13233  0035AE  0102               	movlb	2	; () banked
 13234  0035B0  51E6               	movf	(_loRa+230)& (0+255),w,b
 13235  0035B2  EFC4  F025         	goto	_SwTimerStart
 13236  0035B6                     __end_of_StartReTxTimer:
 13237                           	opt stack 0
 13238                           tosu	equ	0xFFF
 13239                           tosh	equ	0xFFE
 13240                           tosl	equ	0xFFD
 13241                           pclath	equ	0xFFA
 13242                           tblptru	equ	0xFF8
 13243                           tblptrh	equ	0xFF7
 13244                           tblptrl	equ	0xFF6
 13245                           tablat	equ	0xFF5
 13246                           prodh	equ	0xFF4
 13247                           prodl	equ	0xFF3
 13248                           intcon	equ	0xFF2
 13249                           indf0	equ	0xFEF
 13250                           postinc0	equ	0xFEE
 13251                           plusw0	equ	0xFEB
 13252                           fsr0h	equ	0xFEA
 13253                           fsr0l	equ	0xFE9
 13254                           wreg	equ	0xFE8
 13255                           postinc1	equ	0xFE6
 13256                           postdec1	equ	0xFE5
 13257                           plusw1	equ	0xFE3
 13258                           fsr1h	equ	0xFE2
 13259                           fsr1l	equ	0xFE1
 13260                           indf2	equ	0xFDF
 13261                           postinc2	equ	0xFDE
 13262                           postdec2	equ	0xFDD
 13263                           plusw2	equ	0xFDB
 13264                           fsr2h	equ	0xFDA
 13265                           fsr2l	equ	0xFD9
 13266                           status	equ	0xFD8
 13267                           
 13268 ;; *************** function _SetReceptionNotOkState *****************
 13269 ;; Defined at:
 13270 ;;		line 1997 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 13271 ;; Parameters:    Size  Location     Type
 13272 ;;		None
 13273 ;; Auto vars:     Size  Location     Type
 13274 ;;		None
 13275 ;; Return value:  Size  Location     Type
 13276 ;;                  1    wreg      void 
 13277 ;; Registers used:
 13278 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13279 ;; Tracked objects:
 13280 ;;		On entry : 3D/2
 13281 ;;		On exit  : 3C/0
 13282 ;;		Unchanged: 0/0
 13283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13284 ;;      Params:         0       0       0       0       0       0       0       0       0
 13285 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13286 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13287 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13288 ;;Total ram usage:        0 bytes
 13289 ;; Hardware stack levels used:    1
 13290 ;; Hardware stack levels required when called:   14
 13291 ;; This function calls:
 13292 ;;		_LORAWAN_EnterContinuousReceive
 13293 ;;		_RxDataDone
 13294 ;; This function is called by:
 13295 ;;		_LORAWAN_RxDone
 13296 ;; This function uses a non-reentrant model
 13297 ;;
 13298                           
 13299                           	psect	text61
 13300  004CC2                     __ptext61:
 13301                           	opt stack 0
 13302  004CC2                     _SetReceptionNotOkState:
 13303                           	opt stack 0
 13304                           
 13305                           ;lorawan.c: 1999: if ( (loRa.macStatus.macState == RX2_OPEN) || ( (loRa.macStatus.macSta
      +                          te == RX1_OPEN) && (loRa.rx2DelayExpired) ) )
 13306                           
 13307                           ; BSR set to: 0
 13308                           ;incstack = 0
 13309  004CC2  D82C               	call	PL382	;call to abstracted procedure
 13310  004CC4  E006               	bz	l1297
 13311                           
 13312                           ; BSR set to: 2
 13313  004CC6  5102               	movf	(_loRa+2)& (0+255),w,b
 13314  004CC8  0B0F               	andlw	15
 13315  004CCA  0A03               	xorlw	3
 13316  004CCC  E11F               	bnz	l14004
 13317                           
 13318                           ; BSR set to: 2
 13319  004CCE  51F1               	movf	(_loRa+241)& (0+255),w,b
 13320  004CD0  E01D               	bz	l14004
 13321  004CD2                     l1297:
 13322                           
 13323                           ; BSR set to: 2
 13324                           ;lorawan.c: 2000: {
 13325                           ;lorawan.c: 2001: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 0;
 13326  004CD2  9100               	bcf	_loRa& (0+255),0,b
 13327                           
 13328                           ; BSR set to: 2
 13329                           ;lorawan.c: 2002: loRa.macStatus.macState = IDLE;
 13330  004CD4  0EF0               	movlw	-16
 13331  004CD6  1702               	andwf	(_loRa+2)& (0+255),f,b
 13332                           
 13333                           ;lorawan.c: 2004: if ((loRa.deviceClass == CLASS_A) && (rxPayload.RxAppData != (0)))
 13334  004CD8  5112               	movf	(_loRa+18)& (0+255),w,b
 13335  004CDA  E116               	bnz	l14002
 13336                           
 13337                           ; BSR set to: 2
 13338  004CDC  0101               	movlb	1	; () banked
 13339  004CDE  5179               	movf	_rxPayload& (0+255),w,b
 13340  004CE0  117A               	iorwf	(_rxPayload+1)& (0+255),w,b
 13341  004CE2  E012               	bz	l14002
 13342                           
 13343                           ; BSR set to: 1
 13344                           ;lorawan.c: 2005: {
 13345                           ;lorawan.c: 2006: loRa.lorawanMacStatus.synchronization = 0;
 13346  004CE4  0102               	movlb	2	; () banked
 13347  004CE6  9B00               	bcf	_loRa& (0+255),5,b
 13348                           
 13349                           ; BSR set to: 2
 13350                           ;lorawan.c: 2007: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
 13351  004CE8  EC96  F00C         	call	PL48	;call to abstracted procedure
 13352  004CEC  6F63               	movwf	RxDataDone@status& (0+255),b
 13353  004CEE  D801               	call	u15788
 13354  004CF0  D00B               	goto	l14002
 13355  004CF2                     u15788:
 13356  004CF2  0005               	push	
 13357  004CF4  0101               	movlb	1	; () banked
 13358  004CF6  6EFA               	movwf	pclath,c
 13359  004CF8  5179               	movf	_rxPayload& (0+255),w,b
 13360  004CFA  6EFD               	movwf	tosl,c
 13361  004CFC  517A               	movf	(_rxPayload+1)& (0+255),w,b
 13362  004CFE  6EFE               	movwf	tosh,c
 13363  004D00  50F8               	movf	tblptru,w,c
 13364  004D02  6EFF               	movwf	tosu,c
 13365  004D04  50FA               	movf	pclath,w,c
 13366  004D06  0012               	return		;indir
 13367  004D08                     l14002:
 13368                           
 13369                           ;lorawan.c: 2008: }
 13370                           ;lorawan.c: 2009: loRa.macStatus.rxDone = 0;
 13371  004D08  0102               	movlb	2	; () banked
 13372  004D0A  9303               	bcf	(_loRa+3)& (0+255),1,b
 13373  004D0C                     l14004:
 13374                           
 13375                           ; BSR set to: 2
 13376                           ;lorawan.c: 2010: }
 13377                           ;lorawan.c: 2012: if (loRa.deviceClass == CLASS_C)
 13378  004D0C  0E02               	movlw	2
 13379  004D0E  1912               	xorwf	(_loRa+18)& (0+255),w,b
 13380  004D10  A4D8               	btfss	status,2,c
 13381  004D12  0012               	return	
 13382                           
 13383                           ; BSR set to: 2
 13384                           ;lorawan.c: 2013: {
 13385                           ;lorawan.c: 2014: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 13386  004D14  EC40  F004         	call	PL316	;call to abstracted procedure
 13387                           
 13388                           ; BSR set to: 2
 13389                           ;lorawan.c: 2015: LORAWAN_EnterContinuousReceive();
 13390  004D18  EF93  F026         	goto	_LORAWAN_EnterContinuousReceive	;wreg free
 13391  004D1C                     __end_of_SetReceptionNotOkState:
 13392                           	opt stack 0
 13393  004D1C                     PL382:
 13394                           	opt stack 12
 13395  004D1C  0102               	movlb	2	; () banked
 13396  004D1E  5102               	movf	(_loRa+2)& (0+255),w,b
 13397  004D20  0B0F               	andlw	15
 13398  004D22  0A05               	xorlw	5
 13399  004D24  0012               	return	
 13400  004D26                     __end_ofPL382:
 13401                           	opt stack 0
 13402                           tosu	equ	0xFFF
 13403                           tosh	equ	0xFFE
 13404                           tosl	equ	0xFFD
 13405                           pclath	equ	0xFFA
 13406                           tblptru	equ	0xFF8
 13407                           tblptrh	equ	0xFF7
 13408                           tblptrl	equ	0xFF6
 13409                           tablat	equ	0xFF5
 13410                           prodh	equ	0xFF4
 13411                           prodl	equ	0xFF3
 13412                           intcon	equ	0xFF2
 13413                           indf0	equ	0xFEF
 13414                           postinc0	equ	0xFEE
 13415                           plusw0	equ	0xFEB
 13416                           fsr0h	equ	0xFEA
 13417                           fsr0l	equ	0xFE9
 13418                           wreg	equ	0xFE8
 13419                           postinc1	equ	0xFE6
 13420                           postdec1	equ	0xFE5
 13421                           plusw1	equ	0xFE3
 13422                           fsr1h	equ	0xFE2
 13423                           fsr1l	equ	0xFE1
 13424                           indf2	equ	0xFDF
 13425                           postinc2	equ	0xFDE
 13426                           postdec2	equ	0xFDD
 13427                           plusw2	equ	0xFDB
 13428                           fsr2h	equ	0xFDA
 13429                           fsr2l	equ	0xFD9
 13430                           status	equ	0xFD8
 13431                           
 13432 ;; *************** function _SetJoinFailState *****************
 13433 ;; Defined at:
 13434 ;;		line 1104 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 13435 ;; Parameters:    Size  Location     Type
 13436 ;;		None
 13437 ;; Auto vars:     Size  Location     Type
 13438 ;;		None
 13439 ;; Return value:  Size  Location     Type
 13440 ;;                  1    wreg      void 
 13441 ;; Registers used:
 13442 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
 13443 ;; Tracked objects:
 13444 ;;		On entry : 3F/2
 13445 ;;		On exit  : 3F/1
 13446 ;;		Unchanged: 0/0
 13447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13448 ;;      Params:         0       0       0       0       0       0       0       0       0
 13449 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13450 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13451 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13452 ;;Total ram usage:        0 bytes
 13453 ;; Hardware stack levels used:    1
 13454 ;; Hardware stack levels required when called:    8
 13455 ;; This function calls:
 13456 ;;		_RxJoinResponse
 13457 ;; This function is called by:
 13458 ;;		_LORAWAN_RxDone
 13459 ;;		_LORAWAN_RxTimeout
 13460 ;; This function uses a non-reentrant model
 13461 ;;
 13462                           
 13463                           	psect	text62
 13464  005BB4                     __ptext62:
 13465                           	opt stack 0
 13466  005BB4                     _SetJoinFailState:
 13467                           	opt stack 18
 13468                           
 13469                           ; BSR set to: 2
 13470                           ;lorawan.c: 1106: loRa.macStatus.networkJoined = 0;
 13471                           
 13472                           ;incstack = 0
 13473  005BB4  9902               	bcf	(_loRa+2)& (0+255),4,b
 13474                           
 13475                           ;lorawan.c: 1107: loRa.lorawanMacStatus.joining = 0;
 13476  005BB6  9500               	bcf	_loRa& (0+255),2,b
 13477                           
 13478                           ; BSR set to: 2
 13479                           ;lorawan.c: 1108: loRa.macStatus.macState = IDLE;
 13480  005BB8  0EF0               	movlw	-16
 13481  005BBA  1702               	andwf	(_loRa+2)& (0+255),f,b
 13482                           
 13483                           ; BSR set to: 2
 13484                           ;lorawan.c: 1109: if (rxPayload.RxJoinResponse != (0))
 13485  005BBC  0101               	movlb	1	; () banked
 13486  005BBE  517B               	movf	(_rxPayload+2)& (0+255),w,b
 13487  005BC0  117C               	iorwf	(_rxPayload+3)& (0+255),w,b
 13488  005BC2  B4D8               	btfsc	status,2,c
 13489  005BC4  0012               	return	
 13490                           
 13491                           ; BSR set to: 1
 13492                           ;lorawan.c: 1110: {
 13493                           ;lorawan.c: 1111: rxPayload.RxJoinResponse(0);
 13494  005BC6  EE21  F07B         	lfsr	2,_rxPayload+2
 13495  005BCA  0005               	push	
 13496  005BCC  6EFA               	movwf	pclath,c
 13497  005BCE  50DE               	movf	postinc2,w,c
 13498  005BD0  6EFD               	movwf	tosl,c
 13499  005BD2  50DE               	movf	postinc2,w,c
 13500  005BD4  6EFE               	movwf	tosh,c
 13501  005BD6  50F8               	movf	tblptru,w,c
 13502  005BD8  6EFF               	movwf	tosu,c
 13503  005BDA  50FA               	movf	pclath,w,c
 13504  005BDC  0C00               	retlw	0	;indir
 13505  005BDE                     __end_of_SetJoinFailState:
 13506                           	opt stack 0
 13507                           tosu	equ	0xFFF
 13508                           tosh	equ	0xFFE
 13509                           tosl	equ	0xFFD
 13510                           pclath	equ	0xFFA
 13511                           tblptru	equ	0xFF8
 13512                           tblptrh	equ	0xFF7
 13513                           tblptrl	equ	0xFF6
 13514                           tablat	equ	0xFF5
 13515                           prodh	equ	0xFF4
 13516                           prodl	equ	0xFF3
 13517                           intcon	equ	0xFF2
 13518                           indf0	equ	0xFEF
 13519                           postinc0	equ	0xFEE
 13520                           plusw0	equ	0xFEB
 13521                           fsr0h	equ	0xFEA
 13522                           fsr0l	equ	0xFE9
 13523                           wreg	equ	0xFE8
 13524                           postinc1	equ	0xFE6
 13525                           postdec1	equ	0xFE5
 13526                           plusw1	equ	0xFE3
 13527                           fsr1h	equ	0xFE2
 13528                           fsr1l	equ	0xFE1
 13529                           indf2	equ	0xFDF
 13530                           postinc2	equ	0xFDE
 13531                           postdec2	equ	0xFDD
 13532                           plusw2	equ	0xFDB
 13533                           fsr2h	equ	0xFDA
 13534                           fsr2l	equ	0xFD9
 13535                           status	equ	0xFD8
 13536                           
 13537 ;; *************** function _RxJoinResponse *****************
 13538 ;; Defined at:
 13539 ;;		line 121 in file "main.c"
 13540 ;; Parameters:    Size  Location     Type
 13541 ;;  status          1    wreg     unsigned char 
 13542 ;; Auto vars:     Size  Location     Type
 13543 ;;  status          1    0[COMRAM] unsigned char 
 13544 ;; Return value:  Size  Location     Type
 13545 ;;                  1    wreg      void 
 13546 ;; Registers used:
 13547 ;;		wreg, status,2
 13548 ;; Tracked objects:
 13549 ;;		On entry : 3F/1
 13550 ;;		On exit  : 3F/1
 13551 ;;		Unchanged: 0/0
 13552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13553 ;;      Params:         0       0       0       0       0       0       0       0       0
 13554 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13555 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13556 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13557 ;;Total ram usage:        0 bytes
 13558 ;; Hardware stack levels used:    1
 13559 ;; Hardware stack levels required when called:    7
 13560 ;; This function calls:
 13561 ;;		Nothing
 13562 ;; This function is called by:
 13563 ;;		_main
 13564 ;;		_UpdateJoinSuccessState
 13565 ;;		_SetJoinFailState
 13566 ;; This function uses a non-reentrant model
 13567 ;;
 13568                           
 13569                           	psect	text63
 13570  006202                     __ptext63:
 13571                           	opt stack 0
 13572  006202                     _RxJoinResponse:
 13573                           	opt stack 20
 13574                           
 13575                           ; BSR set to: 1
 13576                           ;main.c: 123: JoinedServer = 1;
 13577                           
 13578                           ; BSR set to: 1
 13579                           ;incstack = 0
 13580  006202  0E01               	movlw	1
 13581  006204  6F7E               	movwf	_JoinedServer& (0+255),b
 13582                           
 13583                           ; BSR set to: 1
 13584  006206  0C01               	retlw	1	;funcret
 13585  006208                     __end_of_RxJoinResponse:
 13586                           	opt stack 0
 13587                           tosu	equ	0xFFF
 13588                           tosh	equ	0xFFE
 13589                           tosl	equ	0xFFD
 13590                           pclath	equ	0xFFA
 13591                           tblptru	equ	0xFF8
 13592                           tblptrh	equ	0xFF7
 13593                           tblptrl	equ	0xFF6
 13594                           tablat	equ	0xFF5
 13595                           prodh	equ	0xFF4
 13596                           prodl	equ	0xFF3
 13597                           intcon	equ	0xFF2
 13598                           indf0	equ	0xFEF
 13599                           postinc0	equ	0xFEE
 13600                           plusw0	equ	0xFEB
 13601                           fsr0h	equ	0xFEA
 13602                           fsr0l	equ	0xFE9
 13603                           wreg	equ	0xFE8
 13604                           postinc1	equ	0xFE6
 13605                           postdec1	equ	0xFE5
 13606                           plusw1	equ	0xFE3
 13607                           fsr1h	equ	0xFE2
 13608                           fsr1l	equ	0xFE1
 13609                           indf2	equ	0xFDF
 13610                           postinc2	equ	0xFDE
 13611                           postdec2	equ	0xFDD
 13612                           plusw2	equ	0xFDB
 13613                           fsr2h	equ	0xFDA
 13614                           fsr2l	equ	0xFD9
 13615                           status	equ	0xFD8
 13616                           
 13617 ;; *************** function _MacExecuteCommands *****************
 13618 ;; Defined at:
 13619 ;;		line 1575 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 13620 ;; Parameters:    Size  Location     Type
 13621 ;;  buffer          2   68[BANK0 ] PTR unsigned char 
 13622 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 13623 ;;  fOptsLen        1   70[BANK0 ] unsigned char 
 13624 ;; Auto vars:     Size  Location     Type
 13625 ;;  ptr             2   74[BANK0 ] PTR unsigned char 
 13626 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 13627 ;;  done            1   73[BANK0 ] unsigned char 
 13628 ;; Return value:  Size  Location     Type
 13629 ;;                  2   68[BANK0 ] PTR unsigned char 
 13630 ;; Registers used:
 13631 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13632 ;; Tracked objects:
 13633 ;;		On entry : 3F/0
 13634 ;;		On exit  : 3F/0
 13635 ;;		Unchanged: 0/0
 13636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13637 ;;      Params:         0       3       0       0       0       0       0       0       0
 13638 ;;      Locals:         0       3       0       0       0       0       0       0       0
 13639 ;;      Temps:          0       2       0       0       0       0       0       0       0
 13640 ;;      Totals:         0       8       0       0       0       0       0       0       0
 13641 ;;Total ram usage:        8 bytes
 13642 ;; Hardware stack levels used:    1
 13643 ;; Hardware stack levels required when called:   11
 13644 ;; This function calls:
 13645 ;;		_ExecuteDevStatus
 13646 ;;		_ExecuteDutyCycle
 13647 ;;		_ExecuteLinkAdr
 13648 ;;		_ExecuteLinkCheck
 13649 ;;		_ExecuteNewChannel
 13650 ;;		_ExecuteRxParamSetupReq
 13651 ;;		_ExecuteRxTimingSetup
 13652 ;; This function is called by:
 13653 ;;		_LORAWAN_RxDone
 13654 ;; This function uses a non-reentrant model
 13655 ;;
 13656                           
 13657                           	psect	text64
 13658  0024BE                     __ptext64:
 13659                           	opt stack 0
 13660  0024BE                     _MacExecuteCommands:
 13661                           	opt stack 15
 13662                           
 13663                           ; BSR set to: 0
 13664                           ;lorawan.c: 1577: bool done = 0;
 13665                           
 13666                           ; BSR set to: 1
 13667                           ;incstack = 0
 13668  0024BE  6BA9               	clrf	MacExecuteCommands@done& (0+255),b
 13669                           
 13670                           ; BSR set to: 0
 13671                           ;lorawan.c: 1578: uint8_t *ptr;
 13672                           ;lorawan.c: 1579: ptr = buffer;
 13673  0024C0  C0A4  F0AA         	movff	MacExecuteCommands@buffer,MacExecuteCommands@ptr
 13674  0024C4  C0A5  F0AB         	movff	MacExecuteCommands@buffer+1,MacExecuteCommands@ptr+1
 13675                           
 13676                           ;lorawan.c: 1580: while ( (ptr < ( buffer + fOptsLen )) && (done == 0) )
 13677  0024C8  D0A5               	goto	l14066
 13678  0024CA                     l14030:
 13679                           
 13680                           ; BSR set to: 0
 13681                           ;lorawan.c: 1581: {
 13682                           ;lorawan.c: 1583: loRa.macCommands[loRa.crtMacCmdIndex].channelMaskAck = 0;
 13683  0024CA  0102               	movlb	2	; () banked
 13684  0024CC  51A7               	movf	(_loRa+167)& (0+255),w,b
 13685  0024CE  ECCB  F015         	call	PL2	;call to abstracted procedure
 13686  0024D2  90DF               	bcf	indf2,0,c
 13687                           
 13688                           ;lorawan.c: 1584: loRa.macCommands[loRa.crtMacCmdIndex].dataRateAck = 0;
 13689  0024D4  51A7               	movf	(_loRa+167)& (0+255),w,b
 13690  0024D6  ECCB  F015         	call	PL2	;call to abstracted procedure
 13691  0024DA  92DF               	bcf	indf2,1,c
 13692                           
 13693                           ;lorawan.c: 1585: loRa.macCommands[loRa.crtMacCmdIndex].powerAck = 0;
 13694  0024DC  51A7               	movf	(_loRa+167)& (0+255),w,b
 13695  0024DE  ECCB  F015         	call	PL2	;call to abstracted procedure
 13696  0024E2  94DF               	bcf	indf2,2,c
 13697                           
 13698                           ;lorawan.c: 1586: loRa.macCommands[loRa.crtMacCmdIndex].channelAck = 0;
 13699  0024E4  51A7               	movf	(_loRa+167)& (0+255),w,b
 13700  0024E6  ECCB  F015         	call	PL2	;call to abstracted procedure
 13701  0024EA  96DF               	bcf	indf2,3,c
 13702                           
 13703                           ;lorawan.c: 1587: loRa.macCommands[loRa.crtMacCmdIndex].dataRateReceiveWindowAck = 0;
 13704  0024EC  51A7               	movf	(_loRa+167)& (0+255),w,b
 13705  0024EE  ECCB  F015         	call	PL2	;call to abstracted procedure
 13706  0024F2  98DF               	bcf	indf2,4,c
 13707                           
 13708                           ;lorawan.c: 1588: loRa.macCommands[loRa.crtMacCmdIndex].rx1DROffestAck = 0;
 13709  0024F4  51A7               	movf	(_loRa+167)& (0+255),w,b
 13710  0024F6  ECCB  F015         	call	PL2	;call to abstracted procedure
 13711  0024FA  9ADF               	bcf	indf2,5,c
 13712                           
 13713                           ;lorawan.c: 1589: loRa.macCommands[loRa.crtMacCmdIndex].dataRateRangeAck = 0;
 13714  0024FC  51A7               	movf	(_loRa+167)& (0+255),w,b
 13715  0024FE  ECCB  F015         	call	PL2	;call to abstracted procedure
 13716  002502  9CDF               	bcf	indf2,6,c
 13717                           
 13718                           ;lorawan.c: 1590: loRa.macCommands[loRa.crtMacCmdIndex].channelFrequencyAck = 0;
 13719  002504  51A7               	movf	(_loRa+167)& (0+255),w,b
 13720  002506  ECCB  F015         	call	PL2	;call to abstracted procedure
 13721  00250A  9EDF               	bcf	indf2,7,c
 13722                           
 13723                           ; BSR set to: 2
 13724                           ;lorawan.c: 1593: loRa.macCommands[loRa.crtMacCmdIndex].receivedCid = *ptr;
 13725  00250C  D897               	call	PL376	;call to abstracted procedure
 13726  00250E  51A7               	movf	(_loRa+167)& (0+255),w,b
 13727  002510  0D02               	mullw	2
 13728  002512  0EA8               	movlw	low (_loRa+168)
 13729  002514  24F3               	addwf	prodl,w,c
 13730  002516  6EE9               	movwf	fsr0l,c
 13731  002518  0E02               	movlw	high (_loRa+168)
 13732  00251A  20F4               	addwfc	prodh,w,c
 13733  00251C  ECB0  F010         	call	PL452	;call to abstracted procedure
 13734                           
 13735                           ;lorawan.c: 1595: switch (*ptr ++)
 13736  002520  D05B               	goto	l14058
 13737  002522                     l14034:
 13738                           
 13739                           ; BSR set to: 0
 13740                           ;lorawan.c: 1598: {
 13741                           ;lorawan.c: 1599: ptr = ExecuteLinkCheck (ptr );
 13742  002522  C0AA  F060         	movff	MacExecuteCommands@ptr,ExecuteLinkCheck@ptr
 13743  002526  C0AB  F061         	movff	MacExecuteCommands@ptr+1,ExecuteLinkCheck@ptr+1
 13744  00252A  EC82  F02D         	call	_ExecuteLinkCheck
 13745  00252E  C060  F0AA         	movff	?_ExecuteLinkCheck,MacExecuteCommands@ptr
 13746  002532  C061  F0AB         	movff	?_ExecuteLinkCheck+1,MacExecuteCommands@ptr+1
 13747  002536                     l14036:
 13748                           
 13749                           ; BSR set to: 0
 13750                           ;lorawan.c: 1601: loRa.macCommands[loRa.crtMacCmdIndex].receivedCid = 0xFF;
 13751  002536  0102               	movlb	2	; () banked
 13752  002538  51A7               	movf	(_loRa+167)& (0+255),w,b
 13753  00253A  ECA3  F010         	call	PL16	;call to abstracted procedure
 13754  00253E  68DF               	setf	indf2,c
 13755                           
 13756                           ;lorawan.c: 1602: } break;
 13757  002540  D05F               	goto	l14060
 13758  002542                     l14038:
 13759                           
 13760                           ; BSR set to: 0
 13761                           ;lorawan.c: 1605: {
 13762                           ;lorawan.c: 1606: ptr = ExecuteLinkAdr (ptr );
 13763  002542  C0AA  F06D         	movff	MacExecuteCommands@ptr,ExecuteLinkAdr@ptr
 13764  002546  C0AB  F06E         	movff	MacExecuteCommands@ptr+1,ExecuteLinkAdr@ptr+1
 13765  00254A  EC3D  F015         	call	_ExecuteLinkAdr	;wreg free
 13766  00254E  C06D  F0AA         	movff	?_ExecuteLinkAdr,MacExecuteCommands@ptr
 13767  002552  C06E  F0AB         	movff	?_ExecuteLinkAdr+1,MacExecuteCommands@ptr+1
 13768                           
 13769                           ;lorawan.c: 1607: } break;
 13770  002556  D054               	goto	l14060
 13771  002558                     l14040:
 13772                           
 13773                           ; BSR set to: 0
 13774                           ;lorawan.c: 1610: {
 13775                           ;lorawan.c: 1611: ptr = ExecuteDutyCycle(ptr);
 13776  002558  C0AA  F060         	movff	MacExecuteCommands@ptr,ExecuteDutyCycle@ptr
 13777  00255C  C0AB  F061         	movff	MacExecuteCommands@ptr+1,ExecuteDutyCycle@ptr+1
 13778  002560  EC8A  F029         	call	_ExecuteDutyCycle	;wreg free
 13779  002564  C060  F0AA         	movff	?_ExecuteDutyCycle,MacExecuteCommands@ptr
 13780  002568  C061  F0AB         	movff	?_ExecuteDutyCycle+1,MacExecuteCommands@ptr+1
 13781                           
 13782                           ;lorawan.c: 1612: } break;
 13783  00256C  D049               	goto	l14060
 13784  00256E                     l14042:
 13785                           
 13786                           ; BSR set to: 0
 13787                           ;lorawan.c: 1615: {
 13788                           ;lorawan.c: 1616: ptr = ExecuteRxParamSetupReq (ptr);
 13789  00256E  C0AA  F09C         	movff	MacExecuteCommands@ptr,ExecuteRxParamSetupReq@ptr
 13790  002572  C0AB  F09D         	movff	MacExecuteCommands@ptr+1,ExecuteRxParamSetupReq@ptr+1
 13791  002576  EC11  F018         	call	_ExecuteRxParamSetupReq	;wreg free
 13792  00257A  C09C  F0AA         	movff	?_ExecuteRxParamSetupReq,MacExecuteCommands@ptr
 13793  00257E  C09D  F0AB         	movff	?_ExecuteRxParamSetupReq+1,MacExecuteCommands@ptr+1
 13794                           
 13795                           ;lorawan.c: 1617: } break;
 13796  002582  D03E               	goto	l14060
 13797  002584                     l14044:
 13798                           
 13799                           ; BSR set to: 0
 13800                           ;lorawan.c: 1620: {
 13801                           ;lorawan.c: 1621: ptr = ExecuteDevStatus (ptr);
 13802  002584  C0AA  F060         	movff	MacExecuteCommands@ptr,ExecuteDevStatus@ptr
 13803  002588  C0AB  F061         	movff	MacExecuteCommands@ptr+1,ExecuteDevStatus@ptr+1
 13804  00258C  ECBB  F030         	call	_ExecuteDevStatus	;wreg free
 13805  002590  C060  F0AA         	movff	?_ExecuteDevStatus,MacExecuteCommands@ptr
 13806  002594  C061  F0AB         	movff	?_ExecuteDevStatus+1,MacExecuteCommands@ptr+1
 13807                           
 13808                           ;lorawan.c: 1622: } break;
 13809  002598  D033               	goto	l14060
 13810  00259A                     l14046:
 13811                           
 13812                           ; BSR set to: 0
 13813                           ;lorawan.c: 1625: {
 13814                           ;lorawan.c: 1626: ptr = ExecuteNewChannel (ptr);
 13815  00259A  C0AA  F09C         	movff	MacExecuteCommands@ptr,ExecuteNewChannel@ptr
 13816  00259E  C0AB  F09D         	movff	MacExecuteCommands@ptr+1,ExecuteNewChannel@ptr+1
 13817  0025A2  EC23  F013         	call	_ExecuteNewChannel	;wreg free
 13818  0025A6  C09C  F0AA         	movff	?_ExecuteNewChannel,MacExecuteCommands@ptr
 13819  0025AA  C09D  F0AB         	movff	?_ExecuteNewChannel+1,MacExecuteCommands@ptr+1
 13820                           
 13821                           ;lorawan.c: 1628: } break;
 13822  0025AE  D028               	goto	l14060
 13823  0025B0                     l14048:
 13824                           
 13825                           ; BSR set to: 0
 13826                           ;lorawan.c: 1631: {
 13827                           ;lorawan.c: 1632: ptr = ExecuteRxTimingSetup (ptr);
 13828  0025B0  C0AA  F067         	movff	MacExecuteCommands@ptr,ExecuteRxTimingSetup@ptr
 13829  0025B4  C0AB  F068         	movff	MacExecuteCommands@ptr+1,ExecuteRxTimingSetup@ptr+1
 13830  0025B8  EC8A  F02E         	call	_ExecuteRxTimingSetup	;wreg free
 13831  0025BC  C067  F0AA         	movff	?_ExecuteRxTimingSetup,MacExecuteCommands@ptr
 13832  0025C0  C068  F0AB         	movff	?_ExecuteRxTimingSetup+1,MacExecuteCommands@ptr+1
 13833                           
 13834                           ;lorawan.c: 1633: } break;
 13835  0025C4  D01D               	goto	l14060
 13836  0025C6                     l14050:
 13837                           
 13838                           ; BSR set to: 0
 13839                           ;lorawan.c: 1636: {
 13840                           ;lorawan.c: 1637: done = 1;
 13841  0025C6  0E01               	movlw	1
 13842  0025C8  6FA9               	movwf	MacExecuteCommands@done& (0+255),b
 13843                           
 13844                           ; BSR set to: 0
 13845                           ;lorawan.c: 1638: ptr = buffer + fOptsLen;
 13846  0025CA  51A6               	movf	MacExecuteCommands@fOptsLen& (0+255),w,b
 13847  0025CC  25A4               	addwf	MacExecuteCommands@buffer& (0+255),w,b
 13848  0025CE  6FAA               	movwf	MacExecuteCommands@ptr& (0+255),b
 13849  0025D0  0E00               	movlw	0
 13850  0025D2  21A5               	addwfc	(MacExecuteCommands@buffer+1)& (0+255),w,b
 13851  0025D4  6FAB               	movwf	(MacExecuteCommands@ptr+1)& (0+255),b
 13852  0025D6  D7AF               	goto	l14036
 13853  0025D8                     l14058:
 13854                           
 13855                           ; BSR set to: 2
 13856  0025D8  D831               	call	PL376	;call to abstracted procedure
 13857  0025DA  0100               	movlb	0	; () banked
 13858  0025DC  4BAA               	infsnz	MacExecuteCommands@ptr& (0+255),f,b
 13859  0025DE  2BAB               	incf	(MacExecuteCommands@ptr+1)& (0+255),f,b
 13860  0025E0  50DF               	movf	indf2,w,c
 13861                           
 13862                           ; Switch size 1, requested type "space"
 13863                           ; Number of cases is 7, Range of values is 2 to 8
 13864                           ; switch strategies available:
 13865                           ; Name         Instructions Cycles
 13866                           ; simple_byte           22    12 (average)
 13867                           ;	Chosen strategy is simple_byte
 13868  0025E2  0A02               	xorlw	2	; case 2
 13869  0025E4  E09E               	bz	l14034
 13870  0025E6  0A01               	xorlw	1	; case 3
 13871  0025E8  E0AC               	bz	l14038
 13872  0025EA  0A07               	xorlw	7	; case 4
 13873  0025EC  E0B5               	bz	l14040
 13874  0025EE  0A01               	xorlw	1	; case 5
 13875  0025F0  E0BE               	bz	l14042
 13876  0025F2  0A03               	xorlw	3	; case 6
 13877  0025F4  E0C7               	bz	l14044
 13878  0025F6  0A01               	xorlw	1	; case 7
 13879  0025F8  E0D0               	bz	l14046
 13880  0025FA  0A0F               	xorlw	15	; case 8
 13881  0025FC  E0D9               	bz	l14048
 13882  0025FE  D7E3               	goto	l14050
 13883  002600                     l14060:
 13884                           
 13885                           ;lorawan.c: 1643: if((loRa.macCommands[loRa.crtMacCmdIndex].receivedCid != 0xFF) &&
 13886                           ;lorawan.c: 1644: (loRa.crtMacCmdIndex < 16))
 13887  002600  0102               	movlb	2	; () banked
 13888  002602  51A7               	movf	(_loRa+167)& (0+255),w,b
 13889  002604  ECA3  F010         	call	PL16	;call to abstracted procedure
 13890  002608  28DE               	incf	postinc2,w,c
 13891  00260A  E004               	bz	l14066
 13892                           
 13893                           ; BSR set to: 2
 13894  00260C  0E10               	movlw	16
 13895  00260E  61A7               	cpfslt	(_loRa+167)& (0+255),b
 13896  002610  D001               	goto	l14066
 13897                           
 13898                           ; BSR set to: 2
 13899                           ;lorawan.c: 1645: {
 13900                           ;lorawan.c: 1646: loRa.crtMacCmdIndex ++;
 13901  002612  2BA7               	incf	(_loRa+167)& (0+255),f,b
 13902  002614                     l14066:
 13903  002614  0100               	movlb	0	; () banked
 13904  002616  51A6               	movf	MacExecuteCommands@fOptsLen& (0+255),w,b
 13905  002618  25A4               	addwf	MacExecuteCommands@buffer& (0+255),w,b
 13906  00261A  6FA7               	movwf	??_MacExecuteCommands& (0+255),b
 13907  00261C  0E00               	movlw	0
 13908  00261E  21A5               	addwfc	(MacExecuteCommands@buffer+1)& (0+255),w,b
 13909  002620  6FA8               	movwf	(??_MacExecuteCommands+1)& (0+255),b
 13910  002622  51A7               	movf	??_MacExecuteCommands& (0+255),w,b
 13911  002624  5DAA               	subwf	MacExecuteCommands@ptr& (0+255),w,b
 13912  002626  51A8               	movf	(??_MacExecuteCommands+1)& (0+255),w,b
 13913  002628  59AB               	subwfb	(MacExecuteCommands@ptr+1)& (0+255),w,b
 13914  00262A  E203               	bc	l14070
 13915                           
 13916                           ; BSR set to: 0
 13917  00262C  51A9               	movf	MacExecuteCommands@done& (0+255),w,b
 13918  00262E  E101 D74C          	bz	l14030
 13919  002632                     l14070:
 13920                           
 13921                           ; BSR set to: 0
 13922                           ;lorawan.c: 1647: }
 13923                           ;lorawan.c: 1648: }
 13924                           ;lorawan.c: 1649: return ptr;
 13925  002632  C0AA  F0A4         	movff	MacExecuteCommands@ptr,?_MacExecuteCommands
 13926  002636  C0AB  F0A5         	movff	MacExecuteCommands@ptr+1,?_MacExecuteCommands+1
 13927                           
 13928                           ; BSR set to: 0
 13929  00263A  0012               	return		;funcret
 13930  00263C                     __end_of_MacExecuteCommands:
 13931                           	opt stack 0
 13932  00263C                     PL376:
 13933                           	opt stack 15
 13934  00263C  C0AA  FFD9         	movff	MacExecuteCommands@ptr,fsr2l
 13935  002640  C0AB  FFDA         	movff	MacExecuteCommands@ptr+1,fsr2h
 13936  002644  0012               	return	
 13937  002646                     __end_ofPL376:
 13938                           	opt stack 0
 13939                           tosu	equ	0xFFF
 13940                           tosh	equ	0xFFE
 13941                           tosl	equ	0xFFD
 13942                           pclath	equ	0xFFA
 13943                           tblptru	equ	0xFF8
 13944                           tblptrh	equ	0xFF7
 13945                           tblptrl	equ	0xFF6
 13946                           tablat	equ	0xFF5
 13947                           prodh	equ	0xFF4
 13948                           prodl	equ	0xFF3
 13949                           intcon	equ	0xFF2
 13950                           indf0	equ	0xFEF
 13951                           postinc0	equ	0xFEE
 13952                           plusw0	equ	0xFEB
 13953                           fsr0h	equ	0xFEA
 13954                           fsr0l	equ	0xFE9
 13955                           wreg	equ	0xFE8
 13956                           postinc1	equ	0xFE6
 13957                           postdec1	equ	0xFE5
 13958                           plusw1	equ	0xFE3
 13959                           fsr1h	equ	0xFE2
 13960                           fsr1l	equ	0xFE1
 13961                           indf2	equ	0xFDF
 13962                           postinc2	equ	0xFDE
 13963                           postdec2	equ	0xFDD
 13964                           plusw2	equ	0xFDB
 13965                           fsr2h	equ	0xFDA
 13966                           fsr2l	equ	0xFD9
 13967                           status	equ	0xFD8
 13968                           
 13969 ;; *************** function _ExecuteRxTimingSetup *****************
 13970 ;; Defined at:
 13971 ;;		line 1659 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 13972 ;; Parameters:    Size  Location     Type
 13973 ;;  ptr             2    7[BANK0 ] PTR unsigned char 
 13974 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 13975 ;; Auto vars:     Size  Location     Type
 13976 ;;  delay           1    9[BANK0 ] unsigned char 
 13977 ;; Return value:  Size  Location     Type
 13978 ;;                  2    7[BANK0 ] PTR unsigned char 
 13979 ;; Registers used:
 13980 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13981 ;; Tracked objects:
 13982 ;;		On entry : 3F/0
 13983 ;;		On exit  : 3F/2
 13984 ;;		Unchanged: 0/0
 13985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13986 ;;      Params:         0       2       0       0       0       0       0       0       0
 13987 ;;      Locals:         0       1       0       0       0       0       0       0       0
 13988 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13989 ;;      Totals:         0       3       0       0       0       0       0       0       0
 13990 ;;Total ram usage:        3 bytes
 13991 ;; Hardware stack levels used:    1
 13992 ;; Hardware stack levels required when called:    9
 13993 ;; This function calls:
 13994 ;;		_UpdateReceiveDelays
 13995 ;; This function is called by:
 13996 ;;		_MacExecuteCommands
 13997 ;; This function uses a non-reentrant model
 13998 ;;
 13999                           
 14000                           	psect	text65
 14001  005D14                     __ptext65:
 14002                           	opt stack 0
 14003  005D14                     _ExecuteRxTimingSetup:
 14004                           	opt stack 16
 14005                           
 14006                           ; BSR set to: 0
 14007                           ;lorawan.c: 1661: uint8_t delay;
 14008                           ;lorawan.c: 1663: delay = (*ptr) & 0x0F;
 14009                           
 14010                           ; BSR set to: 0
 14011                           ;incstack = 0
 14012  005D14  C067  FFD9         	movff	ExecuteRxTimingSetup@ptr,fsr2l
 14013  005D18  C068  FFDA         	movff	ExecuteRxTimingSetup@ptr+1,fsr2h
 14014  005D1C  50DF               	movf	indf2,w,c
 14015  005D1E  0B0F               	andlw	15
 14016  005D20  6F69               	movwf	ExecuteRxTimingSetup@delay& (0+255),b
 14017                           
 14018                           ; BSR set to: 0
 14019                           ;lorawan.c: 1664: ptr++;
 14020  005D22  4B67               	infsnz	ExecuteRxTimingSetup@ptr& (0+255),f,b
 14021  005D24  2B68               	incf	(ExecuteRxTimingSetup@ptr+1)& (0+255),f,b
 14022                           
 14023                           ; BSR set to: 0
 14024                           ;lorawan.c: 1666: UpdateReceiveDelays (delay);
 14025  005D26  5169               	movf	ExecuteRxTimingSetup@delay& (0+255),w,b
 14026  005D28  EC48  F02C         	call	_UpdateReceiveDelays
 14027                           
 14028                           ; BSR set to: 2
 14029                           ;lorawan.c: 1667: loRa.macStatus.rxTimingSetup = 1;
 14030  005D2C  8104               	bsf	(_loRa+4)& (0+255),0,b
 14031                           
 14032                           ; BSR set to: 2
 14033                           ;lorawan.c: 1669: return ptr;
 14034  005D2E  C067  F067         	movff	ExecuteRxTimingSetup@ptr,?_ExecuteRxTimingSetup
 14035  005D32  C068  F068         	movff	ExecuteRxTimingSetup@ptr+1,?_ExecuteRxTimingSetup+1
 14036                           
 14037                           ; BSR set to: 2
 14038  005D36  0012               	return		;funcret
 14039  005D38                     __end_of_ExecuteRxTimingSetup:
 14040                           	opt stack 0
 14041                           tosu	equ	0xFFF
 14042                           tosh	equ	0xFFE
 14043                           tosl	equ	0xFFD
 14044                           pclath	equ	0xFFA
 14045                           tblptru	equ	0xFF8
 14046                           tblptrh	equ	0xFF7
 14047                           tblptrl	equ	0xFF6
 14048                           tablat	equ	0xFF5
 14049                           prodh	equ	0xFF4
 14050                           prodl	equ	0xFF3
 14051                           intcon	equ	0xFF2
 14052                           indf0	equ	0xFEF
 14053                           postinc0	equ	0xFEE
 14054                           plusw0	equ	0xFEB
 14055                           fsr0h	equ	0xFEA
 14056                           fsr0l	equ	0xFE9
 14057                           wreg	equ	0xFE8
 14058                           postinc1	equ	0xFE6
 14059                           postdec1	equ	0xFE5
 14060                           plusw1	equ	0xFE3
 14061                           fsr1h	equ	0xFE2
 14062                           fsr1l	equ	0xFE1
 14063                           indf2	equ	0xFDF
 14064                           postinc2	equ	0xFDE
 14065                           postdec2	equ	0xFDD
 14066                           plusw2	equ	0xFDB
 14067                           fsr2h	equ	0xFDA
 14068                           fsr2l	equ	0xFD9
 14069                           status	equ	0xFD8
 14070                           
 14071 ;; *************** function _UpdateReceiveDelays *****************
 14072 ;; Defined at:
 14073 ;;		line 2026 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 14074 ;; Parameters:    Size  Location     Type
 14075 ;;  delay           1    wreg     unsigned char 
 14076 ;; Auto vars:     Size  Location     Type
 14077 ;;  delay           1    6[BANK0 ] unsigned char 
 14078 ;; Return value:  Size  Location     Type
 14079 ;;                  1    wreg      void 
 14080 ;; Registers used:
 14081 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 14082 ;; Tracked objects:
 14083 ;;		On entry : 3F/0
 14084 ;;		On exit  : 3F/2
 14085 ;;		Unchanged: 0/0
 14086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14087 ;;      Params:         0       0       0       0       0       0       0       0       0
 14088 ;;      Locals:         0       1       0       0       0       0       0       0       0
 14089 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14090 ;;      Totals:         0       1       0       0       0       0       0       0       0
 14091 ;;Total ram usage:        1 bytes
 14092 ;; Hardware stack levels used:    1
 14093 ;; Hardware stack levels required when called:    8
 14094 ;; This function calls:
 14095 ;;		___wmul
 14096 ;; This function is called by:
 14097 ;;		_LORAWAN_RxDone
 14098 ;;		_ExecuteRxTimingSetup
 14099 ;; This function uses a non-reentrant model
 14100 ;;
 14101                           
 14102                           	psect	text66
 14103  005890                     __ptext66:
 14104                           	opt stack 0
 14105  005890                     _UpdateReceiveDelays:
 14106                           	opt stack 18
 14107                           
 14108                           ; BSR set to: 2
 14109                           ;incstack = 0
 14110                           ;UpdateReceiveDelays@delay stored from wreg
 14111  005890  6F66               	movwf	UpdateReceiveDelays@delay& (0+255),b
 14112                           
 14113                           ;lorawan.c: 2028: loRa.protocolParameters.receiveDelay1 = 1000 * delay ;
 14114  005892  C066  F060         	movff	UpdateReceiveDelays@delay,___wmul@multiplier
 14115  005896  0100               	movlb	0	; () banked
 14116  005898  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 14117  00589A  0E03               	movlw	3
 14118  00589C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14119  00589E  0EE8               	movlw	232
 14120  0058A0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14121  0058A2  EC18  F02E         	call	___wmul	;wreg free
 14122  0058A6  C060  F294         	movff	?___wmul,_loRa+148
 14123  0058AA  C061  F295         	movff	?___wmul+1,_loRa+149
 14124                           
 14125                           ; BSR set to: 0
 14126                           ;lorawan.c: 2029: if (delay == 0)
 14127  0058AE  5166               	movf	UpdateReceiveDelays@delay& (0+255),w,b
 14128  0058B0  E102               	bnz	l12862
 14129                           
 14130                           ; BSR set to: 0
 14131                           ;lorawan.c: 2030: {
 14132                           ;lorawan.c: 2031: loRa.protocolParameters.receiveDelay1 = 1000;
 14133  0058B2  EC78  F014         	call	PL344	;call to abstracted procedure
 14134  0058B6                     l12862:
 14135                           
 14136                           ;lorawan.c: 2032: }
 14137                           ;lorawan.c: 2034: loRa.protocolParameters.receiveDelay2 = loRa.protocolParameters.receiv
      +                          eDelay1 + 1000;
 14138  0058B6  0EE8               	movlw	232
 14139  0058B8  0102               	movlb	2	; () banked
 14140  0058BA  2594               	addwf	(_loRa+148)& (0+255),w,b
 14141  0058BC  6F96               	movwf	(_loRa+150)& (0+255),b
 14142  0058BE  0E03               	movlw	3
 14143  0058C0  2195               	addwfc	(_loRa+149)& (0+255),w,b
 14144  0058C2  6F97               	movwf	(_loRa+151)& (0+255),b
 14145                           
 14146                           ; BSR set to: 2
 14147  0058C4  0012               	return		;funcret
 14148  0058C6                     __end_of_UpdateReceiveDelays:
 14149                           	opt stack 0
 14150                           tosu	equ	0xFFF
 14151                           tosh	equ	0xFFE
 14152                           tosl	equ	0xFFD
 14153                           pclath	equ	0xFFA
 14154                           tblptru	equ	0xFF8
 14155                           tblptrh	equ	0xFF7
 14156                           tblptrl	equ	0xFF6
 14157                           tablat	equ	0xFF5
 14158                           prodh	equ	0xFF4
 14159                           prodl	equ	0xFF3
 14160                           intcon	equ	0xFF2
 14161                           indf0	equ	0xFEF
 14162                           postinc0	equ	0xFEE
 14163                           plusw0	equ	0xFEB
 14164                           fsr0h	equ	0xFEA
 14165                           fsr0l	equ	0xFE9
 14166                           wreg	equ	0xFE8
 14167                           postinc1	equ	0xFE6
 14168                           postdec1	equ	0xFE5
 14169                           plusw1	equ	0xFE3
 14170                           fsr1h	equ	0xFE2
 14171                           fsr1l	equ	0xFE1
 14172                           indf2	equ	0xFDF
 14173                           postinc2	equ	0xFDE
 14174                           postdec2	equ	0xFDD
 14175                           plusw2	equ	0xFDB
 14176                           fsr2h	equ	0xFDA
 14177                           fsr2l	equ	0xFD9
 14178                           status	equ	0xFD8
 14179                           
 14180 ;; *************** function ___wmul *****************
 14181 ;; Defined at:
 14182 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
 14183 ;; Parameters:    Size  Location     Type
 14184 ;;  multiplier      2    0[BANK0 ] unsigned int 
 14185 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 14186 ;; Auto vars:     Size  Location     Type
 14187 ;;  product         2    4[BANK0 ] unsigned int 
 14188 ;; Return value:  Size  Location     Type
 14189 ;;                  2    0[BANK0 ] unsigned int 
 14190 ;; Registers used:
 14191 ;;		wreg, status,2, status,0, prodl, prodh
 14192 ;; Tracked objects:
 14193 ;;		On entry : 3F/0
 14194 ;;		On exit  : 3F/0
 14195 ;;		Unchanged: 0/0
 14196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14197 ;;      Params:         0       4       0       0       0       0       0       0       0
 14198 ;;      Locals:         0       2       0       0       0       0       0       0       0
 14199 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14200 ;;      Totals:         0       6       0       0       0       0       0       0       0
 14201 ;;Total ram usage:        6 bytes
 14202 ;; Hardware stack levels used:    1
 14203 ;; Hardware stack levels required when called:    7
 14204 ;; This function calls:
 14205 ;;		Nothing
 14206 ;; This function is called by:
 14207 ;;		_UpdateReceiveDelays
 14208 ;; This function uses a non-reentrant model
 14209 ;;
 14210                           
 14211                           	psect	text67
 14212  005C30                     __ptext67:
 14213                           	opt stack 0
 14214  005C30                     ___wmul:
 14215                           	opt stack 18
 14216                           
 14217                           ; BSR set to: 0
 14218                           
 14219                           ; BSR set to: 2
 14220                           ;incstack = 0
 14221  005C30  5160               	movf	___wmul@multiplier& (0+255),w,b
 14222  005C32  0362               	mulwf	___wmul@multiplicand& (0+255),b
 14223  005C34  CFF3 F064          	movff	prodl,___wmul@product
 14224  005C38  CFF4 F065          	movff	prodh,___wmul@product+1
 14225  005C3C  5160               	movf	___wmul@multiplier& (0+255),w,b
 14226  005C3E  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 14227  005C40  50F3               	movf	prodl,w,c
 14228  005C42  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 14229  005C44  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 14230  005C46  0362               	mulwf	___wmul@multiplicand& (0+255),b
 14231  005C48  50F3               	movf	prodl,w,c
 14232  005C4A  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 14233                           
 14234                           ; BSR set to: 0
 14235  005C4C  C064  F060         	movff	___wmul@product,?___wmul
 14236  005C50  C065  F061         	movff	___wmul@product+1,?___wmul+1
 14237                           
 14238                           ; BSR set to: 0
 14239  005C54  0012               	return		;funcret
 14240  005C56                     __end_of___wmul:
 14241                           	opt stack 0
 14242                           tosu	equ	0xFFF
 14243                           tosh	equ	0xFFE
 14244                           tosl	equ	0xFFD
 14245                           pclath	equ	0xFFA
 14246                           tblptru	equ	0xFF8
 14247                           tblptrh	equ	0xFF7
 14248                           tblptrl	equ	0xFF6
 14249                           tablat	equ	0xFF5
 14250                           prodh	equ	0xFF4
 14251                           prodl	equ	0xFF3
 14252                           intcon	equ	0xFF2
 14253                           indf0	equ	0xFEF
 14254                           postinc0	equ	0xFEE
 14255                           plusw0	equ	0xFEB
 14256                           fsr0h	equ	0xFEA
 14257                           fsr0l	equ	0xFE9
 14258                           wreg	equ	0xFE8
 14259                           postinc1	equ	0xFE6
 14260                           postdec1	equ	0xFE5
 14261                           plusw1	equ	0xFE3
 14262                           fsr1h	equ	0xFE2
 14263                           fsr1l	equ	0xFE1
 14264                           indf2	equ	0xFDF
 14265                           postinc2	equ	0xFDE
 14266                           postdec2	equ	0xFDD
 14267                           plusw2	equ	0xFDB
 14268                           fsr2h	equ	0xFDA
 14269                           fsr2l	equ	0xFD9
 14270                           status	equ	0xFD8
 14271                           
 14272 ;; *************** function _ExecuteRxParamSetupReq *****************
 14273 ;; Defined at:
 14274 ;;		line 740 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 14275 ;; Parameters:    Size  Location     Type
 14276 ;;  ptr             2   60[BANK0 ] PTR unsigned char 
 14277 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 14278 ;; Auto vars:     Size  Location     Type
 14279 ;;  frequency       4   62[BANK0 ] unsigned long 
 14280 ;;  dlSettings      1   66[BANK0 ] struct .
 14281 ;; Return value:  Size  Location     Type
 14282 ;;                  2   60[BANK0 ] PTR unsigned char 
 14283 ;; Registers used:
 14284 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14285 ;; Tracked objects:
 14286 ;;		On entry : 3F/0
 14287 ;;		On exit  : 3F/2
 14288 ;;		Unchanged: 0/0
 14289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14290 ;;      Params:         0       2       0       0       0       0       0       0       0
 14291 ;;      Locals:         0       5       0       0       0       0       0       0       0
 14292 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14293 ;;      Totals:         0       7       0       0       0       0       0       0       0
 14294 ;;Total ram usage:        7 bytes
 14295 ;; Hardware stack levels used:    1
 14296 ;; Hardware stack levels required when called:    8
 14297 ;; This function calls:
 14298 ;;		_UpdateReceiveWindow2Parameters
 14299 ;;		_ValidateDataRate
 14300 ;;		_ValidateFrequency
 14301 ;;		_ValidateRxOffset
 14302 ;;		___lmul
 14303 ;; This function is called by:
 14304 ;;		_MacExecuteCommands
 14305 ;; This function uses a non-reentrant model
 14306 ;;
 14307                           
 14308                           	psect	text68
 14309  003022                     __ptext68:
 14310                           	opt stack 0
 14311  003022                     _ExecuteRxParamSetupReq:
 14312                           	opt stack 0
 14313                           
 14314                           ; BSR set to: 0
 14315                           ;lorawan_eu.c: 747: dlSettings.value = *(ptr++);
 14316                           
 14317                           ; BSR set to: 0
 14318                           
 14319                           ; BSR set to: 0
 14320                           ;incstack = 0
 14321  003022  D87D               	call	PL388	;call to abstracted procedure
 14322  003024  50DF               	movf	indf2,w,c
 14323  003026  6FA2               	movwf	ExecuteRxParamSetupReq@dlSettings& (0+255),b
 14324                           
 14325                           ; BSR set to: 0
 14326  003028  4B9C               	infsnz	ExecuteRxParamSetupReq@ptr& (0+255),f,b
 14327  00302A  2B9D               	incf	(ExecuteRxParamSetupReq@ptr+1)& (0+255),f,b
 14328                           
 14329                           ; BSR set to: 0
 14330                           ;lorawan_eu.c: 749: frequency = (*((uint32_t*)ptr)) & 0x00FFFFFF;
 14331  00302C  D878               	call	PL388	;call to abstracted procedure
 14332  00302E  0EFF               	movlw	255
 14333  003030  14DE               	andwf	postinc2,w,c
 14334  003032  6F9E               	movwf	ExecuteRxParamSetupReq@frequency& (0+255),b
 14335  003034  0EFF               	movlw	255
 14336  003036  14DE               	andwf	postinc2,w,c
 14337  003038  6F9F               	movwf	(ExecuteRxParamSetupReq@frequency+1)& (0+255),b
 14338  00303A  0EFF               	movlw	255
 14339  00303C  14DE               	andwf	postinc2,w,c
 14340  00303E  6FA0               	movwf	(ExecuteRxParamSetupReq@frequency+2)& (0+255),b
 14341  003040  0E00               	movlw	0
 14342  003042  14DE               	andwf	postinc2,w,c
 14343  003044  6FA1               	movwf	(ExecuteRxParamSetupReq@frequency+3)& (0+255),b
 14344                           
 14345                           ; BSR set to: 0
 14346                           ;lorawan_eu.c: 750: frequency = frequency * 100;
 14347  003046  C09E  F090         	movff	ExecuteRxParamSetupReq@frequency,___lmul@multiplier
 14348  00304A  C09F  F091         	movff	ExecuteRxParamSetupReq@frequency+1,___lmul@multiplier+1
 14349  00304E  C0A0  F092         	movff	ExecuteRxParamSetupReq@frequency+2,___lmul@multiplier+2
 14350  003052  C0A1  F093         	movff	ExecuteRxParamSetupReq@frequency+3,___lmul@multiplier+3
 14351  003056  0E64               	movlw	100
 14352  003058  EC98  F006         	call	PL80	;call to abstracted procedure
 14353  00305C  EC25  F02A         	call	___lmul	;wreg free
 14354  003060  C090  F09E         	movff	?___lmul,ExecuteRxParamSetupReq@frequency
 14355  003064  C091  F09F         	movff	?___lmul+1,ExecuteRxParamSetupReq@frequency+1
 14356  003068  C092  F0A0         	movff	?___lmul+2,ExecuteRxParamSetupReq@frequency+2
 14357  00306C  C093  F0A1         	movff	?___lmul+3,ExecuteRxParamSetupReq@frequency+3
 14358                           
 14359                           ; BSR set to: 0
 14360                           ;lorawan_eu.c: 751: ptr = ptr + 3;
 14361  003070  0E03               	movlw	3
 14362  003072  279C               	addwf	ExecuteRxParamSetupReq@ptr& (0+255),f,b
 14363  003074  0E00               	movlw	0
 14364  003076  239D               	addwfc	(ExecuteRxParamSetupReq@ptr+1)& (0+255),f,b
 14365                           
 14366                           ; BSR set to: 0
 14367                           ;lorawan_eu.c: 753: if (ValidateFrequency (frequency) == OK)
 14368  003078  C09E  F060         	movff	ExecuteRxParamSetupReq@frequency,ValidateFrequency@frequencyNew
 14369  00307C  C09F  F061         	movff	ExecuteRxParamSetupReq@frequency+1,ValidateFrequency@frequencyNew+1
 14370  003080  C0A0  F062         	movff	ExecuteRxParamSetupReq@frequency+2,ValidateFrequency@frequencyNew+2
 14371  003084  C0A1  F063         	movff	ExecuteRxParamSetupReq@frequency+3,ValidateFrequency@frequencyNew+3
 14372  003088  ECB5  F027         	call	_ValidateFrequency	;wreg free
 14373  00308C  0900               	iorlw	0
 14374  00308E  E105               	bnz	l13654
 14375                           
 14376                           ; BSR set to: 0
 14377                           ;lorawan_eu.c: 754: {
 14378                           ;lorawan_eu.c: 755: loRa.macCommands[loRa.crtMacCmdIndex].channelAck = 1;
 14379  003090  0102               	movlb	2	; () banked
 14380  003092  51A7               	movf	(_loRa+167)& (0+255),w,b
 14381  003094  ECCB  F015         	call	PL2	;call to abstracted procedure
 14382  003098  86DF               	bsf	indf2,3,c
 14383  00309A                     l13654:
 14384                           
 14385                           ;lorawan_eu.c: 756: }
 14386                           ;lorawan_eu.c: 758: if (ValidateDataRate (dlSettings.bits.rx2DataRate) == OK)
 14387  00309A  0100               	movlb	0	; () banked
 14388  00309C  51A2               	movf	ExecuteRxParamSetupReq@dlSettings& (0+255),w,b
 14389  00309E  0B0F               	andlw	15
 14390  0030A0  EC36  F030         	call	_ValidateDataRate
 14391  0030A4  0900               	iorlw	0
 14392  0030A6  E105               	bnz	l13658
 14393                           
 14394                           ; BSR set to: 0
 14395                           ;lorawan_eu.c: 759: {
 14396                           ;lorawan_eu.c: 760: loRa.macCommands[loRa.crtMacCmdIndex].dataRateReceiveWindowAck = 1;
 14397  0030A8  0102               	movlb	2	; () banked
 14398  0030AA  51A7               	movf	(_loRa+167)& (0+255),w,b
 14399  0030AC  ECCB  F015         	call	PL2	;call to abstracted procedure
 14400  0030B0  88DF               	bsf	indf2,4,c
 14401  0030B2                     l13658:
 14402                           
 14403                           ;lorawan_eu.c: 761: }
 14404                           ;lorawan_eu.c: 763: if (ValidateRxOffset (dlSettings.bits.rx1DROffset) == OK)
 14405  0030B2  0100               	movlb	0	; () banked
 14406  0030B4  39A2               	swapf	ExecuteRxParamSetupReq@dlSettings& (0+255),w,b
 14407  0030B6  0B07               	andlw	7
 14408  0030B8  EC2C  F030         	call	_ValidateRxOffset
 14409  0030BC  0900               	iorlw	0
 14410  0030BE  E105               	bnz	l1766
 14411                           
 14412                           ; BSR set to: 0
 14413                           ;lorawan_eu.c: 764: {
 14414                           ;lorawan_eu.c: 765: loRa.macCommands[loRa.crtMacCmdIndex].rx1DROffestAck = 1;
 14415  0030C0  0102               	movlb	2	; () banked
 14416  0030C2  51A7               	movf	(_loRa+167)& (0+255),w,b
 14417  0030C4  ECCB  F015         	call	PL2	;call to abstracted procedure
 14418  0030C8  8ADF               	bsf	indf2,5,c
 14419  0030CA                     l1766:
 14420                           
 14421                           ;lorawan_eu.c: 766: }
 14422                           ;lorawan_eu.c: 768: if ( (loRa.macCommands[loRa.crtMacCmdIndex].dataRateReceiveWindowAck
      +                           == 1) && (loRa.macCommands[loRa.crtMacCmdIndex].channelAck == 1) && (loRa.macCommands[l
      +                          oRa.crtMacCmdIndex].rx1DROffestAck == 1))
 14423  0030CA  0102               	movlb	2	; () banked
 14424  0030CC  51A7               	movf	(_loRa+167)& (0+255),w,b
 14425  0030CE  ECCB  F015         	call	PL2	;call to abstracted procedure
 14426  0030D2  A8DF               	btfss	indf2,4,c
 14427  0030D4  D01F               	goto	l13672
 14428                           
 14429                           ; BSR set to: 2
 14430  0030D6  51A7               	movf	(_loRa+167)& (0+255),w,b
 14431  0030D8  ECCB  F015         	call	PL2	;call to abstracted procedure
 14432  0030DC  A6DF               	btfss	indf2,3,c
 14433  0030DE  D01A               	goto	l13672
 14434                           
 14435                           ; BSR set to: 2
 14436  0030E0  51A7               	movf	(_loRa+167)& (0+255),w,b
 14437  0030E2  ECCB  F015         	call	PL2	;call to abstracted procedure
 14438  0030E6  AADF               	btfss	indf2,5,c
 14439  0030E8  D015               	goto	l13672
 14440                           
 14441                           ; BSR set to: 2
 14442                           ;lorawan_eu.c: 769: {
 14443                           ;lorawan_eu.c: 770: loRa.offset = dlSettings.bits.rx1DROffset;
 14444  0030EA  0100               	movlb	0	; () banked
 14445  0030EC  39A2               	swapf	ExecuteRxParamSetupReq@dlSettings& (0+255),w,b
 14446  0030EE  0B07               	andlw	7
 14447  0030F0  0102               	movlb	2	; () banked
 14448  0030F2  6FEF               	movwf	(_loRa+239)& (0+255),b
 14449                           
 14450                           ; BSR set to: 2
 14451                           ;lorawan_eu.c: 771: UpdateReceiveWindow2Parameters (frequency, dlSettings.bits.rx2DataRa
      +                          te);
 14452  0030F4  C09E  F060         	movff	ExecuteRxParamSetupReq@frequency,UpdateReceiveWindow2Parameters@frequency
 14453  0030F8  C09F  F061         	movff	ExecuteRxParamSetupReq@frequency+1,UpdateReceiveWindow2Parameters@frequency+1
 14454  0030FC  C0A0  F062         	movff	ExecuteRxParamSetupReq@frequency+2,UpdateReceiveWindow2Parameters@frequency+2
 14455  003100  C0A1  F063         	movff	ExecuteRxParamSetupReq@frequency+3,UpdateReceiveWindow2Parameters@frequency+3
 14456  003104  0100               	movlb	0	; () banked
 14457  003106  51A2               	movf	ExecuteRxParamSetupReq@dlSettings& (0+255),w,b
 14458  003108  0B0F               	andlw	15
 14459  00310A  6F64               	movwf	UpdateReceiveWindow2Parameters@dataRate& (0+255),b
 14460  00310C  EC0B  F030         	call	_UpdateReceiveWindow2Parameters	;wreg free
 14461                           
 14462                           ; BSR set to: 0
 14463                           ;lorawan_eu.c: 772: loRa.macStatus.secondReceiveWindowModified = 1;
 14464  003110  0102               	movlb	2	; () banked
 14465  003112  8F03               	bsf	(_loRa+3)& (0+255),7,b
 14466  003114                     l13672:
 14467                           
 14468                           ; BSR set to: 2
 14469                           ;lorawan_eu.c: 773: }
 14470                           ;lorawan_eu.c: 775: return ptr;
 14471  003114  C09C  F09C         	movff	ExecuteRxParamSetupReq@ptr,?_ExecuteRxParamSetupReq
 14472  003118  C09D  F09D         	movff	ExecuteRxParamSetupReq@ptr+1,?_ExecuteRxParamSetupReq+1
 14473                           
 14474                           ; BSR set to: 2
 14475  00311C  0012               	return		;funcret
 14476  00311E                     __end_of_ExecuteRxParamSetupReq:
 14477                           	opt stack 0
 14478  00311E                     PL388:
 14479                           	opt stack 17
 14480  00311E  C09C  FFD9         	movff	ExecuteRxParamSetupReq@ptr,fsr2l
 14481  003122  C09D  FFDA         	movff	ExecuteRxParamSetupReq@ptr+1,fsr2h
 14482  003126  0012               	return	
 14483  003128                     __end_ofPL388:
 14484                           	opt stack 0
 14485                           tosu	equ	0xFFF
 14486                           tosh	equ	0xFFE
 14487                           tosl	equ	0xFFD
 14488                           pclath	equ	0xFFA
 14489                           tblptru	equ	0xFF8
 14490                           tblptrh	equ	0xFF7
 14491                           tblptrl	equ	0xFF6
 14492                           tablat	equ	0xFF5
 14493                           prodh	equ	0xFF4
 14494                           prodl	equ	0xFF3
 14495                           intcon	equ	0xFF2
 14496                           indf0	equ	0xFEF
 14497                           postinc0	equ	0xFEE
 14498                           plusw0	equ	0xFEB
 14499                           fsr0h	equ	0xFEA
 14500                           fsr0l	equ	0xFE9
 14501                           wreg	equ	0xFE8
 14502                           postinc1	equ	0xFE6
 14503                           postdec1	equ	0xFE5
 14504                           plusw1	equ	0xFE3
 14505                           fsr1h	equ	0xFE2
 14506                           fsr1l	equ	0xFE1
 14507                           indf2	equ	0xFDF
 14508                           postinc2	equ	0xFDE
 14509                           postdec2	equ	0xFDD
 14510                           plusw2	equ	0xFDB
 14511                           fsr2h	equ	0xFDA
 14512                           fsr2l	equ	0xFD9
 14513                           status	equ	0xFD8
 14514                           
 14515 ;; *************** function _ValidateRxOffset *****************
 14516 ;; Defined at:
 14517 ;;		line 1076 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 14518 ;; Parameters:    Size  Location     Type
 14519 ;;  rxOffset        1    wreg     unsigned char 
 14520 ;; Auto vars:     Size  Location     Type
 14521 ;;  rxOffset        1    0[BANK0 ] unsigned char 
 14522 ;;  result          1    1[BANK0 ] enum E17413
 14523 ;; Return value:  Size  Location     Type
 14524 ;;                  1    wreg      enum E17413
 14525 ;; Registers used:
 14526 ;;		wreg, status,2, status,0
 14527 ;; Tracked objects:
 14528 ;;		On entry : 3F/0
 14529 ;;		On exit  : 3F/0
 14530 ;;		Unchanged: 0/0
 14531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14532 ;;      Params:         0       0       0       0       0       0       0       0       0
 14533 ;;      Locals:         0       2       0       0       0       0       0       0       0
 14534 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14535 ;;      Totals:         0       2       0       0       0       0       0       0       0
 14536 ;;Total ram usage:        2 bytes
 14537 ;; Hardware stack levels used:    1
 14538 ;; Hardware stack levels required when called:    7
 14539 ;; This function calls:
 14540 ;;		Nothing
 14541 ;; This function is called by:
 14542 ;;		_ExecuteRxParamSetupReq
 14543 ;; This function uses a non-reentrant model
 14544 ;;
 14545                           
 14546                           	psect	text69
 14547  006058                     __ptext69:
 14548                           	opt stack 0
 14549  006058                     _ValidateRxOffset:
 14550                           	opt stack 17
 14551                           
 14552                           ; BSR set to: 2
 14553                           ;incstack = 0
 14554                           ;ValidateRxOffset@rxOffset stored from wreg
 14555  006058  6F60               	movwf	ValidateRxOffset@rxOffset& (0+255),b
 14556                           
 14557                           ;lorawan_eu.c: 1078: LorawanError_t result = OK;
 14558  00605A  0100               	movlb	0	; () banked
 14559  00605C  6B61               	clrf	ValidateRxOffset@result& (0+255),b
 14560                           
 14561                           ; BSR set to: 0
 14562                           ;lorawan_eu.c: 1080: if (rxOffset > 5)
 14563  00605E  0E05               	movlw	5
 14564  006060  6560               	cpfsgt	ValidateRxOffset@rxOffset& (0+255),b
 14565  006062  D002               	goto	l1862
 14566                           
 14567                           ; BSR set to: 0
 14568                           ;lorawan_eu.c: 1081: {
 14569                           ;lorawan_eu.c: 1082: result = INVALID_PARAMETER;
 14570  006064  0E03               	movlw	3
 14571  006066  6F61               	movwf	ValidateRxOffset@result& (0+255),b
 14572  006068                     l1862:
 14573                           
 14574                           ; BSR set to: 0
 14575                           ;lorawan_eu.c: 1083: }
 14576                           ;lorawan_eu.c: 1085: return result;
 14577  006068  5161               	movf	ValidateRxOffset@result& (0+255),w,b
 14578                           
 14579                           ; BSR set to: 0
 14580  00606A  0012               	return		;funcret
 14581  00606C                     __end_of_ValidateRxOffset:
 14582                           	opt stack 0
 14583                           tosu	equ	0xFFF
 14584                           tosh	equ	0xFFE
 14585                           tosl	equ	0xFFD
 14586                           pclath	equ	0xFFA
 14587                           tblptru	equ	0xFF8
 14588                           tblptrh	equ	0xFF7
 14589                           tblptrl	equ	0xFF6
 14590                           tablat	equ	0xFF5
 14591                           prodh	equ	0xFF4
 14592                           prodl	equ	0xFF3
 14593                           intcon	equ	0xFF2
 14594                           indf0	equ	0xFEF
 14595                           postinc0	equ	0xFEE
 14596                           plusw0	equ	0xFEB
 14597                           fsr0h	equ	0xFEA
 14598                           fsr0l	equ	0xFE9
 14599                           wreg	equ	0xFE8
 14600                           postinc1	equ	0xFE6
 14601                           postdec1	equ	0xFE5
 14602                           plusw1	equ	0xFE3
 14603                           fsr1h	equ	0xFE2
 14604                           fsr1l	equ	0xFE1
 14605                           indf2	equ	0xFDF
 14606                           postinc2	equ	0xFDE
 14607                           postdec2	equ	0xFDD
 14608                           plusw2	equ	0xFDB
 14609                           fsr2h	equ	0xFDA
 14610                           fsr2l	equ	0xFD9
 14611                           status	equ	0xFD8
 14612                           
 14613 ;; *************** function _UpdateReceiveWindow2Parameters *****************
 14614 ;; Defined at:
 14615 ;;		line 1084 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 14616 ;; Parameters:    Size  Location     Type
 14617 ;;  frequency       4    0[BANK0 ] unsigned long 
 14618 ;;  dataRate        1    4[BANK0 ] unsigned char 
 14619 ;; Auto vars:     Size  Location     Type
 14620 ;;		None
 14621 ;; Return value:  Size  Location     Type
 14622 ;;                  1    wreg      void 
 14623 ;; Registers used:
 14624 ;;		None
 14625 ;; Tracked objects:
 14626 ;;		On entry : 3F/0
 14627 ;;		On exit  : 3F/0
 14628 ;;		Unchanged: 3F/0
 14629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14630 ;;      Params:         0       5       0       0       0       0       0       0       0
 14631 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14632 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14633 ;;      Totals:         0       5       0       0       0       0       0       0       0
 14634 ;;Total ram usage:        5 bytes
 14635 ;; Hardware stack levels used:    1
 14636 ;; Hardware stack levels required when called:    7
 14637 ;; This function calls:
 14638 ;;		Nothing
 14639 ;; This function is called by:
 14640 ;;		_ExecuteRxParamSetupReq
 14641 ;; This function uses a non-reentrant model
 14642 ;;
 14643                           
 14644                           	psect	text70
 14645  006016                     __ptext70:
 14646                           	opt stack 0
 14647  006016                     _UpdateReceiveWindow2Parameters:
 14648                           	opt stack 17
 14649                           
 14650                           ; BSR set to: 0
 14651                           ;lorawan.c: 1086: loRa.receiveWindow2Parameters.dataRate = dataRate;
 14652                           
 14653                           ; BSR set to: 0
 14654                           ;incstack = 0
 14655  006016  C064  F21C         	movff	UpdateReceiveWindow2Parameters@dataRate,_loRa+28
 14656                           
 14657                           ;lorawan.c: 1087: loRa.receiveWindow2Parameters.frequency = frequency;
 14658  00601A  C060  F218         	movff	UpdateReceiveWindow2Parameters@frequency,_loRa+24
 14659  00601E  C061  F219         	movff	UpdateReceiveWindow2Parameters@frequency+1,_loRa+25
 14660  006022  C062  F21A         	movff	UpdateReceiveWindow2Parameters@frequency+2,_loRa+26
 14661  006026  C063  F21B         	movff	UpdateReceiveWindow2Parameters@frequency+3,_loRa+27
 14662                           
 14663                           ; BSR set to: 0
 14664  00602A  0012               	return		;funcret
 14665  00602C                     __end_of_UpdateReceiveWindow2Parameters:
 14666                           	opt stack 0
 14667                           tosu	equ	0xFFF
 14668                           tosh	equ	0xFFE
 14669                           tosl	equ	0xFFD
 14670                           pclath	equ	0xFFA
 14671                           tblptru	equ	0xFF8
 14672                           tblptrh	equ	0xFF7
 14673                           tblptrl	equ	0xFF6
 14674                           tablat	equ	0xFF5
 14675                           prodh	equ	0xFF4
 14676                           prodl	equ	0xFF3
 14677                           intcon	equ	0xFF2
 14678                           indf0	equ	0xFEF
 14679                           postinc0	equ	0xFEE
 14680                           plusw0	equ	0xFEB
 14681                           fsr0h	equ	0xFEA
 14682                           fsr0l	equ	0xFE9
 14683                           wreg	equ	0xFE8
 14684                           postinc1	equ	0xFE6
 14685                           postdec1	equ	0xFE5
 14686                           plusw1	equ	0xFE3
 14687                           fsr1h	equ	0xFE2
 14688                           fsr1l	equ	0xFE1
 14689                           indf2	equ	0xFDF
 14690                           postinc2	equ	0xFDE
 14691                           postdec2	equ	0xFDD
 14692                           plusw2	equ	0xFDB
 14693                           fsr2h	equ	0xFDA
 14694                           fsr2l	equ	0xFD9
 14695                           status	equ	0xFD8
 14696                           
 14697 ;; *************** function _ExecuteNewChannel *****************
 14698 ;; Defined at:
 14699 ;;		line 677 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 14700 ;; Parameters:    Size  Location     Type
 14701 ;;  ptr             2   60[BANK0 ] PTR unsigned char 
 14702 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 14703 ;; Auto vars:     Size  Location     Type
 14704 ;;  frequency       4   63[BANK0 ] unsigned long 
 14705 ;;  channelIndex    1   67[BANK0 ] unsigned char 
 14706 ;;  drRange         1   62[BANK0 ] struct .
 14707 ;; Return value:  Size  Location     Type
 14708 ;;                  2   60[BANK0 ] PTR unsigned char 
 14709 ;; Registers used:
 14710 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14711 ;; Tracked objects:
 14712 ;;		On entry : 3F/0
 14713 ;;		On exit  : 3F/2
 14714 ;;		Unchanged: 0/0
 14715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14716 ;;      Params:         0       2       0       0       0       0       0       0       0
 14717 ;;      Locals:         0       6       0       0       0       0       0       0       0
 14718 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14719 ;;      Totals:         0       8       0       0       0       0       0       0       0
 14720 ;;Total ram usage:        8 bytes
 14721 ;; Hardware stack levels used:    1
 14722 ;; Hardware stack levels required when called:    9
 14723 ;; This function calls:
 14724 ;;		_LORAWAN_SetChannelIdStatus
 14725 ;;		_UpdateChannelIdStatus
 14726 ;;		_UpdateDataRange
 14727 ;;		_UpdateDutyCycle
 14728 ;;		_UpdateFrequency
 14729 ;;		_ValidateChannelId
 14730 ;;		_ValidateDataRange
 14731 ;;		_ValidateFrequency
 14732 ;;		___lmul
 14733 ;; This function is called by:
 14734 ;;		_MacExecuteCommands
 14735 ;; This function uses a non-reentrant model
 14736 ;;
 14737                           
 14738                           	psect	text71
 14739  002646                     __ptext71:
 14740                           	opt stack 0
 14741  002646                     _ExecuteNewChannel:
 14742                           	opt stack 0
 14743                           
 14744                           ; BSR set to: 0
 14745                           ;lorawan_eu.c: 683: channelIndex = *(ptr++);
 14746                           
 14747                           ; BSR set to: 0
 14748                           
 14749                           ; BSR set to: 0
 14750                           ;incstack = 0
 14751  002646  D8AF               	call	PL318	;call to abstracted procedure
 14752  002648  50DF               	movf	indf2,w,c
 14753  00264A  6FA3               	movwf	ExecuteNewChannel@channelIndex& (0+255),b
 14754                           
 14755                           ; BSR set to: 0
 14756  00264C  4B9C               	infsnz	ExecuteNewChannel@ptr& (0+255),f,b
 14757  00264E  2B9D               	incf	(ExecuteNewChannel@ptr+1)& (0+255),f,b
 14758                           
 14759                           ; BSR set to: 0
 14760                           ;lorawan_eu.c: 685: frequency = (*((uint32_t*)ptr)) & 0x00FFFFFF;
 14761  002650  D8AA               	call	PL318	;call to abstracted procedure
 14762  002652  0EFF               	movlw	255
 14763  002654  14DE               	andwf	postinc2,w,c
 14764  002656  6F9F               	movwf	ExecuteNewChannel@frequency& (0+255),b
 14765  002658  0EFF               	movlw	255
 14766  00265A  14DE               	andwf	postinc2,w,c
 14767  00265C  6FA0               	movwf	(ExecuteNewChannel@frequency+1)& (0+255),b
 14768  00265E  0EFF               	movlw	255
 14769  002660  14DE               	andwf	postinc2,w,c
 14770  002662  6FA1               	movwf	(ExecuteNewChannel@frequency+2)& (0+255),b
 14771  002664  0E00               	movlw	0
 14772  002666  14DE               	andwf	postinc2,w,c
 14773  002668  6FA2               	movwf	(ExecuteNewChannel@frequency+3)& (0+255),b
 14774                           
 14775                           ; BSR set to: 0
 14776                           ;lorawan_eu.c: 686: frequency = frequency * 100;
 14777  00266A  C09F  F090         	movff	ExecuteNewChannel@frequency,___lmul@multiplier
 14778  00266E  C0A0  F091         	movff	ExecuteNewChannel@frequency+1,___lmul@multiplier+1
 14779  002672  C0A1  F092         	movff	ExecuteNewChannel@frequency+2,___lmul@multiplier+2
 14780  002676  C0A2  F093         	movff	ExecuteNewChannel@frequency+3,___lmul@multiplier+3
 14781  00267A  0E64               	movlw	100
 14782  00267C  EC98  F006         	call	PL80	;call to abstracted procedure
 14783  002680  EC25  F02A         	call	___lmul	;wreg free
 14784  002684  C090  F09F         	movff	?___lmul,ExecuteNewChannel@frequency
 14785  002688  C091  F0A0         	movff	?___lmul+1,ExecuteNewChannel@frequency+1
 14786  00268C  C092  F0A1         	movff	?___lmul+2,ExecuteNewChannel@frequency+2
 14787  002690  C093  F0A2         	movff	?___lmul+3,ExecuteNewChannel@frequency+3
 14788                           
 14789                           ; BSR set to: 0
 14790                           ;lorawan_eu.c: 687: ptr = ptr + 3;
 14791  002694  0E03               	movlw	3
 14792  002696  279C               	addwf	ExecuteNewChannel@ptr& (0+255),f,b
 14793  002698  0E00               	movlw	0
 14794  00269A  239D               	addwfc	(ExecuteNewChannel@ptr+1)& (0+255),f,b
 14795                           
 14796                           ; BSR set to: 0
 14797                           ;lorawan_eu.c: 689: drRange.value = *(ptr++);
 14798  00269C  D884               	call	PL318	;call to abstracted procedure
 14799  00269E  50DF               	movf	indf2,w,c
 14800  0026A0  6F9E               	movwf	ExecuteNewChannel@drRange& (0+255),b
 14801                           
 14802                           ; BSR set to: 0
 14803  0026A2  4B9C               	infsnz	ExecuteNewChannel@ptr& (0+255),f,b
 14804  0026A4  2B9D               	incf	(ExecuteNewChannel@ptr+1)& (0+255),f,b
 14805                           
 14806                           ; BSR set to: 0
 14807                           ;lorawan_eu.c: 691: if (ValidateChannelId (channelIndex, 0) == OK)
 14808  0026A6  6B60               	clrf	ValidateChannelId@allowedForDefaultChannels& (0+255),b
 14809  0026A8  51A3               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14810  0026AA  EC1F  F02F         	call	_ValidateChannelId
 14811  0026AE  0900               	iorlw	0
 14812  0026B0  E11E               	bnz	l1749
 14813                           
 14814                           ; BSR set to: 0
 14815                           ;lorawan_eu.c: 692: {
 14816                           ;lorawan_eu.c: 693: if ( (ValidateFrequency (frequency) == OK) || (frequency == 0) )
 14817  0026B2  C09F  F060         	movff	ExecuteNewChannel@frequency,ValidateFrequency@frequencyNew
 14818  0026B6  C0A0  F061         	movff	ExecuteNewChannel@frequency+1,ValidateFrequency@frequencyNew+1
 14819  0026BA  C0A1  F062         	movff	ExecuteNewChannel@frequency+2,ValidateFrequency@frequencyNew+2
 14820  0026BE  C0A2  F063         	movff	ExecuteNewChannel@frequency+3,ValidateFrequency@frequencyNew+3
 14821  0026C2  ECB5  F027         	call	_ValidateFrequency	;wreg free
 14822  0026C6  0900               	iorlw	0
 14823  0026C8  E002               	bz	l13702
 14824                           
 14825                           ; BSR set to: 0
 14826  0026CA  D872               	call	PL324	;call to abstracted procedure
 14827  0026CC  E105               	bnz	l13704
 14828  0026CE                     l13702:
 14829                           
 14830                           ; BSR set to: 0
 14831                           ;lorawan_eu.c: 694: {
 14832                           ;lorawan_eu.c: 695: loRa.macCommands[loRa.crtMacCmdIndex].channelFrequencyAck = 1;
 14833  0026CE  0102               	movlb	2	; () banked
 14834  0026D0  51A7               	movf	(_loRa+167)& (0+255),w,b
 14835  0026D2  ECCB  F015         	call	PL2	;call to abstracted procedure
 14836  0026D6  8EDF               	bsf	indf2,7,c
 14837  0026D8                     l13704:
 14838                           
 14839                           ;lorawan_eu.c: 696: }
 14840                           ;lorawan_eu.c: 698: if (ValidateDataRange (drRange.value) == OK)
 14841  0026D8  0100               	movlb	0	; () banked
 14842  0026DA  519E               	movf	ExecuteNewChannel@drRange& (0+255),w,b
 14843  0026DC  EC7E  F02C         	call	_ValidateDataRange
 14844  0026E0  0900               	iorlw	0
 14845  0026E2  E105               	bnz	l1749
 14846                           
 14847                           ; BSR set to: 0
 14848                           ;lorawan_eu.c: 699: {
 14849                           ;lorawan_eu.c: 700: loRa.macCommands[loRa.crtMacCmdIndex].dataRateRangeAck = 1;
 14850  0026E4  0102               	movlb	2	; () banked
 14851  0026E6  51A7               	movf	(_loRa+167)& (0+255),w,b
 14852  0026E8  ECCB  F015         	call	PL2	;call to abstracted procedure
 14853  0026EC  8CDF               	bsf	indf2,6,c
 14854  0026EE                     l1749:
 14855                           
 14856                           ;lorawan_eu.c: 701: }
 14857                           ;lorawan_eu.c: 702: }
 14858                           ;lorawan_eu.c: 704: if ( (loRa.macCommands[loRa.crtMacCmdIndex].channelFrequencyAck == 1
      +                          ) && (loRa.macCommands[loRa.crtMacCmdIndex].dataRateRangeAck == 1) )
 14859  0026EE  0102               	movlb	2	; () banked
 14860  0026F0  51A7               	movf	(_loRa+167)& (0+255),w,b
 14861  0026F2  ECCB  F015         	call	PL2	;call to abstracted procedure
 14862  0026F6  AEDF               	btfss	indf2,7,c
 14863  0026F8  D040               	goto	l13726
 14864                           
 14865                           ; BSR set to: 2
 14866  0026FA  51A7               	movf	(_loRa+167)& (0+255),w,b
 14867  0026FC  ECCB  F015         	call	PL2	;call to abstracted procedure
 14868  002700  ACDF               	btfss	indf2,6,c
 14869  002702  D03B               	goto	l13726
 14870                           
 14871                           ; BSR set to: 2
 14872                           ;lorawan_eu.c: 705: {
 14873                           ;lorawan_eu.c: 706: if (loRa.lastUsedChannelIndex < 16)
 14874  002704  0E10               	movlw	16
 14875  002706  61DA               	cpfslt	(_loRa+218)& (0+255),b
 14876  002708  D019               	goto	l13718
 14877                           
 14878                           ; BSR set to: 2
 14879                           ;lorawan_eu.c: 707: {
 14880                           ;lorawan_eu.c: 708: if (frequency != 0)
 14881  00270A  0100               	movlb	0	; () banked
 14882  00270C  D851               	call	PL324	;call to abstracted procedure
 14883  00270E  E011               	bz	l13716
 14884                           
 14885                           ; BSR set to: 0
 14886                           ;lorawan_eu.c: 709: {
 14887                           ;lorawan_eu.c: 710: UpdateFrequency (channelIndex, frequency);
 14888  002710  D839               	call	PL204	;call to abstracted procedure
 14889  002712  EC2B  F02E         	call	_UpdateFrequency
 14890                           
 14891                           ;lorawan_eu.c: 711: UpdateDataRange (channelIndex, drRange.value);
 14892  002716  C09E  F060         	movff	ExecuteNewChannel@drRange,UpdateDataRange@dataRangeNew
 14893  00271A  51A3               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14894  00271C  EC3B  F021         	call	_UpdateDataRange
 14895                           
 14896                           ;lorawan_eu.c: 712: UpdateDutyCycle (channelIndex, 302);
 14897  002720  D83B               	call	PL282	;call to abstracted procedure
 14898  002722  EC6C  F02D         	call	_UpdateDutyCycle
 14899                           
 14900                           ;lorawan_eu.c: 713: UpdateChannelIdStatus (channelIndex, 1);
 14901  002726  0E01               	movlw	1
 14902  002728  6F60               	movwf	UpdateChannelIdStatus@statusNew& (0+255),b
 14903  00272A  51A3               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14904  00272C  EC57  F01D         	call	_UpdateChannelIdStatus
 14905                           
 14906                           ;lorawan_eu.c: 714: }
 14907  002730  D022               	goto	l13724
 14908  002732                     l13716:
 14909                           
 14910                           ; BSR set to: 0
 14911                           ;lorawan_eu.c: 715: else
 14912                           ;lorawan_eu.c: 716: {
 14913                           ;lorawan_eu.c: 717: LORAWAN_SetChannelIdStatus (channelIndex, 0);
 14914  002732  6B64               	clrf	LORAWAN_SetChannelIdStatus@statusNew& (0+255),b
 14915  002734  51A3               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14916  002736  EC11  F02D         	call	_LORAWAN_SetChannelIdStatus
 14917  00273A  D01D               	goto	l13724
 14918  00273C                     l13718:
 14919                           
 14920                           ; BSR set to: 2
 14921                           ;lorawan_eu.c: 720: else
 14922                           ;lorawan_eu.c: 721: {
 14923                           ;lorawan_eu.c: 722: if (frequency != 0)
 14924  00273C  0100               	movlb	0	; () banked
 14925  00273E  D838               	call	PL324	;call to abstracted procedure
 14926  002740  E015               	bz	l13722
 14927                           
 14928                           ; BSR set to: 0
 14929                           ;lorawan_eu.c: 723: {
 14930                           ;lorawan_eu.c: 724: UpdateFrequency (channelIndex + 16, frequency);
 14931  002742  D820               	call	PL204	;call to abstracted procedure
 14932  002744  0F10               	addlw	16
 14933  002746  EC2B  F02E         	call	_UpdateFrequency
 14934                           
 14935                           ;lorawan_eu.c: 725: UpdateDataRange (channelIndex + 16, drRange.value);
 14936  00274A  C09E  F060         	movff	ExecuteNewChannel@drRange,UpdateDataRange@dataRangeNew
 14937  00274E  51A3               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14938  002750  0F10               	addlw	16
 14939  002752  EC3B  F021         	call	_UpdateDataRange
 14940                           
 14941                           ;lorawan_eu.c: 726: UpdateDutyCycle (channelIndex + 16, 302);
 14942  002756  D820               	call	PL282	;call to abstracted procedure
 14943  002758  0F10               	addlw	16
 14944  00275A  EC6C  F02D         	call	_UpdateDutyCycle
 14945                           
 14946                           ;lorawan_eu.c: 727: UpdateChannelIdStatus (channelIndex + 16, 1);
 14947  00275E  0E01               	movlw	1
 14948  002760  6F60               	movwf	UpdateChannelIdStatus@statusNew& (0+255),b
 14949  002762  51A3               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14950  002764  0F10               	addlw	16
 14951  002766  EC57  F01D         	call	_UpdateChannelIdStatus
 14952                           
 14953                           ;lorawan_eu.c: 728: }
 14954  00276A  D005               	goto	l13724
 14955  00276C                     l13722:
 14956                           
 14957                           ; BSR set to: 0
 14958                           ;lorawan_eu.c: 729: else
 14959                           ;lorawan_eu.c: 730: {
 14960                           ;lorawan_eu.c: 731: LORAWAN_SetChannelIdStatus (channelIndex + 16, 0);
 14961  00276C  6B64               	clrf	LORAWAN_SetChannelIdStatus@statusNew& (0+255),b
 14962  00276E  51A3               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14963  002770  0F10               	addlw	16
 14964  002772  EC11  F02D         	call	_LORAWAN_SetChannelIdStatus
 14965  002776                     l13724:
 14966                           
 14967                           ;lorawan_eu.c: 732: }
 14968                           ;lorawan_eu.c: 733: }
 14969                           ;lorawan_eu.c: 735: loRa.macStatus.channelsModified = 1;
 14970  002776  0102               	movlb	2	; () banked
 14971  002778  8703               	bsf	(_loRa+3)& (0+255),3,b
 14972  00277A                     l13726:
 14973                           
 14974                           ; BSR set to: 2
 14975                           ;lorawan_eu.c: 736: }
 14976                           ;lorawan_eu.c: 737: return ptr;
 14977  00277A  C09C  F09C         	movff	ExecuteNewChannel@ptr,?_ExecuteNewChannel
 14978  00277E  C09D  F09D         	movff	ExecuteNewChannel@ptr+1,?_ExecuteNewChannel+1
 14979                           
 14980                           ; BSR set to: 2
 14981  002782  0012               	return		;funcret
 14982  002784                     __end_of_ExecuteNewChannel:
 14983                           	opt stack 0
 14984  002784                     PL204:
 14985                           	opt stack 16
 14986  002784  C09F  F060         	movff	ExecuteNewChannel@frequency,UpdateFrequency@frequencyNew
 14987  002788  C0A0  F061         	movff	ExecuteNewChannel@frequency+1,UpdateFrequency@frequencyNew+1
 14988  00278C  C0A1  F062         	movff	ExecuteNewChannel@frequency+2,UpdateFrequency@frequencyNew+2
 14989  002790  C0A2  F063         	movff	ExecuteNewChannel@frequency+3,UpdateFrequency@frequencyNew+3
 14990  002794  51A3               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14991  002796  0012               	return	
 14992  002798                     __end_ofPL204:
 14993                           	opt stack 0
 14994  002798                     PL282:
 14995                           	opt stack 16
 14996  002798  0E01               	movlw	1
 14997  00279A  0100               	movlb	0	; () banked
 14998  00279C  6F61               	movwf	(UpdateDutyCycle@dutyCycleNew+1)& (0+255),b
 14999  00279E  0E2E               	movlw	46
 15000  0027A0  6F60               	movwf	UpdateDutyCycle@dutyCycleNew& (0+255),b
 15001  0027A2  51A3               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 15002  0027A4  0012               	return	
 15003  0027A6                     __end_ofPL282:
 15004                           	opt stack 0
 15005  0027A6                     PL318:
 15006                           	opt stack 16
 15007  0027A6  C09C  FFD9         	movff	ExecuteNewChannel@ptr,fsr2l
 15008  0027AA  C09D  FFDA         	movff	ExecuteNewChannel@ptr+1,fsr2h
 15009  0027AE  0012               	return	
 15010  0027B0                     __end_ofPL318:
 15011                           	opt stack 0
 15012  0027B0                     PL324:
 15013                           	opt stack 16
 15014  0027B0  519F               	movf	ExecuteNewChannel@frequency& (0+255),w,b
 15015  0027B2  11A0               	iorwf	(ExecuteNewChannel@frequency+1)& (0+255),w,b
 15016  0027B4  11A1               	iorwf	(ExecuteNewChannel@frequency+2)& (0+255),w,b
 15017  0027B6  11A2               	iorwf	(ExecuteNewChannel@frequency+3)& (0+255),w,b
 15018  0027B8  0012               	return	
 15019  0027BA                     __end_ofPL324:
 15020                           	opt stack 0
 15021                           tosu	equ	0xFFF
 15022                           tosh	equ	0xFFE
 15023                           tosl	equ	0xFFD
 15024                           pclath	equ	0xFFA
 15025                           tblptru	equ	0xFF8
 15026                           tblptrh	equ	0xFF7
 15027                           tblptrl	equ	0xFF6
 15028                           tablat	equ	0xFF5
 15029                           prodh	equ	0xFF4
 15030                           prodl	equ	0xFF3
 15031                           intcon	equ	0xFF2
 15032                           indf0	equ	0xFEF
 15033                           postinc0	equ	0xFEE
 15034                           plusw0	equ	0xFEB
 15035                           fsr0h	equ	0xFEA
 15036                           fsr0l	equ	0xFE9
 15037                           wreg	equ	0xFE8
 15038                           postinc1	equ	0xFE6
 15039                           postdec1	equ	0xFE5
 15040                           plusw1	equ	0xFE3
 15041                           fsr1h	equ	0xFE2
 15042                           fsr1l	equ	0xFE1
 15043                           indf2	equ	0xFDF
 15044                           postinc2	equ	0xFDE
 15045                           postdec2	equ	0xFDD
 15046                           plusw2	equ	0xFDB
 15047                           fsr2h	equ	0xFDA
 15048                           fsr2l	equ	0xFD9
 15049                           status	equ	0xFD8
 15050                           
 15051 ;; *************** function _ValidateFrequency *****************
 15052 ;; Defined at:
 15053 ;;		line 1088 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 15054 ;; Parameters:    Size  Location     Type
 15055 ;;  frequencyNew    4    0[BANK0 ] unsigned long 
 15056 ;; Auto vars:     Size  Location     Type
 15057 ;;  result          1    4[BANK0 ] enum E17413
 15058 ;; Return value:  Size  Location     Type
 15059 ;;                  1    wreg      enum E17413
 15060 ;; Registers used:
 15061 ;;		wreg, status,2, status,0
 15062 ;; Tracked objects:
 15063 ;;		On entry : 3F/0
 15064 ;;		On exit  : 3F/0
 15065 ;;		Unchanged: 0/0
 15066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15067 ;;      Params:         0       4       0       0       0       0       0       0       0
 15068 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15069 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15070 ;;      Totals:         0       5       0       0       0       0       0       0       0
 15071 ;;Total ram usage:        5 bytes
 15072 ;; Hardware stack levels used:    1
 15073 ;; Hardware stack levels required when called:    7
 15074 ;; This function calls:
 15075 ;;		Nothing
 15076 ;; This function is called by:
 15077 ;;		_ExecuteNewChannel
 15078 ;;		_ExecuteRxParamSetupReq
 15079 ;;		_UpdateCfList
 15080 ;; This function uses a non-reentrant model
 15081 ;;
 15082                           
 15083                           	psect	text72
 15084  004F6A                     __ptext72:
 15085                           	opt stack 0
 15086  004F6A                     _ValidateFrequency:
 15087                           	opt stack 18
 15088                           
 15089                           ; BSR set to: 0
 15090                           ;lorawan_eu.c: 1090: LorawanError_t result = OK;
 15091                           
 15092                           ; BSR set to: 2
 15093                           ;incstack = 0
 15094  004F6A  6B64               	clrf	ValidateFrequency@result& (0+255),b
 15095                           
 15096                           ; BSR set to: 0
 15097                           ;lorawan_eu.c: 1092: if(ISM_EU868 == loRa.ismBand)
 15098  004F6C  0102               	movlb	2	; () banked
 15099  004F6E  51A4               	movf	(_loRa+164)& (0+255),w,b
 15100  004F70  E116               	bnz	l13164
 15101                           
 15102                           ; BSR set to: 2
 15103                           ;lorawan_eu.c: 1093: {
 15104                           ;lorawan_eu.c: 1094: if ( (frequencyNew > 870000000) || (frequencyNew < 863000000) )
 15105  004F72  0E81               	movlw	129
 15106  004F74  0100               	movlb	0	; () banked
 15107  004F76  5D60               	subwf	ValidateFrequency@frequencyNew& (0+255),w,b
 15108  004F78  0E25               	movlw	37
 15109  004F7A  5961               	subwfb	(ValidateFrequency@frequencyNew+1)& (0+255),w,b
 15110  004F7C  0EDB               	movlw	219
 15111  004F7E  5962               	subwfb	(ValidateFrequency@frequencyNew+2)& (0+255),w,b
 15112  004F80  0E33               	movlw	51
 15113  004F82  5963               	subwfb	(ValidateFrequency@frequencyNew+3)& (0+255),w,b
 15114  004F84  E209               	bc	l13162
 15115                           
 15116                           ; BSR set to: 0
 15117  004F86  0EC0               	movlw	192
 15118  004F88  5D60               	subwf	ValidateFrequency@frequencyNew& (0+255),w,b
 15119  004F8A  0E55               	movlw	85
 15120  004F8C  5961               	subwfb	(ValidateFrequency@frequencyNew+1)& (0+255),w,b
 15121  004F8E  0E70               	movlw	112
 15122  004F90  5962               	subwfb	(ValidateFrequency@frequencyNew+2)& (0+255),w,b
 15123  004F92  0E33               	movlw	51
 15124  004F94  5963               	subwfb	(ValidateFrequency@frequencyNew+3)& (0+255),w,b
 15125  004F96  E215               	bc	l1870
 15126  004F98                     l13162:
 15127                           
 15128                           ; BSR set to: 0
 15129                           ;lorawan_eu.c: 1095: {
 15130                           ;lorawan_eu.c: 1096: result = INVALID_PARAMETER ;
 15131  004F98  0E03               	movlw	3
 15132  004F9A  6F64               	movwf	ValidateFrequency@result& (0+255),b
 15133  004F9C  D012               	goto	l1870
 15134  004F9E                     l13164:
 15135                           
 15136                           ; BSR set to: 2
 15137                           ;lorawan_eu.c: 1099: else
 15138                           ;lorawan_eu.c: 1100: {
 15139                           ;lorawan_eu.c: 1101: if ( (frequencyNew > 434790000) || (frequencyNew < 433050000) )
 15140  004F9E  0E71               	movlw	113
 15141  004FA0  0100               	movlb	0	; () banked
 15142  004FA2  5D60               	subwf	ValidateFrequency@frequencyNew& (0+255),w,b
 15143  004FA4  0E5E               	movlw	94
 15144  004FA6  5961               	subwfb	(ValidateFrequency@frequencyNew+1)& (0+255),w,b
 15145  004FA8  0EEA               	movlw	234
 15146  004FAA  5962               	subwfb	(ValidateFrequency@frequencyNew+2)& (0+255),w,b
 15147  004FAC  0E19               	movlw	25
 15148  004FAE  5963               	subwfb	(ValidateFrequency@frequencyNew+3)& (0+255),w,b
 15149  004FB0  E2F3               	bc	l13162
 15150                           
 15151                           ; BSR set to: 0
 15152  004FB2  0E90               	movlw	144
 15153  004FB4  5D60               	subwf	ValidateFrequency@frequencyNew& (0+255),w,b
 15154  004FB6  0ED1               	movlw	209
 15155  004FB8  5961               	subwfb	(ValidateFrequency@frequencyNew+1)& (0+255),w,b
 15156  004FBA  0ECF               	movlw	207
 15157  004FBC  5962               	subwfb	(ValidateFrequency@frequencyNew+2)& (0+255),w,b
 15158  004FBE  0E19               	movlw	25
 15159  004FC0  D7E9               	goto	L9
 15160  004FC2                     l1870:
 15161                           
 15162                           ; BSR set to: 0
 15163                           ;lorawan_eu.c: 1104: }
 15164                           ;lorawan_eu.c: 1105: }
 15165                           ;lorawan_eu.c: 1107: return result;
 15166  004FC2  5164               	movf	ValidateFrequency@result& (0+255),w,b
 15167                           
 15168                           ; BSR set to: 0
 15169  004FC4  0012               	return		;funcret
 15170  004FC6                     __end_of_ValidateFrequency:
 15171                           	opt stack 0
 15172                           tosu	equ	0xFFF
 15173                           tosh	equ	0xFFE
 15174                           tosl	equ	0xFFD
 15175                           pclath	equ	0xFFA
 15176                           tblptru	equ	0xFF8
 15177                           tblptrh	equ	0xFF7
 15178                           tblptrl	equ	0xFF6
 15179                           tablat	equ	0xFF5
 15180                           prodh	equ	0xFF4
 15181                           prodl	equ	0xFF3
 15182                           intcon	equ	0xFF2
 15183                           indf0	equ	0xFEF
 15184                           postinc0	equ	0xFEE
 15185                           plusw0	equ	0xFEB
 15186                           fsr0h	equ	0xFEA
 15187                           fsr0l	equ	0xFE9
 15188                           wreg	equ	0xFE8
 15189                           postinc1	equ	0xFE6
 15190                           postdec1	equ	0xFE5
 15191                           plusw1	equ	0xFE3
 15192                           fsr1h	equ	0xFE2
 15193                           fsr1l	equ	0xFE1
 15194                           indf2	equ	0xFDF
 15195                           postinc2	equ	0xFDE
 15196                           postdec2	equ	0xFDD
 15197                           plusw2	equ	0xFDB
 15198                           fsr2h	equ	0xFDA
 15199                           fsr2l	equ	0xFD9
 15200                           status	equ	0xFD8
 15201                           
 15202 ;; *************** function _ValidateDataRange *****************
 15203 ;; Defined at:
 15204 ;;		line 1110 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 15205 ;; Parameters:    Size  Location     Type
 15206 ;;  dataRangeNew    1    wreg     unsigned char 
 15207 ;; Auto vars:     Size  Location     Type
 15208 ;;  dataRangeNew    1    3[BANK0 ] unsigned char 
 15209 ;;  dataRateMin     1    5[BANK0 ] unsigned char 
 15210 ;;  dataRateMax     1    4[BANK0 ] unsigned char 
 15211 ;;  result          1    2[BANK0 ] enum E17413
 15212 ;; Return value:  Size  Location     Type
 15213 ;;                  1    wreg      enum E17413
 15214 ;; Registers used:
 15215 ;;		wreg, status,2, status,0, cstack
 15216 ;; Tracked objects:
 15217 ;;		On entry : 3F/0
 15218 ;;		On exit  : 3F/0
 15219 ;;		Unchanged: 0/0
 15220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15221 ;;      Params:         0       0       0       0       0       0       0       0       0
 15222 ;;      Locals:         0       4       0       0       0       0       0       0       0
 15223 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15224 ;;      Totals:         0       4       0       0       0       0       0       0       0
 15225 ;;Total ram usage:        4 bytes
 15226 ;; Hardware stack levels used:    1
 15227 ;; Hardware stack levels required when called:    8
 15228 ;; This function calls:
 15229 ;;		_ValidateDataRate
 15230 ;; This function is called by:
 15231 ;;		_ExecuteNewChannel
 15232 ;; This function uses a non-reentrant model
 15233 ;;
 15234                           
 15235                           	psect	text73
 15236  0058FC                     __ptext73:
 15237                           	opt stack 0
 15238  0058FC                     _ValidateDataRange:
 15239                           	opt stack 16
 15240                           
 15241                           ; BSR set to: 0
 15242                           ;incstack = 0
 15243                           ;ValidateDataRange@dataRangeNew stored from wreg
 15244  0058FC  6F63               	movwf	ValidateDataRange@dataRangeNew& (0+255),b
 15245                           
 15246                           ;lorawan_eu.c: 1112: LorawanError_t result = OK;
 15247  0058FE  0100               	movlb	0	; () banked
 15248  005900  6B62               	clrf	ValidateDataRange@result& (0+255),b
 15249                           
 15250                           ; BSR set to: 0
 15251                           ;lorawan_eu.c: 1113: uint8_t dataRateMax, dataRateMin;
 15252                           ;lorawan_eu.c: 1115: dataRateMin = dataRangeNew & 0x0F;
 15253  005902  5163               	movf	ValidateDataRange@dataRangeNew& (0+255),w,b
 15254  005904  0B0F               	andlw	15
 15255  005906  6F65               	movwf	ValidateDataRange@dataRateMin& (0+255),b
 15256                           
 15257                           ;lorawan_eu.c: 1116: dataRateMax = (dataRangeNew & 0xF0) >> (4);
 15258  005908  3963               	swapf	ValidateDataRange@dataRangeNew& (0+255),w,b
 15259  00590A  0B0F               	andlw	15
 15260  00590C  6F64               	movwf	ValidateDataRange@dataRateMax& (0+255),b
 15261                           
 15262                           ; BSR set to: 0
 15263                           ;lorawan_eu.c: 1118: if ( (ValidateDataRate (dataRateMax) != OK) || (ValidateDataRate (d
      +                          ataRateMin) != OK ) || (dataRateMax < dataRateMin) )
 15264  00590E  5164               	movf	ValidateDataRange@dataRateMax& (0+255),w,b
 15265  005910  EC36  F030         	call	_ValidateDataRate
 15266  005914  0900               	iorlw	0
 15267  005916  E108               	bnz	l13182
 15268                           
 15269                           ; BSR set to: 0
 15270  005918  5165               	movf	ValidateDataRange@dataRateMin& (0+255),w,b
 15271  00591A  EC36  F030         	call	_ValidateDataRate
 15272  00591E  0900               	iorlw	0
 15273  005920  E103               	bnz	l13182
 15274                           
 15275                           ; BSR set to: 0
 15276  005922  5165               	movf	ValidateDataRange@dataRateMin& (0+255),w,b
 15277  005924  5D64               	subwf	ValidateDataRange@dataRateMax& (0+255),w,b
 15278  005926  E202               	bc	l1877
 15279  005928                     l13182:
 15280                           
 15281                           ; BSR set to: 0
 15282                           ;lorawan_eu.c: 1119: {
 15283                           ;lorawan_eu.c: 1120: result = INVALID_PARAMETER;
 15284  005928  0E03               	movlw	3
 15285  00592A  6F62               	movwf	ValidateDataRange@result& (0+255),b
 15286  00592C                     l1877:
 15287                           
 15288                           ; BSR set to: 0
 15289                           ;lorawan_eu.c: 1121: }
 15290                           ;lorawan_eu.c: 1122: return result;
 15291  00592C  5162               	movf	ValidateDataRange@result& (0+255),w,b
 15292                           
 15293                           ; BSR set to: 0
 15294  00592E  0012               	return		;funcret
 15295  005930                     __end_of_ValidateDataRange:
 15296                           	opt stack 0
 15297                           tosu	equ	0xFFF
 15298                           tosh	equ	0xFFE
 15299                           tosl	equ	0xFFD
 15300                           pclath	equ	0xFFA
 15301                           tblptru	equ	0xFF8
 15302                           tblptrh	equ	0xFF7
 15303                           tblptrl	equ	0xFF6
 15304                           tablat	equ	0xFF5
 15305                           prodh	equ	0xFF4
 15306                           prodl	equ	0xFF3
 15307                           intcon	equ	0xFF2
 15308                           indf0	equ	0xFEF
 15309                           postinc0	equ	0xFEE
 15310                           plusw0	equ	0xFEB
 15311                           fsr0h	equ	0xFEA
 15312                           fsr0l	equ	0xFE9
 15313                           wreg	equ	0xFE8
 15314                           postinc1	equ	0xFE6
 15315                           postdec1	equ	0xFE5
 15316                           plusw1	equ	0xFE3
 15317                           fsr1h	equ	0xFE2
 15318                           fsr1l	equ	0xFE1
 15319                           indf2	equ	0xFDF
 15320                           postinc2	equ	0xFDE
 15321                           postdec2	equ	0xFDD
 15322                           plusw2	equ	0xFDB
 15323                           fsr2h	equ	0xFDA
 15324                           fsr2l	equ	0xFD9
 15325                           status	equ	0xFD8
 15326                           
 15327 ;; *************** function _UpdateFrequency *****************
 15328 ;; Defined at:
 15329 ;;		line 1154 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 15330 ;; Parameters:    Size  Location     Type
 15331 ;;  channelId       1    wreg     unsigned char 
 15332 ;;  frequencyNew    4    0[BANK0 ] unsigned long 
 15333 ;; Auto vars:     Size  Location     Type
 15334 ;;  channelId       1    4[BANK0 ] unsigned char 
 15335 ;; Return value:  Size  Location     Type
 15336 ;;                  1    wreg      void 
 15337 ;; Registers used:
 15338 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15339 ;; Tracked objects:
 15340 ;;		On entry : 3F/0
 15341 ;;		On exit  : 3F/0
 15342 ;;		Unchanged: 0/0
 15343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15344 ;;      Params:         0       4       0       0       0       0       0       0       0
 15345 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15346 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15347 ;;      Totals:         0       5       0       0       0       0       0       0       0
 15348 ;;Total ram usage:        5 bytes
 15349 ;; Hardware stack levels used:    1
 15350 ;; Hardware stack levels required when called:    7
 15351 ;; This function calls:
 15352 ;;		Nothing
 15353 ;; This function is called by:
 15354 ;;		_ExecuteNewChannel
 15355 ;; This function uses a non-reentrant model
 15356 ;;
 15357                           
 15358                           	psect	text74
 15359  005C56                     __ptext74:
 15360                           	opt stack 0
 15361  005C56                     _UpdateFrequency:
 15362                           	opt stack 17
 15363                           
 15364                           ; BSR set to: 0
 15365                           ;incstack = 0
 15366                           ;UpdateFrequency@channelId stored from wreg
 15367  005C56  6F64               	movwf	UpdateFrequency@channelId& (0+255),b
 15368                           
 15369                           ;lorawan_eu.c: 1156: Channels[channelId].frequency = frequencyNew;
 15370  005C58  0100               	movlb	0	; () banked
 15371  005C5A  5164               	movf	UpdateFrequency@channelId& (0+255),w,b
 15372  005C5C  ECED  F026         	call	PL246	;call to abstracted procedure
 15373  005C60  C060  FFDE         	movff	UpdateFrequency@frequencyNew,postinc2
 15374  005C64  C061  FFDE         	movff	UpdateFrequency@frequencyNew+1,postinc2
 15375  005C68  C062  FFDE         	movff	UpdateFrequency@frequencyNew+2,postinc2
 15376  005C6C  C063  FFDE         	movff	UpdateFrequency@frequencyNew+3,postinc2
 15377                           
 15378                           ;lorawan_eu.c: 1157: Channels[channelId].parametersDefined |= 0X01;
 15379  005C70  5164               	movf	UpdateFrequency@channelId& (0+255),w,b
 15380  005C72  EC7A  F02D         	call	PL68	;call to abstracted procedure
 15381  005C76  0E00               	movlw	0
 15382  005C78  80DB               	bsf	plusw2,0,c
 15383                           
 15384                           ; BSR set to: 0
 15385  005C7A  0C00               	retlw	0	;funcret
 15386  005C7C                     __end_of_UpdateFrequency:
 15387                           	opt stack 0
 15388                           tosu	equ	0xFFF
 15389                           tosh	equ	0xFFE
 15390                           tosl	equ	0xFFD
 15391                           pclath	equ	0xFFA
 15392                           tblptru	equ	0xFF8
 15393                           tblptrh	equ	0xFF7
 15394                           tblptrl	equ	0xFF6
 15395                           tablat	equ	0xFF5
 15396                           prodh	equ	0xFF4
 15397                           prodl	equ	0xFF3
 15398                           intcon	equ	0xFF2
 15399                           indf0	equ	0xFEF
 15400                           postinc0	equ	0xFEE
 15401                           plusw0	equ	0xFEB
 15402                           fsr0h	equ	0xFEA
 15403                           fsr0l	equ	0xFE9
 15404                           wreg	equ	0xFE8
 15405                           postinc1	equ	0xFE6
 15406                           postdec1	equ	0xFE5
 15407                           plusw1	equ	0xFE3
 15408                           fsr1h	equ	0xFE2
 15409                           fsr1l	equ	0xFE1
 15410                           indf2	equ	0xFDF
 15411                           postinc2	equ	0xFDE
 15412                           postdec2	equ	0xFDD
 15413                           plusw2	equ	0xFDB
 15414                           fsr2h	equ	0xFDA
 15415                           fsr2l	equ	0xFD9
 15416                           status	equ	0xFD8
 15417                           
 15418 ;; *************** function _UpdateDutyCycle *****************
 15419 ;; Defined at:
 15420 ;;		line 1160 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 15421 ;; Parameters:    Size  Location     Type
 15422 ;;  channelId       1    wreg     unsigned char 
 15423 ;;  dutyCycleNew    2    0[BANK0 ] unsigned int 
 15424 ;; Auto vars:     Size  Location     Type
 15425 ;;  channelId       1    2[BANK0 ] unsigned char 
 15426 ;; Return value:  Size  Location     Type
 15427 ;;                  1    wreg      void 
 15428 ;; Registers used:
 15429 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15430 ;; Tracked objects:
 15431 ;;		On entry : 3F/0
 15432 ;;		On exit  : 3F/0
 15433 ;;		Unchanged: 0/0
 15434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15435 ;;      Params:         0       2       0       0       0       0       0       0       0
 15436 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15437 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15438 ;;      Totals:         0       3       0       0       0       0       0       0       0
 15439 ;;Total ram usage:        3 bytes
 15440 ;; Hardware stack levels used:    1
 15441 ;; Hardware stack levels required when called:    7
 15442 ;; This function calls:
 15443 ;;		Nothing
 15444 ;; This function is called by:
 15445 ;;		_ExecuteNewChannel
 15446 ;; This function uses a non-reentrant model
 15447 ;;
 15448                           
 15449                           	psect	text75
 15450  005AD8                     __ptext75:
 15451                           	opt stack 0
 15452  005AD8                     _UpdateDutyCycle:
 15453                           	opt stack 17
 15454                           
 15455                           ; BSR set to: 0
 15456                           ;incstack = 0
 15457                           ;UpdateDutyCycle@channelId stored from wreg
 15458  005AD8  6F62               	movwf	UpdateDutyCycle@channelId& (0+255),b
 15459                           
 15460                           ;lorawan_eu.c: 1162: Channels[channelId].dutyCycle = dutyCycleNew;
 15461  005ADA  0100               	movlb	0	; () banked
 15462  005ADC  5162               	movf	UpdateDutyCycle@channelId& (0+255),w,b
 15463  005ADE  ECAD  F006         	call	PL92	;call to abstracted procedure
 15464  005AE2  C060  FFDE         	movff	UpdateDutyCycle@dutyCycleNew,postinc2
 15465  005AE6  C061  FFDD         	movff	UpdateDutyCycle@dutyCycleNew+1,postdec2
 15466                           
 15467                           ;lorawan_eu.c: 1163: Channels[channelId].parametersDefined |= 0x04;
 15468  005AEA  5162               	movf	UpdateDutyCycle@channelId& (0+255),w,b
 15469  005AEC  D803               	call	PL68	;call to abstracted procedure
 15470  005AEE  0E00               	movlw	0
 15471  005AF0  84DB               	bsf	plusw2,2,c
 15472                           
 15473                           ; BSR set to: 0
 15474  005AF2  0C00               	retlw	0	;funcret
 15475  005AF4                     __end_of_UpdateDutyCycle:
 15476                           	opt stack 0
 15477  005AF4                     PL68:
 15478                           	opt stack 17
 15479  005AF4  0D0E               	mullw	14
 15480  005AF6  0E0D               	movlw	low (_Channels+13)
 15481  005AF8  24F3               	addwf	prodl,w,c
 15482  005AFA  6ED9               	movwf	fsr2l,c
 15483  005AFC  0E04               	movlw	high (_Channels+13)
 15484  005AFE  20F4               	addwfc	prodh,w,c
 15485  005B00  6EDA               	movwf	fsr2h,c
 15486  005B02  0012               	return	
 15487  005B04                     __end_ofPL68:
 15488                           	opt stack 0
 15489                           tosu	equ	0xFFF
 15490                           tosh	equ	0xFFE
 15491                           tosl	equ	0xFFD
 15492                           pclath	equ	0xFFA
 15493                           tblptru	equ	0xFF8
 15494                           tblptrh	equ	0xFF7
 15495                           tblptrl	equ	0xFF6
 15496                           tablat	equ	0xFF5
 15497                           prodh	equ	0xFF4
 15498                           prodl	equ	0xFF3
 15499                           intcon	equ	0xFF2
 15500                           indf0	equ	0xFEF
 15501                           postinc0	equ	0xFEE
 15502                           plusw0	equ	0xFEB
 15503                           fsr0h	equ	0xFEA
 15504                           fsr0l	equ	0xFE9
 15505                           wreg	equ	0xFE8
 15506                           postinc1	equ	0xFE6
 15507                           postdec1	equ	0xFE5
 15508                           plusw1	equ	0xFE3
 15509                           fsr1h	equ	0xFE2
 15510                           fsr1l	equ	0xFE1
 15511                           indf2	equ	0xFDF
 15512                           postinc2	equ	0xFDE
 15513                           postdec2	equ	0xFDD
 15514                           plusw2	equ	0xFDB
 15515                           fsr2h	equ	0xFDA
 15516                           fsr2l	equ	0xFD9
 15517                           status	equ	0xFD8
 15518                           
 15519 ;; *************** function _UpdateDataRange *****************
 15520 ;; Defined at:
 15521 ;;		line 1009 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 15522 ;; Parameters:    Size  Location     Type
 15523 ;;  channelId       1    wreg     unsigned char 
 15524 ;;  dataRangeNew    1    0[BANK0 ] unsigned char 
 15525 ;; Auto vars:     Size  Location     Type
 15526 ;;  channelId       1    2[BANK0 ] unsigned char 
 15527 ;;  i               1    3[BANK0 ] unsigned char 
 15528 ;; Return value:  Size  Location     Type
 15529 ;;                  1    wreg      void 
 15530 ;; Registers used:
 15531 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15532 ;; Tracked objects:
 15533 ;;		On entry : 3F/0
 15534 ;;		On exit  : 3F/2
 15535 ;;		Unchanged: 0/0
 15536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15537 ;;      Params:         0       1       0       0       0       0       0       0       0
 15538 ;;      Locals:         0       2       0       0       0       0       0       0       0
 15539 ;;      Temps:          0       1       0       0       0       0       0       0       0
 15540 ;;      Totals:         0       4       0       0       0       0       0       0       0
 15541 ;;Total ram usage:        4 bytes
 15542 ;; Hardware stack levels used:    1
 15543 ;; Hardware stack levels required when called:    7
 15544 ;; This function calls:
 15545 ;;		Nothing
 15546 ;; This function is called by:
 15547 ;;		_ExecuteNewChannel
 15548 ;; This function uses a non-reentrant model
 15549 ;;
 15550                           
 15551                           	psect	text76
 15552  004276                     __ptext76:
 15553                           	opt stack 0
 15554  004276                     _UpdateDataRange:
 15555                           	opt stack 17
 15556                           
 15557                           ; BSR set to: 0
 15558                           ;incstack = 0
 15559                           ;UpdateDataRange@channelId stored from wreg
 15560  004276  6F62               	movwf	UpdateDataRange@channelId& (0+255),b
 15561                           
 15562                           ;lorawan_eu.c: 1011: uint8_t i;
 15563                           ;lorawan_eu.c: 1014: loRa.minDataRate = 7;
 15564  004278  0E07               	movlw	7
 15565  00427A  0102               	movlb	2	; () banked
 15566  00427C  6FEB               	movwf	(_loRa+235)& (0+255),b
 15567                           
 15568                           ; BSR set to: 2
 15569                           ;lorawan_eu.c: 1015: loRa.maxDataRate = 0;
 15570  00427E  6BEC               	clrf	(_loRa+236)& (0+255),b
 15571                           
 15572                           ; BSR set to: 2
 15573                           ;lorawan_eu.c: 1017: Channels[channelId].dataRange.value = dataRangeNew;
 15574  004280  0100               	movlb	0	; () banked
 15575  004282  5162               	movf	UpdateDataRange@channelId& (0+255),w,b
 15576  004284  D83B               	call	PL6	;call to abstracted procedure
 15577  004286  C060  FFDF         	movff	UpdateDataRange@dataRangeNew,indf2
 15578                           
 15579                           ; BSR set to: 0
 15580                           ;lorawan_eu.c: 1018: Channels[channelId].parametersDefined |= 0X02;
 15581  00428A  5162               	movf	UpdateDataRange@channelId& (0+255),w,b
 15582  00428C  EC7A  F02D         	call	PL68	;call to abstracted procedure
 15583  004290  0E00               	movlw	0
 15584  004292  82DB               	bsf	plusw2,1,c
 15585                           
 15586                           ; BSR set to: 0
 15587                           ;lorawan_eu.c: 1019: for (i=0; i < loRa.maxChannels; i++)
 15588  004294  6B63               	clrf	UpdateDataRange@i& (0+255),b
 15589  004296  D023               	goto	l13208
 15590  004298                     l13196:
 15591                           
 15592                           ; BSR set to: 0
 15593                           ;lorawan_eu.c: 1020: {
 15594                           ;lorawan_eu.c: 1021: if ( (Channels[i].dataRange.min < loRa.minDataRate) && (Channels[i]
      +                          .status == 1) )
 15595  004298  5163               	movf	UpdateDataRange@i& (0+255),w,b
 15596  00429A  D830               	call	PL6	;call to abstracted procedure
 15597  00429C  50DF               	movf	223,w,c
 15598  00429E  0B0F               	andlw	15
 15599  0042A0  0100               	movlb	0	; () banked
 15600  0042A2  6F61               	movwf	??_UpdateDataRange& (0+255),b
 15601  0042A4  0102               	movlb	2	; () banked
 15602  0042A6  51EB               	movf	(_loRa+235)& (0+255),w,b
 15603  0042A8  0100               	movlb	0	; () banked
 15604  0042AA  5D61               	subwf	??_UpdateDataRange& (0+255),w,b
 15605  0042AC  E207               	bc	l1843
 15606                           
 15607                           ; BSR set to: 0
 15608  0042AE  5163               	movf	UpdateDataRange@i& (0+255),w,b
 15609  0042B0  D82D               	call	PL12	;call to abstracted procedure
 15610  0042B2  E104               	bnz	l1843
 15611                           
 15612                           ; BSR set to: 0
 15613                           ;lorawan_eu.c: 1022: {
 15614                           ;lorawan_eu.c: 1023: loRa.minDataRate = Channels[i].dataRange.min;
 15615  0042B4  5163               	movf	UpdateDataRange@i& (0+255),w,b
 15616  0042B6  D822               	call	PL6	;call to abstracted procedure
 15617  0042B8  ECB2  F01D         	call	PL326	;call to abstracted procedure
 15618  0042BC                     l1843:
 15619                           
 15620                           ;lorawan_eu.c: 1024: }
 15621                           ;lorawan_eu.c: 1025: if ( (Channels[i].dataRange.max > loRa.maxDataRate) && (Channels[i]
      +                          .status == 1) )
 15622  0042BC  0100               	movlb	0	; () banked
 15623  0042BE  5163               	movf	UpdateDataRange@i& (0+255),w,b
 15624  0042C0  D81D               	call	PL6	;call to abstracted procedure
 15625  0042C2  ECB7  F01D         	call	PL440	;call to abstracted procedure
 15626  0042C6  61EC               	cpfslt	(_loRa+236)& (0+255),b
 15627  0042C8  D008               	goto	l13206
 15628                           
 15629                           ; BSR set to: 2
 15630  0042CA  0100               	movlb	0	; () banked
 15631  0042CC  5163               	movf	UpdateDataRange@i& (0+255),w,b
 15632  0042CE  D81E               	call	PL12	;call to abstracted procedure
 15633  0042D0  E104               	bnz	l13206
 15634                           
 15635                           ; BSR set to: 0
 15636                           ;lorawan_eu.c: 1026: {
 15637                           ;lorawan_eu.c: 1027: loRa.maxDataRate = Channels[i].dataRange.max;
 15638  0042D2  5163               	movf	UpdateDataRange@i& (0+255),w,b
 15639  0042D4  D813               	call	PL6	;call to abstracted procedure
 15640  0042D6  ECAD  F01D         	call	PL322	;call to abstracted procedure
 15641  0042DA                     l13206:
 15642  0042DA  0100               	movlb	0	; () banked
 15643  0042DC  2B63               	incf	UpdateDataRange@i& (0+255),f,b
 15644  0042DE                     l13208:
 15645                           
 15646                           ; BSR set to: 0
 15647  0042DE  0102               	movlb	2	; () banked
 15648  0042E0  51ED               	movf	(_loRa+237)& (0+255),w,b
 15649  0042E2  0100               	movlb	0	; () banked
 15650  0042E4  5D63               	subwf	UpdateDataRange@i& (0+255),w,b
 15651  0042E6  E3D8               	bnc	l13196
 15652                           
 15653                           ; BSR set to: 0
 15654                           ;lorawan_eu.c: 1028: }
 15655                           ;lorawan_eu.c: 1029: }
 15656                           ;lorawan_eu.c: 1031: if (loRa.currentDataRate > loRa.maxDataRate)
 15657  0042E8  0102               	movlb	2	; () banked
 15658  0042EA  51DF               	movf	(_loRa+223)& (0+255),w,b
 15659  0042EC  5DEC               	subwf	(_loRa+236)& (0+255),w,b
 15660  0042EE  E302 EFA7  F01D    	bc	PL302
 15661                           
 15662                           ; BSR set to: 2
 15663                           ;lorawan_eu.c: 1032: {
 15664                           ;lorawan_eu.c: 1033: loRa.currentDataRate = loRa.maxDataRate;
 15665  0042F4  C2EC  F2DF         	movff	_loRa+236,_loRa+223
 15666  0042F8                     l13214:
 15667                           
 15668                           ; BSR set to: 2
 15669                           ;lorawan_eu.c: 1034: }
 15670                           ;lorawan_eu.c: 1036: if (loRa.currentDataRate < loRa.minDataRate)
 15671                           
 15672                           ; BSR set to: 2
 15673                           ;lorawan_eu.c: 1037: {
 15674                           ;lorawan_eu.c: 1038: loRa.currentDataRate = loRa.minDataRate;
 15675                           
 15676                           ; BSR set to: 2
 15677  0042F8  EFA7  F01D         	goto	PL302	;call to abstracted procedure
 15678  0042FC                     __end_of_UpdateDataRange:
 15679                           	opt stack 0
 15680  0042FC                     PL6:
 15681                           	opt stack 12
 15682  0042FC  0D0E               	mullw	14
 15683  0042FE  0E05               	movlw	low (_Channels+5)
 15684  004300  24F3               	addwf	prodl,w,c
 15685  004302  6ED9               	movwf	fsr2l,c
 15686  004304  0E04               	movlw	high (_Channels+5)
 15687  004306  20F4               	addwfc	prodh,w,c
 15688  004308  6EDA               	movwf	fsr2h,c
 15689  00430A  0012               	return	
 15690  00430C                     __end_ofPL6:
 15691                           	opt stack 0
 15692  00430C                     PL12:
 15693                           	opt stack 17
 15694  00430C  0D0E               	mullw	14
 15695  00430E  0E04               	movlw	low (_Channels+4)
 15696  004310  24F3               	addwf	prodl,w,c
 15697  004312  6ED9               	movwf	fsr2l,c
 15698  004314  0E04               	movlw	high (_Channels+4)
 15699  004316  20F4               	addwfc	prodh,w,c
 15700  004318  6EDA               	movwf	fsr2h,c
 15701  00431A  04DE               	decf	postinc2,w,c
 15702  00431C  0012               	return	
 15703  00431E                     __end_ofPL12:
 15704                           	opt stack 0
 15705                           tosu	equ	0xFFF
 15706                           tosh	equ	0xFFE
 15707                           tosl	equ	0xFFD
 15708                           pclath	equ	0xFFA
 15709                           tblptru	equ	0xFF8
 15710                           tblptrh	equ	0xFF7
 15711                           tblptrl	equ	0xFF6
 15712                           tablat	equ	0xFF5
 15713                           prodh	equ	0xFF4
 15714                           prodl	equ	0xFF3
 15715                           intcon	equ	0xFF2
 15716                           indf0	equ	0xFEF
 15717                           postinc0	equ	0xFEE
 15718                           plusw0	equ	0xFEB
 15719                           fsr0h	equ	0xFEA
 15720                           fsr0l	equ	0xFE9
 15721                           wreg	equ	0xFE8
 15722                           postinc1	equ	0xFE6
 15723                           postdec1	equ	0xFE5
 15724                           plusw1	equ	0xFE3
 15725                           fsr1h	equ	0xFE2
 15726                           fsr1l	equ	0xFE1
 15727                           indf2	equ	0xFDF
 15728                           postinc2	equ	0xFDE
 15729                           postdec2	equ	0xFDD
 15730                           plusw2	equ	0xFDB
 15731                           fsr2h	equ	0xFDA
 15732                           fsr2l	equ	0xFD9
 15733                           status	equ	0xFD8
 15734                           
 15735 ;; *************** function _LORAWAN_SetChannelIdStatus *****************
 15736 ;; Defined at:
 15737 ;;		line 282 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 15738 ;; Parameters:    Size  Location     Type
 15739 ;;  channelId       1    wreg     unsigned char 
 15740 ;;  statusNew       1    4[BANK0 ] unsigned char 
 15741 ;; Auto vars:     Size  Location     Type
 15742 ;;  channelId       1    6[BANK0 ] unsigned char 
 15743 ;;  result          1    0        enum E17413
 15744 ;; Return value:  Size  Location     Type
 15745 ;;                  1    wreg      enum E17413
 15746 ;; Registers used:
 15747 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15748 ;; Tracked objects:
 15749 ;;		On entry : 3F/0
 15750 ;;		On exit  : 3D/0
 15751 ;;		Unchanged: 0/0
 15752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15753 ;;      Params:         0       1       0       0       0       0       0       0       0
 15754 ;;      Locals:         0       2       0       0       0       0       0       0       0
 15755 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15756 ;;      Totals:         0       3       0       0       0       0       0       0       0
 15757 ;;Total ram usage:        3 bytes
 15758 ;; Hardware stack levels used:    1
 15759 ;; Hardware stack levels required when called:    8
 15760 ;; This function calls:
 15761 ;;		_UpdateChannelIdStatus
 15762 ;;		_ValidateChannelId
 15763 ;; This function is called by:
 15764 ;;		_ExecuteNewChannel
 15765 ;;		_UpdateCfList
 15766 ;; This function uses a non-reentrant model
 15767 ;;
 15768                           
 15769                           	psect	text77
 15770  005A22                     __ptext77:
 15771                           	opt stack 0
 15772  005A22                     _LORAWAN_SetChannelIdStatus:
 15773                           	opt stack 17
 15774                           
 15775                           ; BSR set to: 2
 15776                           ;incstack = 0
 15777                           ;LORAWAN_SetChannelIdStatus@channelId stored from wreg
 15778  005A22  6F66               	movwf	LORAWAN_SetChannelIdStatus@channelId& (0+255),b
 15779                           
 15780                           ;lorawan_eu.c: 287: if (ValidateChannelId (channelId, 1) != OK)
 15781  005A24  0E01               	movlw	1
 15782  005A26  0100               	movlb	0	; () banked
 15783  005A28  6F60               	movwf	ValidateChannelId@allowedForDefaultChannels& (0+255),b
 15784  005A2A  5166               	movf	LORAWAN_SetChannelIdStatus@channelId& (0+255),w,b
 15785  005A2C  EC1F  F02F         	call	_ValidateChannelId
 15786  005A30  0900               	iorlw	0
 15787  005A32  E001               	bz	l13224
 15788                           
 15789                           ; BSR set to: 0
 15790                           ;lorawan_eu.c: 290: }
 15791  005A34  0012               	return	
 15792  005A36                     l13224:
 15793                           
 15794                           ; BSR set to: 0
 15795                           ;lorawan_eu.c: 292: else
 15796                           ;lorawan_eu.c: 293: {
 15797                           ;lorawan_eu.c: 294: if ( (Channels[channelId].parametersDefined & (0X01 | 0X02 | 0x04) )
      +                           == (0X01 | 0X02 | 0x04) )
 15798  005A36  5166               	movf	LORAWAN_SetChannelIdStatus@channelId& (0+255),w,b
 15799  005A38  EC7A  F02D         	call	PL68	;call to abstracted procedure
 15800  005A3C  50DF               	movf	indf2,w,c
 15801  005A3E  0B07               	andlw	7
 15802  005A40  0A07               	xorlw	7
 15803  005A42  A4D8               	btfss	status,2,c
 15804  005A44  0012               	return	
 15805                           
 15806                           ; BSR set to: 0
 15807                           ;lorawan_eu.c: 295: {
 15808                           ;lorawan_eu.c: 296: UpdateChannelIdStatus (channelId, statusNew);
 15809  005A46  C064  F060         	movff	LORAWAN_SetChannelIdStatus@statusNew,UpdateChannelIdStatus@statusNew
 15810  005A4A  5166               	movf	LORAWAN_SetChannelIdStatus@channelId& (0+255),w,b
 15811  005A4C  EF57  F01D         	goto	_UpdateChannelIdStatus
 15812  005A50                     __end_of_LORAWAN_SetChannelIdStatus:
 15813                           	opt stack 0
 15814                           tosu	equ	0xFFF
 15815                           tosh	equ	0xFFE
 15816                           tosl	equ	0xFFD
 15817                           pclath	equ	0xFFA
 15818                           tblptru	equ	0xFF8
 15819                           tblptrh	equ	0xFF7
 15820                           tblptrl	equ	0xFF6
 15821                           tablat	equ	0xFF5
 15822                           prodh	equ	0xFF4
 15823                           prodl	equ	0xFF3
 15824                           intcon	equ	0xFF2
 15825                           indf0	equ	0xFEF
 15826                           postinc0	equ	0xFEE
 15827                           plusw0	equ	0xFEB
 15828                           fsr0h	equ	0xFEA
 15829                           fsr0l	equ	0xFE9
 15830                           wreg	equ	0xFE8
 15831                           postinc1	equ	0xFE6
 15832                           postdec1	equ	0xFE5
 15833                           plusw1	equ	0xFE3
 15834                           fsr1h	equ	0xFE2
 15835                           fsr1l	equ	0xFE1
 15836                           indf2	equ	0xFDF
 15837                           postinc2	equ	0xFDE
 15838                           postdec2	equ	0xFDD
 15839                           plusw2	equ	0xFDB
 15840                           fsr2h	equ	0xFDA
 15841                           fsr2l	equ	0xFD9
 15842                           status	equ	0xFD8
 15843                           
 15844 ;; *************** function _ValidateChannelId *****************
 15845 ;; Defined at:
 15846 ;;		line 1125 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 15847 ;; Parameters:    Size  Location     Type
 15848 ;;  channelId       1    wreg     unsigned char 
 15849 ;;  allowedForDe    1    0[BANK0 ] unsigned char 
 15850 ;; Auto vars:     Size  Location     Type
 15851 ;;  channelId       1    2[BANK0 ] unsigned char 
 15852 ;;  result          1    1[BANK0 ] enum E17413
 15853 ;; Return value:  Size  Location     Type
 15854 ;;                  1    wreg      enum E17413
 15855 ;; Registers used:
 15856 ;;		wreg, status,2, status,0
 15857 ;; Tracked objects:
 15858 ;;		On entry : 3F/0
 15859 ;;		On exit  : 3F/0
 15860 ;;		Unchanged: 0/0
 15861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15862 ;;      Params:         0       1       0       0       0       0       0       0       0
 15863 ;;      Locals:         0       2       0       0       0       0       0       0       0
 15864 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15865 ;;      Totals:         0       3       0       0       0       0       0       0       0
 15866 ;;Total ram usage:        3 bytes
 15867 ;; Hardware stack levels used:    1
 15868 ;; Hardware stack levels required when called:    7
 15869 ;; This function calls:
 15870 ;;		Nothing
 15871 ;; This function is called by:
 15872 ;;		_LORAWAN_SetChannelIdStatus
 15873 ;;		_ExecuteNewChannel
 15874 ;; This function uses a non-reentrant model
 15875 ;;
 15876                           
 15877                           	psect	text78
 15878  005E3E                     __ptext78:
 15879                           	opt stack 0
 15880  005E3E                     _ValidateChannelId:
 15881                           	opt stack 17
 15882                           
 15883                           ;incstack = 0
 15884                           ;ValidateChannelId@channelId stored from wreg
 15885  005E3E  6F62               	movwf	ValidateChannelId@channelId& (0+255),b
 15886                           
 15887                           ;lorawan_eu.c: 1127: LorawanError_t result = OK;
 15888  005E40  0100               	movlb	0	; () banked
 15889  005E42  6B61               	clrf	ValidateChannelId@result& (0+255),b
 15890                           
 15891                           ; BSR set to: 0
 15892                           ;lorawan_eu.c: 1129: if ( (channelId >= 16) || ( (allowedForDefaultChannels == 0) && (ch
      +                          annelId < 3) ) )
 15893  005E44  0E10               	movlw	16
 15894  005E46  6162               	cpfslt	ValidateChannelId@channelId& (0+255),b
 15895  005E48  D005               	goto	l12526
 15896                           
 15897                           ; BSR set to: 0
 15898  005E4A  5160               	movf	ValidateChannelId@allowedForDefaultChannels& (0+255),w,b
 15899  005E4C  E105               	bnz	l1883
 15900                           
 15901                           ; BSR set to: 0
 15902  005E4E  0E03               	movlw	3
 15903  005E50  6162               	cpfslt	ValidateChannelId@channelId& (0+255),b
 15904  005E52  D002               	goto	l1883
 15905  005E54                     l12526:
 15906                           
 15907                           ; BSR set to: 0
 15908                           ;lorawan_eu.c: 1130: {
 15909                           ;lorawan_eu.c: 1131: result = INVALID_PARAMETER ;
 15910  005E54  0E03               	movlw	3
 15911  005E56  6F61               	movwf	ValidateChannelId@result& (0+255),b
 15912  005E58                     l1883:
 15913                           
 15914                           ; BSR set to: 0
 15915                           ;lorawan_eu.c: 1132: }
 15916                           ;lorawan_eu.c: 1134: return result;
 15917  005E58  5161               	movf	ValidateChannelId@result& (0+255),w,b
 15918                           
 15919                           ; BSR set to: 0
 15920  005E5A  0012               	return		;funcret
 15921  005E5C                     __end_of_ValidateChannelId:
 15922                           	opt stack 0
 15923                           tosu	equ	0xFFF
 15924                           tosh	equ	0xFFE
 15925                           tosl	equ	0xFFD
 15926                           pclath	equ	0xFFA
 15927                           tblptru	equ	0xFF8
 15928                           tblptrh	equ	0xFF7
 15929                           tblptrl	equ	0xFF6
 15930                           tablat	equ	0xFF5
 15931                           prodh	equ	0xFF4
 15932                           prodl	equ	0xFF3
 15933                           intcon	equ	0xFF2
 15934                           indf0	equ	0xFEF
 15935                           postinc0	equ	0xFEE
 15936                           plusw0	equ	0xFEB
 15937                           fsr0h	equ	0xFEA
 15938                           fsr0l	equ	0xFE9
 15939                           wreg	equ	0xFE8
 15940                           postinc1	equ	0xFE6
 15941                           postdec1	equ	0xFE5
 15942                           plusw1	equ	0xFE3
 15943                           fsr1h	equ	0xFE2
 15944                           fsr1l	equ	0xFE1
 15945                           indf2	equ	0xFDF
 15946                           postinc2	equ	0xFDE
 15947                           postdec2	equ	0xFDD
 15948                           plusw2	equ	0xFDB
 15949                           fsr2h	equ	0xFDA
 15950                           fsr2l	equ	0xFD9
 15951                           status	equ	0xFD8
 15952                           
 15953 ;; *************** function _ExecuteLinkCheck *****************
 15954 ;; Defined at:
 15955 ;;		line 1652 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 15956 ;; Parameters:    Size  Location     Type
 15957 ;;  ptr             2    0[BANK0 ] PTR unsigned char 
 15958 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 15959 ;; Auto vars:     Size  Location     Type
 15960 ;;		None
 15961 ;; Return value:  Size  Location     Type
 15962 ;;                  2    0[BANK0 ] PTR unsigned char 
 15963 ;; Registers used:
 15964 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15965 ;; Tracked objects:
 15966 ;;		On entry : 3F/0
 15967 ;;		On exit  : 3F/0
 15968 ;;		Unchanged: 0/0
 15969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15970 ;;      Params:         0       2       0       0       0       0       0       0       0
 15971 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15972 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15973 ;;      Totals:         0       2       0       0       0       0       0       0       0
 15974 ;;Total ram usage:        2 bytes
 15975 ;; Hardware stack levels used:    1
 15976 ;; Hardware stack levels required when called:    7
 15977 ;; This function calls:
 15978 ;;		Nothing
 15979 ;; This function is called by:
 15980 ;;		_MacExecuteCommands
 15981 ;; This function uses a non-reentrant model
 15982 ;;
 15983                           
 15984                           	psect	text79
 15985  005B04                     __ptext79:
 15986                           	opt stack 0
 15987  005B04                     _ExecuteLinkCheck:
 15988                           	opt stack 0
 15989                           
 15990                           ; BSR set to: 0
 15991                           ;lorawan.c: 1654: loRa.linkCheckMargin = *(ptr++);
 15992                           
 15993                           ; BSR set to: 0
 15994                           ;incstack = 0
 15995  005B04  D80E               	call	PL304	;call to abstracted procedure
 15996  005B06  6FDD               	movwf	(_loRa+221)& (0+255),b
 15997                           
 15998                           ; BSR set to: 2
 15999  005B08  0100               	movlb	0	; () banked
 16000  005B0A  4B60               	infsnz	ExecuteLinkCheck@ptr& (0+255),f,b
 16001  005B0C  2B61               	incf	(ExecuteLinkCheck@ptr+1)& (0+255),f,b
 16002                           
 16003                           ; BSR set to: 0
 16004                           ;lorawan.c: 1655: loRa.linkCheckGwCnt = *(ptr++);
 16005  005B0E  D809               	call	PL304	;call to abstracted procedure
 16006  005B10  6FDE               	movwf	(_loRa+222)& (0+255),b
 16007  005B12  0100               	movlb	0	; () banked
 16008  005B14  4B60               	infsnz	ExecuteLinkCheck@ptr& (0+255),f,b
 16009  005B16  2B61               	incf	(ExecuteLinkCheck@ptr+1)& (0+255),f,b
 16010                           
 16011                           ; BSR set to: 0
 16012                           ;lorawan.c: 1656: return ptr;
 16013  005B18  C060  F060         	movff	ExecuteLinkCheck@ptr,?_ExecuteLinkCheck
 16014  005B1C  C061  F061         	movff	ExecuteLinkCheck@ptr+1,?_ExecuteLinkCheck+1
 16015                           
 16016                           ; BSR set to: 0
 16017  005B20  0012               	return		;funcret
 16018  005B22                     __end_of_ExecuteLinkCheck:
 16019                           	opt stack 0
 16020  005B22                     PL304:
 16021                           	opt stack 18
 16022  005B22  C060  FFD9         	movff	ExecuteLinkCheck@ptr,fsr2l
 16023  005B26  C061  FFDA         	movff	ExecuteLinkCheck@ptr+1,fsr2h
 16024  005B2A  50DF               	movf	indf2,w,c
 16025  005B2C  0102               	movlb	2	; () banked
 16026  005B2E  0012               	return	
 16027  005B30                     __end_ofPL304:
 16028                           	opt stack 0
 16029                           tosu	equ	0xFFF
 16030                           tosh	equ	0xFFE
 16031                           tosl	equ	0xFFD
 16032                           pclath	equ	0xFFA
 16033                           tblptru	equ	0xFF8
 16034                           tblptrh	equ	0xFF7
 16035                           tblptrl	equ	0xFF6
 16036                           tablat	equ	0xFF5
 16037                           prodh	equ	0xFF4
 16038                           prodl	equ	0xFF3
 16039                           intcon	equ	0xFF2
 16040                           indf0	equ	0xFEF
 16041                           postinc0	equ	0xFEE
 16042                           plusw0	equ	0xFEB
 16043                           fsr0h	equ	0xFEA
 16044                           fsr0l	equ	0xFE9
 16045                           wreg	equ	0xFE8
 16046                           postinc1	equ	0xFE6
 16047                           postdec1	equ	0xFE5
 16048                           plusw1	equ	0xFE3
 16049                           fsr1h	equ	0xFE2
 16050                           fsr1l	equ	0xFE1
 16051                           indf2	equ	0xFDF
 16052                           postinc2	equ	0xFDE
 16053                           postdec2	equ	0xFDD
 16054                           plusw2	equ	0xFDB
 16055                           fsr2h	equ	0xFDA
 16056                           fsr2l	equ	0xFD9
 16057                           status	equ	0xFD8
 16058                           
 16059 ;; *************** function _ExecuteLinkAdr *****************
 16060 ;; Defined at:
 16061 ;;		line 613 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16062 ;; Parameters:    Size  Location     Type
 16063 ;;  ptr             2   13[BANK0 ] PTR unsigned char 
 16064 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 16065 ;; Auto vars:     Size  Location     Type
 16066 ;;  redundancy      2   19[BANK0 ] PTR struct .
 16067 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 16068 ;;  channelMask     2   16[BANK0 ] unsigned int 
 16069 ;;  dataRate        1   21[BANK0 ] unsigned char 
 16070 ;;  txPower         1   18[BANK0 ] unsigned char 
 16071 ;; Return value:  Size  Location     Type
 16072 ;;                  2   13[BANK0 ] PTR unsigned char 
 16073 ;; Registers used:
 16074 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16075 ;; Tracked objects:
 16076 ;;		On entry : 3F/0
 16077 ;;		On exit  : 3F/2
 16078 ;;		Unchanged: 0/0
 16079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16080 ;;      Params:         0       2       0       0       0       0       0       0       0
 16081 ;;      Locals:         0       6       0       0       0       0       0       0       0
 16082 ;;      Temps:          0       1       0       0       0       0       0       0       0
 16083 ;;      Totals:         0       9       0       0       0       0       0       0       0
 16084 ;;Total ram usage:        9 bytes
 16085 ;; Hardware stack levels used:    1
 16086 ;; Hardware stack levels required when called:   10
 16087 ;; This function calls:
 16088 ;;		_EnableChannels
 16089 ;;		_UpdateCurrentDataRate
 16090 ;;		_UpdateTxPower
 16091 ;;		_ValidateChannelMask
 16092 ;;		_ValidateChannelMaskCntl
 16093 ;;		_ValidateDataRate
 16094 ;;		_ValidateTxPower
 16095 ;; This function is called by:
 16096 ;;		_MacExecuteCommands
 16097 ;; This function uses a non-reentrant model
 16098 ;;
 16099                           
 16100                           	psect	text80
 16101  002A7A                     __ptext80:
 16102                           	opt stack 0
 16103  002A7A                     _ExecuteLinkAdr:
 16104                           	opt stack 0
 16105                           
 16106                           ; BSR set to: 0
 16107                           ;lorawan_eu.c: 615: uint8_t txPower, dataRate;
 16108                           ;lorawan_eu.c: 616: uint16_t channelMask;
 16109                           ;lorawan_eu.c: 618: txPower = *(ptr) & 0x0F;
 16110                           
 16111                           ; BSR set to: 0
 16112                           ;incstack = 0
 16113  002A7A  D89A               	call	PL320	;call to abstracted procedure
 16114  002A7C  50DF               	movf	indf2,w,c
 16115  002A7E  0B0F               	andlw	15
 16116  002A80  6F72               	movwf	ExecuteLinkAdr@txPower& (0+255),b
 16117                           
 16118                           ;lorawan_eu.c: 619: dataRate = ( *(ptr) & 0xF0 ) >> (4);
 16119  002A82  D896               	call	PL320	;call to abstracted procedure
 16120  002A84  50DF               	movf	indf2,w,c
 16121  002A86  6F6F               	movwf	??_ExecuteLinkAdr& (0+255),b
 16122  002A88  396F               	swapf	??_ExecuteLinkAdr& (0+255),w,b
 16123  002A8A  0B0F               	andlw	15
 16124  002A8C  6F75               	movwf	ExecuteLinkAdr@dataRate& (0+255),b
 16125                           
 16126                           ; BSR set to: 0
 16127                           ;lorawan_eu.c: 620: ptr++;
 16128  002A8E  4B6D               	infsnz	ExecuteLinkAdr@ptr& (0+255),f,b
 16129  002A90  2B6E               	incf	(ExecuteLinkAdr@ptr+1)& (0+255),f,b
 16130                           
 16131                           ; BSR set to: 0
 16132                           ;lorawan_eu.c: 621: channelMask = (*((uint16_t*)ptr));
 16133  002A92  D88E               	call	PL320	;call to abstracted procedure
 16134  002A94  CFDE F070          	movff	postinc2,ExecuteLinkAdr@channelMask
 16135  002A98  CFDD F071          	movff	postdec2,ExecuteLinkAdr@channelMask+1
 16136                           
 16137                           ; BSR set to: 0
 16138                           ;lorawan_eu.c: 622: ptr = ptr + sizeof (channelMask);
 16139  002A9C  0E02               	movlw	2
 16140  002A9E  276D               	addwf	ExecuteLinkAdr@ptr& (0+255),f,b
 16141  002AA0  0E00               	movlw	0
 16142  002AA2  236E               	addwfc	(ExecuteLinkAdr@ptr+1)& (0+255),f,b
 16143                           
 16144                           ; BSR set to: 0
 16145                           ;lorawan_eu.c: 623: Redundancy_t *redundancy;
 16146                           ;lorawan_eu.c: 624: redundancy = (Redundancy_t*)(ptr++);
 16147  002AA4  C06D  F073         	movff	ExecuteLinkAdr@ptr,ExecuteLinkAdr@redundancy
 16148  002AA8  C06E  F074         	movff	ExecuteLinkAdr@ptr+1,ExecuteLinkAdr@redundancy+1
 16149                           
 16150                           ; BSR set to: 0
 16151  002AAC  4B6D               	infsnz	ExecuteLinkAdr@ptr& (0+255),f,b
 16152  002AAE  2B6E               	incf	(ExecuteLinkAdr@ptr+1)& (0+255),f,b
 16153                           
 16154                           ; BSR set to: 0
 16155                           ;lorawan_eu.c: 626: if (1 == loRa.macStatus.adr)
 16156  002AB0  0102               	movlb	2	; () banked
 16157  002AB2  AD02               	btfss	(_loRa+2)& (0+255),6,b
 16158  002AB4  D062               	goto	l13616
 16159                           
 16160                           ; BSR set to: 2
 16161                           ;lorawan_eu.c: 627: {
 16162                           ;lorawan_eu.c: 628: if ( (ValidateChannelMaskCntl(redundancy->chMaskCntl) == OK) && (Val
      +                          idateChannelMask(channelMask) == OK) )
 16163  002AB6  D877               	call	PL262	;call to abstracted procedure
 16164  002AB8  0100               	movlb	0	; () banked
 16165  002ABA  38DF               	swapf	223,w,c
 16166  002ABC  0B07               	andlw	7
 16167  002ABE  ECD0  F02F         	call	_ValidateChannelMaskCntl
 16168  002AC2  0900               	iorlw	0
 16169  002AC4  E10C               	bnz	l13584
 16170                           
 16171                           ; BSR set to: 0
 16172  002AC6  C070  F060         	movff	ExecuteLinkAdr@channelMask,ValidateChannelMask@channelMask
 16173  002ACA  C071  F061         	movff	ExecuteLinkAdr@channelMask+1,ValidateChannelMask@channelMask+1
 16174  002ACE  EC28  F02D         	call	_ValidateChannelMask	;wreg free
 16175  002AD2  0900               	iorlw	0
 16176  002AD4  E104               	bnz	l13584
 16177                           
 16178                           ; BSR set to: 0
 16179                           ;lorawan_eu.c: 629: {
 16180                           ;lorawan_eu.c: 630: loRa.macCommands[loRa.crtMacCmdIndex].channelMaskAck = 1;
 16181  002AD6  0102               	movlb	2	; () banked
 16182  002AD8  51A7               	movf	(_loRa+167)& (0+255),w,b
 16183  002ADA  D85D               	call	PL2	;call to abstracted procedure
 16184  002ADC  80DF               	bsf	indf2,0,c
 16185  002ADE                     l13584:
 16186                           
 16187                           ;lorawan_eu.c: 631: }
 16188                           ;lorawan_eu.c: 633: if ( (ValidateDataRate (dataRate) == OK) && (dataRate >= loRa.minDat
      +                          aRate) && (dataRate <= loRa.maxDataRate) )
 16189  002ADE  0100               	movlb	0	; () banked
 16190  002AE0  5175               	movf	ExecuteLinkAdr@dataRate& (0+255),w,b
 16191  002AE2  EC36  F030         	call	_ValidateDataRate
 16192  002AE6  0900               	iorlw	0
 16193  002AE8  E10C               	bnz	l13592
 16194                           
 16195                           ; BSR set to: 0
 16196  002AEA  0102               	movlb	2	; () banked
 16197  002AEC  51EB               	movf	(_loRa+235)& (0+255),w,b
 16198  002AEE  0100               	movlb	0	; () banked
 16199  002AF0  5D75               	subwf	ExecuteLinkAdr@dataRate& (0+255),w,b
 16200  002AF2  E307               	bnc	l13592
 16201                           
 16202                           ; BSR set to: 0
 16203  002AF4  5175               	movf	ExecuteLinkAdr@dataRate& (0+255),w,b
 16204  002AF6  0102               	movlb	2	; () banked
 16205  002AF8  5DEC               	subwf	(_loRa+236)& (0+255),w,b
 16206  002AFA  E303               	bnc	l13592
 16207                           
 16208                           ; BSR set to: 2
 16209                           ;lorawan_eu.c: 634: {
 16210                           ;lorawan_eu.c: 635: loRa.macCommands[loRa.crtMacCmdIndex].dataRateAck = 1;
 16211  002AFC  51A7               	movf	(_loRa+167)& (0+255),w,b
 16212  002AFE  D84B               	call	PL2	;call to abstracted procedure
 16213  002B00  82DF               	bsf	indf2,1,c
 16214  002B02                     l13592:
 16215                           
 16216                           ;lorawan_eu.c: 636: }
 16217                           ;lorawan_eu.c: 638: if (ValidateTxPower (txPower) == OK)
 16218  002B02  0100               	movlb	0	; () banked
 16219  002B04  5172               	movf	ExecuteLinkAdr@txPower& (0+255),w,b
 16220  002B06  ECAE  F02E         	call	_ValidateTxPower
 16221  002B0A  0900               	iorlw	0
 16222  002B0C  E104               	bnz	l1738
 16223                           
 16224                           ; BSR set to: 0
 16225                           ;lorawan_eu.c: 639: {
 16226                           ;lorawan_eu.c: 640: loRa.macCommands[loRa.crtMacCmdIndex].powerAck = 1;
 16227  002B0E  0102               	movlb	2	; () banked
 16228  002B10  51A7               	movf	(_loRa+167)& (0+255),w,b
 16229  002B12  D841               	call	PL2	;call to abstracted procedure
 16230  002B14  84DF               	bsf	indf2,2,c
 16231  002B16                     l1738:
 16232                           
 16233                           ;lorawan_eu.c: 641: }
 16234                           ;lorawan_eu.c: 643: if ( (loRa.macCommands[loRa.crtMacCmdIndex].powerAck == 1) && (loRa.
      +                          macCommands[loRa.crtMacCmdIndex].dataRateAck == 1) && (loRa.macCommands[loRa.crtMacCmdIn
      +                          dex].channelMaskAck == 1) )
 16235  002B16  0102               	movlb	2	; () banked
 16236  002B18  51A7               	movf	(_loRa+167)& (0+255),w,b
 16237  002B1A  D83D               	call	PL2	;call to abstracted procedure
 16238  002B1C  A4DF               	btfss	indf2,2,c
 16239  002B1E  D036               	goto	l13618
 16240                           
 16241                           ; BSR set to: 2
 16242  002B20  51A7               	movf	(_loRa+167)& (0+255),w,b
 16243  002B22  D839               	call	PL2	;call to abstracted procedure
 16244  002B24  A2DF               	btfss	indf2,1,c
 16245  002B26  D032               	goto	l13618
 16246                           
 16247                           ; BSR set to: 2
 16248  002B28  51A7               	movf	(_loRa+167)& (0+255),w,b
 16249  002B2A  D835               	call	PL2	;call to abstracted procedure
 16250  002B2C  A0DF               	btfss	indf2,0,c
 16251  002B2E  D02E               	goto	l13618
 16252                           
 16253                           ; BSR set to: 2
 16254                           ;lorawan_eu.c: 644: {
 16255                           ;lorawan_eu.c: 645: EnableChannels (channelMask, redundancy->chMaskCntl);
 16256  002B30  C070  F06A         	movff	ExecuteLinkAdr@channelMask,EnableChannels@channelMask
 16257  002B34  C071  F06B         	movff	ExecuteLinkAdr@channelMask+1,EnableChannels@channelMask+1
 16258  002B38  D836               	call	PL262	;call to abstracted procedure
 16259  002B3A  0100               	movlb	0	; () banked
 16260  002B3C  38DF               	swapf	223,w,c
 16261  002B3E  0B07               	andlw	7
 16262  002B40  6F6C               	movwf	EnableChannels@channelMaskCntl& (0+255),b
 16263  002B42  EC16  F030         	call	_EnableChannels	;wreg free
 16264                           
 16265                           ; BSR set to: 0
 16266                           ;lorawan_eu.c: 647: UpdateTxPower (txPower);
 16267  002B46  5172               	movf	ExecuteLinkAdr@txPower& (0+255),w,b
 16268  002B48  ECE2  F030         	call	_UpdateTxPower
 16269                           
 16270                           ;lorawan_eu.c: 648: loRa.macStatus.txPowerModified = 1;
 16271  002B4C  0102               	movlb	2	; () banked
 16272  002B4E  8903               	bsf	(_loRa+3)& (0+255),4,b
 16273                           
 16274                           ; BSR set to: 2
 16275                           ;lorawan_eu.c: 649: UpdateCurrentDataRate (dataRate);
 16276  002B50  0100               	movlb	0	; () banked
 16277  002B52  5175               	movf	ExecuteLinkAdr@dataRate& (0+255),w,b
 16278  002B54  ECE6  F030         	call	_UpdateCurrentDataRate
 16279                           
 16280                           ;lorawan_eu.c: 651: if (redundancy->nbRep == 0)
 16281  002B58  D826               	call	PL262	;call to abstracted procedure
 16282  002B5A  0100               	movlb	0	; () banked
 16283  002B5C  50DF               	movf	223,w,c
 16284  002B5E  0B0F               	andlw	15
 16285  002B60  E103               	bnz	l13612
 16286                           
 16287                           ; BSR set to: 0
 16288                           ;lorawan_eu.c: 652: {
 16289                           ;lorawan_eu.c: 653: loRa.maxRepetitionsUnconfirmedUplink = 0;
 16290  002B62  0102               	movlb	2	; () banked
 16291  002B64  6BD6               	clrf	(_loRa+214)& (0+255),b
 16292                           
 16293                           ;lorawan_eu.c: 654: }
 16294  002B66  D007               	goto	l13614
 16295  002B68                     l13612:
 16296                           
 16297                           ; BSR set to: 0
 16298                           ;lorawan_eu.c: 655: else
 16299                           ;lorawan_eu.c: 656: {
 16300                           ;lorawan_eu.c: 657: loRa.maxRepetitionsUnconfirmedUplink = redundancy->nbRep - 1;
 16301  002B68  D81E               	call	PL262	;call to abstracted procedure
 16302  002B6A  50DF               	movf	223,w,c
 16303  002B6C  0B0F               	andlw	15
 16304  002B6E  6F6F               	movwf	??_ExecuteLinkAdr& (0+255),b
 16305  002B70  056F               	decf	??_ExecuteLinkAdr& (0+255),w,b
 16306  002B72  0102               	movlb	2	; () banked
 16307  002B74  6FD6               	movwf	(_loRa+214)& (0+255),b
 16308  002B76                     l13614:
 16309                           
 16310                           ; BSR set to: 2
 16311                           ;lorawan_eu.c: 658: }
 16312                           ;lorawan_eu.c: 659: loRa.macStatus.nbRepModified = 1;
 16313  002B76  8B03               	bsf	(_loRa+3)& (0+255),5,b
 16314  002B78  D009               	goto	l13618
 16315  002B7A                     l13616:
 16316                           
 16317                           ; BSR set to: 2
 16318                           ;lorawan_eu.c: 662: else
 16319                           ;lorawan_eu.c: 663: {
 16320                           ;lorawan_eu.c: 664: loRa.macCommands[loRa.crtMacCmdIndex].channelMaskAck = 0;
 16321  002B7A  51A7               	movf	(_loRa+167)& (0+255),w,b
 16322  002B7C  D80C               	call	PL2	;call to abstracted procedure
 16323  002B7E  90DF               	bcf	indf2,0,c
 16324                           
 16325                           ;lorawan_eu.c: 665: loRa.macCommands[loRa.crtMacCmdIndex].dataRateAck = 0;
 16326  002B80  51A7               	movf	(_loRa+167)& (0+255),w,b
 16327  002B82  D809               	call	PL2	;call to abstracted procedure
 16328  002B84  92DF               	bcf	indf2,1,c
 16329                           
 16330                           ;lorawan_eu.c: 666: loRa.macCommands[loRa.crtMacCmdIndex].powerAck = 0;
 16331  002B86  51A7               	movf	(_loRa+167)& (0+255),w,b
 16332  002B88  D806               	call	PL2	;call to abstracted procedure
 16333  002B8A  94DF               	bcf	indf2,2,c
 16334  002B8C                     l13618:
 16335                           
 16336                           ; BSR set to: 2
 16337                           ;lorawan_eu.c: 667: }
 16338                           ;lorawan_eu.c: 669: return ptr;
 16339  002B8C  C06D  F06D         	movff	ExecuteLinkAdr@ptr,?_ExecuteLinkAdr
 16340  002B90  C06E  F06E         	movff	ExecuteLinkAdr@ptr+1,?_ExecuteLinkAdr+1
 16341                           
 16342                           ; BSR set to: 2
 16343  002B94  0012               	return		;funcret
 16344  002B96                     __end_of_ExecuteLinkAdr:
 16345                           	opt stack 0
 16346  002B96                     PL2:
 16347                           	opt stack 15
 16348  002B96  0D02               	mullw	2
 16349  002B98  0EA9               	movlw	low (_loRa+169)
 16350  002B9A  24F3               	addwf	prodl,w,c
 16351  002B9C  6ED9               	movwf	fsr2l,c
 16352  002B9E  0E02               	movlw	high (_loRa+169)
 16353  002BA0  20F4               	addwfc	prodh,w,c
 16354  002BA2  6EDA               	movwf	fsr2h,c
 16355  002BA4  0012               	return	
 16356  002BA6                     __end_ofPL2:
 16357                           	opt stack 0
 16358  002BA6                     PL262:
 16359                           	opt stack 15
 16360  002BA6  C073  FFD9         	movff	ExecuteLinkAdr@redundancy,fsr2l
 16361  002BAA  C074  FFDA         	movff	ExecuteLinkAdr@redundancy+1,fsr2h
 16362  002BAE  0012               	return	
 16363  002BB0                     __end_ofPL262:
 16364                           	opt stack 0
 16365  002BB0                     PL320:
 16366                           	opt stack 15
 16367  002BB0  C06D  FFD9         	movff	ExecuteLinkAdr@ptr,fsr2l
 16368  002BB4  C06E  FFDA         	movff	ExecuteLinkAdr@ptr+1,fsr2h
 16369  002BB8  0012               	return	
 16370  002BBA                     __end_ofPL320:
 16371                           	opt stack 0
 16372                           tosu	equ	0xFFF
 16373                           tosh	equ	0xFFE
 16374                           tosl	equ	0xFFD
 16375                           pclath	equ	0xFFA
 16376                           tblptru	equ	0xFF8
 16377                           tblptrh	equ	0xFF7
 16378                           tblptrl	equ	0xFF6
 16379                           tablat	equ	0xFF5
 16380                           prodh	equ	0xFF4
 16381                           prodl	equ	0xFF3
 16382                           intcon	equ	0xFF2
 16383                           indf0	equ	0xFEF
 16384                           postinc0	equ	0xFEE
 16385                           plusw0	equ	0xFEB
 16386                           fsr0h	equ	0xFEA
 16387                           fsr0l	equ	0xFE9
 16388                           wreg	equ	0xFE8
 16389                           postinc1	equ	0xFE6
 16390                           postdec1	equ	0xFE5
 16391                           plusw1	equ	0xFE3
 16392                           fsr1h	equ	0xFE2
 16393                           fsr1l	equ	0xFE1
 16394                           indf2	equ	0xFDF
 16395                           postinc2	equ	0xFDE
 16396                           postdec2	equ	0xFDD
 16397                           plusw2	equ	0xFDB
 16398                           fsr2h	equ	0xFDA
 16399                           fsr2l	equ	0xFD9
 16400                           status	equ	0xFD8
 16401                           
 16402 ;; *************** function _ValidateTxPower *****************
 16403 ;; Defined at:
 16404 ;;		line 582 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16405 ;; Parameters:    Size  Location     Type
 16406 ;;  txPowerNew      1    wreg     unsigned char 
 16407 ;; Auto vars:     Size  Location     Type
 16408 ;;  txPowerNew      1    1[BANK0 ] unsigned char 
 16409 ;;  result          1    0[BANK0 ] enum E17413
 16410 ;; Return value:  Size  Location     Type
 16411 ;;                  1    wreg      enum E17354
 16412 ;; Registers used:
 16413 ;;		wreg, status,2, status,0
 16414 ;; Tracked objects:
 16415 ;;		On entry : 3F/0
 16416 ;;		On exit  : 3F/0
 16417 ;;		Unchanged: 0/0
 16418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16419 ;;      Params:         0       0       0       0       0       0       0       0       0
 16420 ;;      Locals:         0       2       0       0       0       0       0       0       0
 16421 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16422 ;;      Totals:         0       2       0       0       0       0       0       0       0
 16423 ;;Total ram usage:        2 bytes
 16424 ;; Hardware stack levels used:    1
 16425 ;; Hardware stack levels required when called:    7
 16426 ;; This function calls:
 16427 ;;		Nothing
 16428 ;; This function is called by:
 16429 ;;		_ExecuteLinkAdr
 16430 ;; This function uses a non-reentrant model
 16431 ;;
 16432                           
 16433                           	psect	text81
 16434  005D5C                     __ptext81:
 16435                           	opt stack 0
 16436  005D5C                     _ValidateTxPower:
 16437                           	opt stack 17
 16438                           
 16439                           ; BSR set to: 2
 16440                           ;incstack = 0
 16441                           ;ValidateTxPower@txPowerNew stored from wreg
 16442  005D5C  6F61               	movwf	ValidateTxPower@txPowerNew& (0+255),b
 16443                           
 16444                           ;lorawan_eu.c: 584: LorawanError_t result = OK;
 16445  005D5E  0100               	movlb	0	; () banked
 16446  005D60  6B60               	clrf	ValidateTxPower@result& (0+255),b
 16447                           
 16448                           ; BSR set to: 0
 16449                           ;lorawan_eu.c: 586: if (((ISM_EU868 == loRa.ismBand) && (0 == txPowerNew)) || (txPowerNe
      +                          w > 5))
 16450  005D62  0102               	movlb	2	; () banked
 16451  005D64  51A4               	movf	(_loRa+164)& (0+255),w,b
 16452  005D66  E103               	bnz	l12730
 16453                           
 16454                           ; BSR set to: 2
 16455  005D68  0100               	movlb	0	; () banked
 16456  005D6A  5161               	movf	ValidateTxPower@txPowerNew& (0+255),w,b
 16457  005D6C  E004               	bz	l12732
 16458  005D6E                     l12730:
 16459  005D6E  0E05               	movlw	5
 16460  005D70  0100               	movlb	0	; () banked
 16461  005D72  6561               	cpfsgt	ValidateTxPower@txPowerNew& (0+255),b
 16462  005D74  D002               	goto	l1722
 16463  005D76                     l12732:
 16464                           
 16465                           ; BSR set to: 0
 16466                           ;lorawan_eu.c: 587: {
 16467                           ;lorawan_eu.c: 588: result = INVALID_PARAMETER;
 16468  005D76  0E03               	movlw	3
 16469  005D78  6F60               	movwf	ValidateTxPower@result& (0+255),b
 16470  005D7A                     l1722:
 16471                           
 16472                           ; BSR set to: 0
 16473                           ;lorawan_eu.c: 589: }
 16474                           ;lorawan_eu.c: 591: return result;
 16475  005D7A  5160               	movf	ValidateTxPower@result& (0+255),w,b
 16476                           
 16477                           ; BSR set to: 0
 16478  005D7C  0012               	return		;funcret
 16479  005D7E                     __end_of_ValidateTxPower:
 16480                           	opt stack 0
 16481                           tosu	equ	0xFFF
 16482                           tosh	equ	0xFFE
 16483                           tosl	equ	0xFFD
 16484                           pclath	equ	0xFFA
 16485                           tblptru	equ	0xFF8
 16486                           tblptrh	equ	0xFF7
 16487                           tblptrl	equ	0xFF6
 16488                           tablat	equ	0xFF5
 16489                           prodh	equ	0xFF4
 16490                           prodl	equ	0xFF3
 16491                           intcon	equ	0xFF2
 16492                           indf0	equ	0xFEF
 16493                           postinc0	equ	0xFEE
 16494                           plusw0	equ	0xFEB
 16495                           fsr0h	equ	0xFEA
 16496                           fsr0l	equ	0xFE9
 16497                           wreg	equ	0xFE8
 16498                           postinc1	equ	0xFE6
 16499                           postdec1	equ	0xFE5
 16500                           plusw1	equ	0xFE3
 16501                           fsr1h	equ	0xFE2
 16502                           fsr1l	equ	0xFE1
 16503                           indf2	equ	0xFDF
 16504                           postinc2	equ	0xFDE
 16505                           postdec2	equ	0xFDD
 16506                           plusw2	equ	0xFDB
 16507                           fsr2h	equ	0xFDA
 16508                           fsr2l	equ	0xFD9
 16509                           status	equ	0xFD8
 16510                           
 16511 ;; *************** function _ValidateDataRate *****************
 16512 ;; Defined at:
 16513 ;;		line 570 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16514 ;; Parameters:    Size  Location     Type
 16515 ;;  dataRate        1    wreg     unsigned char 
 16516 ;; Auto vars:     Size  Location     Type
 16517 ;;  dataRate        1    0[BANK0 ] unsigned char 
 16518 ;;  result          1    1[BANK0 ] enum E17413
 16519 ;; Return value:  Size  Location     Type
 16520 ;;                  1    wreg      enum E17354
 16521 ;; Registers used:
 16522 ;;		wreg, status,2, status,0
 16523 ;; Tracked objects:
 16524 ;;		On entry : 3F/0
 16525 ;;		On exit  : 3F/0
 16526 ;;		Unchanged: 0/0
 16527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16528 ;;      Params:         0       0       0       0       0       0       0       0       0
 16529 ;;      Locals:         0       2       0       0       0       0       0       0       0
 16530 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16531 ;;      Totals:         0       2       0       0       0       0       0       0       0
 16532 ;;Total ram usage:        2 bytes
 16533 ;; Hardware stack levels used:    1
 16534 ;; Hardware stack levels required when called:    7
 16535 ;; This function calls:
 16536 ;;		Nothing
 16537 ;; This function is called by:
 16538 ;;		_ExecuteLinkAdr
 16539 ;;		_ExecuteRxParamSetupReq
 16540 ;;		_ValidateDataRange
 16541 ;; This function uses a non-reentrant model
 16542 ;;
 16543                           
 16544                           	psect	text82
 16545  00606C                     __ptext82:
 16546                           	opt stack 0
 16547  00606C                     _ValidateDataRate:
 16548                           	opt stack 17
 16549                           
 16550                           ; BSR set to: 0
 16551                           ;incstack = 0
 16552                           ;ValidateDataRate@dataRate stored from wreg
 16553  00606C  6F60               	movwf	ValidateDataRate@dataRate& (0+255),b
 16554                           
 16555                           ;lorawan_eu.c: 572: LorawanError_t result = OK;
 16556  00606E  0100               	movlb	0	; () banked
 16557  006070  6B61               	clrf	ValidateDataRate@result& (0+255),b
 16558                           
 16559                           ; BSR set to: 0
 16560                           ;lorawan_eu.c: 574: if ( dataRate > 7 )
 16561  006072  0E07               	movlw	7
 16562  006074  6560               	cpfsgt	ValidateDataRate@dataRate& (0+255),b
 16563  006076  D002               	goto	l1718
 16564                           
 16565                           ; BSR set to: 0
 16566                           ;lorawan_eu.c: 575: {
 16567                           ;lorawan_eu.c: 576: result = INVALID_PARAMETER;
 16568  006078  0E03               	movlw	3
 16569  00607A  6F61               	movwf	ValidateDataRate@result& (0+255),b
 16570  00607C                     l1718:
 16571                           
 16572                           ; BSR set to: 0
 16573                           ;lorawan_eu.c: 577: }
 16574                           ;lorawan_eu.c: 579: return result;
 16575  00607C  5161               	movf	ValidateDataRate@result& (0+255),w,b
 16576                           
 16577                           ; BSR set to: 0
 16578  00607E  0012               	return		;funcret
 16579  006080                     __end_of_ValidateDataRate:
 16580                           	opt stack 0
 16581                           tosu	equ	0xFFF
 16582                           tosh	equ	0xFFE
 16583                           tosl	equ	0xFFD
 16584                           pclath	equ	0xFFA
 16585                           tblptru	equ	0xFF8
 16586                           tblptrh	equ	0xFF7
 16587                           tblptrl	equ	0xFF6
 16588                           tablat	equ	0xFF5
 16589                           prodh	equ	0xFF4
 16590                           prodl	equ	0xFF3
 16591                           intcon	equ	0xFF2
 16592                           indf0	equ	0xFEF
 16593                           postinc0	equ	0xFEE
 16594                           plusw0	equ	0xFEB
 16595                           fsr0h	equ	0xFEA
 16596                           fsr0l	equ	0xFE9
 16597                           wreg	equ	0xFE8
 16598                           postinc1	equ	0xFE6
 16599                           postdec1	equ	0xFE5
 16600                           plusw1	equ	0xFE3
 16601                           fsr1h	equ	0xFE2
 16602                           fsr1l	equ	0xFE1
 16603                           indf2	equ	0xFDF
 16604                           postinc2	equ	0xFDE
 16605                           postdec2	equ	0xFDD
 16606                           plusw2	equ	0xFDB
 16607                           fsr2h	equ	0xFDA
 16608                           fsr2l	equ	0xFD9
 16609                           status	equ	0xFD8
 16610                           
 16611 ;; *************** function _ValidateChannelMaskCntl *****************
 16612 ;; Defined at:
 16613 ;;		line 1137 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16614 ;; Parameters:    Size  Location     Type
 16615 ;;  channelMaskC    1    wreg     unsigned char 
 16616 ;; Auto vars:     Size  Location     Type
 16617 ;;  channelMaskC    1    1[BANK0 ] unsigned char 
 16618 ;;  result          1    0[BANK0 ] enum E17413
 16619 ;; Return value:  Size  Location     Type
 16620 ;;                  1    wreg      enum E17413
 16621 ;; Registers used:
 16622 ;;		wreg, status,2, status,0
 16623 ;; Tracked objects:
 16624 ;;		On entry : 3F/0
 16625 ;;		On exit  : 3F/0
 16626 ;;		Unchanged: 0/0
 16627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16628 ;;      Params:         0       0       0       0       0       0       0       0       0
 16629 ;;      Locals:         0       2       0       0       0       0       0       0       0
 16630 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16631 ;;      Totals:         0       2       0       0       0       0       0       0       0
 16632 ;;Total ram usage:        2 bytes
 16633 ;; Hardware stack levels used:    1
 16634 ;; Hardware stack levels required when called:    7
 16635 ;; This function calls:
 16636 ;;		Nothing
 16637 ;; This function is called by:
 16638 ;;		_ExecuteLinkAdr
 16639 ;; This function uses a non-reentrant model
 16640 ;;
 16641                           
 16642                           	psect	text83
 16643  005FA0                     __ptext83:
 16644                           	opt stack 0
 16645  005FA0                     _ValidateChannelMaskCntl:
 16646                           	opt stack 17
 16647                           
 16648                           ; BSR set to: 0
 16649                           ;incstack = 0
 16650                           ;ValidateChannelMaskCntl@channelMaskCntl stored from wreg
 16651  005FA0  6F61               	movwf	ValidateChannelMaskCntl@channelMaskCntl& (0+255),b
 16652                           
 16653                           ;lorawan_eu.c: 1139: LorawanError_t result = OK;
 16654  005FA2  0100               	movlb	0	; () banked
 16655  005FA4  6B60               	clrf	ValidateChannelMaskCntl@result& (0+255),b
 16656                           
 16657                           ; BSR set to: 0
 16658                           ;lorawan_eu.c: 1141: if ( (channelMaskCntl != 0) && (channelMaskCntl != 6) )
 16659  005FA6  5161               	movf	ValidateChannelMaskCntl@channelMaskCntl& (0+255),w,b
 16660  005FA8  E005               	bz	l1889
 16661                           
 16662                           ; BSR set to: 0
 16663  005FAA  0E06               	movlw	6
 16664  005FAC  1961               	xorwf	ValidateChannelMaskCntl@channelMaskCntl& (0+255),w,b
 16665  005FAE  E002               	bz	l1889
 16666                           
 16667                           ; BSR set to: 0
 16668                           ;lorawan_eu.c: 1142: {
 16669                           ;lorawan_eu.c: 1143: result = INVALID_PARAMETER;
 16670  005FB0  0E03               	movlw	3
 16671  005FB2  6F60               	movwf	ValidateChannelMaskCntl@result& (0+255),b
 16672  005FB4                     l1889:
 16673                           
 16674                           ; BSR set to: 0
 16675                           ;lorawan_eu.c: 1144: }
 16676                           ;lorawan_eu.c: 1146: return result;
 16677  005FB4  5160               	movf	ValidateChannelMaskCntl@result& (0+255),w,b
 16678                           
 16679                           ; BSR set to: 0
 16680  005FB6  0012               	return		;funcret
 16681  005FB8                     __end_of_ValidateChannelMaskCntl:
 16682                           	opt stack 0
 16683                           tosu	equ	0xFFF
 16684                           tosh	equ	0xFFE
 16685                           tosl	equ	0xFFD
 16686                           pclath	equ	0xFFA
 16687                           tblptru	equ	0xFF8
 16688                           tblptrh	equ	0xFF7
 16689                           tblptrl	equ	0xFF6
 16690                           tablat	equ	0xFF5
 16691                           prodh	equ	0xFF4
 16692                           prodl	equ	0xFF3
 16693                           intcon	equ	0xFF2
 16694                           indf0	equ	0xFEF
 16695                           postinc0	equ	0xFEE
 16696                           plusw0	equ	0xFEB
 16697                           fsr0h	equ	0xFEA
 16698                           fsr0l	equ	0xFE9
 16699                           wreg	equ	0xFE8
 16700                           postinc1	equ	0xFE6
 16701                           postdec1	equ	0xFE5
 16702                           plusw1	equ	0xFE3
 16703                           fsr1h	equ	0xFE2
 16704                           fsr1l	equ	0xFE1
 16705                           indf2	equ	0xFDF
 16706                           postinc2	equ	0xFDE
 16707                           postdec2	equ	0xFDD
 16708                           plusw2	equ	0xFDB
 16709                           fsr2h	equ	0xFDA
 16710                           fsr2l	equ	0xFD9
 16711                           status	equ	0xFD8
 16712                           
 16713 ;; *************** function _ValidateChannelMask *****************
 16714 ;; Defined at:
 16715 ;;		line 1166 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16716 ;; Parameters:    Size  Location     Type
 16717 ;;  channelMask     2    0[BANK0 ] unsigned int 
 16718 ;; Auto vars:     Size  Location     Type
 16719 ;;  i               1    2[BANK0 ] unsigned char 
 16720 ;; Return value:  Size  Location     Type
 16721 ;;                  1    wreg      enum E17413
 16722 ;; Registers used:
 16723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16724 ;; Tracked objects:
 16725 ;;		On entry : 3F/0
 16726 ;;		On exit  : 3F/0
 16727 ;;		Unchanged: 0/0
 16728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16729 ;;      Params:         0       2       0       0       0       0       0       0       0
 16730 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16731 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16732 ;;      Totals:         0       3       0       0       0       0       0       0       0
 16733 ;;Total ram usage:        3 bytes
 16734 ;; Hardware stack levels used:    1
 16735 ;; Hardware stack levels required when called:    7
 16736 ;; This function calls:
 16737 ;;		Nothing
 16738 ;; This function is called by:
 16739 ;;		_ExecuteLinkAdr
 16740 ;; This function uses a non-reentrant model
 16741 ;;
 16742                           
 16743                           	psect	text84
 16744  005A50                     __ptext84:
 16745                           	opt stack 0
 16746  005A50                     _ValidateChannelMask:
 16747                           	opt stack 17
 16748                           
 16749                           ; BSR set to: 0
 16750                           ;lorawan_eu.c: 1170: if(channelMask != 0x0000U)
 16751                           
 16752                           ; BSR set to: 0
 16753                           
 16754                           ; BSR set to: 0
 16755                           ;incstack = 0
 16756  005A50  5160               	movf	ValidateChannelMask@channelMask& (0+255),w,b
 16757  005A52  1161               	iorwf	(ValidateChannelMask@channelMask+1)& (0+255),w,b
 16758  005A54  B4D8               	btfsc	status,2,c
 16759  005A56  0C03               	retlw	3
 16760                           
 16761                           ; BSR set to: 0
 16762                           ;lorawan_eu.c: 1171: {
 16763                           ;lorawan_eu.c: 1172: for (i = 0; i < 16; i++)
 16764  005A58  6B62               	clrf	ValidateChannelMask@i& (0+255),b
 16765  005A5A                     l1903:
 16766                           
 16767                           ; BSR set to: 0
 16768                           ;lorawan_eu.c: 1173: {
 16769                           ;lorawan_eu.c: 1174: if ( ( (channelMask & (1 << (0))) == (1 << (0))) && ( (Channels[i].
      +                          parametersDefined & (0X01 | 0X02 | 0x04) ) != (0X01 | 0X02 | 0x04) ) )
 16770  005A5A  A160               	btfss	ValidateChannelMask@channelMask& (0+255),0,b
 16771  005A5C  D008               	goto	l13264
 16772                           
 16773                           ; BSR set to: 0
 16774  005A5E  5162               	movf	ValidateChannelMask@i& (0+255),w,b
 16775  005A60  EC7A  F02D         	call	PL68	;call to abstracted procedure
 16776  005A64  50DF               	movf	indf2,w,c
 16777  005A66  0B07               	andlw	7
 16778  005A68  0A07               	xorlw	7
 16779  005A6A  E001               	bz	l13264
 16780                           
 16781                           ; BSR set to: 0
 16782                           ;lorawan_eu.c: 1175: {
 16783                           ;lorawan_eu.c: 1176: return INVALID_PARAMETER;
 16784  005A6C  0C03               	retlw	3
 16785  005A6E                     l13264:
 16786                           
 16787                           ; BSR set to: 0
 16788                           ;lorawan_eu.c: 1178: else
 16789                           ;lorawan_eu.c: 1179: {
 16790                           ;lorawan_eu.c: 1180: channelMask = channelMask >> (1);
 16791  005A6E  90D8               	bcf	status,0,c
 16792  005A70  3361               	rrcf	(ValidateChannelMask@channelMask+1)& (0+255),f,b
 16793  005A72  3360               	rrcf	ValidateChannelMask@channelMask& (0+255),f,b
 16794                           
 16795                           ; BSR set to: 0
 16796  005A74  2B62               	incf	ValidateChannelMask@i& (0+255),f,b
 16797                           
 16798                           ; BSR set to: 0
 16799  005A76  0E0F               	movlw	15
 16800  005A78  6562               	cpfsgt	ValidateChannelMask@i& (0+255),b
 16801  005A7A  D7EF               	goto	l1903
 16802  005A7C  0C00               	retlw	0
 16803  005A7E                     __end_of_ValidateChannelMask:
 16804                           	opt stack 0
 16805                           tosu	equ	0xFFF
 16806                           tosh	equ	0xFFE
 16807                           tosl	equ	0xFFD
 16808                           pclath	equ	0xFFA
 16809                           tblptru	equ	0xFF8
 16810                           tblptrh	equ	0xFF7
 16811                           tblptrl	equ	0xFF6
 16812                           tablat	equ	0xFF5
 16813                           prodh	equ	0xFF4
 16814                           prodl	equ	0xFF3
 16815                           intcon	equ	0xFF2
 16816                           indf0	equ	0xFEF
 16817                           postinc0	equ	0xFEE
 16818                           plusw0	equ	0xFEB
 16819                           fsr0h	equ	0xFEA
 16820                           fsr0l	equ	0xFE9
 16821                           wreg	equ	0xFE8
 16822                           postinc1	equ	0xFE6
 16823                           postdec1	equ	0xFE5
 16824                           plusw1	equ	0xFE3
 16825                           fsr1h	equ	0xFE2
 16826                           fsr1l	equ	0xFE1
 16827                           indf2	equ	0xFDF
 16828                           postinc2	equ	0xFDE
 16829                           postdec2	equ	0xFDD
 16830                           plusw2	equ	0xFDB
 16831                           fsr2h	equ	0xFDA
 16832                           fsr2l	equ	0xFD9
 16833                           status	equ	0xFD8
 16834                           
 16835 ;; *************** function _UpdateTxPower *****************
 16836 ;; Defined at:
 16837 ;;		line 1029 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 16838 ;; Parameters:    Size  Location     Type
 16839 ;;  txPowerNew      1    wreg     unsigned char 
 16840 ;; Auto vars:     Size  Location     Type
 16841 ;;  txPowerNew      1    0[BANK0 ] unsigned char 
 16842 ;; Return value:  Size  Location     Type
 16843 ;;                  1    wreg      void 
 16844 ;; Registers used:
 16845 ;;		wreg
 16846 ;; Tracked objects:
 16847 ;;		On entry : 3F/0
 16848 ;;		On exit  : 0/0
 16849 ;;		Unchanged: 0/0
 16850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16851 ;;      Params:         0       0       0       0       0       0       0       0       0
 16852 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16853 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16854 ;;      Totals:         0       1       0       0       0       0       0       0       0
 16855 ;;Total ram usage:        1 bytes
 16856 ;; Hardware stack levels used:    1
 16857 ;; Hardware stack levels required when called:    7
 16858 ;; This function calls:
 16859 ;;		Nothing
 16860 ;; This function is called by:
 16861 ;;		_ExecuteLinkAdr
 16862 ;; This function uses a non-reentrant model
 16863 ;;
 16864                           
 16865                           	psect	text85
 16866  0061C4                     __ptext85:
 16867                           	opt stack 0
 16868  0061C4                     _UpdateTxPower:
 16869                           	opt stack 17
 16870                           
 16871                           ; BSR set to: 0
 16872                           ;incstack = 0
 16873                           ;UpdateTxPower@txPowerNew stored from wreg
 16874  0061C4  6F60               	movwf	UpdateTxPower@txPowerNew& (0+255),b
 16875                           
 16876                           ;lorawan.c: 1031: loRa.txPower = txPowerNew;
 16877  0061C6  C060  F2E1         	movff	UpdateTxPower@txPowerNew,_loRa+225
 16878  0061CA  0012               	return		;funcret
 16879  0061CC                     __end_of_UpdateTxPower:
 16880                           	opt stack 0
 16881                           tosu	equ	0xFFF
 16882                           tosh	equ	0xFFE
 16883                           tosl	equ	0xFFD
 16884                           pclath	equ	0xFFA
 16885                           tblptru	equ	0xFF8
 16886                           tblptrh	equ	0xFF7
 16887                           tblptrl	equ	0xFF6
 16888                           tablat	equ	0xFF5
 16889                           prodh	equ	0xFF4
 16890                           prodl	equ	0xFF3
 16891                           intcon	equ	0xFF2
 16892                           indf0	equ	0xFEF
 16893                           postinc0	equ	0xFEE
 16894                           plusw0	equ	0xFEB
 16895                           fsr0h	equ	0xFEA
 16896                           fsr0l	equ	0xFE9
 16897                           wreg	equ	0xFE8
 16898                           postinc1	equ	0xFE6
 16899                           postdec1	equ	0xFE5
 16900                           plusw1	equ	0xFE3
 16901                           fsr1h	equ	0xFE2
 16902                           fsr1l	equ	0xFE1
 16903                           indf2	equ	0xFDF
 16904                           postinc2	equ	0xFDE
 16905                           postdec2	equ	0xFDD
 16906                           plusw2	equ	0xFDB
 16907                           fsr2h	equ	0xFDA
 16908                           fsr2l	equ	0xFD9
 16909                           status	equ	0xFD8
 16910                           
 16911 ;; *************** function _UpdateCurrentDataRate *****************
 16912 ;; Defined at:
 16913 ;;		line 1024 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 16914 ;; Parameters:    Size  Location     Type
 16915 ;;  valueNew        1    wreg     unsigned char 
 16916 ;; Auto vars:     Size  Location     Type
 16917 ;;  valueNew        1    0[BANK0 ] unsigned char 
 16918 ;; Return value:  Size  Location     Type
 16919 ;;                  1    wreg      void 
 16920 ;; Registers used:
 16921 ;;		wreg
 16922 ;; Tracked objects:
 16923 ;;		On entry : 3F/0
 16924 ;;		On exit  : 0/0
 16925 ;;		Unchanged: 0/0
 16926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16927 ;;      Params:         0       0       0       0       0       0       0       0       0
 16928 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16929 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16930 ;;      Totals:         0       1       0       0       0       0       0       0       0
 16931 ;;Total ram usage:        1 bytes
 16932 ;; Hardware stack levels used:    1
 16933 ;; Hardware stack levels required when called:    7
 16934 ;; This function calls:
 16935 ;;		Nothing
 16936 ;; This function is called by:
 16937 ;;		_ExecuteLinkAdr
 16938 ;; This function uses a non-reentrant model
 16939 ;;
 16940                           
 16941                           	psect	text86
 16942  0061CC                     __ptext86:
 16943                           	opt stack 0
 16944  0061CC                     _UpdateCurrentDataRate:
 16945                           	opt stack 17
 16946                           
 16947                           ;incstack = 0
 16948                           ;UpdateCurrentDataRate@valueNew stored from wreg
 16949  0061CC  6F60               	movwf	UpdateCurrentDataRate@valueNew& (0+255),b
 16950                           
 16951                           ;lorawan.c: 1026: loRa.currentDataRate = valueNew;
 16952  0061CE  C060  F2DF         	movff	UpdateCurrentDataRate@valueNew,_loRa+223
 16953  0061D2  0012               	return		;funcret
 16954  0061D4                     __end_of_UpdateCurrentDataRate:
 16955                           	opt stack 0
 16956                           tosu	equ	0xFFF
 16957                           tosh	equ	0xFFE
 16958                           tosl	equ	0xFFD
 16959                           pclath	equ	0xFFA
 16960                           tblptru	equ	0xFF8
 16961                           tblptrh	equ	0xFF7
 16962                           tblptrl	equ	0xFF6
 16963                           tablat	equ	0xFF5
 16964                           prodh	equ	0xFF4
 16965                           prodl	equ	0xFF3
 16966                           intcon	equ	0xFF2
 16967                           indf0	equ	0xFEF
 16968                           postinc0	equ	0xFEE
 16969                           plusw0	equ	0xFEB
 16970                           fsr0h	equ	0xFEA
 16971                           fsr0l	equ	0xFE9
 16972                           wreg	equ	0xFE8
 16973                           postinc1	equ	0xFE6
 16974                           postdec1	equ	0xFE5
 16975                           plusw1	equ	0xFE3
 16976                           fsr1h	equ	0xFE2
 16977                           fsr1l	equ	0xFE1
 16978                           indf2	equ	0xFDF
 16979                           postinc2	equ	0xFDE
 16980                           postdec2	equ	0xFDD
 16981                           plusw2	equ	0xFDB
 16982                           fsr2h	equ	0xFDA
 16983                           fsr2l	equ	0xFD9
 16984                           status	equ	0xFD8
 16985                           
 16986 ;; *************** function _EnableChannels *****************
 16987 ;; Defined at:
 16988 ;;		line 1149 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16989 ;; Parameters:    Size  Location     Type
 16990 ;;  channelMask     2   10[BANK0 ] unsigned int 
 16991 ;;  channelMaskC    1   12[BANK0 ] unsigned char 
 16992 ;; Auto vars:     Size  Location     Type
 16993 ;;		None
 16994 ;; Return value:  Size  Location     Type
 16995 ;;                  1    wreg      void 
 16996 ;; Registers used:
 16997 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16998 ;; Tracked objects:
 16999 ;;		On entry : 3F/0
 17000 ;;		On exit  : 3F/0
 17001 ;;		Unchanged: 0/0
 17002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17003 ;;      Params:         0       3       0       0       0       0       0       0       0
 17004 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17005 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17006 ;;      Totals:         0       3       0       0       0       0       0       0       0
 17007 ;;Total ram usage:        3 bytes
 17008 ;; Hardware stack levels used:    1
 17009 ;; Hardware stack levels required when called:    9
 17010 ;; This function calls:
 17011 ;;		_EnableChannels1
 17012 ;; This function is called by:
 17013 ;;		_ExecuteLinkAdr
 17014 ;; This function uses a non-reentrant model
 17015 ;;
 17016                           
 17017                           	psect	text87
 17018  00602C                     __ptext87:
 17019                           	opt stack 0
 17020  00602C                     _EnableChannels:
 17021                           	opt stack 15
 17022                           
 17023                           ; BSR set to: 0
 17024                           ;lorawan_eu.c: 1151: EnableChannels1 (channelMask, channelMaskCntl, 0, 16);
 17025                           
 17026                           ;incstack = 0
 17027  00602C  C06A  F064         	movff	EnableChannels@channelMask,EnableChannels1@channelMask
 17028  006030  C06B  F065         	movff	EnableChannels@channelMask+1,EnableChannels1@channelMask+1
 17029  006034  C06C  F066         	movff	EnableChannels@channelMaskCntl,EnableChannels1@channelMaskCntl
 17030  006038  6B67               	clrf	EnableChannels1@channelIndexMin& (0+255),b
 17031  00603A  0E10               	movlw	16
 17032  00603C  6F68               	movwf	EnableChannels1@channelIndexMax& (0+255),b
 17033  00603E  EF11  F028         	goto	_EnableChannels1	;wreg free
 17034  006042                     __end_of_EnableChannels:
 17035                           	opt stack 0
 17036                           tosu	equ	0xFFF
 17037                           tosh	equ	0xFFE
 17038                           tosl	equ	0xFFD
 17039                           pclath	equ	0xFFA
 17040                           tblptru	equ	0xFF8
 17041                           tblptrh	equ	0xFF7
 17042                           tblptrl	equ	0xFF6
 17043                           tablat	equ	0xFF5
 17044                           prodh	equ	0xFF4
 17045                           prodl	equ	0xFF3
 17046                           intcon	equ	0xFF2
 17047                           indf0	equ	0xFEF
 17048                           postinc0	equ	0xFEE
 17049                           plusw0	equ	0xFEB
 17050                           fsr0h	equ	0xFEA
 17051                           fsr0l	equ	0xFE9
 17052                           wreg	equ	0xFE8
 17053                           postinc1	equ	0xFE6
 17054                           postdec1	equ	0xFE5
 17055                           plusw1	equ	0xFE3
 17056                           fsr1h	equ	0xFE2
 17057                           fsr1l	equ	0xFE1
 17058                           indf2	equ	0xFDF
 17059                           postinc2	equ	0xFDE
 17060                           postdec2	equ	0xFDD
 17061                           plusw2	equ	0xFDB
 17062                           fsr2h	equ	0xFDA
 17063                           fsr2l	equ	0xFD9
 17064                           status	equ	0xFD8
 17065                           
 17066 ;; *************** function _EnableChannels1 *****************
 17067 ;; Defined at:
 17068 ;;		line 1193 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 17069 ;; Parameters:    Size  Location     Type
 17070 ;;  channelMask     2    4[BANK0 ] unsigned int 
 17071 ;;  channelMaskC    1    6[BANK0 ] unsigned char 
 17072 ;;  channelIndex    1    7[BANK0 ] unsigned char 
 17073 ;;  channelIndex    1    8[BANK0 ] unsigned char 
 17074 ;; Auto vars:     Size  Location     Type
 17075 ;;  i               1    9[BANK0 ] unsigned char 
 17076 ;; Return value:  Size  Location     Type
 17077 ;;                  1    wreg      void 
 17078 ;; Registers used:
 17079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17080 ;; Tracked objects:
 17081 ;;		On entry : 3F/0
 17082 ;;		On exit  : 3F/0
 17083 ;;		Unchanged: 0/0
 17084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17085 ;;      Params:         0       5       0       0       0       0       0       0       0
 17086 ;;      Locals:         0       1       0       0       0       0       0       0       0
 17087 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17088 ;;      Totals:         0       6       0       0       0       0       0       0       0
 17089 ;;Total ram usage:        6 bytes
 17090 ;; Hardware stack levels used:    1
 17091 ;; Hardware stack levels required when called:    8
 17092 ;; This function calls:
 17093 ;;		_UpdateChannelIdStatus
 17094 ;; This function is called by:
 17095 ;;		_EnableChannels
 17096 ;; This function uses a non-reentrant model
 17097 ;;
 17098                           
 17099                           	psect	text88
 17100  005022                     __ptext88:
 17101                           	opt stack 0
 17102  005022                     _EnableChannels1:
 17103                           	opt stack 15
 17104                           
 17105                           ; BSR set to: 0
 17106                           ;lorawan_eu.c: 1195: uint8_t i;
 17107                           ;lorawan_eu.c: 1197: if (channelMaskCntl == 6)
 17108                           
 17109                           ; BSR set to: 0
 17110                           ;incstack = 0
 17111  005022  0E06               	movlw	6
 17112  005024  1966               	xorwf	EnableChannels1@channelMaskCntl& (0+255),w,b
 17113  005026  E10C               	bnz	l12540
 17114                           
 17115                           ; BSR set to: 0
 17116                           ;lorawan_eu.c: 1198: {
 17117                           ;lorawan_eu.c: 1199: for ( i = channelIndexMin; i < channelIndexMax; i++ )
 17118  005028  C067  F069         	movff	EnableChannels1@channelIndexMin,EnableChannels1@i
 17119  00502C  D005               	goto	l12538
 17120  00502E                     l12534:
 17121                           
 17122                           ; BSR set to: 0
 17123                           ;lorawan_eu.c: 1200: {
 17124                           ;lorawan_eu.c: 1201: UpdateChannelIdStatus (i, 1);
 17125  00502E  D821               	call	PL446	;call to abstracted procedure
 17126  005030  EC57  F01D         	call	_UpdateChannelIdStatus
 17127                           
 17128                           ; BSR set to: 2
 17129  005034  0100               	movlb	0	; () banked
 17130  005036  2B69               	incf	EnableChannels1@i& (0+255),f,b
 17131  005038                     l12538:
 17132                           
 17133                           ; BSR set to: 0
 17134  005038  5168               	movf	EnableChannels1@channelIndexMax& (0+255),w,b
 17135  00503A  5D69               	subwf	EnableChannels1@i& (0+255),w,b
 17136  00503C  E3F8               	bnc	l12534
 17137  00503E  0012               	return	
 17138  005040                     l12540:
 17139                           
 17140                           ; BSR set to: 0
 17141                           ;lorawan_eu.c: 1204: else if (channelMaskCntl == 0)
 17142  005040  5166               	movf	EnableChannels1@channelMaskCntl& (0+255),w,b
 17143  005042  A4D8               	btfss	status,2,c
 17144  005044  0012               	return	
 17145                           
 17146                           ; BSR set to: 0
 17147                           ;lorawan_eu.c: 1205: {
 17148                           ;lorawan_eu.c: 1206: for ( i = channelIndexMin; i < channelIndexMax; i++ )
 17149  005046  C067  F069         	movff	EnableChannels1@channelIndexMin,EnableChannels1@i
 17150  00504A  D00F               	goto	l12552
 17151  00504C                     l1918:
 17152                           
 17153                           ; BSR set to: 0
 17154                           ;lorawan_eu.c: 1207: {
 17155                           ;lorawan_eu.c: 1208: if ( channelMask & (1 << (0)) == (1 << (0)))
 17156  00504C  A164               	btfss	EnableChannels1@channelMask& (0+255),0,b
 17157  00504E  D004               	goto	l12546
 17158                           
 17159                           ; BSR set to: 0
 17160                           ;lorawan_eu.c: 1209: {
 17161                           ;lorawan_eu.c: 1210: UpdateChannelIdStatus (i, 1);
 17162  005050  D810               	call	PL446	;call to abstracted procedure
 17163  005052  EC57  F01D         	call	_UpdateChannelIdStatus
 17164                           
 17165                           ;lorawan_eu.c: 1211: }
 17166  005056  D004               	goto	l12548
 17167  005058                     l12546:
 17168                           
 17169                           ; BSR set to: 0
 17170                           ;lorawan_eu.c: 1212: else
 17171                           ;lorawan_eu.c: 1213: {
 17172                           ;lorawan_eu.c: 1214: UpdateChannelIdStatus (i, 0);
 17173  005058  6B60               	clrf	UpdateChannelIdStatus@statusNew& (0+255),b
 17174  00505A  5169               	movf	EnableChannels1@i& (0+255),w,b
 17175  00505C  EC57  F01D         	call	_UpdateChannelIdStatus
 17176  005060                     l12548:
 17177                           
 17178                           ; BSR set to: 2
 17179                           ;lorawan_eu.c: 1215: }
 17180                           ;lorawan_eu.c: 1216: channelMask = channelMask >> (1);
 17181  005060  0100               	movlb	0	; () banked
 17182  005062  90D8               	bcf	status,0,c
 17183  005064  3365               	rrcf	(EnableChannels1@channelMask+1)& (0+255),f,b
 17184  005066  3364               	rrcf	EnableChannels1@channelMask& (0+255),f,b
 17185                           
 17186                           ; BSR set to: 0
 17187  005068  2B69               	incf	EnableChannels1@i& (0+255),f,b
 17188  00506A                     l12552:
 17189                           
 17190                           ; BSR set to: 0
 17191  00506A  5168               	movf	EnableChannels1@channelIndexMax& (0+255),w,b
 17192  00506C  5D69               	subwf	EnableChannels1@i& (0+255),w,b
 17193  00506E  E3EE               	bnc	l1918
 17194                           
 17195                           ; BSR set to: 0
 17196  005070  0012               	return		;funcret
 17197  005072                     __end_of_EnableChannels1:
 17198                           	opt stack 0
 17199  005072                     PL446:
 17200                           	opt stack 15
 17201  005072  0E01               	movlw	1
 17202  005074  6F60               	movwf	UpdateChannelIdStatus@statusNew& (0+255),b
 17203  005076  5169               	movf	EnableChannels1@i& (0+255),w,b
 17204  005078  0012               	return	
 17205  00507A                     __end_ofPL446:
 17206                           	opt stack 0
 17207                           tosu	equ	0xFFF
 17208                           tosh	equ	0xFFE
 17209                           tosl	equ	0xFFD
 17210                           pclath	equ	0xFFA
 17211                           tblptru	equ	0xFF8
 17212                           tblptrh	equ	0xFF7
 17213                           tblptrl	equ	0xFF6
 17214                           tablat	equ	0xFF5
 17215                           prodh	equ	0xFF4
 17216                           prodl	equ	0xFF3
 17217                           intcon	equ	0xFF2
 17218                           indf0	equ	0xFEF
 17219                           postinc0	equ	0xFEE
 17220                           plusw0	equ	0xFEB
 17221                           fsr0h	equ	0xFEA
 17222                           fsr0l	equ	0xFE9
 17223                           wreg	equ	0xFE8
 17224                           postinc1	equ	0xFE6
 17225                           postdec1	equ	0xFE5
 17226                           plusw1	equ	0xFE3
 17227                           fsr1h	equ	0xFE2
 17228                           fsr1l	equ	0xFE1
 17229                           indf2	equ	0xFDF
 17230                           postinc2	equ	0xFDE
 17231                           postdec2	equ	0xFDD
 17232                           plusw2	equ	0xFDB
 17233                           fsr2h	equ	0xFDA
 17234                           fsr2l	equ	0xFD9
 17235                           status	equ	0xFD8
 17236                           
 17237 ;; *************** function _UpdateChannelIdStatus *****************
 17238 ;; Defined at:
 17239 ;;		line 1042 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 17240 ;; Parameters:    Size  Location     Type
 17241 ;;  channelId       1    wreg     unsigned char 
 17242 ;;  statusNew       1    0[BANK0 ] unsigned char 
 17243 ;; Auto vars:     Size  Location     Type
 17244 ;;  channelId       1    2[BANK0 ] unsigned char 
 17245 ;;  i               1    3[BANK0 ] unsigned char 
 17246 ;; Return value:  Size  Location     Type
 17247 ;;                  1    wreg      void 
 17248 ;; Registers used:
 17249 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17250 ;; Tracked objects:
 17251 ;;		On entry : 3F/0
 17252 ;;		On exit  : 3F/2
 17253 ;;		Unchanged: 0/0
 17254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17255 ;;      Params:         0       1       0       0       0       0       0       0       0
 17256 ;;      Locals:         0       2       0       0       0       0       0       0       0
 17257 ;;      Temps:          0       1       0       0       0       0       0       0       0
 17258 ;;      Totals:         0       4       0       0       0       0       0       0       0
 17259 ;;Total ram usage:        4 bytes
 17260 ;; Hardware stack levels used:    1
 17261 ;; Hardware stack levels required when called:    7
 17262 ;; This function calls:
 17263 ;;		Nothing
 17264 ;; This function is called by:
 17265 ;;		_LORAWAN_SetChannelIdStatus
 17266 ;;		_ExecuteNewChannel
 17267 ;;		_EnableChannels1
 17268 ;; This function uses a non-reentrant model
 17269 ;;
 17270                           
 17271                           	psect	text89
 17272  003AAE                     __ptext89:
 17273                           	opt stack 0
 17274  003AAE                     _UpdateChannelIdStatus:
 17275                           	opt stack 17
 17276                           
 17277                           ; BSR set to: 0
 17278                           ;incstack = 0
 17279                           ;UpdateChannelIdStatus@channelId stored from wreg
 17280  003AAE  6F62               	movwf	UpdateChannelIdStatus@channelId& (0+255),b
 17281                           
 17282                           ;lorawan_eu.c: 1044: uint8_t i;
 17283                           ;lorawan_eu.c: 1046: Channels[channelId].status = statusNew;
 17284  003AB0  0100               	movlb	0	; () banked
 17285  003AB2  5162               	movf	UpdateChannelIdStatus@channelId& (0+255),w,b
 17286  003AB4  0D0E               	mullw	14
 17287  003AB6  D83F               	call	PL18	;call to abstracted procedure
 17288  003AB8  C060  FFDF         	movff	UpdateChannelIdStatus@statusNew,indf2
 17289                           
 17290                           ;lorawan_eu.c: 1047: if(Channels[channelId].status == 0)
 17291  003ABC  5162               	movf	UpdateChannelIdStatus@channelId& (0+255),w,b
 17292  003ABE  0D0E               	mullw	14
 17293  003AC0  D83A               	call	PL18	;call to abstracted procedure
 17294  003AC2  50DF               	movf	indf2,w,c
 17295  003AC4  E104               	bnz	l12132
 17296                           
 17297                           ; BSR set to: 0
 17298                           ;lorawan_eu.c: 1048: {
 17299                           ;lorawan_eu.c: 1050: Channels[channelId].channelTimer = 0;
 17300  003AC6  5162               	movf	UpdateChannelIdStatus@channelId& (0+255),w,b
 17301  003AC8  EC51  F006         	call	PL4	;call to abstracted procedure
 17302  003ACC  D83B               	call	PL182	;call to abstracted procedure
 17303  003ACE                     l12132:
 17304                           
 17305                           ; BSR set to: 0
 17306                           ;lorawan_eu.c: 1051: }
 17307                           ;lorawan_eu.c: 1053: for (i = 0; i < loRa.maxChannels; i++)
 17308  003ACE  6B63               	clrf	UpdateChannelIdStatus@i& (0+255),b
 17309  003AD0  D026               	goto	l12146
 17310  003AD2                     l12134:
 17311                           
 17312                           ; BSR set to: 0
 17313                           ;lorawan_eu.c: 1054: {
 17314                           ;lorawan_eu.c: 1055: if ( (Channels[i].dataRange.min < loRa.minDataRate) && (Channels[i]
      +                          .status == 1) )
 17315  003AD2  5163               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 17316  003AD4  EC7E  F021         	call	PL6	;call to abstracted procedure
 17317  003AD8  50DF               	movf	223,w,c
 17318  003ADA  0B0F               	andlw	15
 17319  003ADC  0100               	movlb	0	; () banked
 17320  003ADE  6F61               	movwf	??_UpdateChannelIdStatus& (0+255),b
 17321  003AE0  0102               	movlb	2	; () banked
 17322  003AE2  51EB               	movf	(_loRa+235)& (0+255),w,b
 17323  003AE4  0100               	movlb	0	; () banked
 17324  003AE6  5D61               	subwf	??_UpdateChannelIdStatus& (0+255),w,b
 17325  003AE8  E208               	bc	l1854
 17326                           
 17327                           ; BSR set to: 0
 17328  003AEA  5163               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 17329  003AEC  EC86  F021         	call	PL12	;call to abstracted procedure
 17330  003AF0  E104               	bnz	l1854
 17331                           
 17332                           ; BSR set to: 0
 17333                           ;lorawan_eu.c: 1056: {
 17334                           ;lorawan_eu.c: 1057: loRa.minDataRate = Channels[i].dataRange.min;
 17335  003AF2  5163               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 17336  003AF4  EC7E  F021         	call	PL6	;call to abstracted procedure
 17337  003AF8  D835               	call	PL326	;call to abstracted procedure
 17338  003AFA                     l1854:
 17339                           
 17340                           ;lorawan_eu.c: 1058: }
 17341                           ;lorawan_eu.c: 1059: if ( (Channels[i].dataRange.max > loRa.maxDataRate) && (Channels[i]
      +                          .status == 1) )
 17342  003AFA  0100               	movlb	0	; () banked
 17343  003AFC  5163               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 17344  003AFE  EC7E  F021         	call	PL6	;call to abstracted procedure
 17345  003B02  D835               	call	PL440	;call to abstracted procedure
 17346  003B04  61EC               	cpfslt	(_loRa+236)& (0+255),b
 17347  003B06  D009               	goto	l12144
 17348                           
 17349                           ; BSR set to: 2
 17350  003B08  0100               	movlb	0	; () banked
 17351  003B0A  5163               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 17352  003B0C  EC86  F021         	call	PL12	;call to abstracted procedure
 17353  003B10  E104               	bnz	l12144
 17354                           
 17355                           ; BSR set to: 0
 17356                           ;lorawan_eu.c: 1060: {
 17357                           ;lorawan_eu.c: 1061: loRa.maxDataRate = Channels[i].dataRange.max;
 17358  003B12  5163               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 17359  003B14  EC7E  F021         	call	PL6	;call to abstracted procedure
 17360  003B18  D820               	call	PL322	;call to abstracted procedure
 17361  003B1A                     l12144:
 17362  003B1A  0100               	movlb	0	; () banked
 17363  003B1C  2B63               	incf	UpdateChannelIdStatus@i& (0+255),f,b
 17364  003B1E                     l12146:
 17365                           
 17366                           ; BSR set to: 0
 17367  003B1E  0102               	movlb	2	; () banked
 17368  003B20  51ED               	movf	(_loRa+237)& (0+255),w,b
 17369  003B22  0100               	movlb	0	; () banked
 17370  003B24  5D63               	subwf	UpdateChannelIdStatus@i& (0+255),w,b
 17371  003B26  E3D5               	bnc	l12134
 17372                           
 17373                           ; BSR set to: 0
 17374                           ;lorawan_eu.c: 1062: }
 17375                           ;lorawan_eu.c: 1063: }
 17376                           ;lorawan_eu.c: 1065: if (loRa.currentDataRate > loRa.maxDataRate)
 17377  003B28  0102               	movlb	2	; () banked
 17378  003B2A  51DF               	movf	(_loRa+223)& (0+255),w,b
 17379  003B2C  5DEC               	subwf	(_loRa+236)& (0+255),w,b
 17380  003B2E  E20F               	bc	PL302
 17381                           
 17382                           ; BSR set to: 2
 17383                           ;lorawan_eu.c: 1066: {
 17384                           ;lorawan_eu.c: 1067: loRa.currentDataRate = loRa.maxDataRate;
 17385  003B30  C2EC  F2DF         	movff	_loRa+236,_loRa+223
 17386  003B34                     l12152:
 17387                           
 17388                           ; BSR set to: 2
 17389                           ;lorawan_eu.c: 1068: }
 17390                           ;lorawan_eu.c: 1070: if (loRa.currentDataRate < loRa.minDataRate)
 17391                           
 17392                           ; BSR set to: 2
 17393                           ;lorawan_eu.c: 1071: {
 17394                           ;lorawan_eu.c: 1072: loRa.currentDataRate = loRa.minDataRate;
 17395                           
 17396                           ; BSR set to: 2
 17397  003B34  D00C               	goto	PL302	;call to abstracted procedure
 17398  003B36                     __end_of_UpdateChannelIdStatus:
 17399                           	opt stack 0
 17400  003B36                     PL18:
 17401                           	opt stack 17
 17402  003B36  0E04               	movlw	low (_Channels+4)
 17403  003B38  24F3               	addwf	prodl,w,c
 17404  003B3A  6ED9               	movwf	fsr2l,c
 17405  003B3C  0E04               	movlw	high (_Channels+4)
 17406  003B3E  20F4               	addwfc	prodh,w,c
 17407  003B40  6EDA               	movwf	fsr2h,c
 17408  003B42  0012               	return	
 17409  003B44                     __end_ofPL18:
 17410                           	opt stack 0
 17411  003B44                     PL182:
 17412                           	opt stack 17
 17413  003B44  6ADE               	clrf	postinc2,c
 17414  003B46  6ADE               	clrf	postinc2,c
 17415  003B48  6ADE               	clrf	postinc2,c
 17416  003B4A  6ADD               	clrf	postdec2,c
 17417  003B4C  0012               	return	
 17418  003B4E                     __end_ofPL182:
 17419                           	opt stack 0
 17420  003B4E                     PL302:
 17421                           	opt stack 17
 17422  003B4E  51EB               	movf	(_loRa+235)& (0+255),w,b
 17423  003B50  5DDF               	subwf	(_loRa+223)& (0+255),w,b
 17424  003B52  A0D8               	btfss	status,0,c
 17425  003B54  C2EB  F2DF         	movff	_loRa+235,_loRa+223
 17426  003B58  0012               	return		;funcret
 17427  003B5A                     __end_ofPL302:
 17428                           	opt stack 0
 17429  003B5A                     PL322:
 17430                           	opt stack 17
 17431  003B5A  38DF               	swapf	223,w,c
 17432  003B5C  0B0F               	andlw	15
 17433  003B5E  0102               	movlb	2	; () banked
 17434  003B60  6FEC               	movwf	(_loRa+236)& (0+255),b
 17435  003B62  0012               	return	
 17436  003B64                     __end_ofPL322:
 17437                           	opt stack 0
 17438  003B64                     PL326:
 17439                           	opt stack 17
 17440  003B64  50DF               	movf	223,w,c
 17441  003B66  0B0F               	andlw	15
 17442  003B68  0102               	movlb	2	; () banked
 17443  003B6A  6FEB               	movwf	(_loRa+235)& (0+255),b
 17444  003B6C  0012               	return	
 17445  003B6E                     __end_ofPL326:
 17446                           	opt stack 0
 17447  003B6E                     PL440:
 17448                           	opt stack 17
 17449  003B6E  38DF               	swapf	223,w,c
 17450  003B70  0B0F               	andlw	15
 17451  003B72  0102               	movlb	2	; () banked
 17452  003B74  0012               	return	
 17453  003B76                     __end_ofPL440:
 17454                           	opt stack 0
 17455                           tosu	equ	0xFFF
 17456                           tosh	equ	0xFFE
 17457                           tosl	equ	0xFFD
 17458                           pclath	equ	0xFFA
 17459                           tblptru	equ	0xFF8
 17460                           tblptrh	equ	0xFF7
 17461                           tblptrl	equ	0xFF6
 17462                           tablat	equ	0xFF5
 17463                           prodh	equ	0xFF4
 17464                           prodl	equ	0xFF3
 17465                           intcon	equ	0xFF2
 17466                           indf0	equ	0xFEF
 17467                           postinc0	equ	0xFEE
 17468                           plusw0	equ	0xFEB
 17469                           fsr0h	equ	0xFEA
 17470                           fsr0l	equ	0xFE9
 17471                           wreg	equ	0xFE8
 17472                           postinc1	equ	0xFE6
 17473                           postdec1	equ	0xFE5
 17474                           plusw1	equ	0xFE3
 17475                           fsr1h	equ	0xFE2
 17476                           fsr1l	equ	0xFE1
 17477                           indf2	equ	0xFDF
 17478                           postinc2	equ	0xFDE
 17479                           postdec2	equ	0xFDD
 17480                           plusw2	equ	0xFDB
 17481                           fsr2h	equ	0xFDA
 17482                           fsr2l	equ	0xFD9
 17483                           status	equ	0xFD8
 17484                           
 17485 ;; *************** function _ExecuteDutyCycle *****************
 17486 ;; Defined at:
 17487 ;;		line 594 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 17488 ;; Parameters:    Size  Location     Type
 17489 ;;  ptr             2    0[BANK0 ] PTR unsigned char 
 17490 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 17491 ;; Auto vars:     Size  Location     Type
 17492 ;;  maxDCycle       1    5[BANK0 ] unsigned char 
 17493 ;; Return value:  Size  Location     Type
 17494 ;;                  2    0[BANK0 ] PTR unsigned char 
 17495 ;; Registers used:
 17496 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17497 ;; Tracked objects:
 17498 ;;		On entry : 3F/0
 17499 ;;		On exit  : 3D/0
 17500 ;;		Unchanged: 0/0
 17501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17502 ;;      Params:         0       2       0       0       0       0       0       0       0
 17503 ;;      Locals:         0       1       0       0       0       0       0       0       0
 17504 ;;      Temps:          0       3       0       0       0       0       0       0       0
 17505 ;;      Totals:         0       6       0       0       0       0       0       0       0
 17506 ;;Total ram usage:        6 bytes
 17507 ;; Hardware stack levels used:    1
 17508 ;; Hardware stack levels required when called:    7
 17509 ;; This function calls:
 17510 ;;		Nothing
 17511 ;; This function is called by:
 17512 ;;		_MacExecuteCommands
 17513 ;; This function uses a non-reentrant model
 17514 ;;
 17515                           
 17516                           	psect	text90
 17517  005314                     __ptext90:
 17518                           	opt stack 0
 17519  005314                     _ExecuteDutyCycle:
 17520                           	opt stack 18
 17521                           
 17522                           ; BSR set to: 0
 17523                           ;lorawan_eu.c: 596: uint8_t maxDCycle;
 17524                           ;lorawan_eu.c: 598: maxDCycle = *(ptr++);
 17525                           
 17526                           ; BSR set to: 2
 17527                           ;incstack = 0
 17528  005314  C060  FFD9         	movff	ExecuteDutyCycle@ptr,fsr2l
 17529  005318  C061  FFDA         	movff	ExecuteDutyCycle@ptr+1,fsr2h
 17530  00531C  50DF               	movf	indf2,w,c
 17531  00531E  6F65               	movwf	ExecuteDutyCycle@maxDCycle& (0+255),b
 17532                           
 17533                           ; BSR set to: 0
 17534  005320  4B60               	infsnz	ExecuteDutyCycle@ptr& (0+255),f,b
 17535  005322  2B61               	incf	(ExecuteDutyCycle@ptr+1)& (0+255),f,b
 17536                           
 17537                           ; BSR set to: 0
 17538                           ;lorawan_eu.c: 599: if (maxDCycle < 15)
 17539  005324  0E0F               	movlw	15
 17540  005326  6165               	cpfslt	ExecuteDutyCycle@maxDCycle& (0+255),b
 17541  005328  D012               	goto	l1730
 17542                           
 17543                           ; BSR set to: 0
 17544                           ;lorawan_eu.c: 600: {
 17545                           ;lorawan_eu.c: 601: loRa.prescaler = 1 << maxDCycle;
 17546  00532A  C065  F062         	movff	ExecuteDutyCycle@maxDCycle,??_ExecuteDutyCycle
 17547  00532E  0E01               	movlw	1
 17548  005330  6F63               	movwf	(??_ExecuteDutyCycle+1)& (0+255),b
 17549  005332  6B64               	clrf	(??_ExecuteDutyCycle+2)& (0+255),b
 17550  005334  2B62               	incf	??_ExecuteDutyCycle& (0+255),f,b
 17551  005336  D003               	goto	u15154
 17552  005338                     u15155:
 17553  005338  90D8               	bcf	status,0,c
 17554  00533A  3763               	rlcf	(??_ExecuteDutyCycle+1)& (0+255),f,b
 17555  00533C  3764               	rlcf	(??_ExecuteDutyCycle+2)& (0+255),f,b
 17556  00533E                     u15154:
 17557  00533E  2F62               	decfsz	??_ExecuteDutyCycle& (0+255),f,b
 17558  005340  D7FB               	goto	u15155
 17559  005342  C063  F2DB         	movff	??_ExecuteDutyCycle+1,_loRa+219
 17560  005346  C064  F2DC         	movff	??_ExecuteDutyCycle+2,_loRa+220
 17561                           
 17562                           ;lorawan_eu.c: 602: loRa.macStatus.prescalerModified = 1;
 17563  00534A  0102               	movlb	2	; () banked
 17564  00534C  8D03               	bsf	(_loRa+3)& (0+255),6,b
 17565  00534E                     l1730:
 17566                           
 17567                           ;lorawan_eu.c: 603: }
 17568                           ;lorawan_eu.c: 605: if (maxDCycle == 255)
 17569  00534E  0100               	movlb	0	; () banked
 17570  005350  2965               	incf	ExecuteDutyCycle@maxDCycle& (0+255),w,b
 17571  005352  E102               	bnz	l13634
 17572                           
 17573                           ; BSR set to: 0
 17574                           ;lorawan_eu.c: 606: {
 17575                           ;lorawan_eu.c: 607: loRa.macStatus.silentImmediately = 1;
 17576  005354  0102               	movlb	2	; () banked
 17577  005356  8F02               	bsf	(_loRa+2)& (0+255),7,b
 17578  005358                     l13634:
 17579                           
 17580                           ;lorawan_eu.c: 608: }
 17581                           ;lorawan_eu.c: 610: return ptr;
 17582  005358  C060  F060         	movff	ExecuteDutyCycle@ptr,?_ExecuteDutyCycle
 17583  00535C  C061  F061         	movff	ExecuteDutyCycle@ptr+1,?_ExecuteDutyCycle+1
 17584  005360  0012               	return		;funcret
 17585  005362                     __end_of_ExecuteDutyCycle:
 17586                           	opt stack 0
 17587                           tosu	equ	0xFFF
 17588                           tosh	equ	0xFFE
 17589                           tosl	equ	0xFFD
 17590                           pclath	equ	0xFFA
 17591                           tblptru	equ	0xFF8
 17592                           tblptrh	equ	0xFF7
 17593                           tblptrl	equ	0xFF6
 17594                           tablat	equ	0xFF5
 17595                           prodh	equ	0xFF4
 17596                           prodl	equ	0xFF3
 17597                           intcon	equ	0xFF2
 17598                           indf0	equ	0xFEF
 17599                           postinc0	equ	0xFEE
 17600                           plusw0	equ	0xFEB
 17601                           fsr0h	equ	0xFEA
 17602                           fsr0l	equ	0xFE9
 17603                           wreg	equ	0xFE8
 17604                           postinc1	equ	0xFE6
 17605                           postdec1	equ	0xFE5
 17606                           plusw1	equ	0xFE3
 17607                           fsr1h	equ	0xFE2
 17608                           fsr1l	equ	0xFE1
 17609                           indf2	equ	0xFDF
 17610                           postinc2	equ	0xFDE
 17611                           postdec2	equ	0xFDD
 17612                           plusw2	equ	0xFDB
 17613                           fsr2h	equ	0xFDA
 17614                           fsr2l	equ	0xFD9
 17615                           status	equ	0xFD8
 17616                           
 17617 ;; *************** function _ExecuteDevStatus *****************
 17618 ;; Defined at:
 17619 ;;		line 672 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 17620 ;; Parameters:    Size  Location     Type
 17621 ;;  ptr             2    0[BANK0 ] PTR unsigned char 
 17622 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 17623 ;; Auto vars:     Size  Location     Type
 17624 ;;		None
 17625 ;; Return value:  Size  Location     Type
 17626 ;;                  2    0[BANK0 ] PTR unsigned char 
 17627 ;; Registers used:
 17628 ;;		wreg, status,2, status,0
 17629 ;; Tracked objects:
 17630 ;;		On entry : 3F/0
 17631 ;;		On exit  : 3F/0
 17632 ;;		Unchanged: 3F/0
 17633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17634 ;;      Params:         0       2       0       0       0       0       0       0       0
 17635 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17636 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17637 ;;      Totals:         0       2       0       0       0       0       0       0       0
 17638 ;;Total ram usage:        2 bytes
 17639 ;; Hardware stack levels used:    1
 17640 ;; Hardware stack levels required when called:    7
 17641 ;; This function calls:
 17642 ;;		Nothing
 17643 ;; This function is called by:
 17644 ;;		_MacExecuteCommands
 17645 ;; This function uses a non-reentrant model
 17646 ;;
 17647                           
 17648                           	psect	text91
 17649  006176                     __ptext91:
 17650                           	opt stack 0
 17651  006176                     _ExecuteDevStatus:
 17652                           	opt stack 18
 17653                           
 17654                           ; BSR set to: 0
 17655                           ;lorawan_eu.c: 674: return ptr;
 17656                           
 17657                           ;incstack = 0
 17658  006176  C060  F060         	movff	ExecuteDevStatus@ptr,?_ExecuteDevStatus
 17659  00617A  C061  F061         	movff	ExecuteDevStatus@ptr+1,?_ExecuteDevStatus+1
 17660                           
 17661                           ; BSR set to: 0
 17662  00617E  0012               	return		;funcret
 17663  006180                     __end_of_ExecuteDevStatus:
 17664                           	opt stack 0
 17665                           tosu	equ	0xFFF
 17666                           tosh	equ	0xFFE
 17667                           tosl	equ	0xFFD
 17668                           pclath	equ	0xFFA
 17669                           tblptru	equ	0xFF8
 17670                           tblptrh	equ	0xFF7
 17671                           tblptrl	equ	0xFF6
 17672                           tablat	equ	0xFF5
 17673                           prodh	equ	0xFF4
 17674                           prodl	equ	0xFF3
 17675                           intcon	equ	0xFF2
 17676                           indf0	equ	0xFEF
 17677                           postinc0	equ	0xFEE
 17678                           plusw0	equ	0xFEB
 17679                           fsr0h	equ	0xFEA
 17680                           fsr0l	equ	0xFE9
 17681                           wreg	equ	0xFE8
 17682                           postinc1	equ	0xFE6
 17683                           postdec1	equ	0xFE5
 17684                           plusw1	equ	0xFE3
 17685                           fsr1h	equ	0xFE2
 17686                           fsr1l	equ	0xFE1
 17687                           indf2	equ	0xFDF
 17688                           postinc2	equ	0xFDE
 17689                           postdec2	equ	0xFDD
 17690                           plusw2	equ	0xFDB
 17691                           fsr2h	equ	0xFDA
 17692                           fsr2l	equ	0xFD9
 17693                           status	equ	0xFD8
 17694                           
 17695 ;; *************** function _LORAWAN_Send *****************
 17696 ;; Defined at:
 17697 ;;		line 185 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 17698 ;; Parameters:    Size  Location     Type
 17699 ;;  confirmed       1    wreg     enum E17381
 17700 ;;  port            1  107[BANK1 ] unsigned char 
 17701 ;;  buffer          2  108[BANK1 ] PTR void 
 17702 ;;		 -> payload(2), NULL(0), 
 17703 ;;  bufferLength    1  110[BANK1 ] unsigned char 
 17704 ;; Auto vars:     Size  Location     Type
 17705 ;;  confirmed       1  127[BANK0 ] enum E17381
 17706 ;;  result          1  126[BANK0 ] enum E17354
 17707 ;; Return value:  Size  Location     Type
 17708 ;;                  1    wreg      enum E17469
 17709 ;; Registers used:
 17710 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17711 ;; Tracked objects:
 17712 ;;		On entry : 3F/1
 17713 ;;		On exit  : 3C/0
 17714 ;;		Unchanged: 0/0
 17715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17716 ;;      Params:         0       0       4       0       0       0       0       0       0
 17717 ;;      Locals:         0       2       0       0       0       0       0       0       0
 17718 ;;      Temps:          0       1       0       0       0       0       0       0       0
 17719 ;;      Totals:         0       3       4       0       0       0       0       0       0
 17720 ;;Total ram usage:        7 bytes
 17721 ;; Hardware stack levels used:    1
 17722 ;; Hardware stack levels required when called:   13
 17723 ;; This function calls:
 17724 ;;		_AssemblePacket
 17725 ;;		_LORAWAN_GetMaxPayloadSize
 17726 ;;		_RADIO_ReceiveStop
 17727 ;;		_RADIO_Transmit
 17728 ;;		_SelectChannelForTransmission
 17729 ;; This function is called by:
 17730 ;;		_sendPacket
 17731 ;;		_AutomaticReplyCallback
 17732 ;;		_LORAWAN_RxDone
 17733 ;; This function uses a non-reentrant model
 17734 ;;
 17735                           
 17736                           	psect	text92
 17737  003CF6                     __ptext92:
 17738                           	opt stack 0
 17739  003CF6                     _LORAWAN_Send:
 17740                           	opt stack 16
 17741                           
 17742                           ; BSR set to: 0
 17743                           ;incstack = 0
 17744                           ;LORAWAN_Send@confirmed stored from wreg
 17745  003CF6  0100               	movlb	0	; () banked
 17746  003CF8  6FDF               	movwf	LORAWAN_Send@confirmed& (0+255),b
 17747                           
 17748                           ;lorawan.c: 187: LorawanError_t result;
 17749                           ;lorawan.c: 189: if (loRa.macStatus.macPause == 1)
 17750  003CFA  0102               	movlb	2	; () banked
 17751  003CFC  A103               	btfss	(_loRa+3)& (0+255),0,b
 17752                           
 17753                           ; BSR set to: 2
 17754                           ;lorawan.c: 192: }
 17755                           ;lorawan.c: 194: if (loRa.macStatus.silentImmediately == 1)
 17756  003CFE  BF02               	btfsc	(_loRa+2)& (0+255),7,b
 17757  003D00  0012               	return	
 17758                           
 17759                           ; BSR set to: 2
 17760                           ;lorawan.c: 197: }
 17761                           ;lorawan.c: 199: if (loRa.macStatus.networkJoined == 0)
 17762  003D02  A902               	btfss	(_loRa+2)& (0+255),4,b
 17763  003D04  0012               	return	
 17764                           
 17765                           ; BSR set to: 2
 17766                           ;lorawan.c: 202: }
 17767                           ;lorawan.c: 204: if ( (port < 1) && (bufferLength != 0) )
 17768  003D06  0101               	movlb	1	; () banked
 17769  003D08  516B               	movf	LORAWAN_Send@port& (0+255),w,b
 17770  003D0A  E103               	bnz	l13772
 17771                           
 17772                           ; BSR set to: 1
 17773  003D0C  516E               	movf	LORAWAN_Send@bufferLength& (0+255),w,b
 17774  003D0E  E001               	bz	l13772
 17775  003D10  0012               	return	
 17776  003D12                     l13772:
 17777                           
 17778                           ; BSR set to: 1
 17779                           ;lorawan.c: 207: }
 17780                           ;lorawan.c: 210: if (bufferLength > LORAWAN_GetMaxPayloadSize ())
 17781  003D12  ECF5  F02B         	call	_LORAWAN_GetMaxPayloadSize	;wreg free
 17782  003D16  6FDD               	movwf	??_LORAWAN_Send& (0+255),b
 17783  003D18  0101               	movlb	1	; () banked
 17784  003D1A  516E               	movf	LORAWAN_Send@bufferLength& (0+255),w,b
 17785  003D1C  0100               	movlb	0	; () banked
 17786  003D1E  5DDD               	subwf	??_LORAWAN_Send& (0+255),w,b
 17787  003D20  E201               	bc	l13776
 17788  003D22  0012               	return	
 17789  003D24                     l13776:
 17790                           
 17791                           ; BSR set to: 0
 17792                           ;lorawan.c: 213: }
 17793                           ;lorawan.c: 215: if (loRa.fCntUp.value == (4294967295UL))
 17794  003D24  0102               	movlb	2	; () banked
 17795  003D26  2906               	incf	(_loRa+6)& (0+255),w,b
 17796  003D28  E108               	bnz	l13780
 17797  003D2A  2907               	incf	(_loRa+7)& (0+255),w,b
 17798  003D2C  E106               	bnz	l13780
 17799  003D2E  2908               	incf	(_loRa+8)& (0+255),w,b
 17800  003D30  E104               	bnz	l13780
 17801  003D32  2909               	incf	(_loRa+9)& (0+255),w,b
 17802  003D34  E102               	bnz	l13780
 17803                           
 17804                           ; BSR set to: 2
 17805                           ;lorawan.c: 216: {
 17806                           ;lorawan.c: 218: loRa.macStatus.rejoinNeeded = 1;
 17807  003D36  8304               	bsf	(_loRa+4)& (0+255),1,b
 17808                           
 17809                           ;lorawan.c: 219: return FRAME_COUNTER_ERROR_REJOIN_NEEDED;
 17810                           ;	Return value of _LORAWAN_Send is never used
 17811  003D38  0012               	return	
 17812  003D3A                     l13780:
 17813                           
 17814                           ; BSR set to: 2
 17815                           ;lorawan.c: 220: }
 17816                           ;lorawan.c: 222: if ((loRa.macStatus.macState != IDLE) && (CLASS_A == loRa.deviceClass))
 17817  003D3A  5102               	movf	(_loRa+2)& (0+255),w,b
 17818  003D3C  0B0F               	andlw	15
 17819  003D3E  E003               	bz	l13786
 17820                           
 17821                           ; BSR set to: 2
 17822  003D40  5112               	movf	(_loRa+18)& (0+255),w,b
 17823  003D42  E101               	bnz	l13786
 17824  003D44  0012               	return	
 17825  003D46                     l13786:
 17826                           
 17827                           ; BSR set to: 2
 17828                           ;lorawan.c: 225: }
 17829                           ;lorawan.c: 227: result = SelectChannelForTransmission (1);
 17830  003D46  0E01               	movlw	1
 17831  003D48  ECC4  F026         	call	_SelectChannelForTransmission
 17832  003D4C  6FDE               	movwf	LORAWAN_Send@result& (0+255),b
 17833                           
 17834                           ; BSR set to: 0
 17835                           ;lorawan.c: 228: if (result != OK)
 17836  003D4E  51DE               	movf	LORAWAN_Send@result& (0+255),w,b
 17837  003D50  E001               	bz	l13794
 17838  003D52  0012               	return	
 17839  003D54                     l13794:
 17840                           
 17841                           ; BSR set to: 0
 17842                           ;lorawan.c: 232: else
 17843                           ;lorawan.c: 233: {
 17844                           ;lorawan.c: 234: if (CLASS_C == loRa.deviceClass)
 17845  003D54  0E02               	movlw	2
 17846  003D56  0102               	movlb	2	; () banked
 17847  003D58  1912               	xorwf	(_loRa+18)& (0+255),w,b
 17848  003D5A  E102               	bnz	l13798
 17849                           
 17850                           ; BSR set to: 2
 17851                           ;lorawan.c: 235: {
 17852                           ;lorawan.c: 236: RADIO_ReceiveStop();
 17853  003D5C  ECDC  F02F         	call	_RADIO_ReceiveStop	;wreg free
 17854  003D60                     l13798:
 17855                           
 17856                           ;lorawan.c: 237: }
 17857                           ;lorawan.c: 239: AssemblePacket (confirmed, port, buffer, bufferLength);
 17858  003D60  C16B  F166         	movff	LORAWAN_Send@port,AssemblePacket@port
 17859  003D64  C16C  F167         	movff	LORAWAN_Send@buffer,AssemblePacket@buffer
 17860  003D68  C16D  F168         	movff	LORAWAN_Send@buffer+1,AssemblePacket@buffer+1
 17861  003D6C  C16E  F169         	movff	LORAWAN_Send@bufferLength,AssemblePacket@bufferLength
 17862  003D70  0101               	movlb	1	; () banked
 17863  003D72  6B6A               	clrf	(AssemblePacket@bufferLength+1)& (0+255),b
 17864  003D74  0100               	movlb	0	; () banked
 17865  003D76  51DF               	movf	LORAWAN_Send@confirmed& (0+255),w,b
 17866  003D78  EC3E  F00A         	call	_AssemblePacket
 17867                           
 17868                           ; BSR set to: 2
 17869                           ;lorawan.c: 241: if (RADIO_Transmit (&macBuffer[16], loRa.lastPacketLength) == OK)
 17870  003D7C  0EFF               	movlw	low (_macBuffer+16)
 17871  003D7E  0100               	movlb	0	; () banked
 17872  003D80  EC7D  F025         	call	PL170	;call to abstracted procedure
 17873  003D84  ECCE  F00E         	call	_RADIO_Transmit	;wreg free
 17874  003D88  51A6               	movf	?_RADIO_Transmit& (0+255),w,b
 17875  003D8A  11A7               	iorwf	(?_RADIO_Transmit+1)& (0+255),w,b
 17876  003D8C  A4D8               	btfss	status,2,c
 17877  003D8E  0012               	return	
 17878                           
 17879                           ; BSR set to: 0
 17880                           ;lorawan.c: 242: {
 17881                           ;lorawan.c: 243: loRa.fCntUp.value ++;
 17882  003D90  0102               	movlb	2	; () banked
 17883  003D92  2B06               	incf	(_loRa+6)& (0+255),f,b
 17884  003D94  0E00               	movlw	0
 17885  003D96  2307               	addwfc	(_loRa+7)& (0+255),f,b
 17886  003D98  2308               	addwfc	(_loRa+8)& (0+255),f,b
 17887  003D9A  2309               	addwfc	(_loRa+9)& (0+255),f,b
 17888                           
 17889                           ;lorawan.c: 245: if (CNF == confirmed)
 17890  003D9C  0100               	movlb	0	; () banked
 17891  003D9E  05DF               	decf	LORAWAN_Send@confirmed& (0+255),w,b
 17892  003DA0  E102               	bnz	l736
 17893                           
 17894                           ; BSR set to: 0
 17895                           ;lorawan.c: 246: {
 17896                           ;lorawan.c: 247: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 1;
 17897  003DA2  0102               	movlb	2	; () banked
 17898  003DA4  8100               	bsf	_loRa& (0+255),0,b
 17899  003DA6                     l736:
 17900                           
 17901                           ;lorawan.c: 248: }
 17902                           ;lorawan.c: 249: loRa.lorawanMacStatus.synchronization = 1;
 17903  003DA6  0102               	movlb	2	; () banked
 17904  003DA8  8B00               	bsf	_loRa& (0+255),5,b
 17905                           
 17906                           ; BSR set to: 2
 17907                           ;lorawan.c: 250: loRa.macStatus.macState = TRANSMISSION_OCCURRING;
 17908  003DAA  EF83  F025         	goto	PL264	;call to abstracted procedure
 17909  003DAE                     __end_of_LORAWAN_Send:
 17910                           	opt stack 0
 17911                           tosu	equ	0xFFF
 17912                           tosh	equ	0xFFE
 17913                           tosl	equ	0xFFD
 17914                           pclath	equ	0xFFA
 17915                           tblptru	equ	0xFF8
 17916                           tblptrh	equ	0xFF7
 17917                           tblptrl	equ	0xFF6
 17918                           tablat	equ	0xFF5
 17919                           prodh	equ	0xFF4
 17920                           prodl	equ	0xFF3
 17921                           intcon	equ	0xFF2
 17922                           indf0	equ	0xFEF
 17923                           postinc0	equ	0xFEE
 17924                           plusw0	equ	0xFEB
 17925                           fsr0h	equ	0xFEA
 17926                           fsr0l	equ	0xFE9
 17927                           wreg	equ	0xFE8
 17928                           postinc1	equ	0xFE6
 17929                           postdec1	equ	0xFE5
 17930                           plusw1	equ	0xFE3
 17931                           fsr1h	equ	0xFE2
 17932                           fsr1l	equ	0xFE1
 17933                           indf2	equ	0xFDF
 17934                           postinc2	equ	0xFDE
 17935                           postdec2	equ	0xFDD
 17936                           plusw2	equ	0xFDB
 17937                           fsr2h	equ	0xFDA
 17938                           fsr2l	equ	0xFD9
 17939                           status	equ	0xFD8
 17940                           
 17941 ;; *************** function _LORAWAN_GetMaxPayloadSize *****************
 17942 ;; Defined at:
 17943 ;;		line 1556 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 17944 ;; Parameters:    Size  Location     Type
 17945 ;;		None
 17946 ;; Auto vars:     Size  Location     Type
 17947 ;;  result          1   10[BANK0 ] unsigned char 
 17948 ;;  macCommandsL    1    9[BANK0 ] unsigned char 
 17949 ;; Return value:  Size  Location     Type
 17950 ;;                  1    wreg      unsigned char 
 17951 ;; Registers used:
 17952 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17953 ;; Tracked objects:
 17954 ;;		On entry : 3C/2
 17955 ;;		On exit  : 3F/0
 17956 ;;		Unchanged: 0/0
 17957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17958 ;;      Params:         0       0       0       0       0       0       0       0       0
 17959 ;;      Locals:         0       2       0       0       0       0       0       0       0
 17960 ;;      Temps:          0       1       0       0       0       0       0       0       0
 17961 ;;      Totals:         0       3       0       0       0       0       0       0       0
 17962 ;;Total ram usage:        3 bytes
 17963 ;; Hardware stack levels used:    1
 17964 ;; Hardware stack levels required when called:    8
 17965 ;; This function calls:
 17966 ;;		_CountfOptsLength
 17967 ;; This function is called by:
 17968 ;;		_LORAWAN_Send
 17969 ;;		_AckRetransmissionCallback
 17970 ;; This function uses a non-reentrant model
 17971 ;;
 17972                           
 17973                           	psect	text93
 17974  0057EA                     __ptext93:
 17975                           	opt stack 0
 17976  0057EA                     _LORAWAN_GetMaxPayloadSize:
 17977                           	opt stack 20
 17978                           
 17979                           ;lorawan.c: 1559: uint8_t macCommandsLength;
 17980                           ;lorawan.c: 1561: macCommandsLength = CountfOptsLength();
 17981                           
 17982                           ;incstack = 0
 17983  0057EA  EC2C  F024         	call	_CountfOptsLength	;wreg free
 17984  0057EE  6F69               	movwf	LORAWAN_GetMaxPayloadSize@macCommandsLength& (0+255),b
 17985                           
 17986                           ; BSR set to: 0
 17987                           ;lorawan.c: 1563: if (loRa.crtMacCmdIndex == 0)
 17988  0057F0  0102               	movlb	2	; () banked
 17989  0057F2  51A7               	movf	(_loRa+167)& (0+255),w,b
 17990  0057F4  E104               	bnz	l13420
 17991                           
 17992                           ; BSR set to: 2
 17993                           ;lorawan.c: 1564: {
 17994                           ;lorawan.c: 1565: result = maxPayloadSize[loRa.currentDataRate];
 17995  0057F6  D80D               	call	PL266	;call to abstracted procedure
 17996  0057F8  CFF5 F06A          	movff	tablat,LORAWAN_GetMaxPayloadSize@result
 17997                           
 17998                           ;lorawan.c: 1566: }
 17999  0057FC  D007               	goto	l13422
 18000  0057FE                     l13420:
 18001                           
 18002                           ; BSR set to: 2
 18003                           ;lorawan.c: 1567: else
 18004                           ;lorawan.c: 1568: {
 18005                           ;lorawan.c: 1569: result = maxPayloadSize[loRa.currentDataRate] - macCommandsLength ;
 18006  0057FE  D809               	call	PL266	;call to abstracted procedure
 18007  005800  CFF5 F068          	movff	tablat,??_LORAWAN_GetMaxPayloadSize
 18008  005804  0100               	movlb	0	; () banked
 18009  005806  5169               	movf	LORAWAN_GetMaxPayloadSize@macCommandsLength& (0+255),w,b
 18010  005808  5D68               	subwf	??_LORAWAN_GetMaxPayloadSize& (0+255),w,b
 18011  00580A  6F6A               	movwf	LORAWAN_GetMaxPayloadSize@result& (0+255),b
 18012  00580C                     l13422:
 18013                           
 18014                           ;lorawan.c: 1570: }
 18015                           ;lorawan.c: 1572: return result;
 18016  00580C  0100               	movlb	0	; () banked
 18017  00580E  516A               	movf	LORAWAN_GetMaxPayloadSize@result& (0+255),w,b
 18018                           
 18019                           ; BSR set to: 0
 18020  005810  0012               	return		;funcret
 18021  005812                     __end_of_LORAWAN_GetMaxPayloadSize:
 18022                           	opt stack 0
 18023  005812                     PL266:
 18024                           	opt stack 20
 18025  005812  0E7D               	movlw	low _maxPayloadSize
 18026  005814  25DF               	addwf	(_loRa+223)& (0+255),w,b
 18027  005816  6EF6               	movwf	tblptrl,c
 18028  005818  6AF7               	clrf	tblptrh,c
 18029  00581A  0E7F               	movlw	high _maxPayloadSize
 18030  00581C  22F7               	addwfc	tblptrh,f,c
 18031  00581E                     	if	0	;There are less than 3 active tblptr bytes
 18032  00581E                     	endif
 18033  00581E  0008               	tblrd		*
 18034  005820  0012               	return	
 18035  005822                     __end_ofPL266:
 18036                           	opt stack 0
 18037                           tosu	equ	0xFFF
 18038                           tosh	equ	0xFFE
 18039                           tosl	equ	0xFFD
 18040                           pclath	equ	0xFFA
 18041                           tblptru	equ	0xFF8
 18042                           tblptrh	equ	0xFF7
 18043                           tblptrl	equ	0xFF6
 18044                           tablat	equ	0xFF5
 18045                           prodh	equ	0xFF4
 18046                           prodl	equ	0xFF3
 18047                           intcon	equ	0xFF2
 18048                           indf0	equ	0xFEF
 18049                           postinc0	equ	0xFEE
 18050                           plusw0	equ	0xFEB
 18051                           fsr0h	equ	0xFEA
 18052                           fsr0l	equ	0xFE9
 18053                           wreg	equ	0xFE8
 18054                           postinc1	equ	0xFE6
 18055                           postdec1	equ	0xFE5
 18056                           plusw1	equ	0xFE3
 18057                           fsr1h	equ	0xFE2
 18058                           fsr1l	equ	0xFE1
 18059                           indf2	equ	0xFDF
 18060                           postinc2	equ	0xFDE
 18061                           postdec2	equ	0xFDD
 18062                           plusw2	equ	0xFDB
 18063                           fsr2h	equ	0xFDA
 18064                           fsr2l	equ	0xFD9
 18065                           status	equ	0xFD8
 18066                           
 18067 ;; *************** function _AssemblePacket *****************
 18068 ;; Defined at:
 18069 ;;		line 1672 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 18070 ;; Parameters:    Size  Location     Type
 18071 ;;  confirmed       1    wreg     unsigned char 
 18072 ;;  port            1  102[BANK1 ] unsigned char 
 18073 ;;  buffer          2  103[BANK1 ] PTR unsigned char 
 18074 ;;		 -> payload(2), NULL(0), 
 18075 ;;  bufferLength    2  105[BANK1 ] unsigned int 
 18076 ;; Auto vars:     Size  Location     Type
 18077 ;;  confirmed       1  120[BANK0 ] unsigned char 
 18078 ;;  bufferIndex     1  124[BANK0 ] unsigned char 
 18079 ;;  macCmdIdx       1  123[BANK0 ] unsigned char 
 18080 ;;  fCtrl           1  122[BANK0 ] struct .
 18081 ;;  mhdr            1  121[BANK0 ] struct .
 18082 ;; Return value:  Size  Location     Type
 18083 ;;                  1    wreg      void 
 18084 ;; Registers used:
 18085 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18086 ;; Tracked objects:
 18087 ;;		On entry : 3F/0
 18088 ;;		On exit  : 3F/2
 18089 ;;		Unchanged: 0/0
 18090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18091 ;;      Params:         0       0       5       0       0       0       0       0       0
 18092 ;;      Locals:         0       5       0       0       0       0       0       0       0
 18093 ;;      Temps:          0       2       0       0       0       0       0       0       0
 18094 ;;      Totals:         0       7       5       0       0       0       0       0       0
 18095 ;;Total ram usage:       12 bytes
 18096 ;; Hardware stack levels used:    1
 18097 ;; Hardware stack levels required when called:   12
 18098 ;; This function calls:
 18099 ;;		_AESCmac
 18100 ;;		_AssembleEncryptionBlock
 18101 ;;		_CountfOptsLength
 18102 ;;		_EncryptFRMPayload
 18103 ;;		_FindSmallestDataRate
 18104 ;;		_IncludeMacCommandsResponse
 18105 ;;		_memcpy
 18106 ;;		_memset
 18107 ;; This function is called by:
 18108 ;;		_LORAWAN_Send
 18109 ;; This function uses a non-reentrant model
 18110 ;;
 18111                           
 18112                           	psect	text94
 18113  00147C                     __ptext94:
 18114                           	opt stack 0
 18115  00147C                     _AssemblePacket:
 18116                           	opt stack 16
 18117                           
 18118                           ; BSR set to: 0
 18119                           ;incstack = 0
 18120                           ;AssemblePacket@confirmed stored from wreg
 18121  00147C  6FD8               	movwf	AssemblePacket@confirmed& (0+255),b
 18122                           
 18123                           ;lorawan.c: 1674: Mhdr_t mhdr;
 18124                           ;lorawan.c: 1675: uint8_t bufferIndex = 16;
 18125  00147E  0E10               	movlw	16
 18126  001480  0100               	movlb	0	; () banked
 18127  001482  6FDC               	movwf	AssemblePacket@bufferIndex& (0+255),b
 18128                           
 18129                           ; BSR set to: 0
 18130                           ;lorawan.c: 1676: FCtrl_t fCtrl;
 18131                           ;lorawan.c: 1677: uint8_t macCmdIdx = 0;
 18132  001484  6BDB               	clrf	AssemblePacket@macCmdIdx& (0+255),b
 18133                           
 18134                           ; BSR set to: 0
 18135                           ;lorawan.c: 1679: memset (&mhdr, 0, sizeof (mhdr) );
 18136  001486  0ED9               	movlw	low AssemblePacket@mhdr
 18137  001488  6F60               	movwf	memset@p1& (0+255),b
 18138  00148A  6B61               	clrf	(memset@p1+1)& (0+255),b
 18139  00148C  6B63               	clrf	(memset@c+1)& (0+255),b
 18140  00148E  6B62               	clrf	memset@c& (0+255),b
 18141  001490  6B65               	clrf	(memset@n+1)& (0+255),b
 18142  001492  0E01               	movlw	1
 18143  001494  6F64               	movwf	memset@n& (0+255),b
 18144  001496  ECEF  F02D         	call	_memset	;wreg free
 18145                           
 18146                           ; BSR set to: 0
 18147                           ;lorawan.c: 1680: memset (&macBuffer[0], 0, sizeof (macBuffer) );
 18148  00149A  EC68  F017         	call	PL166	;call to abstracted procedure
 18149  00149E  ECEF  F02D         	call	_memset	;wreg free
 18150                           
 18151                           ; BSR set to: 0
 18152                           ;lorawan.c: 1681: memset (aesBuffer, 0, sizeof (aesBuffer) );
 18153  0014A2  ECD1  F021         	call	PL196	;call to abstracted procedure
 18154  0014A6  ECC4  F021         	call	PL140	;call to abstracted procedure
 18155  0014AA  ECEF  F02D         	call	_memset	;wreg free
 18156                           
 18157                           ; BSR set to: 0
 18158                           ;lorawan.c: 1683: if (confirmed == 1)
 18159  0014AE  05D8               	decf	AssemblePacket@confirmed& (0+255),w,b
 18160  0014B0  E107               	bnz	l13442
 18161                           
 18162                           ; BSR set to: 0
 18163                           ;lorawan.c: 1684: {
 18164                           ;lorawan.c: 1685: mhdr.bits.mType = FRAME_TYPE_DATA_CONFIRMED_UP;
 18165  0014B2  51D9               	movf	AssemblePacket@mhdr& (0+255),w,b
 18166  0014B4  0B1F               	andlw	-225
 18167  0014B6  0980               	iorlw	128
 18168  0014B8  6FD9               	movwf	AssemblePacket@mhdr& (0+255),b
 18169                           
 18170                           ; BSR set to: 0
 18171                           ;lorawan.c: 1686: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 1;
 18172  0014BA  0102               	movlb	2	; () banked
 18173  0014BC  8100               	bsf	_loRa& (0+255),0,b
 18174                           
 18175                           ;lorawan.c: 1687: }
 18176  0014BE  D004               	goto	l1221
 18177  0014C0                     l13442:
 18178                           
 18179                           ; BSR set to: 0
 18180                           ;lorawan.c: 1688: else
 18181                           ;lorawan.c: 1689: {
 18182                           ;lorawan.c: 1690: mhdr.bits.mType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 18183  0014C0  51D9               	movf	AssemblePacket@mhdr& (0+255),w,b
 18184  0014C2  0B1F               	andlw	-225
 18185  0014C4  0940               	iorlw	64
 18186  0014C6  6FD9               	movwf	AssemblePacket@mhdr& (0+255),b
 18187  0014C8                     l1221:
 18188                           
 18189                           ;lorawan.c: 1691: }
 18190                           ;lorawan.c: 1692: mhdr.bits.major = 0;
 18191  0014C8  0EFC               	movlw	-4
 18192  0014CA  0100               	movlb	0	; () banked
 18193  0014CC  17D9               	andwf	AssemblePacket@mhdr& (0+255),f,b
 18194                           
 18195                           ;lorawan.c: 1693: mhdr.bits.rfu = 0;
 18196  0014CE  0EE3               	movlw	-29
 18197  0014D0  17D9               	andwf	AssemblePacket@mhdr& (0+255),f,b
 18198                           
 18199                           ; BSR set to: 0
 18200                           ;lorawan.c: 1694: macBuffer[bufferIndex++] = mhdr.value;
 18201  0014D2  0EEF               	movlw	low _macBuffer
 18202  0014D4  D917               	call	PL238	;call to abstracted procedure
 18203  0014D6  C0D9  FFDF         	movff	AssemblePacket@mhdr,indf2
 18204                           
 18205                           ; BSR set to: 0
 18206  0014DA  2BDC               	incf	AssemblePacket@bufferIndex& (0+255),f,b
 18207                           
 18208                           ; BSR set to: 0
 18209                           ;lorawan.c: 1696: memcpy (&macBuffer[bufferIndex], loRa.activationParameters.deviceAddre
      +                          ss.buffer, sizeof (loRa.activationParameters.deviceAddress.buffer) );
 18210  0014DC  0EEF               	movlw	low _macBuffer
 18211  0014DE  D8F3               	call	PL176	;call to abstracted procedure
 18212  0014E0  ECD6  F021         	call	PL276	;call to abstracted procedure
 18213  0014E4  ECBF  F021         	call	PL132	;call to abstracted procedure
 18214  0014E8  EC94  F028         	call	_memcpy	;wreg free
 18215                           
 18216                           ; BSR set to: 0
 18217                           ;lorawan.c: 1697: bufferIndex = bufferIndex + sizeof(loRa.activationParameters.deviceAdd
      +                          ress.buffer);
 18218  0014EC  0E04               	movlw	4
 18219  0014EE  27DC               	addwf	AssemblePacket@bufferIndex& (0+255),f,b
 18220                           
 18221                           ; BSR set to: 0
 18222                           ;lorawan.c: 1699: fCtrl.value = 0;
 18223  0014F0  6BDA               	clrf	AssemblePacket@fCtrl& (0+255),b
 18224                           
 18225                           ; BSR set to: 0
 18226                           ;lorawan.c: 1701: if (loRa.macStatus.adr == 1)
 18227  0014F2  0102               	movlb	2	; () banked
 18228  0014F4  AD02               	btfss	(_loRa+2)& (0+255),6,b
 18229  0014F6  D030               	goto	l1222
 18230                           
 18231                           ; BSR set to: 2
 18232                           ;lorawan.c: 1702: {
 18233                           ;lorawan.c: 1703: fCtrl.adr = 1;
 18234  0014F8  0100               	movlb	0	; () banked
 18235  0014FA  8FDA               	bsf	AssemblePacket@fCtrl& (0+255),7,b
 18236                           
 18237                           ; BSR set to: 0
 18238                           ;lorawan.c: 1704: if(loRa.currentDataRate > loRa.minDataRate)
 18239  0014FC  0102               	movlb	2	; () banked
 18240  0014FE  51DF               	movf	(_loRa+223)& (0+255),w,b
 18241  001500  5DEB               	subwf	(_loRa+235)& (0+255),w,b
 18242  001502  E229               	bc	l1223
 18243                           
 18244                           ; BSR set to: 2
 18245                           ;lorawan.c: 1705: {
 18246                           ;lorawan.c: 1706: fCtrl.adrAckReq = 1;
 18247  001504  0100               	movlb	0	; () banked
 18248  001506  8DDA               	bsf	AssemblePacket@fCtrl& (0+255),6,b
 18249                           
 18250                           ;lorawan.c: 1707: loRa.lorawanMacStatus.adrAckRequest = 1;
 18251  001508  0102               	movlb	2	; () banked
 18252  00150A  8900               	bsf	_loRa& (0+255),4,b
 18253                           
 18254                           ; BSR set to: 2
 18255                           ;lorawan.c: 1708: loRa.adrAckCnt ++;
 18256  00150C  4BD0               	infsnz	(_loRa+208)& (0+255),f,b
 18257  00150E  2BD1               	incf	(_loRa+209)& (0+255),f,b
 18258                           
 18259                           ; BSR set to: 2
 18260                           ;lorawan.c: 1710: if ( loRa.adrAckCnt == loRa.protocolParameters.adrAckLimit )
 18261  001510  51A2               	movf	(_loRa+162)& (0+255),w,b
 18262  001512  19D0               	xorwf	(_loRa+208)& (0+255),w,b
 18263  001514  11D1               	iorwf	(_loRa+209)& (0+255),w,b
 18264  001516  E102               	bnz	l13468
 18265                           
 18266                           ; BSR set to: 2
 18267                           ;lorawan.c: 1711: {
 18268                           ;lorawan.c: 1712: loRa.counterAdrAckDelay = 0;
 18269  001518  6BEE               	clrf	(_loRa+238)& (0+255),b
 18270  00151A  D01A               	goto	L11
 18271  00151C                     l13468:
 18272                           
 18273                           ; BSR set to: 2
 18274                           ;lorawan.c: 1716: else
 18275                           ;lorawan.c: 1717: {
 18276                           ;lorawan.c: 1718: if (loRa.adrAckCnt > loRa.protocolParameters.adrAckLimit)
 18277  00151C  51A2               	movf	(_loRa+162)& (0+255),w,b
 18278  00151E  0100               	movlb	0	; () banked
 18279  001520  6FD6               	movwf	??_AssemblePacket& (0+255),b
 18280  001522  6BD7               	clrf	(??_AssemblePacket+1)& (0+255),b
 18281  001524  0102               	movlb	2	; () banked
 18282  001526  51D0               	movf	(_loRa+208)& (0+255),w,b
 18283  001528  0100               	movlb	0	; () banked
 18284  00152A  5DD6               	subwf	??_AssemblePacket& (0+255),w,b
 18285  00152C  0102               	movlb	2	; () banked
 18286  00152E  51D1               	movf	(_loRa+209)& (0+255),w,b
 18287  001530  0100               	movlb	0	; () banked
 18288  001532  59D7               	subwfb	(??_AssemblePacket+1)& (0+255),w,b
 18289  001534  E20E               	bc	l1226
 18290                           
 18291                           ; BSR set to: 0
 18292                           ;lorawan.c: 1719: {
 18293                           ;lorawan.c: 1721: loRa.counterAdrAckDelay ++ ;
 18294  001536  0102               	movlb	2	; () banked
 18295  001538  2BEE               	incf	(_loRa+238)& (0+255),f,b
 18296                           
 18297                           ; BSR set to: 2
 18298                           ;lorawan.c: 1724: if (loRa.counterAdrAckDelay > loRa.protocolParameters.adrAckDelay)
 18299  00153A  51EE               	movf	(_loRa+238)& (0+255),w,b
 18300  00153C  5DA3               	subwf	(_loRa+163)& (0+255),w,b
 18301  00153E  E20C               	bc	l1222
 18302                           
 18303                           ; BSR set to: 2
 18304                           ;lorawan.c: 1725: {
 18305                           ;lorawan.c: 1726: loRa.counterAdrAckDelay = 0;
 18306  001540  6BEE               	clrf	(_loRa+238)& (0+255),b
 18307                           
 18308                           ; BSR set to: 2
 18309                           ;lorawan.c: 1728: if(0 == FindSmallestDataRate())
 18310  001542  EC66  F023         	call	_FindSmallestDataRate	;wreg free
 18311  001546  0900               	iorlw	0
 18312  001548  E107               	bnz	l1222
 18313                           
 18314                           ; BSR set to: 0
 18315                           ;lorawan.c: 1729: {
 18316                           ;lorawan.c: 1731: loRa.adrAckCnt = 0;
 18317  00154A  0102               	movlb	2	; () banked
 18318  00154C  6BD0               	clrf	(_loRa+208)& (0+255),b
 18319  00154E  6BD1               	clrf	(_loRa+209)& (0+255),b
 18320  001550                     L11:
 18321                           
 18322                           ;lorawan.c: 1732: fCtrl.adrAckReq = 0;
 18323  001550  0100               	movlb	0	; () banked
 18324  001552                     l1226:
 18325                           
 18326                           ; BSR set to: 0
 18327                           ;lorawan.c: 1737: else
 18328                           ;lorawan.c: 1738: {
 18329                           ;lorawan.c: 1739: fCtrl.adrAckReq = 0;
 18330  001552  9DDA               	bcf	AssemblePacket@fCtrl& (0+255),6,b
 18331                           
 18332                           ;lorawan.c: 1740: loRa.lorawanMacStatus.adrAckRequest = 0;
 18333  001554  0102               	movlb	2	; () banked
 18334  001556                     l1223:
 18335                           
 18336                           ; BSR set to: 2
 18337                           ;lorawan.c: 1744: else
 18338                           ;lorawan.c: 1745: {
 18339                           ;lorawan.c: 1746: loRa.lorawanMacStatus.adrAckRequest = 0;
 18340  001556  9900               	bcf	_loRa& (0+255),4,b
 18341  001558                     l1222:
 18342                           
 18343                           ;lorawan.c: 1747: }
 18344                           ;lorawan.c: 1748: }
 18345                           ;lorawan.c: 1750: if (loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage == 1)
 18346  001558  0102               	movlb	2	; () banked
 18347  00155A  A300               	btfss	_loRa& (0+255),1,b
 18348  00155C  D004               	goto	l1231
 18349                           
 18350                           ; BSR set to: 2
 18351                           ;lorawan.c: 1751: {
 18352                           ;lorawan.c: 1752: fCtrl.ack = 1;
 18353  00155E  0100               	movlb	0	; () banked
 18354  001560  8BDA               	bsf	AssemblePacket@fCtrl& (0+255),5,b
 18355                           
 18356                           ;lorawan.c: 1753: loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage = 0;
 18357  001562  0102               	movlb	2	; () banked
 18358  001564  9300               	bcf	_loRa& (0+255),1,b
 18359  001566                     l1231:
 18360                           
 18361                           ; BSR set to: 2
 18362                           ;lorawan.c: 1754: }
 18363                           ;lorawan.c: 1756: fCtrl.fPending = 0;
 18364  001566  0100               	movlb	0	; () banked
 18365  001568  99DA               	bcf	AssemblePacket@fCtrl& (0+255),4,b
 18366                           
 18367                           ; BSR set to: 0
 18368                           ;lorawan.c: 1758: if ( (loRa.crtMacCmdIndex == 0) || (bufferLength == 0) )
 18369  00156A  0102               	movlb	2	; () banked
 18370  00156C  51A7               	movf	(_loRa+167)& (0+255),w,b
 18371  00156E  E004               	bz	l13486
 18372                           
 18373                           ; BSR set to: 2
 18374  001570  0101               	movlb	1	; () banked
 18375  001572  5169               	movf	AssemblePacket@bufferLength& (0+255),w,b
 18376  001574  116A               	iorwf	(AssemblePacket@bufferLength+1)& (0+255),w,b
 18377  001576  E104               	bnz	l13488
 18378  001578                     l13486:
 18379                           
 18380                           ;lorawan.c: 1759: {
 18381                           ;lorawan.c: 1760: fCtrl.fOptsLen = 0;
 18382  001578  0EF0               	movlw	-16
 18383  00157A  0100               	movlb	0	; () banked
 18384  00157C  17DA               	andwf	AssemblePacket@fCtrl& (0+255),f,b
 18385                           
 18386                           ;lorawan.c: 1761: }
 18387  00157E  D007               	goto	l13490
 18388  001580                     l13488:
 18389                           
 18390                           ; BSR set to: 1
 18391                           ;lorawan.c: 1763: else
 18392                           ;lorawan.c: 1764: {
 18393                           ;lorawan.c: 1765: fCtrl.fOptsLen = CountfOptsLength();
 18394  001580  EC2C  F024         	call	_CountfOptsLength	;wreg free
 18395  001584  6FD6               	movwf	??_AssemblePacket& (0+255),b
 18396  001586  19DA               	xorwf	AssemblePacket@fCtrl& (0+255),w,b
 18397  001588  0BF0               	andlw	-16
 18398  00158A  19D6               	xorwf	??_AssemblePacket& (0+255),w,b
 18399  00158C  6FDA               	movwf	AssemblePacket@fCtrl& (0+255),b
 18400  00158E                     l13490:
 18401                           
 18402                           ; BSR set to: 0
 18403                           ;lorawan.c: 1766: }
 18404                           ;lorawan.c: 1767: macBuffer[bufferIndex++] = fCtrl.value;
 18405  00158E  0EEF               	movlw	low _macBuffer
 18406  001590  D8B9               	call	PL238	;call to abstracted procedure
 18407  001592  C0DA  FFDF         	movff	AssemblePacket@fCtrl,indf2
 18408                           
 18409                           ; BSR set to: 0
 18410  001596  2BDC               	incf	AssemblePacket@bufferIndex& (0+255),f,b
 18411                           
 18412                           ; BSR set to: 0
 18413                           ;lorawan.c: 1769: memcpy (&macBuffer[bufferIndex], &loRa.fCntUp.members.valueLow, sizeof
      +                           (loRa.fCntUp.members.valueLow) );
 18414  001598  0EEF               	movlw	low _macBuffer
 18415  00159A  D895               	call	PL176	;call to abstracted procedure
 18416  00159C  0E06               	movlw	low (_loRa+6)
 18417  00159E  6F62               	movwf	memcpy@s1& (0+255),b
 18418  0015A0  0E02               	movlw	high (_loRa+6)
 18419  0015A2  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 18420  0015A4  6B65               	clrf	(memcpy@n+1)& (0+255),b
 18421  0015A6  0E02               	movlw	2
 18422  0015A8  6F64               	movwf	memcpy@n& (0+255),b
 18423  0015AA  EC94  F028         	call	_memcpy	;wreg free
 18424                           
 18425                           ; BSR set to: 0
 18426                           ;lorawan.c: 1771: bufferIndex = bufferIndex + sizeof(loRa.fCntUp.members.valueLow);
 18427  0015AE  0E02               	movlw	2
 18428  0015B0  27DC               	addwf	AssemblePacket@bufferIndex& (0+255),f,b
 18429                           
 18430                           ; BSR set to: 0
 18431                           ;lorawan.c: 1773: if ( (loRa.crtMacCmdIndex != 0) && (bufferLength != 0) )
 18432  0015B2  0102               	movlb	2	; () banked
 18433  0015B4  51A7               	movf	(_loRa+167)& (0+255),w,b
 18434  0015B6  E00F               	bz	l13504
 18435                           
 18436                           ; BSR set to: 2
 18437  0015B8  0101               	movlb	1	; () banked
 18438  0015BA  5169               	movf	AssemblePacket@bufferLength& (0+255),w,b
 18439  0015BC  116A               	iorwf	(AssemblePacket@bufferLength+1)& (0+255),w,b
 18440  0015BE  E00B               	bz	l13504
 18441                           
 18442                           ; BSR set to: 1
 18443                           ;lorawan.c: 1774: {
 18444                           ;lorawan.c: 1775: IncludeMacCommandsResponse (macBuffer, &bufferIndex, 1);
 18445  0015C0  0EEF               	movlw	low _macBuffer
 18446  0015C2  0100               	movlb	0	; () banked
 18447  0015C4  6F60               	movwf	IncludeMacCommandsResponse@macBuffer& (0+255),b
 18448  0015C6  0E05               	movlw	high _macBuffer
 18449  0015C8  6F61               	movwf	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),b
 18450  0015CA  0EDC               	movlw	low AssemblePacket@bufferIndex
 18451  0015CC  6F62               	movwf	IncludeMacCommandsResponse@pBufferIndex& (0+255),b
 18452  0015CE  0E01               	movlw	1
 18453  0015D0  6F63               	movwf	IncludeMacCommandsResponse@bIncludeInFopts& (0+255),b
 18454  0015D2  ECC2  F00F         	call	_IncludeMacCommandsResponse	;wreg free
 18455  0015D6                     l13504:
 18456                           
 18457                           ;lorawan.c: 1776: }
 18458                           ;lorawan.c: 1778: macBuffer[bufferIndex++] = port;
 18459  0015D6  0EEF               	movlw	low _macBuffer
 18460  0015D8  0100               	movlb	0	; () banked
 18461  0015DA  D894               	call	PL238	;call to abstracted procedure
 18462  0015DC  C166  FFDF         	movff	AssemblePacket@port,indf2
 18463                           
 18464                           ; BSR set to: 0
 18465  0015E0  2BDC               	incf	AssemblePacket@bufferIndex& (0+255),f,b
 18466                           
 18467                           ; BSR set to: 0
 18468                           ;lorawan.c: 1780: if (bufferLength != 0)
 18469  0015E2  0101               	movlb	1	; () banked
 18470  0015E4  5169               	movf	AssemblePacket@bufferLength& (0+255),w,b
 18471  0015E6  116A               	iorwf	(AssemblePacket@bufferLength+1)& (0+255),w,b
 18472  0015E8  E01C               	bz	l13516
 18473                           
 18474                           ; BSR set to: 1
 18475                           ;lorawan.c: 1781: {
 18476                           ;lorawan.c: 1782: memcpy (&macBuffer[bufferIndex], buffer, bufferLength);
 18477  0015EA  0EEF               	movlw	low _macBuffer
 18478  0015EC  0100               	movlb	0	; () banked
 18479  0015EE  D86B               	call	PL176	;call to abstracted procedure
 18480  0015F0  C167  F062         	movff	AssemblePacket@buffer,memcpy@s1
 18481  0015F4  C168  F063         	movff	AssemblePacket@buffer+1,memcpy@s1+1
 18482  0015F8  C169  F064         	movff	AssemblePacket@bufferLength,memcpy@n
 18483  0015FC  C16A  F065         	movff	AssemblePacket@bufferLength+1,memcpy@n+1
 18484  001600  EC94  F028         	call	_memcpy	;wreg free
 18485                           
 18486                           ; BSR set to: 0
 18487                           ;lorawan.c: 1783: EncryptFRMPayload (buffer, bufferLength, 0, loRa.fCntUp.value, loRa.ac
      +                          tivationParameters.applicationSessionKey, bufferIndex, macBuffer, 0);
 18488  001604  C167  F0A0         	movff	AssemblePacket@buffer,EncryptFRMPayload@buffer
 18489  001608  C168  F0A1         	movff	AssemblePacket@buffer+1,EncryptFRMPayload@buffer+1
 18490  00160C  C169  F0A2         	movff	AssemblePacket@bufferLength,EncryptFRMPayload@bufferLength
 18491  001610  D860               	call	PL198	;call to abstracted procedure
 18492  001612  D882               	call	PL414	;call to abstracted procedure
 18493  001614  D86E               	call	PL216	;call to abstracted procedure
 18494  001616  ECDD  F015         	call	_EncryptFRMPayload	;wreg free
 18495                           
 18496                           ; BSR set to: 0
 18497                           ;lorawan.c: 1784: bufferIndex = bufferIndex + bufferLength;
 18498  00161A  0101               	movlb	1	; () banked
 18499  00161C  5169               	movf	AssemblePacket@bufferLength& (0+255),w,b
 18500  00161E  0100               	movlb	0	; () banked
 18501  001620  D019               	goto	L10
 18502  001622                     l13516:
 18503                           
 18504                           ; BSR set to: 1
 18505                           ;lorawan.c: 1786: else if ( (loRa.crtMacCmdIndex > 0) )
 18506  001622  0102               	movlb	2	; () banked
 18507  001624  51A7               	movf	(_loRa+167)& (0+255),w,b
 18508  001626  E017               	bz	l13522
 18509                           
 18510                           ; BSR set to: 2
 18511                           ;lorawan.c: 1787: {
 18512                           ;lorawan.c: 1790: IncludeMacCommandsResponse (radioBuffer, &macCmdIdx, 0 );
 18513  001628  0EE0               	movlw	low _radioBuffer
 18514  00162A  0100               	movlb	0	; () banked
 18515  00162C  6F60               	movwf	IncludeMacCommandsResponse@macBuffer& (0+255),b
 18516  00162E  0E04               	movlw	high _radioBuffer
 18517  001630  6F61               	movwf	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),b
 18518  001632  0EDB               	movlw	low AssemblePacket@macCmdIdx
 18519  001634  6F62               	movwf	IncludeMacCommandsResponse@pBufferIndex& (0+255),b
 18520  001636  6B63               	clrf	IncludeMacCommandsResponse@bIncludeInFopts& (0+255),b
 18521  001638  ECC2  F00F         	call	_IncludeMacCommandsResponse	;wreg free
 18522                           
 18523                           ;lorawan.c: 1791: EncryptFRMPayload (radioBuffer, macCmdIdx, 0, loRa.fCntUp.value, loRa.
      +                          activationParameters.networkSessionKey, bufferIndex, macBuffer, 0);
 18524  00163C  0EE0               	movlw	low _radioBuffer
 18525  00163E  6FA0               	movwf	EncryptFRMPayload@buffer& (0+255),b
 18526  001640  0E04               	movlw	high _radioBuffer
 18527  001642  6FA1               	movwf	(EncryptFRMPayload@buffer+1)& (0+255),b
 18528  001644  C0DB  F0A2         	movff	AssemblePacket@macCmdIdx,EncryptFRMPayload@bufferLength
 18529  001648  D844               	call	PL198	;call to abstracted procedure
 18530  00164A  D862               	call	PL412	;call to abstracted procedure
 18531  00164C  D852               	call	PL216	;call to abstracted procedure
 18532  00164E  ECDD  F015         	call	_EncryptFRMPayload	;wreg free
 18533                           
 18534                           ; BSR set to: 0
 18535                           ;lorawan.c: 1792: bufferIndex = bufferIndex + macCmdIdx;
 18536  001652  51DB               	movf	AssemblePacket@macCmdIdx& (0+255),w,b
 18537  001654                     L10:
 18538  001654  27DC               	addwf	AssemblePacket@bufferIndex& (0+255),f,b
 18539  001656                     l13522:
 18540                           
 18541                           ;lorawan.c: 1793: }
 18542                           ;lorawan.c: 1795: AssembleEncryptionBlock (0, loRa.fCntUp.value, bufferIndex - 16, 0x49,
      +                           0);
 18543  001656  C206  F06A         	movff	_loRa+6,AssembleEncryptionBlock@frameCounter
 18544  00165A  C207  F06B         	movff	_loRa+7,AssembleEncryptionBlock@frameCounter+1
 18545  00165E  C208  F06C         	movff	_loRa+8,AssembleEncryptionBlock@frameCounter+2
 18546  001662  C209  F06D         	movff	_loRa+9,AssembleEncryptionBlock@frameCounter+3
 18547  001666  0100               	movlb	0	; () banked
 18548  001668  51DC               	movf	AssemblePacket@bufferIndex& (0+255),w,b
 18549  00166A  0FF0               	addlw	240
 18550  00166C  6F6E               	movwf	AssembleEncryptionBlock@blockId& (0+255),b
 18551  00166E  0E49               	movlw	73
 18552  001670  6F6F               	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 18553  001672  0E00               	movlw	0
 18554  001674  6B70               	clrf	AssembleEncryptionBlock@multicastStatus& (0+255),b
 18555  001676  EC8F  F021         	call	_AssembleEncryptionBlock
 18556                           
 18557                           ; BSR set to: 0
 18558                           ;lorawan.c: 1796: memcpy (&macBuffer[0], aesBuffer, sizeof (aesBuffer));
 18559  00167A  0EEF               	movlw	low _macBuffer
 18560  00167C  6F60               	movwf	memcpy@d1& (0+255),b
 18561  00167E  0E05               	movlw	high _macBuffer
 18562  001680  ECB7  F003         	call	PL124	;call to abstracted procedure
 18563  001684  EC94  F028         	call	_memcpy	;wreg free
 18564                           
 18565                           ; BSR set to: 0
 18566                           ;lorawan.c: 1798: AESCmac (loRa.activationParameters.networkSessionKey, aesBuffer, macBu
      +                          ffer, bufferIndex );
 18567  001688  D82E               	call	PL212	;call to abstracted procedure
 18568  00168A  6FCA               	movwf	AESCmac@output& (0+255),b
 18569  00168C  0E01               	movlw	high _aesBuffer
 18570  00168E  6FCB               	movwf	(AESCmac@output+1)& (0+255),b
 18571  001690  0EEF               	movlw	low _macBuffer
 18572  001692  6FCC               	movwf	AESCmac@input& (0+255),b
 18573  001694  0E05               	movlw	high _macBuffer
 18574  001696  6FCD               	movwf	(AESCmac@input+1)& (0+255),b
 18575  001698  C0DC  F0CE         	movff	AssemblePacket@bufferIndex,AESCmac@size
 18576  00169C  ECD2  F008         	call	_AESCmac	;wreg free
 18577                           
 18578                           ; BSR set to: 0
 18579                           ;lorawan.c: 1800: memcpy (&macBuffer[bufferIndex], aesBuffer, 4);
 18580  0016A0  0EEF               	movlw	low _macBuffer
 18581  0016A2  D811               	call	PL176	;call to abstracted procedure
 18582  0016A4  0EB5               	movlw	low _aesBuffer
 18583  0016A6  6F62               	movwf	memcpy@s1& (0+255),b
 18584  0016A8  0E01               	movlw	high _aesBuffer
 18585  0016AA  ECBF  F021         	call	PL132	;call to abstracted procedure
 18586  0016AE  EC94  F028         	call	_memcpy	;wreg free
 18587                           
 18588                           ; BSR set to: 0
 18589                           ;lorawan.c: 1801: bufferIndex = bufferIndex + 4;
 18590  0016B2  0E04               	movlw	4
 18591  0016B4  27DC               	addwf	AssemblePacket@bufferIndex& (0+255),f,b
 18592                           
 18593                           ; BSR set to: 0
 18594                           ;lorawan.c: 1803: loRa.lastPacketLength = bufferIndex - 16;
 18595  0016B6  0EF0               	movlw	240
 18596  0016B8  25DC               	addwf	AssemblePacket@bufferIndex& (0+255),w,b
 18597  0016BA  0102               	movlb	2	; () banked
 18598  0016BC  6FD4               	movwf	(_loRa+212)& (0+255),b
 18599  0016BE  6BD5               	clrf	(_loRa+213)& (0+255),b
 18600  0016C0  0EFF               	movlw	255
 18601  0016C2  23D5               	addwfc	(_loRa+213)& (0+255),f,b
 18602                           
 18603                           ; BSR set to: 2
 18604  0016C4  0CFF               	retlw	255	;funcret
 18605  0016C6                     __end_of_AssemblePacket:
 18606                           	opt stack 0
 18607  0016C6                     PL176:
 18608                           	opt stack 16
 18609  0016C6  25DC               	addwf	AssemblePacket@bufferIndex& (0+255),w,b
 18610  0016C8  6F60               	movwf	memcpy@d1& (0+255),b
 18611  0016CA  6B61               	clrf	(memcpy@d1+1)& (0+255),b
 18612  0016CC  0E05               	movlw	high _macBuffer
 18613  0016CE  2361               	addwfc	(memcpy@d1+1)& (0+255),f,b
 18614  0016D0  0012               	return	
 18615  0016D2                     __end_ofPL176:
 18616                           	opt stack 0
 18617  0016D2                     PL198:
 18618                           	opt stack 16
 18619  0016D2  6BA3               	clrf	EncryptFRMPayload@dir& (0+255),b
 18620  0016D4  C206  F0A4         	movff	_loRa+6,EncryptFRMPayload@frameCounter
 18621  0016D8  C207  F0A5         	movff	_loRa+7,EncryptFRMPayload@frameCounter+1
 18622  0016DC  C208  F0A6         	movff	_loRa+8,EncryptFRMPayload@frameCounter+2
 18623  0016E0  C209  F0A7         	movff	_loRa+9,EncryptFRMPayload@frameCounter+3
 18624  0016E4  0012               	return	
 18625  0016E6                     __end_ofPL198:
 18626                           	opt stack 0
 18627  0016E6                     PL212:
 18628                           	opt stack 12
 18629  0016E6  0E22               	movlw	low (_loRa+34)
 18630  0016E8  6FC8               	movwf	AESCmac@key& (0+255),b
 18631  0016EA  0E02               	movlw	high (_loRa+34)
 18632  0016EC  6FC9               	movwf	(AESCmac@key+1)& (0+255),b
 18633  0016EE  0EB5               	movlw	low _aesBuffer
 18634  0016F0  0012               	return	
 18635  0016F2                     __end_ofPL212:
 18636                           	opt stack 0
 18637  0016F2                     PL216:
 18638                           	opt stack 16
 18639  0016F2  6FA9               	movwf	(EncryptFRMPayload@key+1)& (0+255),b
 18640  0016F4  C0DC  F0AA         	movff	AssemblePacket@bufferIndex,EncryptFRMPayload@macBufferIndex
 18641  0016F8  0EEF               	movlw	low _macBuffer
 18642  0016FA  6FAB               	movwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),b
 18643  0016FC  0E05               	movlw	high _macBuffer
 18644  0016FE  6FAC               	movwf	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),b
 18645  001700  6BAD               	clrf	EncryptFRMPayload@multicastStatus& (0+255),b
 18646  001702  0012               	return	
 18647  001704                     __end_ofPL216:
 18648                           	opt stack 0
 18649  001704                     PL238:
 18650                           	opt stack 16
 18651  001704  25DC               	addwf	AssemblePacket@bufferIndex& (0+255),w,b
 18652  001706  6ED9               	movwf	fsr2l,c
 18653  001708  6ADA               	clrf	fsr2h,c
 18654  00170A  0E05               	movlw	high _macBuffer
 18655  00170C  22DA               	addwfc	fsr2h,f,c
 18656  00170E  0012               	return	
 18657  001710                     __end_ofPL238:
 18658                           	opt stack 0
 18659  001710                     PL412:
 18660                           	opt stack 12
 18661  001710  0E22               	movlw	low (_loRa+34)
 18662  001712  6FA8               	movwf	EncryptFRMPayload@key& (0+255),b
 18663  001714  0E02               	movlw	high (_loRa+34)
 18664  001716  0012               	return	
 18665  001718                     __end_ofPL412:
 18666                           	opt stack 0
 18667  001718                     PL414:
 18668                           	opt stack 12
 18669  001718  0E32               	movlw	low (_loRa+50)
 18670  00171A  6FA8               	movwf	EncryptFRMPayload@key& (0+255),b
 18671  00171C  0E02               	movlw	high (_loRa+50)
 18672  00171E  0012               	return	
 18673  001720                     __end_ofPL414:
 18674                           	opt stack 0
 18675                           tosu	equ	0xFFF
 18676                           tosh	equ	0xFFE
 18677                           tosl	equ	0xFFD
 18678                           pclath	equ	0xFFA
 18679                           tblptru	equ	0xFF8
 18680                           tblptrh	equ	0xFF7
 18681                           tblptrl	equ	0xFF6
 18682                           tablat	equ	0xFF5
 18683                           prodh	equ	0xFF4
 18684                           prodl	equ	0xFF3
 18685                           intcon	equ	0xFF2
 18686                           indf0	equ	0xFEF
 18687                           postinc0	equ	0xFEE
 18688                           plusw0	equ	0xFEB
 18689                           fsr0h	equ	0xFEA
 18690                           fsr0l	equ	0xFE9
 18691                           wreg	equ	0xFE8
 18692                           postinc1	equ	0xFE6
 18693                           postdec1	equ	0xFE5
 18694                           plusw1	equ	0xFE3
 18695                           fsr1h	equ	0xFE2
 18696                           fsr1l	equ	0xFE1
 18697                           indf2	equ	0xFDF
 18698                           postinc2	equ	0xFDE
 18699                           postdec2	equ	0xFDD
 18700                           plusw2	equ	0xFDB
 18701                           fsr2h	equ	0xFDA
 18702                           fsr2l	equ	0xFD9
 18703                           status	equ	0xFD8
 18704                           
 18705 ;; *************** function _IncludeMacCommandsResponse *****************
 18706 ;; Defined at:
 18707 ;;		line 1845 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 18708 ;; Parameters:    Size  Location     Type
 18709 ;;  macBuffer       2    0[BANK0 ] PTR unsigned char 
 18710 ;;		 -> radioBuffer(271), macBuffer(271), 
 18711 ;;  pBufferIndex    1    2[BANK0 ] PTR unsigned char 
 18712 ;;		 -> AssemblePacket@macCmdIdx(1), AssemblePacket@bufferIndex(1), 
 18713 ;;  bIncludeInFo    1    3[BANK0 ] unsigned char 
 18714 ;; Auto vars:     Size  Location     Type
 18715 ;;  bufferIndex     1   11[BANK0 ] unsigned char 
 18716 ;;  i               1   10[BANK0 ] unsigned char 
 18717 ;; Return value:  Size  Location     Type
 18718 ;;                  1    wreg      void 
 18719 ;; Registers used:
 18720 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18721 ;; Tracked objects:
 18722 ;;		On entry : 3F/0
 18723 ;;		On exit  : 3F/0
 18724 ;;		Unchanged: 0/0
 18725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18726 ;;      Params:         0       4       0       0       0       0       0       0       0
 18727 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18728 ;;      Temps:          0       6       0       0       0       0       0       0       0
 18729 ;;      Totals:         0      12       0       0       0       0       0       0       0
 18730 ;;Total ram usage:       12 bytes
 18731 ;; Hardware stack levels used:    1
 18732 ;; Hardware stack levels required when called:    8
 18733 ;; This function calls:
 18734 ;;		_RADIO_GetPacketSnr
 18735 ;; This function is called by:
 18736 ;;		_AssemblePacket
 18737 ;; This function uses a non-reentrant model
 18738 ;;
 18739                           
 18740                           	psect	text95
 18741  001F84                     __ptext95:
 18742                           	opt stack 0
 18743  001F84                     _IncludeMacCommandsResponse:
 18744                           	opt stack 0
 18745                           
 18746                           ; BSR set to: 0
 18747                           ;lorawan.c: 1848: uint8_t bufferIndex = *pBufferIndex;
 18748                           
 18749                           ; BSR set to: 0
 18750                           
 18751                           ; BSR set to: 2
 18752                           ;incstack = 0
 18753  001F84  D8E8               	call	PL392	;call to abstracted procedure
 18754  001F86  6F6B               	movwf	IncludeMacCommandsResponse@bufferIndex& (0+255),b
 18755                           
 18756                           ; BSR set to: 0
 18757                           ;lorawan.c: 1850: for(i = 0; i < loRa.crtMacCmdIndex ; i++)
 18758  001F88  6B6A               	clrf	IncludeMacCommandsResponse@i& (0+255),b
 18759  001F8A  D0CA               	goto	l13150
 18760  001F8C                     l13054:
 18761                           
 18762                           ; BSR set to: 0
 18763                           ;lorawan.c: 1851: {
 18764                           ;lorawan.c: 1852: if((bIncludeInFopts) && (loRa.macCommands[i].receivedCid != 0xFF))
 18765  001F8C  5163               	movf	IncludeMacCommandsResponse@bIncludeInFopts& (0+255),w,b
 18766  001F8E  E101 D0B4          	bz	l13146
 18767                           
 18768                           ; BSR set to: 0
 18769  001F92  516A               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18770  001F94  D8D8               	call	PL16	;call to abstracted procedure
 18771  001F96  28DE               	incf	postinc2,w,c
 18772  001F98  E101 D0AF          	bz	l13146
 18773                           
 18774                           ; BSR set to: 0
 18775                           ;lorawan.c: 1853: {
 18776                           ;lorawan.c: 1854: if((bufferIndex - (*pBufferIndex) + macEndDevCmdReplyLen[loRa.macComma
      +                          nds[i].receivedCid - 2]) > 0x0F)
 18777  001F9C  0EFE               	movlw	254
 18778  001F9E  6F64               	movwf	??_IncludeMacCommandsResponse& (0+255),b
 18779  001FA0  6965               	setf	(??_IncludeMacCommandsResponse+1)& (0+255),b
 18780  001FA2  516A               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18781  001FA4  D8D0               	call	PL16	;call to abstracted procedure
 18782  001FA6  50DF               	movf	indf2,w,c
 18783  001FA8  6F66               	movwf	(??_IncludeMacCommandsResponse+2)& (0+255),b
 18784  001FAA  6B67               	clrf	(??_IncludeMacCommandsResponse+3)& (0+255),b
 18785  001FAC  5164               	movf	??_IncludeMacCommandsResponse& (0+255),w,b
 18786  001FAE  2766               	addwf	(??_IncludeMacCommandsResponse+2)& (0+255),f,b
 18787  001FB0  5165               	movf	(??_IncludeMacCommandsResponse+1)& (0+255),w,b
 18788  001FB2  2367               	addwfc	(??_IncludeMacCommandsResponse+3)& (0+255),f,b
 18789  001FB4  0E9B               	movlw	low _macEndDevCmdReplyLen
 18790  001FB6  2566               	addwf	(??_IncludeMacCommandsResponse+2)& (0+255),w,b
 18791  001FB8  6EF6               	movwf	tblptrl,c
 18792  001FBA  0E7F               	movlw	high _macEndDevCmdReplyLen
 18793  001FBC  2167               	addwfc	(??_IncludeMacCommandsResponse+3)& (0+255),w,b
 18794  001FBE  6EF7               	movwf	tblptrh,c
 18795  001FC0                     	if	0	;There are less than 3 active tblptr bytes
 18796  001FC0                     	endif
 18797  001FC0  0008               	tblrd		*
 18798  001FC2  50F5               	movf	tablat,w,c
 18799  001FC4  C06B  F068         	movff	IncludeMacCommandsResponse@bufferIndex,??_IncludeMacCommandsResponse+4
 18800  001FC8  6B69               	clrf	(??_IncludeMacCommandsResponse+5)& (0+255),b
 18801  001FCA  2768               	addwf	(??_IncludeMacCommandsResponse+4)& (0+255),f,b
 18802  001FCC  0E00               	movlw	0
 18803  001FCE  2369               	addwfc	(??_IncludeMacCommandsResponse+5)& (0+255),f,b
 18804  001FD0  D8C2               	call	PL392	;call to abstracted procedure
 18805  001FD2  5F68               	subwf	(??_IncludeMacCommandsResponse+4)& (0+255),f,b
 18806  001FD4  0E00               	movlw	0
 18807  001FD6  5B69               	subwfb	(??_IncludeMacCommandsResponse+5)& (0+255),f,b
 18808  001FD8  BF69               	btfsc	(??_IncludeMacCommandsResponse+5)& (0+255),7,b
 18809  001FDA  D08F               	goto	l13146
 18810  001FDC  5169               	movf	(??_IncludeMacCommandsResponse+5)& (0+255),w,b
 18811  001FDE  E105               	bnz	u14370
 18812  001FE0  0E10               	movlw	16
 18813  001FE2  5D68               	subwf	(??_IncludeMacCommandsResponse+4)& (0+255),w,b
 18814  001FE4  E301 D0A2          	bc	l13152
 18815  001FE8  D088               	goto	l13146
 18816  001FEA                     u14370:
 18817  001FEA  D0A0               	goto	l13152
 18818  001FEC                     l13062:
 18819                           
 18820                           ; BSR set to: 0
 18821                           ;lorawan.c: 1862: {
 18822                           ;lorawan.c: 1863: macBuffer[bufferIndex++] = LINK_ADR_CID;
 18823  001FEC  D8A5               	call	PL14	;call to abstracted procedure
 18824  001FEE  0E03               	movlw	3
 18825  001FF0  6EDF               	movwf	indf2,c
 18826                           
 18827                           ; BSR set to: 0
 18828  001FF2  2B6B               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 18829                           
 18830                           ; BSR set to: 0
 18831                           ;lorawan.c: 1864: macBuffer[bufferIndex] = 0x00;
 18832  001FF4  D8A1               	call	PL14	;call to abstracted procedure
 18833  001FF6  6ADF               	clrf	indf2,c
 18834                           
 18835                           ; BSR set to: 0
 18836                           ;lorawan.c: 1865: if (loRa.macCommands[i].channelMaskAck == 1)
 18837  001FF8  516A               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18838  001FFA  ECCB  F015         	call	PL2	;call to abstracted procedure
 18839  001FFE  A0DF               	btfss	indf2,0,c
 18840  002000  D004               	goto	l13072
 18841                           
 18842                           ; BSR set to: 2
 18843                           ;lorawan.c: 1866: {
 18844                           ;lorawan.c: 1867: macBuffer[bufferIndex] |= 0x01;
 18845  002002  0100               	movlb	0	; () banked
 18846  002004  D899               	call	PL14	;call to abstracted procedure
 18847  002006  0E00               	movlw	0
 18848  002008  80DB               	bsf	plusw2,0,c
 18849  00200A                     l13072:
 18850                           
 18851                           ;lorawan.c: 1868: }
 18852                           ;lorawan.c: 1870: if (loRa.macCommands[i].dataRateAck == 1)
 18853  00200A  0100               	movlb	0	; () banked
 18854  00200C  516A               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18855  00200E  ECCB  F015         	call	PL2	;call to abstracted procedure
 18856  002012  A2DF               	btfss	indf2,1,c
 18857  002014  D003               	goto	l13076
 18858                           
 18859                           ; BSR set to: 2
 18860                           ;lorawan.c: 1871: {
 18861                           ;lorawan.c: 1872: macBuffer[bufferIndex] |= 0x02;
 18862  002016  D890               	call	PL14	;call to abstracted procedure
 18863  002018  0E00               	movlw	0
 18864  00201A  82DB               	bsf	plusw2,1,c
 18865  00201C                     l13076:
 18866                           
 18867                           ;lorawan.c: 1873: }
 18868                           ;lorawan.c: 1875: if (loRa.macCommands[i].powerAck == 1)
 18869  00201C  0100               	movlb	0	; () banked
 18870  00201E  516A               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18871  002020  ECCB  F015         	call	PL2	;call to abstracted procedure
 18872  002024  A4DF               	btfss	indf2,2,c
 18873  002026  D004               	goto	l13080
 18874  002028                     l13078:
 18875                           
 18876                           ; BSR set to: 2
 18877                           ;lorawan.c: 1876: {
 18878                           ;lorawan.c: 1877: macBuffer[bufferIndex] |= 0x04;
 18879  002028  0100               	movlb	0	; () banked
 18880  00202A  D886               	call	PL14	;call to abstracted procedure
 18881  00202C  0E00               	movlw	0
 18882  00202E  84DB               	bsf	plusw2,2,c
 18883  002030                     l13080:
 18884                           
 18885                           ;lorawan.c: 1878: }
 18886                           ;lorawan.c: 1879: bufferIndex ++;
 18887  002030  0100               	movlb	0	; () banked
 18888  002032  2B6B               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 18889                           
 18890                           ;lorawan.c: 1880: }
 18891                           ;lorawan.c: 1881: break;
 18892  002034  D074               	goto	l13148
 18893  002036                     l13082:
 18894                           
 18895                           ; BSR set to: 0
 18896                           ;lorawan.c: 1884: {
 18897                           ;lorawan.c: 1885: macBuffer[bufferIndex++] = RX2_SETUP_CID;
 18898  002036  D880               	call	PL14	;call to abstracted procedure
 18899  002038  0E05               	movlw	5
 18900  00203A  6EDF               	movwf	indf2,c
 18901                           
 18902                           ; BSR set to: 0
 18903  00203C  2B6B               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 18904                           
 18905                           ; BSR set to: 0
 18906                           ;lorawan.c: 1886: macBuffer[bufferIndex] = 0x00;
 18907  00203E  D87C               	call	PL14	;call to abstracted procedure
 18908  002040  6ADF               	clrf	indf2,c
 18909                           
 18910                           ; BSR set to: 0
 18911                           ;lorawan.c: 1887: if (loRa.macCommands[i].channelAck == 1)
 18912  002042  516A               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18913  002044  ECCB  F015         	call	PL2	;call to abstracted procedure
 18914  002048  A6DF               	btfss	indf2,3,c
 18915  00204A  D004               	goto	l13092
 18916                           
 18917                           ; BSR set to: 2
 18918                           ;lorawan.c: 1888: {
 18919                           ;lorawan.c: 1889: macBuffer[bufferIndex] |= 0x01;
 18920  00204C  0100               	movlb	0	; () banked
 18921  00204E  D874               	call	PL14	;call to abstracted procedure
 18922  002050  0E00               	movlw	0
 18923  002052  80DB               	bsf	plusw2,0,c
 18924  002054                     l13092:
 18925                           
 18926                           ;lorawan.c: 1890: }
 18927                           ;lorawan.c: 1892: if (loRa.macCommands[i].dataRateReceiveWindowAck == 1)
 18928  002054  0100               	movlb	0	; () banked
 18929  002056  516A               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18930  002058  ECCB  F015         	call	PL2	;call to abstracted procedure
 18931  00205C  A8DF               	btfss	indf2,4,c
 18932  00205E  D003               	goto	l13096
 18933                           
 18934                           ; BSR set to: 2
 18935                           ;lorawan.c: 1893: {
 18936                           ;lorawan.c: 1894: macBuffer[bufferIndex] |= 0x02;
 18937  002060  D86B               	call	PL14	;call to abstracted procedure
 18938  002062  0E00               	movlw	0
 18939  002064  82DB               	bsf	plusw2,1,c
 18940  002066                     l13096:
 18941                           
 18942                           ;lorawan.c: 1895: }
 18943                           ;lorawan.c: 1897: if (loRa.macCommands[i].rx1DROffestAck == 1)
 18944  002066  0100               	movlb	0	; () banked
 18945  002068  516A               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18946  00206A  ECCB  F015         	call	PL2	;call to abstracted procedure
 18947  00206E  AADF               	btfss	indf2,5,c
 18948  002070  D7DF               	goto	l13080
 18949  002072  D7DA               	goto	l13078
 18950  002074                     l13102:
 18951                           
 18952                           ; BSR set to: 0
 18953                           ;lorawan.c: 1907: {
 18954                           ;lorawan.c: 1908: macBuffer[bufferIndex++] = DEV_STATUS_CID;
 18955  002074  D861               	call	PL14	;call to abstracted procedure
 18956  002076  0E06               	movlw	6
 18957  002078  6EDF               	movwf	indf2,c
 18958                           
 18959                           ; BSR set to: 0
 18960  00207A  2B6B               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 18961                           
 18962                           ; BSR set to: 0
 18963                           ;lorawan.c: 1909: macBuffer[bufferIndex++] = loRa.batteryLevel;
 18964  00207C  D85D               	call	PL14	;call to abstracted procedure
 18965  00207E  C2E0  FFDF         	movff	_loRa+224,indf2
 18966  002082  2B6B               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 18967                           
 18968                           ; BSR set to: 0
 18969                           ;lorawan.c: 1910: if ((RADIO_GetPacketSnr() < -32) || (RADIO_GetPacketSnr() > 31))
 18970  002084  EC04  F031         	call	_RADIO_GetPacketSnr	;wreg free
 18971  002088  0A80               	xorlw	128
 18972  00208A  0FA0               	addlw	160
 18973  00208C  E305               	bnc	l13112
 18974                           
 18975                           ; BSR set to: 1
 18976  00208E  EC04  F031         	call	_RADIO_GetPacketSnr	;wreg free
 18977  002092  0A80               	xorlw	128
 18978  002094  0F60               	addlw	-160
 18979  002096  E304               	bnc	l13116
 18980  002098                     l13112:
 18981                           
 18982                           ; BSR set to: 1
 18983                           ;lorawan.c: 1911: {
 18984                           ;lorawan.c: 1912: macBuffer[bufferIndex++] = 0x20;
 18985  002098  0100               	movlb	0	; () banked
 18986  00209A  D84E               	call	PL14	;call to abstracted procedure
 18987  00209C  0E20               	movlw	32
 18988  00209E  D005               	goto	L12
 18989  0020A0                     l13116:
 18990                           
 18991                           ; BSR set to: 1
 18992                           ;lorawan.c: 1914: else
 18993                           ;lorawan.c: 1915: {
 18994                           ;lorawan.c: 1916: macBuffer[bufferIndex++] = ((uint8_t)RADIO_GetPacketSnr() & 0x3F);
 18995  0020A0  0100               	movlb	0	; () banked
 18996  0020A2  D84A               	call	PL14	;call to abstracted procedure
 18997  0020A4  EC04  F031         	call	_RADIO_GetPacketSnr	;wreg free
 18998  0020A8  0B3F               	andlw	63
 18999  0020AA                     L12:
 19000  0020AA  6EDF               	movwf	indf2,c
 19001  0020AC  D7C1               	goto	l13080
 19002  0020AE                     l13120:
 19003                           
 19004                           ; BSR set to: 0
 19005                           ;lorawan.c: 1922: {
 19006                           ;lorawan.c: 1923: macBuffer[bufferIndex++] = NEW_CHANNEL_CID;
 19007  0020AE  D844               	call	PL14	;call to abstracted procedure
 19008  0020B0  0E07               	movlw	7
 19009  0020B2  6EDF               	movwf	indf2,c
 19010                           
 19011                           ; BSR set to: 0
 19012  0020B4  2B6B               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 19013                           
 19014                           ; BSR set to: 0
 19015                           ;lorawan.c: 1924: macBuffer[bufferIndex] = 0x00;
 19016  0020B6  D840               	call	PL14	;call to abstracted procedure
 19017  0020B8  6ADF               	clrf	indf2,c
 19018                           
 19019                           ; BSR set to: 0
 19020                           ;lorawan.c: 1925: if (loRa.macCommands[i].channelFrequencyAck == 1)
 19021  0020BA  516A               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 19022  0020BC  ECCB  F015         	call	PL2	;call to abstracted procedure
 19023  0020C0  AEDF               	btfss	indf2,7,c
 19024  0020C2  D004               	goto	l13130
 19025                           
 19026                           ; BSR set to: 2
 19027                           ;lorawan.c: 1926: {
 19028                           ;lorawan.c: 1927: macBuffer[bufferIndex] |= 0x01;
 19029  0020C4  0100               	movlb	0	; () banked
 19030  0020C6  D838               	call	PL14	;call to abstracted procedure
 19031  0020C8  0E00               	movlw	0
 19032  0020CA  80DB               	bsf	plusw2,0,c
 19033  0020CC                     l13130:
 19034                           
 19035                           ;lorawan.c: 1928: }
 19036                           ;lorawan.c: 1930: if (loRa.macCommands[i].dataRateRangeAck == 1)
 19037  0020CC  0100               	movlb	0	; () banked
 19038  0020CE  516A               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 19039  0020D0  ECCB  F015         	call	PL2	;call to abstracted procedure
 19040  0020D4  ACDF               	btfss	indf2,6,c
 19041  0020D6  D7AC               	goto	l13080
 19042                           
 19043                           ; BSR set to: 2
 19044                           ;lorawan.c: 1931: {
 19045                           ;lorawan.c: 1932: macBuffer[bufferIndex] |= 0x02;
 19046  0020D8  D82F               	call	PL14	;call to abstracted procedure
 19047  0020DA  0E00               	movlw	0
 19048  0020DC  82DB               	bsf	plusw2,1,c
 19049  0020DE  D7A8               	goto	l13080
 19050  0020E0                     l1273:
 19051                           
 19052                           ; BSR set to: 0
 19053                           ;lorawan.c: 1939: {
 19054                           ;lorawan.c: 1940: loRa.linkCheckMargin = 255;
 19055  0020E0  0102               	movlb	2	; () banked
 19056  0020E2  69DD               	setf	(_loRa+221)& (0+255),b
 19057                           
 19058                           ;lorawan.c: 1941: loRa.linkCheckGwCnt = 0;
 19059  0020E4  6BDE               	clrf	(_loRa+222)& (0+255),b
 19060  0020E6                     l13136:
 19061                           
 19062                           ;lorawan.c: 1942: macBuffer[bufferIndex++] = loRa.macCommands[i].receivedCid;
 19063  0020E6  0100               	movlb	0	; () banked
 19064  0020E8  516A               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 19065  0020EA  D82D               	call	PL16	;call to abstracted procedure
 19066  0020EC  516B               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 19067  0020EE  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 19068  0020F0  6EE9               	movwf	fsr0l,c
 19069  0020F2  0E00               	movlw	0
 19070  0020F4  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 19071  0020F6  D834               	call	PL452	;call to abstracted procedure
 19072  0020F8  D79B               	goto	l13080
 19073  0020FA                     l13146:
 19074                           
 19075                           ; BSR set to: 0
 19076  0020FA  516A               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 19077  0020FC  D824               	call	PL16	;call to abstracted procedure
 19078  0020FE  50DF               	movf	indf2,w,c
 19079                           
 19080                           ; Switch size 1, requested type "space"
 19081                           ; Number of cases is 7, Range of values is 2 to 8
 19082                           ; switch strategies available:
 19083                           ; Name         Instructions Cycles
 19084                           ; simple_byte           22    12 (average)
 19085                           ;	Chosen strategy is simple_byte
 19086  002100  0A02               	xorlw	2	; case 2
 19087  002102  E0EE               	bz	l1273
 19088  002104  0A01               	xorlw	1	; case 3
 19089  002106  E101 D771          	bz	l13062
 19090  00210A  0A07               	xorlw	7	; case 4
 19091  00210C  E0EC               	bz	l13136
 19092  00210E  0A01               	xorlw	1	; case 5
 19093  002110  E092               	bz	l13082
 19094  002112  0A03               	xorlw	3	; case 6
 19095  002114  E0AF               	bz	l13102
 19096  002116  0A01               	xorlw	1	; case 7
 19097  002118  E0CA               	bz	l13120
 19098  00211A  0A0F               	xorlw	15	; case 8
 19099  00211C  E0E4               	bz	l13136
 19100  00211E                     l13148:
 19101                           
 19102                           ; BSR set to: 0
 19103  00211E  2B6A               	incf	IncludeMacCommandsResponse@i& (0+255),f,b
 19104  002120                     l13150:
 19105                           
 19106                           ; BSR set to: 0
 19107  002120  0102               	movlb	2	; () banked
 19108  002122  51A7               	movf	(_loRa+167)& (0+255),w,b
 19109  002124  0100               	movlb	0	; () banked
 19110  002126  5D6A               	subwf	IncludeMacCommandsResponse@i& (0+255),w,b
 19111  002128  E201 D730          	bnc	l13054
 19112  00212C                     l13152:
 19113                           
 19114                           ; BSR set to: 0
 19115                           ;lorawan.c: 1957: }
 19116                           ;lorawan.c: 1959: *pBufferIndex = bufferIndex;
 19117  00212C  5162               	movf	IncludeMacCommandsResponse@pBufferIndex& (0+255),w,b
 19118  00212E  6ED9               	movwf	fsr2l,c
 19119  002130  6ADA               	clrf	fsr2h,c
 19120  002132  C06B  FFDF         	movff	IncludeMacCommandsResponse@bufferIndex,indf2
 19121                           
 19122                           ; BSR set to: 0
 19123  002136  0012               	return		;funcret
 19124  002138                     __end_of_IncludeMacCommandsResponse:
 19125                           	opt stack 0
 19126  002138                     PL14:
 19127                           	opt stack 19
 19128  002138  516B               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 19129  00213A  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 19130  00213C  6ED9               	movwf	fsr2l,c
 19131  00213E  0E00               	movlw	0
 19132  002140  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 19133  002142  6EDA               	movwf	fsr2h,c
 19134  002144  0012               	return	
 19135  002146                     __end_ofPL14:
 19136                           	opt stack 0
 19137  002146                     PL16:
 19138                           	opt stack 17
 19139  002146  0D02               	mullw	2
 19140  002148  0EA8               	movlw	low (_loRa+168)
 19141  00214A  24F3               	addwf	prodl,w,c
 19142  00214C  6ED9               	movwf	fsr2l,c
 19143  00214E  0E02               	movlw	high (_loRa+168)
 19144  002150  20F4               	addwfc	prodh,w,c
 19145  002152  6EDA               	movwf	fsr2h,c
 19146  002154  0012               	return	
 19147  002156                     __end_ofPL16:
 19148                           	opt stack 0
 19149  002156                     PL392:
 19150                           	opt stack 19
 19151  002156  5162               	movf	IncludeMacCommandsResponse@pBufferIndex& (0+255),w,b
 19152  002158  6ED9               	movwf	fsr2l,c
 19153  00215A  6ADA               	clrf	fsr2h,c
 19154  00215C  50DF               	movf	indf2,w,c
 19155  00215E  0012               	return	
 19156  002160                     __end_ofPL392:
 19157                           	opt stack 0
 19158  002160                     PL452:
 19159                           	opt stack 15
 19160  002160  6EEA               	movwf	fsr0h,c
 19161  002162  CFDF FFEF          	movff	indf2,indf0
 19162  002166  0012               	return	
 19163  002168                     __end_ofPL452:
 19164                           	opt stack 0
 19165                           tosu	equ	0xFFF
 19166                           tosh	equ	0xFFE
 19167                           tosl	equ	0xFFD
 19168                           pclath	equ	0xFFA
 19169                           tblptru	equ	0xFF8
 19170                           tblptrh	equ	0xFF7
 19171                           tblptrl	equ	0xFF6
 19172                           tablat	equ	0xFF5
 19173                           prodh	equ	0xFF4
 19174                           prodl	equ	0xFF3
 19175                           intcon	equ	0xFF2
 19176                           indf0	equ	0xFEF
 19177                           postinc0	equ	0xFEE
 19178                           plusw0	equ	0xFEB
 19179                           fsr0h	equ	0xFEA
 19180                           fsr0l	equ	0xFE9
 19181                           wreg	equ	0xFE8
 19182                           postinc1	equ	0xFE6
 19183                           postdec1	equ	0xFE5
 19184                           plusw1	equ	0xFE3
 19185                           fsr1h	equ	0xFE2
 19186                           fsr1l	equ	0xFE1
 19187                           indf2	equ	0xFDF
 19188                           postinc2	equ	0xFDE
 19189                           postdec2	equ	0xFDD
 19190                           plusw2	equ	0xFDB
 19191                           fsr2h	equ	0xFDA
 19192                           fsr2l	equ	0xFD9
 19193                           status	equ	0xFD8
 19194                           
 19195 ;; *************** function _RADIO_GetPacketSnr *****************
 19196 ;; Defined at:
 19197 ;;		line 1429 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 19198 ;; Parameters:    Size  Location     Type
 19199 ;;		None
 19200 ;; Auto vars:     Size  Location     Type
 19201 ;;		None
 19202 ;; Return value:  Size  Location     Type
 19203 ;;                  1    wreg      char 
 19204 ;; Registers used:
 19205 ;;		wreg, status,2
 19206 ;; Tracked objects:
 19207 ;;		On entry : 3E/0
 19208 ;;		On exit  : 3F/1
 19209 ;;		Unchanged: 0/0
 19210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19211 ;;      Params:         0       0       0       0       0       0       0       0       0
 19212 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19213 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19214 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19215 ;;Total ram usage:        0 bytes
 19216 ;; Hardware stack levels used:    1
 19217 ;; Hardware stack levels required when called:    7
 19218 ;; This function calls:
 19219 ;;		Nothing
 19220 ;; This function is called by:
 19221 ;;		_IncludeMacCommandsResponse
 19222 ;; This function uses a non-reentrant model
 19223 ;;
 19224                           
 19225                           	psect	text96
 19226  006208                     __ptext96:
 19227                           	opt stack 0
 19228  006208                     _RADIO_GetPacketSnr:
 19229                           	opt stack 19
 19230                           
 19231                           ;radio_driver_SX1276.c: 1431: return RadioConfiguration.packetSNR;
 19232                           
 19233                           ; BSR set to: 0
 19234                           ;incstack = 0
 19235  006208  0101               	movlb	1	; () banked
 19236  00620A  51B1               	movf	(_RadioConfiguration+50)& (0+255),w,b
 19237                           
 19238                           ; BSR set to: 1
 19239  00620C  0012               	return		;funcret
 19240  00620E                     __end_of_RADIO_GetPacketSnr:
 19241                           	opt stack 0
 19242                           tosu	equ	0xFFF
 19243                           tosh	equ	0xFFE
 19244                           tosl	equ	0xFFD
 19245                           pclath	equ	0xFFA
 19246                           tblptru	equ	0xFF8
 19247                           tblptrh	equ	0xFF7
 19248                           tblptrl	equ	0xFF6
 19249                           tablat	equ	0xFF5
 19250                           prodh	equ	0xFF4
 19251                           prodl	equ	0xFF3
 19252                           intcon	equ	0xFF2
 19253                           indf0	equ	0xFEF
 19254                           postinc0	equ	0xFEE
 19255                           plusw0	equ	0xFEB
 19256                           fsr0h	equ	0xFEA
 19257                           fsr0l	equ	0xFE9
 19258                           wreg	equ	0xFE8
 19259                           postinc1	equ	0xFE6
 19260                           postdec1	equ	0xFE5
 19261                           plusw1	equ	0xFE3
 19262                           fsr1h	equ	0xFE2
 19263                           fsr1l	equ	0xFE1
 19264                           indf2	equ	0xFDF
 19265                           postinc2	equ	0xFDE
 19266                           postdec2	equ	0xFDD
 19267                           plusw2	equ	0xFDB
 19268                           fsr2h	equ	0xFDA
 19269                           fsr2l	equ	0xFD9
 19270                           status	equ	0xFD8
 19271                           
 19272 ;; *************** function _FindSmallestDataRate *****************
 19273 ;; Defined at:
 19274 ;;		line 1963 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 19275 ;; Parameters:    Size  Location     Type
 19276 ;;		None
 19277 ;; Auto vars:     Size  Location     Type
 19278 ;;  dataRate        1    3[BANK0 ] unsigned char 
 19279 ;;  i               1    2[BANK0 ] unsigned char 
 19280 ;;  found           1    1[BANK0 ] unsigned char 
 19281 ;; Return value:  Size  Location     Type
 19282 ;;                  1    wreg      unsigned char 
 19283 ;; Registers used:
 19284 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19285 ;; Tracked objects:
 19286 ;;		On entry : 3F/2
 19287 ;;		On exit  : 3F/0
 19288 ;;		Unchanged: 0/0
 19289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19290 ;;      Params:         0       0       0       0       0       0       0       0       0
 19291 ;;      Locals:         0       3       0       0       0       0       0       0       0
 19292 ;;      Temps:          0       1       0       0       0       0       0       0       0
 19293 ;;      Totals:         0       4       0       0       0       0       0       0       0
 19294 ;;Total ram usage:        4 bytes
 19295 ;; Hardware stack levels used:    1
 19296 ;; Hardware stack levels required when called:    7
 19297 ;; This function calls:
 19298 ;;		Nothing
 19299 ;; This function is called by:
 19300 ;;		_AckRetransmissionCallback
 19301 ;;		_AssemblePacket
 19302 ;; This function uses a non-reentrant model
 19303 ;;
 19304                           
 19305                           	psect	text97
 19306  0046CC                     __ptext97:
 19307                           	opt stack 0
 19308  0046CC                     _FindSmallestDataRate:
 19309                           	opt stack 20
 19310                           
 19311                           ; BSR set to: 2
 19312                           ;lorawan.c: 1966: bool found = 0;
 19313                           
 19314                           ; BSR set to: 1
 19315                           ;incstack = 0
 19316  0046CC  0100               	movlb	0	; () banked
 19317  0046CE  6B61               	clrf	FindSmallestDataRate@found& (0+255),b
 19318                           
 19319                           ; BSR set to: 0
 19320                           ;lorawan.c: 1968: if (loRa.currentDataRate > loRa.minDataRate)
 19321  0046D0  0102               	movlb	2	; () banked
 19322  0046D2  51DF               	movf	(_loRa+223)& (0+255),w,b
 19323  0046D4  5DEB               	subwf	(_loRa+235)& (0+255),w,b
 19324  0046D6  E23A               	bc	l12850
 19325                           
 19326                           ; BSR set to: 2
 19327                           ;lorawan.c: 1969: {
 19328                           ;lorawan.c: 1970: dataRate = loRa.currentDataRate - 1;
 19329  0046D8  05DF               	decf	(_loRa+223)& (0+255),w,b
 19330  0046DA  0100               	movlb	0	; () banked
 19331  0046DC  6F63               	movwf	FindSmallestDataRate@dataRate& (0+255),b
 19332                           
 19333                           ;lorawan.c: 1972: while ( (found == 0) && (dataRate >= loRa.minDataRate) )
 19334  0046DE  D02A               	goto	l12842
 19335  0046E0                     l1282:
 19336                           
 19337                           ; BSR set to: 0
 19338                           ;lorawan.c: 1973: {
 19339                           ;lorawan.c: 1974: for ( i = 0; i < loRa.maxChannels; i++ )
 19340  0046E0  6B62               	clrf	FindSmallestDataRate@i& (0+255),b
 19341  0046E2  D01B               	goto	l12834
 19342  0046E4                     l12824:
 19343                           
 19344                           ; BSR set to: 0
 19345                           ;lorawan.c: 1975: {
 19346                           ;lorawan.c: 1976: if ( (dataRate >= Channels[i].dataRange.min) && (dataRate <= Channels[
      +                          i].dataRange.max ) && ( Channels[i].status == 1 ) )
 19347  0046E4  5162               	movf	FindSmallestDataRate@i& (0+255),w,b
 19348  0046E6  EC7E  F021         	call	PL6	;call to abstracted procedure
 19349  0046EA  50DF               	movf	223,w,c
 19350  0046EC  0B0F               	andlw	15
 19351  0046EE  0100               	movlb	0	; () banked
 19352  0046F0  6F60               	movwf	??_FindSmallestDataRate& (0+255),b
 19353  0046F2  5160               	movf	??_FindSmallestDataRate& (0+255),w,b
 19354  0046F4  5D63               	subwf	FindSmallestDataRate@dataRate& (0+255),w,b
 19355  0046F6  E310               	bnc	l12832
 19356                           
 19357                           ; BSR set to: 0
 19358  0046F8  5162               	movf	FindSmallestDataRate@i& (0+255),w,b
 19359  0046FA  EC7E  F021         	call	PL6	;call to abstracted procedure
 19360  0046FE  38DF               	swapf	223,w,c
 19361  004700  0B0F               	andlw	15
 19362  004702  6F60               	movwf	??_FindSmallestDataRate& (0+255),b
 19363  004704  5163               	movf	FindSmallestDataRate@dataRate& (0+255),w,b
 19364  004706  5D60               	subwf	??_FindSmallestDataRate& (0+255),w,b
 19365  004708  E307               	bnc	l12832
 19366                           
 19367                           ; BSR set to: 0
 19368  00470A  5162               	movf	FindSmallestDataRate@i& (0+255),w,b
 19369  00470C  EC86  F021         	call	PL12	;call to abstracted procedure
 19370  004710  E103               	bnz	l12832
 19371                           
 19372                           ; BSR set to: 0
 19373                           ;lorawan.c: 1977: {
 19374                           ;lorawan.c: 1978: found = 1;
 19375  004712  0E01               	movlw	1
 19376  004714  6F61               	movwf	FindSmallestDataRate@found& (0+255),b
 19377                           
 19378                           ;lorawan.c: 1979: break;
 19379  004716  D006               	goto	l12836
 19380  004718                     l12832:
 19381                           
 19382                           ; BSR set to: 0
 19383  004718  2B62               	incf	FindSmallestDataRate@i& (0+255),f,b
 19384  00471A                     l12834:
 19385                           
 19386                           ; BSR set to: 0
 19387  00471A  0102               	movlb	2	; () banked
 19388  00471C  51ED               	movf	(_loRa+237)& (0+255),w,b
 19389  00471E  0100               	movlb	0	; () banked
 19390  004720  5D62               	subwf	FindSmallestDataRate@i& (0+255),w,b
 19391  004722  E3E0               	bnc	l12824
 19392  004724                     l12836:
 19393                           
 19394                           ; BSR set to: 0
 19395                           ;lorawan.c: 1980: }
 19396                           ;lorawan.c: 1981: }
 19397                           ;lorawan.c: 1982: if ( (found == 0) && (dataRate > loRa.minDataRate) )
 19398  004724  5161               	movf	FindSmallestDataRate@found& (0+255),w,b
 19399  004726  E106               	bnz	l12842
 19400                           
 19401                           ; BSR set to: 0
 19402  004728  5163               	movf	FindSmallestDataRate@dataRate& (0+255),w,b
 19403  00472A  0102               	movlb	2	; () banked
 19404  00472C  5DEB               	subwf	(_loRa+235)& (0+255),w,b
 19405  00472E  E202               	bc	l12842
 19406                           
 19407                           ; BSR set to: 2
 19408                           ;lorawan.c: 1983: {
 19409                           ;lorawan.c: 1984: dataRate = dataRate - 1;
 19410  004730  0100               	movlb	0	; () banked
 19411  004732  0763               	decf	FindSmallestDataRate@dataRate& (0+255),f,b
 19412  004734                     l12842:
 19413  004734  0100               	movlb	0	; () banked
 19414  004736  5161               	movf	FindSmallestDataRate@found& (0+255),w,b
 19415  004738  E105               	bnz	l12846
 19416                           
 19417                           ; BSR set to: 0
 19418  00473A  0102               	movlb	2	; () banked
 19419  00473C  51EB               	movf	(_loRa+235)& (0+255),w,b
 19420  00473E  0100               	movlb	0	; () banked
 19421  004740  5D63               	subwf	FindSmallestDataRate@dataRate& (0+255),w,b
 19422  004742  E2CE               	bc	l1282
 19423  004744                     l12846:
 19424                           
 19425                           ; BSR set to: 0
 19426                           ;lorawan.c: 1985: }
 19427                           ;lorawan.c: 1986: }
 19428                           ;lorawan.c: 1988: if (found == 1)
 19429  004744  0561               	decf	FindSmallestDataRate@found& (0+255),w,b
 19430  004746  E102               	bnz	l12850
 19431                           
 19432                           ; BSR set to: 0
 19433                           ;lorawan.c: 1989: {
 19434                           ;lorawan.c: 1990: loRa.currentDataRate = dataRate;
 19435  004748  C063  F2DF         	movff	FindSmallestDataRate@dataRate,_loRa+223
 19436  00474C                     l12850:
 19437                           
 19438                           ;lorawan.c: 1991: }
 19439                           ;lorawan.c: 1992: }
 19440                           ;lorawan.c: 1994: return found;
 19441  00474C  0100               	movlb	0	; () banked
 19442  00474E  5161               	movf	FindSmallestDataRate@found& (0+255),w,b
 19443                           
 19444                           ; BSR set to: 0
 19445  004750  0012               	return		;funcret
 19446  004752                     __end_of_FindSmallestDataRate:
 19447                           	opt stack 0
 19448                           tosu	equ	0xFFF
 19449                           tosh	equ	0xFFE
 19450                           tosl	equ	0xFFD
 19451                           pclath	equ	0xFFA
 19452                           tblptru	equ	0xFF8
 19453                           tblptrh	equ	0xFF7
 19454                           tblptrl	equ	0xFF6
 19455                           tablat	equ	0xFF5
 19456                           prodh	equ	0xFF4
 19457                           prodl	equ	0xFF3
 19458                           intcon	equ	0xFF2
 19459                           indf0	equ	0xFEF
 19460                           postinc0	equ	0xFEE
 19461                           plusw0	equ	0xFEB
 19462                           fsr0h	equ	0xFEA
 19463                           fsr0l	equ	0xFE9
 19464                           wreg	equ	0xFE8
 19465                           postinc1	equ	0xFE6
 19466                           postdec1	equ	0xFE5
 19467                           plusw1	equ	0xFE3
 19468                           fsr1h	equ	0xFE2
 19469                           fsr1l	equ	0xFE1
 19470                           indf2	equ	0xFDF
 19471                           postinc2	equ	0xFDE
 19472                           postdec2	equ	0xFDD
 19473                           plusw2	equ	0xFDB
 19474                           fsr2h	equ	0xFDA
 19475                           fsr2l	equ	0xFD9
 19476                           status	equ	0xFD8
 19477                           
 19478 ;; *************** function _EncryptFRMPayload *****************
 19479 ;; Defined at:
 19480 ;;		line 2205 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 19481 ;; Parameters:    Size  Location     Type
 19482 ;;  buffer          2   64[BANK0 ] PTR unsigned char 
 19483 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), payload(2), NULL(0), 
 19484 ;;  bufferLength    1   66[BANK0 ] unsigned char 
 19485 ;;  dir             1   67[BANK0 ] unsigned char 
 19486 ;;  frameCounter    4   68[BANK0 ] unsigned long 
 19487 ;;  key             2   72[BANK0 ] PTR unsigned char 
 19488 ;;		 -> loRa.activationParameters(105), loRa(245), 
 19489 ;;  macBufferInd    1   74[BANK0 ] unsigned char 
 19490 ;;  bufferToBeEn    2   75[BANK0 ] PTR unsigned char 
 19491 ;;		 -> radioBuffer(271), macBuffer(271), 
 19492 ;;  multicastSta    1   77[BANK0 ] unsigned char 
 19493 ;; Auto vars:     Size  Location     Type
 19494 ;;  j               1   85[BANK0 ] unsigned char 
 19495 ;;  i               1   84[BANK0 ] unsigned char 
 19496 ;;  k               1   83[BANK0 ] unsigned char 
 19497 ;; Return value:  Size  Location     Type
 19498 ;;                  1    wreg      void 
 19499 ;; Registers used:
 19500 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19501 ;; Tracked objects:
 19502 ;;		On entry : 3F/0
 19503 ;;		On exit  : 3F/0
 19504 ;;		Unchanged: 0/0
 19505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19506 ;;      Params:         0      14       0       0       0       0       0       0       0
 19507 ;;      Locals:         0       3       0       0       0       0       0       0       0
 19508 ;;      Temps:          0       5       0       0       0       0       0       0       0
 19509 ;;      Totals:         0      22       0       0       0       0       0       0       0
 19510 ;;Total ram usage:       22 bytes
 19511 ;; Hardware stack levels used:    1
 19512 ;; Hardware stack levels required when called:   10
 19513 ;; This function calls:
 19514 ;;		_AESEncodeLoRa
 19515 ;;		_AssembleEncryptionBlock
 19516 ;; This function is called by:
 19517 ;;		_LORAWAN_RxDone
 19518 ;;		_AssemblePacket
 19519 ;; This function uses a non-reentrant model
 19520 ;;
 19521                           
 19522                           	psect	text98
 19523  002BBA                     __ptext98:
 19524                           	opt stack 0
 19525  002BBA                     _EncryptFRMPayload:
 19526                           	opt stack 17
 19527                           
 19528                           ; BSR set to: 0
 19529                           
 19530                           ; BSR set to: 0
 19531                           ;incstack = 0
 19532  002BBA  6BB4               	clrf	EncryptFRMPayload@i& (0+255),b
 19533  002BBC  6BB5               	clrf	EncryptFRMPayload@j& (0+255),b
 19534                           
 19535                           ; BSR set to: 0
 19536                           ;lorawan.c: 2209: k = bufferLength / 16;
 19537  002BBE  39A2               	swapf	EncryptFRMPayload@bufferLength& (0+255),w,b
 19538  002BC0  0B0F               	andlw	15
 19539  002BC2  6FB3               	movwf	EncryptFRMPayload@k& (0+255),b
 19540                           
 19541                           ; BSR set to: 0
 19542                           ;lorawan.c: 2210: for (i = 1; i <= k; i++)
 19543  002BC4  0E01               	movlw	1
 19544  002BC6  6FB4               	movwf	EncryptFRMPayload@i& (0+255),b
 19545  002BC8  D031               	goto	l12976
 19546  002BCA                     l12958:
 19547                           
 19548                           ; BSR set to: 0
 19549                           ;lorawan.c: 2211: {
 19550                           ;lorawan.c: 2212: AssembleEncryptionBlock (dir, frameCounter, i, 0x01, multicastStatus);
 19551  002BCA  D85B               	call	PL106	;call to abstracted procedure
 19552  002BCC  EC8F  F021         	call	_AssembleEncryptionBlock
 19553                           
 19554                           ;lorawan.c: 2213: AESEncodeLoRa(aesBuffer, key);
 19555  002BD0  D868               	call	PL210	;call to abstracted procedure
 19556  002BD2  EC51  F02E         	call	_AESEncodeLoRa	;wreg free
 19557                           
 19558                           ; BSR set to: 0
 19559                           ;lorawan.c: 2215: for (j = 0; j < 16; j++)
 19560  002BD6  6BB5               	clrf	EncryptFRMPayload@j& (0+255),b
 19561  002BD8                     l12966:
 19562                           
 19563                           ; BSR set to: 0
 19564                           ;lorawan.c: 2216: {
 19565                           ;lorawan.c: 2217: bufferToBeEncrypted[macBufferIndex++] = aesBuffer[j] ^ buffer[16*(i-1)
      +                           + j];
 19566  002BD8  D875               	call	PL300	;call to abstracted procedure
 19567  002BDA  51B4               	movf	EncryptFRMPayload@i& (0+255),w,b
 19568  002BDC  6FAE               	movwf	??_EncryptFRMPayload& (0+255),b
 19569  002BDE  6BAF               	clrf	(??_EncryptFRMPayload+1)& (0+255),b
 19570  002BE0  3BAE               	swapf	??_EncryptFRMPayload& (0+255),f,b
 19571  002BE2  3BAF               	swapf	(??_EncryptFRMPayload+1)& (0+255),f,b
 19572  002BE4  0EF0               	movlw	240
 19573  002BE6  17AF               	andwf	(??_EncryptFRMPayload+1)& (0+255),f,b
 19574  002BE8  51AE               	movf	??_EncryptFRMPayload& (0+255),w,b
 19575  002BEA  0B0F               	andlw	15
 19576  002BEC  13AF               	iorwf	(??_EncryptFRMPayload+1)& (0+255),f,b
 19577  002BEE  0EF0               	movlw	240
 19578  002BF0  17AE               	andwf	??_EncryptFRMPayload& (0+255),f,b
 19579  002BF2  C0A0  F0B0         	movff	EncryptFRMPayload@buffer,??_EncryptFRMPayload+2
 19580  002BF6  C0A1  F0B1         	movff	EncryptFRMPayload@buffer+1,??_EncryptFRMPayload+3
 19581  002BFA  51AE               	movf	??_EncryptFRMPayload& (0+255),w,b
 19582  002BFC  27B0               	addwf	(??_EncryptFRMPayload+2)& (0+255),f,b
 19583  002BFE  51AF               	movf	(??_EncryptFRMPayload+1)& (0+255),w,b
 19584  002C00  23B1               	addwfc	(??_EncryptFRMPayload+3)& (0+255),f,b
 19585  002C02  51B5               	movf	EncryptFRMPayload@j& (0+255),w,b
 19586  002C04  27B0               	addwf	(??_EncryptFRMPayload+2)& (0+255),f,b
 19587  002C06  0E00               	movlw	0
 19588  002C08  23B1               	addwfc	(??_EncryptFRMPayload+3)& (0+255),f,b
 19589  002C0A  0EF0               	movlw	240
 19590  002C0C  25B0               	addwf	(??_EncryptFRMPayload+2)& (0+255),w,b
 19591  002C0E  6EE9               	movwf	fsr0l,c
 19592  002C10  0EFF               	movlw	255
 19593  002C12  21B1               	addwfc	(??_EncryptFRMPayload+3)& (0+255),w,b
 19594  002C14  6EEA               	movwf	fsr0h,c
 19595  002C16  50EF               	movf	indf0,w,c
 19596  002C18  6FB2               	movwf	(??_EncryptFRMPayload+4)& (0+255),b
 19597  002C1A  D84C               	call	PL274	;call to abstracted procedure
 19598  002C1C  19B2               	xorwf	(??_EncryptFRMPayload+4)& (0+255),w,b
 19599  002C1E  6EDF               	movwf	indf2,c
 19600                           
 19601                           ; BSR set to: 0
 19602  002C20  2BAA               	incf	EncryptFRMPayload@macBufferIndex& (0+255),f,b
 19603                           
 19604                           ; BSR set to: 0
 19605  002C22  2BB5               	incf	EncryptFRMPayload@j& (0+255),f,b
 19606                           
 19607                           ; BSR set to: 0
 19608  002C24  0E0F               	movlw	15
 19609  002C26  65B5               	cpfsgt	EncryptFRMPayload@j& (0+255),b
 19610  002C28  D7D7               	goto	l12966
 19611                           
 19612                           ; BSR set to: 0
 19613  002C2A  2BB4               	incf	EncryptFRMPayload@i& (0+255),f,b
 19614  002C2C                     l12976:
 19615                           
 19616                           ; BSR set to: 0
 19617  002C2C  51B4               	movf	EncryptFRMPayload@i& (0+255),w,b
 19618  002C2E  5DB3               	subwf	EncryptFRMPayload@k& (0+255),w,b
 19619  002C30  E2CC               	bc	l12958
 19620                           
 19621                           ; BSR set to: 0
 19622                           ;lorawan.c: 2218: }
 19623                           ;lorawan.c: 2219: }
 19624                           ;lorawan.c: 2221: if ( (bufferLength % 16) != 0 )
 19625  002C32  D84F               	call	PL360	;call to abstracted procedure
 19626  002C34  B4D8               	btfsc	status,2,c
 19627  002C36  0C0F               	retlw	15
 19628                           
 19629                           ; BSR set to: 0
 19630                           ;lorawan.c: 2222: {
 19631                           ;lorawan.c: 2223: AssembleEncryptionBlock (dir, frameCounter, i, 0x01, multicastStatus);
 19632  002C38  D824               	call	PL106	;call to abstracted procedure
 19633  002C3A  EC8F  F021         	call	_AssembleEncryptionBlock
 19634                           
 19635                           ;lorawan.c: 2224: AESEncodeLoRa (aesBuffer, key);
 19636  002C3E  D831               	call	PL210	;call to abstracted procedure
 19637  002C40  EC51  F02E         	call	_AESEncodeLoRa	;wreg free
 19638                           
 19639                           ; BSR set to: 0
 19640                           ;lorawan.c: 2226: for (j = 0; j < (bufferLength % 16); j++)
 19641  002C44  6BB5               	clrf	EncryptFRMPayload@j& (0+255),b
 19642  002C46  D018               	goto	l12990
 19643  002C48                     l12984:
 19644                           
 19645                           ; BSR set to: 0
 19646                           ;lorawan.c: 2227: {
 19647                           ;lorawan.c: 2228: bufferToBeEncrypted[macBufferIndex++] = aesBuffer[j] ^ buffer[(16*k) +
      +                           j];
 19648  002C48  D83D               	call	PL300	;call to abstracted procedure
 19649  002C4A  51B3               	movf	EncryptFRMPayload@k& (0+255),w,b
 19650  002C4C  0D10               	mullw	16
 19651  002C4E  C0A0  F0AE         	movff	EncryptFRMPayload@buffer,??_EncryptFRMPayload
 19652  002C52  C0A1  F0AF         	movff	EncryptFRMPayload@buffer+1,??_EncryptFRMPayload+1
 19653  002C56  50F3               	movf	prodl,w,c
 19654  002C58  27AE               	addwf	??_EncryptFRMPayload& (0+255),f,b
 19655  002C5A  50F4               	movf	prodh,w,c
 19656  002C5C  23AF               	addwfc	(??_EncryptFRMPayload+1)& (0+255),f,b
 19657  002C5E  51B5               	movf	EncryptFRMPayload@j& (0+255),w,b
 19658  002C60  25AE               	addwf	??_EncryptFRMPayload& (0+255),w,b
 19659  002C62  6EE9               	movwf	fsr0l,c
 19660  002C64  0E00               	movlw	0
 19661  002C66  21AF               	addwfc	(??_EncryptFRMPayload+1)& (0+255),w,b
 19662  002C68  6EEA               	movwf	fsr0h,c
 19663  002C6A  50EF               	movf	indf0,w,c
 19664  002C6C  6FB0               	movwf	(??_EncryptFRMPayload+2)& (0+255),b
 19665  002C6E  D822               	call	PL274	;call to abstracted procedure
 19666  002C70  19B0               	xorwf	(??_EncryptFRMPayload+2)& (0+255),w,b
 19667  002C72  6EDF               	movwf	indf2,c
 19668                           
 19669                           ; BSR set to: 0
 19670  002C74  2BAA               	incf	EncryptFRMPayload@macBufferIndex& (0+255),f,b
 19671                           
 19672                           ; BSR set to: 0
 19673  002C76  2BB5               	incf	EncryptFRMPayload@j& (0+255),f,b
 19674  002C78                     l12990:
 19675                           
 19676                           ; BSR set to: 0
 19677  002C78  D82C               	call	PL360	;call to abstracted procedure
 19678  002C7A  51AE               	movf	??_EncryptFRMPayload& (0+255),w,b
 19679  002C7C  5DB5               	subwf	EncryptFRMPayload@j& (0+255),w,b
 19680  002C7E  E3E4               	bnc	l12984
 19681                           
 19682                           ; BSR set to: 0
 19683  002C80  0012               	return		;funcret
 19684  002C82                     __end_of_EncryptFRMPayload:
 19685                           	opt stack 0
 19686  002C82                     PL106:
 19687                           	opt stack 17
 19688  002C82  C0A4  F06A         	movff	EncryptFRMPayload@frameCounter,AssembleEncryptionBlock@frameCounter
 19689  002C86  C0A5  F06B         	movff	EncryptFRMPayload@frameCounter+1,AssembleEncryptionBlock@frameCounter+1
 19690  002C8A  C0A6  F06C         	movff	EncryptFRMPayload@frameCounter+2,AssembleEncryptionBlock@frameCounter+2
 19691  002C8E  C0A7  F06D         	movff	EncryptFRMPayload@frameCounter+3,AssembleEncryptionBlock@frameCounter+3
 19692  002C92  C0B4  F06E         	movff	EncryptFRMPayload@i,AssembleEncryptionBlock@blockId
 19693  002C96  0E01               	movlw	1
 19694  002C98  6F6F               	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 19695  002C9A  C0AD  F070         	movff	EncryptFRMPayload@multicastStatus,AssembleEncryptionBlock@multicastStatus
 19696  002C9E  51A3               	movf	EncryptFRMPayload@dir& (0+255),w,b
 19697  002CA0  0012               	return	
 19698  002CA2                     __end_ofPL106:
 19699                           	opt stack 0
 19700  002CA2                     PL210:
 19701                           	opt stack 17
 19702  002CA2  0EB5               	movlw	low _aesBuffer
 19703  002CA4  6F8C               	movwf	AESEncodeLoRa@block& (0+255),b
 19704  002CA6  0E01               	movlw	high _aesBuffer
 19705  002CA8  6F8D               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 19706  002CAA  C0A8  F08E         	movff	EncryptFRMPayload@key,AESEncodeLoRa@key
 19707  002CAE  C0A9  F08F         	movff	EncryptFRMPayload@key+1,AESEncodeLoRa@key+1
 19708  002CB2  0012               	return	
 19709  002CB4                     __end_ofPL210:
 19710                           	opt stack 0
 19711  002CB4                     PL274:
 19712                           	opt stack 17
 19713  002CB4  0EB5               	movlw	low _aesBuffer
 19714  002CB6  25B5               	addwf	EncryptFRMPayload@j& (0+255),w,b
 19715  002CB8  6EE9               	movwf	fsr0l,c
 19716  002CBA  6AEA               	clrf	fsr0h,c
 19717  002CBC  0E01               	movlw	high _aesBuffer
 19718  002CBE  22EA               	addwfc	fsr0h,f,c
 19719  002CC0  50EF               	movf	indf0,w,c
 19720  002CC2  0012               	return	
 19721  002CC4                     __end_ofPL274:
 19722                           	opt stack 0
 19723  002CC4                     PL300:
 19724                           	opt stack 17
 19725  002CC4  51AA               	movf	EncryptFRMPayload@macBufferIndex& (0+255),w,b
 19726  002CC6  25AB               	addwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),w,b
 19727  002CC8  6ED9               	movwf	fsr2l,c
 19728  002CCA  0E00               	movlw	0
 19729  002CCC  21AC               	addwfc	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),w,b
 19730  002CCE  6EDA               	movwf	fsr2h,c
 19731  002CD0  0012               	return	
 19732  002CD2                     __end_ofPL300:
 19733                           	opt stack 0
 19734  002CD2                     PL360:
 19735                           	opt stack 17
 19736  002CD2  C0A2  F0AE         	movff	EncryptFRMPayload@bufferLength,??_EncryptFRMPayload
 19737  002CD6  0E0F               	movlw	15
 19738  002CD8  17AE               	andwf	??_EncryptFRMPayload& (0+255),f,b
 19739  002CDA  0C0F               	retlw	15
 19740  002CDC                     __end_ofPL360:
 19741                           	opt stack 0
 19742                           tosu	equ	0xFFF
 19743                           tosh	equ	0xFFE
 19744                           tosl	equ	0xFFD
 19745                           pclath	equ	0xFFA
 19746                           tblptru	equ	0xFF8
 19747                           tblptrh	equ	0xFF7
 19748                           tblptrl	equ	0xFF6
 19749                           tablat	equ	0xFF5
 19750                           prodh	equ	0xFF4
 19751                           prodl	equ	0xFF3
 19752                           intcon	equ	0xFF2
 19753                           indf0	equ	0xFEF
 19754                           postinc0	equ	0xFEE
 19755                           plusw0	equ	0xFEB
 19756                           fsr0h	equ	0xFEA
 19757                           fsr0l	equ	0xFE9
 19758                           wreg	equ	0xFE8
 19759                           postinc1	equ	0xFE6
 19760                           postdec1	equ	0xFE5
 19761                           plusw1	equ	0xFE3
 19762                           fsr1h	equ	0xFE2
 19763                           fsr1l	equ	0xFE1
 19764                           indf2	equ	0xFDF
 19765                           postinc2	equ	0xFDE
 19766                           postdec2	equ	0xFDD
 19767                           plusw2	equ	0xFDB
 19768                           fsr2h	equ	0xFDA
 19769                           fsr2l	equ	0xFD9
 19770                           status	equ	0xFD8
 19771                           
 19772 ;; *************** function _AssembleEncryptionBlock *****************
 19773 ;; Defined at:
 19774 ;;		line 2156 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 19775 ;; Parameters:    Size  Location     Type
 19776 ;;  dir             1    wreg     unsigned char 
 19777 ;;  frameCounter    4   10[BANK0 ] unsigned long 
 19778 ;;  blockId         1   14[BANK0 ] unsigned char 
 19779 ;;  firstByte       1   15[BANK0 ] unsigned char 
 19780 ;;  multicastSta    1   16[BANK0 ] unsigned char 
 19781 ;; Auto vars:     Size  Location     Type
 19782 ;;  dir             1   17[BANK0 ] unsigned char 
 19783 ;;  bufferIndex     1   18[BANK0 ] unsigned char 
 19784 ;; Return value:  Size  Location     Type
 19785 ;;                  1    wreg      void 
 19786 ;; Registers used:
 19787 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19788 ;; Tracked objects:
 19789 ;;		On entry : 3F/0
 19790 ;;		On exit  : 3F/0
 19791 ;;		Unchanged: 0/0
 19792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19793 ;;      Params:         0       7       0       0       0       0       0       0       0
 19794 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19795 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19796 ;;      Totals:         0       9       0       0       0       0       0       0       0
 19797 ;;Total ram usage:        9 bytes
 19798 ;; Hardware stack levels used:    1
 19799 ;; Hardware stack levels required when called:    8
 19800 ;; This function calls:
 19801 ;;		_memcpy
 19802 ;;		_memset
 19803 ;; This function is called by:
 19804 ;;		_LORAWAN_RxDone
 19805 ;;		_AssemblePacket
 19806 ;;		_EncryptFRMPayload
 19807 ;; This function uses a non-reentrant model
 19808 ;;
 19809                           
 19810                           	psect	text99
 19811  00431E                     __ptext99:
 19812                           	opt stack 0
 19813  00431E                     _AssembleEncryptionBlock:
 19814                           	opt stack 18
 19815                           
 19816                           ; BSR set to: 0
 19817                           ;incstack = 0
 19818                           ;AssembleEncryptionBlock@dir stored from wreg
 19819  00431E  6F71               	movwf	AssembleEncryptionBlock@dir& (0+255),b
 19820                           
 19821                           ;lorawan.c: 2158: uint8_t bufferIndex = 0;
 19822  004320  0100               	movlb	0	; () banked
 19823  004322  6B72               	clrf	AssembleEncryptionBlock@bufferIndex& (0+255),b
 19824                           
 19825                           ; BSR set to: 0
 19826                           ;lorawan.c: 2160: memset (aesBuffer, 0, sizeof (aesBuffer));
 19827  004324  D83E               	call	PL196	;call to abstracted procedure
 19828  004326  D830               	call	PL140	;call to abstracted procedure
 19829  004328  ECEF  F02D         	call	_memset	;wreg free
 19830                           
 19831                           ; BSR set to: 0
 19832                           ;lorawan.c: 2162: aesBuffer[bufferIndex] = firstByte;
 19833  00432C  C06F  F1B5         	movff	AssembleEncryptionBlock@firstByte,_aesBuffer
 19834                           
 19835                           ; BSR set to: 0
 19836                           ;lorawan.c: 2164: bufferIndex = bufferIndex + 5;
 19837  004330  0E05               	movlw	5
 19838  004332  2772               	addwf	AssembleEncryptionBlock@bufferIndex& (0+255),f,b
 19839                           
 19840                           ; BSR set to: 0
 19841                           ;lorawan.c: 2166: aesBuffer[bufferIndex++] = dir;
 19842  004334  D83F               	call	PL310	;call to abstracted procedure
 19843  004336  C071  FFDF         	movff	AssembleEncryptionBlock@dir,indf2
 19844                           
 19845                           ; BSR set to: 0
 19846  00433A  2B72               	incf	AssembleEncryptionBlock@bufferIndex& (0+255),f,b
 19847                           
 19848                           ; BSR set to: 0
 19849                           ;lorawan.c: 2168: if (0 == multicastStatus)
 19850  00433C  5170               	movf	AssembleEncryptionBlock@multicastStatus& (0+255),w,b
 19851  00433E  E108               	bnz	l12442
 19852                           
 19853                           ; BSR set to: 0
 19854                           ;lorawan.c: 2169: {
 19855                           ;lorawan.c: 2170: memcpy (&aesBuffer[bufferIndex], &loRa.activationParameters.deviceAddr
      +                          ess, sizeof (loRa.activationParameters.deviceAddress));
 19856  004340  D829               	call	PL190	;call to abstracted procedure
 19857  004342  D834               	call	PL276	;call to abstracted procedure
 19858  004344  D81C               	call	PL132	;call to abstracted procedure
 19859  004346  EC94  F028         	call	_memcpy	;wreg free
 19860  00434A                     l12440:
 19861                           
 19862                           ; BSR set to: 0
 19863                           ;lorawan.c: 2171: bufferIndex = bufferIndex + sizeof (loRa.activationParameters.deviceAd
      +                          dress);
 19864  00434A  0E04               	movlw	4
 19865  00434C  2772               	addwf	AssembleEncryptionBlock@bufferIndex& (0+255),f,b
 19866                           
 19867                           ;lorawan.c: 2172: }
 19868  00434E  D008               	goto	l12446
 19869  004350                     l12442:
 19870                           
 19871                           ; BSR set to: 0
 19872                           ;lorawan.c: 2173: else
 19873                           ;lorawan.c: 2174: {
 19874                           ;lorawan.c: 2175: memcpy (&aesBuffer[bufferIndex], &loRa.activationParameters.mcastDevic
      +                          eAddress, sizeof (loRa.activationParameters.mcastDeviceAddress));
 19875  004350  D821               	call	PL190	;call to abstracted procedure
 19876  004352  0E62               	movlw	low (_loRa+98)
 19877  004354  6F62               	movwf	memcpy@s1& (0+255),b
 19878  004356  0E02               	movlw	high (_loRa+98)
 19879  004358  D812               	call	PL132	;call to abstracted procedure
 19880  00435A  EC94  F028         	call	_memcpy	;wreg free
 19881  00435E  D7F5               	goto	l12440
 19882  004360                     l12446:
 19883                           
 19884                           ; BSR set to: 0
 19885                           ;lorawan.c: 2177: }
 19886                           ;lorawan.c: 2179: memcpy (&aesBuffer[bufferIndex], &frameCounter, sizeof (frameCounter))
      +                          ;
 19887  004360  D819               	call	PL190	;call to abstracted procedure
 19888  004362  0E6A               	movlw	low AssembleEncryptionBlock@frameCounter
 19889  004364  6F62               	movwf	memcpy@s1& (0+255),b
 19890  004366  6B63               	clrf	(memcpy@s1+1)& (0+255),b
 19891  004368  EC80  F017         	call	PL280	;call to abstracted procedure
 19892  00436C  EC94  F028         	call	_memcpy	;wreg free
 19893                           
 19894                           ;lorawan.c: 2180: bufferIndex = bufferIndex + sizeof (frameCounter) ;
 19895  004370  0E04               	movlw	4
 19896  004372  2772               	addwf	AssembleEncryptionBlock@bufferIndex& (0+255),f,b
 19897                           
 19898                           ; BSR set to: 0
 19899                           ;lorawan.c: 2182: bufferIndex ++;
 19900  004374  2B72               	incf	AssembleEncryptionBlock@bufferIndex& (0+255),f,b
 19901                           
 19902                           ; BSR set to: 0
 19903                           ;lorawan.c: 2184: aesBuffer[bufferIndex] = blockId;
 19904  004376  D81E               	call	PL310	;call to abstracted procedure
 19905  004378  C06E  FFDF         	movff	AssembleEncryptionBlock@blockId,indf2
 19906                           
 19907                           ; BSR set to: 0
 19908  00437C  0012               	return		;funcret
 19909  00437E                     __end_of_AssembleEncryptionBlock:
 19910                           	opt stack 0
 19911  00437E                     PL132:
 19912                           	opt stack 16
 19913  00437E  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 19914  004380  6B65               	clrf	(memcpy@n+1)& (0+255),b
 19915  004382  0E04               	movlw	4
 19916  004384  6F64               	movwf	memcpy@n& (0+255),b
 19917  004386  0C04               	retlw	4
 19918  004388                     __end_ofPL132:
 19919                           	opt stack 0
 19920  004388                     PL140:
 19921                           	opt stack 16
 19922  004388  6B63               	clrf	(memset@c+1)& (0+255),b
 19923  00438A  6B62               	clrf	memset@c& (0+255),b
 19924  00438C  6B65               	clrf	(memset@n+1)& (0+255),b
 19925  00438E  0E10               	movlw	16
 19926  004390  6F64               	movwf	memset@n& (0+255),b
 19927  004392  0C10               	retlw	16
 19928  004394                     __end_ofPL140:
 19929                           	opt stack 0
 19930  004394                     PL190:
 19931                           	opt stack 18
 19932  004394  0EB5               	movlw	low _aesBuffer
 19933  004396  2572               	addwf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 19934  004398  6F60               	movwf	memcpy@d1& (0+255),b
 19935  00439A  6B61               	clrf	(memcpy@d1+1)& (0+255),b
 19936  00439C  0E01               	movlw	high _aesBuffer
 19937  00439E  2361               	addwfc	(memcpy@d1+1)& (0+255),f,b
 19938  0043A0  0012               	return	
 19939  0043A2                     __end_ofPL190:
 19940                           	opt stack 0
 19941  0043A2                     PL196:
 19942                           	opt stack 16
 19943  0043A2  0EB5               	movlw	low _aesBuffer
 19944  0043A4  6F60               	movwf	memset@p1& (0+255),b
 19945  0043A6  0E01               	movlw	high _aesBuffer
 19946  0043A8  6F61               	movwf	(memset@p1+1)& (0+255),b
 19947  0043AA  0012               	return	
 19948  0043AC                     __end_ofPL196:
 19949                           	opt stack 0
 19950  0043AC                     PL276:
 19951                           	opt stack 16
 19952  0043AC  0E1E               	movlw	low (_loRa+30)
 19953  0043AE  6F62               	movwf	memcpy@s1& (0+255),b
 19954  0043B0  0E02               	movlw	high (_loRa+30)
 19955  0043B2  0012               	return	
 19956  0043B4                     __end_ofPL276:
 19957                           	opt stack 0
 19958  0043B4                     PL310:
 19959                           	opt stack 18
 19960  0043B4  0EB5               	movlw	low _aesBuffer
 19961  0043B6  2572               	addwf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 19962  0043B8  6ED9               	movwf	fsr2l,c
 19963  0043BA  6ADA               	clrf	fsr2h,c
 19964  0043BC  0E01               	movlw	high _aesBuffer
 19965  0043BE  22DA               	addwfc	fsr2h,f,c
 19966  0043C0  0012               	return	
 19967  0043C2                     __end_ofPL310:
 19968                           	opt stack 0
 19969                           tosu	equ	0xFFF
 19970                           tosh	equ	0xFFE
 19971                           tosl	equ	0xFFD
 19972                           pclath	equ	0xFFA
 19973                           tblptru	equ	0xFF8
 19974                           tblptrh	equ	0xFF7
 19975                           tblptrl	equ	0xFF6
 19976                           tablat	equ	0xFF5
 19977                           prodh	equ	0xFF4
 19978                           prodl	equ	0xFF3
 19979                           intcon	equ	0xFF2
 19980                           indf0	equ	0xFEF
 19981                           postinc0	equ	0xFEE
 19982                           plusw0	equ	0xFEB
 19983                           fsr0h	equ	0xFEA
 19984                           fsr0l	equ	0xFE9
 19985                           wreg	equ	0xFE8
 19986                           postinc1	equ	0xFE6
 19987                           postdec1	equ	0xFE5
 19988                           plusw1	equ	0xFE3
 19989                           fsr1h	equ	0xFE2
 19990                           fsr1l	equ	0xFE1
 19991                           indf2	equ	0xFDF
 19992                           postinc2	equ	0xFDE
 19993                           postdec2	equ	0xFDD
 19994                           plusw2	equ	0xFDB
 19995                           fsr2h	equ	0xFDA
 19996                           fsr2l	equ	0xFD9
 19997                           status	equ	0xFD8
 19998                           
 19999 ;; *************** function _CountfOptsLength *****************
 20000 ;; Defined at:
 20001 ;;		line 2134 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 20002 ;; Parameters:    Size  Location     Type
 20003 ;;		None
 20004 ;; Auto vars:     Size  Location     Type
 20005 ;;  i               1    7[BANK0 ] unsigned char 
 20006 ;;  macCommandLe    1    6[BANK0 ] unsigned char 
 20007 ;; Return value:  Size  Location     Type
 20008 ;;                  1    wreg      unsigned char 
 20009 ;; Registers used:
 20010 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 20011 ;; Tracked objects:
 20012 ;;		On entry : 3C/2
 20013 ;;		On exit  : 3F/0
 20014 ;;		Unchanged: 0/0
 20015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20016 ;;      Params:         0       0       0       0       0       0       0       0       0
 20017 ;;      Locals:         0       2       0       0       0       0       0       0       0
 20018 ;;      Temps:          0       6       0       0       0       0       0       0       0
 20019 ;;      Totals:         0       8       0       0       0       0       0       0       0
 20020 ;;Total ram usage:        8 bytes
 20021 ;; Hardware stack levels used:    1
 20022 ;; Hardware stack levels required when called:    7
 20023 ;; This function calls:
 20024 ;;		Nothing
 20025 ;; This function is called by:
 20026 ;;		_LORAWAN_GetMaxPayloadSize
 20027 ;;		_AssemblePacket
 20028 ;; This function uses a non-reentrant model
 20029 ;;
 20030                           
 20031                           	psect	text100
 20032  004858                     __ptext100:
 20033                           	opt stack 0
 20034  004858                     _CountfOptsLength:
 20035                           	opt stack 20
 20036                           
 20037                           ;lorawan.c: 2136: uint8_t i, macCommandLength=0;
 20038                           
 20039                           ; BSR set to: 0
 20040                           ;incstack = 0
 20041  004858  0100               	movlb	0	; () banked
 20042  00485A  6B66               	clrf	CountfOptsLength@macCommandLength& (0+255),b
 20043                           
 20044                           ;lorawan.c: 2138: for (i = 0; i < loRa.crtMacCmdIndex; i++)
 20045  00485C  6B67               	clrf	CountfOptsLength@i& (0+255),b
 20046  00485E  D01C               	goto	l13042
 20047  004860                     l13034:
 20048                           
 20049                           ; BSR set to: 0
 20050                           ;lorawan.c: 2139: {
 20051                           ;lorawan.c: 2140: if(loRa.macCommands[i].receivedCid != 0xFF)
 20052  004860  5167               	movf	CountfOptsLength@i& (0+255),w,b
 20053  004862  ECA3  F010         	call	PL16	;call to abstracted procedure
 20054  004866  28DE               	incf	postinc2,w,c
 20055  004868  E016               	bz	l13040
 20056                           
 20057                           ; BSR set to: 0
 20058                           ;lorawan.c: 2141: {
 20059                           ;lorawan.c: 2142: if((macCommandLength + macEndDevCmdReplyLen[loRa.macCommands[i].receiv
      +                          edCid - 2]) <= 0x0F)
 20060  00486A  D81D               	call	PL56	;call to abstracted procedure
 20061  00486C  ECA3  F010         	call	PL16	;call to abstracted procedure
 20062  004870  D81F               	call	PL112	;call to abstracted procedure
 20063  004872  C066  F064         	movff	CountfOptsLength@macCommandLength,??_CountfOptsLength+4
 20064  004876  6B65               	clrf	(??_CountfOptsLength+5)& (0+255),b
 20065  004878  2764               	addwf	(??_CountfOptsLength+4)& (0+255),f,b
 20066  00487A  0E00               	movlw	0
 20067  00487C  2365               	addwfc	(??_CountfOptsLength+5)& (0+255),f,b
 20068  00487E  BF65               	btfsc	(??_CountfOptsLength+5)& (0+255),7,b
 20069  004880  D005               	goto	l13038
 20070  004882  5165               	movf	(??_CountfOptsLength+5)& (0+255),w,b
 20071  004884  E10E               	bnz	l13044
 20072  004886  0E10               	movlw	16
 20073  004888  5D64               	subwf	(??_CountfOptsLength+4)& (0+255),w,b
 20074  00488A  E20B               	bc	l13044
 20075  00488C                     l13038:
 20076                           
 20077                           ; BSR set to: 0
 20078                           ;lorawan.c: 2143: {
 20079                           ;lorawan.c: 2144: macCommandLength += macEndDevCmdReplyLen[loRa.macCommands[i].receivedC
      +                          id - 2];
 20080  00488C  D80C               	call	PL56	;call to abstracted procedure
 20081  00488E  ECA3  F010         	call	PL16	;call to abstracted procedure
 20082  004892  D80E               	call	PL112	;call to abstracted procedure
 20083  004894  2766               	addwf	CountfOptsLength@macCommandLength& (0+255),f,b
 20084  004896                     l13040:
 20085                           
 20086                           ; BSR set to: 0
 20087  004896  2B67               	incf	CountfOptsLength@i& (0+255),f,b
 20088  004898                     l13042:
 20089                           
 20090                           ; BSR set to: 0
 20091  004898  0102               	movlb	2	; () banked
 20092  00489A  51A7               	movf	(_loRa+167)& (0+255),w,b
 20093  00489C  0100               	movlb	0	; () banked
 20094  00489E  5D67               	subwf	CountfOptsLength@i& (0+255),w,b
 20095  0048A0  E3DF               	bnc	l13034
 20096  0048A2                     l13044:
 20097                           
 20098                           ; BSR set to: 0
 20099                           ;lorawan.c: 2149: }
 20100                           ;lorawan.c: 2150: }
 20101                           ;lorawan.c: 2151: }
 20102                           ;lorawan.c: 2153: return macCommandLength;
 20103  0048A2  5166               	movf	CountfOptsLength@macCommandLength& (0+255),w,b
 20104                           
 20105                           ; BSR set to: 0
 20106  0048A4  0012               	return		;funcret
 20107  0048A6                     __end_of_CountfOptsLength:
 20108                           	opt stack 0
 20109  0048A6                     PL56:
 20110                           	opt stack 20
 20111  0048A6  0EFE               	movlw	254
 20112  0048A8  6F60               	movwf	??_CountfOptsLength& (0+255),b
 20113  0048AA  6961               	setf	(??_CountfOptsLength+1)& (0+255),b
 20114  0048AC  5167               	movf	CountfOptsLength@i& (0+255),w,b
 20115  0048AE  0012               	return	
 20116  0048B0                     __end_ofPL56:
 20117                           	opt stack 0
 20118  0048B0                     PL112:
 20119                           	opt stack 20
 20120  0048B0  50DF               	movf	indf2,w,c
 20121  0048B2  6F62               	movwf	(??_CountfOptsLength+2)& (0+255),b
 20122  0048B4  6B63               	clrf	(??_CountfOptsLength+3)& (0+255),b
 20123  0048B6  5160               	movf	??_CountfOptsLength& (0+255),w,b
 20124  0048B8  2762               	addwf	(??_CountfOptsLength+2)& (0+255),f,b
 20125  0048BA  5161               	movf	(??_CountfOptsLength+1)& (0+255),w,b
 20126  0048BC  2363               	addwfc	(??_CountfOptsLength+3)& (0+255),f,b
 20127  0048BE  0E9B               	movlw	low _macEndDevCmdReplyLen
 20128  0048C0  2562               	addwf	(??_CountfOptsLength+2)& (0+255),w,b
 20129  0048C2  6EF6               	movwf	tblptrl,c
 20130  0048C4  0E7F               	movlw	high _macEndDevCmdReplyLen
 20131  0048C6  2163               	addwfc	(??_CountfOptsLength+3)& (0+255),w,b
 20132  0048C8  6EF7               	movwf	tblptrh,c
 20133  0048CA                     	if	0	;There are less than 3 active tblptr bytes
 20134  0048CA                     	endif
 20135  0048CA  0008               	tblrd		*
 20136  0048CC  50F5               	movf	tablat,w,c
 20137  0048CE  0012               	return	
 20138  0048D0                     __end_ofPL112:
 20139                           	opt stack 0
 20140                           tosu	equ	0xFFF
 20141                           tosh	equ	0xFFE
 20142                           tosl	equ	0xFFD
 20143                           pclath	equ	0xFFA
 20144                           tblptru	equ	0xFF8
 20145                           tblptrh	equ	0xFF7
 20146                           tblptrl	equ	0xFF6
 20147                           tablat	equ	0xFF5
 20148                           prodh	equ	0xFF4
 20149                           prodl	equ	0xFF3
 20150                           intcon	equ	0xFF2
 20151                           indf0	equ	0xFEF
 20152                           postinc0	equ	0xFEE
 20153                           plusw0	equ	0xFEB
 20154                           fsr0h	equ	0xFEA
 20155                           fsr0l	equ	0xFE9
 20156                           wreg	equ	0xFE8
 20157                           postinc1	equ	0xFE6
 20158                           postdec1	equ	0xFE5
 20159                           plusw1	equ	0xFE3
 20160                           fsr1h	equ	0xFE2
 20161                           fsr1l	equ	0xFE1
 20162                           indf2	equ	0xFDF
 20163                           postinc2	equ	0xFDE
 20164                           postdec2	equ	0xFDD
 20165                           plusw2	equ	0xFDB
 20166                           fsr2h	equ	0xFDA
 20167                           fsr2l	equ	0xFD9
 20168                           status	equ	0xFD8
 20169                           
 20170 ;; *************** function _ExtractMic *****************
 20171 ;; Defined at:
 20172 ;;		line 2187 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 20173 ;; Parameters:    Size  Location     Type
 20174 ;;  buffer          2   10[BANK0 ] PTR unsigned char 
 20175 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 20176 ;;  bufferLength    1   12[BANK0 ] unsigned char 
 20177 ;; Auto vars:     Size  Location     Type
 20178 ;;  mic             4   16[BANK0 ] unsigned long 
 20179 ;; Return value:  Size  Location     Type
 20180 ;;                  4   10[BANK0 ] unsigned long 
 20181 ;; Registers used:
 20182 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20183 ;; Tracked objects:
 20184 ;;		On entry : 3F/0
 20185 ;;		On exit  : 3F/0
 20186 ;;		Unchanged: 0/0
 20187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20188 ;;      Params:         0       4       0       0       0       0       0       0       0
 20189 ;;      Locals:         0       4       0       0       0       0       0       0       0
 20190 ;;      Temps:          0       2       0       0       0       0       0       0       0
 20191 ;;      Totals:         0      10       0       0       0       0       0       0       0
 20192 ;;Total ram usage:       10 bytes
 20193 ;; Hardware stack levels used:    1
 20194 ;; Hardware stack levels required when called:    8
 20195 ;; This function calls:
 20196 ;;		_memcpy
 20197 ;; This function is called by:
 20198 ;;		_LORAWAN_RxDone
 20199 ;; This function uses a non-reentrant model
 20200 ;;
 20201                           
 20202                           	psect	text101
 20203  005680                     __ptext101:
 20204                           	opt stack 0
 20205  005680                     _ExtractMic:
 20206                           	opt stack 18
 20207                           
 20208                           ; BSR set to: 0
 20209                           ;lorawan.c: 2189: uint32_t mic = 0;
 20210                           
 20211                           ; BSR set to: 0
 20212                           ;incstack = 0
 20213  005680  6B70               	clrf	ExtractMic@mic& (0+255),b
 20214  005682  6B71               	clrf	(ExtractMic@mic+1)& (0+255),b
 20215  005684  6B72               	clrf	(ExtractMic@mic+2)& (0+255),b
 20216  005686  6B73               	clrf	(ExtractMic@mic+3)& (0+255),b
 20217                           
 20218                           ; BSR set to: 0
 20219                           ;lorawan.c: 2190: memcpy (&mic, &buffer[bufferLength - 4], sizeof (mic));
 20220  005688  0E70               	movlw	low ExtractMic@mic
 20221  00568A  6F60               	movwf	memcpy@d1& (0+255),b
 20222  00568C  6B61               	clrf	(memcpy@d1+1)& (0+255),b
 20223  00568E  516C               	movf	ExtractMic@bufferLength& (0+255),w,b
 20224  005690  256A               	addwf	ExtractMic@buffer& (0+255),w,b
 20225  005692  6F6E               	movwf	??_ExtractMic& (0+255),b
 20226  005694  0E00               	movlw	0
 20227  005696  216B               	addwfc	(ExtractMic@buffer+1)& (0+255),w,b
 20228  005698  6F6F               	movwf	(??_ExtractMic+1)& (0+255),b
 20229  00569A  0EFC               	movlw	252
 20230  00569C  256E               	addwf	??_ExtractMic& (0+255),w,b
 20231  00569E  6F62               	movwf	memcpy@s1& (0+255),b
 20232  0056A0  0EFF               	movlw	255
 20233  0056A2  216F               	addwfc	(??_ExtractMic+1)& (0+255),w,b
 20234  0056A4  ECBF  F021         	call	PL132	;call to abstracted procedure
 20235  0056A8  EC94  F028         	call	_memcpy	;wreg free
 20236                           
 20237                           ; BSR set to: 0
 20238                           ;lorawan.c: 2191: return mic;
 20239  0056AC  C070  F06A         	movff	ExtractMic@mic,?_ExtractMic
 20240  0056B0  C071  F06B         	movff	ExtractMic@mic+1,?_ExtractMic+1
 20241  0056B4  C072  F06C         	movff	ExtractMic@mic+2,?_ExtractMic+2
 20242  0056B8  C073  F06D         	movff	ExtractMic@mic+3,?_ExtractMic+3
 20243                           
 20244                           ; BSR set to: 0
 20245  0056BC  0012               	return		;funcret
 20246  0056BE                     __end_of_ExtractMic:
 20247                           	opt stack 0
 20248                           tosu	equ	0xFFF
 20249                           tosh	equ	0xFFE
 20250                           tosl	equ	0xFFD
 20251                           pclath	equ	0xFFA
 20252                           tblptru	equ	0xFF8
 20253                           tblptrh	equ	0xFF7
 20254                           tblptrl	equ	0xFF6
 20255                           tablat	equ	0xFF5
 20256                           prodh	equ	0xFF4
 20257                           prodl	equ	0xFF3
 20258                           intcon	equ	0xFF2
 20259                           indf0	equ	0xFEF
 20260                           postinc0	equ	0xFEE
 20261                           plusw0	equ	0xFEB
 20262                           fsr0h	equ	0xFEA
 20263                           fsr0l	equ	0xFE9
 20264                           wreg	equ	0xFE8
 20265                           postinc1	equ	0xFE6
 20266                           postdec1	equ	0xFE5
 20267                           plusw1	equ	0xFE3
 20268                           fsr1h	equ	0xFE2
 20269                           fsr1l	equ	0xFE1
 20270                           indf2	equ	0xFDF
 20271                           postinc2	equ	0xFDE
 20272                           postdec2	equ	0xFDD
 20273                           plusw2	equ	0xFDB
 20274                           fsr2h	equ	0xFDA
 20275                           fsr2l	equ	0xFD9
 20276                           status	equ	0xFD8
 20277                           
 20278 ;; *************** function _ComputeSessionKeys *****************
 20279 ;; Defined at:
 20280 ;;		line 2062 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 20281 ;; Parameters:    Size  Location     Type
 20282 ;;  joinAcceptBu    2   64[BANK0 ] PTR struct .
 20283 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 20284 ;; Auto vars:     Size  Location     Type
 20285 ;;		None
 20286 ;; Return value:  Size  Location     Type
 20287 ;;                  1    wreg      void 
 20288 ;; Registers used:
 20289 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20290 ;; Tracked objects:
 20291 ;;		On entry : 3D/0
 20292 ;;		On exit  : 3F/0
 20293 ;;		Unchanged: 0/0
 20294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20295 ;;      Params:         0       2       0       0       0       0       0       0       0
 20296 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20297 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20298 ;;      Totals:         0       2       0       0       0       0       0       0       0
 20299 ;;Total ram usage:        2 bytes
 20300 ;; Hardware stack levels used:    1
 20301 ;; Hardware stack levels required when called:   10
 20302 ;; This function calls:
 20303 ;;		_AESEncodeLoRa
 20304 ;;		_PrepareSessionKeys
 20305 ;; This function is called by:
 20306 ;;		_LORAWAN_RxDone
 20307 ;; This function uses a non-reentrant model
 20308 ;;
 20309                           
 20310                           	psect	text102
 20311  004C5A                     __ptext102:
 20312                           	opt stack 0
 20313  004C5A                     _ComputeSessionKeys:
 20314                           	opt stack 16
 20315                           
 20316                           ;lorawan.c: 2064: PrepareSessionKeys(loRa.activationParameters.applicationSessionKey, jo
      +                          inAcceptBuffer->members.appNonce, joinAcceptBuffer->members.networkId);
 20317                           
 20318                           ; BSR set to: 0
 20319                           ;incstack = 0
 20320  004C5A  0E32               	movlw	low (_loRa+50)
 20321  004C5C  0100               	movlb	0	; () banked
 20322  004C5E  6F6A               	movwf	PrepareSessionKeys@sessionKey& (0+255),b
 20323  004C60  0E02               	movlw	high (_loRa+50)
 20324  004C62  D81C               	call	PL150	;call to abstracted procedure
 20325  004C64  ECE3  F027         	call	_PrepareSessionKeys	;wreg free
 20326                           
 20327                           ; BSR set to: 0
 20328                           ;lorawan.c: 2065: loRa.activationParameters.applicationSessionKey[0] = 0x02;
 20329  004C68  0E02               	movlw	2
 20330  004C6A  0102               	movlb	2	; () banked
 20331  004C6C  6F32               	movwf	(_loRa+50)& (0+255),b
 20332                           
 20333                           ; BSR set to: 2
 20334                           ;lorawan.c: 2066: AESEncodeLoRa(loRa.activationParameters.applicationSessionKey, loRa.ac
      +                          tivationParameters.applicationKey);
 20335  004C6E  0E32               	movlw	low (_loRa+50)
 20336  004C70  0100               	movlb	0	; () banked
 20337  004C72  6F8C               	movwf	AESEncodeLoRa@block& (0+255),b
 20338  004C74  0E02               	movlw	high (_loRa+50)
 20339  004C76  D81F               	call	PL240	;call to abstracted procedure
 20340  004C78  EC51  F02E         	call	_AESEncodeLoRa	;wreg free
 20341                           
 20342                           ; BSR set to: 0
 20343                           ;lorawan.c: 2068: PrepareSessionKeys(loRa.activationParameters.networkSessionKey, joinAc
      +                          ceptBuffer->members.appNonce, joinAcceptBuffer->members.networkId);
 20344  004C7C  0E22               	movlw	low (_loRa+34)
 20345  004C7E  6F6A               	movwf	PrepareSessionKeys@sessionKey& (0+255),b
 20346  004C80  0E02               	movlw	high (_loRa+34)
 20347  004C82  D80C               	call	PL150	;call to abstracted procedure
 20348  004C84  ECE3  F027         	call	_PrepareSessionKeys	;wreg free
 20349                           
 20350                           ; BSR set to: 0
 20351                           ;lorawan.c: 2069: loRa.activationParameters.networkSessionKey[0] = 0x01;
 20352  004C88  0E01               	movlw	1
 20353  004C8A  0102               	movlb	2	; () banked
 20354  004C8C  6F22               	movwf	(_loRa+34)& (0+255),b
 20355                           
 20356                           ;lorawan.c: 2070: AESEncodeLoRa(loRa.activationParameters.networkSessionKey, loRa.activa
      +                          tionParameters.applicationKey);
 20357  004C8E  0E22               	movlw	low (_loRa+34)
 20358  004C90  0100               	movlb	0	; () banked
 20359  004C92  6F8C               	movwf	AESEncodeLoRa@block& (0+255),b
 20360  004C94  0E02               	movlw	high (_loRa+34)
 20361  004C96  D80F               	call	PL240	;call to abstracted procedure
 20362  004C98  EF51  F02E         	goto	_AESEncodeLoRa	;wreg free
 20363  004C9C                     __end_of_ComputeSessionKeys:
 20364                           	opt stack 0
 20365  004C9C                     PL150:
 20366                           	opt stack 16
 20367  004C9C  6F6B               	movwf	(PrepareSessionKeys@sessionKey+1)& (0+255),b
 20368  004C9E  29A0               	incf	ComputeSessionKeys@joinAcceptBuffer& (0+255),w,b
 20369  004CA0  6F6C               	movwf	PrepareSessionKeys@appNonce& (0+255),b
 20370  004CA2  0E00               	movlw	0
 20371  004CA4  21A1               	addwfc	(ComputeSessionKeys@joinAcceptBuffer+1)& (0+255),w,b
 20372  004CA6  6F6D               	movwf	(PrepareSessionKeys@appNonce+1)& (0+255),b
 20373  004CA8  0E04               	movlw	4
 20374  004CAA  25A0               	addwf	ComputeSessionKeys@joinAcceptBuffer& (0+255),w,b
 20375  004CAC  6F6E               	movwf	PrepareSessionKeys@networkId& (0+255),b
 20376  004CAE  0E00               	movlw	0
 20377  004CB0  21A1               	addwfc	(ComputeSessionKeys@joinAcceptBuffer+1)& (0+255),w,b
 20378  004CB2  6F6F               	movwf	(PrepareSessionKeys@networkId+1)& (0+255),b
 20379  004CB4  0012               	return	
 20380  004CB6                     __end_ofPL150:
 20381                           	opt stack 0
 20382  004CB6                     PL240:
 20383                           	opt stack 12
 20384  004CB6  6F8D               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 20385  004CB8  0E42               	movlw	low (_loRa+66)
 20386  004CBA  6F8E               	movwf	AESEncodeLoRa@key& (0+255),b
 20387  004CBC  0E02               	movlw	high (_loRa+66)
 20388  004CBE  6F8F               	movwf	(AESEncodeLoRa@key+1)& (0+255),b
 20389  004CC0  0012               	return	
 20390  004CC2                     __end_ofPL240:
 20391                           	opt stack 0
 20392                           tosu	equ	0xFFF
 20393                           tosh	equ	0xFFE
 20394                           tosl	equ	0xFFD
 20395                           pclath	equ	0xFFA
 20396                           tblptru	equ	0xFF8
 20397                           tblptrh	equ	0xFF7
 20398                           tblptrl	equ	0xFF6
 20399                           tablat	equ	0xFF5
 20400                           prodh	equ	0xFF4
 20401                           prodl	equ	0xFF3
 20402                           intcon	equ	0xFF2
 20403                           indf0	equ	0xFEF
 20404                           postinc0	equ	0xFEE
 20405                           plusw0	equ	0xFEB
 20406                           fsr0h	equ	0xFEA
 20407                           fsr0l	equ	0xFE9
 20408                           wreg	equ	0xFE8
 20409                           postinc1	equ	0xFE6
 20410                           postdec1	equ	0xFE5
 20411                           plusw1	equ	0xFE3
 20412                           fsr1h	equ	0xFE2
 20413                           fsr1l	equ	0xFE1
 20414                           indf2	equ	0xFDF
 20415                           postinc2	equ	0xFDE
 20416                           postdec2	equ	0xFDD
 20417                           plusw2	equ	0xFDB
 20418                           fsr2h	equ	0xFDA
 20419                           fsr2l	equ	0xFD9
 20420                           status	equ	0xFD8
 20421                           
 20422 ;; *************** function _PrepareSessionKeys *****************
 20423 ;; Defined at:
 20424 ;;		line 2045 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 20425 ;; Parameters:    Size  Location     Type
 20426 ;;  sessionKey      2   10[BANK0 ] PTR unsigned char 
 20427 ;;		 -> loRa.activationParameters(105), loRa(245), 
 20428 ;;  appNonce        2   12[BANK0 ] PTR unsigned char 
 20429 ;;		 -> ComputeSessionKeys@joinAcceptBuffer(2), radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 20430 ;;  networkId       2   14[BANK0 ] PTR unsigned char 
 20431 ;;		 -> ComputeSessionKeys@joinAcceptBuffer(2), radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 20432 ;; Auto vars:     Size  Location     Type
 20433 ;;  index           1   16[BANK0 ] unsigned char 
 20434 ;; Return value:  Size  Location     Type
 20435 ;;                  1    wreg      void 
 20436 ;; Registers used:
 20437 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20438 ;; Tracked objects:
 20439 ;;		On entry : 3F/0
 20440 ;;		On exit  : 3F/0
 20441 ;;		Unchanged: 0/0
 20442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20443 ;;      Params:         0       6       0       0       0       0       0       0       0
 20444 ;;      Locals:         0       1       0       0       0       0       0       0       0
 20445 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20446 ;;      Totals:         0       7       0       0       0       0       0       0       0
 20447 ;;Total ram usage:        7 bytes
 20448 ;; Hardware stack levels used:    1
 20449 ;; Hardware stack levels required when called:    8
 20450 ;; This function calls:
 20451 ;;		_memcpy
 20452 ;;		_memset
 20453 ;; This function is called by:
 20454 ;;		_ComputeSessionKeys
 20455 ;; This function uses a non-reentrant model
 20456 ;;
 20457                           
 20458                           	psect	text103
 20459  004FC6                     __ptext103:
 20460                           	opt stack 0
 20461  004FC6                     _PrepareSessionKeys:
 20462                           	opt stack 17
 20463                           
 20464                           ; BSR set to: 0
 20465                           ;lorawan.c: 2047: uint8_t index = 0;
 20466                           
 20467                           ; BSR set to: 0
 20468                           ;incstack = 0
 20469  004FC6  6B70               	clrf	PrepareSessionKeys@index& (0+255),b
 20470                           
 20471                           ; BSR set to: 0
 20472                           ;lorawan.c: 2049: memset (&sessionKey[index], 0, sizeof(aesBuffer));
 20473  004FC8  C06A  F060         	movff	PrepareSessionKeys@sessionKey,memset@p1
 20474  004FCC  C06B  F061         	movff	PrepareSessionKeys@sessionKey+1,memset@p1+1
 20475  004FD0  ECC4  F021         	call	PL140	;call to abstracted procedure
 20476  004FD4  ECEF  F02D         	call	_memset	;wreg free
 20477                           
 20478                           ; BSR set to: 0
 20479                           ;lorawan.c: 2050: index ++;
 20480  004FD8  2B70               	incf	PrepareSessionKeys@index& (0+255),f,b
 20481                           
 20482                           ; BSR set to: 0
 20483                           ;lorawan.c: 2052: memcpy(&sessionKey[index], appNonce, 3);
 20484  004FDA  D818               	call	PL192	;call to abstracted procedure
 20485  004FDC  C06C  F062         	movff	PrepareSessionKeys@appNonce,memcpy@s1
 20486  004FE0  C06D  F063         	movff	PrepareSessionKeys@appNonce+1,memcpy@s1+1
 20487  004FE4  D81A               	call	PL436	;call to abstracted procedure
 20488  004FE6  EC94  F028         	call	_memcpy	;wreg free
 20489                           
 20490                           ; BSR set to: 0
 20491                           ;lorawan.c: 2053: index = index + 3;
 20492  004FEA  0E03               	movlw	3
 20493  004FEC  2770               	addwf	PrepareSessionKeys@index& (0+255),f,b
 20494                           
 20495                           ; BSR set to: 0
 20496                           ;lorawan.c: 2055: memcpy(&sessionKey[index], networkId, 3);
 20497  004FEE  D80E               	call	PL192	;call to abstracted procedure
 20498  004FF0  C06E  F062         	movff	PrepareSessionKeys@networkId,memcpy@s1
 20499  004FF4  C06F  F063         	movff	PrepareSessionKeys@networkId+1,memcpy@s1+1
 20500  004FF8  D810               	call	PL436	;call to abstracted procedure
 20501  004FFA  EC94  F028         	call	_memcpy	;wreg free
 20502                           
 20503                           ; BSR set to: 0
 20504                           ;lorawan.c: 2056: index = index + 3;
 20505  004FFE  0E03               	movlw	3
 20506  005000  2770               	addwf	PrepareSessionKeys@index& (0+255),f,b
 20507                           
 20508                           ; BSR set to: 0
 20509                           ;lorawan.c: 2058: memcpy(&sessionKey[index], &loRa.devNonce, sizeof(loRa.devNonce) );
 20510  005002  D804               	call	PL192	;call to abstracted procedure
 20511  005004  EC78  F017         	call	PL256	;call to abstracted procedure
 20512  005008  EF94  F028         	goto	_memcpy	;wreg free
 20513  00500C                     __end_of_PrepareSessionKeys:
 20514                           	opt stack 0
 20515  00500C                     PL192:
 20516                           	opt stack 17
 20517  00500C  5170               	movf	PrepareSessionKeys@index& (0+255),w,b
 20518  00500E  256A               	addwf	PrepareSessionKeys@sessionKey& (0+255),w,b
 20519  005010  6F60               	movwf	memcpy@d1& (0+255),b
 20520  005012  0E00               	movlw	0
 20521  005014  216B               	addwfc	(PrepareSessionKeys@sessionKey+1)& (0+255),w,b
 20522  005016  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 20523  005018  0012               	return	
 20524  00501A                     __end_ofPL192:
 20525                           	opt stack 0
 20526  00501A                     PL436:
 20527                           	opt stack 17
 20528  00501A  6B65               	clrf	(memcpy@n+1)& (0+255),b
 20529  00501C  0E03               	movlw	3
 20530  00501E  6F64               	movwf	memcpy@n& (0+255),b
 20531  005020  0C03               	retlw	3
 20532  005022                     __end_ofPL436:
 20533                           	opt stack 0
 20534                           tosu	equ	0xFFF
 20535                           tosh	equ	0xFFE
 20536                           tosl	equ	0xFFD
 20537                           pclath	equ	0xFFA
 20538                           tblptru	equ	0xFF8
 20539                           tblptrh	equ	0xFF7
 20540                           tblptrl	equ	0xFF6
 20541                           tablat	equ	0xFF5
 20542                           prodh	equ	0xFF4
 20543                           prodl	equ	0xFF3
 20544                           intcon	equ	0xFF2
 20545                           indf0	equ	0xFEF
 20546                           postinc0	equ	0xFEE
 20547                           plusw0	equ	0xFEB
 20548                           fsr0h	equ	0xFEA
 20549                           fsr0l	equ	0xFE9
 20550                           wreg	equ	0xFE8
 20551                           postinc1	equ	0xFE6
 20552                           postdec1	equ	0xFE5
 20553                           plusw1	equ	0xFE3
 20554                           fsr1h	equ	0xFE2
 20555                           fsr1l	equ	0xFE1
 20556                           indf2	equ	0xFDF
 20557                           postinc2	equ	0xFDE
 20558                           postdec2	equ	0xFDD
 20559                           plusw2	equ	0xFDB
 20560                           fsr2h	equ	0xFDA
 20561                           fsr2l	equ	0xFD9
 20562                           status	equ	0xFD8
 20563                           
 20564 ;; *************** function _CheckMcastFlags *****************
 20565 ;; Defined at:
 20566 ;;		line 2097 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 20567 ;; Parameters:    Size  Location     Type
 20568 ;;  hdr             2    0[BANK0 ] PTR struct .
 20569 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 20570 ;; Auto vars:     Size  Location     Type
 20571 ;;		None
 20572 ;; Return value:  Size  Location     Type
 20573 ;;                  1    wreg      unsigned char 
 20574 ;; Registers used:
 20575 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20576 ;; Tracked objects:
 20577 ;;		On entry : 3F/2
 20578 ;;		On exit  : 3D/0
 20579 ;;		Unchanged: 0/0
 20580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20581 ;;      Params:         0       2       0       0       0       0       0       0       0
 20582 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20583 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20584 ;;      Totals:         0       2       0       0       0       0       0       0       0
 20585 ;;Total ram usage:        2 bytes
 20586 ;; Hardware stack levels used:    1
 20587 ;; Hardware stack levels required when called:    7
 20588 ;; This function calls:
 20589 ;;		Nothing
 20590 ;; This function is called by:
 20591 ;;		_LORAWAN_RxDone
 20592 ;; This function uses a non-reentrant model
 20593 ;;
 20594                           
 20595                           	psect	text104
 20596  00507A                     __ptext104:
 20597                           	opt stack 0
 20598  00507A                     _CheckMcastFlags:
 20599                           	opt stack 19
 20600                           
 20601                           ; BSR set to: 2
 20602                           ;lorawan.c: 2109: if ((0 != hdr->members.fCtrl.ack) || (0 != hdr->members.fCtrl.adrAckRe
      +                          q) || (FRAME_TYPE_DATA_UNCONFIRMED_DOWN != hdr->members.mhdr.bits.mType))
 20603                           
 20604                           ; BSR set to: 0
 20605                           ;incstack = 0
 20606  00507A  0100               	movlb	0	; () banked
 20607  00507C  D823               	call	PL136	;call to abstracted procedure
 20608  00507E  BADF               	btfsc	indf2,5,c
 20609  005080  0C00               	retlw	0
 20610                           
 20611                           ; BSR set to: 0
 20612  005082  D820               	call	PL136	;call to abstracted procedure
 20613  005084  BCDF               	btfsc	indf2,6,c
 20614  005086  0C00               	retlw	0
 20615                           
 20616                           ; BSR set to: 0
 20617  005088  C060  FFD9         	movff	CheckMcastFlags@hdr,fsr2l
 20618  00508C  C061  FFDA         	movff	CheckMcastFlags@hdr+1,fsr2h
 20619  005090  38DF               	swapf	223,w,c
 20620  005092  32E8               	rrcf	wreg,f,c
 20621  005094  0B07               	andlw	7
 20622  005096  0A03               	xorlw	3
 20623  005098  E001               	bz	l13966
 20624                           
 20625                           ; BSR set to: 0
 20626                           ;lorawan.c: 2110: {
 20627                           ;lorawan.c: 2111: return 0;
 20628  00509A  0C00               	retlw	0
 20629  00509C                     l13966:
 20630                           
 20631                           ; BSR set to: 0
 20632                           ;lorawan.c: 2112: }
 20633                           ;lorawan.c: 2114: if (0 != hdr->members.fCtrl.fOptsLen)
 20634  00509C  D813               	call	PL136	;call to abstracted procedure
 20635  00509E  50DF               	movf	223,w,c
 20636  0050A0  0B0F               	andlw	15
 20637  0050A2  E001               	bz	l13974
 20638  0050A4  0C00               	retlw	0
 20639  0050A6                     l13974:
 20640                           
 20641                           ; BSR set to: 0
 20642                           ;lorawan.c: 2118: else
 20643                           ;lorawan.c: 2119: {
 20644                           ;lorawan.c: 2120: if ( 0 == *(((uint8_t *)hdr) + 8))
 20645  0050A6  EE20 F008          	lfsr	2,8
 20646  0050AA  5160               	movf	CheckMcastFlags@hdr& (0+255),w,b
 20647  0050AC  26D9               	addwf	fsr2l,f,c
 20648  0050AE  5161               	movf	(CheckMcastFlags@hdr+1)& (0+255),w,b
 20649  0050B0  22DA               	addwfc	fsr2h,f,c
 20650  0050B2  50DF               	movf	indf2,w,c
 20651  0050B4  E101               	bnz	l13980
 20652  0050B6  0C00               	retlw	0
 20653  0050B8                     l13980:
 20654                           
 20655                           ; BSR set to: 0
 20656                           ;lorawan.c: 2123: }
 20657                           ;lorawan.c: 2124: }
 20658                           ;lorawan.c: 2126: if (hdr->members.fCtrl.fPending == 1)
 20659  0050B8  D805               	call	PL136	;call to abstracted procedure
 20660  0050BA  A8DF               	btfss	indf2,4,c
 20661  0050BC  0C01               	retlw	1
 20662                           
 20663                           ; BSR set to: 0
 20664                           ;lorawan.c: 2127: {
 20665                           ;lorawan.c: 2128: loRa.lorawanMacStatus.fPending = 1;
 20666  0050BE  0102               	movlb	2	; () banked
 20667  0050C0  8700               	bsf	_loRa& (0+255),3,b
 20668                           
 20669                           ;lorawan.c: 2129: }
 20670                           ;lorawan.c: 2131: return 1;
 20671  0050C2  0C01               	retlw	1	;funcret
 20672  0050C4                     __end_of_CheckMcastFlags:
 20673                           	opt stack 0
 20674  0050C4                     PL136:
 20675                           	opt stack 19
 20676  0050C4  EE20 F005          	lfsr	2,5
 20677  0050C8  5160               	movf	CheckMcastFlags@hdr& (0+255),w,b
 20678  0050CA  26D9               	addwf	fsr2l,f,c
 20679  0050CC  5161               	movf	(CheckMcastFlags@hdr+1)& (0+255),w,b
 20680  0050CE  22DA               	addwfc	fsr2h,f,c
 20681  0050D0  0012               	return	
 20682  0050D2                     __end_ofPL136:
 20683                           	opt stack 0
 20684                           tosu	equ	0xFFF
 20685                           tosh	equ	0xFFE
 20686                           tosl	equ	0xFFD
 20687                           pclath	equ	0xFFA
 20688                           tblptru	equ	0xFF8
 20689                           tblptrh	equ	0xFF7
 20690                           tblptrl	equ	0xFF6
 20691                           tablat	equ	0xFF5
 20692                           prodh	equ	0xFF4
 20693                           prodl	equ	0xFF3
 20694                           intcon	equ	0xFF2
 20695                           indf0	equ	0xFEF
 20696                           postinc0	equ	0xFEE
 20697                           plusw0	equ	0xFEB
 20698                           fsr0h	equ	0xFEA
 20699                           fsr0l	equ	0xFE9
 20700                           wreg	equ	0xFE8
 20701                           postinc1	equ	0xFE6
 20702                           postdec1	equ	0xFE5
 20703                           plusw1	equ	0xFE3
 20704                           fsr1h	equ	0xFE2
 20705                           fsr1l	equ	0xFE1
 20706                           indf2	equ	0xFDF
 20707                           postinc2	equ	0xFDE
 20708                           postdec2	equ	0xFDD
 20709                           plusw2	equ	0xFDB
 20710                           fsr2h	equ	0xFDA
 20711                           fsr2l	equ	0xFD9
 20712                           status	equ	0xFD8
 20713                           
 20714 ;; *************** function _CheckFlags *****************
 20715 ;; Defined at:
 20716 ;;		line 2074 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 20717 ;; Parameters:    Size  Location     Type
 20718 ;;  hdr             2    0[BANK0 ] PTR struct .
 20719 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 20720 ;; Auto vars:     Size  Location     Type
 20721 ;;		None
 20722 ;; Return value:  Size  Location     Type
 20723 ;;                  1    wreg      void 
 20724 ;; Registers used:
 20725 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20726 ;; Tracked objects:
 20727 ;;		On entry : 3F/2
 20728 ;;		On exit  : 3D/0
 20729 ;;		Unchanged: 0/0
 20730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20731 ;;      Params:         0       2       0       0       0       0       0       0       0
 20732 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20733 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20734 ;;      Totals:         0       2       0       0       0       0       0       0       0
 20735 ;;Total ram usage:        2 bytes
 20736 ;; Hardware stack levels used:    1
 20737 ;; Hardware stack levels required when called:    7
 20738 ;; This function calls:
 20739 ;;		Nothing
 20740 ;; This function is called by:
 20741 ;;		_LORAWAN_RxDone
 20742 ;; This function uses a non-reentrant model
 20743 ;;
 20744                           
 20745                           	psect	text105
 20746  005496                     __ptext105:
 20747                           	opt stack 0
 20748  005496                     _CheckFlags:
 20749                           	opt stack 0
 20750                           
 20751                           ; BSR set to: 2
 20752                           ;lorawan.c: 2076: if (hdr->members.fCtrl.adr == 1)
 20753                           
 20754                           ;incstack = 0
 20755  005496  D81C               	call	PL154	;call to abstracted procedure
 20756  005498  AEDF               	btfss	indf2,7,c
 20757  00549A  D002               	goto	l14014
 20758                           
 20759                           ; BSR set to: 0
 20760                           ;lorawan.c: 2077: {
 20761                           ;lorawan.c: 2078: loRa.macStatus.adr = 1;
 20762  00549C  0102               	movlb	2	; () banked
 20763  00549E  8D02               	bsf	(_loRa+2)& (0+255),6,b
 20764  0054A0                     l14014:
 20765                           
 20766                           ;lorawan.c: 2079: }
 20767                           ;lorawan.c: 2081: if (hdr->members.fCtrl.fPending == 1)
 20768  0054A0  D817               	call	PL154	;call to abstracted procedure
 20769  0054A2  A8DF               	btfss	indf2,4,c
 20770  0054A4  D002               	goto	l14018
 20771                           
 20772                           ; BSR set to: 0
 20773                           ;lorawan.c: 2082: {
 20774                           ;lorawan.c: 2083: loRa.lorawanMacStatus.fPending = 1;
 20775  0054A6  0102               	movlb	2	; () banked
 20776  0054A8  8700               	bsf	_loRa& (0+255),3,b
 20777  0054AA                     l14018:
 20778                           
 20779                           ;lorawan.c: 2084: }
 20780                           ;lorawan.c: 2086: if (hdr->members.fCtrl.adrAckReq == 1)
 20781  0054AA  D812               	call	PL154	;call to abstracted procedure
 20782  0054AC  ACDF               	btfss	indf2,6,c
 20783  0054AE  D002               	goto	l14022
 20784                           
 20785                           ; BSR set to: 0
 20786                           ;lorawan.c: 2087: {
 20787                           ;lorawan.c: 2088: loRa.lorawanMacStatus.adrAckRequest = 1;
 20788  0054B0  0102               	movlb	2	; () banked
 20789  0054B2  8900               	bsf	_loRa& (0+255),4,b
 20790  0054B4                     l14022:
 20791                           
 20792                           ;lorawan.c: 2089: }
 20793                           ;lorawan.c: 2091: if (hdr->members.mhdr.bits.mType == FRAME_TYPE_DATA_CONFIRMED_DOWN)
 20794  0054B4  C060  FFD9         	movff	CheckFlags@hdr,fsr2l
 20795  0054B8  C061  FFDA         	movff	CheckFlags@hdr+1,fsr2h
 20796  0054BC  0100               	movlb	0	; () banked
 20797  0054BE  38DF               	swapf	223,w,c
 20798  0054C0  32E8               	rrcf	wreg,f,c
 20799  0054C2  0B07               	andlw	7
 20800  0054C4  0A05               	xorlw	5
 20801  0054C6  A4D8               	btfss	status,2,c
 20802  0054C8  0012               	return	
 20803                           
 20804                           ; BSR set to: 0
 20805                           ;lorawan.c: 2092: {
 20806                           ;lorawan.c: 2093: loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage = 1;
 20807  0054CA  0102               	movlb	2	; () banked
 20808  0054CC  8300               	bsf	_loRa& (0+255),1,b
 20809  0054CE  0012               	return		;funcret
 20810  0054D0                     __end_of_CheckFlags:
 20811                           	opt stack 0
 20812  0054D0                     PL154:
 20813                           	opt stack 19
 20814  0054D0  0100               	movlb	0	; () banked
 20815  0054D2  EE20 F005          	lfsr	2,5
 20816  0054D6  5160               	movf	CheckFlags@hdr& (0+255),w,b
 20817  0054D8  26D9               	addwf	fsr2l,f,c
 20818  0054DA  5161               	movf	(CheckFlags@hdr+1)& (0+255),w,b
 20819  0054DC  22DA               	addwfc	fsr2h,f,c
 20820  0054DE  0012               	return	
 20821  0054E0                     __end_ofPL154:
 20822                           	opt stack 0
 20823                           tosu	equ	0xFFF
 20824                           tosh	equ	0xFFE
 20825                           tosl	equ	0xFFD
 20826                           pclath	equ	0xFFA
 20827                           tblptru	equ	0xFF8
 20828                           tblptrh	equ	0xFF7
 20829                           tblptrl	equ	0xFF6
 20830                           tablat	equ	0xFF5
 20831                           prodh	equ	0xFF4
 20832                           prodl	equ	0xFF3
 20833                           intcon	equ	0xFF2
 20834                           indf0	equ	0xFEF
 20835                           postinc0	equ	0xFEE
 20836                           plusw0	equ	0xFEB
 20837                           fsr0h	equ	0xFEA
 20838                           fsr0l	equ	0xFE9
 20839                           wreg	equ	0xFE8
 20840                           postinc1	equ	0xFE6
 20841                           postdec1	equ	0xFE5
 20842                           plusw1	equ	0xFE3
 20843                           fsr1h	equ	0xFE2
 20844                           fsr1l	equ	0xFE1
 20845                           indf2	equ	0xFDF
 20846                           postinc2	equ	0xFDE
 20847                           postdec2	equ	0xFDD
 20848                           plusw2	equ	0xFDB
 20849                           fsr2h	equ	0xFDA
 20850                           fsr2l	equ	0xFD9
 20851                           status	equ	0xFD8
 20852                           
 20853 ;; *************** function _RADIO_FSKPacketSent *****************
 20854 ;; Defined at:
 20855 ;;		line 1093 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 20856 ;; Parameters:    Size  Location     Type
 20857 ;;		None
 20858 ;; Auto vars:     Size  Location     Type
 20859 ;;  timeOnAir       4  116[BANK0 ] unsigned long 
 20860 ;;  irqFlags        1  124[BANK0 ] unsigned char 
 20861 ;; Return value:  Size  Location     Type
 20862 ;;                  1    wreg      void 
 20863 ;; Registers used:
 20864 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20865 ;; Tracked objects:
 20866 ;;		On entry : 3F/1
 20867 ;;		On exit  : 3C/0
 20868 ;;		Unchanged: 0/0
 20869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20870 ;;      Params:         0       0       0       0       0       0       0       0       0
 20871 ;;      Locals:         0       9       0       0       0       0       0       0       0
 20872 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20873 ;;      Totals:         0       9       0       0       0       0       0       0       0
 20874 ;;Total ram usage:        9 bytes
 20875 ;; Hardware stack levels used:    1
 20876 ;; Hardware stack levels required when called:   15
 20877 ;; This function calls:
 20878 ;;		_LORAWAN_TxDone
 20879 ;;		_RADIO_RegisterRead
 20880 ;;		_RADIO_WriteMode
 20881 ;;		_SwTimerReadValue
 20882 ;;		_SwTimerStop
 20883 ;;		___lmul
 20884 ;; This function is called by:
 20885 ;;		_RADIO_DIO0
 20886 ;; This function uses a non-reentrant model
 20887 ;;
 20888                           
 20889                           	psect	text106
 20890  003228                     __ptext106:
 20891                           	opt stack 0
 20892  003228                     _RADIO_FSKPacketSent:
 20893                           	opt stack 13
 20894                           
 20895                           ; BSR set to: 1
 20896                           ;radio_driver_SX1276.c: 1095: uint8_t irqFlags;
 20897                           ;radio_driver_SX1276.c: 1096: uint32_t timeOnAir;
 20898                           ;radio_driver_SX1276.c: 1098: irqFlags = RADIO_RegisterRead(0x3F);
 20899                           
 20900                           ;incstack = 0
 20901  003228  0E3F               	movlw	63
 20902  00322A  EC64  F02E         	call	_RADIO_RegisterRead
 20903  00322E  6FDC               	movwf	RADIO_FSKPacketSent@irqFlags& (0+255),b
 20904                           
 20905                           ; BSR set to: 0
 20906                           ;radio_driver_SX1276.c: 1099: if ((1<<(3)) == (irqFlags & (1<<(3))))
 20907  003230  A7DC               	btfss	RADIO_FSKPacketSent@irqFlags& (0+255),3,b
 20908  003232  0012               	return	
 20909                           
 20910                           ; BSR set to: 0
 20911                           ;radio_driver_SX1276.c: 1100: {
 20912                           ;radio_driver_SX1276.c: 1101: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
 20913  003234  D85C               	call	PL278	;call to abstracted procedure
 20914  003236  ECDB  F01A         	call	_RADIO_WriteMode
 20915                           
 20916                           ;radio_driver_SX1276.c: 1102: RadioConfiguration.flags &= ~(1 << (0));
 20917  00323A  0101               	movlb	1	; () banked
 20918  00323C  91A2               	bcf	(_RadioConfiguration+35)& (0+255),0,b
 20919                           
 20920                           ; BSR set to: 1
 20921                           ;radio_driver_SX1276.c: 1104: SwTimerStop(RadioConfiguration.watchdogTimerId);
 20922  00323E  51A8               	movf	(_RadioConfiguration+41)& (0+255),w,b
 20923  003240  EC65  F030         	call	_SwTimerStop
 20924                           
 20925                           ; BSR set to: 0
 20926                           ;radio_driver_SX1276.c: 1106: if ((RadioConfiguration.flags & (1 << (4))) == 0)
 20927  003244  0101               	movlb	1	; () banked
 20928  003246  B9A2               	btfsc	(_RadioConfiguration+35)& (0+255),4,b
 20929  003248  0012               	return	
 20930                           
 20931                           ; BSR set to: 1
 20932                           ;radio_driver_SX1276.c: 1107: {
 20933                           ;radio_driver_SX1276.c: 1108: timeOnAir = ((uint32_t)20000) - ((SwTimerReadValue(RadioCo
      +                          nfiguration.timeOnAirTimerId)) < 0x00DFAC1FUL ? ( (((uint32_t)(SwTimerReadValue(RadioCon
      +                          figuration.timeOnAirTimerId))) * 125UL) >> (12) ) : ( (((uint32_t)(SwTimerReadValue(Radi
      +                          oConfiguration.t
 20934  00324A  51A6               	movf	(_RadioConfiguration+39)& (0+255),w,b
 20935  00324C  EC98  F02C         	call	_SwTimerReadValue
 20936  003250  518A               	movf	(?_SwTimerReadValue+3)& (0+255),w,b
 20937  003252  E102               	bnz	u17930
 20938  003254  D851               	call	PL294	;call to abstracted procedure
 20939  003256  E30D               	bnc	l15148
 20940  003258                     u17930:
 20941                           
 20942                           ; BSR set to: 0
 20943  003258  0101               	movlb	1	; () banked
 20944  00325A  51A6               	movf	(_RadioConfiguration+39)& (0+255),w,b
 20945  00325C  EC98  F02C         	call	_SwTimerReadValue
 20946  003260  0E0D               	movlw	13
 20947  003262  D001               	goto	u17940
 20948  003264                     u17945:
 20949  003264  D850               	call	PL330	;call to abstracted procedure
 20950  003266                     u17940:
 20951  003266  2EE8               	decfsz	wreg,f,c
 20952  003268  D7FD               	goto	u17945
 20953  00326A  D82D               	call	PL36	;call to abstracted procedure
 20954  00326C  EC25  F02A         	call	___lmul	;wreg free
 20955  003270  D00C               	goto	L13
 20956  003272                     l15148:
 20957                           
 20958                           ; BSR set to: 0
 20959  003272  0101               	movlb	1	; () banked
 20960  003274  51A6               	movf	(_RadioConfiguration+39)& (0+255),w,b
 20961  003276  EC98  F02C         	call	_SwTimerReadValue
 20962  00327A  D825               	call	PL36	;call to abstracted procedure
 20963  00327C  EC25  F02A         	call	___lmul	;wreg free
 20964  003280  0E0D               	movlw	13
 20965  003282  D001               	goto	u17950
 20966  003284                     u17955:
 20967  003284  D82E               	call	PL242	;call to abstracted procedure
 20968  003286                     u17950:
 20969  003286  2EE8               	decfsz	wreg,f,c
 20970  003288  D7FD               	goto	u17955
 20971  00328A                     L13:
 20972  00328A  C090  F0D8         	movff	?___lmul,_RADIO_FSKPacketSent$3766
 20973  00328E  C091  F0D9         	movff	?___lmul+1,_RADIO_FSKPacketSent$3766+1
 20974  003292  C092  F0DA         	movff	?___lmul+2,_RADIO_FSKPacketSent$3766+2
 20975  003296  C093  F0DB         	movff	?___lmul+3,_RADIO_FSKPacketSent$3766+3
 20976                           
 20977                           ; BSR set to: 0
 20978  00329A  51D8               	movf	_RADIO_FSKPacketSent$3766& (0+255),w,b
 20979  00329C  0820               	sublw	32
 20980  00329E  6FD4               	movwf	RADIO_FSKPacketSent@timeOnAir& (0+255),b
 20981  0032A0  0E4E               	movlw	78
 20982  0032A2  55D9               	subfwb	(_RADIO_FSKPacketSent$3766+1)& (0+255),w,b
 20983  0032A4  6FD5               	movwf	(RADIO_FSKPacketSent@timeOnAir+1)& (0+255),b
 20984  0032A6  0E00               	movlw	0
 20985  0032A8  55DA               	subfwb	(_RADIO_FSKPacketSent$3766+2)& (0+255),w,b
 20986  0032AA  6FD6               	movwf	(RADIO_FSKPacketSent@timeOnAir+2)& (0+255),b
 20987  0032AC  0E00               	movlw	0
 20988  0032AE  55DB               	subfwb	(_RADIO_FSKPacketSent$3766+3)& (0+255),w,b
 20989  0032B0  6FD7               	movwf	(RADIO_FSKPacketSent@timeOnAir+3)& (0+255),b
 20990                           
 20991                           ; BSR set to: 0
 20992                           ;radio_driver_SX1276.c: 1109: SwTimerStop(RadioConfiguration.timeOnAirTimerId);
 20993  0032B2  0101               	movlb	1	; () banked
 20994  0032B4  51A6               	movf	(_RadioConfiguration+39)& (0+255),w,b
 20995  0032B6  EC65  F030         	call	_SwTimerStop
 20996                           
 20997                           ; BSR set to: 0
 20998                           ;radio_driver_SX1276.c: 1110: LORAWAN_TxDone((uint16_t)timeOnAir);
 20999  0032BA  C0D4  F0B0         	movff	RADIO_FSKPacketSent@timeOnAir,LORAWAN_TxDone@timeOnAir
 21000  0032BE  C0D5  F0B1         	movff	RADIO_FSKPacketSent@timeOnAir+1,LORAWAN_TxDone@timeOnAir+1
 21001  0032C2  EF5E  F004         	goto	_LORAWAN_TxDone	;wreg free
 21002  0032C6                     __end_of_RADIO_FSKPacketSent:
 21003                           	opt stack 0
 21004  0032C6                     PL36:
 21005                           	opt stack 13
 21006  0032C6  C087  F090         	movff	?_SwTimerReadValue,___lmul@multiplier
 21007  0032CA  C088  F091         	movff	?_SwTimerReadValue+1,___lmul@multiplier+1
 21008  0032CE  C089  F092         	movff	?_SwTimerReadValue+2,___lmul@multiplier+2
 21009  0032D2  C08A  F093         	movff	?_SwTimerReadValue+3,___lmul@multiplier+3
 21010  0032D6  0E7D               	movlw	125
 21011  0032D8  6F94               	movwf	___lmul@multiplicand& (0+255),b
 21012  0032DA  6B95               	clrf	(___lmul@multiplicand+1)& (0+255),b
 21013  0032DC  6B96               	clrf	(___lmul@multiplicand+2)& (0+255),b
 21014  0032DE  6B97               	clrf	(___lmul@multiplicand+3)& (0+255),b
 21015  0032E0  0C7D               	retlw	125
 21016  0032E2                     __end_ofPL36:
 21017                           	opt stack 0
 21018  0032E2                     PL242:
 21019                           	opt stack 13
 21020  0032E2  90D8               	bcf	status,0,c
 21021  0032E4  3393               	rrcf	(?___lmul+3)& (0+255),f,b
 21022  0032E6  3392               	rrcf	(?___lmul+2)& (0+255),f,b
 21023  0032E8  3391               	rrcf	(?___lmul+1)& (0+255),f,b
 21024  0032EA  3390               	rrcf	?___lmul& (0+255),f,b
 21025  0032EC  0012               	return	
 21026  0032EE                     __end_ofPL242:
 21027                           	opt stack 0
 21028  0032EE                     PL278:
 21029                           	opt stack 12
 21030  0032EE  C197  F065         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 21031  0032F2  0E00               	movlw	0
 21032  0032F4  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 21033  0032F6  0C00               	retlw	0
 21034  0032F8                     __end_ofPL278:
 21035                           	opt stack 0
 21036  0032F8                     PL294:
 21037                           	opt stack 13
 21038  0032F8  0E1F               	movlw	31
 21039  0032FA  5D87               	subwf	?_SwTimerReadValue& (0+255),w,b
 21040  0032FC  0EAC               	movlw	172
 21041  0032FE  5988               	subwfb	(?_SwTimerReadValue+1)& (0+255),w,b
 21042  003300  0EDF               	movlw	223
 21043  003302  5989               	subwfb	(?_SwTimerReadValue+2)& (0+255),w,b
 21044  003304  0012               	return	
 21045  003306                     __end_ofPL294:
 21046                           	opt stack 0
 21047  003306                     PL330:
 21048                           	opt stack 13
 21049  003306  90D8               	bcf	status,0,c
 21050  003308  338A               	rrcf	(?_SwTimerReadValue+3)& (0+255),f,b
 21051  00330A  3389               	rrcf	(?_SwTimerReadValue+2)& (0+255),f,b
 21052  00330C  3388               	rrcf	(?_SwTimerReadValue+1)& (0+255),f,b
 21053  00330E  3387               	rrcf	?_SwTimerReadValue& (0+255),f,b
 21054  003310  0012               	return	
 21055  003312                     __end_ofPL330:
 21056                           	opt stack 0
 21057                           tosu	equ	0xFFF
 21058                           tosh	equ	0xFFE
 21059                           tosl	equ	0xFFD
 21060                           pclath	equ	0xFFA
 21061                           tblptru	equ	0xFF8
 21062                           tblptrh	equ	0xFF7
 21063                           tblptrl	equ	0xFF6
 21064                           tablat	equ	0xFF5
 21065                           prodh	equ	0xFF4
 21066                           prodl	equ	0xFF3
 21067                           intcon	equ	0xFF2
 21068                           indf0	equ	0xFEF
 21069                           postinc0	equ	0xFEE
 21070                           plusw0	equ	0xFEB
 21071                           fsr0h	equ	0xFEA
 21072                           fsr0l	equ	0xFE9
 21073                           wreg	equ	0xFE8
 21074                           postinc1	equ	0xFE6
 21075                           postdec1	equ	0xFE5
 21076                           plusw1	equ	0xFE3
 21077                           fsr1h	equ	0xFE2
 21078                           fsr1l	equ	0xFE1
 21079                           indf2	equ	0xFDF
 21080                           postinc2	equ	0xFDE
 21081                           postdec2	equ	0xFDD
 21082                           plusw2	equ	0xFDB
 21083                           fsr2h	equ	0xFDA
 21084                           fsr2l	equ	0xFD9
 21085                           status	equ	0xFD8
 21086                           
 21087 ;; *************** function _LORAWAN_TxDone *****************
 21088 ;; Defined at:
 21089 ;;		line 365 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 21090 ;; Parameters:    Size  Location     Type
 21091 ;;  timeOnAir       2   80[BANK0 ] unsigned int 
 21092 ;; Auto vars:     Size  Location     Type
 21093 ;;  minim           4  111[BANK0 ] unsigned long 
 21094 ;;  ticks           4  107[BANK0 ] unsigned long 
 21095 ;;  delta           4   99[BANK0 ] unsigned long 
 21096 ;;  i               1  115[BANK0 ] unsigned char 
 21097 ;;  found           1   98[BANK0 ] unsigned char 
 21098 ;; Return value:  Size  Location     Type
 21099 ;;                  1    wreg      void 
 21100 ;; Registers used:
 21101 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21102 ;; Tracked objects:
 21103 ;;		On entry : 3E/1
 21104 ;;		On exit  : 3C/0
 21105 ;;		Unchanged: 0/0
 21106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21107 ;;      Params:         0       2       0       0       0       0       0       0       0
 21108 ;;      Locals:         0      26       0       0       0       0       0       0       0
 21109 ;;      Temps:          0       8       0       0       0       0       0       0       0
 21110 ;;      Totals:         0      36       0       0       0       0       0       0       0
 21111 ;;Total ram usage:       36 bytes
 21112 ;; Hardware stack levels used:    1
 21113 ;; Hardware stack levels required when called:   14
 21114 ;; This function calls:
 21115 ;;		_LORAWAN_EnterContinuousReceive
 21116 ;;		_RADIO_GetStatus
 21117 ;;		_RxDataDone
 21118 ;;		_SwTimerIsRunning
 21119 ;;		_SwTimerReadValue
 21120 ;;		_SwTimerSetTimeout
 21121 ;;		_SwTimerStart
 21122 ;;		_SwTimerStop
 21123 ;;		___lldiv
 21124 ;;		___lmul
 21125 ;; This function is called by:
 21126 ;;		_RADIO_TxDone
 21127 ;;		_RADIO_FSKPacketSent
 21128 ;;		_RADIO_WatchdogTimeout
 21129 ;; This function uses a non-reentrant model
 21130 ;;
 21131                           
 21132                           	psect	text107
 21133  0008BC                     __ptext107:
 21134                           	opt stack 0
 21135  0008BC                     _LORAWAN_TxDone:
 21136                           	opt stack 13
 21137                           
 21138                           ;lorawan_eu.c: 367: if (loRa.macStatus.macPause == 0)
 21139                           
 21140                           ;incstack = 0
 21141  0008BC  0102               	movlb	2	; () banked
 21142  0008BE  B103               	btfsc	(_loRa+3)& (0+255),0,b
 21143  0008C0  D1C6               	goto	l14594
 21144                           
 21145                           ; BSR set to: 2
 21146                           ;lorawan_eu.c: 368: {
 21147                           ;lorawan_eu.c: 369: bool found = 0;
 21148  0008C2  0100               	movlb	0	; () banked
 21149  0008C4  6BC2               	clrf	LORAWAN_TxDone@found& (0+255),b
 21150                           
 21151                           ;lorawan_eu.c: 370: uint8_t i;
 21152                           ;lorawan_eu.c: 371: uint32_t delta = 0, minim = (4294967295UL), ticks;
 21153  0008C6  6BC3               	clrf	LORAWAN_TxDone@delta& (0+255),b
 21154  0008C8  6BC4               	clrf	(LORAWAN_TxDone@delta+1)& (0+255),b
 21155  0008CA  6BC5               	clrf	(LORAWAN_TxDone@delta+2)& (0+255),b
 21156  0008CC  6BC6               	clrf	(LORAWAN_TxDone@delta+3)& (0+255),b
 21157  0008CE  69CF               	setf	LORAWAN_TxDone@minim& (0+255),b
 21158  0008D0  69D0               	setf	(LORAWAN_TxDone@minim+1)& (0+255),b
 21159  0008D2  69D1               	setf	(LORAWAN_TxDone@minim+2)& (0+255),b
 21160  0008D4  69D2               	setf	(LORAWAN_TxDone@minim+3)& (0+255),b
 21161                           
 21162                           ;lorawan_eu.c: 374: loRa.rx2DelayExpired = 0;
 21163  0008D6  0102               	movlb	2	; () banked
 21164  0008D8  6BF1               	clrf	(_loRa+241)& (0+255),b
 21165                           
 21166                           ; BSR set to: 2
 21167                           ;lorawan_eu.c: 376: loRa.macStatus.macState = BEFORE_RX1;
 21168  0008DA  5102               	movf	(_loRa+2)& (0+255),w,b
 21169  0008DC  0BF0               	andlw	-16
 21170  0008DE  0902               	iorlw	2
 21171  0008E0  6F02               	movwf	(_loRa+2)& (0+255),b
 21172                           
 21173                           ; BSR set to: 2
 21174                           ;lorawan_eu.c: 378: i = loRa.lastUsedChannelIndex;
 21175  0008E2  C2DA  F0D3         	movff	_loRa+218,LORAWAN_TxDone@i
 21176                           
 21177                           ; BSR set to: 2
 21178                           ;lorawan_eu.c: 381: if (loRa.lorawanMacStatus.joining == 1)
 21179  0008E6  A500               	btfss	_loRa& (0+255),2,b
 21180  0008E8  D032               	goto	l14528
 21181                           
 21182                           ; BSR set to: 2
 21183                           ;lorawan_eu.c: 382: {
 21184                           ;lorawan_eu.c: 383: SwTimerSetTimeout(loRa.joinAccept1TimerId, ( (((uint32_t)(loRa.proto
      +                          colParameters.joinAcceptDelay1 + rxWindowOffset[loRa.receiveWindow1Parameters.dataRate])
      +                          ) << (12)) / 125UL ));
 21185  0008EA  0E75               	movlw	low _rxWindowOffset
 21186  0008EC  2517               	addwf	(_loRa+23)& (0+255),w,b
 21187  0008EE  DA2D               	call	PL86	;call to abstracted procedure
 21188  0008F0  5198               	movf	(_loRa+152)& (0+255),w,b
 21189  0008F2  DA23               	call	PL84	;call to abstracted procedure
 21190  0008F4  2199               	addwfc	(_loRa+153)& (0+255),w,b
 21191  0008F6  D9DD               	call	PL8	;call to abstracted procedure
 21192  0008F8  EC1B  F025         	call	___lldiv	;wreg free
 21193  0008FC  D9F4               	call	PL20	;call to abstracted procedure
 21194  0008FE  51E2               	movf	(_loRa+226)& (0+255),w,b
 21195  000900  EC11  F02C         	call	_SwTimerSetTimeout
 21196                           
 21197                           ;lorawan_eu.c: 384: SwTimerSetTimeout(loRa.joinAccept2TimerId, ( (((uint32_t)(loRa.proto
      +                          colParameters.joinAcceptDelay2 + rxWindowOffset[loRa.receiveWindow2Parameters.dataRate])
      +                          ) << (12)) / 125UL ));
 21198  000904  DA32               	call	PL180	;call to abstracted procedure
 21199  000906  DA21               	call	PL86	;call to abstracted procedure
 21200  000908  519A               	movf	(_loRa+154)& (0+255),w,b
 21201  00090A  DA17               	call	PL84	;call to abstracted procedure
 21202  00090C  219B               	addwfc	(_loRa+155)& (0+255),w,b
 21203  00090E  D9D1               	call	PL8	;call to abstracted procedure
 21204  000910  EC1B  F025         	call	___lldiv	;wreg free
 21205  000914  D9E8               	call	PL20	;call to abstracted procedure
 21206  000916  51E3               	movf	(_loRa+227)& (0+255),w,b
 21207  000918  EC11  F02C         	call	_SwTimerSetTimeout
 21208                           
 21209                           ; BSR set to: 0
 21210                           ;lorawan_eu.c: 385: SwTimerStart(loRa.joinAccept1TimerId);
 21211  00091C  0102               	movlb	2	; () banked
 21212  00091E  51E2               	movf	(_loRa+226)& (0+255),w,b
 21213  000920  ECC4  F025         	call	_SwTimerStart
 21214                           
 21215                           ; BSR set to: 0
 21216                           ;lorawan_eu.c: 386: SwTimerStart(loRa.joinAccept2TimerId);
 21217  000924  0102               	movlb	2	; () banked
 21218  000926  51E3               	movf	(_loRa+227)& (0+255),w,b
 21219  000928  ECC4  F025         	call	_SwTimerStart
 21220                           
 21221                           ; BSR set to: 0
 21222                           ;lorawan_eu.c: 388: Channels[i].channelTimer = ((uint32_t)timeOnAir) * (((uint32_t)3029 
      +                          + 1) * ((uint32_t)loRa.prescaler) - 1);
 21223  00092C  C2DB  F090         	movff	_loRa+219,___lmul@multiplier
 21224  000930  C2DC  F091         	movff	_loRa+220,___lmul@multiplier+1
 21225  000934  6B92               	clrf	(___lmul@multiplier+2)& (0+255),b
 21226  000936  6B93               	clrf	(___lmul@multiplier+3)& (0+255),b
 21227  000938  0ED6               	movlw	214
 21228  00093A  6F94               	movwf	___lmul@multiplicand& (0+255),b
 21229  00093C  0E0B               	movlw	11
 21230  00093E  ECC5  F008         	call	PL438	;call to abstracted procedure
 21231  000942  EC25  F02A         	call	___lmul	;wreg free
 21232                           
 21233                           ; BSR set to: 0
 21234                           ;lorawan_eu.c: 388: Channels[i].channelTimer = ((uint32_t)timeOnAir) * (((uint32_t)3029 
      +                          + 1) * ((uint32_t)loRa.prescaler) - 1);
 21235  000946  D9D9               	call	PL54	;call to abstracted procedure
 21236  000948  EC25  F02A         	call	___lmul	;wreg free
 21237  00094C  D046               	goto	L14
 21238  00094E                     l14528:
 21239                           
 21240                           ; BSR set to: 2
 21241                           ;lorawan_eu.c: 390: else
 21242                           ;lorawan_eu.c: 391: {
 21243                           ;lorawan_eu.c: 392: SwTimerSetTimeout(loRa.receiveWindow1TimerId, ( (((uint32_t)(loRa.pr
      +                          otocolParameters.receiveDelay1 + rxWindowOffset[loRa.receiveWindow1Parameters.dataRate])
      +                          ) << (12)) / 125UL ));
 21244  00094E  0E75               	movlw	low _rxWindowOffset
 21245  000950  2517               	addwf	(_loRa+23)& (0+255),w,b
 21246  000952  D9FB               	call	PL86	;call to abstracted procedure
 21247  000954  5194               	movf	(_loRa+148)& (0+255),w,b
 21248  000956  D9F1               	call	PL84	;call to abstracted procedure
 21249  000958  2195               	addwfc	(_loRa+149)& (0+255),w,b
 21250  00095A  D9AB               	call	PL8	;call to abstracted procedure
 21251  00095C  EC1B  F025         	call	___lldiv	;wreg free
 21252  000960  D9C2               	call	PL20	;call to abstracted procedure
 21253  000962  51E4               	movf	(_loRa+228)& (0+255),w,b
 21254  000964  EC11  F02C         	call	_SwTimerSetTimeout
 21255                           
 21256                           ;lorawan_eu.c: 393: SwTimerSetTimeout(loRa.receiveWindow2TimerId, ( (((uint32_t)(loRa.pr
      +                          otocolParameters.receiveDelay2 + rxWindowOffset[loRa.receiveWindow2Parameters.dataRate])
      +                          ) << (12)) / 125UL ));
 21257  000968  DA00               	call	PL180	;call to abstracted procedure
 21258  00096A  D9EF               	call	PL86	;call to abstracted procedure
 21259  00096C  5196               	movf	(_loRa+150)& (0+255),w,b
 21260  00096E  D9E5               	call	PL84	;call to abstracted procedure
 21261  000970  2197               	addwfc	(_loRa+151)& (0+255),w,b
 21262  000972  D99F               	call	PL8	;call to abstracted procedure
 21263  000974  EC1B  F025         	call	___lldiv	;wreg free
 21264  000978  D9B6               	call	PL20	;call to abstracted procedure
 21265  00097A  51E5               	movf	(_loRa+229)& (0+255),w,b
 21266  00097C  EC11  F02C         	call	_SwTimerSetTimeout
 21267                           
 21268                           ; BSR set to: 0
 21269                           ;lorawan_eu.c: 394: SwTimerStart(loRa.receiveWindow1TimerId);
 21270  000980  0102               	movlb	2	; () banked
 21271  000982  51E4               	movf	(_loRa+228)& (0+255),w,b
 21272  000984  ECC4  F025         	call	_SwTimerStart
 21273                           
 21274                           ; BSR set to: 0
 21275                           ;lorawan_eu.c: 395: if (CLASS_A == loRa.deviceClass)
 21276  000988  0102               	movlb	2	; () banked
 21277  00098A  5112               	movf	(_loRa+18)& (0+255),w,b
 21278  00098C  E103               	bnz	l1661
 21279                           
 21280                           ; BSR set to: 2
 21281                           ;lorawan_eu.c: 396: {
 21282                           ;lorawan_eu.c: 397: SwTimerStart(loRa.receiveWindow2TimerId);
 21283  00098E  51E5               	movf	(_loRa+229)& (0+255),w,b
 21284  000990  ECC4  F025         	call	_SwTimerStart
 21285  000994                     l1661:
 21286                           
 21287                           ;lorawan_eu.c: 398: }
 21288                           ;lorawan_eu.c: 400: Channels[i].channelTimer = ((uint32_t)timeOnAir) * (((uint32_t)Chann
      +                          els[i].dutyCycle + 1) * ((uint32_t)loRa.prescaler) - 1);
 21289  000994  0100               	movlb	0	; () banked
 21290  000996  51D3               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21291  000998  D9E0               	call	PL92	;call to abstracted procedure
 21292  00099A  CFDE F0B2          	movff	postinc2,??_LORAWAN_TxDone
 21293  00099E  CFDD F0B3          	movff	postdec2,??_LORAWAN_TxDone+1
 21294  0009A2  51B2               	movf	??_LORAWAN_TxDone& (0+255),w,b
 21295  0009A4  6FB4               	movwf	(??_LORAWAN_TxDone+2)& (0+255),b
 21296  0009A6  51B3               	movf	(??_LORAWAN_TxDone+1)& (0+255),w,b
 21297  0009A8  6FB5               	movwf	(??_LORAWAN_TxDone+3)& (0+255),b
 21298  0009AA  6BB6               	clrf	(??_LORAWAN_TxDone+4)& (0+255),b
 21299  0009AC  6BB7               	clrf	(??_LORAWAN_TxDone+5)& (0+255),b
 21300  0009AE  29B4               	incf	(??_LORAWAN_TxDone+2)& (0+255),w,b
 21301  0009B0  6F90               	movwf	___lmul@multiplier& (0+255),b
 21302  0009B2  0E00               	movlw	0
 21303  0009B4  21B5               	addwfc	(??_LORAWAN_TxDone+3)& (0+255),w,b
 21304  0009B6  6F91               	movwf	(___lmul@multiplier+1)& (0+255),b
 21305  0009B8  0E00               	movlw	0
 21306  0009BA  21B6               	addwfc	(??_LORAWAN_TxDone+4)& (0+255),w,b
 21307  0009BC  6F92               	movwf	(___lmul@multiplier+2)& (0+255),b
 21308  0009BE  0E00               	movlw	0
 21309  0009C0  21B7               	addwfc	(??_LORAWAN_TxDone+5)& (0+255),w,b
 21310  0009C2  6F93               	movwf	(___lmul@multiplier+3)& (0+255),b
 21311  0009C4  C2DB  F094         	movff	_loRa+219,___lmul@multiplicand
 21312  0009C8  C2DC  F095         	movff	_loRa+220,___lmul@multiplicand+1
 21313  0009CC  6B96               	clrf	(___lmul@multiplicand+2)& (0+255),b
 21314  0009CE  6B97               	clrf	(___lmul@multiplicand+3)& (0+255),b
 21315  0009D0  EC25  F02A         	call	___lmul	;wreg free
 21316                           
 21317                           ;lorawan_eu.c: 398: }
 21318                           ;lorawan_eu.c: 400: Channels[i].channelTimer = ((uint32_t)timeOnAir) * (((uint32_t)Chann
      +                          els[i].dutyCycle + 1) * ((uint32_t)loRa.prescaler) - 1);
 21319  0009D4  D992               	call	PL54	;call to abstracted procedure
 21320  0009D6  EC25  F02A         	call	___lmul	;wreg free
 21321  0009DA                     L14:
 21322  0009DA  51D3               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21323  0009DC  D962               	call	PL4	;call to abstracted procedure
 21324  0009DE  C090  FFDE         	movff	?___lmul,postinc2
 21325  0009E2  C091  FFDE         	movff	?___lmul+1,postinc2
 21326  0009E6  C092  FFDE         	movff	?___lmul+2,postinc2
 21327  0009EA  C093  FFDE         	movff	?___lmul+3,postinc2
 21328                           
 21329                           ; BSR set to: 0
 21330                           ;lorawan_eu.c: 401: }
 21331                           ;lorawan_eu.c: 403: if(SwTimerIsRunning(loRa.dutyCycleTimerId))
 21332  0009EE  0102               	movlb	2	; () banked
 21333  0009F0  51E9               	movf	(_loRa+233)& (0+255),w,b
 21334  0009F2  EC21  F030         	call	_SwTimerIsRunning
 21335  0009F6  0900               	iorlw	0
 21336  0009F8  E065               	bz	l14546
 21337                           
 21338                           ; BSR set to: 0
 21339                           ;lorawan_eu.c: 404: {
 21340                           ;lorawan_eu.c: 405: SwTimerStop(loRa.dutyCycleTimerId);
 21341  0009FA  0102               	movlb	2	; () banked
 21342  0009FC  51E9               	movf	(_loRa+233)& (0+255),w,b
 21343  0009FE  EC65  F030         	call	_SwTimerStop
 21344                           
 21345                           ;lorawan_eu.c: 407: ticks = SwTimerReadValue (loRa.dutyCycleTimerId);
 21346  000A02  0102               	movlb	2	; () banked
 21347  000A04  51E9               	movf	(_loRa+233)& (0+255),w,b
 21348  000A06  EC98  F02C         	call	_SwTimerReadValue
 21349  000A0A  C087  F0CB         	movff	?_SwTimerReadValue,LORAWAN_TxDone@ticks
 21350  000A0E  C088  F0CC         	movff	?_SwTimerReadValue+1,LORAWAN_TxDone@ticks+1
 21351  000A12  C089  F0CD         	movff	?_SwTimerReadValue+2,LORAWAN_TxDone@ticks+2
 21352  000A16  C08A  F0CE         	movff	?_SwTimerReadValue+3,LORAWAN_TxDone@ticks+3
 21353                           
 21354                           ; BSR set to: 0
 21355                           ;lorawan_eu.c: 408: delta = loRa.lastTimerValue - ((ticks) < 0x00DFAC1FUL ? ( (((uint32_
      +                          t)(ticks)) * 125UL) >> (12) ) : ( (((uint32_t)(ticks)) >> (12)) * 125UL ) );
 21356  000A1A  51CE               	movf	(LORAWAN_TxDone@ticks+3)& (0+255),w,b
 21357  000A1C  E107               	bnz	u16740
 21358  000A1E  0E1F               	movlw	31
 21359  000A20  5DCB               	subwf	LORAWAN_TxDone@ticks& (0+255),w,b
 21360  000A22  0EAC               	movlw	172
 21361  000A24  59CC               	subwfb	(LORAWAN_TxDone@ticks+1)& (0+255),w,b
 21362  000A26  0EDF               	movlw	223
 21363  000A28  59CD               	subwfb	(LORAWAN_TxDone@ticks+2)& (0+255),w,b
 21364  000A2A  E31E               	bnc	l14542
 21365  000A2C                     u16740:
 21366                           
 21367                           ; BSR set to: 0
 21368  000A2C  C0CB  F0B2         	movff	LORAWAN_TxDone@ticks,??_LORAWAN_TxDone
 21369  000A30  C0CC  F0B3         	movff	LORAWAN_TxDone@ticks+1,??_LORAWAN_TxDone+1
 21370  000A34  C0CD  F0B4         	movff	LORAWAN_TxDone@ticks+2,??_LORAWAN_TxDone+2
 21371  000A38  C0CE  F0B5         	movff	LORAWAN_TxDone@ticks+3,??_LORAWAN_TxDone+3
 21372  000A3C  0E0D               	movlw	13
 21373  000A3E  D005               	goto	u16750
 21374  000A40                     u16755:
 21375  000A40  90D8               	bcf	status,0,c
 21376  000A42  33B5               	rrcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 21377  000A44  33B4               	rrcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 21378  000A46  33B3               	rrcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 21379  000A48  33B2               	rrcf	??_LORAWAN_TxDone& (0+255),f,b
 21380  000A4A                     u16750:
 21381  000A4A  2EE8               	decfsz	wreg,f,c
 21382  000A4C  D7F9               	goto	u16755
 21383  000A4E  C0B2  F090         	movff	??_LORAWAN_TxDone,___lmul@multiplier
 21384  000A52  C0B3  F091         	movff	??_LORAWAN_TxDone+1,___lmul@multiplier+1
 21385  000A56  C0B4  F092         	movff	??_LORAWAN_TxDone+2,___lmul@multiplier+2
 21386  000A5A  C0B5  F093         	movff	??_LORAWAN_TxDone+3,___lmul@multiplier+3
 21387  000A5E  0E7D               	movlw	125
 21388  000A60  D967               	call	PL80	;call to abstracted procedure
 21389  000A62  EC25  F02A         	call	___lmul	;wreg free
 21390  000A66  D012               	goto	L15
 21391  000A68                     l14542:
 21392                           
 21393                           ; BSR set to: 0
 21394  000A68  C0CB  F090         	movff	LORAWAN_TxDone@ticks,___lmul@multiplier
 21395  000A6C  C0CC  F091         	movff	LORAWAN_TxDone@ticks+1,___lmul@multiplier+1
 21396  000A70  C0CD  F092         	movff	LORAWAN_TxDone@ticks+2,___lmul@multiplier+2
 21397  000A74  C0CE  F093         	movff	LORAWAN_TxDone@ticks+3,___lmul@multiplier+3
 21398  000A78  0E7D               	movlw	125
 21399  000A7A  D95A               	call	PL80	;call to abstracted procedure
 21400  000A7C  EC25  F02A         	call	___lmul	;wreg free
 21401  000A80  0E0D               	movlw	13
 21402  000A82  D002               	goto	u16760
 21403  000A84                     u16765:
 21404  000A84  EC71  F019         	call	PL242	;call to abstracted procedure
 21405  000A88                     u16760:
 21406  000A88  2EE8               	decfsz	wreg,f,c
 21407  000A8A  D7FC               	goto	u16765
 21408  000A8C                     L15:
 21409  000A8C  C090  F0BA         	movff	?___lmul,_LORAWAN_TxDone$3265
 21410  000A90  C091  F0BB         	movff	?___lmul+1,_LORAWAN_TxDone$3265+1
 21411  000A94  C092  F0BC         	movff	?___lmul+2,_LORAWAN_TxDone$3265+2
 21412  000A98  C093  F0BD         	movff	?___lmul+3,_LORAWAN_TxDone$3265+3
 21413                           
 21414                           ; BSR set to: 0
 21415  000A9C  51BA               	movf	_LORAWAN_TxDone$3265& (0+255),w,b
 21416  000A9E  0102               	movlb	2	; () banked
 21417  000AA0  5DC8               	subwf	(_loRa+200)& (0+255),w,b
 21418  000AA2  0100               	movlb	0	; () banked
 21419  000AA4  6FC3               	movwf	LORAWAN_TxDone@delta& (0+255),b
 21420  000AA6  51BB               	movf	(_LORAWAN_TxDone$3265+1)& (0+255),w,b
 21421  000AA8  0102               	movlb	2	; () banked
 21422  000AAA  59C9               	subwfb	(_loRa+201)& (0+255),w,b
 21423  000AAC  0100               	movlb	0	; () banked
 21424  000AAE  6FC4               	movwf	(LORAWAN_TxDone@delta+1)& (0+255),b
 21425  000AB0  51BC               	movf	(_LORAWAN_TxDone$3265+2)& (0+255),w,b
 21426  000AB2  0102               	movlb	2	; () banked
 21427  000AB4  59CA               	subwfb	(_loRa+202)& (0+255),w,b
 21428  000AB6  0100               	movlb	0	; () banked
 21429  000AB8  6FC5               	movwf	(LORAWAN_TxDone@delta+2)& (0+255),b
 21430  000ABA  51BD               	movf	(_LORAWAN_TxDone$3265+3)& (0+255),w,b
 21431  000ABC  0102               	movlb	2	; () banked
 21432  000ABE  59CB               	subwfb	(_loRa+203)& (0+255),w,b
 21433  000AC0  0100               	movlb	0	; () banked
 21434  000AC2  6FC6               	movwf	(LORAWAN_TxDone@delta+3)& (0+255),b
 21435  000AC4                     l14546:
 21436                           
 21437                           ; BSR set to: 0
 21438                           ;lorawan_eu.c: 409: }
 21439                           ;lorawan_eu.c: 411: for (i=0; i < 16; i++)
 21440  000AC4  6BD3               	clrf	LORAWAN_TxDone@i& (0+255),b
 21441  000AC6                     l14552:
 21442                           
 21443                           ; BSR set to: 0
 21444                           ;lorawan_eu.c: 412: {
 21445                           ;lorawan_eu.c: 413: if ((Channels[i].status == 1) && ( Channels[i].channelTimer != 0 ))
 21446  000AC6  51D3               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21447  000AC8  EC86  F021         	call	PL12	;call to abstracted procedure
 21448  000ACC  E157               	bnz	l14570
 21449                           
 21450                           ; BSR set to: 0
 21451  000ACE  51D3               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21452  000AD0  D8E8               	call	PL4	;call to abstracted procedure
 21453  000AD2  ECBB  F00E         	call	PL130	;call to abstracted procedure
 21454  000AD6  E052               	bz	l14570
 21455                           
 21456                           ; BSR set to: 0
 21457                           ;lorawan_eu.c: 414: {
 21458                           ;lorawan_eu.c: 415: if( i != loRa.lastUsedChannelIndex )
 21459  000AD8  51D3               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21460  000ADA  0102               	movlb	2	; () banked
 21461  000ADC  19DA               	xorwf	(_loRa+218)& (0+255),w,b
 21462  000ADE  E031               	bz	l1670
 21463                           
 21464                           ; BSR set to: 2
 21465                           ;lorawan_eu.c: 416: {
 21466                           ;lorawan_eu.c: 417: if (Channels[i].channelTimer > delta)
 21467  000AE0  0100               	movlb	0	; () banked
 21468  000AE2  51D3               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21469  000AE4  D8DE               	call	PL4	;call to abstracted procedure
 21470  000AE6  50DE               	movf	postinc2,w,c
 21471  000AE8  5DC3               	subwf	LORAWAN_TxDone@delta& (0+255),w,b
 21472  000AEA  50DE               	movf	postinc2,w,c
 21473  000AEC  59C4               	subwfb	(LORAWAN_TxDone@delta+1)& (0+255),w,b
 21474  000AEE  50DE               	movf	postinc2,w,c
 21475  000AF0  59C5               	subwfb	(LORAWAN_TxDone@delta+2)& (0+255),w,b
 21476  000AF2  50DE               	movf	postinc2,w,c
 21477  000AF4  59C6               	subwfb	(LORAWAN_TxDone@delta+3)& (0+255),w,b
 21478  000AF6  E221               	bc	l14562
 21479                           
 21480                           ; BSR set to: 0
 21481                           ;lorawan_eu.c: 418: {
 21482                           ;lorawan_eu.c: 419: Channels[i].channelTimer = Channels[i].channelTimer - delta;
 21483  000AF8  51D3               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21484  000AFA  D8D3               	call	PL4	;call to abstracted procedure
 21485  000AFC  CFDE F0B2          	movff	postinc2,??_LORAWAN_TxDone
 21486  000B00  CFDE F0B3          	movff	postinc2,??_LORAWAN_TxDone+1
 21487  000B04  CFDE F0B4          	movff	postinc2,??_LORAWAN_TxDone+2
 21488  000B08  CFDE F0B5          	movff	postinc2,??_LORAWAN_TxDone+3
 21489  000B0C  51C3               	movf	LORAWAN_TxDone@delta& (0+255),w,b
 21490  000B0E  5DB2               	subwf	??_LORAWAN_TxDone& (0+255),w,b
 21491  000B10  6FB6               	movwf	(??_LORAWAN_TxDone+4)& (0+255),b
 21492  000B12  51C4               	movf	(LORAWAN_TxDone@delta+1)& (0+255),w,b
 21493  000B14  59B3               	subwfb	(??_LORAWAN_TxDone+1)& (0+255),w,b
 21494  000B16  6FB7               	movwf	(??_LORAWAN_TxDone+5)& (0+255),b
 21495  000B18  51C5               	movf	(LORAWAN_TxDone@delta+2)& (0+255),w,b
 21496  000B1A  59B4               	subwfb	(??_LORAWAN_TxDone+2)& (0+255),w,b
 21497  000B1C  6FB8               	movwf	(??_LORAWAN_TxDone+6)& (0+255),b
 21498  000B1E  51C6               	movf	(LORAWAN_TxDone@delta+3)& (0+255),w,b
 21499  000B20  59B5               	subwfb	(??_LORAWAN_TxDone+3)& (0+255),w,b
 21500  000B22  6FB9               	movwf	(??_LORAWAN_TxDone+7)& (0+255),b
 21501  000B24  51D3               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21502  000B26  D8BD               	call	PL4	;call to abstracted procedure
 21503  000B28  C0B6  FFDE         	movff	??_LORAWAN_TxDone+4,postinc2
 21504  000B2C  C0B7  FFDE         	movff	??_LORAWAN_TxDone+5,postinc2
 21505  000B30  C0B8  FFDE         	movff	??_LORAWAN_TxDone+6,postinc2
 21506  000B34  C0B9  FFDE         	movff	??_LORAWAN_TxDone+7,postinc2
 21507                           
 21508                           ;lorawan_eu.c: 420: }
 21509  000B38  D004               	goto	l1670
 21510  000B3A                     l14562:
 21511                           
 21512                           ; BSR set to: 0
 21513                           ;lorawan_eu.c: 421: else
 21514                           ;lorawan_eu.c: 422: {
 21515                           ;lorawan_eu.c: 423: Channels[i].channelTimer = 0;
 21516  000B3A  51D3               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21517  000B3C  D8B2               	call	PL4	;call to abstracted procedure
 21518  000B3E  ECA2  F01D         	call	PL182	;call to abstracted procedure
 21519  000B42                     l1670:
 21520                           
 21521                           ;lorawan_eu.c: 424: }
 21522                           ;lorawan_eu.c: 425: }
 21523                           ;lorawan_eu.c: 426: if ( (Channels[i].channelTimer <= minim) && (Channels[i].channelTime
      +                          r !=0) )
 21524  000B42  0100               	movlb	0	; () banked
 21525  000B44  51D3               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21526  000B46  D8AD               	call	PL4	;call to abstracted procedure
 21527  000B48  50DE               	movf	postinc2,w,c
 21528  000B4A  5DCF               	subwf	LORAWAN_TxDone@minim& (0+255),w,b
 21529  000B4C  50DE               	movf	postinc2,w,c
 21530  000B4E  59D0               	subwfb	(LORAWAN_TxDone@minim+1)& (0+255),w,b
 21531  000B50  50DE               	movf	postinc2,w,c
 21532  000B52  59D1               	subwfb	(LORAWAN_TxDone@minim+2)& (0+255),w,b
 21533  000B54  50DE               	movf	postinc2,w,c
 21534  000B56  59D2               	subwfb	(LORAWAN_TxDone@minim+3)& (0+255),w,b
 21535  000B58  E311               	bnc	l14570
 21536                           
 21537                           ; BSR set to: 0
 21538  000B5A  51D3               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21539  000B5C  D8A2               	call	PL4	;call to abstracted procedure
 21540  000B5E  ECBB  F00E         	call	PL130	;call to abstracted procedure
 21541  000B62  E00C               	bz	l14570
 21542                           
 21543                           ; BSR set to: 0
 21544                           ;lorawan_eu.c: 427: {
 21545                           ;lorawan_eu.c: 428: minim = Channels[i].channelTimer;
 21546  000B64  51D3               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21547  000B66  D89D               	call	PL4	;call to abstracted procedure
 21548  000B68  CFDE F0CF          	movff	postinc2,LORAWAN_TxDone@minim
 21549  000B6C  CFDE F0D0          	movff	postinc2,LORAWAN_TxDone@minim+1
 21550  000B70  CFDE F0D1          	movff	postinc2,LORAWAN_TxDone@minim+2
 21551  000B74  CFDE F0D2          	movff	postinc2,LORAWAN_TxDone@minim+3
 21552                           
 21553                           ; BSR set to: 0
 21554                           ;lorawan_eu.c: 429: found = 1;
 21555  000B78  0E01               	movlw	1
 21556  000B7A  6FC2               	movwf	LORAWAN_TxDone@found& (0+255),b
 21557  000B7C                     l14570:
 21558                           
 21559                           ; BSR set to: 0
 21560  000B7C  2BD3               	incf	LORAWAN_TxDone@i& (0+255),f,b
 21561                           
 21562                           ; BSR set to: 0
 21563  000B7E  0E0F               	movlw	15
 21564  000B80  65D3               	cpfsgt	LORAWAN_TxDone@i& (0+255),b
 21565  000B82  D7A1               	goto	l14552
 21566                           
 21567                           ; BSR set to: 0
 21568                           ;lorawan_eu.c: 430: }
 21569                           ;lorawan_eu.c: 431: }
 21570                           ;lorawan_eu.c: 432: }
 21571                           ;lorawan_eu.c: 433: if (found == 1)
 21572  000B84  05C2               	decf	LORAWAN_TxDone@found& (0+255),w,b
 21573  000B86  E158               	bnz	l14588
 21574                           
 21575                           ; BSR set to: 0
 21576                           ;lorawan_eu.c: 434: {
 21577                           ;lorawan_eu.c: 435: loRa.lastTimerValue = minim;
 21578  000B88  C0CF  F2C8         	movff	LORAWAN_TxDone@minim,_loRa+200
 21579  000B8C  C0D0  F2C9         	movff	LORAWAN_TxDone@minim+1,_loRa+201
 21580  000B90  C0D1  F2CA         	movff	LORAWAN_TxDone@minim+2,_loRa+202
 21581  000B94  C0D2  F2CB         	movff	LORAWAN_TxDone@minim+3,_loRa+203
 21582                           
 21583                           ; BSR set to: 0
 21584                           ;lorawan_eu.c: 436: SwTimerSetTimeout (loRa.dutyCycleTimerId, ((minim) < 0x000FFFFFUL ? 
      +                          ( (((uint32_t)(minim)) << (12)) / 125UL ) : ( (((uint32_t)(minim)) / 125UL) << (12) ) ))
      +                          ;
 21585  000B98  51D2               	movf	(LORAWAN_TxDone@minim+3)& (0+255),w,b
 21586  000B9A  E106               	bnz	u16850
 21587  000B9C  29CF               	incf	LORAWAN_TxDone@minim& (0+255),w,b
 21588  000B9E  0EFF               	movlw	255
 21589  000BA0  59D0               	subwfb	(LORAWAN_TxDone@minim+1)& (0+255),w,b
 21590  000BA2  0E0F               	movlw	15
 21591  000BA4  59D1               	subwfb	(LORAWAN_TxDone@minim+2)& (0+255),w,b
 21592  000BA6  E313               	bnc	l14582
 21593  000BA8                     u16850:
 21594                           
 21595                           ; BSR set to: 0
 21596  000BA8  C0CF  F060         	movff	LORAWAN_TxDone@minim,___lldiv@dividend
 21597  000BAC  C0D0  F061         	movff	LORAWAN_TxDone@minim+1,___lldiv@dividend+1
 21598  000BB0  C0D1  F062         	movff	LORAWAN_TxDone@minim+2,___lldiv@dividend+2
 21599  000BB4  C0D2  F063         	movff	LORAWAN_TxDone@minim+3,___lldiv@dividend+3
 21600  000BB8  0E7D               	movlw	125
 21601  000BBA  EC77  F011         	call	PL32	;call to abstracted procedure
 21602  000BBE  EC1B  F025         	call	___lldiv	;wreg free
 21603  000BC2  0E0C               	movlw	12
 21604  000BC4                     u16865:
 21605  000BC4  EC85  F011         	call	PL172	;call to abstracted procedure
 21606  000BC8  2EE8               	decfsz	wreg,f,c
 21607  000BCA  D7FC               	goto	u16865
 21608  000BCC  D01D               	goto	L16
 21609  000BCE                     l14582:
 21610                           
 21611                           ; BSR set to: 0
 21612  000BCE  C0CF  F0B2         	movff	LORAWAN_TxDone@minim,??_LORAWAN_TxDone
 21613  000BD2  C0D0  F0B3         	movff	LORAWAN_TxDone@minim+1,??_LORAWAN_TxDone+1
 21614  000BD6  C0D1  F0B4         	movff	LORAWAN_TxDone@minim+2,??_LORAWAN_TxDone+2
 21615  000BDA  C0D2  F0B5         	movff	LORAWAN_TxDone@minim+3,??_LORAWAN_TxDone+3
 21616  000BDE  0E0C               	movlw	12
 21617  000BE0                     u16875:
 21618  000BE0  90D8               	bcf	status,0,c
 21619  000BE2  37B2               	rlcf	??_LORAWAN_TxDone& (0+255),f,b
 21620  000BE4  37B3               	rlcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 21621  000BE6  37B4               	rlcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 21622  000BE8  37B5               	rlcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 21623  000BEA  2EE8               	decfsz	wreg,f,c
 21624  000BEC  D7F9               	goto	u16875
 21625  000BEE  C0B2  F060         	movff	??_LORAWAN_TxDone,___lldiv@dividend
 21626  000BF2  C0B3  F061         	movff	??_LORAWAN_TxDone+1,___lldiv@dividend+1
 21627  000BF6  C0B4  F062         	movff	??_LORAWAN_TxDone+2,___lldiv@dividend+2
 21628  000BFA  C0B5  F063         	movff	??_LORAWAN_TxDone+3,___lldiv@dividend+3
 21629  000BFE  0E7D               	movlw	125
 21630  000C00  EC77  F011         	call	PL32	;call to abstracted procedure
 21631  000C04  EC1B  F025         	call	___lldiv	;wreg free
 21632  000C08                     L16:
 21633  000C08  C060  F0BE         	movff	?___lldiv,_LORAWAN_TxDone$3266
 21634  000C0C  C061  F0BF         	movff	?___lldiv+1,_LORAWAN_TxDone$3266+1
 21635  000C10  C062  F0C0         	movff	?___lldiv+2,_LORAWAN_TxDone$3266+2
 21636  000C14  C063  F0C1         	movff	?___lldiv+3,_LORAWAN_TxDone$3266+3
 21637                           
 21638                           ; BSR set to: 0
 21639  000C18  C0BE  F06D         	movff	_LORAWAN_TxDone$3266,SwTimerSetTimeout@timeout
 21640  000C1C  C0BF  F06E         	movff	_LORAWAN_TxDone$3266+1,SwTimerSetTimeout@timeout+1
 21641  000C20  C0C0  F06F         	movff	_LORAWAN_TxDone$3266+2,SwTimerSetTimeout@timeout+2
 21642  000C24  C0C1  F070         	movff	_LORAWAN_TxDone$3266+3,SwTimerSetTimeout@timeout+3
 21643  000C28  0102               	movlb	2	; () banked
 21644  000C2A  51E9               	movf	(_loRa+233)& (0+255),w,b
 21645  000C2C  EC11  F02C         	call	_SwTimerSetTimeout
 21646                           
 21647                           ; BSR set to: 0
 21648                           ;lorawan_eu.c: 437: SwTimerStart (loRa.dutyCycleTimerId);
 21649  000C30  0102               	movlb	2	; () banked
 21650  000C32  51E9               	movf	(_loRa+233)& (0+255),w,b
 21651  000C34  ECC4  F025         	call	_SwTimerStart
 21652  000C38                     l14588:
 21653                           
 21654                           ; BSR set to: 0
 21655                           ;lorawan_eu.c: 438: }
 21656                           ;lorawan_eu.c: 439: if (CLASS_C == loRa.deviceClass)
 21657  000C38  0E02               	movlw	2
 21658  000C3A  0102               	movlb	2	; () banked
 21659  000C3C  1912               	xorwf	(_loRa+18)& (0+255),w,b
 21660  000C3E  A4D8               	btfss	status,2,c
 21661  000C40  0012               	return	
 21662                           
 21663                           ; BSR set to: 2
 21664                           ;lorawan_eu.c: 440: {
 21665                           ;lorawan_eu.c: 441: loRa.macStatus.macState = CLASS_C_RX2_1_OPEN;
 21666  000C42  5102               	movf	(_loRa+2)& (0+255),w,b
 21667  000C44  0BF0               	andlw	-16
 21668  000C46  0908               	iorlw	8
 21669  000C48  6F02               	movwf	(_loRa+2)& (0+255),b
 21670                           
 21671                           ; BSR set to: 2
 21672                           ;lorawan_eu.c: 442: LORAWAN_EnterContinuousReceive();
 21673  000C4A  EF93  F026         	goto	_LORAWAN_EnterContinuousReceive	;wreg free
 21674  000C4E                     l14594:
 21675                           
 21676                           ; BSR set to: 2
 21677                           ;lorawan_eu.c: 445: else
 21678                           ;lorawan_eu.c: 446: {
 21679                           ;lorawan_eu.c: 447: if ((RADIO_GetStatus() & (1 << (4))) != 0)
 21680  000C4E  EC07  F031         	call	_RADIO_GetStatus	;wreg free
 21681  000C52  0100               	movlb	0	; () banked
 21682  000C54  6FB2               	movwf	??_LORAWAN_TxDone& (0+255),b
 21683  000C56  A9B2               	btfss	??_LORAWAN_TxDone& (0+255),4,b
 21684  000C58  D011               	goto	l14598
 21685                           
 21686                           ; BSR set to: 0
 21687                           ;lorawan_eu.c: 448: {
 21688                           ;lorawan_eu.c: 450: rxPayload.RxAppData( (0), 0, RADIO_NOT_OK );
 21689  000C5A  0E00               	movlw	0
 21690  000C5C  6F60               	movwf	RxDataDone@pData& (0+255),b
 21691  000C5E  6F61               	movwf	(RxDataDone@pData+1)& (0+255),b
 21692  000C60  6F62               	movwf	RxDataDone@dataLength& (0+255),b
 21693  000C62  0E02               	movlw	2
 21694  000C64  6F63               	movwf	RxDataDone@status& (0+255),b
 21695  000C66  0005               	push	
 21696  000C68  0101               	movlb	1	; () banked
 21697  000C6A  6EFA               	movwf	pclath,c
 21698  000C6C  5179               	movf	_rxPayload& (0+255),w,b
 21699  000C6E  6EFD               	movwf	tosl,c
 21700  000C70  517A               	movf	(_rxPayload+1)& (0+255),w,b
 21701  000C72  6EFE               	movwf	tosh,c
 21702  000C74  50F8               	movf	tblptru,w,c
 21703  000C76  6EFF               	movwf	tosu,c
 21704  000C78  50FA               	movf	pclath,w,c
 21705  000C7A  0012               	return		;indir
 21706  000C7C                     l14598:
 21707                           
 21708                           ; BSR set to: 0
 21709                           ;lorawan_eu.c: 452: else
 21710                           ;lorawan_eu.c: 453: {
 21711                           ;lorawan_eu.c: 455: if ( rxPayload.RxAppData != (0) )
 21712  000C7C  ECA6  F00C         	call	PL418	;call to abstracted procedure
 21713  000C80  B4D8               	btfsc	status,2,c
 21714  000C82  0012               	return	
 21715                           
 21716                           ; BSR set to: 1
 21717                           ;lorawan_eu.c: 456: {
 21718                           ;lorawan_eu.c: 457: rxPayload.RxAppData( (0), 0, RADIO_OK );
 21719  000C84  EC96  F00C         	call	PL48	;call to abstracted procedure
 21720  000C88  0E03               	movlw	3
 21721  000C8A  6F63               	movwf	RxDataDone@status& (0+255),b
 21722  000C8C  0005               	push	
 21723  000C8E  0101               	movlb	1	; () banked
 21724  000C90  6EFA               	movwf	pclath,c
 21725  000C92  5179               	movf	_rxPayload& (0+255),w,b
 21726  000C94  6EFD               	movwf	tosl,c
 21727  000C96  517A               	movf	(_rxPayload+1)& (0+255),w,b
 21728  000C98  6EFE               	movwf	tosh,c
 21729  000C9A  50F8               	movf	tblptru,w,c
 21730  000C9C  6EFF               	movwf	tosu,c
 21731  000C9E  50FA               	movf	pclath,w,c
 21732  000CA0  0012               	return		;indir
 21733  000CA2                     __end_of_LORAWAN_TxDone:
 21734                           	opt stack 0
 21735  000CA2                     PL4:
 21736                           	opt stack 17
 21737  000CA2  0D0E               	mullw	14
 21738  000CA4  0E08               	movlw	low (_Channels+8)
 21739  000CA6  24F3               	addwf	prodl,w,c
 21740  000CA8  6ED9               	movwf	fsr2l,c
 21741  000CAA  0E04               	movlw	high (_Channels+8)
 21742  000CAC  20F4               	addwfc	prodh,w,c
 21743  000CAE  6EDA               	movwf	fsr2h,c
 21744  000CB0  0012               	return	
 21745  000CB2                     __end_ofPL4:
 21746                           	opt stack 0
 21747  000CB2                     PL8:
 21748                           	opt stack 13
 21749  000CB2  0100               	movlb	0	; () banked
 21750  000CB4  6FB4               	movwf	(??_LORAWAN_TxDone+2)& (0+255),b
 21751  000CB6  6BB5               	clrf	(??_LORAWAN_TxDone+3)& (0+255),b
 21752  000CB8  6BB6               	clrf	(??_LORAWAN_TxDone+4)& (0+255),b
 21753  000CBA  0E0C               	movlw	12
 21754  000CBC                     u16685:
 21755  000CBC  90D8               	bcf	status,0,c
 21756  000CBE  37B3               	rlcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 21757  000CC0  37B4               	rlcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 21758  000CC2  37B5               	rlcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 21759  000CC4  37B6               	rlcf	(??_LORAWAN_TxDone+4)& (0+255),f,b
 21760  000CC6  2EE8               	decfsz	wreg,f,c
 21761  000CC8  D7F9               	goto	u16685
 21762  000CCA  C0B3  F060         	movff	??_LORAWAN_TxDone+1,___lldiv@dividend
 21763  000CCE  C0B4  F061         	movff	??_LORAWAN_TxDone+2,___lldiv@dividend+1
 21764  000CD2  C0B5  F062         	movff	??_LORAWAN_TxDone+3,___lldiv@dividend+2
 21765  000CD6  C0B6  F063         	movff	??_LORAWAN_TxDone+4,___lldiv@dividend+3
 21766  000CDA  0E7D               	movlw	125
 21767  000CDC  6F64               	movwf	___lldiv@divisor& (0+255),b
 21768  000CDE  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 21769  000CE0  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 21770  000CE2  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 21771  000CE4  0C7D               	retlw	125
 21772  000CE6                     __end_ofPL8:
 21773                           	opt stack 0
 21774  000CE6                     PL20:
 21775                           	opt stack 12
 21776  000CE6  C060  F06D         	movff	?___lldiv,SwTimerSetTimeout@timeout
 21777  000CEA  C061  F06E         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 21778  000CEE  C062  F06F         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 21779  000CF2  C063  F070         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 21780  000CF6  0102               	movlb	2	; () banked
 21781  000CF8  0012               	return	
 21782  000CFA                     __end_ofPL20:
 21783                           	opt stack 0
 21784  000CFA                     PL54:
 21785                           	opt stack 13
 21786  000CFA  0EFF               	movlw	255
 21787  000CFC  2590               	addwf	?___lmul& (0+255),w,b
 21788  000CFE  6FC7               	movwf	_LORAWAN_TxDone$5060& (0+255),b
 21789  000D00  0EFF               	movlw	255
 21790  000D02  2191               	addwfc	(?___lmul+1)& (0+255),w,b
 21791  000D04  6FC8               	movwf	(_LORAWAN_TxDone$5060+1)& (0+255),b
 21792  000D06  0EFF               	movlw	255
 21793  000D08  2192               	addwfc	(?___lmul+2)& (0+255),w,b
 21794  000D0A  6FC9               	movwf	(_LORAWAN_TxDone$5060+2)& (0+255),b
 21795  000D0C  0EFF               	movlw	255
 21796  000D0E  2193               	addwfc	(?___lmul+3)& (0+255),w,b
 21797  000D10  6FCA               	movwf	(_LORAWAN_TxDone$5060+3)& (0+255),b
 21798  000D12  C0C7  F090         	movff	_LORAWAN_TxDone$5060,___lmul@multiplier
 21799  000D16  C0C8  F091         	movff	_LORAWAN_TxDone$5060+1,___lmul@multiplier+1
 21800  000D1A  C0C9  F092         	movff	_LORAWAN_TxDone$5060+2,___lmul@multiplier+2
 21801  000D1E  C0CA  F093         	movff	_LORAWAN_TxDone$5060+3,___lmul@multiplier+3
 21802  000D22  C0B0  F094         	movff	LORAWAN_TxDone@timeOnAir,___lmul@multiplicand
 21803  000D26  C0B1  F095         	movff	LORAWAN_TxDone@timeOnAir+1,___lmul@multiplicand+1
 21804  000D2A  6B96               	clrf	(___lmul@multiplicand+2)& (0+255),b
 21805  000D2C  6B97               	clrf	(___lmul@multiplicand+3)& (0+255),b
 21806  000D2E  0012               	return	
 21807  000D30                     __end_ofPL54:
 21808                           	opt stack 0
 21809  000D30                     PL80:
 21810                           	opt stack 17
 21811  000D30  6F94               	movwf	___lmul@multiplicand& (0+255),b
 21812  000D32  6B95               	clrf	(___lmul@multiplicand+1)& (0+255),b
 21813  000D34  6B96               	clrf	(___lmul@multiplicand+2)& (0+255),b
 21814  000D36  6B97               	clrf	(___lmul@multiplicand+3)& (0+255),b
 21815  000D38  0012               	return	
 21816  000D3A                     __end_ofPL80:
 21817                           	opt stack 0
 21818  000D3A                     PL84:
 21819                           	opt stack 13
 21820  000D3A  0100               	movlb	0	; () banked
 21821  000D3C  25B2               	addwf	??_LORAWAN_TxDone& (0+255),w,b
 21822  000D3E  6FB3               	movwf	(??_LORAWAN_TxDone+1)& (0+255),b
 21823  000D40  0E00               	movlw	0
 21824  000D42  BFB2               	btfsc	??_LORAWAN_TxDone& (0+255),7,b
 21825  000D44  0EFF               	movlw	255
 21826  000D46  0102               	movlb	2	; () banked
 21827  000D48  0012               	return	
 21828  000D4A                     __end_ofPL84:
 21829                           	opt stack 0
 21830  000D4A                     PL86:
 21831                           	opt stack 13
 21832  000D4A  6EF6               	movwf	tblptrl,c
 21833  000D4C  6AF7               	clrf	tblptrh,c
 21834  000D4E  0E7F               	movlw	high _rxWindowOffset
 21835  000D50  22F7               	addwfc	tblptrh,f,c
 21836  000D52                     	if	0	;There are less than 3 active tblptr bytes
 21837  000D52                     	endif
 21838  000D52  0008               	tblrd		*
 21839  000D54  CFF5 F0B2          	movff	tablat,??_LORAWAN_TxDone
 21840  000D58  0012               	return	
 21841  000D5A                     __end_ofPL86:
 21842                           	opt stack 0
 21843  000D5A                     PL92:
 21844                           	opt stack 17
 21845  000D5A  0D0E               	mullw	14
 21846  000D5C  0E06               	movlw	low (_Channels+6)
 21847  000D5E  24F3               	addwf	prodl,w,c
 21848  000D60  6ED9               	movwf	fsr2l,c
 21849  000D62  0E04               	movlw	high (_Channels+6)
 21850  000D64  20F4               	addwfc	prodh,w,c
 21851  000D66  6EDA               	movwf	fsr2h,c
 21852  000D68  0012               	return	
 21853  000D6A                     __end_ofPL92:
 21854                           	opt stack 0
 21855  000D6A                     PL180:
 21856                           	opt stack 13
 21857  000D6A  0E75               	movlw	low _rxWindowOffset
 21858  000D6C  0102               	movlb	2	; () banked
 21859  000D6E  251C               	addwf	(_loRa+28)& (0+255),w,b
 21860  000D70  0012               	return	
 21861  000D72                     __end_ofPL180:
 21862                           	opt stack 0
 21863                           tosu	equ	0xFFF
 21864                           tosh	equ	0xFFE
 21865                           tosl	equ	0xFFD
 21866                           pclath	equ	0xFFA
 21867                           tblptru	equ	0xFF8
 21868                           tblptrh	equ	0xFF7
 21869                           tblptrl	equ	0xFF6
 21870                           tablat	equ	0xFF5
 21871                           prodh	equ	0xFF4
 21872                           prodl	equ	0xFF3
 21873                           intcon	equ	0xFF2
 21874                           indf0	equ	0xFEF
 21875                           postinc0	equ	0xFEE
 21876                           plusw0	equ	0xFEB
 21877                           fsr0h	equ	0xFEA
 21878                           fsr0l	equ	0xFE9
 21879                           wreg	equ	0xFE8
 21880                           postinc1	equ	0xFE6
 21881                           postdec1	equ	0xFE5
 21882                           plusw1	equ	0xFE3
 21883                           fsr1h	equ	0xFE2
 21884                           fsr1l	equ	0xFE1
 21885                           indf2	equ	0xFDF
 21886                           postinc2	equ	0xFDE
 21887                           postdec2	equ	0xFDD
 21888                           plusw2	equ	0xFDB
 21889                           fsr2h	equ	0xFDA
 21890                           fsr2l	equ	0xFD9
 21891                           status	equ	0xFD8
 21892                           
 21893 ;; *************** function _SwTimerReadValue *****************
 21894 ;; Defined at:
 21895 ;;		line 193 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 21896 ;; Parameters:    Size  Location     Type
 21897 ;;  timerId         1    wreg     unsigned char 
 21898 ;; Auto vars:     Size  Location     Type
 21899 ;;  timerId         1   47[BANK0 ] unsigned char 
 21900 ;;  ticksCount      4   43[BANK0 ] unsigned long 
 21901 ;; Return value:  Size  Location     Type
 21902 ;;                  4   39[BANK0 ] unsigned long 
 21903 ;; Registers used:
 21904 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21905 ;; Tracked objects:
 21906 ;;		On entry : 3C/1
 21907 ;;		On exit  : 3F/0
 21908 ;;		Unchanged: 0/0
 21909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21910 ;;      Params:         0       4       0       0       0       0       0       0       0
 21911 ;;      Locals:         0       5       0       0       0       0       0       0       0
 21912 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21913 ;;      Totals:         0       9       0       0       0       0       0       0       0
 21914 ;;Total ram usage:        9 bytes
 21915 ;; Hardware stack levels used:    1
 21916 ;; Hardware stack levels required when called:   10
 21917 ;; This function calls:
 21918 ;;		_SwTimersInterrupt
 21919 ;; This function is called by:
 21920 ;;		_LORAWAN_TxDone
 21921 ;;		_RADIO_TxDone
 21922 ;;		_RADIO_FSKPacketSent
 21923 ;; This function uses a non-reentrant model
 21924 ;;
 21925                           
 21926                           	psect	text108
 21927  005930                     __ptext108:
 21928                           	opt stack 0
 21929  005930                     _SwTimerReadValue:
 21930                           	opt stack 16
 21931                           
 21932                           ;incstack = 0
 21933                           ;SwTimerReadValue@timerId stored from wreg
 21934  005930  0100               	movlb	0	; () banked
 21935  005932  6F8F               	movwf	SwTimerReadValue@timerId& (0+255),b
 21936                           
 21937                           ;sw_timer.c: 195: uint32_t ticksCount;
 21938                           ;sw_timer.c: 197: (INTCONbits.GIE = 0);
 21939  005934  9EF2               	bcf	intcon,7,c	;volatile
 21940                           
 21941                           ;sw_timer.c: 200: SwTimersInterrupt();
 21942  005936  EC32  F01F         	call	_SwTimersInterrupt	;wreg free
 21943                           
 21944                           ; BSR set to: 0
 21945                           ;sw_timer.c: 201: ticksCount = swTimers[timerId].ticksRemaining;
 21946  00593A  518F               	movf	SwTimerReadValue@timerId& (0+255),w,b
 21947  00593C  EC84  F01F         	call	PL10	;call to abstracted procedure
 21948  005940  CFDE F08B          	movff	postinc2,SwTimerReadValue@ticksCount
 21949  005944  CFDE F08C          	movff	postinc2,SwTimerReadValue@ticksCount+1
 21950  005948  CFDE F08D          	movff	postinc2,SwTimerReadValue@ticksCount+2
 21951  00594C  CFDE F08E          	movff	postinc2,SwTimerReadValue@ticksCount+3
 21952                           
 21953                           ; BSR set to: 0
 21954                           ;sw_timer.c: 202: (INTCONbits.GIE = 1);
 21955  005950  8EF2               	bsf	intcon,7,c	;volatile
 21956                           
 21957                           ; BSR set to: 0
 21958                           ;sw_timer.c: 204: return ticksCount;
 21959  005952  C08B  F087         	movff	SwTimerReadValue@ticksCount,?_SwTimerReadValue
 21960  005956  C08C  F088         	movff	SwTimerReadValue@ticksCount+1,?_SwTimerReadValue+1
 21961  00595A  C08D  F089         	movff	SwTimerReadValue@ticksCount+2,?_SwTimerReadValue+2
 21962  00595E  C08E  F08A         	movff	SwTimerReadValue@ticksCount+3,?_SwTimerReadValue+3
 21963                           
 21964                           ; BSR set to: 0
 21965  005962  0012               	return		;funcret
 21966  005964                     __end_of_SwTimerReadValue:
 21967                           	opt stack 0
 21968                           tosu	equ	0xFFF
 21969                           tosh	equ	0xFFE
 21970                           tosl	equ	0xFFD
 21971                           pclath	equ	0xFFA
 21972                           tblptru	equ	0xFF8
 21973                           tblptrh	equ	0xFF7
 21974                           tblptrl	equ	0xFF6
 21975                           tablat	equ	0xFF5
 21976                           prodh	equ	0xFF4
 21977                           prodl	equ	0xFF3
 21978                           intcon	equ	0xFF2
 21979                           indf0	equ	0xFEF
 21980                           postinc0	equ	0xFEE
 21981                           plusw0	equ	0xFEB
 21982                           fsr0h	equ	0xFEA
 21983                           fsr0l	equ	0xFE9
 21984                           wreg	equ	0xFE8
 21985                           postinc1	equ	0xFE6
 21986                           postdec1	equ	0xFE5
 21987                           plusw1	equ	0xFE3
 21988                           fsr1h	equ	0xFE2
 21989                           fsr1l	equ	0xFE1
 21990                           indf2	equ	0xFDF
 21991                           postinc2	equ	0xFDE
 21992                           postdec2	equ	0xFDD
 21993                           plusw2	equ	0xFDB
 21994                           fsr2h	equ	0xFDA
 21995                           fsr2l	equ	0xFD9
 21996                           status	equ	0xFD8
 21997                           
 21998 ;; *************** function _SwTimerIsRunning *****************
 21999 ;; Defined at:
 22000 ;;		line 207 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 22001 ;; Parameters:    Size  Location     Type
 22002 ;;  timerId         1    wreg     unsigned char 
 22003 ;; Auto vars:     Size  Location     Type
 22004 ;;  timerId         1    0[BANK0 ] unsigned char 
 22005 ;;  isRunning       1    1[BANK0 ] unsigned char 
 22006 ;; Return value:  Size  Location     Type
 22007 ;;                  1    wreg      unsigned char 
 22008 ;; Registers used:
 22009 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22010 ;; Tracked objects:
 22011 ;;		On entry : 3F/2
 22012 ;;		On exit  : 3F/0
 22013 ;;		Unchanged: 0/0
 22014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22015 ;;      Params:         0       0       0       0       0       0       0       0       0
 22016 ;;      Locals:         0       2       0       0       0       0       0       0       0
 22017 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22018 ;;      Totals:         0       2       0       0       0       0       0       0       0
 22019 ;;Total ram usage:        2 bytes
 22020 ;; Hardware stack levels used:    1
 22021 ;; Hardware stack levels required when called:    7
 22022 ;; This function calls:
 22023 ;;		Nothing
 22024 ;; This function is called by:
 22025 ;;		_LORAWAN_TxDone
 22026 ;; This function uses a non-reentrant model
 22027 ;;
 22028                           
 22029                           	psect	text109
 22030  006042                     __ptext109:
 22031                           	opt stack 0
 22032  006042                     _SwTimerIsRunning:
 22033                           	opt stack 19
 22034                           
 22035                           ; BSR set to: 0
 22036                           ;incstack = 0
 22037                           ;SwTimerIsRunning@timerId stored from wreg
 22038  006042  0100               	movlb	0	; () banked
 22039  006044  6F60               	movwf	SwTimerIsRunning@timerId& (0+255),b
 22040                           
 22041                           ;sw_timer.c: 209: uint8_t isRunning;
 22042                           ;sw_timer.c: 211: (INTCONbits.GIE = 0);
 22043  006046  9EF2               	bcf	intcon,7,c	;volatile
 22044                           
 22045                           ;sw_timer.c: 212: isRunning = swTimers[timerId].running;
 22046  006048  5160               	movf	SwTimerIsRunning@timerId& (0+255),w,b
 22047  00604A  ECDB  F023         	call	PL40	;call to abstracted procedure
 22048  00604E  50DF               	movf	indf2,w,c
 22049  006050  6F61               	movwf	SwTimerIsRunning@isRunning& (0+255),b
 22050                           
 22051                           ; BSR set to: 0
 22052                           ;sw_timer.c: 213: (INTCONbits.GIE = 1);
 22053  006052  8EF2               	bsf	intcon,7,c	;volatile
 22054                           
 22055                           ; BSR set to: 0
 22056                           ;sw_timer.c: 215: return isRunning;
 22057  006054  5161               	movf	SwTimerIsRunning@isRunning& (0+255),w,b
 22058                           
 22059                           ; BSR set to: 0
 22060  006056  0012               	return		;funcret
 22061  006058                     __end_of_SwTimerIsRunning:
 22062                           	opt stack 0
 22063                           tosu	equ	0xFFF
 22064                           tosh	equ	0xFFE
 22065                           tosl	equ	0xFFD
 22066                           pclath	equ	0xFFA
 22067                           tblptru	equ	0xFF8
 22068                           tblptrh	equ	0xFF7
 22069                           tblptrl	equ	0xFF6
 22070                           tablat	equ	0xFF5
 22071                           prodh	equ	0xFF4
 22072                           prodl	equ	0xFF3
 22073                           intcon	equ	0xFF2
 22074                           indf0	equ	0xFEF
 22075                           postinc0	equ	0xFEE
 22076                           plusw0	equ	0xFEB
 22077                           fsr0h	equ	0xFEA
 22078                           fsr0l	equ	0xFE9
 22079                           wreg	equ	0xFE8
 22080                           postinc1	equ	0xFE6
 22081                           postdec1	equ	0xFE5
 22082                           plusw1	equ	0xFE3
 22083                           fsr1h	equ	0xFE2
 22084                           fsr1l	equ	0xFE1
 22085                           indf2	equ	0xFDF
 22086                           postinc2	equ	0xFDE
 22087                           postdec2	equ	0xFDD
 22088                           plusw2	equ	0xFDB
 22089                           fsr2h	equ	0xFDA
 22090                           fsr2l	equ	0xFD9
 22091                           status	equ	0xFD8
 22092                           
 22093 ;; *************** function _RADIO_GetStatus *****************
 22094 ;; Defined at:
 22095 ;;		line 1116 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 22096 ;; Parameters:    Size  Location     Type
 22097 ;;		None
 22098 ;; Auto vars:     Size  Location     Type
 22099 ;;		None
 22100 ;; Return value:  Size  Location     Type
 22101 ;;                  1    wreg      unsigned char 
 22102 ;; Registers used:
 22103 ;;		wreg, status,2
 22104 ;; Tracked objects:
 22105 ;;		On entry : 3C/2
 22106 ;;		On exit  : 3F/1
 22107 ;;		Unchanged: 0/0
 22108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22109 ;;      Params:         0       0       0       0       0       0       0       0       0
 22110 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22111 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22112 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22113 ;;Total ram usage:        0 bytes
 22114 ;; Hardware stack levels used:    1
 22115 ;; Hardware stack levels required when called:    7
 22116 ;; This function calls:
 22117 ;;		Nothing
 22118 ;; This function is called by:
 22119 ;;		_LORAWAN_ReceiveWindow2Callback
 22120 ;;		_LORAWAN_RxDone
 22121 ;;		_LORAWAN_TxDone
 22122 ;; This function uses a non-reentrant model
 22123 ;;
 22124                           
 22125                           	psect	text110
 22126  00620E                     __ptext110:
 22127                           	opt stack 0
 22128  00620E                     _RADIO_GetStatus:
 22129                           	opt stack 19
 22130                           
 22131                           ;radio_driver_SX1276.c: 1118: return RadioConfiguration.flags;
 22132                           
 22133                           ; BSR set to: 0
 22134                           ;incstack = 0
 22135  00620E  0101               	movlb	1	; () banked
 22136  006210  51A2               	movf	(_RadioConfiguration+35)& (0+255),w,b
 22137                           
 22138                           ; BSR set to: 1
 22139  006212  0012               	return		;funcret
 22140  006214                     __end_of_RADIO_GetStatus:
 22141                           	opt stack 0
 22142                           tosu	equ	0xFFF
 22143                           tosh	equ	0xFFE
 22144                           tosl	equ	0xFFD
 22145                           pclath	equ	0xFFA
 22146                           tblptru	equ	0xFF8
 22147                           tblptrh	equ	0xFF7
 22148                           tblptrl	equ	0xFF6
 22149                           tablat	equ	0xFF5
 22150                           prodh	equ	0xFF4
 22151                           prodl	equ	0xFF3
 22152                           intcon	equ	0xFF2
 22153                           indf0	equ	0xFEF
 22154                           postinc0	equ	0xFEE
 22155                           plusw0	equ	0xFEB
 22156                           fsr0h	equ	0xFEA
 22157                           fsr0l	equ	0xFE9
 22158                           wreg	equ	0xFE8
 22159                           postinc1	equ	0xFE6
 22160                           postdec1	equ	0xFE5
 22161                           plusw1	equ	0xFE3
 22162                           fsr1h	equ	0xFE2
 22163                           fsr1l	equ	0xFE1
 22164                           indf2	equ	0xFDF
 22165                           postinc2	equ	0xFDE
 22166                           postdec2	equ	0xFDD
 22167                           plusw2	equ	0xFDB
 22168                           fsr2h	equ	0xFDA
 22169                           fsr2l	equ	0xFD9
 22170                           status	equ	0xFD8
 22171                           
 22172 ;; *************** function _LORAWAN_EnterContinuousReceive *****************
 22173 ;; Defined at:
 22174 ;;		line 915 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 22175 ;; Parameters:    Size  Location     Type
 22176 ;;		None
 22177 ;; Auto vars:     Size  Location     Type
 22178 ;;		None
 22179 ;; Return value:  Size  Location     Type
 22180 ;;                  1    wreg      void 
 22181 ;; Registers used:
 22182 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22183 ;; Tracked objects:
 22184 ;;		On entry : 3F/2
 22185 ;;		On exit  : 3E/0
 22186 ;;		Unchanged: 0/0
 22187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22188 ;;      Params:         0       0       0       0       0       0       0       0       0
 22189 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22190 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22191 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22192 ;;Total ram usage:        0 bytes
 22193 ;; Hardware stack levels used:    1
 22194 ;; Hardware stack levels required when called:   13
 22195 ;; This function calls:
 22196 ;;		_ConfigureRadioRx
 22197 ;;		_RADIO_ReceiveStart
 22198 ;;		_RADIO_ReceiveStop
 22199 ;;		_RADIO_ReleaseData
 22200 ;;		_ResetParametersForConfirmedTransmission
 22201 ;;		_ResetParametersForUnconfirmedTransmission
 22202 ;;		_RxDataDone
 22203 ;; This function is called by:
 22204 ;;		_LORAWAN_ReceiveWindow2Callback
 22205 ;;		_LORAWAN_RxDone
 22206 ;;		_SetReceptionNotOkState
 22207 ;;		_LORAWAN_TxDone
 22208 ;; This function uses a non-reentrant model
 22209 ;;
 22210                           
 22211                           	psect	text111
 22212  004D26                     __ptext111:
 22213                           	opt stack 0
 22214  004D26                     _LORAWAN_EnterContinuousReceive:
 22215                           	opt stack 13
 22216                           
 22217                           ; BSR set to: 2
 22218                           ;lorawan.c: 917: RADIO_ReceiveStop();
 22219                           
 22220                           ; BSR set to: 1
 22221                           ;incstack = 0
 22222  004D26  ECDC  F02F         	call	_RADIO_ReceiveStop	;wreg free
 22223                           
 22224                           ; BSR set to: 1
 22225                           ;lorawan.c: 918: RADIO_ReleaseData();
 22226  004D2A  EC0A  F031         	call	_RADIO_ReleaseData	;wreg free
 22227                           
 22228                           ; BSR set to: 1
 22229                           ;lorawan.c: 920: ConfigureRadioRx(loRa.receiveWindow2Parameters.dataRate, loRa.receiveWi
      +                          ndow2Parameters.frequency);
 22230  004D2E  D821               	call	PL168	;call to abstracted procedure
 22231  004D30  EC3E  F02E         	call	_ConfigureRadioRx
 22232                           
 22233                           ;lorawan.c: 922: if (RADIO_ReceiveStart(0) != OK)
 22234  004D34  0100               	movlb	0	; () banked
 22235  004D36  6BA7               	clrf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),b
 22236  004D38  6BA6               	clrf	RADIO_ReceiveStart@rxWindowSize& (0+255),b
 22237  004D3A  ECB4  F010         	call	_RADIO_ReceiveStart	;wreg free
 22238  004D3E  51A6               	movf	?_RADIO_ReceiveStart& (0+255),w,b
 22239  004D40  11A7               	iorwf	(?_RADIO_ReceiveStart+1)& (0+255),w,b
 22240  004D42  B4D8               	btfsc	status,2,c
 22241  004D44  0012               	return	
 22242                           
 22243                           ; BSR set to: 0
 22244                           ;lorawan.c: 923: {
 22245                           ;lorawan.c: 924: ResetParametersForConfirmedTransmission ();
 22246  004D46  EC6E  F030         	call	_ResetParametersForConfirmedTransmission	;wreg free
 22247                           
 22248                           ;lorawan.c: 925: ResetParametersForUnconfirmedTransmission ();
 22249  004D4A  ECC0  F030         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
 22250                           
 22251                           ; BSR set to: 2
 22252                           ;lorawan.c: 926: loRa.macStatus.macState = IDLE;
 22253                           
 22254                           ; BSR set to: 2
 22255                           ;lorawan.c: 927: if (rxPayload.RxAppData != (0))
 22256  004D4E  ECD2  F003         	call	PL142	;call to abstracted procedure
 22257  004D52  B4D8               	btfsc	status,2,c
 22258  004D54  0012               	return	
 22259                           
 22260                           ; BSR set to: 1
 22261                           ;lorawan.c: 928: {
 22262                           ;lorawan.c: 929: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
 22263  004D56  EC96  F00C         	call	PL48	;call to abstracted procedure
 22264  004D5A  6F63               	movwf	RxDataDone@status& (0+255),b
 22265  004D5C  0005               	push	
 22266  004D5E  0101               	movlb	1	; () banked
 22267  004D60  6EFA               	movwf	pclath,c
 22268  004D62  5179               	movf	_rxPayload& (0+255),w,b
 22269  004D64  6EFD               	movwf	tosl,c
 22270  004D66  517A               	movf	(_rxPayload+1)& (0+255),w,b
 22271  004D68  6EFE               	movwf	tosh,c
 22272  004D6A  50F8               	movf	tblptru,w,c
 22273  004D6C  6EFF               	movwf	tosu,c
 22274  004D6E  50FA               	movf	pclath,w,c
 22275  004D70  0012               	return		;indir
 22276  004D72                     __end_of_LORAWAN_EnterContinuousReceive:
 22277                           	opt stack 0
 22278  004D72                     PL168:
 22279                           	opt stack 12
 22280  004D72  C218  F072         	movff	_loRa+24,ConfigureRadioRx@freq
 22281  004D76  C219  F073         	movff	_loRa+25,ConfigureRadioRx@freq+1
 22282  004D7A  C21A  F074         	movff	_loRa+26,ConfigureRadioRx@freq+2
 22283  004D7E  C21B  F075         	movff	_loRa+27,ConfigureRadioRx@freq+3
 22284  004D82  0102               	movlb	2	; () banked
 22285  004D84  511C               	movf	(_loRa+28)& (0+255),w,b
 22286  004D86  0012               	return	
 22287  004D88                     __end_ofPL168:
 22288                           	opt stack 0
 22289                           tosu	equ	0xFFF
 22290                           tosh	equ	0xFFE
 22291                           tosl	equ	0xFFD
 22292                           pclath	equ	0xFFA
 22293                           tblptru	equ	0xFF8
 22294                           tblptrh	equ	0xFF7
 22295                           tblptrl	equ	0xFF6
 22296                           tablat	equ	0xFF5
 22297                           prodh	equ	0xFF4
 22298                           prodl	equ	0xFF3
 22299                           intcon	equ	0xFF2
 22300                           indf0	equ	0xFEF
 22301                           postinc0	equ	0xFEE
 22302                           plusw0	equ	0xFEB
 22303                           fsr0h	equ	0xFEA
 22304                           fsr0l	equ	0xFE9
 22305                           wreg	equ	0xFE8
 22306                           postinc1	equ	0xFE6
 22307                           postdec1	equ	0xFE5
 22308                           plusw1	equ	0xFE3
 22309                           fsr1h	equ	0xFE2
 22310                           fsr1l	equ	0xFE1
 22311                           indf2	equ	0xFDF
 22312                           postinc2	equ	0xFDE
 22313                           postdec2	equ	0xFDD
 22314                           plusw2	equ	0xFDB
 22315                           fsr2h	equ	0xFDA
 22316                           fsr2l	equ	0xFD9
 22317                           status	equ	0xFD8
 22318                           
 22319 ;; *************** function _RxDataDone *****************
 22320 ;; Defined at:
 22321 ;;		line 117 in file "main.c"
 22322 ;; Parameters:    Size  Location     Type
 22323 ;;  pData           2    0[BANK0 ] PTR unsigned char 
 22324 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), NULL(0), 
 22325 ;;  dataLength      1    2[BANK0 ] unsigned char 
 22326 ;;  status          1    3[BANK0 ] enum E17484
 22327 ;; Auto vars:     Size  Location     Type
 22328 ;;		None
 22329 ;; Return value:  Size  Location     Type
 22330 ;;                  1    wreg      void 
 22331 ;; Registers used:
 22332 ;;		None
 22333 ;; Tracked objects:
 22334 ;;		On entry : 3F/1
 22335 ;;		On exit  : 3F/1
 22336 ;;		Unchanged: 3F/0
 22337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22338 ;;      Params:         0       4       0       0       0       0       0       0       0
 22339 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22340 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22341 ;;      Totals:         0       4       0       0       0       0       0       0       0
 22342 ;;Total ram usage:        4 bytes
 22343 ;; Hardware stack levels used:    1
 22344 ;; Hardware stack levels required when called:    7
 22345 ;; This function calls:
 22346 ;;		Nothing
 22347 ;; This function is called by:
 22348 ;;		_main
 22349 ;;		_LORAWAN_EnterContinuousReceive
 22350 ;;		_LORAWAN_ReceiveWindow2Callback
 22351 ;;		_SetReceptionNotOkState
 22352 ;;		_LORAWAN_RxDone
 22353 ;;		_LORAWAN_TxDone
 22354 ;;		_LORAWAN_RxTimeout
 22355 ;;		_AckRetransmissionCallback
 22356 ;;		_UnconfirmedTransmissionCallback
 22357 ;; This function uses a non-reentrant model
 22358 ;;
 22359                           
 22360                           	psect	text112
 22361  006260                     __ptext112:
 22362                           	opt stack 0
 22363  006260                     _RxDataDone:
 22364                           	opt stack 20
 22365                           
 22366                           ; BSR set to: 1
 22367                           
 22368                           ;incstack = 0
 22369  006260  0012               	return		;funcret
 22370  006262                     __end_of_RxDataDone:
 22371                           	opt stack 0
 22372                           tosu	equ	0xFFF
 22373                           tosh	equ	0xFFE
 22374                           tosl	equ	0xFFD
 22375                           pclath	equ	0xFFA
 22376                           tblptru	equ	0xFF8
 22377                           tblptrh	equ	0xFF7
 22378                           tblptrl	equ	0xFF6
 22379                           tablat	equ	0xFF5
 22380                           prodh	equ	0xFF4
 22381                           prodl	equ	0xFF3
 22382                           intcon	equ	0xFF2
 22383                           indf0	equ	0xFEF
 22384                           postinc0	equ	0xFEE
 22385                           plusw0	equ	0xFEB
 22386                           fsr0h	equ	0xFEA
 22387                           fsr0l	equ	0xFE9
 22388                           wreg	equ	0xFE8
 22389                           postinc1	equ	0xFE6
 22390                           postdec1	equ	0xFE5
 22391                           plusw1	equ	0xFE3
 22392                           fsr1h	equ	0xFE2
 22393                           fsr1l	equ	0xFE1
 22394                           indf2	equ	0xFDF
 22395                           postinc2	equ	0xFDE
 22396                           postdec2	equ	0xFDD
 22397                           plusw2	equ	0xFDB
 22398                           fsr2h	equ	0xFDA
 22399                           fsr2l	equ	0xFD9
 22400                           status	equ	0xFD8
 22401                           
 22402 ;; *************** function _ResetParametersForUnconfirmedTransmission *****************
 22403 ;; Defined at:
 22404 ;;		line 1097 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 22405 ;; Parameters:    Size  Location     Type
 22406 ;;		None
 22407 ;; Auto vars:     Size  Location     Type
 22408 ;;		None
 22409 ;; Return value:  Size  Location     Type
 22410 ;;                  1    wreg      void 
 22411 ;; Registers used:
 22412 ;;		wreg, status,2
 22413 ;; Tracked objects:
 22414 ;;		On entry : 3D/0
 22415 ;;		On exit  : 3F/2
 22416 ;;		Unchanged: 0/0
 22417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22418 ;;      Params:         0       0       0       0       0       0       0       0       0
 22419 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22420 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22421 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22422 ;;Total ram usage:        0 bytes
 22423 ;; Hardware stack levels used:    1
 22424 ;; Hardware stack levels required when called:    7
 22425 ;; This function calls:
 22426 ;;		Nothing
 22427 ;; This function is called by:
 22428 ;;		_LORAWAN_ReceiveWindow2Callback
 22429 ;;		_LORAWAN_EnterContinuousReceive
 22430 ;;		_UnconfirmedTransmissionCallback
 22431 ;;		_LORAWAN_RxTimeout
 22432 ;; This function uses a non-reentrant model
 22433 ;;
 22434                           
 22435                           	psect	text113
 22436  006180                     __ptext113:
 22437                           	opt stack 0
 22438  006180                     _ResetParametersForUnconfirmedTransmission:
 22439                           	opt stack 0
 22440                           
 22441                           ;lorawan.c: 1099: loRa.macStatus.macState = IDLE;
 22442                           
 22443                           ; BSR set to: 1
 22444                           ;incstack = 0
 22445                           
 22446                           ;lorawan.c: 1100: loRa.counterRepetitionsUnconfirmedUplink = 1;
 22447  006180  EC72  F030         	call	PL410	;call to abstracted procedure
 22448  006184  6FD8               	movwf	(_loRa+216)& (0+255),b
 22449                           
 22450                           ; BSR set to: 2
 22451                           ;lorawan.c: 1101: loRa.crtMacCmdIndex = 0;
 22452  006186  6BA7               	clrf	(_loRa+167)& (0+255),b
 22453                           
 22454                           ; BSR set to: 2
 22455  006188  0012               	return		;funcret
 22456  00618A                     __end_of_ResetParametersForUnconfirmedTransmission:
 22457                           	opt stack 0
 22458                           tosu	equ	0xFFF
 22459                           tosh	equ	0xFFE
 22460                           tosl	equ	0xFFD
 22461                           pclath	equ	0xFFA
 22462                           tblptru	equ	0xFF8
 22463                           tblptrh	equ	0xFF7
 22464                           tblptrl	equ	0xFF6
 22465                           tablat	equ	0xFF5
 22466                           prodh	equ	0xFF4
 22467                           prodl	equ	0xFF3
 22468                           intcon	equ	0xFF2
 22469                           indf0	equ	0xFEF
 22470                           postinc0	equ	0xFEE
 22471                           plusw0	equ	0xFEB
 22472                           fsr0h	equ	0xFEA
 22473                           fsr0l	equ	0xFE9
 22474                           wreg	equ	0xFE8
 22475                           postinc1	equ	0xFE6
 22476                           postdec1	equ	0xFE5
 22477                           plusw1	equ	0xFE3
 22478                           fsr1h	equ	0xFE2
 22479                           fsr1l	equ	0xFE1
 22480                           indf2	equ	0xFDF
 22481                           postinc2	equ	0xFDE
 22482                           postdec2	equ	0xFDD
 22483                           plusw2	equ	0xFDB
 22484                           fsr2h	equ	0xFDA
 22485                           fsr2l	equ	0xFD9
 22486                           status	equ	0xFD8
 22487                           
 22488 ;; *************** function _ResetParametersForConfirmedTransmission *****************
 22489 ;; Defined at:
 22490 ;;		line 1090 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 22491 ;; Parameters:    Size  Location     Type
 22492 ;;		None
 22493 ;; Auto vars:     Size  Location     Type
 22494 ;;		None
 22495 ;; Return value:  Size  Location     Type
 22496 ;;                  1    wreg      void 
 22497 ;; Registers used:
 22498 ;;		wreg, status,2
 22499 ;; Tracked objects:
 22500 ;;		On entry : 3D/2
 22501 ;;		On exit  : 3F/2
 22502 ;;		Unchanged: 0/0
 22503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22504 ;;      Params:         0       0       0       0       0       0       0       0       0
 22505 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22506 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22507 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22508 ;;Total ram usage:        0 bytes
 22509 ;; Hardware stack levels used:    1
 22510 ;; Hardware stack levels required when called:    7
 22511 ;; This function calls:
 22512 ;;		Nothing
 22513 ;; This function is called by:
 22514 ;;		_LORAWAN_ReceiveWindow2Callback
 22515 ;;		_LORAWAN_EnterContinuousReceive
 22516 ;;		_AckRetransmissionCallback
 22517 ;;		_LORAWAN_RxTimeout
 22518 ;; This function uses a non-reentrant model
 22519 ;;
 22520                           
 22521                           	psect	text114
 22522  0060DC                     __ptext114:
 22523                           	opt stack 0
 22524  0060DC                     _ResetParametersForConfirmedTransmission:
 22525                           	opt stack 0
 22526                           
 22527                           ;lorawan.c: 1092: loRa.macStatus.macState = IDLE;
 22528                           
 22529                           ; BSR set to: 2
 22530                           ;incstack = 0
 22531                           
 22532                           ;lorawan.c: 1093: loRa.counterRepetitionsConfirmedUplink = 1;
 22533  0060DC  D803               	call	PL410	;call to abstracted procedure
 22534  0060DE  6FD9               	movwf	(_loRa+217)& (0+255),b
 22535                           
 22536                           ; BSR set to: 2
 22537                           ;lorawan.c: 1094: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 0;
 22538  0060E0  9100               	bcf	_loRa& (0+255),0,b
 22539                           
 22540                           ; BSR set to: 2
 22541  0060E2  0C01               	retlw	1	;funcret
 22542  0060E4                     __end_of_ResetParametersForConfirmedTransmission:
 22543                           	opt stack 0
 22544  0060E4                     PL410:
 22545                           	opt stack 20
 22546  0060E4  0EF0               	movlw	-16
 22547  0060E6  0102               	movlb	2	; () banked
 22548  0060E8  1702               	andwf	(_loRa+2)& (0+255),f,b
 22549  0060EA  0C01               	retlw	1
 22550  0060EC                     __end_ofPL410:
 22551                           	opt stack 0
 22552                           tosu	equ	0xFFF
 22553                           tosh	equ	0xFFE
 22554                           tosl	equ	0xFFD
 22555                           pclath	equ	0xFFA
 22556                           tblptru	equ	0xFF8
 22557                           tblptrh	equ	0xFF7
 22558                           tblptrl	equ	0xFF6
 22559                           tablat	equ	0xFF5
 22560                           prodh	equ	0xFF4
 22561                           prodl	equ	0xFF3
 22562                           intcon	equ	0xFF2
 22563                           indf0	equ	0xFEF
 22564                           postinc0	equ	0xFEE
 22565                           plusw0	equ	0xFEB
 22566                           fsr0h	equ	0xFEA
 22567                           fsr0l	equ	0xFE9
 22568                           wreg	equ	0xFE8
 22569                           postinc1	equ	0xFE6
 22570                           postdec1	equ	0xFE5
 22571                           plusw1	equ	0xFE3
 22572                           fsr1h	equ	0xFE2
 22573                           fsr1l	equ	0xFE1
 22574                           indf2	equ	0xFDF
 22575                           postinc2	equ	0xFDE
 22576                           postdec2	equ	0xFDD
 22577                           plusw2	equ	0xFDB
 22578                           fsr2h	equ	0xFDA
 22579                           fsr2l	equ	0xFD9
 22580                           status	equ	0xFD8
 22581                           
 22582 ;; *************** function _RADIO_ReleaseData *****************
 22583 ;; Defined at:
 22584 ;;		line 1134 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 22585 ;; Parameters:    Size  Location     Type
 22586 ;;		None
 22587 ;; Auto vars:     Size  Location     Type
 22588 ;;		None
 22589 ;; Return value:  Size  Location     Type
 22590 ;;                  1    wreg      void 
 22591 ;; Registers used:
 22592 ;;		status,2, status,0
 22593 ;; Tracked objects:
 22594 ;;		On entry : 3C/2
 22595 ;;		On exit  : 3F/1
 22596 ;;		Unchanged: 0/0
 22597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22598 ;;      Params:         0       0       0       0       0       0       0       0       0
 22599 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22600 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22601 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22602 ;;Total ram usage:        0 bytes
 22603 ;; Hardware stack levels used:    1
 22604 ;; Hardware stack levels required when called:    7
 22605 ;; This function calls:
 22606 ;;		Nothing
 22607 ;; This function is called by:
 22608 ;;		_LORAWAN_ReceiveWindow1Callback
 22609 ;;		_LORAWAN_ReceiveWindow2Callback
 22610 ;;		_LORAWAN_EnterContinuousReceive
 22611 ;;		_LORAWAN_RxDone
 22612 ;; This function uses a non-reentrant model
 22613 ;;
 22614                           
 22615                           	psect	text115
 22616  006214                     __ptext115:
 22617                           	opt stack 0
 22618  006214                     _RADIO_ReleaseData:
 22619                           	opt stack 18
 22620                           
 22621                           ;radio_driver_SX1276.c: 1136: RadioConfiguration.flags &= ~(1 << (2));
 22622                           
 22623                           ; BSR set to: 2
 22624                           ;incstack = 0
 22625  006214  0101               	movlb	1	; () banked
 22626  006216  95A2               	bcf	(_RadioConfiguration+35)& (0+255),2,b
 22627                           
 22628                           ; BSR set to: 1
 22629  006218  0012               	return		;funcret
 22630  00621A                     __end_of_RADIO_ReleaseData:
 22631                           	opt stack 0
 22632                           tosu	equ	0xFFF
 22633                           tosh	equ	0xFFE
 22634                           tosl	equ	0xFFD
 22635                           pclath	equ	0xFFA
 22636                           tblptru	equ	0xFF8
 22637                           tblptrh	equ	0xFF7
 22638                           tblptrl	equ	0xFF6
 22639                           tablat	equ	0xFF5
 22640                           prodh	equ	0xFF4
 22641                           prodl	equ	0xFF3
 22642                           intcon	equ	0xFF2
 22643                           indf0	equ	0xFEF
 22644                           postinc0	equ	0xFEE
 22645                           plusw0	equ	0xFEB
 22646                           fsr0h	equ	0xFEA
 22647                           fsr0l	equ	0xFE9
 22648                           wreg	equ	0xFE8
 22649                           postinc1	equ	0xFE6
 22650                           postdec1	equ	0xFE5
 22651                           plusw1	equ	0xFE3
 22652                           fsr1h	equ	0xFE2
 22653                           fsr1l	equ	0xFE1
 22654                           indf2	equ	0xFDF
 22655                           postinc2	equ	0xFDE
 22656                           postdec2	equ	0xFDD
 22657                           plusw2	equ	0xFDB
 22658                           fsr2h	equ	0xFDA
 22659                           fsr2l	equ	0xFD9
 22660                           status	equ	0xFD8
 22661                           
 22662 ;; *************** function _RADIO_ReceiveStop *****************
 22663 ;; Defined at:
 22664 ;;		line 951 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 22665 ;; Parameters:    Size  Location     Type
 22666 ;;		None
 22667 ;; Auto vars:     Size  Location     Type
 22668 ;;		None
 22669 ;; Return value:  Size  Location     Type
 22670 ;;                  1    wreg      void 
 22671 ;; Registers used:
 22672 ;;		wreg, status,2, status,0, cstack
 22673 ;; Tracked objects:
 22674 ;;		On entry : 3F/2
 22675 ;;		On exit  : 3F/1
 22676 ;;		Unchanged: 0/0
 22677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22678 ;;      Params:         0       0       0       0       0       0       0       0       0
 22679 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22680 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22681 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22682 ;;Total ram usage:        0 bytes
 22683 ;; Hardware stack levels used:    1
 22684 ;; Hardware stack levels required when called:   11
 22685 ;; This function calls:
 22686 ;;		_RADIO_WriteMode
 22687 ;; This function is called by:
 22688 ;;		_LORAWAN_Send
 22689 ;;		_LORAWAN_ReceiveWindow1Callback
 22690 ;;		_LORAWAN_ReceiveWindow2Callback
 22691 ;;		_LORAWAN_EnterContinuousReceive
 22692 ;; This function uses a non-reentrant model
 22693 ;;
 22694                           
 22695                           	psect	text116
 22696  005FB8                     __ptext116:
 22697                           	opt stack 0
 22698  005FB8                     _RADIO_ReceiveStop:
 22699                           	opt stack 17
 22700                           
 22701                           ; BSR set to: 2
 22702                           ;radio_driver_SX1276.c: 953: if ((1 << (1)) == RadioConfiguration.flags)
 22703                           
 22704                           ; BSR set to: 1
 22705                           ;incstack = 0
 22706  005FB8  0E02               	movlw	2
 22707  005FBA  0101               	movlb	1	; () banked
 22708  005FBC  19A2               	xorwf	(_RadioConfiguration+35)& (0+255),w,b
 22709  005FBE  A4D8               	btfss	status,2,c
 22710  005FC0  0012               	return	
 22711                           
 22712                           ; BSR set to: 1
 22713                           ;radio_driver_SX1276.c: 954: {
 22714                           ;radio_driver_SX1276.c: 955: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation, 
      +                          0);
 22715  005FC2  EC66  F02D         	call	PL78	;call to abstracted procedure
 22716  005FC6  ECDB  F01A         	call	_RADIO_WriteMode
 22717                           
 22718                           ;radio_driver_SX1276.c: 956: RadioConfiguration.flags &= ~(1 << (1));
 22719  005FCA  0101               	movlb	1	; () banked
 22720  005FCC  93A2               	bcf	(_RadioConfiguration+35)& (0+255),1,b
 22721                           
 22722                           ; BSR set to: 1
 22723  005FCE  0012               	return		;funcret
 22724  005FD0                     __end_of_RADIO_ReceiveStop:
 22725                           	opt stack 0
 22726                           tosu	equ	0xFFF
 22727                           tosh	equ	0xFFE
 22728                           tosl	equ	0xFFD
 22729                           pclath	equ	0xFFA
 22730                           tblptru	equ	0xFF8
 22731                           tblptrh	equ	0xFF7
 22732                           tblptrl	equ	0xFF6
 22733                           tablat	equ	0xFF5
 22734                           prodh	equ	0xFF4
 22735                           prodl	equ	0xFF3
 22736                           intcon	equ	0xFF2
 22737                           indf0	equ	0xFEF
 22738                           postinc0	equ	0xFEE
 22739                           plusw0	equ	0xFEB
 22740                           fsr0h	equ	0xFEA
 22741                           fsr0l	equ	0xFE9
 22742                           wreg	equ	0xFE8
 22743                           postinc1	equ	0xFE6
 22744                           postdec1	equ	0xFE5
 22745                           plusw1	equ	0xFE3
 22746                           fsr1h	equ	0xFE2
 22747                           fsr1l	equ	0xFE1
 22748                           indf2	equ	0xFDF
 22749                           postinc2	equ	0xFDE
 22750                           postdec2	equ	0xFDD
 22751                           plusw2	equ	0xFDB
 22752                           fsr2h	equ	0xFDA
 22753                           fsr2l	equ	0xFD9
 22754                           status	equ	0xFD8
 22755                           
 22756 ;; *************** function _RADIO_ReceiveStart *****************
 22757 ;; Defined at:
 22758 ;;		line 875 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 22759 ;; Parameters:    Size  Location     Type
 22760 ;;  rxWindowSize    2   70[BANK0 ] unsigned int 
 22761 ;; Auto vars:     Size  Location     Type
 22762 ;;		None
 22763 ;; Return value:  Size  Location     Type
 22764 ;;                  2   70[BANK0 ] enum E17895
 22765 ;; Registers used:
 22766 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22767 ;; Tracked objects:
 22768 ;;		On entry : 3F/0
 22769 ;;		On exit  : 3F/0
 22770 ;;		Unchanged: 0/0
 22771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22772 ;;      Params:         0       2       0       0       0       0       0       0       0
 22773 ;;      Locals:         0       4       0       0       0       0       0       0       0
 22774 ;;      Temps:          0       4       0       0       0       0       0       0       0
 22775 ;;      Totals:         0      10       0       0       0       0       0       0       0
 22776 ;;Total ram usage:       10 bytes
 22777 ;; Hardware stack levels used:    1
 22778 ;; Hardware stack levels required when called:   12
 22779 ;; This function calls:
 22780 ;;		_RADIO_RegisterWrite
 22781 ;;		_RADIO_WriteConfiguration
 22782 ;;		_RADIO_WriteMode
 22783 ;;		_SwTimerSetTimeout
 22784 ;;		_SwTimerStart
 22785 ;;		___lldiv
 22786 ;; This function is called by:
 22787 ;;		_LORAWAN_ReceiveWindow1Callback
 22788 ;;		_LORAWAN_ReceiveWindow2Callback
 22789 ;;		_LORAWAN_EnterContinuousReceive
 22790 ;; This function uses a non-reentrant model
 22791 ;;
 22792                           
 22793                           	psect	text117
 22794  002168                     __ptext117:
 22795                           	opt stack 0
 22796  002168                     _RADIO_ReceiveStart:
 22797                           	opt stack 13
 22798                           
 22799                           ; BSR set to: 0
 22800                           ;radio_driver_SX1276.c: 877: if ((RadioConfiguration.flags & (1 << (2))) != 0)
 22801                           
 22802                           ; BSR set to: 1
 22803                           ;incstack = 0
 22804  002168  0101               	movlb	1	; () banked
 22805  00216A  A5A2               	btfss	(_RadioConfiguration+35)& (0+255),2,b
 22806  00216C  D006               	goto	l12758
 22807                           
 22808                           ; BSR set to: 1
 22809                           ;radio_driver_SX1276.c: 878: {
 22810                           ;radio_driver_SX1276.c: 879: return ERR_BUFFER_LOCKED;
 22811  00216E  0E80               	movlw	128
 22812  002170  0100               	movlb	0	; () banked
 22813  002172  6FA7               	movwf	(?_RADIO_ReceiveStart+1)& (0+255),b
 22814  002174  0E03               	movlw	3
 22815  002176  6FA6               	movwf	?_RADIO_ReceiveStart& (0+255),b
 22816  002178  0C03               	retlw	3
 22817  00217A                     l12758:
 22818                           
 22819                           ; BSR set to: 1
 22820                           ;radio_driver_SX1276.c: 880: }
 22821                           ;radio_driver_SX1276.c: 882: if ((RadioConfiguration.flags & ((1 << (0)) | (1 << (1)))) 
      +                          != 0)
 22822  00217A  C1A2  F0A8         	movff	_RadioConfiguration+35,??_RADIO_ReceiveStart
 22823  00217E  0E03               	movlw	3
 22824  002180  0100               	movlb	0	; () banked
 22825  002182  17A8               	andwf	??_RADIO_ReceiveStart& (0+255),f,b
 22826  002184  E005               	bz	l12764
 22827                           
 22828                           ; BSR set to: 0
 22829                           ;radio_driver_SX1276.c: 883: {
 22830                           ;radio_driver_SX1276.c: 884: return ERR_RADIO_BUSY;
 22831  002186  0E80               	movlw	128
 22832  002188  6FA7               	movwf	(?_RADIO_ReceiveStart+1)& (0+255),b
 22833  00218A  0E04               	movlw	4
 22834  00218C  6FA6               	movwf	?_RADIO_ReceiveStart& (0+255),b
 22835  00218E  0C04               	retlw	4
 22836  002190                     l12764:
 22837                           
 22838                           ; BSR set to: 0
 22839                           ;radio_driver_SX1276.c: 885: }
 22840                           ;radio_driver_SX1276.c: 887: if (0 == rxWindowSize)
 22841  002190  51A6               	movf	RADIO_ReceiveStart@rxWindowSize& (0+255),w,b
 22842  002192  11A7               	iorwf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),w,b
 22843  002194  E105               	bnz	l12768
 22844                           
 22845                           ; BSR set to: 0
 22846                           ;radio_driver_SX1276.c: 888: {
 22847                           ;radio_driver_SX1276.c: 889: RADIO_WriteConfiguration(4);
 22848  002196  ECBD  F00F         	call	PL416	;call to abstracted procedure
 22849  00219A  ECB9  F006         	call	_RADIO_WriteConfiguration	;wreg free
 22850                           
 22851                           ;radio_driver_SX1276.c: 890: }
 22852  00219E  D006               	goto	l12770
 22853  0021A0                     l12768:
 22854                           
 22855                           ; BSR set to: 0
 22856                           ;radio_driver_SX1276.c: 891: else
 22857                           ;radio_driver_SX1276.c: 892: {
 22858                           ;radio_driver_SX1276.c: 893: RADIO_WriteConfiguration(rxWindowSize);
 22859  0021A0  C0A6  F09C         	movff	RADIO_ReceiveStart@rxWindowSize,RADIO_WriteConfiguration@symbolTimeout
 22860  0021A4  C0A7  F09D         	movff	RADIO_ReceiveStart@rxWindowSize+1,RADIO_WriteConfiguration@symbolTimeout+1
 22861  0021A8  ECB9  F006         	call	_RADIO_WriteConfiguration	;wreg free
 22862  0021AC                     l12770:
 22863                           
 22864                           ;radio_driver_SX1276.c: 894: }
 22865                           ;radio_driver_SX1276.c: 896: if (MODULATION_LORA == RadioConfiguration.modulation)
 22866  0021AC  0101               	movlb	1	; () banked
 22867  0021AE  0597               	decf	(_RadioConfiguration+24)& (0+255),w,b
 22868  0021B0  E10E               	bnz	l12774
 22869                           
 22870                           ; BSR set to: 1
 22871                           ;radio_driver_SX1276.c: 897: {
 22872                           ;radio_driver_SX1276.c: 900: RADIO_RegisterWrite(0x22, 0x01);
 22873  0021B2  0E01               	movlw	1
 22874  0021B4  0100               	movlb	0	; () banked
 22875  0021B6  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 22876  0021B8  0E22               	movlw	34
 22877  0021BA  EC2E  F02F         	call	_RADIO_RegisterWrite
 22878                           
 22879                           ;radio_driver_SX1276.c: 906: RADIO_RegisterWrite(0x40, 0x00);
 22880  0021BE  D8B0               	call	PL430	;call to abstracted procedure
 22881  0021C0  EC2E  F02F         	call	_RADIO_RegisterWrite
 22882                           
 22883                           ;radio_driver_SX1276.c: 907: RADIO_RegisterWrite(0x41, 0x00);
 22884  0021C4  ECBA  F00F         	call	PL374	;call to abstracted procedure
 22885  0021C8  EC2E  F02F         	call	_RADIO_RegisterWrite
 22886                           
 22887                           ;radio_driver_SX1276.c: 908: }
 22888  0021CC  D011               	goto	l12776
 22889  0021CE                     l12774:
 22890                           
 22891                           ; BSR set to: 1
 22892                           ;radio_driver_SX1276.c: 909: else
 22893                           ;radio_driver_SX1276.c: 910: {
 22894                           ;radio_driver_SX1276.c: 911: RADIO_RegisterWrite(0x12, RadioConfiguration.rxBw);
 22895  0021CE  C1B3  F062         	movff	_RadioConfiguration+52,RADIO_RegisterWrite@value
 22896  0021D2  0E12               	movlw	18
 22897  0021D4  EC2E  F02F         	call	_RADIO_RegisterWrite
 22898                           
 22899                           ;radio_driver_SX1276.c: 912: RADIO_RegisterWrite(0x13, RadioConfiguration.afcBw);
 22900  0021D8  C1B4  F062         	movff	_RadioConfiguration+53,RADIO_RegisterWrite@value
 22901  0021DC  0E13               	movlw	19
 22902  0021DE  EC2E  F02F         	call	_RADIO_RegisterWrite
 22903                           
 22904                           ;radio_driver_SX1276.c: 915: RADIO_RegisterWrite(0x40, 0x00);
 22905  0021E2  D89E               	call	PL430	;call to abstracted procedure
 22906  0021E4  EC2E  F02F         	call	_RADIO_RegisterWrite
 22907                           
 22908                           ;radio_driver_SX1276.c: 916: RADIO_RegisterWrite(0x41, 0x00);
 22909  0021E8  ECBA  F00F         	call	PL374	;call to abstracted procedure
 22910  0021EC  EC2E  F02F         	call	_RADIO_RegisterWrite
 22911  0021F0                     l12776:
 22912                           
 22913                           ;radio_driver_SX1276.c: 917: }
 22914                           ;radio_driver_SX1276.c: 919: RadioConfiguration.flags |= (1 << (1));
 22915  0021F0  0101               	movlb	1	; () banked
 22916  0021F2  83A2               	bsf	(_RadioConfiguration+35)& (0+255),1,b
 22917                           
 22918                           ; BSR set to: 1
 22919                           ;radio_driver_SX1276.c: 920: RadioConfiguration.flags &= ~((1 << (4)) | (1 << (3)));
 22920  0021F4  0EE7               	movlw	231
 22921  0021F6  17A2               	andwf	(_RadioConfiguration+35)& (0+255),f,b
 22922                           
 22923                           ; BSR set to: 1
 22924                           ;radio_driver_SX1276.c: 924: if (0 == rxWindowSize)
 22925  0021F8  0100               	movlb	0	; () banked
 22926  0021FA  51A6               	movf	RADIO_ReceiveStart@rxWindowSize& (0+255),w,b
 22927  0021FC  11A7               	iorwf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),w,b
 22928  0021FE  E106               	bnz	l12784
 22929                           
 22930                           ; BSR set to: 0
 22931                           ;radio_driver_SX1276.c: 925: {
 22932                           ;radio_driver_SX1276.c: 926: RADIO_WriteMode(MODE_RXCONT, RadioConfiguration.modulation,
      +                           0);
 22933  002200  EC77  F019         	call	PL278	;call to abstracted procedure
 22934  002204  0E05               	movlw	5
 22935  002206  ECDB  F01A         	call	_RADIO_WriteMode
 22936                           
 22937                           ;radio_driver_SX1276.c: 927: }
 22938  00220A  D031               	goto	l12794
 22939  00220C                     l12784:
 22940                           
 22941                           ; BSR set to: 0
 22942                           ;radio_driver_SX1276.c: 928: else
 22943                           ;radio_driver_SX1276.c: 929: {
 22944                           ;radio_driver_SX1276.c: 930: if (MODULATION_LORA == RadioConfiguration.modulation)
 22945  00220C  0101               	movlb	1	; () banked
 22946  00220E  0597               	decf	(_RadioConfiguration+24)& (0+255),w,b
 22947  002210  E109               	bnz	l12788
 22948                           
 22949                           ; BSR set to: 1
 22950                           ;radio_driver_SX1276.c: 931: {
 22951                           ;radio_driver_SX1276.c: 932: RADIO_WriteMode(MODE_RXSINGLE, MODULATION_LORA, 0);
 22952  002212  0E01               	movlw	1
 22953  002214  0100               	movlb	0	; () banked
 22954  002216  6F65               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 22955  002218  0E00               	movlw	0
 22956  00221A  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 22957  00221C  0E06               	movlw	6
 22958  00221E  ECDB  F01A         	call	_RADIO_WriteMode
 22959                           
 22960                           ;radio_driver_SX1276.c: 933: }
 22961  002222  D025               	goto	l12794
 22962  002224                     l12788:
 22963                           
 22964                           ; BSR set to: 1
 22965                           ;radio_driver_SX1276.c: 934: else
 22966                           ;radio_driver_SX1276.c: 935: {
 22967                           ;radio_driver_SX1276.c: 936: RADIO_WriteMode(MODE_RXCONT, MODULATION_FSK, 0);
 22968  002224  0E00               	movlw	0
 22969  002226  EC99  F024         	call	PL368	;call to abstracted procedure
 22970  00222A  ECDB  F01A         	call	_RADIO_WriteMode
 22971                           
 22972                           ;radio_driver_SX1276.c: 937: SwTimerSetTimeout(RadioConfiguration.fskRxWindowTimerId, ( 
      +                          (((uint32_t)(rxWindowSize)) << (12)) / 125UL ));
 22973  00222E  0100               	movlb	0	; () banked
 22974  002230  51A6               	movf	RADIO_ReceiveStart@rxWindowSize& (0+255),w,b
 22975  002232  6FA8               	movwf	??_RADIO_ReceiveStart& (0+255),b
 22976  002234  51A7               	movf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),w,b
 22977  002236  6FA9               	movwf	(??_RADIO_ReceiveStart+1)& (0+255),b
 22978  002238  6BAA               	clrf	(??_RADIO_ReceiveStart+2)& (0+255),b
 22979  00223A  6BAB               	clrf	(??_RADIO_ReceiveStart+3)& (0+255),b
 22980  00223C  0E0C               	movlw	12
 22981  00223E                     u13885:
 22982  00223E  90D8               	bcf	status,0,c
 22983  002240  D86A               	call	PL356	;call to abstracted procedure
 22984  002242  2EE8               	decfsz	wreg,f,c
 22985  002244  D7FC               	goto	u13885
 22986  002246  D858               	call	PL134	;call to abstracted procedure
 22987  002248  D852               	call	PL32	;call to abstracted procedure
 22988  00224A  EC1B  F025         	call	___lldiv	;wreg free
 22989  00224E  C060  F06D         	movff	?___lldiv,SwTimerSetTimeout@timeout
 22990  002252  C061  F06E         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 22991  002256  C062  F06F         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 22992  00225A  C063  F070         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 22993  00225E  0101               	movlb	1	; () banked
 22994  002260  51A7               	movf	(_RadioConfiguration+40)& (0+255),w,b
 22995  002262  EC11  F02C         	call	_SwTimerSetTimeout
 22996                           
 22997                           ; BSR set to: 0
 22998                           ;radio_driver_SX1276.c: 938: SwTimerStart(RadioConfiguration.fskRxWindowTimerId);
 22999  002266  0101               	movlb	1	; () banked
 23000  002268  51A7               	movf	(_RadioConfiguration+40)& (0+255),w,b
 23001  00226A  ECC4  F025         	call	_SwTimerStart
 23002  00226E                     l12794:
 23003                           
 23004                           ;radio_driver_SX1276.c: 939: }
 23005                           ;radio_driver_SX1276.c: 940: }
 23006                           ;radio_driver_SX1276.c: 942: if (0 != RadioConfiguration.watchdogTimerTimeout)
 23007  00226E  ECAE  F00F         	call	PL342	;call to abstracted procedure
 23008  002272  E039               	bz	l12806
 23009                           
 23010                           ; BSR set to: 1
 23011                           ;radio_driver_SX1276.c: 943: {
 23012                           ;radio_driver_SX1276.c: 944: SwTimerSetTimeout(RadioConfiguration.watchdogTimerId, ((Rad
      +                          ioConfiguration.watchdogTimerTimeout) < 0x000FFFFFUL ? ( (((uint32_t)(RadioConfiguration
      +                          .watchdogTimerTimeout)) << (12)) / 125UL ) : ( (((uint32_t)(RadioConfiguration.watchdogT
      +                          imerTimeout)) /
 23013  002274  51AC               	movf	(_RadioConfiguration+45)& (0+255),w,b
 23014  002276  E103               	bnz	u13900
 23015  002278  ECA8  F00F         	call	PL334	;call to abstracted procedure
 23016  00227C  E30A               	bnc	l12800
 23017  00227E                     u13900:
 23018                           
 23019                           ; BSR set to: 1
 23020  00227E  EC9E  F00F         	call	PL120	;call to abstracted procedure
 23021  002282  D835               	call	PL32	;call to abstracted procedure
 23022  002284  EC1B  F025         	call	___lldiv	;wreg free
 23023  002288  0E0C               	movlw	12
 23024  00228A                     u13915:
 23025  00228A  D83F               	call	PL172	;call to abstracted procedure
 23026  00228C  2EE8               	decfsz	wreg,f,c
 23027  00228E  D7FD               	goto	u13915
 23028  002290  D012               	goto	L17
 23029  002292                     l12800:
 23030                           
 23031                           ; BSR set to: 1
 23032  002292  C1A9  F0A8         	movff	_RadioConfiguration+42,??_RADIO_ReceiveStart
 23033  002296  C1AA  F0A9         	movff	_RadioConfiguration+43,??_RADIO_ReceiveStart+1
 23034  00229A  C1AB  F0AA         	movff	_RadioConfiguration+44,??_RADIO_ReceiveStart+2
 23035  00229E  C1AC  F0AB         	movff	_RadioConfiguration+45,??_RADIO_ReceiveStart+3
 23036  0022A2  0E0C               	movlw	12
 23037  0022A4                     u13925:
 23038  0022A4  90D8               	bcf	status,0,c
 23039  0022A6  0100               	movlb	0	; () banked
 23040  0022A8  D836               	call	PL356	;call to abstracted procedure
 23041  0022AA  2EE8               	decfsz	wreg,f,c
 23042  0022AC  D7FB               	goto	u13925
 23043  0022AE  D824               	call	PL134	;call to abstracted procedure
 23044  0022B0  D81E               	call	PL32	;call to abstracted procedure
 23045  0022B2  EC1B  F025         	call	___lldiv	;wreg free
 23046  0022B6                     L17:
 23047  0022B6  C060  F0AC         	movff	?___lldiv,_RADIO_ReceiveStart$3748
 23048  0022BA  C061  F0AD         	movff	?___lldiv+1,_RADIO_ReceiveStart$3748+1
 23049  0022BE  C062  F0AE         	movff	?___lldiv+2,_RADIO_ReceiveStart$3748+2
 23050  0022C2  C063  F0AF         	movff	?___lldiv+3,_RADIO_ReceiveStart$3748+3
 23051                           
 23052                           ; BSR set to: 0
 23053  0022C6  C0AC  F06D         	movff	_RADIO_ReceiveStart$3748,SwTimerSetTimeout@timeout
 23054  0022CA  C0AD  F06E         	movff	_RADIO_ReceiveStart$3748+1,SwTimerSetTimeout@timeout+1
 23055  0022CE  C0AE  F06F         	movff	_RADIO_ReceiveStart$3748+2,SwTimerSetTimeout@timeout+2
 23056  0022D2  C0AF  F070         	movff	_RADIO_ReceiveStart$3748+3,SwTimerSetTimeout@timeout+3
 23057  0022D6  0101               	movlb	1	; () banked
 23058  0022D8  51A8               	movf	(_RadioConfiguration+41)& (0+255),w,b
 23059  0022DA  EC11  F02C         	call	_SwTimerSetTimeout
 23060                           
 23061                           ; BSR set to: 0
 23062                           ;radio_driver_SX1276.c: 945: SwTimerStart(RadioConfiguration.watchdogTimerId);
 23063  0022DE  0101               	movlb	1	; () banked
 23064  0022E0  51A8               	movf	(_RadioConfiguration+41)& (0+255),w,b
 23065  0022E2  ECC4  F025         	call	_SwTimerStart
 23066  0022E6                     l12806:
 23067                           
 23068                           ;radio_driver_SX1276.c: 946: }
 23069                           ;radio_driver_SX1276.c: 947: return ERR_NONE;
 23070  0022E6  0100               	movlb	0	; () banked
 23071  0022E8  6BA6               	clrf	?_RADIO_ReceiveStart& (0+255),b
 23072  0022EA  6BA7               	clrf	(?_RADIO_ReceiveStart+1)& (0+255),b
 23073                           
 23074                           ; BSR set to: 0
 23075  0022EC  0012               	return		;funcret
 23076  0022EE                     __end_of_RADIO_ReceiveStart:
 23077                           	opt stack 0
 23078  0022EE                     PL32:
 23079                           	opt stack 17
 23080  0022EE  6F64               	movwf	___lldiv@divisor& (0+255),b
 23081  0022F0  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 23082  0022F2  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 23083  0022F4  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 23084  0022F6  0012               	return	
 23085  0022F8                     __end_ofPL32:
 23086                           	opt stack 0
 23087  0022F8                     PL134:
 23088                           	opt stack 13
 23089  0022F8  C0A8  F060         	movff	??_RADIO_ReceiveStart,___lldiv@dividend
 23090  0022FC  C0A9  F061         	movff	??_RADIO_ReceiveStart+1,___lldiv@dividend+1
 23091  002300  C0AA  F062         	movff	??_RADIO_ReceiveStart+2,___lldiv@dividend+2
 23092  002304  C0AB  F063         	movff	??_RADIO_ReceiveStart+3,___lldiv@dividend+3
 23093  002308  0C7D               	retlw	125
 23094  00230A                     __end_ofPL134:
 23095                           	opt stack 0
 23096  00230A                     PL172:
 23097                           	opt stack 13
 23098  00230A  90D8               	bcf	status,0,c
 23099  00230C  3760               	rlcf	?___lldiv& (0+255),f,b
 23100  00230E  3761               	rlcf	(?___lldiv+1)& (0+255),f,b
 23101  002310  3762               	rlcf	(?___lldiv+2)& (0+255),f,b
 23102  002312  3763               	rlcf	(?___lldiv+3)& (0+255),f,b
 23103  002314  0012               	return	
 23104  002316                     __end_ofPL172:
 23105                           	opt stack 0
 23106  002316                     PL356:
 23107                           	opt stack 13
 23108  002316  37A8               	rlcf	??_RADIO_ReceiveStart& (0+255),f,b
 23109  002318  37A9               	rlcf	(??_RADIO_ReceiveStart+1)& (0+255),f,b
 23110  00231A  37AA               	rlcf	(??_RADIO_ReceiveStart+2)& (0+255),f,b
 23111  00231C  37AB               	rlcf	(??_RADIO_ReceiveStart+3)& (0+255),f,b
 23112  00231E  0012               	return	
 23113  002320                     __end_ofPL356:
 23114                           	opt stack 0
 23115  002320                     PL430:
 23116                           	opt stack 13
 23117  002320  0100               	movlb	0	; () banked
 23118  002322  6B62               	clrf	RADIO_RegisterWrite@value& (0+255),b
 23119  002324  0C40               	retlw	64
 23120  002326                     __end_ofPL430:
 23121                           	opt stack 0
 23122                           tosu	equ	0xFFF
 23123                           tosh	equ	0xFFE
 23124                           tosl	equ	0xFFD
 23125                           pclath	equ	0xFFA
 23126                           tblptru	equ	0xFF8
 23127                           tblptrh	equ	0xFF7
 23128                           tblptrl	equ	0xFF6
 23129                           tablat	equ	0xFF5
 23130                           prodh	equ	0xFF4
 23131                           prodl	equ	0xFF3
 23132                           intcon	equ	0xFF2
 23133                           indf0	equ	0xFEF
 23134                           postinc0	equ	0xFEE
 23135                           plusw0	equ	0xFEB
 23136                           fsr0h	equ	0xFEA
 23137                           fsr0l	equ	0xFE9
 23138                           wreg	equ	0xFE8
 23139                           postinc1	equ	0xFE6
 23140                           postdec1	equ	0xFE5
 23141                           plusw1	equ	0xFE3
 23142                           fsr1h	equ	0xFE2
 23143                           fsr1l	equ	0xFE1
 23144                           indf2	equ	0xFDF
 23145                           postinc2	equ	0xFDE
 23146                           postdec2	equ	0xFDD
 23147                           plusw2	equ	0xFDB
 23148                           fsr2h	equ	0xFDA
 23149                           fsr2l	equ	0xFD9
 23150                           status	equ	0xFD8
 23151                           
 23152 ;; *************** function _ConfigureRadioRx *****************
 23153 ;; Defined at:
 23154 ;;		line 2019 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 23155 ;; Parameters:    Size  Location     Type
 23156 ;;  dataRate        1    wreg     unsigned char 
 23157 ;;  freq            4   18[BANK0 ] unsigned long 
 23158 ;; Auto vars:     Size  Location     Type
 23159 ;;  dataRate        1   22[BANK0 ] unsigned char 
 23160 ;; Return value:  Size  Location     Type
 23161 ;;                  1    wreg      void 
 23162 ;; Registers used:
 23163 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23164 ;; Tracked objects:
 23165 ;;		On entry : 3F/2
 23166 ;;		On exit  : 0/0
 23167 ;;		Unchanged: 0/0
 23168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23169 ;;      Params:         0       4       0       0       0       0       0       0       0
 23170 ;;      Locals:         0       1       0       0       0       0       0       0       0
 23171 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23172 ;;      Totals:         0       5       0       0       0       0       0       0       0
 23173 ;;Total ram usage:        5 bytes
 23174 ;; Hardware stack levels used:    1
 23175 ;; Hardware stack levels required when called:   10
 23176 ;; This function calls:
 23177 ;;		_ConfigureRadio
 23178 ;;		_RADIO_SetCRC
 23179 ;;		_RADIO_SetIQInverted
 23180 ;; This function is called by:
 23181 ;;		_LORAWAN_ReceiveWindow1Callback
 23182 ;;		_LORAWAN_ReceiveWindow2Callback
 23183 ;;		_LORAWAN_EnterContinuousReceive
 23184 ;; This function uses a non-reentrant model
 23185 ;;
 23186                           
 23187                           	psect	text118
 23188  005C7C                     __ptext118:
 23189                           	opt stack 0
 23190  005C7C                     _ConfigureRadioRx:
 23191                           	opt stack 15
 23192                           
 23193                           ; BSR set to: 0
 23194                           ;incstack = 0
 23195                           ;ConfigureRadioRx@dataRate stored from wreg
 23196  005C7C  0100               	movlb	0	; () banked
 23197  005C7E  6F76               	movwf	ConfigureRadioRx@dataRate& (0+255),b
 23198                           
 23199                           ;lorawan.c: 2021: ConfigureRadio(dataRate, freq);
 23200  005C80  C072  F06D         	movff	ConfigureRadioRx@freq,ConfigureRadio@freq
 23201  005C84  C073  F06E         	movff	ConfigureRadioRx@freq+1,ConfigureRadio@freq+1
 23202  005C88  C074  F06F         	movff	ConfigureRadioRx@freq+2,ConfigureRadio@freq+2
 23203  005C8C  C075  F070         	movff	ConfigureRadioRx@freq+3,ConfigureRadio@freq+3
 23204  005C90  5176               	movf	ConfigureRadioRx@dataRate& (0+255),w,b
 23205  005C92  ECE0  F024         	call	_ConfigureRadio
 23206                           
 23207                           ;lorawan.c: 2022: RADIO_SetCRC(0);
 23208  005C96  0E00               	movlw	0
 23209  005C98  ECCA  F030         	call	_RADIO_SetCRC
 23210                           
 23211                           ;lorawan.c: 2023: RADIO_SetIQInverted(1);
 23212  005C9C  0E01               	movlw	1
 23213  005C9E  EFC5  F030         	goto	_RADIO_SetIQInverted
 23214  005CA2                     __end_of_ConfigureRadioRx:
 23215                           	opt stack 0
 23216                           tosu	equ	0xFFF
 23217                           tosh	equ	0xFFE
 23218                           tosl	equ	0xFFD
 23219                           pclath	equ	0xFFA
 23220                           tblptru	equ	0xFF8
 23221                           tblptrh	equ	0xFF7
 23222                           tblptrl	equ	0xFF6
 23223                           tablat	equ	0xFF5
 23224                           prodh	equ	0xFF4
 23225                           prodl	equ	0xFF3
 23226                           intcon	equ	0xFF2
 23227                           indf0	equ	0xFEF
 23228                           postinc0	equ	0xFEE
 23229                           plusw0	equ	0xFEB
 23230                           fsr0h	equ	0xFEA
 23231                           fsr0l	equ	0xFE9
 23232                           wreg	equ	0xFE8
 23233                           postinc1	equ	0xFE6
 23234                           postdec1	equ	0xFE5
 23235                           plusw1	equ	0xFE3
 23236                           fsr1h	equ	0xFE2
 23237                           fsr1l	equ	0xFE1
 23238                           indf2	equ	0xFDF
 23239                           postinc2	equ	0xFDE
 23240                           postdec2	equ	0xFDD
 23241                           plusw2	equ	0xFDB
 23242                           fsr2h	equ	0xFDA
 23243                           fsr2l	equ	0xFD9
 23244                           status	equ	0xFD8
 23245                           
 23246 ;; *************** function _INTERRUPT_GetDioStatus *****************
 23247 ;; Defined at:
 23248 ;;		line 48 in file "mcc_generated_files/LoRaWAN/interrupt_manager_lora_addons.c"
 23249 ;; Parameters:    Size  Location     Type
 23250 ;;		None
 23251 ;; Auto vars:     Size  Location     Type
 23252 ;;  a               1    0[BANK0 ] unsigned char 
 23253 ;; Return value:  Size  Location     Type
 23254 ;;                  1    wreg      unsigned char 
 23255 ;; Registers used:
 23256 ;;		wreg, status,2
 23257 ;; Tracked objects:
 23258 ;;		On entry : 3F/0
 23259 ;;		On exit  : 3F/0
 23260 ;;		Unchanged: 0/0
 23261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23262 ;;      Params:         0       0       0       0       0       0       0       0       0
 23263 ;;      Locals:         0       1       0       0       0       0       0       0       0
 23264 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23265 ;;      Totals:         0       1       0       0       0       0       0       0       0
 23266 ;;Total ram usage:        1 bytes
 23267 ;; Hardware stack levels used:    1
 23268 ;; Hardware stack levels required when called:    7
 23269 ;; This function calls:
 23270 ;;		Nothing
 23271 ;; This function is called by:
 23272 ;;		_LORAWAN_Mainloop
 23273 ;; This function uses a non-reentrant model
 23274 ;;
 23275                           
 23276                           	psect	text119
 23277  0060EC                     __ptext119:
 23278                           	opt stack 0
 23279  0060EC                     _INTERRUPT_GetDioStatus:
 23280                           	opt stack 22
 23281                           
 23282                           ; BSR set to: 0
 23283                           ;interrupt_manager_lora_addons.c: 50: uint8_t a;
 23284                           ;interrupt_manager_lora_addons.c: 51: (INTCONbits.GIE = 0);
 23285                           
 23286                           ;incstack = 0
 23287  0060EC  9EF2               	bcf	intcon,7,c	;volatile
 23288                           
 23289                           ;interrupt_manager_lora_addons.c: 52: a = dioStatus;
 23290  0060EE  C047  F060         	movff	_dioStatus,INTERRUPT_GetDioStatus@a	;volatile
 23291                           
 23292                           ;interrupt_manager_lora_addons.c: 53: dioStatus = 0;
 23293  0060F2  6A47               	clrf	_dioStatus,c	;volatile
 23294                           
 23295                           ;interrupt_manager_lora_addons.c: 54: (INTCONbits.GIE = 1);
 23296  0060F4  8EF2               	bsf	intcon,7,c	;volatile
 23297                           
 23298                           ; BSR set to: 0
 23299                           ;interrupt_manager_lora_addons.c: 55: return a;
 23300  0060F6  5160               	movf	INTERRUPT_GetDioStatus@a& (0+255),w,b
 23301                           
 23302                           ; BSR set to: 0
 23303  0060F8  0012               	return		;funcret
 23304  0060FA                     __end_of_INTERRUPT_GetDioStatus:
 23305                           	opt stack 0
 23306                           tosu	equ	0xFFF
 23307                           tosh	equ	0xFFE
 23308                           tosl	equ	0xFFD
 23309                           pclath	equ	0xFFA
 23310                           tblptru	equ	0xFF8
 23311                           tblptrh	equ	0xFF7
 23312                           tblptrl	equ	0xFF6
 23313                           tablat	equ	0xFF5
 23314                           prodh	equ	0xFF4
 23315                           prodl	equ	0xFF3
 23316                           intcon	equ	0xFF2
 23317                           indf0	equ	0xFEF
 23318                           postinc0	equ	0xFEE
 23319                           plusw0	equ	0xFEB
 23320                           fsr0h	equ	0xFEA
 23321                           fsr0l	equ	0xFE9
 23322                           wreg	equ	0xFE8
 23323                           postinc1	equ	0xFE6
 23324                           postdec1	equ	0xFE5
 23325                           plusw1	equ	0xFE3
 23326                           fsr1h	equ	0xFE2
 23327                           fsr1l	equ	0xFE1
 23328                           indf2	equ	0xFDF
 23329                           postinc2	equ	0xFDE
 23330                           postdec2	equ	0xFDD
 23331                           plusw2	equ	0xFDB
 23332                           fsr2h	equ	0xFDA
 23333                           fsr2l	equ	0xFD9
 23334                           status	equ	0xFD8
 23335                           
 23336 ;; *************** function _LORAWAN_Join *****************
 23337 ;; Defined at:
 23338 ;;		line 115 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 23339 ;; Parameters:    Size  Location     Type
 23340 ;;  activationTy    1    wreg     enum E17377
 23341 ;; Auto vars:     Size  Location     Type
 23342 ;;  activationTy    1  133[BANK0 ] enum E17377
 23343 ;;  result          1  132[BANK0 ] enum E17354
 23344 ;;  bufferIndex     1  131[BANK0 ] unsigned char 
 23345 ;; Return value:  Size  Location     Type
 23346 ;;                  1    wreg      enum E17469
 23347 ;; Registers used:
 23348 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23349 ;; Tracked objects:
 23350 ;;		On entry : 3F/2
 23351 ;;		On exit  : 3D/0
 23352 ;;		Unchanged: 0/0
 23353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23354 ;;      Params:         0       0       0       0       0       0       0       0       0
 23355 ;;      Locals:         0       3       0       0       0       0       0       0       0
 23356 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23357 ;;      Totals:         0       3       0       0       0       0       0       0       0
 23358 ;;Total ram usage:        3 bytes
 23359 ;; Hardware stack levels used:    1
 23360 ;; Hardware stack levels required when called:   14
 23361 ;; This function calls:
 23362 ;;		_PrepareJoinRequestFrame
 23363 ;;		_RADIO_Transmit
 23364 ;;		_SelectChannelForTransmission
 23365 ;;		_SwTimerSetTimeout
 23366 ;;		_SwTimerStart
 23367 ;;		_UpdateJoinInProgress
 23368 ;; This function is called by:
 23369 ;;		_main
 23370 ;; This function uses a non-reentrant model
 23371 ;;
 23372                           
 23373                           	psect	text120
 23374  004640                     __ptext120:
 23375                           	opt stack 0
 23376  004640                     _LORAWAN_Join:
 23377                           	opt stack 16
 23378                           
 23379                           ; BSR set to: 0
 23380                           ;incstack = 0
 23381                           ;LORAWAN_Join@activationTypeNew stored from wreg
 23382  004640  0100               	movlb	0	; () banked
 23383  004642  6FE5               	movwf	LORAWAN_Join@activationTypeNew& (0+255),b
 23384                           
 23385                           ;lorawan.c: 117: uint8_t bufferIndex;
 23386                           ;lorawan.c: 118: LorawanError_t result;
 23387                           ;lorawan.c: 120: if (loRa.macStatus.macPause == 1)
 23388  004644  0102               	movlb	2	; () banked
 23389  004646  A103               	btfss	(_loRa+3)& (0+255),0,b
 23390                           
 23391                           ; BSR set to: 2
 23392                           ;lorawan.c: 123: }
 23393                           ;lorawan.c: 125: if (loRa.macStatus.silentImmediately == 1)
 23394  004648  BF02               	btfsc	(_loRa+2)& (0+255),7,b
 23395  00464A  0012               	return	
 23396                           
 23397                           ; BSR set to: 2
 23398                           ;lorawan.c: 128: }
 23399                           ;lorawan.c: 130: if (loRa.macStatus.macState != IDLE)
 23400  00464C  5102               	movf	(_loRa+2)& (0+255),w,b
 23401  00464E  0B0F               	andlw	15
 23402  004650  E001               	bz	l707
 23403  004652  0012               	return	
 23404  004654                     l707:
 23405                           
 23406                           ; BSR set to: 2
 23407                           ;lorawan.c: 133: }
 23408                           ;lorawan.c: 135: loRa.activationParameters.activationType = activationTypeNew;
 23409  004654  C0E5  F21D         	movff	LORAWAN_Join@activationTypeNew,_loRa+29
 23410                           
 23411                           ; BSR set to: 2
 23412                           ;lorawan.c: 137: if (OTAA == activationTypeNew)
 23413  004658  0100               	movlb	0	; () banked
 23414  00465A  51E5               	movf	LORAWAN_Join@activationTypeNew& (0+255),w,b
 23415  00465C  E11F               	bnz	l708
 23416                           
 23417                           ; BSR set to: 0
 23418                           ;lorawan.c: 138: {
 23419                           ;lorawan.c: 140: if ( (loRa.macKeys.deviceEui == 0) || (loRa.macKeys.applicationEui == 0
      +                          ) || (loRa.macKeys.applicationKey == 0) )
 23420  00465E  0102               	movlb	2	; () banked
 23421  004660  B1A5               	btfsc	(_loRa+165)& (0+255),0,b
 23422                           
 23423                           ; BSR set to: 2
 23424  004662  A3A5               	btfss	(_loRa+165)& (0+255),1,b
 23425  004664  0012               	return	
 23426                           
 23427                           ; BSR set to: 2
 23428  004666  A7A5               	btfss	(_loRa+165)& (0+255),3,b
 23429  004668  0012               	return	
 23430                           
 23431                           ; BSR set to: 2
 23432                           ;lorawan.c: 144: else
 23433                           ;lorawan.c: 145: {
 23434                           ;lorawan.c: 146: bufferIndex = PrepareJoinRequestFrame ();
 23435  00466A  ECFD  F016         	call	_PrepareJoinRequestFrame	;wreg free
 23436  00466E  6FE3               	movwf	LORAWAN_Join@bufferIndex& (0+255),b
 23437                           
 23438                           ;lorawan.c: 147: result = SelectChannelForTransmission (0);
 23439  004670  0E00               	movlw	0
 23440  004672  ECC4  F026         	call	_SelectChannelForTransmission
 23441  004676  6FE4               	movwf	LORAWAN_Join@result& (0+255),b
 23442                           
 23443                           ; BSR set to: 0
 23444                           ;lorawan.c: 149: if (result == OK)
 23445  004678  51E4               	movf	LORAWAN_Join@result& (0+255),w,b
 23446  00467A  A4D8               	btfss	status,2,c
 23447  00467C  0012               	return	
 23448                           
 23449                           ; BSR set to: 0
 23450                           ;lorawan.c: 150: {
 23451                           ;lorawan.c: 151: if (RADIO_Transmit(macBuffer, bufferIndex) == OK)
 23452  00467E  0EEF               	movlw	low _macBuffer
 23453  004680  6FA6               	movwf	RADIO_Transmit@buffer& (0+255),b
 23454  004682  0E05               	movlw	high _macBuffer
 23455  004684  6FA7               	movwf	(RADIO_Transmit@buffer+1)& (0+255),b
 23456  004686  C0E3  F0A8         	movff	LORAWAN_Join@bufferIndex,RADIO_Transmit@bufferLen
 23457  00468A  ECCE  F00E         	call	_RADIO_Transmit	;wreg free
 23458  00468E  51A6               	movf	?_RADIO_Transmit& (0+255),w,b
 23459  004690  11A7               	iorwf	(?_RADIO_Transmit+1)& (0+255),w,b
 23460  004692  A4D8               	btfss	status,2,c
 23461  004694  0012               	return	
 23462                           
 23463                           ; BSR set to: 0
 23464                           ;lorawan.c: 152: {
 23465                           ;lorawan.c: 153: UpdateJoinInProgress(TRANSMISSION_OCCURRING);
 23466  004696  0E01               	movlw	1
 23467  004698  EF93  F02F         	goto	_UpdateJoinInProgress
 23468  00469C                     l708:
 23469                           
 23470                           ; BSR set to: 0
 23471                           ;lorawan.c: 167: else
 23472                           ;lorawan.c: 168: {
 23473                           ;lorawan.c: 170: if ( (loRa.macKeys.applicationSessionKey == 0) || (loRa.macKeys.network
      +                          SessionKey == 0) || (loRa.macKeys.deviceAddress == 0) )
 23474  00469C  0102               	movlb	2	; () banked
 23475  00469E  BBA5               	btfsc	(_loRa+165)& (0+255),5,b
 23476                           
 23477                           ; BSR set to: 2
 23478  0046A0  A9A5               	btfss	(_loRa+165)& (0+255),4,b
 23479  0046A2  0012               	return	
 23480                           
 23481                           ; BSR set to: 2
 23482  0046A4  A5A5               	btfss	(_loRa+165)& (0+255),2,b
 23483  0046A6  0012               	return	
 23484                           
 23485                           ; BSR set to: 2
 23486                           ;lorawan.c: 174: else
 23487                           ;lorawan.c: 175: {
 23488                           ;lorawan.c: 176: UpdateJoinInProgress(ABP_DELAY);
 23489  0046A8  0E07               	movlw	7
 23490  0046AA  EC93  F02F         	call	_UpdateJoinInProgress
 23491                           
 23492                           ; BSR set to: 2
 23493                           ;lorawan.c: 177: SwTimerSetTimeout(loRa.abpJoinTimerId, ( (((uint32_t)(20)) << (12)) / 1
      +                          25UL ));
 23494  0046AE  0E8F               	movlw	143
 23495  0046B0  0100               	movlb	0	; () banked
 23496  0046B2  6F6D               	movwf	SwTimerSetTimeout@timeout& (0+255),b
 23497  0046B4  0E02               	movlw	2
 23498  0046B6  6F6E               	movwf	(SwTimerSetTimeout@timeout+1)& (0+255),b
 23499  0046B8  6B6F               	clrf	(SwTimerSetTimeout@timeout+2)& (0+255),b
 23500  0046BA  6B70               	clrf	(SwTimerSetTimeout@timeout+3)& (0+255),b
 23501  0046BC  0102               	movlb	2	; () banked
 23502  0046BE  51F3               	movf	(_loRa+243)& (0+255),w,b
 23503  0046C0  EC11  F02C         	call	_SwTimerSetTimeout
 23504                           
 23505                           ; BSR set to: 0
 23506                           ;lorawan.c: 178: SwTimerStart(loRa.abpJoinTimerId);
 23507  0046C4  0102               	movlb	2	; () banked
 23508  0046C6  51F3               	movf	(_loRa+243)& (0+255),w,b
 23509  0046C8  EFC4  F025         	goto	_SwTimerStart
 23510  0046CC                     __end_of_LORAWAN_Join:
 23511                           	opt stack 0
 23512                           tosu	equ	0xFFF
 23513                           tosh	equ	0xFFE
 23514                           tosl	equ	0xFFD
 23515                           pclath	equ	0xFFA
 23516                           tblptru	equ	0xFF8
 23517                           tblptrh	equ	0xFF7
 23518                           tblptrl	equ	0xFF6
 23519                           tablat	equ	0xFF5
 23520                           prodh	equ	0xFF4
 23521                           prodl	equ	0xFF3
 23522                           intcon	equ	0xFF2
 23523                           indf0	equ	0xFEF
 23524                           postinc0	equ	0xFEE
 23525                           plusw0	equ	0xFEB
 23526                           fsr0h	equ	0xFEA
 23527                           fsr0l	equ	0xFE9
 23528                           wreg	equ	0xFE8
 23529                           postinc1	equ	0xFE6
 23530                           postdec1	equ	0xFE5
 23531                           plusw1	equ	0xFE3
 23532                           fsr1h	equ	0xFE2
 23533                           fsr1l	equ	0xFE1
 23534                           indf2	equ	0xFDF
 23535                           postinc2	equ	0xFDE
 23536                           postdec2	equ	0xFDD
 23537                           plusw2	equ	0xFDB
 23538                           fsr2h	equ	0xFDA
 23539                           fsr2l	equ	0xFD9
 23540                           status	equ	0xFD8
 23541                           
 23542 ;; *************** function _UpdateJoinInProgress *****************
 23543 ;; Defined at:
 23544 ;;		line 2037 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 23545 ;; Parameters:    Size  Location     Type
 23546 ;;  state           1    wreg     unsigned char 
 23547 ;; Auto vars:     Size  Location     Type
 23548 ;;  state           1    0[BANK0 ] unsigned char 
 23549 ;; Return value:  Size  Location     Type
 23550 ;;                  1    wreg      void 
 23551 ;; Registers used:
 23552 ;;		wreg, status,2, status,0
 23553 ;; Tracked objects:
 23554 ;;		On entry : 3D/0
 23555 ;;		On exit  : 3F/2
 23556 ;;		Unchanged: 0/0
 23557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23558 ;;      Params:         0       0       0       0       0       0       0       0       0
 23559 ;;      Locals:         0       1       0       0       0       0       0       0       0
 23560 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23561 ;;      Totals:         0       1       0       0       0       0       0       0       0
 23562 ;;Total ram usage:        1 bytes
 23563 ;; Hardware stack levels used:    1
 23564 ;; Hardware stack levels required when called:    7
 23565 ;; This function calls:
 23566 ;;		Nothing
 23567 ;; This function is called by:
 23568 ;;		_LORAWAN_Join
 23569 ;; This function uses a non-reentrant model
 23570 ;;
 23571                           
 23572                           	psect	text121
 23573  005F26                     __ptext121:
 23574                           	opt stack 0
 23575  005F26                     _UpdateJoinInProgress:
 23576                           	opt stack 22
 23577                           
 23578                           ;incstack = 0
 23579                           ;UpdateJoinInProgress@state stored from wreg
 23580  005F26  0100               	movlb	0	; () banked
 23581  005F28  6F60               	movwf	UpdateJoinInProgress@state& (0+255),b
 23582                           
 23583                           ;lorawan.c: 2040: loRa.macStatus.networkJoined = 0;
 23584  005F2A  0102               	movlb	2	; () banked
 23585  005F2C  9902               	bcf	(_loRa+2)& (0+255),4,b
 23586                           
 23587                           ;lorawan.c: 2041: loRa.lorawanMacStatus.joining = 1;
 23588  005F2E  8500               	bsf	_loRa& (0+255),2,b
 23589                           
 23590                           ; BSR set to: 2
 23591                           ;lorawan.c: 2042: loRa.macStatus.macState = state;
 23592  005F30  5102               	movf	(_loRa+2)& (0+255),w,b
 23593  005F32  0100               	movlb	0	; () banked
 23594  005F34  1960               	xorwf	UpdateJoinInProgress@state& (0+255),w,b
 23595  005F36  0BF0               	andlw	-16
 23596  005F38  1960               	xorwf	UpdateJoinInProgress@state& (0+255),w,b
 23597  005F3A  0102               	movlb	2	; () banked
 23598  005F3C  6F02               	movwf	(_loRa+2)& (0+255),b
 23599                           
 23600                           ; BSR set to: 2
 23601  005F3E  0012               	return		;funcret
 23602  005F40                     __end_of_UpdateJoinInProgress:
 23603                           	opt stack 0
 23604                           tosu	equ	0xFFF
 23605                           tosh	equ	0xFFE
 23606                           tosl	equ	0xFFD
 23607                           pclath	equ	0xFFA
 23608                           tblptru	equ	0xFF8
 23609                           tblptrh	equ	0xFF7
 23610                           tblptrl	equ	0xFF6
 23611                           tablat	equ	0xFF5
 23612                           prodh	equ	0xFF4
 23613                           prodl	equ	0xFF3
 23614                           intcon	equ	0xFF2
 23615                           indf0	equ	0xFEF
 23616                           postinc0	equ	0xFEE
 23617                           plusw0	equ	0xFEB
 23618                           fsr0h	equ	0xFEA
 23619                           fsr0l	equ	0xFE9
 23620                           wreg	equ	0xFE8
 23621                           postinc1	equ	0xFE6
 23622                           postdec1	equ	0xFE5
 23623                           plusw1	equ	0xFE3
 23624                           fsr1h	equ	0xFE2
 23625                           fsr1l	equ	0xFE1
 23626                           indf2	equ	0xFDF
 23627                           postinc2	equ	0xFDE
 23628                           postdec2	equ	0xFDD
 23629                           plusw2	equ	0xFDB
 23630                           fsr2h	equ	0xFDA
 23631                           fsr2l	equ	0xFD9
 23632                           status	equ	0xFD8
 23633                           
 23634 ;; *************** function _SelectChannelForTransmission *****************
 23635 ;; Defined at:
 23636 ;;		line 919 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 23637 ;; Parameters:    Size  Location     Type
 23638 ;;  transmission    1    wreg     unsigned char 
 23639 ;; Auto vars:     Size  Location     Type
 23640 ;;  transmission    1   80[BANK0 ] unsigned char 
 23641 ;;  channelIndex    1   82[BANK0 ] unsigned char 
 23642 ;;  result          1   81[BANK0 ] enum E17413
 23643 ;; Return value:  Size  Location     Type
 23644 ;;                  1    wreg      enum E17354
 23645 ;; Registers used:
 23646 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23647 ;; Tracked objects:
 23648 ;;		On entry : 0/0
 23649 ;;		On exit  : 3F/0
 23650 ;;		Unchanged: 0/0
 23651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23652 ;;      Params:         0       0       0       0       0       0       0       0       0
 23653 ;;      Locals:         0       3       0       0       0       0       0       0       0
 23654 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23655 ;;      Totals:         0       3       0       0       0       0       0       0       0
 23656 ;;Total ram usage:        3 bytes
 23657 ;; Hardware stack levels used:    1
 23658 ;; Hardware stack levels required when called:   11
 23659 ;; This function calls:
 23660 ;;		_ConfigureRadioTx
 23661 ;;		_SearchAvailableChannel
 23662 ;; This function is called by:
 23663 ;;		_LORAWAN_Join
 23664 ;;		_LORAWAN_Send
 23665 ;;		_AckRetransmissionCallback
 23666 ;;		_UnconfirmedTransmissionCallback
 23667 ;;		_LORAWAN_RxTimeout
 23668 ;; This function uses a non-reentrant model
 23669 ;;
 23670                           
 23671                           	psect	text122
 23672  004D88                     __ptext122:
 23673                           	opt stack 0
 23674  004D88                     _SelectChannelForTransmission:
 23675                           	opt stack 17
 23676                           
 23677                           ; BSR set to: 2
 23678                           ;incstack = 0
 23679                           ;SelectChannelForTransmission@transmissionType stored from wreg
 23680  004D88  0100               	movlb	0	; () banked
 23681  004D8A  6FB0               	movwf	SelectChannelForTransmission@transmissionType& (0+255),b
 23682                           
 23683                           ;lorawan_eu.c: 922: uint8_t channelIndex;
 23684                           ;lorawan_eu.c: 924: result = SearchAvailableChannel (16, transmissionType, &channelIndex
      +                          );
 23685  004D8C  C0B0  F0A5         	movff	SelectChannelForTransmission@transmissionType,SearchAvailableChannel@transmission
      +                          Type
 23686  004D90  0EB2               	movlw	low SelectChannelForTransmission@channelIndex
 23687  004D92  6FA6               	movwf	SearchAvailableChannel@channelIndex& (0+255),b
 23688  004D94  0E10               	movlw	16
 23689  004D96  EC8C  F01F         	call	_SearchAvailableChannel
 23690  004D9A  6FB1               	movwf	SelectChannelForTransmission@result& (0+255),b
 23691                           
 23692                           ; BSR set to: 0
 23693                           ;lorawan_eu.c: 926: if (result == OK)
 23694  004D9C  51B1               	movf	SelectChannelForTransmission@result& (0+255),w,b
 23695  004D9E  E11A               	bnz	l13318
 23696                           
 23697                           ; BSR set to: 0
 23698                           ;lorawan_eu.c: 927: {
 23699                           ;lorawan_eu.c: 928: loRa.lastUsedChannelIndex = channelIndex;
 23700  004DA0  C0B2  F2DA         	movff	SelectChannelForTransmission@channelIndex,_loRa+218
 23701                           
 23702                           ; BSR set to: 0
 23703                           ;lorawan_eu.c: 929: loRa.receiveWindow1Parameters.frequency = Channels[channelIndex].fre
      +                          quency;
 23704  004DA4  51B2               	movf	SelectChannelForTransmission@channelIndex& (0+255),w,b
 23705  004DA6  D819               	call	PL246	;call to abstracted procedure
 23706  004DA8  CFDE F213          	movff	postinc2,_loRa+19
 23707  004DAC  CFDE F214          	movff	postinc2,_loRa+20
 23708  004DB0  CFDE F215          	movff	postinc2,_loRa+21
 23709  004DB4  CFDE F216          	movff	postinc2,_loRa+22
 23710                           
 23711                           ; BSR set to: 0
 23712                           ;lorawan_eu.c: 930: loRa.receiveWindow1Parameters.dataRate = loRa.currentDataRate;
 23713  004DB8  C2DF  F217         	movff	_loRa+223,_loRa+23
 23714                           
 23715                           ; BSR set to: 0
 23716                           ;lorawan_eu.c: 932: ConfigureRadioTx(loRa.receiveWindow1Parameters.dataRate, loRa.receiv
      +                          eWindow1Parameters.frequency);
 23717  004DBC  C213  F072         	movff	_loRa+19,ConfigureRadioTx@freq
 23718  004DC0  C214  F073         	movff	_loRa+20,ConfigureRadioTx@freq+1
 23719  004DC4  C215  F074         	movff	_loRa+21,ConfigureRadioTx@freq+2
 23720  004DC8  C216  F075         	movff	_loRa+22,ConfigureRadioTx@freq+3
 23721  004DCC  0102               	movlb	2	; () banked
 23722  004DCE  5117               	movf	(_loRa+23)& (0+255),w,b
 23723  004DD0  ECFE  F02A         	call	_ConfigureRadioTx
 23724  004DD4                     l13318:
 23725                           
 23726                           ;lorawan_eu.c: 933: }
 23727                           ;lorawan_eu.c: 934: return result;
 23728  004DD4  0100               	movlb	0	; () banked
 23729  004DD6  51B1               	movf	SelectChannelForTransmission@result& (0+255),w,b
 23730                           
 23731                           ; BSR set to: 0
 23732  004DD8  0012               	return		;funcret
 23733  004DDA                     __end_of_SelectChannelForTransmission:
 23734                           	opt stack 0
 23735  004DDA                     PL246:
 23736                           	opt stack 17
 23737  004DDA  0D0E               	mullw	14
 23738  004DDC  0E00               	movlw	low _Channels
 23739  004DDE  24F3               	addwf	prodl,w,c
 23740  004DE0  6ED9               	movwf	fsr2l,c
 23741  004DE2  0E04               	movlw	high _Channels
 23742  004DE4  20F4               	addwfc	prodh,w,c
 23743  004DE6  6EDA               	movwf	fsr2h,c
 23744  004DE8  0012               	return	
 23745  004DEA                     __end_ofPL246:
 23746                           	opt stack 0
 23747                           tosu	equ	0xFFF
 23748                           tosh	equ	0xFFE
 23749                           tosl	equ	0xFFD
 23750                           pclath	equ	0xFFA
 23751                           tblptru	equ	0xFF8
 23752                           tblptrh	equ	0xFF7
 23753                           tblptrl	equ	0xFF6
 23754                           tablat	equ	0xFF5
 23755                           prodh	equ	0xFF4
 23756                           prodl	equ	0xFF3
 23757                           intcon	equ	0xFF2
 23758                           indf0	equ	0xFEF
 23759                           postinc0	equ	0xFEE
 23760                           plusw0	equ	0xFEB
 23761                           fsr0h	equ	0xFEA
 23762                           fsr0l	equ	0xFE9
 23763                           wreg	equ	0xFE8
 23764                           postinc1	equ	0xFE6
 23765                           postdec1	equ	0xFE5
 23766                           plusw1	equ	0xFE3
 23767                           fsr1h	equ	0xFE2
 23768                           fsr1l	equ	0xFE1
 23769                           indf2	equ	0xFDF
 23770                           postinc2	equ	0xFDE
 23771                           postdec2	equ	0xFDD
 23772                           plusw2	equ	0xFDB
 23773                           fsr2h	equ	0xFDA
 23774                           fsr2l	equ	0xFD9
 23775                           status	equ	0xFD8
 23776                           
 23777 ;; *************** function _SearchAvailableChannel *****************
 23778 ;; Defined at:
 23779 ;;		line 778 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 23780 ;; Parameters:    Size  Location     Type
 23781 ;;  maxChannels     1    wreg     unsigned char 
 23782 ;;  transmission    1   69[BANK0 ] unsigned char 
 23783 ;;  channelIndex    1   70[BANK0 ] PTR unsigned char 
 23784 ;;		 -> SelectChannelForTransmission@channelIndex(1), LORAWAN_RxDone@channelIndex(1), 
 23785 ;; Auto vars:     Size  Location     Type
 23786 ;;  maxChannels     1   77[BANK0 ] unsigned char 
 23787 ;;  i               1   79[BANK0 ] unsigned char 
 23788 ;;  randomNumber    1   78[BANK0 ] unsigned char 
 23789 ;;  result          1   76[BANK0 ] enum E17413
 23790 ;;  randomNumber    1   75[BANK0 ] unsigned char 
 23791 ;; Return value:  Size  Location     Type
 23792 ;;                  1    wreg      enum E17354
 23793 ;; Registers used:
 23794 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23795 ;; Tracked objects:
 23796 ;;		On entry : 3D/2
 23797 ;;		On exit  : 3F/0
 23798 ;;		Unchanged: 0/0
 23799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23800 ;;      Params:         0       2       0       0       0       0       0       0       0
 23801 ;;      Locals:         0       5       0       0       0       0       0       0       0
 23802 ;;      Temps:          0       4       0       0       0       0       0       0       0
 23803 ;;      Totals:         0      11       0       0       0       0       0       0       0
 23804 ;;Total ram usage:       11 bytes
 23805 ;; Hardware stack levels used:    1
 23806 ;; Hardware stack levels required when called:   10
 23807 ;; This function calls:
 23808 ;;		_Random
 23809 ;; This function is called by:
 23810 ;;		_LORAWAN_RxDone
 23811 ;;		_SelectChannelForTransmission
 23812 ;; This function uses a non-reentrant model
 23813 ;;
 23814                           
 23815                           	psect	text123
 23816  003F18                     __ptext123:
 23817                           	opt stack 0
 23818  003F18                     _SearchAvailableChannel:
 23819                           	opt stack 17
 23820                           
 23821                           ; BSR set to: 0
 23822                           ;incstack = 0
 23823                           ;SearchAvailableChannel@maxChannels stored from wreg
 23824  003F18  0100               	movlb	0	; () banked
 23825  003F1A  6FAD               	movwf	SearchAvailableChannel@maxChannels& (0+255),b
 23826                           
 23827                           ;lorawan_eu.c: 780: uint8_t randomNumberCopy, randomNumber, i;
 23828                           ;lorawan_eu.c: 781: LorawanError_t result = OK;
 23829  003F1C  6BAC               	clrf	SearchAvailableChannel@result& (0+255),b
 23830                           
 23831                           ; BSR set to: 0
 23832                           ;lorawan_eu.c: 783: randomNumber = Random (maxChannels) + 1;
 23833  003F1E  C0AD  F0A3         	movff	SearchAvailableChannel@maxChannels,Random@max
 23834  003F22  6BA4               	clrf	(Random@max+1)& (0+255),b
 23835  003F24  ECBF  F02E         	call	_Random	;wreg free
 23836  003F28  29A3               	incf	?_Random& (0+255),w,b
 23837  003F2A  6FAE               	movwf	SearchAvailableChannel@randomNumber& (0+255),b
 23838                           
 23839                           ; BSR set to: 0
 23840                           ;lorawan_eu.c: 784: randomNumberCopy = randomNumber;
 23841  003F2C  C0AE  F0AB         	movff	SearchAvailableChannel@randomNumber,SearchAvailableChannel@randomNumberCopy
 23842                           
 23843                           ;lorawan_eu.c: 786: while (randomNumber)
 23844  003F30  D03D               	goto	l13022
 23845  003F32                     l1772:
 23846                           
 23847                           ; BSR set to: 0
 23848                           ;lorawan_eu.c: 787: {
 23849                           ;lorawan_eu.c: 788: for (i=0; (i < maxChannels) && (randomNumber != 0) ; i++)
 23850  003F32  6BAF               	clrf	SearchAvailableChannel@i& (0+255),b
 23851  003F34  D030               	goto	l13014
 23852  003F36                     l12998:
 23853                           
 23854                           ; BSR set to: 0
 23855                           ;lorawan_eu.c: 789: {
 23856                           ;lorawan_eu.c: 790: if ( ( Channels[i].status == 1 ) && ( Channels[i].channelTimer == 0 
      +                          ) && ( loRa.currentDataRate >= Channels[i].dataRange.min ) && ( loRa.currentDataRate <= 
      +                          Channels[i].dataRange.max ) )
 23857  003F36  51AF               	movf	SearchAvailableChannel@i& (0+255),w,b
 23858  003F38  EC86  F021         	call	PL12	;call to abstracted procedure
 23859  003F3C  E12A               	bnz	l1775
 23860                           
 23861                           ; BSR set to: 0
 23862  003F3E  51AF               	movf	SearchAvailableChannel@i& (0+255),w,b
 23863  003F40  EC51  F006         	call	PL4	;call to abstracted procedure
 23864  003F44  ECBB  F00E         	call	PL130	;call to abstracted procedure
 23865  003F48  E124               	bnz	l1775
 23866                           
 23867                           ; BSR set to: 0
 23868  003F4A  51AF               	movf	SearchAvailableChannel@i& (0+255),w,b
 23869  003F4C  EC7E  F021         	call	PL6	;call to abstracted procedure
 23870  003F50  50DF               	movf	223,w,c
 23871  003F52  0B0F               	andlw	15
 23872  003F54  0100               	movlb	0	; () banked
 23873  003F56  6FA7               	movwf	??_SearchAvailableChannel& (0+255),b
 23874  003F58  51A7               	movf	??_SearchAvailableChannel& (0+255),w,b
 23875  003F5A  0102               	movlb	2	; () banked
 23876  003F5C  5DDF               	subwf	(_loRa+223)& (0+255),w,b
 23877  003F5E  E319               	bnc	l1775
 23878                           
 23879                           ; BSR set to: 2
 23880  003F60  0100               	movlb	0	; () banked
 23881  003F62  51AF               	movf	SearchAvailableChannel@i& (0+255),w,b
 23882  003F64  EC7E  F021         	call	PL6	;call to abstracted procedure
 23883  003F68  38DF               	swapf	223,w,c
 23884  003F6A  0B0F               	andlw	15
 23885  003F6C  6FA7               	movwf	??_SearchAvailableChannel& (0+255),b
 23886  003F6E  0102               	movlb	2	; () banked
 23887  003F70  51DF               	movf	(_loRa+223)& (0+255),w,b
 23888  003F72  0100               	movlb	0	; () banked
 23889  003F74  5DA7               	subwf	??_SearchAvailableChannel& (0+255),w,b
 23890  003F76  E30D               	bnc	l1775
 23891                           
 23892                           ; BSR set to: 0
 23893                           ;lorawan_eu.c: 791: {
 23894                           ;lorawan_eu.c: 792: if (transmissionType == 0)
 23895  003F78  51A5               	movf	SearchAvailableChannel@transmissionType& (0+255),w,b
 23896  003F7A  E10A               	bnz	l13010
 23897                           
 23898                           ; BSR set to: 0
 23899                           ;lorawan_eu.c: 793: {
 23900                           ;lorawan_eu.c: 794: if ( Channels[i].joinRequestChannel == 1 )
 23901  003F7C  51AF               	movf	SearchAvailableChannel@i& (0+255),w,b
 23902  003F7E  0D0E               	mullw	14
 23903  003F80  0E0C               	movlw	low (_Channels+12)
 23904  003F82  24F3               	addwf	prodl,w,c
 23905  003F84  6ED9               	movwf	fsr2l,c
 23906  003F86  0E04               	movlw	high (_Channels+12)
 23907  003F88  20F4               	addwfc	prodh,w,c
 23908  003F8A  6EDA               	movwf	fsr2h,c
 23909  003F8C  04DE               	decf	postinc2,w,c
 23910  003F8E  E101               	bnz	l1775
 23911  003F90                     l13010:
 23912                           
 23913                           ; BSR set to: 0
 23914                           ;lorawan_eu.c: 795: {
 23915                           ;lorawan_eu.c: 796: randomNumber --;
 23916  003F90  07AE               	decf	SearchAvailableChannel@randomNumber& (0+255),f,b
 23917  003F92                     l1775:
 23918  003F92  0100               	movlb	0	; () banked
 23919  003F94  2BAF               	incf	SearchAvailableChannel@i& (0+255),f,b
 23920  003F96                     l13014:
 23921                           
 23922                           ; BSR set to: 0
 23923  003F96  51AD               	movf	SearchAvailableChannel@maxChannels& (0+255),w,b
 23924  003F98  5DAF               	subwf	SearchAvailableChannel@i& (0+255),w,b
 23925  003F9A  E202               	bc	l13018
 23926                           
 23927                           ; BSR set to: 0
 23928  003F9C  51AE               	movf	SearchAvailableChannel@randomNumber& (0+255),w,b
 23929  003F9E  E1CB               	bnz	l12998
 23930  003FA0                     l13018:
 23931                           
 23932                           ; BSR set to: 0
 23933                           ;lorawan_eu.c: 802: }
 23934                           ;lorawan_eu.c: 803: }
 23935                           ;lorawan_eu.c: 804: }
 23936                           ;lorawan_eu.c: 806: if ( randomNumber == randomNumberCopy )
 23937  003FA0  51AB               	movf	SearchAvailableChannel@randomNumberCopy& (0+255),w,b
 23938  003FA2  19AE               	xorwf	SearchAvailableChannel@randomNumber& (0+255),w,b
 23939  003FA4  E103               	bnz	l13022
 23940                           
 23941                           ; BSR set to: 0
 23942                           ;lorawan_eu.c: 807: {
 23943                           ;lorawan_eu.c: 808: result = NO_CHANNELS_FOUND;
 23944  003FA6  0E09               	movlw	9
 23945  003FA8  6FAC               	movwf	SearchAvailableChannel@result& (0+255),b
 23946                           
 23947                           ;lorawan_eu.c: 809: break;
 23948  003FAA  D002               	goto	l13024
 23949  003FAC                     l13022:
 23950                           
 23951                           ; BSR set to: 0
 23952  003FAC  51AE               	movf	SearchAvailableChannel@randomNumber& (0+255),w,b
 23953  003FAE  E1C1               	bnz	l1772
 23954  003FB0                     l13024:
 23955                           
 23956                           ; BSR set to: 0
 23957                           ;lorawan_eu.c: 810: }
 23958                           ;lorawan_eu.c: 811: }
 23959                           ;lorawan_eu.c: 813: if ( i != 0)
 23960  003FB0  51AF               	movf	SearchAvailableChannel@i& (0+255),w,b
 23961  003FB2  E006               	bz	l13028
 23962                           
 23963                           ; BSR set to: 0
 23964                           ;lorawan_eu.c: 814: {
 23965                           ;lorawan_eu.c: 815: *channelIndex = i - 1;
 23966  003FB4  51A6               	movf	SearchAvailableChannel@channelIndex& (0+255),w,b
 23967  003FB6  6ED9               	movwf	fsr2l,c
 23968  003FB8  6ADA               	clrf	fsr2h,c
 23969  003FBA  05AF               	decf	SearchAvailableChannel@i& (0+255),w,b
 23970  003FBC  6EDF               	movwf	indf2,c
 23971                           
 23972                           ;lorawan_eu.c: 816: }
 23973  003FBE  D002               	goto	l1785
 23974  003FC0                     l13028:
 23975                           
 23976                           ; BSR set to: 0
 23977                           ;lorawan_eu.c: 817: else
 23978                           ;lorawan_eu.c: 818: {
 23979                           ;lorawan_eu.c: 819: result = NO_CHANNELS_FOUND;
 23980  003FC0  0E09               	movlw	9
 23981  003FC2  6FAC               	movwf	SearchAvailableChannel@result& (0+255),b
 23982  003FC4                     l1785:
 23983                           
 23984                           ; BSR set to: 0
 23985                           ;lorawan_eu.c: 820: }
 23986                           ;lorawan_eu.c: 821: return result;
 23987  003FC4  51AC               	movf	SearchAvailableChannel@result& (0+255),w,b
 23988                           
 23989                           ; BSR set to: 0
 23990  003FC6  0012               	return		;funcret
 23991  003FC8                     __end_of_SearchAvailableChannel:
 23992                           	opt stack 0
 23993                           tosu	equ	0xFFF
 23994                           tosh	equ	0xFFE
 23995                           tosl	equ	0xFFD
 23996                           pclath	equ	0xFFA
 23997                           tblptru	equ	0xFF8
 23998                           tblptrh	equ	0xFF7
 23999                           tblptrl	equ	0xFF6
 24000                           tablat	equ	0xFF5
 24001                           prodh	equ	0xFF4
 24002                           prodl	equ	0xFF3
 24003                           intcon	equ	0xFF2
 24004                           indf0	equ	0xFEF
 24005                           postinc0	equ	0xFEE
 24006                           plusw0	equ	0xFEB
 24007                           fsr0h	equ	0xFEA
 24008                           fsr0l	equ	0xFE9
 24009                           wreg	equ	0xFE8
 24010                           postinc1	equ	0xFE6
 24011                           postdec1	equ	0xFE5
 24012                           plusw1	equ	0xFE3
 24013                           fsr1h	equ	0xFE2
 24014                           fsr1l	equ	0xFE1
 24015                           indf2	equ	0xFDF
 24016                           postinc2	equ	0xFDE
 24017                           postdec2	equ	0xFDD
 24018                           plusw2	equ	0xFDB
 24019                           fsr2h	equ	0xFDA
 24020                           fsr2l	equ	0xFD9
 24021                           status	equ	0xFD8
 24022                           
 24023 ;; *************** function _ConfigureRadioTx *****************
 24024 ;; Defined at:
 24025 ;;		line 1255 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 24026 ;; Parameters:    Size  Location     Type
 24027 ;;  dataRate        1    wreg     unsigned char 
 24028 ;;  freq            4   18[BANK0 ] unsigned long 
 24029 ;; Auto vars:     Size  Location     Type
 24030 ;;  dataRate        1   22[BANK0 ] unsigned char 
 24031 ;;  txPower         1   23[BANK0 ] char 
 24032 ;; Return value:  Size  Location     Type
 24033 ;;                  1    wreg      void 
 24034 ;; Registers used:
 24035 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24036 ;; Tracked objects:
 24037 ;;		On entry : 3F/2
 24038 ;;		On exit  : 0/0
 24039 ;;		Unchanged: 0/0
 24040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24041 ;;      Params:         0       4       0       0       0       0       0       0       0
 24042 ;;      Locals:         0       2       0       0       0       0       0       0       0
 24043 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24044 ;;      Totals:         0       6       0       0       0       0       0       0       0
 24045 ;;Total ram usage:        6 bytes
 24046 ;; Hardware stack levels used:    1
 24047 ;; Hardware stack levels required when called:   10
 24048 ;; This function calls:
 24049 ;;		_ConfigureRadio
 24050 ;;		_RADIO_SetCRC
 24051 ;;		_RADIO_SetIQInverted
 24052 ;;		_RADIO_SetOutputPower
 24053 ;; This function is called by:
 24054 ;;		_SelectChannelForTransmission
 24055 ;; This function uses a non-reentrant model
 24056 ;;
 24057                           
 24058                           	psect	text124
 24059  0055FC                     __ptext124:
 24060                           	opt stack 0
 24061  0055FC                     _ConfigureRadioTx:
 24062                           	opt stack 17
 24063                           
 24064                           ; BSR set to: 0
 24065                           ;incstack = 0
 24066                           ;ConfigureRadioTx@dataRate stored from wreg
 24067  0055FC  0100               	movlb	0	; () banked
 24068  0055FE  6F76               	movwf	ConfigureRadioTx@dataRate& (0+255),b
 24069                           
 24070                           ;lorawan_eu.c: 1257: int8_t txPower;
 24071                           ;lorawan_eu.c: 1259: ConfigureRadio(dataRate, freq);
 24072  005600  C072  F06D         	movff	ConfigureRadioTx@freq,ConfigureRadio@freq
 24073  005604  C073  F06E         	movff	ConfigureRadioTx@freq+1,ConfigureRadio@freq+1
 24074  005608  C074  F06F         	movff	ConfigureRadioTx@freq+2,ConfigureRadio@freq+2
 24075  00560C  C075  F070         	movff	ConfigureRadioTx@freq+3,ConfigureRadio@freq+3
 24076  005610  5176               	movf	ConfigureRadioTx@dataRate& (0+255),w,b
 24077  005612  ECE0  F024         	call	_ConfigureRadio
 24078                           
 24079                           ;lorawan_eu.c: 1262: {
 24080                           ;lorawan_eu.c: 1263: txPower = txPower868[loRa.txPower];
 24081  005616  0EA2               	movlw	low _txPower868
 24082  005618  0102               	movlb	2	; () banked
 24083  00561A  25E1               	addwf	(_loRa+225)& (0+255),w,b
 24084  00561C  6EF6               	movwf	tblptrl,c
 24085  00561E  6AF7               	clrf	tblptrh,c
 24086  005620  0E7F               	movlw	high _txPower868
 24087  005622  22F7               	addwfc	tblptrh,f,c
 24088  005624                     	if	0	;There are less than 3 active tblptr bytes
 24089  005624                     	endif
 24090  005624  0008               	tblrd		*
 24091  005626  CFF5 F077          	movff	tablat,ConfigureRadioTx@txPower
 24092                           
 24093                           ; BSR set to: 2
 24094                           ;lorawan_eu.c: 1268: }
 24095                           ;lorawan_eu.c: 1270: RADIO_SetOutputPower (txPower);
 24096                           
 24097                           ;lorawan_eu.c: 1264: }
 24098  00562A  0100               	movlb	0	; () banked
 24099  00562C  5177               	movf	ConfigureRadioTx@txPower& (0+255),w,b
 24100  00562E  ECEA  F030         	call	_RADIO_SetOutputPower
 24101                           
 24102                           ;lorawan_eu.c: 1272: RADIO_SetCRC(1);
 24103  005632  0E01               	movlw	1
 24104  005634  ECCA  F030         	call	_RADIO_SetCRC
 24105                           
 24106                           ;lorawan_eu.c: 1273: RADIO_SetIQInverted(0);
 24107  005638  0E00               	movlw	0
 24108  00563A  EFC5  F030         	goto	_RADIO_SetIQInverted
 24109  00563E                     __end_of_ConfigureRadioTx:
 24110                           	opt stack 0
 24111                           tosu	equ	0xFFF
 24112                           tosh	equ	0xFFE
 24113                           tosl	equ	0xFFD
 24114                           pclath	equ	0xFFA
 24115                           tblptru	equ	0xFF8
 24116                           tblptrh	equ	0xFF7
 24117                           tblptrl	equ	0xFF6
 24118                           tablat	equ	0xFF5
 24119                           prodh	equ	0xFF4
 24120                           prodl	equ	0xFF3
 24121                           intcon	equ	0xFF2
 24122                           indf0	equ	0xFEF
 24123                           postinc0	equ	0xFEE
 24124                           plusw0	equ	0xFEB
 24125                           fsr0h	equ	0xFEA
 24126                           fsr0l	equ	0xFE9
 24127                           wreg	equ	0xFE8
 24128                           postinc1	equ	0xFE6
 24129                           postdec1	equ	0xFE5
 24130                           plusw1	equ	0xFE3
 24131                           fsr1h	equ	0xFE2
 24132                           fsr1l	equ	0xFE1
 24133                           indf2	equ	0xFDF
 24134                           postinc2	equ	0xFDE
 24135                           postdec2	equ	0xFDD
 24136                           plusw2	equ	0xFDB
 24137                           fsr2h	equ	0xFDA
 24138                           fsr2l	equ	0xFD9
 24139                           status	equ	0xFD8
 24140                           
 24141 ;; *************** function _RADIO_SetOutputPower *****************
 24142 ;; Defined at:
 24143 ;;		line 1464 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24144 ;; Parameters:    Size  Location     Type
 24145 ;;  power           1    wreg     char 
 24146 ;; Auto vars:     Size  Location     Type
 24147 ;;  power           1    0[BANK0 ] char 
 24148 ;; Return value:  Size  Location     Type
 24149 ;;                  1    wreg      void 
 24150 ;; Registers used:
 24151 ;;		wreg
 24152 ;; Tracked objects:
 24153 ;;		On entry : 3F/0
 24154 ;;		On exit  : 0/0
 24155 ;;		Unchanged: 0/0
 24156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24157 ;;      Params:         0       0       0       0       0       0       0       0       0
 24158 ;;      Locals:         0       1       0       0       0       0       0       0       0
 24159 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24160 ;;      Totals:         0       1       0       0       0       0       0       0       0
 24161 ;;Total ram usage:        1 bytes
 24162 ;; Hardware stack levels used:    1
 24163 ;; Hardware stack levels required when called:    7
 24164 ;; This function calls:
 24165 ;;		Nothing
 24166 ;; This function is called by:
 24167 ;;		_ConfigureRadioTx
 24168 ;; This function uses a non-reentrant model
 24169 ;;
 24170                           
 24171                           	psect	text125
 24172  0061D4                     __ptext125:
 24173                           	opt stack 0
 24174  0061D4                     _RADIO_SetOutputPower:
 24175                           	opt stack 19
 24176                           
 24177                           ;incstack = 0
 24178                           ;RADIO_SetOutputPower@power stored from wreg
 24179  0061D4  6F60               	movwf	RADIO_SetOutputPower@power& (0+255),b
 24180                           
 24181                           ;radio_driver_SX1276.c: 1466: RadioConfiguration.outputPower = power;
 24182  0061D6  C060  F19A         	movff	RADIO_SetOutputPower@power,_RadioConfiguration+27
 24183  0061DA  0012               	return		;funcret
 24184  0061DC                     __end_of_RADIO_SetOutputPower:
 24185                           	opt stack 0
 24186                           tosu	equ	0xFFF
 24187                           tosh	equ	0xFFE
 24188                           tosl	equ	0xFFD
 24189                           pclath	equ	0xFFA
 24190                           tblptru	equ	0xFF8
 24191                           tblptrh	equ	0xFF7
 24192                           tblptrl	equ	0xFF6
 24193                           tablat	equ	0xFF5
 24194                           prodh	equ	0xFF4
 24195                           prodl	equ	0xFF3
 24196                           intcon	equ	0xFF2
 24197                           indf0	equ	0xFEF
 24198                           postinc0	equ	0xFEE
 24199                           plusw0	equ	0xFEB
 24200                           fsr0h	equ	0xFEA
 24201                           fsr0l	equ	0xFE9
 24202                           wreg	equ	0xFE8
 24203                           postinc1	equ	0xFE6
 24204                           postdec1	equ	0xFE5
 24205                           plusw1	equ	0xFE3
 24206                           fsr1h	equ	0xFE2
 24207                           fsr1l	equ	0xFE1
 24208                           indf2	equ	0xFDF
 24209                           postinc2	equ	0xFDE
 24210                           postdec2	equ	0xFDD
 24211                           plusw2	equ	0xFDB
 24212                           fsr2h	equ	0xFDA
 24213                           fsr2l	equ	0xFD9
 24214                           status	equ	0xFD8
 24215                           
 24216 ;; *************** function _RADIO_SetIQInverted *****************
 24217 ;; Defined at:
 24218 ;;		line 1484 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24219 ;; Parameters:    Size  Location     Type
 24220 ;;  iqInverted      1    wreg     unsigned char 
 24221 ;; Auto vars:     Size  Location     Type
 24222 ;;  iqInverted      1    0[BANK0 ] unsigned char 
 24223 ;; Return value:  Size  Location     Type
 24224 ;;                  1    wreg      void 
 24225 ;; Registers used:
 24226 ;;		wreg
 24227 ;; Tracked objects:
 24228 ;;		On entry : 0/0
 24229 ;;		On exit  : 0/0
 24230 ;;		Unchanged: 0/0
 24231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24232 ;;      Params:         0       0       0       0       0       0       0       0       0
 24233 ;;      Locals:         0       1       0       0       0       0       0       0       0
 24234 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24235 ;;      Totals:         0       1       0       0       0       0       0       0       0
 24236 ;;Total ram usage:        1 bytes
 24237 ;; Hardware stack levels used:    1
 24238 ;; Hardware stack levels required when called:    7
 24239 ;; This function calls:
 24240 ;;		Nothing
 24241 ;; This function is called by:
 24242 ;;		_ConfigureRadioRx
 24243 ;;		_ConfigureRadioTx
 24244 ;; This function uses a non-reentrant model
 24245 ;;
 24246                           
 24247                           	psect	text126
 24248  00618A                     __ptext126:
 24249                           	opt stack 0
 24250  00618A                     _RADIO_SetIQInverted:
 24251                           	opt stack 19
 24252                           
 24253                           ;incstack = 0
 24254                           ;RADIO_SetIQInverted@iqInverted stored from wreg
 24255  00618A  0100               	movlb	0	; () banked
 24256  00618C  6F60               	movwf	RADIO_SetIQInverted@iqInverted& (0+255),b
 24257                           
 24258                           ;radio_driver_SX1276.c: 1486: RadioConfiguration.iqInverted = iqInverted;
 24259  00618E  C060  F19F         	movff	RADIO_SetIQInverted@iqInverted,_RadioConfiguration+32
 24260  006192  0012               	return		;funcret
 24261  006194                     __end_of_RADIO_SetIQInverted:
 24262                           	opt stack 0
 24263                           tosu	equ	0xFFF
 24264                           tosh	equ	0xFFE
 24265                           tosl	equ	0xFFD
 24266                           pclath	equ	0xFFA
 24267                           tblptru	equ	0xFF8
 24268                           tblptrh	equ	0xFF7
 24269                           tblptrl	equ	0xFF6
 24270                           tablat	equ	0xFF5
 24271                           prodh	equ	0xFF4
 24272                           prodl	equ	0xFF3
 24273                           intcon	equ	0xFF2
 24274                           indf0	equ	0xFEF
 24275                           postinc0	equ	0xFEE
 24276                           plusw0	equ	0xFEB
 24277                           fsr0h	equ	0xFEA
 24278                           fsr0l	equ	0xFE9
 24279                           wreg	equ	0xFE8
 24280                           postinc1	equ	0xFE6
 24281                           postdec1	equ	0xFE5
 24282                           plusw1	equ	0xFE3
 24283                           fsr1h	equ	0xFE2
 24284                           fsr1l	equ	0xFE1
 24285                           indf2	equ	0xFDF
 24286                           postinc2	equ	0xFDE
 24287                           postdec2	equ	0xFDD
 24288                           plusw2	equ	0xFDB
 24289                           fsr2h	equ	0xFDA
 24290                           fsr2l	equ	0xFD9
 24291                           status	equ	0xFD8
 24292                           
 24293 ;; *************** function _RADIO_SetCRC *****************
 24294 ;; Defined at:
 24295 ;;		line 1474 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24296 ;; Parameters:    Size  Location     Type
 24297 ;;  crc             1    wreg     unsigned char 
 24298 ;; Auto vars:     Size  Location     Type
 24299 ;;  crc             1    0[BANK0 ] unsigned char 
 24300 ;; Return value:  Size  Location     Type
 24301 ;;                  1    wreg      void 
 24302 ;; Registers used:
 24303 ;;		wreg
 24304 ;; Tracked objects:
 24305 ;;		On entry : 0/0
 24306 ;;		On exit  : 0/0
 24307 ;;		Unchanged: 0/0
 24308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24309 ;;      Params:         0       0       0       0       0       0       0       0       0
 24310 ;;      Locals:         0       1       0       0       0       0       0       0       0
 24311 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24312 ;;      Totals:         0       1       0       0       0       0       0       0       0
 24313 ;;Total ram usage:        1 bytes
 24314 ;; Hardware stack levels used:    1
 24315 ;; Hardware stack levels required when called:    7
 24316 ;; This function calls:
 24317 ;;		Nothing
 24318 ;; This function is called by:
 24319 ;;		_ConfigureRadioRx
 24320 ;;		_ConfigureRadioTx
 24321 ;; This function uses a non-reentrant model
 24322 ;;
 24323                           
 24324                           	psect	text127
 24325  006194                     __ptext127:
 24326                           	opt stack 0
 24327  006194                     _RADIO_SetCRC:
 24328                           	opt stack 19
 24329                           
 24330                           ;incstack = 0
 24331                           ;RADIO_SetCRC@crc stored from wreg
 24332  006194  0100               	movlb	0	; () banked
 24333  006196  6F60               	movwf	RADIO_SetCRC@crc& (0+255),b
 24334                           
 24335                           ;radio_driver_SX1276.c: 1476: RadioConfiguration.crcOn = crc;
 24336  006198  C060  F19B         	movff	RADIO_SetCRC@crc,_RadioConfiguration+28
 24337  00619C  0012               	return		;funcret
 24338  00619E                     __end_of_RADIO_SetCRC:
 24339                           	opt stack 0
 24340                           tosu	equ	0xFFF
 24341                           tosh	equ	0xFFE
 24342                           tosl	equ	0xFFD
 24343                           pclath	equ	0xFFA
 24344                           tblptru	equ	0xFF8
 24345                           tblptrh	equ	0xFF7
 24346                           tblptrl	equ	0xFF6
 24347                           tablat	equ	0xFF5
 24348                           prodh	equ	0xFF4
 24349                           prodl	equ	0xFF3
 24350                           intcon	equ	0xFF2
 24351                           indf0	equ	0xFEF
 24352                           postinc0	equ	0xFEE
 24353                           plusw0	equ	0xFEB
 24354                           fsr0h	equ	0xFEA
 24355                           fsr0l	equ	0xFE9
 24356                           wreg	equ	0xFE8
 24357                           postinc1	equ	0xFE6
 24358                           postdec1	equ	0xFE5
 24359                           plusw1	equ	0xFE3
 24360                           fsr1h	equ	0xFE2
 24361                           fsr1l	equ	0xFE1
 24362                           indf2	equ	0xFDF
 24363                           postinc2	equ	0xFDE
 24364                           postdec2	equ	0xFDD
 24365                           plusw2	equ	0xFDB
 24366                           fsr2h	equ	0xFDA
 24367                           fsr2l	equ	0xFD9
 24368                           status	equ	0xFD8
 24369                           
 24370 ;; *************** function _ConfigureRadio *****************
 24371 ;; Defined at:
 24372 ;;		line 863 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 24373 ;; Parameters:    Size  Location     Type
 24374 ;;  dataRate        1    wreg     unsigned char 
 24375 ;;  freq            4   13[BANK0 ] unsigned long 
 24376 ;; Auto vars:     Size  Location     Type
 24377 ;;  dataRate        1   17[BANK0 ] unsigned char 
 24378 ;; Return value:  Size  Location     Type
 24379 ;;                  1    wreg      void 
 24380 ;; Registers used:
 24381 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24382 ;; Tracked objects:
 24383 ;;		On entry : 3F/0
 24384 ;;		On exit  : 0/0
 24385 ;;		Unchanged: 0/0
 24386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24387 ;;      Params:         0       4       0       0       0       0       0       0       0
 24388 ;;      Locals:         0       1       0       0       0       0       0       0       0
 24389 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24390 ;;      Totals:         0       5       0       0       0       0       0       0       0
 24391 ;;Total ram usage:        5 bytes
 24392 ;; Hardware stack levels used:    1
 24393 ;; Hardware stack levels required when called:    9
 24394 ;; This function calls:
 24395 ;;		_RADIO_SetBandwidth
 24396 ;;		_RADIO_SetChannelFrequency
 24397 ;;		_RADIO_SetFSKSyncWord
 24398 ;;		_RADIO_SetFrequencyHopPeriod
 24399 ;;		_RADIO_SetLoRaSyncWord
 24400 ;;		_RADIO_SetModulation
 24401 ;;		_RADIO_SetSpreadingFactor
 24402 ;; This function is called by:
 24403 ;;		_ConfigureRadioRx
 24404 ;;		_ConfigureRadioTx
 24405 ;; This function uses a non-reentrant model
 24406 ;;
 24407                           
 24408                           	psect	text128
 24409  0049C0                     __ptext128:
 24410                           	opt stack 0
 24411  0049C0                     _ConfigureRadio:
 24412                           	opt stack 17
 24413                           
 24414                           ;incstack = 0
 24415                           ;ConfigureRadio@dataRate stored from wreg
 24416  0049C0  6F71               	movwf	ConfigureRadio@dataRate& (0+255),b
 24417                           
 24418                           ;lorawan_eu.c: 865: RADIO_SetModulation (modulation[dataRate]);
 24419  0049C2  0E6D               	movlw	low _modulation
 24420  0049C4  D82F               	call	PL424	;call to abstracted procedure
 24421  0049C6  0E7F               	movlw	high _modulation
 24422  0049C8  D832               	call	PL434	;call to abstracted procedure
 24423  0049CA  ECF2  F030         	call	_RADIO_SetModulation
 24424                           
 24425                           ;lorawan_eu.c: 866: RADIO_SetChannelFrequency (freq);
 24426  0049CE  C06D  F060         	movff	ConfigureRadio@freq,RADIO_SetChannelFrequency@frequency
 24427  0049D2  C06E  F061         	movff	ConfigureRadio@freq+1,RADIO_SetChannelFrequency@frequency+1
 24428  0049D6  C06F  F062         	movff	ConfigureRadio@freq+2,RADIO_SetChannelFrequency@frequency+2
 24429  0049DA  C070  F063         	movff	ConfigureRadio@freq+3,RADIO_SetChannelFrequency@frequency+3
 24430  0049DE  ECEB  F023         	call	_RADIO_SetChannelFrequency	;wreg free
 24431                           
 24432                           ; BSR set to: 0
 24433                           ;lorawan_eu.c: 867: RADIO_SetFrequencyHopPeriod (0);
 24434  0049E2  0E00               	movlw	0
 24435  0049E4  6B61               	clrf	(RADIO_SetFrequencyHopPeriod@frequencyHopPeriod+1)& (0+255),b
 24436  0049E6  6B60               	clrf	RADIO_SetFrequencyHopPeriod@frequencyHopPeriod& (0+255),b
 24437  0049E8  ECCF  F030         	call	_RADIO_SetFrequencyHopPeriod	;wreg free
 24438                           
 24439                           ; BSR set to: 0
 24440                           ;lorawan_eu.c: 869: if (dataRate <= 6)
 24441  0049EC  0E07               	movlw	7
 24442  0049EE  6171               	cpfslt	ConfigureRadio@dataRate& (0+255),b
 24443  0049F0  D012               	goto	l12468
 24444                           
 24445                           ; BSR set to: 0
 24446                           ;lorawan_eu.c: 870: {
 24447                           ;lorawan_eu.c: 872: RADIO_SetSpreadingFactor (spreadingFactor[dataRate]);
 24448  0049F2  0E94               	movlw	low _spreadingFactor
 24449  0049F4  2571               	addwf	ConfigureRadio@dataRate& (0+255),w,b
 24450  0049F6  6EF6               	movwf	tblptrl,c
 24451  0049F8  6AF7               	clrf	tblptrh,c
 24452  0049FA  0E7F               	movlw	high _spreadingFactor
 24453  0049FC  D818               	call	PL434	;call to abstracted procedure
 24454  0049FE  ECEE  F030         	call	_RADIO_SetSpreadingFactor
 24455                           
 24456                           ;lorawan_eu.c: 873: RADIO_SetBandwidth (bandwidth[dataRate]);
 24457  004A02  0E8D               	movlw	low _bandwidth
 24458  004A04  D80F               	call	PL424	;call to abstracted procedure
 24459  004A06  0E7F               	movlw	high _bandwidth
 24460  004A08  D812               	call	PL434	;call to abstracted procedure
 24461  004A0A  ECF6  F030         	call	_RADIO_SetBandwidth
 24462                           
 24463                           ;lorawan_eu.c: 874: RADIO_SetLoRaSyncWord(loRa.syncWord);
 24464  004A0E  0102               	movlb	2	; () banked
 24465  004A10  51F4               	movf	(_loRa+244)& (0+255),w,b
 24466  004A12  EFD4  F030         	goto	_RADIO_SetLoRaSyncWord
 24467  004A16                     l12468:
 24468                           
 24469                           ; BSR set to: 0
 24470                           ;lorawan_eu.c: 876: else
 24471                           ;lorawan_eu.c: 877: {
 24472                           ;lorawan_eu.c: 879: RADIO_SetFSKSyncWord(sizeof(FskSyncWordBuff) / sizeof(FskSyncWordBuf
      +                          f[0]), (uint8_t*)FskSyncWordBuff);
 24473  004A16  0EFC               	movlw	low _FskSyncWordBuff
 24474  004A18  6F6A               	movwf	RADIO_SetFSKSyncWord@syncWord& (0+255),b
 24475  004A1A  0E7F               	movlw	high _FskSyncWordBuff
 24476  004A1C  6F6B               	movwf	(RADIO_SetFSKSyncWord@syncWord+1)& (0+255),b
 24477  004A1E  0E03               	movlw	3
 24478  004A20  EF98  F02D         	goto	_RADIO_SetFSKSyncWord
 24479  004A24                     __end_of_ConfigureRadio:
 24480                           	opt stack 0
 24481  004A24                     PL424:
 24482                           	opt stack 17
 24483  004A24  0100               	movlb	0	; () banked
 24484  004A26  2571               	addwf	ConfigureRadio@dataRate& (0+255),w,b
 24485  004A28  6EF6               	movwf	tblptrl,c
 24486  004A2A  6AF7               	clrf	tblptrh,c
 24487  004A2C  0012               	return	
 24488  004A2E                     __end_ofPL424:
 24489                           	opt stack 0
 24490  004A2E                     PL434:
 24491                           	opt stack 17
 24492  004A2E  22F7               	addwfc	tblptrh,f,c
 24493  004A30                     	if	0	;There are less than 3 active tblptr bytes
 24494  004A30                     	endif
 24495  004A30  0008               	tblrd		*
 24496  004A32  50F5               	movf	tablat,w,c
 24497  004A34  0012               	return	
 24498  004A36                     __end_ofPL434:
 24499                           	opt stack 0
 24500                           tosu	equ	0xFFF
 24501                           tosh	equ	0xFFE
 24502                           tosl	equ	0xFFD
 24503                           pclath	equ	0xFFA
 24504                           tblptru	equ	0xFF8
 24505                           tblptrh	equ	0xFF7
 24506                           tblptrl	equ	0xFF6
 24507                           tablat	equ	0xFF5
 24508                           prodh	equ	0xFF4
 24509                           prodl	equ	0xFF3
 24510                           intcon	equ	0xFF2
 24511                           indf0	equ	0xFEF
 24512                           postinc0	equ	0xFEE
 24513                           plusw0	equ	0xFEB
 24514                           fsr0h	equ	0xFEA
 24515                           fsr0l	equ	0xFE9
 24516                           wreg	equ	0xFE8
 24517                           postinc1	equ	0xFE6
 24518                           postdec1	equ	0xFE5
 24519                           plusw1	equ	0xFE3
 24520                           fsr1h	equ	0xFE2
 24521                           fsr1l	equ	0xFE1
 24522                           indf2	equ	0xFDF
 24523                           postinc2	equ	0xFDE
 24524                           postdec2	equ	0xFDD
 24525                           plusw2	equ	0xFDB
 24526                           fsr2h	equ	0xFDA
 24527                           fsr2l	equ	0xFD9
 24528                           status	equ	0xFD8
 24529                           
 24530 ;; *************** function _RADIO_SetSpreadingFactor *****************
 24531 ;; Defined at:
 24532 ;;		line 1434 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24533 ;; Parameters:    Size  Location     Type
 24534 ;;  spreadingFac    1    wreg     enum E17158
 24535 ;; Auto vars:     Size  Location     Type
 24536 ;;  spreadingFac    1    0[BANK0 ] enum E17158
 24537 ;; Return value:  Size  Location     Type
 24538 ;;                  1    wreg      void 
 24539 ;; Registers used:
 24540 ;;		wreg
 24541 ;; Tracked objects:
 24542 ;;		On entry : 3F/0
 24543 ;;		On exit  : 0/0
 24544 ;;		Unchanged: 0/0
 24545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24546 ;;      Params:         0       0       0       0       0       0       0       0       0
 24547 ;;      Locals:         0       1       0       0       0       0       0       0       0
 24548 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24549 ;;      Totals:         0       1       0       0       0       0       0       0       0
 24550 ;;Total ram usage:        1 bytes
 24551 ;; Hardware stack levels used:    1
 24552 ;; Hardware stack levels required when called:    7
 24553 ;; This function calls:
 24554 ;;		Nothing
 24555 ;; This function is called by:
 24556 ;;		_ConfigureRadio
 24557 ;; This function uses a non-reentrant model
 24558 ;;
 24559                           
 24560                           	psect	text129
 24561  0061DC                     __ptext129:
 24562                           	opt stack 0
 24563  0061DC                     _RADIO_SetSpreadingFactor:
 24564                           	opt stack 18
 24565                           
 24566                           ;incstack = 0
 24567                           ;RADIO_SetSpreadingFactor@spreadingFactor stored from wreg
 24568  0061DC  6F60               	movwf	RADIO_SetSpreadingFactor@spreadingFactor& (0+255),b
 24569                           
 24570                           ;radio_driver_SX1276.c: 1436: RadioConfiguration.dataRate = spreadingFactor;
 24571  0061DE  C060  F198         	movff	RADIO_SetSpreadingFactor@spreadingFactor,_RadioConfiguration+25
 24572  0061E2  0012               	return		;funcret
 24573  0061E4                     __end_of_RADIO_SetSpreadingFactor:
 24574                           	opt stack 0
 24575                           tosu	equ	0xFFF
 24576                           tosh	equ	0xFFE
 24577                           tosl	equ	0xFFD
 24578                           pclath	equ	0xFFA
 24579                           tblptru	equ	0xFF8
 24580                           tblptrh	equ	0xFF7
 24581                           tblptrl	equ	0xFF6
 24582                           tablat	equ	0xFF5
 24583                           prodh	equ	0xFF4
 24584                           prodl	equ	0xFF3
 24585                           intcon	equ	0xFF2
 24586                           indf0	equ	0xFEF
 24587                           postinc0	equ	0xFEE
 24588                           plusw0	equ	0xFEB
 24589                           fsr0h	equ	0xFEA
 24590                           fsr0l	equ	0xFE9
 24591                           wreg	equ	0xFE8
 24592                           postinc1	equ	0xFE6
 24593                           postdec1	equ	0xFE5
 24594                           plusw1	equ	0xFE3
 24595                           fsr1h	equ	0xFE2
 24596                           fsr1l	equ	0xFE1
 24597                           indf2	equ	0xFDF
 24598                           postinc2	equ	0xFDE
 24599                           postdec2	equ	0xFDD
 24600                           plusw2	equ	0xFDB
 24601                           fsr2h	equ	0xFDA
 24602                           fsr2l	equ	0xFD9
 24603                           status	equ	0xFD8
 24604                           
 24605 ;; *************** function _RADIO_SetModulation *****************
 24606 ;; Defined at:
 24607 ;;		line 1515 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24608 ;; Parameters:    Size  Location     Type
 24609 ;;  modulation      1    wreg     enum E17148
 24610 ;; Auto vars:     Size  Location     Type
 24611 ;;  modulation      1    0[BANK0 ] enum E17148
 24612 ;; Return value:  Size  Location     Type
 24613 ;;                  1    wreg      void 
 24614 ;; Registers used:
 24615 ;;		wreg
 24616 ;; Tracked objects:
 24617 ;;		On entry : 3F/0
 24618 ;;		On exit  : 0/0
 24619 ;;		Unchanged: 0/0
 24620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24621 ;;      Params:         0       0       0       0       0       0       0       0       0
 24622 ;;      Locals:         0       1       0       0       0       0       0       0       0
 24623 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24624 ;;      Totals:         0       1       0       0       0       0       0       0       0
 24625 ;;Total ram usage:        1 bytes
 24626 ;; Hardware stack levels used:    1
 24627 ;; Hardware stack levels required when called:    7
 24628 ;; This function calls:
 24629 ;;		Nothing
 24630 ;; This function is called by:
 24631 ;;		_ConfigureRadio
 24632 ;; This function uses a non-reentrant model
 24633 ;;
 24634                           
 24635                           	psect	text130
 24636  0061E4                     __ptext130:
 24637                           	opt stack 0
 24638  0061E4                     _RADIO_SetModulation:
 24639                           	opt stack 18
 24640                           
 24641                           ;incstack = 0
 24642                           ;RADIO_SetModulation@modulation stored from wreg
 24643  0061E4  6F60               	movwf	RADIO_SetModulation@modulation& (0+255),b
 24644                           
 24645                           ;radio_driver_SX1276.c: 1517: RadioConfiguration.modulation = modulation;
 24646  0061E6  C060  F197         	movff	RADIO_SetModulation@modulation,_RadioConfiguration+24
 24647  0061EA  0012               	return		;funcret
 24648  0061EC                     __end_of_RADIO_SetModulation:
 24649                           	opt stack 0
 24650                           tosu	equ	0xFFF
 24651                           tosh	equ	0xFFE
 24652                           tosl	equ	0xFFD
 24653                           pclath	equ	0xFFA
 24654                           tblptru	equ	0xFF8
 24655                           tblptrh	equ	0xFF7
 24656                           tblptrl	equ	0xFF6
 24657                           tablat	equ	0xFF5
 24658                           prodh	equ	0xFF4
 24659                           prodl	equ	0xFF3
 24660                           intcon	equ	0xFF2
 24661                           indf0	equ	0xFEF
 24662                           postinc0	equ	0xFEE
 24663                           plusw0	equ	0xFEB
 24664                           fsr0h	equ	0xFEA
 24665                           fsr0l	equ	0xFE9
 24666                           wreg	equ	0xFE8
 24667                           postinc1	equ	0xFE6
 24668                           postdec1	equ	0xFE5
 24669                           plusw1	equ	0xFE3
 24670                           fsr1h	equ	0xFE2
 24671                           fsr1l	equ	0xFE1
 24672                           indf2	equ	0xFDF
 24673                           postinc2	equ	0xFDE
 24674                           postdec2	equ	0xFDD
 24675                           plusw2	equ	0xFDB
 24676                           fsr2h	equ	0xFDA
 24677                           fsr2l	equ	0xFD9
 24678                           status	equ	0xFD8
 24679                           
 24680 ;; *************** function _RADIO_SetFrequencyHopPeriod *****************
 24681 ;; Defined at:
 24682 ;;		line 1550 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24683 ;; Parameters:    Size  Location     Type
 24684 ;;  frequencyHop    2    0[BANK0 ] unsigned int 
 24685 ;; Auto vars:     Size  Location     Type
 24686 ;;		None
 24687 ;; Return value:  Size  Location     Type
 24688 ;;                  1    wreg      void 
 24689 ;; Registers used:
 24690 ;;		None
 24691 ;; Tracked objects:
 24692 ;;		On entry : 3F/0
 24693 ;;		On exit  : 3F/0
 24694 ;;		Unchanged: 3F/0
 24695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24696 ;;      Params:         0       2       0       0       0       0       0       0       0
 24697 ;;      Locals:         0       0       0       0       0       0       0       0       0
 24698 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24699 ;;      Totals:         0       2       0       0       0       0       0       0       0
 24700 ;;Total ram usage:        2 bytes
 24701 ;; Hardware stack levels used:    1
 24702 ;; Hardware stack levels required when called:    7
 24703 ;; This function calls:
 24704 ;;		Nothing
 24705 ;; This function is called by:
 24706 ;;		_ConfigureRadio
 24707 ;; This function uses a non-reentrant model
 24708 ;;
 24709                           
 24710                           	psect	text131
 24711  00619E                     __ptext131:
 24712                           	opt stack 0
 24713  00619E                     _RADIO_SetFrequencyHopPeriod:
 24714                           	opt stack 18
 24715                           
 24716                           ; BSR set to: 0
 24717                           ;radio_driver_SX1276.c: 1552: RadioConfiguration.frequencyHopPeriod = frequencyHopPeriod
      +                          ;
 24718                           
 24719                           ;incstack = 0
 24720  00619E  C060  F19D         	movff	RADIO_SetFrequencyHopPeriod@frequencyHopPeriod,_RadioConfiguration+30
 24721  0061A2  C061  F19E         	movff	RADIO_SetFrequencyHopPeriod@frequencyHopPeriod+1,_RadioConfiguration+31
 24722                           
 24723                           ; BSR set to: 0
 24724  0061A6  0012               	return		;funcret
 24725  0061A8                     __end_of_RADIO_SetFrequencyHopPeriod:
 24726                           	opt stack 0
 24727                           tosu	equ	0xFFF
 24728                           tosh	equ	0xFFE
 24729                           tosl	equ	0xFFD
 24730                           pclath	equ	0xFFA
 24731                           tblptru	equ	0xFF8
 24732                           tblptrh	equ	0xFF7
 24733                           tblptrl	equ	0xFF6
 24734                           tablat	equ	0xFF5
 24735                           prodh	equ	0xFF4
 24736                           prodl	equ	0xFF3
 24737                           intcon	equ	0xFF2
 24738                           indf0	equ	0xFEF
 24739                           postinc0	equ	0xFEE
 24740                           plusw0	equ	0xFEB
 24741                           fsr0h	equ	0xFEA
 24742                           fsr0l	equ	0xFE9
 24743                           wreg	equ	0xFE8
 24744                           postinc1	equ	0xFE6
 24745                           postdec1	equ	0xFE5
 24746                           plusw1	equ	0xFE3
 24747                           fsr1h	equ	0xFE2
 24748                           fsr1l	equ	0xFE1
 24749                           indf2	equ	0xFDF
 24750                           postinc2	equ	0xFDE
 24751                           postdec2	equ	0xFDD
 24752                           plusw2	equ	0xFDB
 24753                           fsr2h	equ	0xFDA
 24754                           fsr2l	equ	0xFD9
 24755                           status	equ	0xFD8
 24756                           
 24757 ;; *************** function _RADIO_SetFSKSyncWord *****************
 24758 ;; Defined at:
 24759 ;;		line 1624 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24760 ;; Parameters:    Size  Location     Type
 24761 ;;  syncWordLen     1    wreg     unsigned char 
 24762 ;;  syncWord        2   10[BANK0 ] PTR unsigned char 
 24763 ;;		 -> FskSyncWordBuff(3), 
 24764 ;; Auto vars:     Size  Location     Type
 24765 ;;  syncWordLen     1   12[BANK0 ] unsigned char 
 24766 ;; Return value:  Size  Location     Type
 24767 ;;                  1    wreg      void 
 24768 ;; Registers used:
 24769 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24770 ;; Tracked objects:
 24771 ;;		On entry : 3F/0
 24772 ;;		On exit  : 3F/0
 24773 ;;		Unchanged: 0/0
 24774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24775 ;;      Params:         0       2       0       0       0       0       0       0       0
 24776 ;;      Locals:         0       1       0       0       0       0       0       0       0
 24777 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24778 ;;      Totals:         0       3       0       0       0       0       0       0       0
 24779 ;;Total ram usage:        3 bytes
 24780 ;; Hardware stack levels used:    1
 24781 ;; Hardware stack levels required when called:    8
 24782 ;; This function calls:
 24783 ;;		_memcpy
 24784 ;; This function is called by:
 24785 ;;		_ConfigureRadio
 24786 ;; This function uses a non-reentrant model
 24787 ;;
 24788                           
 24789                           	psect	text132
 24790  005B30                     __ptext132:
 24791                           	opt stack 0
 24792  005B30                     _RADIO_SetFSKSyncWord:
 24793                           	opt stack 17
 24794                           
 24795                           ; BSR set to: 0
 24796                           ;incstack = 0
 24797                           ;RADIO_SetFSKSyncWord@syncWordLen stored from wreg
 24798  005B30  6F6C               	movwf	RADIO_SetFSKSyncWord@syncWordLen& (0+255),b
 24799                           
 24800                           ;radio_driver_SX1276.c: 1626: if (syncWordLen > 8)
 24801  005B32  0E08               	movlw	8
 24802  005B34  0100               	movlb	0	; () banked
 24803  005B36  656C               	cpfsgt	RADIO_SetFSKSyncWord@syncWordLen& (0+255),b
 24804  005B38  D001               	goto	l12182
 24805                           
 24806                           ; BSR set to: 0
 24807                           ;radio_driver_SX1276.c: 1627: {
 24808                           ;radio_driver_SX1276.c: 1628: syncWordLen = 8;
 24809  005B3A  6F6C               	movwf	RADIO_SetFSKSyncWord@syncWordLen& (0+255),b
 24810  005B3C                     l12182:
 24811                           
 24812                           ; BSR set to: 0
 24813                           ;radio_driver_SX1276.c: 1629: }
 24814                           ;radio_driver_SX1276.c: 1630: memcpy(RadioConfiguration.syncWord, syncWord, syncWordLen)
      +                          ;
 24815  005B3C  0E8E               	movlw	low (_RadioConfiguration+15)
 24816  005B3E  6F60               	movwf	memcpy@d1& (0+255),b
 24817  005B40  0E01               	movlw	high (_RadioConfiguration+15)
 24818  005B42  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 24819  005B44  C06A  F062         	movff	RADIO_SetFSKSyncWord@syncWord,memcpy@s1
 24820  005B48  C06B  F063         	movff	RADIO_SetFSKSyncWord@syncWord+1,memcpy@s1+1
 24821  005B4C  C06C  F064         	movff	RADIO_SetFSKSyncWord@syncWordLen,memcpy@n
 24822  005B50  6B65               	clrf	(memcpy@n+1)& (0+255),b
 24823  005B52  EC94  F028         	call	_memcpy	;wreg free
 24824                           
 24825                           ; BSR set to: 0
 24826                           ;radio_driver_SX1276.c: 1631: RadioConfiguration.syncWordLen = syncWordLen;
 24827  005B56  C06C  F196         	movff	RADIO_SetFSKSyncWord@syncWordLen,_RadioConfiguration+23
 24828                           
 24829                           ; BSR set to: 0
 24830  005B5A  0012               	return		;funcret
 24831  005B5C                     __end_of_RADIO_SetFSKSyncWord:
 24832                           	opt stack 0
 24833                           tosu	equ	0xFFF
 24834                           tosh	equ	0xFFE
 24835                           tosl	equ	0xFFD
 24836                           pclath	equ	0xFFA
 24837                           tblptru	equ	0xFF8
 24838                           tblptrh	equ	0xFF7
 24839                           tblptrl	equ	0xFF6
 24840                           tablat	equ	0xFF5
 24841                           prodh	equ	0xFF4
 24842                           prodl	equ	0xFF3
 24843                           intcon	equ	0xFF2
 24844                           indf0	equ	0xFEF
 24845                           postinc0	equ	0xFEE
 24846                           plusw0	equ	0xFEB
 24847                           fsr0h	equ	0xFEA
 24848                           fsr0l	equ	0xFE9
 24849                           wreg	equ	0xFE8
 24850                           postinc1	equ	0xFE6
 24851                           postdec1	equ	0xFE5
 24852                           plusw1	equ	0xFE3
 24853                           fsr1h	equ	0xFE2
 24854                           fsr1l	equ	0xFE1
 24855                           indf2	equ	0xFDF
 24856                           postinc2	equ	0xFDE
 24857                           postdec2	equ	0xFDD
 24858                           plusw2	equ	0xFDB
 24859                           fsr2h	equ	0xFDA
 24860                           fsr2l	equ	0xFD9
 24861                           status	equ	0xFD8
 24862                           
 24863 ;; *************** function _RADIO_SetChannelFrequency *****************
 24864 ;; Defined at:
 24865 ;;		line 1444 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24866 ;; Parameters:    Size  Location     Type
 24867 ;;  frequency       4    0[BANK0 ] unsigned long 
 24868 ;; Auto vars:     Size  Location     Type
 24869 ;;		None
 24870 ;; Return value:  Size  Location     Type
 24871 ;;                  2    0[BANK0 ] enum E17954
 24872 ;; Registers used:
 24873 ;;		wreg, status,2, status,0
 24874 ;; Tracked objects:
 24875 ;;		On entry : 0/0
 24876 ;;		On exit  : 3F/0
 24877 ;;		Unchanged: 0/0
 24878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24879 ;;      Params:         0       4       0       0       0       0       0       0       0
 24880 ;;      Locals:         0       0       0       0       0       0       0       0       0
 24881 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24882 ;;      Totals:         0       4       0       0       0       0       0       0       0
 24883 ;;Total ram usage:        4 bytes
 24884 ;; Hardware stack levels used:    1
 24885 ;; Hardware stack levels required when called:    7
 24886 ;; This function calls:
 24887 ;;		Nothing
 24888 ;; This function is called by:
 24889 ;;		_ConfigureRadio
 24890 ;; This function uses a non-reentrant model
 24891 ;;
 24892                           
 24893                           	psect	text133
 24894  0047D6                     __ptext133:
 24895                           	opt stack 0
 24896  0047D6                     _RADIO_SetChannelFrequency:
 24897                           	opt stack 18
 24898                           
 24899                           ;radio_driver_SX1276.c: 1446: if ( (frequency >= 137000000) && (frequency <= 175000000) 
      +                          ||
 24900                           ;radio_driver_SX1276.c: 1447: (frequency >= 410000000) && (frequency <= 525000000) ||
 24901                           ;radio_driver_SX1276.c: 1448: (frequency >= 862000000) && (frequency <= 1020000000) )
 24902                           
 24903                           ; BSR set to: 0
 24904                           ;incstack = 0
 24905  0047D6  0E40               	movlw	64
 24906  0047D8  0100               	movlb	0	; () banked
 24907  0047DA  5D60               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 24908  0047DC  0E74               	movlw	116
 24909  0047DE  5961               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 24910  0047E0  0E2A               	movlw	42
 24911  0047E2  5962               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 24912  0047E4  0E08               	movlw	8
 24913  0047E6  5963               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 24914  0047E8  E309               	bnc	l12162
 24915                           
 24916                           ; BSR set to: 0
 24917  0047EA  0EC1               	movlw	193
 24918  0047EC  5D60               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 24919  0047EE  0E49               	movlw	73
 24920  0047F0  5961               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 24921  0047F2  0E6E               	movlw	110
 24922  0047F4  5962               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 24923  0047F6  0E0A               	movlw	10
 24924  0047F8  5963               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 24925  0047FA  E325               	bnc	l2402
 24926  0047FC                     l12162:
 24927                           
 24928                           ; BSR set to: 0
 24929  0047FC  0E80               	movlw	128
 24930  0047FE  5D60               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 24931  004800  0E1A               	movlw	26
 24932  004802  5961               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 24933  004804  0E70               	movlw	112
 24934  004806  5962               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 24935  004808  0E18               	movlw	24
 24936  00480A  5963               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 24937  00480C  E309               	bnc	l12166
 24938                           
 24939                           ; BSR set to: 0
 24940  00480E  0E41               	movlw	65
 24941  004810  5D60               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 24942  004812  0EDD               	movlw	221
 24943  004814  5961               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 24944  004816  0E4A               	movlw	74
 24945  004818  5962               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 24946  00481A  0E1F               	movlw	31
 24947  00481C  5963               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 24948  00481E  E313               	bnc	l2402
 24949  004820                     l12166:
 24950                           
 24951                           ; BSR set to: 0
 24952  004820  0E80               	movlw	128
 24953  004822  5D60               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 24954  004824  0E13               	movlw	19
 24955  004826  5961               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 24956  004828  0E61               	movlw	97
 24957  00482A  5962               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 24958  00482C  0E33               	movlw	51
 24959  00482E  5963               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 24960  004830  A0D8               	btfss	status,0,c
 24961  004832  0012               	return	
 24962                           
 24963                           ; BSR set to: 0
 24964  004834  0560               	decf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 24965  004836  0EF7               	movlw	247
 24966  004838  5961               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 24967  00483A  0ECB               	movlw	203
 24968  00483C  5962               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 24969  00483E  0E3C               	movlw	60
 24970  004840  5963               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 24971  004842  B0D8               	btfsc	status,0,c
 24972  004844  0012               	return	
 24973  004846                     l2402:
 24974                           
 24975                           ; BSR set to: 0
 24976                           ;radio_driver_SX1276.c: 1449: {
 24977                           ;radio_driver_SX1276.c: 1450: RadioConfiguration.frequency = frequency;
 24978  004846  C060  F17F         	movff	RADIO_SetChannelFrequency@frequency,_RadioConfiguration
 24979  00484A  C061  F180         	movff	RADIO_SetChannelFrequency@frequency+1,_RadioConfiguration+1
 24980  00484E  C062  F181         	movff	RADIO_SetChannelFrequency@frequency+2,_RadioConfiguration+2
 24981  004852  C063  F182         	movff	RADIO_SetChannelFrequency@frequency+3,_RadioConfiguration+3
 24982                           
 24983                           ; BSR set to: 0
 24984                           
 24985                           ;radio_driver_SX1276.c: 1451: return ERR_NONE;
 24986                           ;	Return value of _RADIO_SetChannelFrequency is never used
 24987  004856  0012               	return		;funcret
 24988  004858                     __end_of_RADIO_SetChannelFrequency:
 24989                           	opt stack 0
 24990                           tosu	equ	0xFFF
 24991                           tosh	equ	0xFFE
 24992                           tosl	equ	0xFFD
 24993                           pclath	equ	0xFFA
 24994                           tblptru	equ	0xFF8
 24995                           tblptrh	equ	0xFF7
 24996                           tblptrl	equ	0xFF6
 24997                           tablat	equ	0xFF5
 24998                           prodh	equ	0xFF4
 24999                           prodl	equ	0xFF3
 25000                           intcon	equ	0xFF2
 25001                           indf0	equ	0xFEF
 25002                           postinc0	equ	0xFEE
 25003                           plusw0	equ	0xFEB
 25004                           fsr0h	equ	0xFEA
 25005                           fsr0l	equ	0xFE9
 25006                           wreg	equ	0xFE8
 25007                           postinc1	equ	0xFE6
 25008                           postdec1	equ	0xFE5
 25009                           plusw1	equ	0xFE3
 25010                           fsr1h	equ	0xFE2
 25011                           fsr1l	equ	0xFE1
 25012                           indf2	equ	0xFDF
 25013                           postinc2	equ	0xFDE
 25014                           postdec2	equ	0xFDD
 25015                           plusw2	equ	0xFDB
 25016                           fsr2h	equ	0xFDA
 25017                           fsr2l	equ	0xFD9
 25018                           status	equ	0xFD8
 25019                           
 25020 ;; *************** function _RADIO_SetBandwidth *****************
 25021 ;; Defined at:
 25022 ;;		line 1495 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 25023 ;; Parameters:    Size  Location     Type
 25024 ;;  bandwidth       1    wreg     enum E17166
 25025 ;; Auto vars:     Size  Location     Type
 25026 ;;  bandwidth       1    0[BANK0 ] enum E17166
 25027 ;; Return value:  Size  Location     Type
 25028 ;;                  1    wreg      void 
 25029 ;; Registers used:
 25030 ;;		wreg
 25031 ;; Tracked objects:
 25032 ;;		On entry : 3F/0
 25033 ;;		On exit  : 0/0
 25034 ;;		Unchanged: 0/0
 25035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25036 ;;      Params:         0       0       0       0       0       0       0       0       0
 25037 ;;      Locals:         0       1       0       0       0       0       0       0       0
 25038 ;;      Temps:          0       0       0       0       0       0       0       0       0
 25039 ;;      Totals:         0       1       0       0       0       0       0       0       0
 25040 ;;Total ram usage:        1 bytes
 25041 ;; Hardware stack levels used:    1
 25042 ;; Hardware stack levels required when called:    7
 25043 ;; This function calls:
 25044 ;;		Nothing
 25045 ;; This function is called by:
 25046 ;;		_ConfigureRadio
 25047 ;; This function uses a non-reentrant model
 25048 ;;
 25049                           
 25050                           	psect	text134
 25051  0061EC                     __ptext134:
 25052                           	opt stack 0
 25053  0061EC                     _RADIO_SetBandwidth:
 25054                           	opt stack 18
 25055                           
 25056                           ; BSR set to: 0
 25057                           ;incstack = 0
 25058                           ;RADIO_SetBandwidth@bandwidth stored from wreg
 25059  0061EC  6F60               	movwf	RADIO_SetBandwidth@bandwidth& (0+255),b
 25060                           
 25061                           ;radio_driver_SX1276.c: 1497: RadioConfiguration.bandWidth = bandwidth;
 25062  0061EE  C060  F199         	movff	RADIO_SetBandwidth@bandwidth,_RadioConfiguration+26
 25063  0061F2  0012               	return		;funcret
 25064  0061F4                     __end_of_RADIO_SetBandwidth:
 25065                           	opt stack 0
 25066                           tosu	equ	0xFFF
 25067                           tosh	equ	0xFFE
 25068                           tosl	equ	0xFFD
 25069                           pclath	equ	0xFFA
 25070                           tblptru	equ	0xFF8
 25071                           tblptrh	equ	0xFF7
 25072                           tblptrl	equ	0xFF6
 25073                           tablat	equ	0xFF5
 25074                           prodh	equ	0xFF4
 25075                           prodl	equ	0xFF3
 25076                           intcon	equ	0xFF2
 25077                           indf0	equ	0xFEF
 25078                           postinc0	equ	0xFEE
 25079                           plusw0	equ	0xFEB
 25080                           fsr0h	equ	0xFEA
 25081                           fsr0l	equ	0xFE9
 25082                           wreg	equ	0xFE8
 25083                           postinc1	equ	0xFE6
 25084                           postdec1	equ	0xFE5
 25085                           plusw1	equ	0xFE3
 25086                           fsr1h	equ	0xFE2
 25087                           fsr1l	equ	0xFE1
 25088                           indf2	equ	0xFDF
 25089                           postinc2	equ	0xFDE
 25090                           postdec2	equ	0xFDD
 25091                           plusw2	equ	0xFDB
 25092                           fsr2h	equ	0xFDA
 25093                           fsr2l	equ	0xFD9
 25094                           status	equ	0xFD8
 25095                           
 25096 ;; *************** function _RADIO_Transmit *****************
 25097 ;; Defined at:
 25098 ;;		line 786 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 25099 ;; Parameters:    Size  Location     Type
 25100 ;;  buffer          2   70[BANK0 ] PTR unsigned char 
 25101 ;;		 -> macBuffer(271), 
 25102 ;;  bufferLen       1   72[BANK0 ] unsigned char 
 25103 ;; Auto vars:     Size  Location     Type
 25104 ;;  i               1   86[BANK0 ] unsigned char 
 25105 ;;  regValue        1   85[BANK0 ] unsigned char 
 25106 ;; Return value:  Size  Location     Type
 25107 ;;                  2   70[BANK0 ] enum E17895
 25108 ;; Registers used:
 25109 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25110 ;; Tracked objects:
 25111 ;;		On entry : 3F/0
 25112 ;;		On exit  : 3F/0
 25113 ;;		Unchanged: 0/0
 25114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25115 ;;      Params:         0       3       0       0       0       0       0       0       0
 25116 ;;      Locals:         0      10       0       0       0       0       0       0       0
 25117 ;;      Temps:          0       4       0       0       0       0       0       0       0
 25118 ;;      Totals:         0      17       0       0       0       0       0       0       0
 25119 ;;Total ram usage:       17 bytes
 25120 ;; Hardware stack levels used:    1
 25121 ;; Hardware stack levels required when called:   12
 25122 ;; This function calls:
 25123 ;;		_HALSPICSAssert
 25124 ;;		_HALSPICSDeassert
 25125 ;;		_HALSPISend
 25126 ;;		_RADIO_RegisterRead
 25127 ;;		_RADIO_RegisterWrite
 25128 ;;		_RADIO_WriteConfiguration
 25129 ;;		_RADIO_WriteMode
 25130 ;;		_SwTimerSetTimeout
 25131 ;;		_SwTimerStart
 25132 ;;		_SwTimerStop
 25133 ;;		___lldiv
 25134 ;; This function is called by:
 25135 ;;		_LORAWAN_Join
 25136 ;;		_LORAWAN_Send
 25137 ;;		_AckRetransmissionCallback
 25138 ;;		_UnconfirmedTransmissionCallback
 25139 ;;		_LORAWAN_RxTimeout
 25140 ;; This function uses a non-reentrant model
 25141 ;;
 25142                           
 25143                           	psect	text135
 25144  001D9C                     __ptext135:
 25145                           	opt stack 0
 25146  001D9C                     _RADIO_Transmit:
 25147                           	opt stack 16
 25148                           
 25149                           ; BSR set to: 0
 25150                           ;radio_driver_SX1276.c: 788: uint8_t regValue;
 25151                           ;radio_driver_SX1276.c: 789: uint8_t i;
 25152                           ;radio_driver_SX1276.c: 791: if ((RadioConfiguration.flags & (1 << (2))) != 0)
 25153                           
 25154                           ;incstack = 0
 25155  001D9C  0101               	movlb	1	; () banked
 25156  001D9E  A5A2               	btfss	(_RadioConfiguration+35)& (0+255),2,b
 25157  001DA0  D006               	goto	l13328
 25158                           
 25159                           ; BSR set to: 1
 25160                           ;radio_driver_SX1276.c: 792: {
 25161                           ;radio_driver_SX1276.c: 793: return ERR_BUFFER_LOCKED;
 25162  001DA2  0E80               	movlw	128
 25163  001DA4  0100               	movlb	0	; () banked
 25164  001DA6  6FA7               	movwf	(?_RADIO_Transmit+1)& (0+255),b
 25165  001DA8  0E03               	movlw	3
 25166  001DAA  6FA6               	movwf	?_RADIO_Transmit& (0+255),b
 25167  001DAC  0C03               	retlw	3
 25168  001DAE                     l13328:
 25169                           
 25170                           ; BSR set to: 1
 25171                           ;radio_driver_SX1276.c: 794: }
 25172                           ;radio_driver_SX1276.c: 796: if ((RadioConfiguration.flags & ((1 << (0)) | (1 << (1)))) 
      +                          != 0)
 25173  001DAE  C1A2  F0A9         	movff	_RadioConfiguration+35,??_RADIO_Transmit
 25174  001DB2  0E03               	movlw	3
 25175  001DB4  0100               	movlb	0	; () banked
 25176  001DB6  17A9               	andwf	??_RADIO_Transmit& (0+255),f,b
 25177  001DB8  E005               	bz	l13334
 25178                           
 25179                           ; BSR set to: 0
 25180                           ;radio_driver_SX1276.c: 797: {
 25181                           ;radio_driver_SX1276.c: 798: return ERR_RADIO_BUSY;
 25182  001DBA  0E80               	movlw	128
 25183  001DBC  6FA7               	movwf	(?_RADIO_Transmit+1)& (0+255),b
 25184  001DBE  0E04               	movlw	4
 25185  001DC0  6FA6               	movwf	?_RADIO_Transmit& (0+255),b
 25186  001DC2  0C04               	retlw	4
 25187  001DC4                     l13334:
 25188                           
 25189                           ; BSR set to: 0
 25190                           ;radio_driver_SX1276.c: 799: }
 25191                           ;radio_driver_SX1276.c: 801: if ((MODULATION_FSK == RadioConfiguration.modulation) && (b
      +                          ufferLen > 64))
 25192  001DC4  0101               	movlb	1	; () banked
 25193  001DC6  5197               	movf	(_RadioConfiguration+24)& (0+255),w,b
 25194  001DC8  E109               	bnz	l13342
 25195                           
 25196                           ; BSR set to: 1
 25197  001DCA  0E40               	movlw	64
 25198  001DCC  0100               	movlb	0	; () banked
 25199  001DCE  65A8               	cpfsgt	RADIO_Transmit@bufferLen& (0+255),b
 25200  001DD0  D005               	goto	l13342
 25201                           
 25202                           ; BSR set to: 0
 25203                           ;radio_driver_SX1276.c: 802: {
 25204                           ;radio_driver_SX1276.c: 803: return ERR_DATA_SIZE;
 25205  001DD2  0E80               	movlw	128
 25206  001DD4  6FA7               	movwf	(?_RADIO_Transmit+1)& (0+255),b
 25207  001DD6  0E02               	movlw	2
 25208  001DD8  6FA6               	movwf	?_RADIO_Transmit& (0+255),b
 25209  001DDA  0C02               	retlw	2
 25210  001DDC                     l13342:
 25211                           
 25212                           ;radio_driver_SX1276.c: 804: }
 25213                           ;radio_driver_SX1276.c: 806: SwTimerStop(RadioConfiguration.timeOnAirTimerId);
 25214  001DDC  0101               	movlb	1	; () banked
 25215  001DDE  51A6               	movf	(_RadioConfiguration+39)& (0+255),w,b
 25216  001DE0  EC65  F030         	call	_SwTimerStop
 25217                           
 25218                           ; BSR set to: 0
 25219                           ;radio_driver_SX1276.c: 810: RADIO_WriteConfiguration(4);
 25220  001DE4  D8CA               	call	PL416	;call to abstracted procedure
 25221  001DE6  ECB9  F006         	call	_RADIO_WriteConfiguration	;wreg free
 25222                           
 25223                           ;radio_driver_SX1276.c: 812: if (MODULATION_LORA == RadioConfiguration.modulation)
 25224  001DEA  0101               	movlb	1	; () banked
 25225  001DEC  0597               	decf	(_RadioConfiguration+24)& (0+255),w,b
 25226  001DEE  E11D               	bnz	l13362
 25227                           
 25228                           ; BSR set to: 1
 25229                           ;radio_driver_SX1276.c: 813: {
 25230                           ;radio_driver_SX1276.c: 814: RADIO_RegisterWrite(0x22, bufferLen);
 25231  001DF0  C0A8  F062         	movff	RADIO_Transmit@bufferLen,RADIO_RegisterWrite@value
 25232  001DF4  0E22               	movlw	34
 25233  001DF6  EC2E  F02F         	call	_RADIO_RegisterWrite
 25234                           
 25235                           ;radio_driver_SX1276.c: 817: regValue = RADIO_RegisterRead(0x0A);
 25236  001DFA  0E0A               	movlw	10
 25237  001DFC  EC64  F02E         	call	_RADIO_RegisterRead
 25238  001E00  6FB5               	movwf	RADIO_Transmit@regValue& (0+255),b
 25239                           
 25240                           ; BSR set to: 0
 25241                           ;radio_driver_SX1276.c: 818: regValue &= ~0x0F;
 25242  001E02  0EF0               	movlw	240
 25243  001E04  17B5               	andwf	RADIO_Transmit@regValue& (0+255),f,b
 25244                           
 25245                           ; BSR set to: 0
 25246                           ;radio_driver_SX1276.c: 819: regValue |= 0x08;
 25247  001E06  87B5               	bsf	RADIO_Transmit@regValue& (0+255),3,b
 25248                           
 25249                           ; BSR set to: 0
 25250                           ;radio_driver_SX1276.c: 820: RADIO_RegisterWrite(0x0A, regValue);
 25251  001E08  C0B5  F062         	movff	RADIO_Transmit@regValue,RADIO_RegisterWrite@value
 25252  001E0C  0E0A               	movlw	10
 25253  001E0E  EC2E  F02F         	call	_RADIO_RegisterWrite
 25254                           
 25255                           ;radio_driver_SX1276.c: 824: RADIO_RegisterWrite(0x40, 0x40);
 25256  001E12  0E40               	movlw	64
 25257  001E14  0100               	movlb	0	; () banked
 25258  001E16  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 25259  001E18  EC2E  F02F         	call	_RADIO_RegisterWrite
 25260                           
 25261                           ;radio_driver_SX1276.c: 825: RADIO_RegisterWrite(0x41, 0x00);
 25262  001E1C  D8AB               	call	PL374	;call to abstracted procedure
 25263  001E1E  EC2E  F02F         	call	_RADIO_RegisterWrite
 25264                           
 25265                           ;radio_driver_SX1276.c: 827: RADIO_WriteMode(MODE_STANDBY, RadioConfiguration.modulation
      +                          , 1);
 25266  001E22  D8A2               	call	PL346	;call to abstracted procedure
 25267  001E24  ECDB  F01A         	call	_RADIO_WriteMode
 25268                           
 25269                           ;radio_driver_SX1276.c: 828: }
 25270  001E28  D007               	goto	l13364
 25271  001E2A                     l13362:
 25272                           
 25273                           ; BSR set to: 1
 25274                           ;radio_driver_SX1276.c: 829: else
 25275                           ;radio_driver_SX1276.c: 830: {
 25276                           ;radio_driver_SX1276.c: 832: RADIO_RegisterWrite(0x40, 0x00);
 25277  001E2A  EC90  F011         	call	PL430	;call to abstracted procedure
 25278  001E2E  EC2E  F02F         	call	_RADIO_RegisterWrite
 25279                           
 25280                           ;radio_driver_SX1276.c: 833: RADIO_RegisterWrite(0x41, 0x00);
 25281  001E32  D8A0               	call	PL374	;call to abstracted procedure
 25282  001E34  EC2E  F02F         	call	_RADIO_RegisterWrite
 25283  001E38                     l13364:
 25284                           
 25285                           ;radio_driver_SX1276.c: 834: }
 25286                           ;radio_driver_SX1276.c: 836: if (MODULATION_FSK == RadioConfiguration.modulation)
 25287  001E38  0101               	movlb	1	; () banked
 25288  001E3A  5197               	movf	(_RadioConfiguration+24)& (0+255),w,b
 25289  001E3C  E105               	bnz	l13368
 25290                           
 25291                           ; BSR set to: 1
 25292                           ;radio_driver_SX1276.c: 837: {
 25293                           ;radio_driver_SX1276.c: 839: RADIO_RegisterWrite(0x00, bufferLen);
 25294  001E3E  C0A8  F062         	movff	RADIO_Transmit@bufferLen,RADIO_RegisterWrite@value
 25295  001E42  0E00               	movlw	0
 25296  001E44  EC2E  F02F         	call	_RADIO_RegisterWrite
 25297  001E48                     l13368:
 25298                           
 25299                           ;radio_driver_SX1276.c: 840: }
 25300                           ;radio_driver_SX1276.c: 842: HALSPICSAssert();
 25301  001E48  EC21  F031         	call	_HALSPICSAssert	;wreg free
 25302                           
 25303                           ;radio_driver_SX1276.c: 843: HALSPISend(0x80 | 0x00);
 25304  001E4C  0E80               	movlw	128
 25305  001E4E  ECD9  F030         	call	_HALSPISend
 25306                           
 25307                           ; BSR set to: 14
 25308                           ;radio_driver_SX1276.c: 845: for (i = 0; i < bufferLen; i++)
 25309  001E52  0100               	movlb	0	; () banked
 25310  001E54  6BB6               	clrf	RADIO_Transmit@i& (0+255),b
 25311  001E56  D00B               	goto	l13378
 25312  001E58                     l13374:
 25313                           
 25314                           ; BSR set to: 0
 25315                           ;radio_driver_SX1276.c: 846: {
 25316                           ;radio_driver_SX1276.c: 847: HALSPISend(buffer[i]);
 25317  001E58  51B6               	movf	RADIO_Transmit@i& (0+255),w,b
 25318  001E5A  25A6               	addwf	RADIO_Transmit@buffer& (0+255),w,b
 25319  001E5C  6ED9               	movwf	fsr2l,c
 25320  001E5E  0E00               	movlw	0
 25321  001E60  21A7               	addwfc	(RADIO_Transmit@buffer+1)& (0+255),w,b
 25322  001E62  6EDA               	movwf	fsr2h,c
 25323  001E64  50DF               	movf	indf2,w,c
 25324  001E66  ECD9  F030         	call	_HALSPISend
 25325                           
 25326                           ; BSR set to: 14
 25327  001E6A  0100               	movlb	0	; () banked
 25328  001E6C  2BB6               	incf	RADIO_Transmit@i& (0+255),f,b
 25329  001E6E                     l13378:
 25330                           
 25331                           ; BSR set to: 0
 25332  001E6E  51A8               	movf	RADIO_Transmit@bufferLen& (0+255),w,b
 25333  001E70  5DB6               	subwf	RADIO_Transmit@i& (0+255),w,b
 25334  001E72  E3F2               	bnc	l13374
 25335                           
 25336                           ; BSR set to: 0
 25337                           ;radio_driver_SX1276.c: 848: }
 25338                           ;radio_driver_SX1276.c: 849: HALSPICSDeassert();
 25339  001E74  EC1F  F031         	call	_HALSPICSDeassert	;wreg free
 25340                           
 25341                           ;radio_driver_SX1276.c: 851: RadioConfiguration.flags |= (1 << (0));
 25342  001E78  0101               	movlb	1	; () banked
 25343  001E7A  81A2               	bsf	(_RadioConfiguration+35)& (0+255),0,b
 25344                           
 25345                           ; BSR set to: 1
 25346                           ;radio_driver_SX1276.c: 852: RadioConfiguration.flags &= ~((1 << (4)) | (1 << (3)));
 25347  001E7C  0EE7               	movlw	231
 25348  001E7E  17A2               	andwf	(_RadioConfiguration+35)& (0+255),f,b
 25349                           
 25350                           ; BSR set to: 1
 25351                           ;radio_driver_SX1276.c: 857: RADIO_WriteMode(MODE_TX, RadioConfiguration.modulation, 0);
 25352  001E80  EC66  F02D         	call	PL78	;call to abstracted procedure
 25353  001E84  0E03               	movlw	3
 25354  001E86  ECDB  F01A         	call	_RADIO_WriteMode
 25355                           
 25356                           ;radio_driver_SX1276.c: 862: SwTimerSetTimeout(RadioConfiguration.timeOnAirTimerId, ((((
      +                          uint32_t)20000)) < 0x000FFFFFUL ? ( (((uint32_t)(((uint32_t)20000))) << (12)) / 125UL ) 
      +                          : ( (((uint32_t)(((uint32_t)20000))) / 125UL) << (12) ) ));
 25357  001E8A  0100               	movlb	0	; () banked
 25358  001E8C  6B6D               	clrf	SwTimerSetTimeout@timeout& (0+255),b
 25359  001E8E  6B6E               	clrf	(SwTimerSetTimeout@timeout+1)& (0+255),b
 25360  001E90  0E0A               	movlw	10
 25361  001E92  6F6F               	movwf	(SwTimerSetTimeout@timeout+2)& (0+255),b
 25362  001E94  6B70               	clrf	(SwTimerSetTimeout@timeout+3)& (0+255),b
 25363  001E96  0101               	movlb	1	; () banked
 25364  001E98  51A6               	movf	(_RadioConfiguration+39)& (0+255),w,b
 25365  001E9A  EC11  F02C         	call	_SwTimerSetTimeout
 25366                           
 25367                           ; BSR set to: 0
 25368                           ;radio_driver_SX1276.c: 863: SwTimerStart(RadioConfiguration.timeOnAirTimerId);
 25369  001E9E  0101               	movlb	1	; () banked
 25370  001EA0  51A6               	movf	(_RadioConfiguration+39)& (0+255),w,b
 25371  001EA2  ECC4  F025         	call	_SwTimerStart
 25372                           
 25373                           ; BSR set to: 0
 25374                           ;radio_driver_SX1276.c: 865: if (0 != RadioConfiguration.watchdogTimerTimeout)
 25375  001EA6  D85A               	call	PL342	;call to abstracted procedure
 25376  001EA8  E045               	bz	l13408
 25377                           
 25378                           ; BSR set to: 1
 25379                           ;radio_driver_SX1276.c: 866: {
 25380                           ;radio_driver_SX1276.c: 867: SwTimerSetTimeout(RadioConfiguration.watchdogTimerId, ((Rad
      +                          ioConfiguration.watchdogTimerTimeout) < 0x000FFFFFUL ? ( (((uint32_t)(RadioConfiguration
      +                          .watchdogTimerTimeout)) << (12)) / 125UL ) : ( (((uint32_t)(RadioConfiguration.watchdogT
      +                          imerTimeout)) /
 25381  001EAA  51AC               	movf	(_RadioConfiguration+45)& (0+255),w,b
 25382  001EAC  E102               	bnz	u14820
 25383  001EAE  D850               	call	PL334	;call to abstracted procedure
 25384  001EB0  E30B               	bnc	l13402
 25385  001EB2                     u14820:
 25386                           
 25387                           ; BSR set to: 1
 25388  001EB2  D844               	call	PL120	;call to abstracted procedure
 25389  001EB4  EC77  F011         	call	PL32	;call to abstracted procedure
 25390  001EB8  EC1B  F025         	call	___lldiv	;wreg free
 25391  001EBC  0E0C               	movlw	12
 25392  001EBE                     u14835:
 25393  001EBE  EC85  F011         	call	PL172	;call to abstracted procedure
 25394  001EC2  2EE8               	decfsz	wreg,f,c
 25395  001EC4  D7FC               	goto	u14835
 25396  001EC6  D01E               	goto	L18
 25397  001EC8                     l13402:
 25398                           
 25399                           ; BSR set to: 1
 25400  001EC8  C1A9  F0A9         	movff	_RadioConfiguration+42,??_RADIO_Transmit
 25401  001ECC  C1AA  F0AA         	movff	_RadioConfiguration+43,??_RADIO_Transmit+1
 25402  001ED0  C1AB  F0AB         	movff	_RadioConfiguration+44,??_RADIO_Transmit+2
 25403  001ED4  C1AC  F0AC         	movff	_RadioConfiguration+45,??_RADIO_Transmit+3
 25404  001ED8  0E0C               	movlw	12
 25405  001EDA                     u14845:
 25406  001EDA  90D8               	bcf	status,0,c
 25407  001EDC  0100               	movlb	0	; () banked
 25408  001EDE  37A9               	rlcf	??_RADIO_Transmit& (0+255),f,b
 25409  001EE0  37AA               	rlcf	(??_RADIO_Transmit+1)& (0+255),f,b
 25410  001EE2  37AB               	rlcf	(??_RADIO_Transmit+2)& (0+255),f,b
 25411  001EE4  37AC               	rlcf	(??_RADIO_Transmit+3)& (0+255),f,b
 25412  001EE6  2EE8               	decfsz	wreg,f,c
 25413  001EE8  D7F8               	goto	u14845
 25414  001EEA  C0A9  F060         	movff	??_RADIO_Transmit,___lldiv@dividend
 25415  001EEE  C0AA  F061         	movff	??_RADIO_Transmit+1,___lldiv@dividend+1
 25416  001EF2  C0AB  F062         	movff	??_RADIO_Transmit+2,___lldiv@dividend+2
 25417  001EF6  C0AC  F063         	movff	??_RADIO_Transmit+3,___lldiv@dividend+3
 25418  001EFA  0E7D               	movlw	125
 25419  001EFC  EC77  F011         	call	PL32	;call to abstracted procedure
 25420  001F00  EC1B  F025         	call	___lldiv	;wreg free
 25421  001F04                     L18:
 25422  001F04  C060  F0B1         	movff	?___lldiv,_RADIO_Transmit$3745
 25423  001F08  C061  F0B2         	movff	?___lldiv+1,_RADIO_Transmit$3745+1
 25424  001F0C  C062  F0B3         	movff	?___lldiv+2,_RADIO_Transmit$3745+2
 25425  001F10  C063  F0B4         	movff	?___lldiv+3,_RADIO_Transmit$3745+3
 25426                           
 25427                           ; BSR set to: 0
 25428  001F14  C0B1  F06D         	movff	_RADIO_Transmit$3745,SwTimerSetTimeout@timeout
 25429  001F18  C0B2  F06E         	movff	_RADIO_Transmit$3745+1,SwTimerSetTimeout@timeout+1
 25430  001F1C  C0B3  F06F         	movff	_RADIO_Transmit$3745+2,SwTimerSetTimeout@timeout+2
 25431  001F20  C0B4  F070         	movff	_RADIO_Transmit$3745+3,SwTimerSetTimeout@timeout+3
 25432  001F24  0101               	movlb	1	; () banked
 25433  001F26  51A8               	movf	(_RadioConfiguration+41)& (0+255),w,b
 25434  001F28  EC11  F02C         	call	_SwTimerSetTimeout
 25435                           
 25436                           ; BSR set to: 0
 25437                           ;radio_driver_SX1276.c: 868: SwTimerStart(RadioConfiguration.watchdogTimerId);
 25438  001F2C  0101               	movlb	1	; () banked
 25439  001F2E  51A8               	movf	(_RadioConfiguration+41)& (0+255),w,b
 25440  001F30  ECC4  F025         	call	_SwTimerStart
 25441  001F34                     l13408:
 25442                           
 25443                           ;radio_driver_SX1276.c: 869: }
 25444                           ;radio_driver_SX1276.c: 871: return ERR_NONE;
 25445  001F34  0100               	movlb	0	; () banked
 25446  001F36  6BA6               	clrf	?_RADIO_Transmit& (0+255),b
 25447  001F38  6BA7               	clrf	(?_RADIO_Transmit+1)& (0+255),b
 25448                           
 25449                           ; BSR set to: 0
 25450  001F3A  0012               	return		;funcret
 25451  001F3C                     __end_of_RADIO_Transmit:
 25452                           	opt stack 0
 25453  001F3C                     PL120:
 25454                           	opt stack 13
 25455  001F3C  C1A9  F060         	movff	_RadioConfiguration+42,___lldiv@dividend
 25456  001F40  C1AA  F061         	movff	_RadioConfiguration+43,___lldiv@dividend+1
 25457  001F44  C1AB  F062         	movff	_RadioConfiguration+44,___lldiv@dividend+2
 25458  001F48  C1AC  F063         	movff	_RadioConfiguration+45,___lldiv@dividend+3
 25459  001F4C  0100               	movlb	0	; () banked
 25460  001F4E  0C7D               	retlw	125
 25461  001F50                     __end_ofPL120:
 25462                           	opt stack 0
 25463  001F50                     PL334:
 25464                           	opt stack 13
 25465  001F50  29A9               	incf	(_RadioConfiguration+42)& (0+255),w,b
 25466  001F52  0EFF               	movlw	255
 25467  001F54  59AA               	subwfb	(_RadioConfiguration+43)& (0+255),w,b
 25468  001F56  0E0F               	movlw	15
 25469  001F58  59AB               	subwfb	(_RadioConfiguration+44)& (0+255),w,b
 25470  001F5A  0012               	return	
 25471  001F5C                     __end_ofPL334:
 25472                           	opt stack 0
 25473  001F5C                     PL342:
 25474                           	opt stack 13
 25475  001F5C  0101               	movlb	1	; () banked
 25476  001F5E  51A9               	movf	(_RadioConfiguration+42)& (0+255),w,b
 25477  001F60  11AA               	iorwf	(_RadioConfiguration+43)& (0+255),w,b
 25478  001F62  11AB               	iorwf	(_RadioConfiguration+44)& (0+255),w,b
 25479  001F64  11AC               	iorwf	(_RadioConfiguration+45)& (0+255),w,b
 25480  001F66  0012               	return	
 25481  001F68                     __end_ofPL342:
 25482                           	opt stack 0
 25483  001F68                     PL346:
 25484                           	opt stack 12
 25485  001F68  C197  F065         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 25486  001F6C  0E01               	movlw	1
 25487  001F6E  0100               	movlb	0	; () banked
 25488  001F70  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 25489  001F72  0C01               	retlw	1
 25490  001F74                     __end_ofPL346:
 25491                           	opt stack 0
 25492  001F74                     PL374:
 25493                           	opt stack 13
 25494  001F74  0100               	movlb	0	; () banked
 25495  001F76  6B62               	clrf	RADIO_RegisterWrite@value& (0+255),b
 25496  001F78  0C41               	retlw	65
 25497  001F7A                     __end_ofPL374:
 25498                           	opt stack 0
 25499  001F7A                     PL416:
 25500                           	opt stack 13
 25501  001F7A  0E00               	movlw	0
 25502  001F7C  6F9D               	movwf	(RADIO_WriteConfiguration@symbolTimeout+1)& (0+255),b
 25503  001F7E  0E04               	movlw	4
 25504  001F80  6F9C               	movwf	RADIO_WriteConfiguration@symbolTimeout& (0+255),b
 25505  001F82  0C04               	retlw	4
 25506  001F84                     __end_ofPL416:
 25507                           	opt stack 0
 25508                           tosu	equ	0xFFF
 25509                           tosh	equ	0xFFE
 25510                           tosl	equ	0xFFD
 25511                           pclath	equ	0xFFA
 25512                           tblptru	equ	0xFF8
 25513                           tblptrh	equ	0xFF7
 25514                           tblptrl	equ	0xFF6
 25515                           tablat	equ	0xFF5
 25516                           prodh	equ	0xFF4
 25517                           prodl	equ	0xFF3
 25518                           intcon	equ	0xFF2
 25519                           indf0	equ	0xFEF
 25520                           postinc0	equ	0xFEE
 25521                           plusw0	equ	0xFEB
 25522                           fsr0h	equ	0xFEA
 25523                           fsr0l	equ	0xFE9
 25524                           wreg	equ	0xFE8
 25525                           postinc1	equ	0xFE6
 25526                           postdec1	equ	0xFE5
 25527                           plusw1	equ	0xFE3
 25528                           fsr1h	equ	0xFE2
 25529                           fsr1l	equ	0xFE1
 25530                           indf2	equ	0xFDF
 25531                           postinc2	equ	0xFDE
 25532                           postdec2	equ	0xFDD
 25533                           plusw2	equ	0xFDB
 25534                           fsr2h	equ	0xFDA
 25535                           fsr2l	equ	0xFD9
 25536                           status	equ	0xFD8
 25537                           
 25538 ;; *************** function _RADIO_WriteConfiguration *****************
 25539 ;; Defined at:
 25540 ;;		line 533 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 25541 ;; Parameters:    Size  Location     Type
 25542 ;;  symbolTimeou    2   60[BANK0 ] unsigned int 
 25543 ;; Auto vars:     Size  Location     Type
 25544 ;;  tempValue       4   65[BANK0 ] unsigned long 
 25545 ;;  regValue        1   69[BANK0 ] unsigned char 
 25546 ;;  i               1   64[BANK0 ] unsigned char 
 25547 ;; Return value:  Size  Location     Type
 25548 ;;                  1    wreg      void 
 25549 ;; Registers used:
 25550 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25551 ;; Tracked objects:
 25552 ;;		On entry : 3F/0
 25553 ;;		On exit  : 31/0
 25554 ;;		Unchanged: 0/0
 25555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25556 ;;      Params:         0       2       0       0       0       0       0       0       0
 25557 ;;      Locals:         0       6       0       0       0       0       0       0       0
 25558 ;;      Temps:          0       2       0       0       0       0       0       0       0
 25559 ;;      Totals:         0      10       0       0       0       0       0       0       0
 25560 ;;Total ram usage:       10 bytes
 25561 ;; Hardware stack levels used:    1
 25562 ;; Hardware stack levels required when called:   11
 25563 ;; This function calls:
 25564 ;;		_RADIO_RegisterRead
 25565 ;;		_RADIO_RegisterWrite
 25566 ;;		_RADIO_WriteFSKBitRate
 25567 ;;		_RADIO_WriteFSKFrequencyDeviation
 25568 ;;		_RADIO_WriteFrequency
 25569 ;;		_RADIO_WriteMode
 25570 ;;		_RADIO_WritePower
 25571 ;;		___lmul
 25572 ;; This function is called by:
 25573 ;;		_RADIO_Transmit
 25574 ;;		_RADIO_ReceiveStart
 25575 ;; This function uses a non-reentrant model
 25576 ;;
 25577                           
 25578                           	psect	text136
 25579  000D72                     __ptext136:
 25580                           	opt stack 0
 25581  000D72                     _RADIO_WriteConfiguration:
 25582                           	opt stack 0
 25583                           
 25584                           ; BSR set to: 0
 25585                           ;radio_driver_SX1276.c: 535: uint32_t tempValue;
 25586                           ;radio_driver_SX1276.c: 536: uint8_t regValue;
 25587                           ;radio_driver_SX1276.c: 537: uint8_t i;
 25588                           ;radio_driver_SX1276.c: 540: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation, 
      +                          0);
 25589                           
 25590                           ; BSR set to: 0
 25591                           ;incstack = 0
 25592  000D72  EC77  F019         	call	PL278	;call to abstracted procedure
 25593  000D76  ECDB  F01A         	call	_RADIO_WriteMode
 25594                           
 25595                           ;radio_driver_SX1276.c: 541: RADIO_WriteFrequency(RadioConfiguration.frequency);
 25596  000D7A  EC56  F012         	call	PL224	;call to abstracted procedure
 25597  000D7E  ECB4  F01B         	call	_RADIO_WriteFrequency	;wreg free
 25598                           
 25599                           ;radio_driver_SX1276.c: 542: RADIO_WritePower(RadioConfiguration.outputPower);
 25600  000D82  0101               	movlb	1	; () banked
 25601  000D84  519A               	movf	(_RadioConfiguration+27)& (0+255),w,b
 25602  000D86  EC8C  F01C         	call	_RADIO_WritePower
 25603                           
 25604                           ;radio_driver_SX1276.c: 544: if (MODULATION_LORA == RadioConfiguration.modulation)
 25605  000D8A  0101               	movlb	1	; () banked
 25606  000D8C  0597               	decf	(_RadioConfiguration+24)& (0+255),w,b
 25607  000D8E  E001 D16B          	bnz	l12682
 25608                           
 25609                           ; BSR set to: 1
 25610                           ;radio_driver_SX1276.c: 545: {
 25611                           ;radio_driver_SX1276.c: 546: RADIO_RegisterWrite(0x39, RadioConfiguration.syncWordLoRa);
 25612  000D92  C18D  F062         	movff	_RadioConfiguration+14,RADIO_RegisterWrite@value
 25613  000D96  0E39               	movlw	57
 25614  000D98  EC2E  F02F         	call	_RADIO_RegisterWrite
 25615                           
 25616                           ;radio_driver_SX1276.c: 548: RADIO_RegisterWrite(0x1D,
 25617                           ;radio_driver_SX1276.c: 549: (RadioConfiguration.bandWidth << (4)) |
 25618                           ;radio_driver_SX1276.c: 550: (RadioConfiguration.errorCodingRate << (1)) |
 25619                           ;radio_driver_SX1276.c: 551: (RadioConfiguration.implicitHeaderMode & 0x01));
 25620  000D9C  C1A1  F09E         	movff	_RadioConfiguration+34,??_RADIO_WriteConfiguration
 25621  000DA0  0E01               	movlw	1
 25622  000DA2  0100               	movlb	0	; () banked
 25623  000DA4  179E               	andwf	??_RADIO_WriteConfiguration& (0+255),f,b
 25624  000DA6  0101               	movlb	1	; () banked
 25625  000DA8  90D8               	bcf	status,0,c
 25626  000DAA  35A0               	rlcf	(_RadioConfiguration+33)& (0+255),w,b
 25627  000DAC  0100               	movlb	0	; () banked
 25628  000DAE  6F9F               	movwf	(??_RADIO_WriteConfiguration+1)& (0+255),b
 25629  000DB0  0101               	movlb	1	; () banked
 25630  000DB2  3999               	swapf	(_RadioConfiguration+26)& (0+255),w,b
 25631  000DB4  D9CB               	call	PL338	;call to abstracted procedure
 25632  000DB6  0E1D               	movlw	29
 25633  000DB8  EC2E  F02F         	call	_RADIO_RegisterWrite
 25634                           
 25635                           ;radio_driver_SX1276.c: 553: RADIO_RegisterWrite(0x1E,
 25636                           ;radio_driver_SX1276.c: 554: (RadioConfiguration.dataRate << (4)) |
 25637                           ;radio_driver_SX1276.c: 555: ((RadioConfiguration.crcOn & 0x01) << (2)) |
 25638                           ;radio_driver_SX1276.c: 556: ((symbolTimeout & 0x0300) >> (8)));
 25639  000DBC  C09D  F09E         	movff	RADIO_WriteConfiguration@symbolTimeout+1,??_RADIO_WriteConfiguration
 25640  000DC0  0E03               	movlw	3
 25641  000DC2  0100               	movlb	0	; () banked
 25642  000DC4  179E               	andwf	??_RADIO_WriteConfiguration& (0+255),f,b
 25643  000DC6  C19B  F09F         	movff	_RadioConfiguration+28,??_RADIO_WriteConfiguration+1
 25644  000DCA  0E01               	movlw	1
 25645  000DCC  179F               	andwf	(??_RADIO_WriteConfiguration+1)& (0+255),f,b
 25646  000DCE  90D8               	bcf	status,0,c
 25647  000DD0  379F               	rlcf	(??_RADIO_WriteConfiguration+1)& (0+255),f,b
 25648  000DD2  90D8               	bcf	status,0,c
 25649  000DD4  379F               	rlcf	(??_RADIO_WriteConfiguration+1)& (0+255),f,b
 25650  000DD6  0101               	movlb	1	; () banked
 25651  000DD8  3998               	swapf	(_RadioConfiguration+25)& (0+255),w,b
 25652  000DDA  D9B8               	call	PL338	;call to abstracted procedure
 25653  000DDC  0E1E               	movlw	30
 25654  000DDE  EC2E  F02F         	call	_RADIO_RegisterWrite
 25655                           
 25656                           ;radio_driver_SX1276.c: 560: if (0 != RadioConfiguration.frequencyHopPeriod)
 25657  000DE2  0101               	movlb	1	; () banked
 25658  000DE4  519D               	movf	(_RadioConfiguration+30)& (0+255),w,b
 25659  000DE6  119E               	iorwf	(_RadioConfiguration+31)& (0+255),w,b
 25660  000DE8  E041               	bz	l2159
 25661                           
 25662                           ; BSR set to: 1
 25663                           ;radio_driver_SX1276.c: 561: {
 25664                           ;radio_driver_SX1276.c: 562: tempValue = RadioConfiguration.frequencyHopPeriod;
 25665  000DEA  C19D  F0A1         	movff	_RadioConfiguration+30,RADIO_WriteConfiguration@tempValue
 25666  000DEE  C19E  F0A2         	movff	_RadioConfiguration+31,RADIO_WriteConfiguration@tempValue+1
 25667  000DF2  0100               	movlb	0	; () banked
 25668  000DF4  6BA3               	clrf	(RADIO_WriteConfiguration@tempValue+2)& (0+255),b
 25669  000DF6  6BA4               	clrf	(RADIO_WriteConfiguration@tempValue+3)& (0+255),b
 25670                           
 25671                           ;radio_driver_SX1276.c: 564: switch (RadioConfiguration.bandWidth)
 25672  000DF8  D023               	goto	l12574
 25673  000DFA                     l12566:
 25674                           
 25675                           ; BSR set to: 1
 25676                           ;radio_driver_SX1276.c: 567: tempValue *= 125;
 25677  000DFA  D99F               	call	PL122	;call to abstracted procedure
 25678  000DFC  0E7D               	movlw	125
 25679  000DFE  0100               	movlb	0	; () banked
 25680  000E00  EC98  F006         	call	PL80	;call to abstracted procedure
 25681  000E04  EC25  F02A         	call	___lmul	;wreg free
 25682  000E08  D010               	goto	L20
 25683  000E0A                     l12568:
 25684                           
 25685                           ; BSR set to: 1
 25686                           ;radio_driver_SX1276.c: 570: tempValue *= 250;
 25687  000E0A  D997               	call	PL122	;call to abstracted procedure
 25688  000E0C  0EFA               	movlw	250
 25689  000E0E  0100               	movlb	0	; () banked
 25690  000E10  EC98  F006         	call	PL80	;call to abstracted procedure
 25691  000E14  EC25  F02A         	call	___lmul	;wreg free
 25692  000E18  D008               	goto	L20
 25693  000E1A                     l12570:
 25694                           
 25695                           ; BSR set to: 1
 25696                           ;radio_driver_SX1276.c: 573: tempValue *= 500;
 25697  000E1A  D98F               	call	PL122	;call to abstracted procedure
 25698  000E1C  0EF4               	movlw	244
 25699  000E1E  0100               	movlb	0	; () banked
 25700  000E20  6F94               	movwf	___lmul@multiplicand& (0+255),b
 25701  000E22  0E01               	movlw	1
 25702  000E24  D9B2               	call	PL438	;call to abstracted procedure
 25703  000E26  EC25  F02A         	call	___lmul	;wreg free
 25704  000E2A                     L20:
 25705  000E2A  C090  F0A1         	movff	?___lmul,RADIO_WriteConfiguration@tempValue
 25706  000E2E  C091  F0A2         	movff	?___lmul+1,RADIO_WriteConfiguration@tempValue+1
 25707  000E32  C092  F0A3         	movff	?___lmul+2,RADIO_WriteConfiguration@tempValue+2
 25708  000E36  C093  F0A4         	movff	?___lmul+3,RADIO_WriteConfiguration@tempValue+3
 25709                           
 25710                           ;radio_driver_SX1276.c: 574: break;
 25711  000E3A  D00B               	goto	l12576
 25712  000E3C                     l2165:
 25713                           
 25714                           ; BSR set to: 1
 25715                           ;radio_driver_SX1276.c: 577: tempValue = 0;
 25716  000E3C  D98D               	call	PL350	;call to abstracted procedure
 25717                           
 25718                           ;radio_driver_SX1276.c: 578: break;
 25719  000E3E  D009               	goto	l12576
 25720  000E40                     l12574:
 25721                           
 25722                           ; BSR set to: 0
 25723  000E40  0101               	movlb	1	; () banked
 25724  000E42  5199               	movf	(_RadioConfiguration+26)& (0+255),w,b
 25725                           
 25726                           ; Switch size 1, requested type "space"
 25727                           ; Number of cases is 3, Range of values is 7 to 9
 25728                           ; switch strategies available:
 25729                           ; Name         Instructions Cycles
 25730                           ; simple_byte           10     6 (average)
 25731                           ;	Chosen strategy is simple_byte
 25732  000E44  0A07               	xorlw	7	; case 7
 25733  000E46  E0D9               	bz	l12566
 25734  000E48  0A0F               	xorlw	15	; case 8
 25735  000E4A  E0DF               	bz	l12568
 25736  000E4C  0A01               	xorlw	1	; case 9
 25737  000E4E  E0E5               	bz	l12570
 25738  000E50  D7F5               	goto	l2165
 25739  000E52                     l12576:
 25740                           
 25741                           ; BSR set to: 0
 25742                           ;radio_driver_SX1276.c: 581: tempValue >>= RadioConfiguration.dataRate;
 25743  000E52  0101               	movlb	1	; () banked
 25744  000E54  2998               	incf	(_RadioConfiguration+25)& (0+255),w,b
 25745  000E56  0100               	movlb	0	; () banked
 25746  000E58  6F9E               	movwf	??_RADIO_WriteConfiguration& (0+255),b
 25747  000E5A  D005               	goto	u13550
 25748  000E5C                     u13555:
 25749  000E5C  90D8               	bcf	status,0,c
 25750  000E5E  33A4               	rrcf	(RADIO_WriteConfiguration@tempValue+3)& (0+255),f,b
 25751  000E60  33A3               	rrcf	(RADIO_WriteConfiguration@tempValue+2)& (0+255),f,b
 25752  000E62  33A2               	rrcf	(RADIO_WriteConfiguration@tempValue+1)& (0+255),f,b
 25753  000E64  33A1               	rrcf	RADIO_WriteConfiguration@tempValue& (0+255),f,b
 25754  000E66                     u13550:
 25755  000E66  2F9E               	decfsz	??_RADIO_WriteConfiguration& (0+255),f,b
 25756  000E68  D7F9               	goto	u13555
 25757                           
 25758                           ;radio_driver_SX1276.c: 582: }
 25759  000E6A  D001               	goto	l12578
 25760  000E6C                     l2159:
 25761                           
 25762                           ; BSR set to: 1
 25763                           ;radio_driver_SX1276.c: 583: else
 25764                           ;radio_driver_SX1276.c: 584: {
 25765                           ;radio_driver_SX1276.c: 585: tempValue = 0;
 25766  000E6C  D975               	call	PL350	;call to abstracted procedure
 25767  000E6E                     l12578:
 25768                           
 25769                           ;radio_driver_SX1276.c: 586: }
 25770                           ;radio_driver_SX1276.c: 587: RADIO_RegisterWrite(0x24, (uint8_t)tempValue);
 25771  000E6E  C0A1  F062         	movff	RADIO_WriteConfiguration@tempValue,RADIO_RegisterWrite@value
 25772  000E72  0E24               	movlw	36
 25773  000E74  EC2E  F02F         	call	_RADIO_RegisterWrite
 25774                           
 25775                           ;radio_driver_SX1276.c: 589: RADIO_RegisterWrite(0x1F, (symbolTimeout & 0xFF));
 25776  000E78  C09C  F062         	movff	RADIO_WriteConfiguration@symbolTimeout,RADIO_RegisterWrite@value
 25777  000E7C  0E1F               	movlw	31
 25778  000E7E  EC2E  F02F         	call	_RADIO_RegisterWrite
 25779                           
 25780                           ;radio_driver_SX1276.c: 595: regValue = RADIO_RegisterRead(0x26);
 25781  000E82  0E26               	movlw	38
 25782  000E84  EC64  F02E         	call	_RADIO_RegisterRead
 25783  000E88  6FA5               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 25784                           
 25785                           ; BSR set to: 0
 25786                           ;radio_driver_SX1276.c: 596: if (
 25787                           ;radio_driver_SX1276.c: 597: (
 25788                           ;radio_driver_SX1276.c: 598: (SF_12 == RadioConfiguration.dataRate) &&
 25789                           ;radio_driver_SX1276.c: 599: ((BW_125KHZ == RadioConfiguration.bandWidth) || (BW_250KHZ 
      +                          == RadioConfiguration.bandWidth))
 25790                           ;radio_driver_SX1276.c: 600: ) ||
 25791                           ;radio_driver_SX1276.c: 601: (
 25792                           ;radio_driver_SX1276.c: 602: (SF_11 == RadioConfiguration.dataRate) &&
 25793                           ;radio_driver_SX1276.c: 603: (BW_125KHZ == RadioConfiguration.bandWidth)
 25794                           ;radio_driver_SX1276.c: 604: )
 25795                           ;radio_driver_SX1276.c: 605: )
 25796  000E8A  0E0C               	movlw	12
 25797  000E8C  0101               	movlb	1	; () banked
 25798  000E8E  1998               	xorwf	(_RadioConfiguration+25)& (0+255),w,b
 25799  000E90  E106               	bnz	l12586
 25800                           
 25801                           ; BSR set to: 1
 25802  000E92  0E07               	movlw	7
 25803  000E94  1999               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 25804  000E96  E009               	bz	l12590
 25805                           
 25806                           ; BSR set to: 1
 25807  000E98  0E08               	movlw	8
 25808  000E9A  1999               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 25809  000E9C  E006               	bz	l12590
 25810  000E9E                     l12586:
 25811                           
 25812                           ; BSR set to: 1
 25813  000E9E  0E0B               	movlw	11
 25814  000EA0  1998               	xorwf	(_RadioConfiguration+25)& (0+255),w,b
 25815  000EA2  E106               	bnz	l12592
 25816                           
 25817                           ; BSR set to: 1
 25818  000EA4  0E07               	movlw	7
 25819  000EA6  1999               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 25820  000EA8  E103               	bnz	l12592
 25821  000EAA                     l12590:
 25822                           
 25823                           ; BSR set to: 1
 25824                           ;radio_driver_SX1276.c: 606: {
 25825                           ;radio_driver_SX1276.c: 607: regValue |= 1 << (3);
 25826  000EAA  0100               	movlb	0	; () banked
 25827  000EAC  87A5               	bsf	RADIO_WriteConfiguration@regValue& (0+255),3,b
 25828                           
 25829                           ;radio_driver_SX1276.c: 608: }
 25830  000EAE  D002               	goto	l2172
 25831  000EB0                     l12592:
 25832                           
 25833                           ; BSR set to: 1
 25834                           ;radio_driver_SX1276.c: 609: else
 25835                           ;radio_driver_SX1276.c: 610: {
 25836                           ;radio_driver_SX1276.c: 611: regValue &= ~(1 << (3));
 25837  000EB0  0100               	movlb	0	; () banked
 25838  000EB2  97A5               	bcf	RADIO_WriteConfiguration@regValue& (0+255),3,b
 25839  000EB4                     l2172:
 25840                           
 25841                           ; BSR set to: 0
 25842                           ;radio_driver_SX1276.c: 612: }
 25843                           ;radio_driver_SX1276.c: 613: regValue |= 1 << (2);
 25844  000EB4  85A5               	bsf	RADIO_WriteConfiguration@regValue& (0+255),2,b
 25845                           
 25846                           ; BSR set to: 0
 25847                           ;radio_driver_SX1276.c: 614: RADIO_RegisterWrite(0x26, regValue);
 25848  000EB6  C0A5  F062         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 25849  000EBA  0E26               	movlw	38
 25850  000EBC  EC2E  F02F         	call	_RADIO_RegisterWrite
 25851                           
 25852                           ;radio_driver_SX1276.c: 616: regValue = RADIO_RegisterRead(0x31);
 25853  000EC0  0E31               	movlw	49
 25854  000EC2  EC64  F02E         	call	_RADIO_RegisterRead
 25855  000EC6  6FA5               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 25856                           
 25857                           ; BSR set to: 0
 25858                           ;radio_driver_SX1276.c: 617: regValue &= ~(0x07);
 25859  000EC8  0EF8               	movlw	248
 25860  000ECA  17A5               	andwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 25861                           
 25862                           ; BSR set to: 0
 25863                           ;radio_driver_SX1276.c: 618: regValue |= 0x03;
 25864  000ECC  0E03               	movlw	3
 25865  000ECE  13A5               	iorwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 25866                           
 25867                           ; BSR set to: 0
 25868                           ;radio_driver_SX1276.c: 619: RADIO_RegisterWrite(0x31, regValue);
 25869  000ED0  D960               	call	PL442	;call to abstracted procedure
 25870  000ED2  EC2E  F02F         	call	_RADIO_RegisterWrite
 25871                           
 25872                           ;radio_driver_SX1276.c: 622: RADIO_RegisterWrite(0x37, 0x0A);
 25873  000ED6  0E0A               	movlw	10
 25874  000ED8  0100               	movlb	0	; () banked
 25875  000EDA  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 25876  000EDC  0E37               	movlw	55
 25877  000EDE  EC2E  F02F         	call	_RADIO_RegisterWrite
 25878                           
 25879                           ;radio_driver_SX1276.c: 625: if (0x12 == RadioConfiguration.regVersion)
 25880  000EE2  0E12               	movlw	18
 25881  000EE4  0101               	movlb	1	; () banked
 25882  000EE6  19B0               	xorwf	(_RadioConfiguration+49)& (0+255),w,b
 25883  000EE8  E125               	bnz	l12630
 25884                           
 25885                           ; BSR set to: 1
 25886                           ;radio_driver_SX1276.c: 626: {
 25887                           ;radio_driver_SX1276.c: 629: if ( (BW_125KHZ == RadioConfiguration.bandWidth) ||
 25888                           ;radio_driver_SX1276.c: 630: (BW_250KHZ == RadioConfiguration.bandWidth) )
 25889  000EEA  0E07               	movlw	7
 25890  000EEC  1999               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 25891  000EEE  E003               	bz	l12612
 25892                           
 25893                           ; BSR set to: 1
 25894  000EF0  0E08               	movlw	8
 25895  000EF2  1999               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 25896  000EF4  E113               	bnz	l12622
 25897  000EF6                     l12612:
 25898                           
 25899                           ; BSR set to: 1
 25900                           ;radio_driver_SX1276.c: 631: {
 25901                           ;radio_driver_SX1276.c: 632: regValue = RADIO_RegisterRead(0x31);
 25902  000EF6  0E31               	movlw	49
 25903  000EF8  EC64  F02E         	call	_RADIO_RegisterRead
 25904  000EFC  6FA5               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 25905                           
 25906                           ; BSR set to: 0
 25907                           ;radio_driver_SX1276.c: 633: regValue &= ~0x80;
 25908  000EFE  9FA5               	bcf	RADIO_WriteConfiguration@regValue& (0+255),7,b
 25909                           
 25910                           ; BSR set to: 0
 25911                           ;radio_driver_SX1276.c: 634: RADIO_RegisterWrite(0x31, regValue);
 25912  000F00  D948               	call	PL442	;call to abstracted procedure
 25913  000F02  EC2E  F02F         	call	_RADIO_RegisterWrite
 25914                           
 25915                           ;radio_driver_SX1276.c: 635: RADIO_RegisterWrite(0x2F, 0x40);
 25916  000F06  0E40               	movlw	64
 25917  000F08  0100               	movlb	0	; () banked
 25918  000F0A  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 25919  000F0C  0E2F               	movlw	47
 25920  000F0E  EC2E  F02F         	call	_RADIO_RegisterWrite
 25921                           
 25922                           ;radio_driver_SX1276.c: 636: RADIO_RegisterWrite(0x30, 0x00);
 25923  000F12  0100               	movlb	0	; () banked
 25924  000F14  6B62               	clrf	RADIO_RegisterWrite@value& (0+255),b
 25925  000F16  0E30               	movlw	48
 25926  000F18  EC2E  F02F         	call	_RADIO_RegisterWrite
 25927  000F1C                     l12622:
 25928                           
 25929                           ;radio_driver_SX1276.c: 637: }
 25930                           ;radio_driver_SX1276.c: 639: if (BW_500KHZ == RadioConfiguration.bandWidth)
 25931  000F1C  0E09               	movlw	9
 25932  000F1E  0101               	movlb	1	; () banked
 25933  000F20  1999               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 25934  000F22  E108               	bnz	l12630
 25935                           
 25936                           ; BSR set to: 1
 25937                           ;radio_driver_SX1276.c: 640: {
 25938                           ;radio_driver_SX1276.c: 641: regValue = RADIO_RegisterRead(0x31);
 25939  000F24  0E31               	movlw	49
 25940  000F26  EC64  F02E         	call	_RADIO_RegisterRead
 25941  000F2A  6FA5               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 25942                           
 25943                           ; BSR set to: 0
 25944                           ;radio_driver_SX1276.c: 642: regValue |= 0x80;
 25945  000F2C  8FA5               	bsf	RADIO_WriteConfiguration@regValue& (0+255),7,b
 25946                           
 25947                           ; BSR set to: 0
 25948                           ;radio_driver_SX1276.c: 643: RADIO_RegisterWrite(0x31, regValue);
 25949  000F2E  D931               	call	PL442	;call to abstracted procedure
 25950  000F30  EC2E  F02F         	call	_RADIO_RegisterWrite
 25951  000F34                     l12630:
 25952                           
 25953                           ;radio_driver_SX1276.c: 644: }
 25954                           ;radio_driver_SX1276.c: 645: }
 25955                           ;radio_driver_SX1276.c: 647: regValue = RADIO_RegisterRead(0x33);
 25956  000F34  0E33               	movlw	51
 25957  000F36  EC64  F02E         	call	_RADIO_RegisterRead
 25958  000F3A  6FA5               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 25959                           
 25960                           ; BSR set to: 0
 25961                           ;radio_driver_SX1276.c: 648: regValue &= ~(1 << (6));
 25962  000F3C  9DA5               	bcf	RADIO_WriteConfiguration@regValue& (0+255),6,b
 25963                           
 25964                           ; BSR set to: 0
 25965                           ;radio_driver_SX1276.c: 649: regValue |= (1 << (0));
 25966  000F3E  81A5               	bsf	RADIO_WriteConfiguration@regValue& (0+255),0,b
 25967                           
 25968                           ; BSR set to: 0
 25969                           ;radio_driver_SX1276.c: 650: regValue |= (RadioConfiguration.iqInverted & 0x01) << (6);
 25970  000F40  C19F  F09E         	movff	_RadioConfiguration+32,??_RADIO_WriteConfiguration
 25971  000F44  0E01               	movlw	1
 25972  000F46  179E               	andwf	??_RADIO_WriteConfiguration& (0+255),f,b
 25973  000F48  0E06               	movlw	6
 25974  000F4A  6F9F               	movwf	(??_RADIO_WriteConfiguration+1)& (0+255),b
 25975  000F4C                     u13655:
 25976  000F4C  90D8               	bcf	status,0,c
 25977  000F4E  379E               	rlcf	??_RADIO_WriteConfiguration& (0+255),f,b
 25978  000F50  2F9F               	decfsz	(??_RADIO_WriteConfiguration+1)& (0+255),f,b
 25979  000F52  D7FC               	goto	u13655
 25980  000F54  519E               	movf	??_RADIO_WriteConfiguration& (0+255),w,b
 25981  000F56  13A5               	iorwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 25982                           
 25983                           ; BSR set to: 0
 25984                           ;radio_driver_SX1276.c: 651: RADIO_RegisterWrite(0x33, regValue);
 25985  000F58  C0A5  F062         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 25986  000F5C  0E33               	movlw	51
 25987  000F5E  EC2E  F02F         	call	_RADIO_RegisterWrite
 25988                           
 25989                           ;radio_driver_SX1276.c: 653: regValue = 0x1D & (~((RadioConfiguration.iqInverted & 0x01)
      +                           << (2)));
 25990  000F62  C19F  F09E         	movff	_RadioConfiguration+32,??_RADIO_WriteConfiguration
 25991  000F66  0E01               	movlw	1
 25992  000F68  0100               	movlb	0	; () banked
 25993  000F6A  179E               	andwf	??_RADIO_WriteConfiguration& (0+255),f,b
 25994  000F6C  90D8               	bcf	status,0,c
 25995  000F6E  379E               	rlcf	??_RADIO_WriteConfiguration& (0+255),f,b
 25996  000F70  90D8               	bcf	status,0,c
 25997  000F72  359E               	rlcf	??_RADIO_WriteConfiguration& (0+255),w,b
 25998  000F74  0AFF               	xorlw	255
 25999  000F76  0B1D               	andlw	29
 26000  000F78  6FA5               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 26001                           
 26002                           ; BSR set to: 0
 26003                           ;radio_driver_SX1276.c: 654: RADIO_RegisterWrite(0x3B, regValue);
 26004  000F7A  C0A5  F062         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 26005  000F7E  0E3B               	movlw	59
 26006  000F80  EC2E  F02F         	call	_RADIO_RegisterWrite
 26007                           
 26008                           ;radio_driver_SX1276.c: 656: RADIO_RegisterWrite(0x20, RadioConfiguration.preambleLen >>
      +                           (8));
 26009  000F84  D8EF               	call	PL358	;call to abstracted procedure
 26010  000F86  0E20               	movlw	32
 26011  000F88  EC2E  F02F         	call	_RADIO_RegisterWrite
 26012                           
 26013                           ;radio_driver_SX1276.c: 657: RADIO_RegisterWrite(0x21, RadioConfiguration.preambleLen & 
      +                          0xFF);
 26014  000F8C  C18B  F062         	movff	_RadioConfiguration+12,RADIO_RegisterWrite@value
 26015  000F90  0E21               	movlw	33
 26016  000F92  EC2E  F02F         	call	_RADIO_RegisterWrite
 26017                           
 26018                           ;radio_driver_SX1276.c: 659: RADIO_RegisterWrite(0x0D, 0x00);
 26019  000F96  D903               	call	PL456	;call to abstracted procedure
 26020  000F98  EC2E  F02F         	call	_RADIO_RegisterWrite
 26021                           
 26022                           ;radio_driver_SX1276.c: 660: RADIO_RegisterWrite(0x0E, 0x00);
 26023  000F9C  0100               	movlb	0	; () banked
 26024  000F9E  6B62               	clrf	RADIO_RegisterWrite@value& (0+255),b
 26025  000FA0  0E0E               	movlw	14
 26026  000FA2  EC2E  F02F         	call	_RADIO_RegisterWrite
 26027                           
 26028                           ;radio_driver_SX1276.c: 661: RADIO_RegisterWrite(0x0F, 0x00);
 26029  000FA6  0100               	movlb	0	; () banked
 26030  000FA8  6B62               	clrf	RADIO_RegisterWrite@value& (0+255),b
 26031  000FAA  0E0F               	movlw	15
 26032  000FAC  EC2E  F02F         	call	_RADIO_RegisterWrite
 26033                           
 26034                           ;radio_driver_SX1276.c: 664: if (0x12 == RadioConfiguration.regVersion)
 26035  000FB0  0E12               	movlw	18
 26036  000FB2  0101               	movlb	1	; () banked
 26037  000FB4  19B0               	xorwf	(_RadioConfiguration+49)& (0+255),w,b
 26038  000FB6  E154               	bnz	l2178
 26039                           
 26040                           ; BSR set to: 1
 26041                           ;radio_driver_SX1276.c: 665: {
 26042                           ;radio_driver_SX1276.c: 666: if ( (BW_500KHZ == RadioConfiguration.bandWidth) &&
 26043                           ;radio_driver_SX1276.c: 667: (RadioConfiguration.frequency >= 862000000) &&
 26044                           ;radio_driver_SX1276.c: 668: (RadioConfiguration.frequency <= 1020000000)
 26045                           ;radio_driver_SX1276.c: 669: )
 26046  000FB8  0E09               	movlw	9
 26047  000FBA  1999               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 26048  000FBC  E119               	bnz	l12664
 26049                           
 26050                           ; BSR set to: 1
 26051  000FBE  0E80               	movlw	128
 26052  000FC0  5D7F               	subwf	_RadioConfiguration& (0+255),w,b
 26053  000FC2  0E13               	movlw	19
 26054  000FC4  5980               	subwfb	(_RadioConfiguration+1)& (0+255),w,b
 26055  000FC6  0E61               	movlw	97
 26056  000FC8  5981               	subwfb	(_RadioConfiguration+2)& (0+255),w,b
 26057  000FCA  0E33               	movlw	51
 26058  000FCC  5982               	subwfb	(_RadioConfiguration+3)& (0+255),w,b
 26059  000FCE  E310               	bnc	l12664
 26060                           
 26061                           ; BSR set to: 1
 26062  000FD0  057F               	decf	_RadioConfiguration& (0+255),w,b
 26063  000FD2  0EF7               	movlw	247
 26064  000FD4  5980               	subwfb	(_RadioConfiguration+1)& (0+255),w,b
 26065  000FD6  0ECB               	movlw	203
 26066  000FD8  5981               	subwfb	(_RadioConfiguration+2)& (0+255),w,b
 26067  000FDA  0E3C               	movlw	60
 26068  000FDC  5982               	subwfb	(_RadioConfiguration+3)& (0+255),w,b
 26069  000FDE  E208               	bc	l12664
 26070                           
 26071                           ; BSR set to: 1
 26072                           ;radio_driver_SX1276.c: 670: {
 26073                           ;radio_driver_SX1276.c: 671: RADIO_RegisterWrite(0x36, 0x02);
 26074  000FE0  D8CD               	call	PL404	;call to abstracted procedure
 26075  000FE2  EC2E  F02F         	call	_RADIO_RegisterWrite
 26076                           
 26077                           ;radio_driver_SX1276.c: 672: RADIO_RegisterWrite(0x3a, 0x64);
 26078  000FE6  0E64               	movlw	100
 26079  000FE8  D8C6               	call	PL372	;call to abstracted procedure
 26080  000FEA  EC2E  F02F         	call	_RADIO_RegisterWrite
 26081                           
 26082                           ;radio_driver_SX1276.c: 673: }
 26083  000FEE  D023               	goto	l12674
 26084  000FF0                     l12664:
 26085                           
 26086                           ; BSR set to: 1
 26087                           ;radio_driver_SX1276.c: 674: else if ( (BW_500KHZ == RadioConfiguration.bandWidth) &&
 26088                           ;radio_driver_SX1276.c: 675: (RadioConfiguration.frequency >= 410000000) &&
 26089                           ;radio_driver_SX1276.c: 676: (RadioConfiguration.frequency <= 525000000)
 26090                           ;radio_driver_SX1276.c: 677: )
 26091  000FF0  0E09               	movlw	9
 26092  000FF2  1999               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 26093  000FF4  E11A               	bnz	l12672
 26094                           
 26095                           ; BSR set to: 1
 26096  000FF6  0E80               	movlw	128
 26097  000FF8  5D7F               	subwf	_RadioConfiguration& (0+255),w,b
 26098  000FFA  0E1A               	movlw	26
 26099  000FFC  5980               	subwfb	(_RadioConfiguration+1)& (0+255),w,b
 26100  000FFE  0E70               	movlw	112
 26101  001000  5981               	subwfb	(_RadioConfiguration+2)& (0+255),w,b
 26102  001002  0E18               	movlw	24
 26103  001004  5982               	subwfb	(_RadioConfiguration+3)& (0+255),w,b
 26104  001006  E311               	bnc	l12672
 26105                           
 26106                           ; BSR set to: 1
 26107  001008  0E41               	movlw	65
 26108  00100A  5D7F               	subwf	_RadioConfiguration& (0+255),w,b
 26109  00100C  0EDD               	movlw	221
 26110  00100E  5980               	subwfb	(_RadioConfiguration+1)& (0+255),w,b
 26111  001010  0E4A               	movlw	74
 26112  001012  5981               	subwfb	(_RadioConfiguration+2)& (0+255),w,b
 26113  001014  0E1F               	movlw	31
 26114  001016  5982               	subwfb	(_RadioConfiguration+3)& (0+255),w,b
 26115  001018  E208               	bc	l12672
 26116                           
 26117                           ; BSR set to: 1
 26118                           ;radio_driver_SX1276.c: 678: {
 26119                           ;radio_driver_SX1276.c: 679: RADIO_RegisterWrite(0x36, 0x02);
 26120  00101A  D8B0               	call	PL404	;call to abstracted procedure
 26121  00101C  EC2E  F02F         	call	_RADIO_RegisterWrite
 26122                           
 26123                           ;radio_driver_SX1276.c: 680: RADIO_RegisterWrite(0x3a, 0x7F);
 26124  001020  0E7F               	movlw	127
 26125  001022  D8A9               	call	PL372	;call to abstracted procedure
 26126  001024  EC2E  F02F         	call	_RADIO_RegisterWrite
 26127                           
 26128                           ;radio_driver_SX1276.c: 681: }
 26129  001028  D006               	goto	l12674
 26130  00102A                     l12672:
 26131                           
 26132                           ; BSR set to: 1
 26133                           ;radio_driver_SX1276.c: 682: else
 26134                           ;radio_driver_SX1276.c: 683: {
 26135                           ;radio_driver_SX1276.c: 684: RADIO_RegisterWrite(0x36, 0x03);
 26136  00102A  0E03               	movlw	3
 26137  00102C  0100               	movlb	0	; () banked
 26138  00102E  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26139  001030  0E36               	movlw	54
 26140  001032  EC2E  F02F         	call	_RADIO_RegisterWrite
 26141  001036                     l12674:
 26142                           
 26143                           ;radio_driver_SX1276.c: 685: }
 26144                           ;radio_driver_SX1276.c: 688: if ((BW_500KHZ == RadioConfiguration.bandWidth) && (1 == Ra
      +                          dioConfiguration.iqInverted))
 26145  001036  0E09               	movlw	9
 26146  001038  0101               	movlb	1	; () banked
 26147  00103A  1999               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 26148  00103C  E10A               	bnz	l12680
 26149                           
 26150                           ; BSR set to: 1
 26151  00103E  059F               	decf	(_RadioConfiguration+32)& (0+255),w,b
 26152  001040  E108               	bnz	l12680
 26153                           
 26154                           ; BSR set to: 1
 26155                           ;radio_driver_SX1276.c: 689: {
 26156                           ;radio_driver_SX1276.c: 690: RADIO_RegisterWrite(0x3A, 0x65);
 26157  001042  D895               	call	PL364	;call to abstracted procedure
 26158  001044  EC2E  F02F         	call	_RADIO_RegisterWrite
 26159                           
 26160                           ;radio_driver_SX1276.c: 691: RADIO_RegisterWrite(0x3B, 25);
 26161  001048  0E19               	movlw	25
 26162  00104A  D89C               	call	PL432	;call to abstracted procedure
 26163  00104C  EC2E  F02F         	call	_RADIO_RegisterWrite
 26164                           
 26165                           ;radio_driver_SX1276.c: 692: }
 26166  001050  D007               	goto	l2178
 26167  001052                     l12680:
 26168                           
 26169                           ; BSR set to: 1
 26170                           ;radio_driver_SX1276.c: 693: else
 26171                           ;radio_driver_SX1276.c: 694: {
 26172                           ;radio_driver_SX1276.c: 695: RADIO_RegisterWrite(0x3A, 0x65);
 26173  001052  D88D               	call	PL364	;call to abstracted procedure
 26174  001054  EC2E  F02F         	call	_RADIO_RegisterWrite
 26175                           
 26176                           ;radio_driver_SX1276.c: 696: RADIO_RegisterWrite(0x3B, 29);
 26177  001058  0E1D               	movlw	29
 26178  00105A  D894               	call	PL432	;call to abstracted procedure
 26179  00105C  EC2E  F02F         	call	_RADIO_RegisterWrite
 26180  001060                     l2178:
 26181                           
 26182                           ;radio_driver_SX1276.c: 697: }
 26183                           ;radio_driver_SX1276.c: 698: }
 26184                           ;radio_driver_SX1276.c: 701: RADIO_RegisterWrite(0x12, 0xFF);
 26185  001060  ECA1  F024         	call	PL454	;call to abstracted procedure
 26186  001064  EF2E  F02F         	goto	_RADIO_RegisterWrite
 26187  001068                     l12682:
 26188                           
 26189                           ; BSR set to: 1
 26190                           ;radio_driver_SX1276.c: 703: else
 26191                           ;radio_driver_SX1276.c: 704: {
 26192                           ;radio_driver_SX1276.c: 706: RADIO_WriteFSKFrequencyDeviation(RadioConfiguration.frequen
      +                          cyDeviation);
 26193  001068  C183  F06D         	movff	_RadioConfiguration+4,RADIO_WriteFSKFrequencyDeviation@frequencyDeviation
 26194  00106C  C184  F06E         	movff	_RadioConfiguration+5,RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+1
 26195  001070  C185  F06F         	movff	_RadioConfiguration+6,RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+2
 26196  001074  C186  F070         	movff	_RadioConfiguration+7,RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+3
 26197  001078  EC57  F027         	call	_RADIO_WriteFSKFrequencyDeviation	;wreg free
 26198                           
 26199                           ;radio_driver_SX1276.c: 707: RADIO_WriteFSKBitRate(RadioConfiguration.bitRate);
 26200  00107C  C187  F06D         	movff	_RadioConfiguration+8,RADIO_WriteFSKBitRate@bitRate
 26201  001080  C188  F06E         	movff	_RadioConfiguration+9,RADIO_WriteFSKBitRate@bitRate+1
 26202  001084  C189  F06F         	movff	_RadioConfiguration+10,RADIO_WriteFSKBitRate@bitRate+2
 26203  001088  C18A  F070         	movff	_RadioConfiguration+11,RADIO_WriteFSKBitRate@bitRate+3
 26204  00108C  ECF5  F026         	call	_RADIO_WriteFSKBitRate	;wreg free
 26205                           
 26206                           ;radio_driver_SX1276.c: 709: RADIO_RegisterWrite(0x25, RadioConfiguration.preambleLen >>
      +                           (8));
 26207  001090  D869               	call	PL358	;call to abstracted procedure
 26208  001092  0E25               	movlw	37
 26209  001094  EC2E  F02F         	call	_RADIO_RegisterWrite
 26210                           
 26211                           ;radio_driver_SX1276.c: 710: RADIO_RegisterWrite(0x26, RadioConfiguration.preambleLen & 
      +                          0xFF);
 26212  001098  C18B  F062         	movff	_RadioConfiguration+12,RADIO_RegisterWrite@value
 26213  00109C  0E26               	movlw	38
 26214  00109E  EC2E  F02F         	call	_RADIO_RegisterWrite
 26215                           
 26216                           ;radio_driver_SX1276.c: 713: regValue = RADIO_RegisterRead(0x0A);
 26217  0010A2  0E0A               	movlw	10
 26218  0010A4  EC64  F02E         	call	_RADIO_RegisterRead
 26219  0010A8  6FA5               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 26220                           
 26221                           ; BSR set to: 0
 26222                           ;radio_driver_SX1276.c: 714: regValue &= ~0x60;
 26223  0010AA  0E9F               	movlw	159
 26224  0010AC  17A5               	andwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 26225                           
 26226                           ; BSR set to: 0
 26227                           ;radio_driver_SX1276.c: 715: regValue |= RadioConfiguration.fskDataShaping << (5);
 26228  0010AE  0101               	movlb	1	; () banked
 26229  0010B0  39B2               	swapf	(_RadioConfiguration+51)& (0+255),w,b
 26230  0010B2  46E8               	rlncf	wreg,f,c
 26231  0010B4  0BE0               	andlw	224
 26232  0010B6  0100               	movlb	0	; () banked
 26233  0010B8  13A5               	iorwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 26234                           
 26235                           ;radio_driver_SX1276.c: 716: RADIO_RegisterWrite(0x0A, regValue);
 26236  0010BA  C0A5  F062         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 26237  0010BE  0E0A               	movlw	10
 26238  0010C0  EC2E  F02F         	call	_RADIO_RegisterWrite
 26239                           
 26240                           ;radio_driver_SX1276.c: 720: regValue = 0xC8;
 26241  0010C4  0EC8               	movlw	200
 26242  0010C6  0100               	movlb	0	; () banked
 26243  0010C8  6FA5               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 26244                           
 26245                           ; BSR set to: 0
 26246                           ;radio_driver_SX1276.c: 721: if (RadioConfiguration.crcOn)
 26247  0010CA  0101               	movlb	1	; () banked
 26248  0010CC  519B               	movf	(_RadioConfiguration+28)& (0+255),w,b
 26249  0010CE  E002               	bz	l12694
 26250                           
 26251                           ; BSR set to: 1
 26252                           ;radio_driver_SX1276.c: 722: {
 26253                           ;radio_driver_SX1276.c: 723: regValue |= 0x10;
 26254  0010D0  0100               	movlb	0	; () banked
 26255  0010D2  89A5               	bsf	RADIO_WriteConfiguration@regValue& (0+255),4,b
 26256  0010D4                     l12694:
 26257                           
 26258                           ;radio_driver_SX1276.c: 724: }
 26259                           ;radio_driver_SX1276.c: 725: RADIO_RegisterWrite(0x30, regValue);
 26260  0010D4  C0A5  F062         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 26261  0010D8  0E30               	movlw	48
 26262  0010DA  EC2E  F02F         	call	_RADIO_RegisterWrite
 26263                           
 26264                           ;radio_driver_SX1276.c: 728: for (i = 0; i < RadioConfiguration.syncWordLen; i++)
 26265  0010DE  0100               	movlb	0	; () banked
 26266  0010E0  6BA0               	clrf	RADIO_WriteConfiguration@i& (0+255),b
 26267  0010E2  D00E               	goto	l12702
 26268  0010E4                     l12698:
 26269                           
 26270                           ; BSR set to: 0
 26271                           ;radio_driver_SX1276.c: 729: {
 26272                           ;radio_driver_SX1276.c: 732: RADIO_RegisterWrite(0x28 + i, RadioConfiguration.syncWord[i
      +                          ]);
 26273  0010E4  0E8E               	movlw	low (_RadioConfiguration+15)
 26274  0010E6  25A0               	addwf	RADIO_WriteConfiguration@i& (0+255),w,b
 26275  0010E8  6ED9               	movwf	fsr2l,c
 26276  0010EA  6ADA               	clrf	fsr2h,c
 26277  0010EC  0E01               	movlw	high (_RadioConfiguration+15)
 26278  0010EE  22DA               	addwfc	fsr2h,f,c
 26279  0010F0  50DF               	movf	indf2,w,c
 26280  0010F2  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26281  0010F4  51A0               	movf	RADIO_WriteConfiguration@i& (0+255),w,b
 26282  0010F6  0F28               	addlw	40
 26283  0010F8  EC2E  F02F         	call	_RADIO_RegisterWrite
 26284  0010FC  0100               	movlb	0	; () banked
 26285  0010FE  2BA0               	incf	RADIO_WriteConfiguration@i& (0+255),f,b
 26286  001100                     l12702:
 26287                           
 26288                           ; BSR set to: 0
 26289  001100  0101               	movlb	1	; () banked
 26290  001102  5196               	movf	(_RadioConfiguration+23)& (0+255),w,b
 26291  001104  0100               	movlb	0	; () banked
 26292  001106  5DA0               	subwf	RADIO_WriteConfiguration@i& (0+255),w,b
 26293  001108  E3ED               	bnc	l12698
 26294                           
 26295                           ; BSR set to: 0
 26296                           ;radio_driver_SX1276.c: 733: }
 26297                           ;radio_driver_SX1276.c: 736: if (RadioConfiguration.syncWordLen != 0)
 26298  00110A  0101               	movlb	1	; () banked
 26299  00110C  5196               	movf	(_RadioConfiguration+23)& (0+255),w,b
 26300  00110E  E008               	bz	l12708
 26301                           
 26302                           ; BSR set to: 1
 26303                           ;radio_driver_SX1276.c: 737: {
 26304                           ;radio_driver_SX1276.c: 738: RADIO_RegisterWrite(0x27, 0x10 | (RadioConfiguration.syncWo
      +                          rdLen - 1));
 26305  001110  0596               	decf	(_RadioConfiguration+23)& (0+255),w,b
 26306  001112  0910               	iorlw	16
 26307  001114  0100               	movlb	0	; () banked
 26308  001116  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26309  001118  0E27               	movlw	39
 26310  00111A  EC2E  F02F         	call	_RADIO_RegisterWrite
 26311                           
 26312                           ;radio_driver_SX1276.c: 739: }
 26313  00111E  D005               	goto	l2191
 26314  001120                     l12708:
 26315                           
 26316                           ; BSR set to: 1
 26317                           ;radio_driver_SX1276.c: 740: else
 26318                           ;radio_driver_SX1276.c: 741: {
 26319                           ;radio_driver_SX1276.c: 742: RADIO_RegisterWrite(0x27, 0x00);
 26320  001120  0100               	movlb	0	; () banked
 26321  001122  6B62               	clrf	RADIO_RegisterWrite@value& (0+255),b
 26322  001124  0E27               	movlw	39
 26323  001126  EC2E  F02F         	call	_RADIO_RegisterWrite
 26324  00112A                     l2191:
 26325                           
 26326                           ;radio_driver_SX1276.c: 743: }
 26327                           ;radio_driver_SX1276.c: 746: RADIO_RegisterWrite(0x3E, 0xFF);
 26328  00112A  0100               	movlb	0	; () banked
 26329  00112C  6962               	setf	RADIO_RegisterWrite@value& (0+255),b
 26330  00112E  0E3E               	movlw	62
 26331  001130  EC2E  F02F         	call	_RADIO_RegisterWrite
 26332                           
 26333                           ;radio_driver_SX1276.c: 747: RADIO_RegisterWrite(0x3F, 0xFF);
 26334  001134  D831               	call	PL444	;call to abstracted procedure
 26335  001136  EF2E  F02F         	goto	_RADIO_RegisterWrite
 26336  00113A                     __end_of_RADIO_WriteConfiguration:
 26337                           	opt stack 0
 26338  00113A                     PL122:
 26339                           	opt stack 16
 26340  00113A  C0A1  F090         	movff	RADIO_WriteConfiguration@tempValue,___lmul@multiplier
 26341  00113E  C0A2  F091         	movff	RADIO_WriteConfiguration@tempValue+1,___lmul@multiplier+1
 26342  001142  C0A3  F092         	movff	RADIO_WriteConfiguration@tempValue+2,___lmul@multiplier+2
 26343  001146  C0A4  F093         	movff	RADIO_WriteConfiguration@tempValue+3,___lmul@multiplier+3
 26344  00114A  0012               	return	
 26345  00114C                     __end_ofPL122:
 26346                           	opt stack 0
 26347  00114C                     PL338:
 26348                           	opt stack 16
 26349  00114C  0BF0               	andlw	240
 26350  00114E  0100               	movlb	0	; () banked
 26351  001150  119F               	iorwf	(??_RADIO_WriteConfiguration+1)& (0+255),w,b
 26352  001152  119E               	iorwf	??_RADIO_WriteConfiguration& (0+255),w,b
 26353  001154  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26354  001156  0012               	return	
 26355  001158                     __end_ofPL338:
 26356                           	opt stack 0
 26357  001158                     PL350:
 26358                           	opt stack 16
 26359  001158  0100               	movlb	0	; () banked
 26360  00115A  6BA1               	clrf	RADIO_WriteConfiguration@tempValue& (0+255),b
 26361  00115C  6BA2               	clrf	(RADIO_WriteConfiguration@tempValue+1)& (0+255),b
 26362  00115E  6BA3               	clrf	(RADIO_WriteConfiguration@tempValue+2)& (0+255),b
 26363  001160  6BA4               	clrf	(RADIO_WriteConfiguration@tempValue+3)& (0+255),b
 26364  001162  0012               	return	
 26365  001164                     __end_ofPL350:
 26366                           	opt stack 0
 26367  001164                     PL358:
 26368                           	opt stack 16
 26369  001164  0101               	movlb	1	; () banked
 26370  001166  518C               	movf	(_RadioConfiguration+13)& (0+255),w,b
 26371  001168  0100               	movlb	0	; () banked
 26372  00116A  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26373  00116C  0012               	return	
 26374  00116E                     __end_ofPL358:
 26375                           	opt stack 0
 26376  00116E                     PL364:
 26377                           	opt stack 16
 26378  00116E  0E65               	movlw	101
 26379  001170  0100               	movlb	0	; () banked
 26380  001172  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26381  001174  0C3A               	retlw	58
 26382  001176                     __end_ofPL364:
 26383                           	opt stack 0
 26384  001176                     PL372:
 26385                           	opt stack 16
 26386  001176  0100               	movlb	0	; () banked
 26387  001178  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26388  00117A  0C3A               	retlw	58
 26389  00117C                     __end_ofPL372:
 26390                           	opt stack 0
 26391  00117C                     PL404:
 26392                           	opt stack 16
 26393  00117C  0E02               	movlw	2
 26394  00117E  0100               	movlb	0	; () banked
 26395  001180  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26396  001182  0C36               	retlw	54
 26397  001184                     __end_ofPL404:
 26398                           	opt stack 0
 26399  001184                     PL432:
 26400                           	opt stack 16
 26401  001184  0100               	movlb	0	; () banked
 26402  001186  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26403  001188  0C3B               	retlw	59
 26404  00118A                     __end_ofPL432:
 26405                           	opt stack 0
 26406  00118A                     PL438:
 26407                           	opt stack 13
 26408  00118A  6F95               	movwf	(___lmul@multiplicand+1)& (0+255),b
 26409  00118C  6B96               	clrf	(___lmul@multiplicand+2)& (0+255),b
 26410  00118E  6B97               	clrf	(___lmul@multiplicand+3)& (0+255),b
 26411  001190  0012               	return	
 26412  001192                     __end_ofPL438:
 26413                           	opt stack 0
 26414  001192                     PL442:
 26415                           	opt stack 16
 26416  001192  C0A5  F062         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 26417  001196  0C31               	retlw	49
 26418  001198                     __end_ofPL442:
 26419                           	opt stack 0
 26420  001198                     PL444:
 26421                           	opt stack 18
 26422  001198  0100               	movlb	0	; () banked
 26423  00119A  6962               	setf	RADIO_RegisterWrite@value& (0+255),b
 26424  00119C  0C3F               	retlw	63
 26425  00119E                     __end_ofPL444:
 26426                           	opt stack 0
 26427  00119E                     PL456:
 26428                           	opt stack 12
 26429  00119E  0100               	movlb	0	; () banked
 26430  0011A0  6B62               	clrf	RADIO_RegisterWrite@value& (0+255),b
 26431  0011A2  0C0D               	retlw	13
 26432  0011A4                     __end_ofPL456:
 26433                           	opt stack 0
 26434                           tosu	equ	0xFFF
 26435                           tosh	equ	0xFFE
 26436                           tosl	equ	0xFFD
 26437                           pclath	equ	0xFFA
 26438                           tblptru	equ	0xFF8
 26439                           tblptrh	equ	0xFF7
 26440                           tblptrl	equ	0xFF6
 26441                           tablat	equ	0xFF5
 26442                           prodh	equ	0xFF4
 26443                           prodl	equ	0xFF3
 26444                           intcon	equ	0xFF2
 26445                           indf0	equ	0xFEF
 26446                           postinc0	equ	0xFEE
 26447                           plusw0	equ	0xFEB
 26448                           fsr0h	equ	0xFEA
 26449                           fsr0l	equ	0xFE9
 26450                           wreg	equ	0xFE8
 26451                           postinc1	equ	0xFE6
 26452                           postdec1	equ	0xFE5
 26453                           plusw1	equ	0xFE3
 26454                           fsr1h	equ	0xFE2
 26455                           fsr1l	equ	0xFE1
 26456                           indf2	equ	0xFDF
 26457                           postinc2	equ	0xFDE
 26458                           postdec2	equ	0xFDD
 26459                           plusw2	equ	0xFDB
 26460                           fsr2h	equ	0xFDA
 26461                           fsr2l	equ	0xFD9
 26462                           status	equ	0xFD8
 26463                           
 26464 ;; *************** function _RADIO_WritePower *****************
 26465 ;; Defined at:
 26466 ;;		line 342 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 26467 ;; Parameters:    Size  Location     Type
 26468 ;;  power           1    wreg     char 
 26469 ;; Auto vars:     Size  Location     Type
 26470 ;;  power           1    6[BANK0 ] char 
 26471 ;;  paDac           1    5[BANK0 ] unsigned char 
 26472 ;;  ocp             1    4[BANK0 ] unsigned char 
 26473 ;; Return value:  Size  Location     Type
 26474 ;;                  1    wreg      void 
 26475 ;; Registers used:
 26476 ;;		wreg, status,2, status,0, cstack
 26477 ;; Tracked objects:
 26478 ;;		On entry : 3F/1
 26479 ;;		On exit  : 31/0
 26480 ;;		Unchanged: 0/0
 26481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 26482 ;;      Params:         0       0       0       0       0       0       0       0       0
 26483 ;;      Locals:         0       3       0       0       0       0       0       0       0
 26484 ;;      Temps:          0       0       0       0       0       0       0       0       0
 26485 ;;      Totals:         0       3       0       0       0       0       0       0       0
 26486 ;;Total ram usage:        3 bytes
 26487 ;; Hardware stack levels used:    1
 26488 ;; Hardware stack levels required when called:   10
 26489 ;; This function calls:
 26490 ;;		_RADIO_RegisterRead
 26491 ;;		_RADIO_RegisterWrite
 26492 ;; This function is called by:
 26493 ;;		_RADIO_WriteConfiguration
 26494 ;; This function uses a non-reentrant model
 26495 ;;
 26496                           
 26497                           	psect	text137
 26498  003918                     __ptext137:
 26499                           	opt stack 0
 26500  003918                     _RADIO_WritePower:
 26501                           	opt stack 16
 26502                           
 26503                           ;incstack = 0
 26504                           ;RADIO_WritePower@power stored from wreg
 26505  003918  0100               	movlb	0	; () banked
 26506  00391A  6F66               	movwf	RADIO_WritePower@power& (0+255),b
 26507                           
 26508                           ;radio_driver_SX1276.c: 344: uint8_t paDac;
 26509                           ;radio_driver_SX1276.c: 345: uint8_t ocp;
 26510                           ;radio_driver_SX1276.c: 347: if (RadioConfiguration.paBoost == 0)
 26511  00391C  0101               	movlb	1	; () banked
 26512  00391E  519C               	movf	(_RadioConfiguration+29)& (0+255),w,b
 26513  003920  E125               	bnz	l12306
 26514                           
 26515                           ; BSR set to: 1
 26516                           ;radio_driver_SX1276.c: 348: {
 26517                           ;radio_driver_SX1276.c: 350: if (power < -3)
 26518  003922  0100               	movlb	0	; () banked
 26519  003924  5166               	movf	RADIO_WritePower@power& (0+255),w,b
 26520  003926  0A80               	xorlw	128
 26521  003928  0F83               	addlw	131
 26522  00392A  E202               	bc	l12286
 26523                           
 26524                           ; BSR set to: 0
 26525                           ;radio_driver_SX1276.c: 351: {
 26526                           ;radio_driver_SX1276.c: 352: power = -3;
 26527  00392C  0EFD               	movlw	253
 26528  00392E  6F66               	movwf	RADIO_WritePower@power& (0+255),b
 26529  003930                     l12286:
 26530                           
 26531                           ; BSR set to: 0
 26532                           ;radio_driver_SX1276.c: 353: }
 26533                           ;radio_driver_SX1276.c: 354: if (power > 15)
 26534  003930  5166               	movf	RADIO_WritePower@power& (0+255),w,b
 26535  003932  0A80               	xorlw	128
 26536  003934  0F70               	addlw	-144
 26537  003936  E302               	bnc	l12290
 26538                           
 26539                           ; BSR set to: 0
 26540                           ;radio_driver_SX1276.c: 355: {
 26541                           ;radio_driver_SX1276.c: 356: power = 15;
 26542  003938  0E0F               	movlw	15
 26543  00393A  6F66               	movwf	RADIO_WritePower@power& (0+255),b
 26544  00393C                     l12290:
 26545                           
 26546                           ; BSR set to: 0
 26547                           ;radio_driver_SX1276.c: 357: }
 26548                           ;radio_driver_SX1276.c: 359: paDac = RADIO_RegisterRead(0x4D);
 26549  00393C  0E4D               	movlw	77
 26550  00393E  EC64  F02E         	call	_RADIO_RegisterRead
 26551  003942  6F65               	movwf	RADIO_WritePower@paDac& (0+255),b
 26552                           
 26553                           ; BSR set to: 0
 26554                           ;radio_driver_SX1276.c: 360: paDac &= ~(0x07);
 26555  003944  0EF8               	movlw	248
 26556  003946  1765               	andwf	RADIO_WritePower@paDac& (0+255),f,b
 26557                           
 26558                           ; BSR set to: 0
 26559                           ;radio_driver_SX1276.c: 361: paDac |= 0x04;
 26560  003948  8565               	bsf	RADIO_WritePower@paDac& (0+255),2,b
 26561                           
 26562                           ; BSR set to: 0
 26563                           ;radio_driver_SX1276.c: 362: RADIO_RegisterWrite(0x4D, paDac);
 26564  00394A  D849               	call	PL460	;call to abstracted procedure
 26565  00394C  EC2E  F02F         	call	_RADIO_RegisterWrite
 26566                           
 26567                           ;radio_driver_SX1276.c: 364: if (power < 0)
 26568  003950  0100               	movlb	0	; () banked
 26569  003952  AF66               	btfss	RADIO_WritePower@power& (0+255),7,b
 26570  003954  D005               	goto	l12304
 26571                           
 26572                           ; BSR set to: 0
 26573                           ;radio_driver_SX1276.c: 365: {
 26574                           ;radio_driver_SX1276.c: 369: power += 3;
 26575  003956  0E03               	movlw	3
 26576  003958  2766               	addwf	RADIO_WritePower@power& (0+255),f,b
 26577                           
 26578                           ; BSR set to: 0
 26579                           ;radio_driver_SX1276.c: 370: RADIO_RegisterWrite(0x09, 0x20 | power);
 26580  00395A  5166               	movf	RADIO_WritePower@power& (0+255),w,b
 26581  00395C  0920               	iorlw	32
 26582  00395E  D002               	goto	L22
 26583  003960                     l12304:
 26584                           
 26585                           ; BSR set to: 0
 26586                           ;radio_driver_SX1276.c: 372: else
 26587                           ;radio_driver_SX1276.c: 373: {
 26588                           ;radio_driver_SX1276.c: 377: RADIO_RegisterWrite(0x09, 0x70 | power);
 26589  003960  5166               	movf	RADIO_WritePower@power& (0+255),w,b
 26590  003962  0970               	iorlw	112
 26591  003964                     L22:
 26592  003964  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26593  003966  0E09               	movlw	9
 26594  003968  EF2E  F02F         	goto	_RADIO_RegisterWrite
 26595  00396C                     l12306:
 26596                           
 26597                           ; BSR set to: 1
 26598                           ;radio_driver_SX1276.c: 380: else
 26599                           ;radio_driver_SX1276.c: 381: {
 26600                           ;radio_driver_SX1276.c: 385: if (power < 2)
 26601  00396C  0100               	movlb	0	; () banked
 26602  00396E  5166               	movf	RADIO_WritePower@power& (0+255),w,b
 26603  003970  0A80               	xorlw	128
 26604  003972  0F7E               	addlw	-130
 26605  003974  E202               	bc	l12310
 26606                           
 26607                           ; BSR set to: 0
 26608                           ;radio_driver_SX1276.c: 386: {
 26609                           ;radio_driver_SX1276.c: 387: power = 2;
 26610  003976  0E02               	movlw	2
 26611  003978  6F66               	movwf	RADIO_WritePower@power& (0+255),b
 26612  00397A                     l12310:
 26613                           
 26614                           ; BSR set to: 0
 26615                           ;radio_driver_SX1276.c: 388: }
 26616                           ;radio_driver_SX1276.c: 391: if (power >= 20)
 26617  00397A  5166               	movf	RADIO_WritePower@power& (0+255),w,b
 26618  00397C  0A80               	xorlw	128
 26619  00397E  0F6C               	addlw	-148
 26620  003980  E302               	bnc	l12314
 26621                           
 26622                           ; BSR set to: 0
 26623                           ;radio_driver_SX1276.c: 392: {
 26624                           ;radio_driver_SX1276.c: 393: power = 20;
 26625  003982  0E14               	movlw	20
 26626  003984  D005               	goto	L21
 26627  003986                     l12314:
 26628                           
 26629                           ; BSR set to: 0
 26630                           ;radio_driver_SX1276.c: 395: else if (power > 17)
 26631  003986  5166               	movf	RADIO_WritePower@power& (0+255),w,b
 26632  003988  0A80               	xorlw	128
 26633  00398A  0F6E               	addlw	-146
 26634  00398C  E302               	bnc	l12318
 26635                           
 26636                           ; BSR set to: 0
 26637                           ;radio_driver_SX1276.c: 396: {
 26638                           ;radio_driver_SX1276.c: 397: power = 17;
 26639  00398E  0E11               	movlw	17
 26640  003990                     L21:
 26641  003990  6F66               	movwf	RADIO_WritePower@power& (0+255),b
 26642  003992                     l12318:
 26643                           
 26644                           ; BSR set to: 0
 26645                           ;radio_driver_SX1276.c: 398: }
 26646                           ;radio_driver_SX1276.c: 400: ocp = RADIO_RegisterRead(0x0B);
 26647  003992  0E0B               	movlw	11
 26648  003994  EC64  F02E         	call	_RADIO_RegisterRead
 26649  003998  6F64               	movwf	RADIO_WritePower@ocp& (0+255),b
 26650                           
 26651                           ; BSR set to: 0
 26652                           ;radio_driver_SX1276.c: 401: paDac = RADIO_RegisterRead(0x4D);
 26653  00399A  0E4D               	movlw	77
 26654  00399C  EC64  F02E         	call	_RADIO_RegisterRead
 26655  0039A0  6F65               	movwf	RADIO_WritePower@paDac& (0+255),b
 26656                           
 26657                           ; BSR set to: 0
 26658                           ;radio_driver_SX1276.c: 402: paDac &= ~(0x07);
 26659  0039A2  0EF8               	movlw	248
 26660  0039A4  1765               	andwf	RADIO_WritePower@paDac& (0+255),f,b
 26661                           
 26662                           ; BSR set to: 0
 26663                           ;radio_driver_SX1276.c: 403: if (power == 20)
 26664  0039A6  0E14               	movlw	20
 26665  0039A8  1966               	xorwf	RADIO_WritePower@power& (0+255),w,b
 26666  0039AA  E106               	bnz	l12332
 26667                           
 26668                           ; BSR set to: 0
 26669                           ;radio_driver_SX1276.c: 404: {
 26670                           ;radio_driver_SX1276.c: 405: paDac |= 0x07;
 26671  0039AC  0E07               	movlw	7
 26672  0039AE  1365               	iorwf	RADIO_WritePower@paDac& (0+255),f,b
 26673                           
 26674                           ; BSR set to: 0
 26675                           ;radio_driver_SX1276.c: 406: power = 15;
 26676  0039B0  0E0F               	movlw	15
 26677  0039B2  6F66               	movwf	RADIO_WritePower@power& (0+255),b
 26678                           
 26679                           ; BSR set to: 0
 26680                           ;radio_driver_SX1276.c: 407: ocp &= ~(0x20);
 26681  0039B4  9B64               	bcf	RADIO_WritePower@ocp& (0+255),5,b
 26682                           
 26683                           ;radio_driver_SX1276.c: 408: }
 26684  0039B6  D004               	goto	l12338
 26685  0039B8                     l12332:
 26686                           
 26687                           ; BSR set to: 0
 26688                           ;radio_driver_SX1276.c: 409: else
 26689                           ;radio_driver_SX1276.c: 410: {
 26690                           ;radio_driver_SX1276.c: 411: paDac |= 0x04;
 26691  0039B8  8565               	bsf	RADIO_WritePower@paDac& (0+255),2,b
 26692                           
 26693                           ; BSR set to: 0
 26694                           ;radio_driver_SX1276.c: 412: power -= 2;
 26695  0039BA  0EFE               	movlw	254
 26696  0039BC  2766               	addwf	RADIO_WritePower@power& (0+255),f,b
 26697                           
 26698                           ; BSR set to: 0
 26699                           ;radio_driver_SX1276.c: 413: ocp |= 0x20;
 26700  0039BE  8B64               	bsf	RADIO_WritePower@ocp& (0+255),5,b
 26701  0039C0                     l12338:
 26702                           
 26703                           ; BSR set to: 0
 26704                           ;radio_driver_SX1276.c: 414: }
 26705                           ;radio_driver_SX1276.c: 416: RADIO_RegisterWrite(0x4D, paDac);
 26706  0039C0  D80E               	call	PL460	;call to abstracted procedure
 26707  0039C2  EC2E  F02F         	call	_RADIO_RegisterWrite
 26708                           
 26709                           ;radio_driver_SX1276.c: 417: RADIO_RegisterWrite(0x09, 0x80 | power);
 26710  0039C6  0100               	movlb	0	; () banked
 26711  0039C8  5166               	movf	RADIO_WritePower@power& (0+255),w,b
 26712  0039CA  0980               	iorlw	128
 26713  0039CC  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26714  0039CE  0E09               	movlw	9
 26715  0039D0  EC2E  F02F         	call	_RADIO_RegisterWrite
 26716                           
 26717                           ;radio_driver_SX1276.c: 418: RADIO_RegisterWrite(0x0B, ocp);
 26718  0039D4  C064  F062         	movff	RADIO_WritePower@ocp,RADIO_RegisterWrite@value
 26719  0039D8  0E0B               	movlw	11
 26720  0039DA  EF2E  F02F         	goto	_RADIO_RegisterWrite
 26721  0039DE                     __end_of_RADIO_WritePower:
 26722                           	opt stack 0
 26723  0039DE                     PL460:
 26724                           	opt stack 16
 26725  0039DE  C065  F062         	movff	RADIO_WritePower@paDac,RADIO_RegisterWrite@value
 26726  0039E2  0C4D               	retlw	77
 26727  0039E4                     __end_ofPL460:
 26728                           	opt stack 0
 26729                           tosu	equ	0xFFF
 26730                           tosh	equ	0xFFE
 26731                           tosl	equ	0xFFD
 26732                           pclath	equ	0xFFA
 26733                           tblptru	equ	0xFF8
 26734                           tblptrh	equ	0xFF7
 26735                           tblptrl	equ	0xFF6
 26736                           tablat	equ	0xFF5
 26737                           prodh	equ	0xFF4
 26738                           prodl	equ	0xFF3
 26739                           intcon	equ	0xFF2
 26740                           indf0	equ	0xFEF
 26741                           postinc0	equ	0xFEE
 26742                           plusw0	equ	0xFEB
 26743                           fsr0h	equ	0xFEA
 26744                           fsr0l	equ	0xFE9
 26745                           wreg	equ	0xFE8
 26746                           postinc1	equ	0xFE6
 26747                           postdec1	equ	0xFE5
 26748                           plusw1	equ	0xFE3
 26749                           fsr1h	equ	0xFE2
 26750                           fsr1l	equ	0xFE1
 26751                           indf2	equ	0xFDF
 26752                           postinc2	equ	0xFDE
 26753                           postdec2	equ	0xFDD
 26754                           plusw2	equ	0xFDB
 26755                           fsr2h	equ	0xFDA
 26756                           fsr2l	equ	0xFD9
 26757                           status	equ	0xFD8
 26758                           
 26759 ;; *************** function _RADIO_WriteFSKFrequencyDeviation *****************
 26760 ;; Defined at:
 26761 ;;		line 294 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 26762 ;; Parameters:    Size  Location     Type
 26763 ;;  frequencyDev    4   13[BANK0 ] unsigned long 
 26764 ;; Auto vars:     Size  Location     Type
 26765 ;;  num             4   17[BANK0 ] unsigned long 
 26766 ;; Return value:  Size  Location     Type
 26767 ;;                  1    wreg      void 
 26768 ;; Registers used:
 26769 ;;		wreg, status,2, status,0, cstack
 26770 ;; Tracked objects:
 26771 ;;		On entry : 3F/1
 26772 ;;		On exit  : 31/0
 26773 ;;		Unchanged: 0/0
 26774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 26775 ;;      Params:         0       4       0       0       0       0       0       0       0
 26776 ;;      Locals:         0       4       0       0       0       0       0       0       0
 26777 ;;      Temps:          0       0       0       0       0       0       0       0       0
 26778 ;;      Totals:         0       8       0       0       0       0       0       0       0
 26779 ;;Total ram usage:        8 bytes
 26780 ;; Hardware stack levels used:    1
 26781 ;; Hardware stack levels required when called:   10
 26782 ;; This function calls:
 26783 ;;		_RADIO_RegisterWrite
 26784 ;;		___lldiv
 26785 ;; This function is called by:
 26786 ;;		_RADIO_WriteConfiguration
 26787 ;; This function uses a non-reentrant model
 26788 ;;
 26789                           
 26790                           	psect	text138
 26791  004EAE                     __ptext138:
 26792                           	opt stack 0
 26793  004EAE                     _RADIO_WriteFSKFrequencyDeviation:
 26794                           	opt stack 16
 26795                           
 26796                           ; BSR set to: 1
 26797                           ;radio_driver_SX1276.c: 296: uint32_t num;
 26798                           ;radio_driver_SX1276.c: 303: num = frequencyDeviation;
 26799                           
 26800                           ;incstack = 0
 26801  004EAE  C06D  F071         	movff	RADIO_WriteFSKFrequencyDeviation@frequencyDeviation,RADIO_WriteFSKFrequencyDeviat
      +                          ion@num
 26802  004EB2  C06E  F072         	movff	RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+1,RADIO_WriteFSKFrequencyDevi
      +                          ation@num+1
 26803  004EB6  C06F  F073         	movff	RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+2,RADIO_WriteFSKFrequencyDevi
      +                          ation@num+2
 26804  004EBA  C070  F074         	movff	RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+3,RADIO_WriteFSKFrequencyDevi
      +                          ation@num+3
 26805                           
 26806                           ; BSR set to: 1
 26807                           ;radio_driver_SX1276.c: 304: num <<= (8);
 26808  004EBE  C073  F074         	movff	RADIO_WriteFSKFrequencyDeviation@num+2,RADIO_WriteFSKFrequencyDeviation@num+3
 26809  004EC2  C072  F073         	movff	RADIO_WriteFSKFrequencyDeviation@num+1,RADIO_WriteFSKFrequencyDeviation@num+2
 26810  004EC6  C071  F072         	movff	RADIO_WriteFSKFrequencyDeviation@num,RADIO_WriteFSKFrequencyDeviation@num+1
 26811  004ECA  0100               	movlb	0	; () banked
 26812  004ECC  6B71               	clrf	RADIO_WriteFSKFrequencyDeviation@num& (0+255),b
 26813                           
 26814                           ; BSR set to: 0
 26815                           ;radio_driver_SX1276.c: 305: num /= 15625;
 26816  004ECE  C071  F060         	movff	RADIO_WriteFSKFrequencyDeviation@num,___lldiv@dividend
 26817  004ED2  C072  F061         	movff	RADIO_WriteFSKFrequencyDeviation@num+1,___lldiv@dividend+1
 26818  004ED6  C073  F062         	movff	RADIO_WriteFSKFrequencyDeviation@num+2,___lldiv@dividend+2
 26819  004EDA  C074  F063         	movff	RADIO_WriteFSKFrequencyDeviation@num+3,___lldiv@dividend+3
 26820  004EDE  0E09               	movlw	9
 26821  004EE0  EC1A  F01C         	call	PL236	;call to abstracted procedure
 26822  004EE4  EC1B  F025         	call	___lldiv	;wreg free
 26823  004EE8  C060  F071         	movff	?___lldiv,RADIO_WriteFSKFrequencyDeviation@num
 26824  004EEC  C061  F072         	movff	?___lldiv+1,RADIO_WriteFSKFrequencyDeviation@num+1
 26825  004EF0  C062  F073         	movff	?___lldiv+2,RADIO_WriteFSKFrequencyDeviation@num+2
 26826  004EF4  C063  F074         	movff	?___lldiv+3,RADIO_WriteFSKFrequencyDeviation@num+3
 26827                           
 26828                           ; BSR set to: 0
 26829                           ;radio_driver_SX1276.c: 309: RADIO_RegisterWrite(0x04, (num >> (8)) & 0xFF);
 26830  004EF8  C072  F062         	movff	RADIO_WriteFSKFrequencyDeviation@num+1,RADIO_RegisterWrite@value
 26831  004EFC  0E04               	movlw	4
 26832  004EFE  EC2E  F02F         	call	_RADIO_RegisterWrite
 26833                           
 26834                           ;radio_driver_SX1276.c: 310: RADIO_RegisterWrite(0x05, num & 0xFF);
 26835  004F02  C071  F062         	movff	RADIO_WriteFSKFrequencyDeviation@num,RADIO_RegisterWrite@value
 26836  004F06  0E05               	movlw	5
 26837  004F08  EF2E  F02F         	goto	_RADIO_RegisterWrite
 26838  004F0C                     __end_of_RADIO_WriteFSKFrequencyDeviation:
 26839                           	opt stack 0
 26840                           tosu	equ	0xFFF
 26841                           tosh	equ	0xFFE
 26842                           tosl	equ	0xFFD
 26843                           pclath	equ	0xFFA
 26844                           tblptru	equ	0xFF8
 26845                           tblptrh	equ	0xFF7
 26846                           tblptrl	equ	0xFF6
 26847                           tablat	equ	0xFF5
 26848                           prodh	equ	0xFF4
 26849                           prodl	equ	0xFF3
 26850                           intcon	equ	0xFF2
 26851                           indf0	equ	0xFEF
 26852                           postinc0	equ	0xFEE
 26853                           plusw0	equ	0xFEB
 26854                           fsr0h	equ	0xFEA
 26855                           fsr0l	equ	0xFE9
 26856                           wreg	equ	0xFE8
 26857                           postinc1	equ	0xFE6
 26858                           postdec1	equ	0xFE5
 26859                           plusw1	equ	0xFE3
 26860                           fsr1h	equ	0xFE2
 26861                           fsr1l	equ	0xFE1
 26862                           indf2	equ	0xFDF
 26863                           postinc2	equ	0xFDE
 26864                           postdec2	equ	0xFDD
 26865                           plusw2	equ	0xFDB
 26866                           fsr2h	equ	0xFDA
 26867                           fsr2l	equ	0xFD9
 26868                           status	equ	0xFD8
 26869                           
 26870 ;; *************** function _RADIO_WriteFSKBitRate *****************
 26871 ;; Defined at:
 26872 ;;		line 316 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 26873 ;; Parameters:    Size  Location     Type
 26874 ;;  bitRate         4   13[BANK0 ] unsigned long 
 26875 ;; Auto vars:     Size  Location     Type
 26876 ;;  num             4   17[BANK0 ] unsigned long 
 26877 ;; Return value:  Size  Location     Type
 26878 ;;                  1    wreg      void 
 26879 ;; Registers used:
 26880 ;;		wreg, status,2, status,0, cstack
 26881 ;; Tracked objects:
 26882 ;;		On entry : 31/0
 26883 ;;		On exit  : 31/0
 26884 ;;		Unchanged: 0/0
 26885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 26886 ;;      Params:         0       4       0       0       0       0       0       0       0
 26887 ;;      Locals:         0       4       0       0       0       0       0       0       0
 26888 ;;      Temps:          0       0       0       0       0       0       0       0       0
 26889 ;;      Totals:         0       8       0       0       0       0       0       0       0
 26890 ;;Total ram usage:        8 bytes
 26891 ;; Hardware stack levels used:    1
 26892 ;; Hardware stack levels required when called:   10
 26893 ;; This function calls:
 26894 ;;		_RADIO_RegisterWrite
 26895 ;;		___lldiv
 26896 ;; This function is called by:
 26897 ;;		_RADIO_WriteConfiguration
 26898 ;; This function uses a non-reentrant model
 26899 ;;
 26900                           
 26901                           	psect	text139
 26902  004DEA                     __ptext139:
 26903                           	opt stack 0
 26904  004DEA                     _RADIO_WriteFSKBitRate:
 26905                           	opt stack 16
 26906                           
 26907                           ;radio_driver_SX1276.c: 318: uint32_t num;
 26908                           ;radio_driver_SX1276.c: 320: num = 32000000;
 26909                           
 26910                           ;incstack = 0
 26911  004DEA  0100               	movlb	0	; () banked
 26912  004DEC  6B71               	clrf	RADIO_WriteFSKBitRate@num& (0+255),b
 26913  004DEE  0E48               	movlw	72
 26914  004DF0  6F72               	movwf	(RADIO_WriteFSKBitRate@num+1)& (0+255),b
 26915  004DF2  0EE8               	movlw	232
 26916  004DF4  6F73               	movwf	(RADIO_WriteFSKBitRate@num+2)& (0+255),b
 26917  004DF6  0E01               	movlw	1
 26918  004DF8  6F74               	movwf	(RADIO_WriteFSKBitRate@num+3)& (0+255),b
 26919                           
 26920                           ; BSR set to: 0
 26921                           ;radio_driver_SX1276.c: 321: num /= bitRate;
 26922  004DFA  C071  F060         	movff	RADIO_WriteFSKBitRate@num,___lldiv@dividend
 26923  004DFE  C072  F061         	movff	RADIO_WriteFSKBitRate@num+1,___lldiv@dividend+1
 26924  004E02  C073  F062         	movff	RADIO_WriteFSKBitRate@num+2,___lldiv@dividend+2
 26925  004E06  C074  F063         	movff	RADIO_WriteFSKBitRate@num+3,___lldiv@dividend+3
 26926  004E0A  C06D  F064         	movff	RADIO_WriteFSKBitRate@bitRate,___lldiv@divisor
 26927  004E0E  C06E  F065         	movff	RADIO_WriteFSKBitRate@bitRate+1,___lldiv@divisor+1
 26928  004E12  C06F  F066         	movff	RADIO_WriteFSKBitRate@bitRate+2,___lldiv@divisor+2
 26929  004E16  C070  F067         	movff	RADIO_WriteFSKBitRate@bitRate+3,___lldiv@divisor+3
 26930  004E1A  EC1B  F025         	call	___lldiv	;wreg free
 26931  004E1E  C060  F071         	movff	?___lldiv,RADIO_WriteFSKBitRate@num
 26932  004E22  C061  F072         	movff	?___lldiv+1,RADIO_WriteFSKBitRate@num+1
 26933  004E26  C062  F073         	movff	?___lldiv+2,RADIO_WriteFSKBitRate@num+2
 26934  004E2A  C063  F074         	movff	?___lldiv+3,RADIO_WriteFSKBitRate@num+3
 26935                           
 26936                           ; BSR set to: 0
 26937                           ;radio_driver_SX1276.c: 325: RADIO_RegisterWrite(0x02, (num >> (8)) & 0xFF);
 26938  004E2E  C072  F062         	movff	RADIO_WriteFSKBitRate@num+1,RADIO_RegisterWrite@value
 26939  004E32  0E02               	movlw	2
 26940  004E34  EC2E  F02F         	call	_RADIO_RegisterWrite
 26941                           
 26942                           ;radio_driver_SX1276.c: 326: RADIO_RegisterWrite(0x03, num & 0xFF);
 26943  004E38  C071  F062         	movff	RADIO_WriteFSKBitRate@num,RADIO_RegisterWrite@value
 26944  004E3C  0E03               	movlw	3
 26945  004E3E  EC2E  F02F         	call	_RADIO_RegisterWrite
 26946                           
 26947                           ;radio_driver_SX1276.c: 327: RADIO_RegisterWrite(0x5D, 0x00);
 26948  004E42  0100               	movlb	0	; () banked
 26949  004E44  6B62               	clrf	RADIO_RegisterWrite@value& (0+255),b
 26950  004E46  0E5D               	movlw	93
 26951  004E48  EF2E  F02F         	goto	_RADIO_RegisterWrite
 26952  004E4C                     __end_of_RADIO_WriteFSKBitRate:
 26953                           	opt stack 0
 26954                           tosu	equ	0xFFF
 26955                           tosh	equ	0xFFE
 26956                           tosl	equ	0xFFD
 26957                           pclath	equ	0xFFA
 26958                           tblptru	equ	0xFF8
 26959                           tblptrh	equ	0xFF7
 26960                           tblptrl	equ	0xFF6
 26961                           tablat	equ	0xFF5
 26962                           prodh	equ	0xFF4
 26963                           prodl	equ	0xFF3
 26964                           intcon	equ	0xFF2
 26965                           indf0	equ	0xFEF
 26966                           postinc0	equ	0xFEE
 26967                           plusw0	equ	0xFEB
 26968                           fsr0h	equ	0xFEA
 26969                           fsr0l	equ	0xFE9
 26970                           wreg	equ	0xFE8
 26971                           postinc1	equ	0xFE6
 26972                           postdec1	equ	0xFE5
 26973                           plusw1	equ	0xFE3
 26974                           fsr1h	equ	0xFE2
 26975                           fsr1l	equ	0xFE1
 26976                           indf2	equ	0xFDF
 26977                           postinc2	equ	0xFDE
 26978                           postdec2	equ	0xFDD
 26979                           plusw2	equ	0xFDB
 26980                           fsr2h	equ	0xFDA
 26981                           fsr2l	equ	0xFD9
 26982                           status	equ	0xFD8
 26983                           
 26984 ;; *************** function _PrepareJoinRequestFrame *****************
 26985 ;; Defined at:
 26986 ;;		line 1806 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 26987 ;; Parameters:    Size  Location     Type
 26988 ;;		None
 26989 ;; Auto vars:     Size  Location     Type
 26990 ;;  mic             4  124[BANK0 ] unsigned long 
 26991 ;;  iCtr            1  130[BANK0 ] unsigned char 
 26992 ;;  bufferIndex     1  129[BANK0 ] unsigned char 
 26993 ;;  mhdr            1  128[BANK0 ] struct .
 26994 ;; Return value:  Size  Location     Type
 26995 ;;                  1    wreg      unsigned char 
 26996 ;; Registers used:
 26997 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26998 ;; Tracked objects:
 26999 ;;		On entry : 3F/2
 27000 ;;		On exit  : 3F/0
 27001 ;;		Unchanged: 0/0
 27002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27003 ;;      Params:         0       0       0       0       0       0       0       0       0
 27004 ;;      Locals:         0       7       0       0       0       0       0       0       0
 27005 ;;      Temps:          0       2       0       0       0       0       0       0       0
 27006 ;;      Totals:         0       9       0       0       0       0       0       0       0
 27007 ;;Total ram usage:        9 bytes
 27008 ;; Hardware stack levels used:    1
 27009 ;; Hardware stack levels required when called:   13
 27010 ;; This function calls:
 27011 ;;		_ComputeMic
 27012 ;;		_Random
 27013 ;;		_memcpy
 27014 ;;		_memset
 27015 ;; This function is called by:
 27016 ;;		_LORAWAN_Join
 27017 ;; This function uses a non-reentrant model
 27018 ;;
 27019                           
 27020                           	psect	text140
 27021  002DFA                     __ptext140:
 27022                           	opt stack 0
 27023  002DFA                     _PrepareJoinRequestFrame:
 27024                           	opt stack 16
 27025                           
 27026                           ; BSR set to: 2
 27027                           ;lorawan.c: 1808: uint8_t bufferIndex = 0, iCtr;
 27028                           
 27029                           ;incstack = 0
 27030  002DFA  0100               	movlb	0	; () banked
 27031  002DFC  6BE1               	clrf	PrepareJoinRequestFrame@bufferIndex& (0+255),b
 27032                           
 27033                           ; BSR set to: 0
 27034                           ;lorawan.c: 1809: Mhdr_t mhdr;
 27035                           ;lorawan.c: 1810: uint32_t mic;
 27036                           ;lorawan.c: 1812: memset (macBuffer, 0, sizeof(macBuffer) );
 27037  002DFE  D868               	call	PL166	;call to abstracted procedure
 27038  002E00  ECEF  F02D         	call	_memset	;wreg free
 27039                           
 27040                           ; BSR set to: 0
 27041                           ;lorawan.c: 1814: mhdr.bits.mType = FRAME_TYPE_JOIN_REQ;
 27042  002E04  0E1F               	movlw	-225
 27043  002E06  17E0               	andwf	PrepareJoinRequestFrame@mhdr& (0+255),f,b
 27044                           
 27045                           ; BSR set to: 0
 27046                           ;lorawan.c: 1815: mhdr.bits.major = 0;
 27047  002E08  0EFC               	movlw	-4
 27048  002E0A  17E0               	andwf	PrepareJoinRequestFrame@mhdr& (0+255),f,b
 27049                           
 27050                           ; BSR set to: 0
 27051                           ;lorawan.c: 1816: mhdr.bits.rfu = 0;
 27052  002E0C  0EE3               	movlw	-29
 27053  002E0E  17E0               	andwf	PrepareJoinRequestFrame@mhdr& (0+255),f,b
 27054                           
 27055                           ; BSR set to: 0
 27056                           ;lorawan.c: 1818: macBuffer[bufferIndex++] = mhdr.value;
 27057  002E10  EE25  F0EF         	lfsr	2,_macBuffer
 27058  002E14  C0E0  FFDF         	movff	PrepareJoinRequestFrame@mhdr,indf2
 27059                           
 27060                           ; BSR set to: 0
 27061  002E18  2BE1               	incf	PrepareJoinRequestFrame@bufferIndex& (0+255),f,b
 27062                           
 27063                           ; BSR set to: 0
 27064                           ;lorawan.c: 1820: for(iCtr = 0; iCtr < 8; iCtr ++)
 27065  002E1A  6BE2               	clrf	PrepareJoinRequestFrame@iCtr& (0+255),b
 27066  002E1C                     l15238:
 27067                           
 27068                           ; BSR set to: 0
 27069                           ;lorawan.c: 1821: {
 27070                           ;lorawan.c: 1822: macBuffer[bufferIndex + iCtr] = loRa.activationParameters.applicationE
      +                          ui.buffer[7 - iCtr];
 27071  002E1C  51E2               	movf	PrepareJoinRequestFrame@iCtr& (0+255),w,b
 27072  002E1E  0859               	sublw	low (_loRa+89)
 27073  002E20  6ED9               	movwf	fsr2l,c
 27074  002E22  0E00               	movlw	0
 27075  002E24  A0D8               	btfss	status,0,c
 27076  002E26  2AE8               	incf	wreg,f,c
 27077  002E28  0802               	sublw	high (_loRa+89)
 27078                           
 27079                           ; BSR set to: 0
 27080                           
 27081                           ; BSR set to: 0
 27082  002E2A  D83F               	call	PL76	;call to abstracted procedure
 27083  002E2C  65E2               	cpfsgt	PrepareJoinRequestFrame@iCtr& (0+255),b
 27084  002E2E  D7F6               	goto	l15238
 27085                           
 27086                           ; BSR set to: 0
 27087                           ;lorawan.c: 1823: }
 27088                           ;lorawan.c: 1824: bufferIndex = bufferIndex + sizeof(loRa.activationParameters.applicati
      +                          onEui);
 27089  002E30  0E08               	movlw	8
 27090  002E32  27E1               	addwf	PrepareJoinRequestFrame@bufferIndex& (0+255),f,b
 27091                           
 27092                           ; BSR set to: 0
 27093                           ;lorawan.c: 1827: for (iCtr = 0; iCtr < 8; iCtr ++)
 27094  002E34  6BE2               	clrf	PrepareJoinRequestFrame@iCtr& (0+255),b
 27095  002E36                     l15250:
 27096                           
 27097                           ; BSR set to: 0
 27098                           ;lorawan.c: 1828: {
 27099                           ;lorawan.c: 1829: macBuffer[bufferIndex + iCtr] = loRa.activationParameters.deviceEui.bu
      +                          ffer[7 - iCtr];
 27100  002E36  51E2               	movf	PrepareJoinRequestFrame@iCtr& (0+255),w,b
 27101  002E38  0861               	sublw	low (_loRa+97)
 27102  002E3A  6ED9               	movwf	fsr2l,c
 27103  002E3C  0E00               	movlw	0
 27104  002E3E  A0D8               	btfss	status,0,c
 27105  002E40  2AE8               	incf	wreg,f,c
 27106  002E42  0802               	sublw	high (_loRa+97)
 27107                           
 27108                           ; BSR set to: 0
 27109                           
 27110                           ; BSR set to: 0
 27111  002E44  D832               	call	PL76	;call to abstracted procedure
 27112  002E46  65E2               	cpfsgt	PrepareJoinRequestFrame@iCtr& (0+255),b
 27113  002E48  D7F6               	goto	l15250
 27114                           
 27115                           ; BSR set to: 0
 27116                           ;lorawan.c: 1830: }
 27117                           ;lorawan.c: 1831: bufferIndex = bufferIndex + sizeof( loRa.activationParameters.deviceEu
      +                          i );
 27118  002E4A  0E08               	movlw	8
 27119  002E4C  27E1               	addwf	PrepareJoinRequestFrame@bufferIndex& (0+255),f,b
 27120                           
 27121                           ; BSR set to: 0
 27122                           ;lorawan.c: 1833: loRa.devNonce = Random ((65535U));
 27123  002E4E  69A4               	setf	(Random@max+1)& (0+255),b
 27124  002E50  69A3               	setf	Random@max& (0+255),b
 27125  002E52  ECBF  F02E         	call	_Random	;wreg free
 27126  002E56  C0A3  F2D2         	movff	?_Random,_loRa+210
 27127  002E5A  C0A4  F2D3         	movff	?_Random+1,_loRa+211
 27128                           
 27129                           ; BSR set to: 0
 27130                           ;lorawan.c: 1834: memcpy (&macBuffer[bufferIndex], &loRa.devNonce, sizeof (loRa.devNonce
      +                          ) );
 27131  002E5E  0EEF               	movlw	low _macBuffer
 27132  002E60  25E1               	addwf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 27133  002E62  D841               	call	PL178	;call to abstracted procedure
 27134  002E64  D845               	call	PL256	;call to abstracted procedure
 27135  002E66  EC94  F028         	call	_memcpy	;wreg free
 27136                           
 27137                           ; BSR set to: 0
 27138                           ;lorawan.c: 1835: bufferIndex = bufferIndex + sizeof( loRa.devNonce );
 27139  002E6A  0E02               	movlw	2
 27140  002E6C  27E1               	addwf	PrepareJoinRequestFrame@bufferIndex& (0+255),f,b
 27141                           
 27142                           ; BSR set to: 0
 27143                           ;lorawan.c: 1837: mic = ComputeMic (loRa.activationParameters.applicationKey, macBuffer,
      +                           bufferIndex);
 27144  002E6E  D84C               	call	PL348	;call to abstracted procedure
 27145  002E70  0EEF               	movlw	low _macBuffer
 27146  002E72  6F68               	movwf	ComputeMic@buffer& (0+255),b
 27147  002E74  0E05               	movlw	high _macBuffer
 27148  002E76  6F69               	movwf	(ComputeMic@buffer+1)& (0+255),b
 27149  002E78  C0E1  F16A         	movff	PrepareJoinRequestFrame@bufferIndex,ComputeMic@bufferLength
 27150  002E7C  ECB9  F02A         	call	_ComputeMic	;wreg free
 27151  002E80  C166  F0DC         	movff	?_ComputeMic,PrepareJoinRequestFrame@mic
 27152  002E84  C167  F0DD         	movff	?_ComputeMic+1,PrepareJoinRequestFrame@mic+1
 27153  002E88  C168  F0DE         	movff	?_ComputeMic+2,PrepareJoinRequestFrame@mic+2
 27154  002E8C  C169  F0DF         	movff	?_ComputeMic+3,PrepareJoinRequestFrame@mic+3
 27155                           
 27156                           ; BSR set to: 0
 27157                           ;lorawan.c: 1839: memcpy ( &macBuffer[bufferIndex], &mic, sizeof (mic));
 27158  002E90  0EEF               	movlw	low _macBuffer
 27159  002E92  25E1               	addwf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 27160  002E94  D828               	call	PL178	;call to abstracted procedure
 27161  002E96  0EDC               	movlw	low PrepareJoinRequestFrame@mic
 27162  002E98  6F62               	movwf	memcpy@s1& (0+255),b
 27163  002E9A  6B63               	clrf	(memcpy@s1+1)& (0+255),b
 27164  002E9C  D831               	call	PL280	;call to abstracted procedure
 27165  002E9E  EC94  F028         	call	_memcpy	;wreg free
 27166                           
 27167                           ; BSR set to: 0
 27168                           ;lorawan.c: 1840: bufferIndex = bufferIndex + sizeof(mic);
 27169  002EA2  0E04               	movlw	4
 27170  002EA4  27E1               	addwf	PrepareJoinRequestFrame@bufferIndex& (0+255),f,b
 27171                           
 27172                           ; BSR set to: 0
 27173                           ;lorawan.c: 1842: return bufferIndex;
 27174  002EA6  51E1               	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 27175                           
 27176                           ; BSR set to: 0
 27177  002EA8  0012               	return		;funcret
 27178  002EAA                     __end_of_PrepareJoinRequestFrame:
 27179                           	opt stack 0
 27180  002EAA                     PL76:
 27181                           	opt stack 16
 27182  002EAA  6EDA               	movwf	fsr2h,c
 27183  002EAC  0EEF               	movlw	low _macBuffer
 27184  002EAE  6FDA               	movwf	??_PrepareJoinRequestFrame& (0+255),b
 27185  002EB0  0E05               	movlw	high _macBuffer
 27186  002EB2  6FDB               	movwf	(??_PrepareJoinRequestFrame+1)& (0+255),b
 27187  002EB4  51E1               	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 27188  002EB6  27DA               	addwf	??_PrepareJoinRequestFrame& (0+255),f,b
 27189  002EB8  0E00               	movlw	0
 27190  002EBA  23DB               	addwfc	(??_PrepareJoinRequestFrame+1)& (0+255),f,b
 27191  002EBC  51E2               	movf	PrepareJoinRequestFrame@iCtr& (0+255),w,b
 27192  002EBE  25DA               	addwf	??_PrepareJoinRequestFrame& (0+255),w,b
 27193  002EC0  6EE9               	movwf	fsr0l,c
 27194  002EC2  0E00               	movlw	0
 27195  002EC4  21DB               	addwfc	(??_PrepareJoinRequestFrame+1)& (0+255),w,b
 27196  002EC6  6EEA               	movwf	fsr0h,c
 27197  002EC8  CFDF FFEF          	movff	indf2,indf0
 27198  002ECC  2BE2               	incf	PrepareJoinRequestFrame@iCtr& (0+255),f,b
 27199  002ECE  0C07               	retlw	7
 27200  002ED0                     __end_ofPL76:
 27201                           	opt stack 0
 27202  002ED0                     PL166:
 27203                           	opt stack 16
 27204  002ED0  0EEF               	movlw	low _macBuffer
 27205  002ED2  6F60               	movwf	memset@p1& (0+255),b
 27206  002ED4  0E05               	movlw	high _macBuffer
 27207  002ED6  6F61               	movwf	(memset@p1+1)& (0+255),b
 27208  002ED8  6B63               	clrf	(memset@c+1)& (0+255),b
 27209  002EDA  6B62               	clrf	memset@c& (0+255),b
 27210  002EDC  0E01               	movlw	1
 27211  002EDE  6F65               	movwf	(memset@n+1)& (0+255),b
 27212  002EE0  0E0F               	movlw	15
 27213  002EE2  6F64               	movwf	memset@n& (0+255),b
 27214  002EE4  0C0F               	retlw	15
 27215  002EE6                     __end_ofPL166:
 27216                           	opt stack 0
 27217  002EE6                     PL178:
 27218                           	opt stack 16
 27219  002EE6  6F60               	movwf	memcpy@d1& (0+255),b
 27220  002EE8  6B61               	clrf	(memcpy@d1+1)& (0+255),b
 27221  002EEA  0E05               	movlw	high _macBuffer
 27222  002EEC  2361               	addwfc	(memcpy@d1+1)& (0+255),f,b
 27223  002EEE  0012               	return	
 27224  002EF0                     __end_ofPL178:
 27225                           	opt stack 0
 27226  002EF0                     PL256:
 27227                           	opt stack 17
 27228  002EF0  0ED2               	movlw	low (_loRa+210)
 27229  002EF2  6F62               	movwf	memcpy@s1& (0+255),b
 27230  002EF4  0E02               	movlw	high (_loRa+210)
 27231  002EF6  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 27232  002EF8  6B65               	clrf	(memcpy@n+1)& (0+255),b
 27233  002EFA  0E02               	movlw	2
 27234  002EFC  6F64               	movwf	memcpy@n& (0+255),b
 27235  002EFE  0C02               	retlw	2
 27236  002F00                     __end_ofPL256:
 27237                           	opt stack 0
 27238  002F00                     PL280:
 27239                           	opt stack 18
 27240  002F00  6B65               	clrf	(memcpy@n+1)& (0+255),b
 27241  002F02  0E04               	movlw	4
 27242  002F04  6F64               	movwf	memcpy@n& (0+255),b
 27243  002F06  0C04               	retlw	4
 27244  002F08                     __end_ofPL280:
 27245                           	opt stack 0
 27246  002F08                     PL348:
 27247                           	opt stack 12
 27248  002F08  0E42               	movlw	low (_loRa+66)
 27249  002F0A  0101               	movlb	1	; () banked
 27250  002F0C  6F66               	movwf	ComputeMic@key& (0+255),b
 27251  002F0E  0E02               	movlw	high (_loRa+66)
 27252  002F10  6F67               	movwf	(ComputeMic@key+1)& (0+255),b
 27253  002F12  0012               	return	
 27254  002F14                     __end_ofPL348:
 27255                           	opt stack 0
 27256                           tosu	equ	0xFFF
 27257                           tosh	equ	0xFFE
 27258                           tosl	equ	0xFFD
 27259                           pclath	equ	0xFFA
 27260                           tblptru	equ	0xFF8
 27261                           tblptrh	equ	0xFF7
 27262                           tblptrl	equ	0xFF6
 27263                           tablat	equ	0xFF5
 27264                           prodh	equ	0xFF4
 27265                           prodl	equ	0xFF3
 27266                           intcon	equ	0xFF2
 27267                           indf0	equ	0xFEF
 27268                           postinc0	equ	0xFEE
 27269                           plusw0	equ	0xFEB
 27270                           fsr0h	equ	0xFEA
 27271                           fsr0l	equ	0xFE9
 27272                           wreg	equ	0xFE8
 27273                           postinc1	equ	0xFE6
 27274                           postdec1	equ	0xFE5
 27275                           plusw1	equ	0xFE3
 27276                           fsr1h	equ	0xFE2
 27277                           fsr1l	equ	0xFE1
 27278                           indf2	equ	0xFDF
 27279                           postinc2	equ	0xFDE
 27280                           postdec2	equ	0xFDD
 27281                           plusw2	equ	0xFDB
 27282                           fsr2h	equ	0xFDA
 27283                           fsr2l	equ	0xFD9
 27284                           status	equ	0xFD8
 27285                           
 27286 ;; *************** function _Random *****************
 27287 ;; Defined at:
 27288 ;;		line 1116 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 27289 ;; Parameters:    Size  Location     Type
 27290 ;;  max             2   67[BANK0 ] unsigned int 
 27291 ;; Auto vars:     Size  Location     Type
 27292 ;;		None
 27293 ;; Return value:  Size  Location     Type
 27294 ;;                  2   67[BANK0 ] unsigned int 
 27295 ;; Registers used:
 27296 ;;		wreg, status,2, status,0, cstack
 27297 ;; Tracked objects:
 27298 ;;		On entry : 3F/0
 27299 ;;		On exit  : 3F/0
 27300 ;;		Unchanged: 0/0
 27301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27302 ;;      Params:         0       2       0       0       0       0       0       0       0
 27303 ;;      Locals:         0       0       0       0       0       0       0       0       0
 27304 ;;      Temps:          0       0       0       0       0       0       0       0       0
 27305 ;;      Totals:         0       2       0       0       0       0       0       0       0
 27306 ;;Total ram usage:        2 bytes
 27307 ;; Hardware stack levels used:    1
 27308 ;; Hardware stack levels required when called:    9
 27309 ;; This function calls:
 27310 ;;		___lwmod
 27311 ;;		_rand
 27312 ;; This function is called by:
 27313 ;;		_PrepareJoinRequestFrame
 27314 ;;		_SearchAvailableChannel
 27315 ;; This function uses a non-reentrant model
 27316 ;;
 27317                           
 27318                           	psect	text141
 27319  005D7E                     __ptext141:
 27320                           	opt stack 0
 27321  005D7E                     _Random:
 27322                           	opt stack 17
 27323                           
 27324                           ; BSR set to: 0
 27325                           ;lorawan.c: 1118: return (rand () % max);
 27326                           
 27327                           ; BSR set to: 0
 27328                           ;incstack = 0
 27329  005D7E  ECB1  F029         	call	_rand	;wreg free
 27330  005D82  C09C  F09E         	movff	?_rand,___lwmod@dividend
 27331  005D86  C09D  F09F         	movff	?_rand+1,___lwmod@dividend+1
 27332  005D8A  C0A3  F0A0         	movff	Random@max,___lwmod@divisor
 27333  005D8E  C0A4  F0A1         	movff	Random@max+1,___lwmod@divisor+1
 27334  005D92  EC5F  F02B         	call	___lwmod	;wreg free
 27335  005D96  C09E  F0A3         	movff	?___lwmod,?_Random
 27336  005D9A  C09F  F0A4         	movff	?___lwmod+1,?_Random+1
 27337                           
 27338                           ; BSR set to: 0
 27339  005D9E  0012               	return		;funcret
 27340  005DA0                     __end_of_Random:
 27341                           	opt stack 0
 27342                           tosu	equ	0xFFF
 27343                           tosh	equ	0xFFE
 27344                           tosl	equ	0xFFD
 27345                           pclath	equ	0xFFA
 27346                           tblptru	equ	0xFF8
 27347                           tblptrh	equ	0xFF7
 27348                           tblptrl	equ	0xFF6
 27349                           tablat	equ	0xFF5
 27350                           prodh	equ	0xFF4
 27351                           prodl	equ	0xFF3
 27352                           intcon	equ	0xFF2
 27353                           indf0	equ	0xFEF
 27354                           postinc0	equ	0xFEE
 27355                           plusw0	equ	0xFEB
 27356                           fsr0h	equ	0xFEA
 27357                           fsr0l	equ	0xFE9
 27358                           wreg	equ	0xFE8
 27359                           postinc1	equ	0xFE6
 27360                           postdec1	equ	0xFE5
 27361                           plusw1	equ	0xFE3
 27362                           fsr1h	equ	0xFE2
 27363                           fsr1l	equ	0xFE1
 27364                           indf2	equ	0xFDF
 27365                           postinc2	equ	0xFDE
 27366                           postdec2	equ	0xFDD
 27367                           plusw2	equ	0xFDB
 27368                           fsr2h	equ	0xFDA
 27369                           fsr2l	equ	0xFD9
 27370                           status	equ	0xFD8
 27371                           
 27372 ;; *************** function _rand *****************
 27373 ;; Defined at:
 27374 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\rand.c"
 27375 ;; Parameters:    Size  Location     Type
 27376 ;;		None
 27377 ;; Auto vars:     Size  Location     Type
 27378 ;;		None
 27379 ;; Return value:  Size  Location     Type
 27380 ;;                  2   60[BANK0 ] int 
 27381 ;; Registers used:
 27382 ;;		wreg, status,2, status,0, cstack
 27383 ;; Tracked objects:
 27384 ;;		On entry : 3F/0
 27385 ;;		On exit  : 3F/0
 27386 ;;		Unchanged: 0/0
 27387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27388 ;;      Params:         0       2       0       0       0       0       0       0       0
 27389 ;;      Locals:         0       0       0       0       0       0       0       0       0
 27390 ;;      Temps:          0       0       0       0       0       0       0       0       0
 27391 ;;      Totals:         0       2       0       0       0       0       0       0       0
 27392 ;;Total ram usage:        2 bytes
 27393 ;; Hardware stack levels used:    1
 27394 ;; Hardware stack levels required when called:    8
 27395 ;; This function calls:
 27396 ;;		___lmul
 27397 ;; This function is called by:
 27398 ;;		_Random
 27399 ;; This function uses a non-reentrant model
 27400 ;;
 27401                           
 27402                           	psect	text142
 27403  005362                     __ptext142:
 27404                           	opt stack 0
 27405  005362                     _rand:
 27406                           	opt stack 17
 27407                           
 27408                           ; BSR set to: 0
 27409                           
 27410                           ; BSR set to: 0
 27411                           ;incstack = 0
 27412  005362  C054  F090         	movff	_randx,___lmul@multiplier
 27413  005366  C055  F091         	movff	_randx+1,___lmul@multiplier+1
 27414  00536A  C056  F092         	movff	_randx+2,___lmul@multiplier+2
 27415  00536E  C057  F093         	movff	_randx+3,___lmul@multiplier+3
 27416  005372  0E6D               	movlw	109
 27417  005374  6F94               	movwf	___lmul@multiplicand& (0+255),b
 27418  005376  0E4E               	movlw	78
 27419  005378  6F95               	movwf	(___lmul@multiplicand+1)& (0+255),b
 27420  00537A  0EC6               	movlw	198
 27421  00537C  6F96               	movwf	(___lmul@multiplicand+2)& (0+255),b
 27422  00537E  0E41               	movlw	65
 27423  005380  6F97               	movwf	(___lmul@multiplicand+3)& (0+255),b
 27424  005382  EC25  F02A         	call	___lmul	;wreg free
 27425  005386  C090  F054         	movff	?___lmul,_randx
 27426  00538A  C091  F055         	movff	?___lmul+1,_randx+1
 27427  00538E  C092  F056         	movff	?___lmul+2,_randx+2
 27428  005392  C093  F057         	movff	?___lmul+3,_randx+3
 27429                           
 27430                           ; BSR set to: 0
 27431  005396  0E39               	movlw	57
 27432  005398  2654               	addwf	_randx,f,c
 27433  00539A  0E30               	movlw	48
 27434  00539C  2255               	addwfc	_randx+1,f,c
 27435  00539E  0E00               	movlw	0
 27436  0053A0  2256               	addwfc	_randx+2,f,c
 27437  0053A2  2257               	addwfc	_randx+3,f,c
 27438                           
 27439                           ; BSR set to: 0
 27440  0053A4  5056               	movf	_randx+2,w,c
 27441  0053A6  6F9C               	movwf	?_rand& (0+255),b
 27442  0053A8  0E7F               	movlw	127
 27443  0053AA  1457               	andwf	_randx+3,w,c
 27444  0053AC  6F9D               	movwf	(?_rand+1)& (0+255),b
 27445                           
 27446                           ; BSR set to: 0
 27447  0053AE  0012               	return		;funcret
 27448  0053B0                     __end_of_rand:
 27449                           	opt stack 0
 27450                           tosu	equ	0xFFF
 27451                           tosh	equ	0xFFE
 27452                           tosl	equ	0xFFD
 27453                           pclath	equ	0xFFA
 27454                           tblptru	equ	0xFF8
 27455                           tblptrh	equ	0xFF7
 27456                           tblptrl	equ	0xFF6
 27457                           tablat	equ	0xFF5
 27458                           prodh	equ	0xFF4
 27459                           prodl	equ	0xFF3
 27460                           intcon	equ	0xFF2
 27461                           indf0	equ	0xFEF
 27462                           postinc0	equ	0xFEE
 27463                           plusw0	equ	0xFEB
 27464                           fsr0h	equ	0xFEA
 27465                           fsr0l	equ	0xFE9
 27466                           wreg	equ	0xFE8
 27467                           postinc1	equ	0xFE6
 27468                           postdec1	equ	0xFE5
 27469                           plusw1	equ	0xFE3
 27470                           fsr1h	equ	0xFE2
 27471                           fsr1l	equ	0xFE1
 27472                           indf2	equ	0xFDF
 27473                           postinc2	equ	0xFDE
 27474                           postdec2	equ	0xFDD
 27475                           plusw2	equ	0xFDB
 27476                           fsr2h	equ	0xFDA
 27477                           fsr2l	equ	0xFD9
 27478                           status	equ	0xFD8
 27479                           
 27480 ;; *************** function ___lwmod *****************
 27481 ;; Defined at:
 27482 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
 27483 ;; Parameters:    Size  Location     Type
 27484 ;;  dividend        2   62[BANK0 ] unsigned int 
 27485 ;;  divisor         2   64[BANK0 ] unsigned int 
 27486 ;; Auto vars:     Size  Location     Type
 27487 ;;  counter         1   66[BANK0 ] unsigned char 
 27488 ;; Return value:  Size  Location     Type
 27489 ;;                  2   62[BANK0 ] unsigned int 
 27490 ;; Registers used:
 27491 ;;		wreg, status,2, status,0
 27492 ;; Tracked objects:
 27493 ;;		On entry : 3F/0
 27494 ;;		On exit  : 3F/0
 27495 ;;		Unchanged: 0/0
 27496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27497 ;;      Params:         0       4       0       0       0       0       0       0       0
 27498 ;;      Locals:         0       1       0       0       0       0       0       0       0
 27499 ;;      Temps:          0       0       0       0       0       0       0       0       0
 27500 ;;      Totals:         0       5       0       0       0       0       0       0       0
 27501 ;;Total ram usage:        5 bytes
 27502 ;; Hardware stack levels used:    1
 27503 ;; Hardware stack levels required when called:    7
 27504 ;; This function calls:
 27505 ;;		Nothing
 27506 ;; This function is called by:
 27507 ;;		_Random
 27508 ;; This function uses a non-reentrant model
 27509 ;;
 27510                           
 27511                           	psect	text143
 27512  0056BE                     __ptext143:
 27513                           	opt stack 0
 27514  0056BE                     ___lwmod:
 27515                           	opt stack 18
 27516                           
 27517                           ; BSR set to: 0
 27518                           
 27519                           ; BSR set to: 0
 27520                           ;incstack = 0
 27521  0056BE  51A0               	movf	___lwmod@divisor& (0+255),w,b
 27522  0056C0  11A1               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 27523  0056C2  E017               	bz	l3061
 27524                           
 27525                           ; BSR set to: 0
 27526  0056C4  0E01               	movlw	1
 27527  0056C6  6FA2               	movwf	___lwmod@counter& (0+255),b
 27528  0056C8  D004               	goto	l12382
 27529  0056CA                     l12380:
 27530                           
 27531                           ; BSR set to: 0
 27532  0056CA  90D8               	bcf	status,0,c
 27533  0056CC  37A0               	rlcf	___lwmod@divisor& (0+255),f,b
 27534  0056CE  37A1               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 27535  0056D0  2BA2               	incf	___lwmod@counter& (0+255),f,b
 27536  0056D2                     l12382:
 27537                           
 27538                           ; BSR set to: 0
 27539  0056D2  AFA1               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 27540  0056D4  D7FA               	goto	l12380
 27541  0056D6                     l12384:
 27542                           
 27543                           ; BSR set to: 0
 27544  0056D6  51A0               	movf	___lwmod@divisor& (0+255),w,b
 27545  0056D8  5D9E               	subwf	___lwmod@dividend& (0+255),w,b
 27546  0056DA  51A1               	movf	(___lwmod@divisor+1)& (0+255),w,b
 27547  0056DC  599F               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 27548  0056DE  E304               	bnc	l12388
 27549                           
 27550                           ; BSR set to: 0
 27551  0056E0  51A0               	movf	___lwmod@divisor& (0+255),w,b
 27552  0056E2  5F9E               	subwf	___lwmod@dividend& (0+255),f,b
 27553  0056E4  51A1               	movf	(___lwmod@divisor+1)& (0+255),w,b
 27554  0056E6  5B9F               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 27555  0056E8                     l12388:
 27556                           
 27557                           ; BSR set to: 0
 27558  0056E8  90D8               	bcf	status,0,c
 27559  0056EA  33A1               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 27560  0056EC  33A0               	rrcf	___lwmod@divisor& (0+255),f,b
 27561                           
 27562                           ; BSR set to: 0
 27563  0056EE  2FA2               	decfsz	___lwmod@counter& (0+255),f,b
 27564  0056F0  D7F2               	goto	l12384
 27565  0056F2                     l3061:
 27566                           
 27567                           ; BSR set to: 0
 27568  0056F2  C09E  F09E         	movff	___lwmod@dividend,?___lwmod
 27569  0056F6  C09F  F09F         	movff	___lwmod@dividend+1,?___lwmod+1
 27570                           
 27571                           ; BSR set to: 0
 27572  0056FA  0012               	return		;funcret
 27573  0056FC                     __end_of___lwmod:
 27574                           	opt stack 0
 27575                           tosu	equ	0xFFF
 27576                           tosh	equ	0xFFE
 27577                           tosl	equ	0xFFD
 27578                           pclath	equ	0xFFA
 27579                           tblptru	equ	0xFF8
 27580                           tblptrh	equ	0xFF7
 27581                           tblptrl	equ	0xFF6
 27582                           tablat	equ	0xFF5
 27583                           prodh	equ	0xFF4
 27584                           prodl	equ	0xFF3
 27585                           intcon	equ	0xFF2
 27586                           indf0	equ	0xFEF
 27587                           postinc0	equ	0xFEE
 27588                           plusw0	equ	0xFEB
 27589                           fsr0h	equ	0xFEA
 27590                           fsr0l	equ	0xFE9
 27591                           wreg	equ	0xFE8
 27592                           postinc1	equ	0xFE6
 27593                           postdec1	equ	0xFE5
 27594                           plusw1	equ	0xFE3
 27595                           fsr1h	equ	0xFE2
 27596                           fsr1l	equ	0xFE1
 27597                           indf2	equ	0xFDF
 27598                           postinc2	equ	0xFDE
 27599                           postdec2	equ	0xFDD
 27600                           plusw2	equ	0xFDB
 27601                           fsr2h	equ	0xFDA
 27602                           fsr2l	equ	0xFD9
 27603                           status	equ	0xFD8
 27604                           
 27605 ;; *************** function _ComputeMic *****************
 27606 ;; Defined at:
 27607 ;;		line 2194 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 27608 ;; Parameters:    Size  Location     Type
 27609 ;;  key             2  102[BANK1 ] PTR unsigned char 
 27610 ;;		 -> loRa.activationParameters(105), loRa(245), 
 27611 ;;  buffer          2  104[BANK1 ] PTR unsigned char 
 27612 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), macBuffer(271), 
 27613 ;;  bufferLength    1  106[BANK1 ] unsigned char 
 27614 ;; Auto vars:     Size  Location     Type
 27615 ;;  mic             4  118[BANK0 ] unsigned long 
 27616 ;; Return value:  Size  Location     Type
 27617 ;;                  4  102[BANK1 ] unsigned long 
 27618 ;; Registers used:
 27619 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27620 ;; Tracked objects:
 27621 ;;		On entry : 3F/1
 27622 ;;		On exit  : 3F/0
 27623 ;;		Unchanged: 0/0
 27624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27625 ;;      Params:         0       0       5       0       0       0       0       0       0
 27626 ;;      Locals:         0       4       0       0       0       0       0       0       0
 27627 ;;      Temps:          0       0       0       0       0       0       0       0       0
 27628 ;;      Totals:         0       4       5       0       0       0       0       0       0
 27629 ;;Total ram usage:        9 bytes
 27630 ;; Hardware stack levels used:    1
 27631 ;; Hardware stack levels required when called:   12
 27632 ;; This function calls:
 27633 ;;		_AESCmac
 27634 ;;		_memcpy
 27635 ;; This function is called by:
 27636 ;;		_LORAWAN_RxDone
 27637 ;;		_PrepareJoinRequestFrame
 27638 ;; This function uses a non-reentrant model
 27639 ;;
 27640                           
 27641                           	psect	text144
 27642  005572                     __ptext144:
 27643                           	opt stack 0
 27644  005572                     _ComputeMic:
 27645                           	opt stack 14
 27646                           
 27647                           ; BSR set to: 1
 27648                           ;lorawan.c: 2196: uint32_t mic = 0;
 27649                           
 27650                           ; BSR set to: 0
 27651                           ;incstack = 0
 27652  005572  0100               	movlb	0	; () banked
 27653  005574  6BD6               	clrf	ComputeMic@mic& (0+255),b
 27654  005576  6BD7               	clrf	(ComputeMic@mic+1)& (0+255),b
 27655  005578  6BD8               	clrf	(ComputeMic@mic+2)& (0+255),b
 27656  00557A  6BD9               	clrf	(ComputeMic@mic+3)& (0+255),b
 27657                           
 27658                           ; BSR set to: 0
 27659                           ;lorawan.c: 2198: AESCmac(key, aesBuffer, buffer, bufferLength);
 27660  00557C  C166  F0C8         	movff	ComputeMic@key,AESCmac@key
 27661  005580  C167  F0C9         	movff	ComputeMic@key+1,AESCmac@key+1
 27662  005584  0EB5               	movlw	low _aesBuffer
 27663  005586  6FCA               	movwf	AESCmac@output& (0+255),b
 27664  005588  0E01               	movlw	high _aesBuffer
 27665  00558A  6FCB               	movwf	(AESCmac@output+1)& (0+255),b
 27666  00558C  C168  F0CC         	movff	ComputeMic@buffer,AESCmac@input
 27667  005590  C169  F0CD         	movff	ComputeMic@buffer+1,AESCmac@input+1
 27668  005594  C16A  F0CE         	movff	ComputeMic@bufferLength,AESCmac@size
 27669  005598  ECD2  F008         	call	_AESCmac	;wreg free
 27670                           
 27671                           ; BSR set to: 0
 27672                           ;lorawan.c: 2200: memcpy(&mic, aesBuffer, sizeof( mic ));
 27673  00559C  0ED6               	movlw	low ComputeMic@mic
 27674  00559E  EC9D  F003         	call	PL98	;call to abstracted procedure
 27675  0055A2  EC94  F028         	call	_memcpy	;wreg free
 27676                           
 27677                           ; BSR set to: 0
 27678                           ;lorawan.c: 2202: return mic;
 27679  0055A6  C0D6  F166         	movff	ComputeMic@mic,?_ComputeMic
 27680  0055AA  C0D7  F167         	movff	ComputeMic@mic+1,?_ComputeMic+1
 27681  0055AE  C0D8  F168         	movff	ComputeMic@mic+2,?_ComputeMic+2
 27682  0055B2  C0D9  F169         	movff	ComputeMic@mic+3,?_ComputeMic+3
 27683                           
 27684                           ; BSR set to: 0
 27685  0055B6  0012               	return		;funcret
 27686  0055B8                     __end_of_ComputeMic:
 27687                           	opt stack 0
 27688                           tosu	equ	0xFFF
 27689                           tosh	equ	0xFFE
 27690                           tosl	equ	0xFFD
 27691                           pclath	equ	0xFFA
 27692                           tblptru	equ	0xFF8
 27693                           tblptrh	equ	0xFF7
 27694                           tblptrl	equ	0xFF6
 27695                           tablat	equ	0xFF5
 27696                           prodh	equ	0xFF4
 27697                           prodl	equ	0xFF3
 27698                           intcon	equ	0xFF2
 27699                           indf0	equ	0xFEF
 27700                           postinc0	equ	0xFEE
 27701                           plusw0	equ	0xFEB
 27702                           fsr0h	equ	0xFEA
 27703                           fsr0l	equ	0xFE9
 27704                           wreg	equ	0xFE8
 27705                           postinc1	equ	0xFE6
 27706                           postdec1	equ	0xFE5
 27707                           plusw1	equ	0xFE3
 27708                           fsr1h	equ	0xFE2
 27709                           fsr1l	equ	0xFE1
 27710                           indf2	equ	0xFDF
 27711                           postinc2	equ	0xFDE
 27712                           postdec2	equ	0xFDD
 27713                           plusw2	equ	0xFDB
 27714                           fsr2h	equ	0xFDA
 27715                           fsr2l	equ	0xFD9
 27716                           status	equ	0xFD8
 27717                           
 27718 ;; *************** function _AESCmac *****************
 27719 ;; Defined at:
 27720 ;;		line 41 in file "mcc_generated_files/LoRaWAN/lorawan_aes_cmac.c"
 27721 ;; Parameters:    Size  Location     Type
 27722 ;;  key             2  104[BANK0 ] PTR unsigned char 
 27723 ;;		 -> loRa.activationParameters(105), loRa(245), 
 27724 ;;  output          2  106[BANK0 ] PTR unsigned char 
 27725 ;;		 -> aesBuffer(16), 
 27726 ;;  input           2  108[BANK0 ] PTR unsigned char 
 27727 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), macBuffer(271), 
 27728 ;;  size            1  110[BANK0 ] unsigned char 
 27729 ;; Auto vars:     Size  Location     Type
 27730 ;;  x              16   80[BANK1 ] unsigned char [16]
 27731 ;;  y              16   64[BANK1 ] unsigned char [16]
 27732 ;;  padded         16   48[BANK1 ] unsigned char [16]
 27733 ;;  mLast          16   32[BANK1 ] unsigned char [16]
 27734 ;;  k1             16   16[BANK1 ] unsigned char [16]
 27735 ;;  k2             16    0[BANK1 ] unsigned char [16]
 27736 ;;  ptr             2   96[BANK1 ] PTR unsigned char 
 27737 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), macBuffer(271), NULL(0), 
 27738 ;;  i               1  101[BANK1 ] unsigned char 
 27739 ;;  j               1  100[BANK1 ] unsigned char 
 27740 ;;  n               1   99[BANK1 ] unsigned char 
 27741 ;;  flag            1   98[BANK1 ] unsigned char 
 27742 ;; Return value:  Size  Location     Type
 27743 ;;                  1    wreg      void 
 27744 ;; Registers used:
 27745 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27746 ;; Tracked objects:
 27747 ;;		On entry : 3F/0
 27748 ;;		On exit  : 3F/0
 27749 ;;		Unchanged: 0/0
 27750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27751 ;;      Params:         0       7       0       0       0       0       0       0       0
 27752 ;;      Locals:         0       0     102       0       0       0       0       0       0
 27753 ;;      Temps:          0       7       0       0       0       0       0       0       0
 27754 ;;      Totals:         0      14     102       0       0       0       0       0       0
 27755 ;;Total ram usage:      116 bytes
 27756 ;; Hardware stack levels used:    1
 27757 ;; Hardware stack levels required when called:   11
 27758 ;; This function calls:
 27759 ;;		_AESEncodeLoRa
 27760 ;;		_GenerateSubkey
 27761 ;;		_memcpy
 27762 ;;		_memset
 27763 ;; This function is called by:
 27764 ;;		_LORAWAN_RxDone
 27765 ;;		_AssemblePacket
 27766 ;;		_ComputeMic
 27767 ;; This function uses a non-reentrant model
 27768 ;;
 27769                           
 27770                           	psect	text145
 27771  0011A4                     __ptext145:
 27772                           	opt stack 0
 27773  0011A4                     _AESCmac:
 27774                           	opt stack 16
 27775                           
 27776                           ; BSR set to: 0
 27777                           
 27778                           ; BSR set to: 0
 27779                           ;incstack = 0
 27780  0011A4  0101               	movlb	1	; () banked
 27781  0011A6  6B65               	clrf	AESCmac@i& (0+255),b
 27782  0011A8  6B64               	clrf	AESCmac@j& (0+255),b
 27783                           
 27784                           ;lorawan_aes_cmac.c: 44: bool flag = 0;
 27785  0011AA  6B62               	clrf	AESCmac@flag& (0+255),b
 27786                           
 27787                           ;lorawan_aes_cmac.c: 45: uint8_t k1[16], k2[16];
 27788                           ;lorawan_aes_cmac.c: 46: uint8_t x[16], y[16], mLast[16], padded[16];
 27789                           ;lorawan_aes_cmac.c: 47: uint8_t *ptr = (0);
 27790  0011AC  6B60               	clrf	AESCmac@ptr& (0+255),b
 27791  0011AE  6B61               	clrf	(AESCmac@ptr+1)& (0+255),b
 27792                           
 27793                           ; BSR set to: 1
 27794                           ;lorawan_aes_cmac.c: 49: GenerateSubkey(key, k1, k2);
 27795  0011B0  C0C8  F0A0         	movff	AESCmac@key,GenerateSubkey@key
 27796  0011B4  C0C9  F0A1         	movff	AESCmac@key+1,GenerateSubkey@key+1
 27797  0011B8  0E10               	movlw	low AESCmac@k1
 27798  0011BA  0100               	movlb	0	; () banked
 27799  0011BC  6FA2               	movwf	GenerateSubkey@k1& (0+255),b
 27800  0011BE  0E01               	movlw	high AESCmac@k1
 27801  0011C0  6FA3               	movwf	(GenerateSubkey@k1+1)& (0+255),b
 27802  0011C2  0E00               	movlw	low AESCmac@k2
 27803  0011C4  6FA4               	movwf	GenerateSubkey@k2& (0+255),b
 27804  0011C6  0E01               	movlw	high AESCmac@k2
 27805  0011C8  6FA5               	movwf	(GenerateSubkey@k2+1)& (0+255),b
 27806  0011CA  ECFC  F019         	call	_GenerateSubkey	;wreg free
 27807                           
 27808                           ; BSR set to: 0
 27809                           ;lorawan_aes_cmac.c: 51: n = (size + 15) >> (4);
 27810  0011CE  51CE               	movf	AESCmac@size& (0+255),w,b
 27811  0011D0  6FCF               	movwf	??_AESCmac& (0+255),b
 27812  0011D2  6BD0               	clrf	(??_AESCmac+1)& (0+255),b
 27813  0011D4  0E0F               	movlw	15
 27814  0011D6  27CF               	addwf	??_AESCmac& (0+255),f,b
 27815  0011D8  0E00               	movlw	0
 27816  0011DA  23D0               	addwfc	(??_AESCmac+1)& (0+255),f,b
 27817  0011DC  0E04               	movlw	4
 27818  0011DE  6FD1               	movwf	(??_AESCmac+2)& (0+255),b
 27819  0011E0                     u14045:
 27820  0011E0  35D0               	rlcf	(??_AESCmac+1)& (0+255),w,b
 27821  0011E2  33D0               	rrcf	(??_AESCmac+1)& (0+255),f,b
 27822  0011E4  33CF               	rrcf	??_AESCmac& (0+255),f,b
 27823  0011E6  2FD1               	decfsz	(??_AESCmac+2)& (0+255),f,b
 27824  0011E8  D7FB               	goto	u14045
 27825  0011EA  51CF               	movf	??_AESCmac& (0+255),w,b
 27826  0011EC  0101               	movlb	1	; () banked
 27827  0011EE  6F63               	movwf	AESCmac@n& (0+255),b
 27828                           
 27829                           ; BSR set to: 1
 27830                           ;lorawan_aes_cmac.c: 52: if (n == 0)
 27831  0011F0  5163               	movf	AESCmac@n& (0+255),w,b
 27832  0011F2  E104               	bnz	l12876
 27833                           
 27834                           ; BSR set to: 1
 27835                           ;lorawan_aes_cmac.c: 53: {
 27836                           ;lorawan_aes_cmac.c: 54: n = 1;
 27837  0011F4  0E01               	movlw	1
 27838  0011F6  6F63               	movwf	AESCmac@n& (0+255),b
 27839                           
 27840                           ; BSR set to: 1
 27841                           ;lorawan_aes_cmac.c: 55: flag = 0;
 27842  0011F8  6B62               	clrf	AESCmac@flag& (0+255),b
 27843                           
 27844                           ;lorawan_aes_cmac.c: 56: }
 27845  0011FA  D00A               	goto	l1398
 27846  0011FC                     l12876:
 27847                           
 27848                           ; BSR set to: 1
 27849                           ;lorawan_aes_cmac.c: 57: else
 27850                           ;lorawan_aes_cmac.c: 58: {
 27851                           ;lorawan_aes_cmac.c: 59: flag = !(size % 16);
 27852  0011FC  C0CE  F0CF         	movff	AESCmac@size,??_AESCmac
 27853  001200  0E0F               	movlw	15
 27854  001202  0100               	movlb	0	; () banked
 27855  001204  17CF               	andwf	??_AESCmac& (0+255),f,b
 27856  001206  0E01               	movlw	1
 27857  001208  A4D8               	btfss	status,2,c
 27858  00120A  0E00               	movlw	0
 27859  00120C  0101               	movlb	1	; () banked
 27860  00120E  6F62               	movwf	AESCmac@flag& (0+255),b
 27861  001210                     l1398:
 27862                           
 27863                           ; BSR set to: 1
 27864                           ;lorawan_aes_cmac.c: 60: }
 27865                           ;lorawan_aes_cmac.c: 62: if ( flag == 1 )
 27866  001210  0562               	decf	AESCmac@flag& (0+255),w,b
 27867  001212  E12E               	bnz	l12890
 27868                           
 27869                           ; BSR set to: 1
 27870                           ;lorawan_aes_cmac.c: 63: {
 27871                           ;lorawan_aes_cmac.c: 64: j = 0;
 27872  001214  6B64               	clrf	AESCmac@j& (0+255),b
 27873                           
 27874                           ; BSR set to: 1
 27875                           ;lorawan_aes_cmac.c: 65: for (i=((n-1) << (4)); i<(n << (4)); i++)
 27876  001216  5163               	movf	AESCmac@n& (0+255),w,b
 27877  001218  0D10               	mullw	16
 27878  00121A  50F3               	movf	prodl,w,c
 27879  00121C  0FF0               	addlw	240
 27880  00121E  6F65               	movwf	AESCmac@i& (0+255),b
 27881  001220  D018               	goto	l12888
 27882  001222                     l12882:
 27883                           
 27884                           ; BSR set to: 0
 27885                           ;lorawan_aes_cmac.c: 66: {
 27886                           ;lorawan_aes_cmac.c: 67: mLast[j] = input[i] ^ k1[j];
 27887  001222  0E20               	movlw	low AESCmac@mLast
 27888  001224  0101               	movlb	1	; () banked
 27889  001226  2564               	addwf	AESCmac@j& (0+255),w,b
 27890  001228  D91A               	call	PL370	;call to abstracted procedure
 27891  00122A  0E10               	movlw	low AESCmac@k1
 27892  00122C  2564               	addwf	AESCmac@j& (0+255),w,b
 27893  00122E  6EE9               	movwf	fsr0l,c
 27894  001230  6AEA               	clrf	fsr0h,c
 27895  001232  0E01               	movlw	high AESCmac@k1
 27896  001234  D8FA               	call	PL314	;call to abstracted procedure
 27897  001236  0101               	movlb	1	; () banked
 27898  001238  5165               	movf	AESCmac@i& (0+255),w,b
 27899  00123A  0100               	movlb	0	; () banked
 27900  00123C  25CC               	addwf	AESCmac@input& (0+255),w,b
 27901  00123E  6EE9               	movwf	fsr0l,c
 27902  001240  0E00               	movlw	0
 27903  001242  21CD               	addwfc	(AESCmac@input+1)& (0+255),w,b
 27904  001244  6EEA               	movwf	fsr0h,c
 27905  001246  50EF               	movf	indf0,w,c
 27906  001248  19CF               	xorwf	??_AESCmac& (0+255),w,b
 27907  00124A  6EDF               	movwf	indf2,c
 27908                           
 27909                           ; BSR set to: 0
 27910                           ;lorawan_aes_cmac.c: 68: j++;
 27911  00124C  0101               	movlb	1	; () banked
 27912  00124E  2B64               	incf	AESCmac@j& (0+255),f,b
 27913                           
 27914                           ; BSR set to: 1
 27915  001250  2B65               	incf	AESCmac@i& (0+255),f,b
 27916  001252                     l12888:
 27917                           
 27918                           ; BSR set to: 1
 27919  001252  5163               	movf	AESCmac@n& (0+255),w,b
 27920  001254  D8C1               	call	PL146	;call to abstracted procedure
 27921  001256  0101               	movlb	1	; () banked
 27922  001258  5165               	movf	AESCmac@i& (0+255),w,b
 27923  00125A  D8FD               	call	PL366	;call to abstracted procedure
 27924  00125C  51CF               	movf	??_AESCmac& (0+255),w,b
 27925  00125E  5DD1               	subwf	(??_AESCmac+2)& (0+255),w,b
 27926  001260  51D2               	movf	(??_AESCmac+3)& (0+255),w,b
 27927  001262  0A80               	xorlw	128
 27928  001264  6FD3               	movwf	(??_AESCmac+4)& (0+255),b
 27929  001266  51D0               	movf	(??_AESCmac+1)& (0+255),w,b
 27930  001268  0A80               	xorlw	128
 27931  00126A  59D3               	subwfb	(??_AESCmac+4)& (0+255),w,b
 27932  00126C  E240               	bc	l12920
 27933  00126E  D7D9               	goto	l12882
 27934  001270                     l12890:
 27935                           
 27936                           ; BSR set to: 1
 27937                           ;lorawan_aes_cmac.c: 71: else
 27938                           ;lorawan_aes_cmac.c: 72: {
 27939                           ;lorawan_aes_cmac.c: 74: ptr = &input[size - (size%16)];
 27940  001270  0100               	movlb	0	; () banked
 27941  001272  51CE               	movf	AESCmac@size& (0+255),w,b
 27942  001274  25CC               	addwf	AESCmac@input& (0+255),w,b
 27943  001276  6FCF               	movwf	??_AESCmac& (0+255),b
 27944  001278  0E00               	movlw	0
 27945  00127A  21CD               	addwfc	(AESCmac@input+1)& (0+255),w,b
 27946  00127C  6FD0               	movwf	(??_AESCmac+1)& (0+255),b
 27947  00127E  51CE               	movf	AESCmac@size& (0+255),w,b
 27948  001280  0B0F               	andlw	15
 27949  001282  5DCF               	subwf	??_AESCmac& (0+255),w,b
 27950  001284  0101               	movlb	1	; () banked
 27951  001286  6F60               	movwf	AESCmac@ptr& (0+255),b
 27952  001288  0100               	movlb	0	; () banked
 27953  00128A  51D0               	movf	(??_AESCmac+1)& (0+255),w,b
 27954  00128C  A0D8               	btfss	status,0,c
 27955  00128E  05D0               	decf	(??_AESCmac+1)& (0+255),w,b
 27956  001290  0101               	movlb	1	; () banked
 27957  001292  6F61               	movwf	(AESCmac@ptr+1)& (0+255),b
 27958                           
 27959                           ; BSR set to: 1
 27960                           ;lorawan_aes_cmac.c: 75: for (i=0; i<16; i++)
 27961  001294  6B65               	clrf	AESCmac@i& (0+255),b
 27962  001296                     l12896:
 27963                           
 27964                           ; BSR set to: 1
 27965                           ;lorawan_aes_cmac.c: 76: {
 27966                           ;lorawan_aes_cmac.c: 77: if ( i < (size%16) )
 27967  001296  D8E8               	call	PL378	;call to abstracted procedure
 27968  001298  6165               	cpfslt	AESCmac@i& (0+255),b
 27969  00129A  D00C               	goto	l12900
 27970                           
 27971                           ; BSR set to: 1
 27972                           ;lorawan_aes_cmac.c: 78: {
 27973                           ;lorawan_aes_cmac.c: 79: padded[i] = ptr[i];
 27974  00129C  5165               	movf	AESCmac@i& (0+255),w,b
 27975  00129E  2560               	addwf	AESCmac@ptr& (0+255),w,b
 27976  0012A0  6ED9               	movwf	fsr2l,c
 27977  0012A2  0E00               	movlw	0
 27978  0012A4  2161               	addwfc	(AESCmac@ptr+1)& (0+255),w,b
 27979  0012A6  6EDA               	movwf	fsr2h,c
 27980  0012A8  0E30               	movlw	low AESCmac@padded
 27981  0012AA  D8CA               	call	PL352	;call to abstracted procedure
 27982  0012AC  22EA               	addwfc	fsr0h,f,c
 27983  0012AE  CFDF FFEF          	movff	indf2,indf0
 27984                           
 27985                           ;lorawan_aes_cmac.c: 80: }
 27986  0012B2  D009               	goto	l12906
 27987  0012B4                     l12900:
 27988                           
 27989                           ; BSR set to: 1
 27990                           ;lorawan_aes_cmac.c: 81: else
 27991                           ;lorawan_aes_cmac.c: 82: {
 27992                           ;lorawan_aes_cmac.c: 83: if ( i == (size%16) )
 27993  0012B4  D8D9               	call	PL378	;call to abstracted procedure
 27994  0012B6  1965               	xorwf	AESCmac@i& (0+255),w,b
 27995  0012B8  E104               	bnz	l12904
 27996                           
 27997                           ; BSR set to: 1
 27998                           ;lorawan_aes_cmac.c: 84: {
 27999                           ;lorawan_aes_cmac.c: 85: padded[i] = 0x80;
 28000  0012BA  D8B0               	call	PL292	;call to abstracted procedure
 28001  0012BC  0E80               	movlw	128
 28002  0012BE  6EDF               	movwf	indf2,c
 28003                           
 28004                           ;lorawan_aes_cmac.c: 86: }
 28005  0012C0  D002               	goto	l12906
 28006  0012C2                     l12904:
 28007                           
 28008                           ; BSR set to: 1
 28009                           ;lorawan_aes_cmac.c: 87: else
 28010                           ;lorawan_aes_cmac.c: 88: {
 28011                           ;lorawan_aes_cmac.c: 89: padded[i] = 0x00;
 28012  0012C2  D8AC               	call	PL292	;call to abstracted procedure
 28013  0012C4  6ADF               	clrf	indf2,c
 28014  0012C6                     l12906:
 28015                           
 28016                           ; BSR set to: 1
 28017  0012C6  2B65               	incf	AESCmac@i& (0+255),f,b
 28018                           
 28019                           ; BSR set to: 1
 28020  0012C8  0E0F               	movlw	15
 28021  0012CA  6565               	cpfsgt	AESCmac@i& (0+255),b
 28022  0012CC  D7E4               	goto	l12896
 28023                           
 28024                           ; BSR set to: 1
 28025                           ;lorawan_aes_cmac.c: 90: }
 28026                           ;lorawan_aes_cmac.c: 91: }
 28027                           ;lorawan_aes_cmac.c: 92: }
 28028                           ;lorawan_aes_cmac.c: 95: for (i=0; i<sizeof(mLast); i++)
 28029  0012CE  6B65               	clrf	AESCmac@i& (0+255),b
 28030  0012D0                     l12914:
 28031                           
 28032                           ; BSR set to: 1
 28033                           ;lorawan_aes_cmac.c: 96: {
 28034                           ;lorawan_aes_cmac.c: 97: mLast[i] = padded[i] ^ k2[i];
 28035  0012D0  0E20               	movlw	low AESCmac@mLast
 28036  0012D2  2565               	addwf	AESCmac@i& (0+255),w,b
 28037  0012D4  D8C4               	call	PL370	;call to abstracted procedure
 28038  0012D6  0E00               	movlw	low AESCmac@k2
 28039  0012D8  2565               	addwf	AESCmac@i& (0+255),w,b
 28040  0012DA  6EE9               	movwf	fsr0l,c
 28041  0012DC  6AEA               	clrf	fsr0h,c
 28042  0012DE  0E01               	movlw	high AESCmac@k2
 28043  0012E0  D8A4               	call	PL314	;call to abstracted procedure
 28044  0012E2  0E30               	movlw	low AESCmac@padded
 28045  0012E4  0101               	movlb	1	; () banked
 28046  0012E6  D8AC               	call	PL352	;call to abstracted procedure
 28047                           
 28048                           ; BSR set to: 0
 28049                           
 28050                           ; BSR set to: 1
 28051  0012E8  D889               	call	PL226	;call to abstracted procedure
 28052  0012EA  6565               	cpfsgt	AESCmac@i& (0+255),b
 28053  0012EC  D7F1               	goto	l12914
 28054  0012EE                     l12920:
 28055                           
 28056                           ;lorawan_aes_cmac.c: 98: }
 28057                           ;lorawan_aes_cmac.c: 99: }
 28058                           ;lorawan_aes_cmac.c: 101: memset(x, 0, sizeof(x));
 28059  0012EE  0E50               	movlw	low AESCmac@x
 28060  0012F0  0100               	movlb	0	; () banked
 28061  0012F2  6F60               	movwf	memset@p1& (0+255),b
 28062  0012F4  0E01               	movlw	high AESCmac@x
 28063  0012F6  6F61               	movwf	(memset@p1+1)& (0+255),b
 28064  0012F8  ECC4  F021         	call	PL140	;call to abstracted procedure
 28065  0012FC  ECEF  F02D         	call	_memset	;wreg free
 28066                           
 28067                           ; BSR set to: 0
 28068                           ;lorawan_aes_cmac.c: 103: for (i=0; i<(n-1); i++)
 28069  001300  0101               	movlb	1	; () banked
 28070  001302  6B65               	clrf	AESCmac@i& (0+255),b
 28071  001304  D034               	goto	l12938
 28072  001306                     l1413:
 28073                           
 28074                           ; BSR set to: 0
 28075                           ;lorawan_aes_cmac.c: 104: {
 28076                           ;lorawan_aes_cmac.c: 105: for (j=0; j<16; j++)
 28077  001306  0101               	movlb	1	; () banked
 28078  001308  6B64               	clrf	AESCmac@j& (0+255),b
 28079  00130A                     l12928:
 28080                           
 28081                           ; BSR set to: 1
 28082                           ;lorawan_aes_cmac.c: 106: {
 28083                           ;lorawan_aes_cmac.c: 107: y[j] = x[j] ^ input[(i << (4))+j];
 28084  00130A  0E40               	movlw	low AESCmac@y
 28085  00130C  2564               	addwf	AESCmac@j& (0+255),w,b
 28086  00130E  D8B1               	call	PL396	;call to abstracted procedure
 28087  001310  5165               	movf	AESCmac@i& (0+255),w,b
 28088  001312  D862               	call	PL146	;call to abstracted procedure
 28089  001314  C0CC  F0D1         	movff	AESCmac@input,??_AESCmac+2
 28090  001318  C0CD  F0D2         	movff	AESCmac@input+1,??_AESCmac+3
 28091  00131C  D896               	call	PL354	;call to abstracted procedure
 28092  00131E  5164               	movf	AESCmac@j& (0+255),w,b
 28093  001320  0100               	movlb	0	; () banked
 28094  001322  25D1               	addwf	(??_AESCmac+2)& (0+255),w,b
 28095  001324  6EE9               	movwf	fsr0l,c
 28096  001326  0E00               	movlw	0
 28097  001328  21D2               	addwfc	(??_AESCmac+3)& (0+255),w,b
 28098  00132A  6EEA               	movwf	fsr0h,c
 28099  00132C  50EF               	movf	indf0,w,c
 28100  00132E  6FD3               	movwf	(??_AESCmac+4)& (0+255),b
 28101  001330  0E50               	movlw	low AESCmac@x
 28102  001332  0101               	movlb	1	; () banked
 28103  001334  2564               	addwf	AESCmac@j& (0+255),w,b
 28104  001336  D86E               	call	PL286	;call to abstracted procedure
 28105  001338  22EA               	addwfc	fsr0h,f,c
 28106  00133A  50EF               	movf	indf0,w,c
 28107  00133C  0100               	movlb	0	; () banked
 28108  00133E  19D3               	xorwf	(??_AESCmac+4)& (0+255),w,b
 28109  001340  6EDF               	movwf	indf2,c
 28110                           
 28111                           ; BSR set to: 0
 28112  001342  0101               	movlb	1	; () banked
 28113  001344  2B64               	incf	AESCmac@j& (0+255),f,b
 28114                           
 28115                           ; BSR set to: 1
 28116  001346  0E0F               	movlw	15
 28117  001348  6564               	cpfsgt	AESCmac@j& (0+255),b
 28118  00134A  D7DF               	goto	l12928
 28119                           
 28120                           ; BSR set to: 1
 28121                           ;lorawan_aes_cmac.c: 108: }
 28122                           ;lorawan_aes_cmac.c: 109: memcpy(x, y, sizeof(y));
 28123  00134C  0E50               	movlw	low AESCmac@x
 28124  00134E  0100               	movlb	0	; () banked
 28125  001350  6F60               	movwf	memcpy@d1& (0+255),b
 28126  001352  0E01               	movlw	high AESCmac@x
 28127  001354  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 28128  001356  D85A               	call	PL254	;call to abstracted procedure
 28129  001358  D84C               	call	PL206	;call to abstracted procedure
 28130  00135A  EC94  F028         	call	_memcpy	;wreg free
 28131                           
 28132                           ;lorawan_aes_cmac.c: 110: AESEncodeLoRa(x,key);
 28133  00135E  0E50               	movlw	low AESCmac@x
 28134  001360  6F8C               	movwf	AESEncodeLoRa@block& (0+255),b
 28135  001362  0E01               	movlw	high AESCmac@x
 28136  001364  D867               	call	PL328	;call to abstracted procedure
 28137  001366  EC51  F02E         	call	_AESEncodeLoRa	;wreg free
 28138                           
 28139                           ; BSR set to: 0
 28140  00136A  0101               	movlb	1	; () banked
 28141  00136C  2B65               	incf	AESCmac@i& (0+255),f,b
 28142  00136E                     l12938:
 28143                           
 28144                           ; BSR set to: 1
 28145  00136E  0100               	movlb	0	; () banked
 28146  001370  69CF               	setf	??_AESCmac& (0+255),b
 28147  001372  69D0               	setf	(??_AESCmac+1)& (0+255),b
 28148  001374  0101               	movlb	1	; () banked
 28149  001376  5163               	movf	AESCmac@n& (0+255),w,b
 28150  001378  D86E               	call	PL366	;call to abstracted procedure
 28151  00137A  D867               	call	PL354	;call to abstracted procedure
 28152  00137C  5165               	movf	AESCmac@i& (0+255),w,b
 28153  00137E  0100               	movlb	0	; () banked
 28154  001380  6FD3               	movwf	(??_AESCmac+4)& (0+255),b
 28155  001382  6BD4               	clrf	(??_AESCmac+5)& (0+255),b
 28156  001384  51D1               	movf	(??_AESCmac+2)& (0+255),w,b
 28157  001386  5DD3               	subwf	(??_AESCmac+4)& (0+255),w,b
 28158  001388  51D4               	movf	(??_AESCmac+5)& (0+255),w,b
 28159  00138A  0A80               	xorlw	128
 28160  00138C  6FD5               	movwf	(??_AESCmac+6)& (0+255),b
 28161  00138E  51D2               	movf	(??_AESCmac+3)& (0+255),w,b
 28162  001390  0A80               	xorlw	128
 28163  001392  59D5               	subwfb	(??_AESCmac+6)& (0+255),w,b
 28164  001394  E3B8               	bnc	l1413
 28165                           
 28166                           ; BSR set to: 0
 28167                           ;lorawan_aes_cmac.c: 111: }
 28168                           ;lorawan_aes_cmac.c: 113: for (i=0; i<sizeof(x); i++)
 28169  001396  0101               	movlb	1	; () banked
 28170  001398  6B65               	clrf	AESCmac@i& (0+255),b
 28171  00139A                     l12944:
 28172                           
 28173                           ; BSR set to: 1
 28174                           ;lorawan_aes_cmac.c: 114: {
 28175                           ;lorawan_aes_cmac.c: 115: y[i] = x[i] ^ mLast[i];
 28176  00139A  0E40               	movlw	low AESCmac@y
 28177  00139C  2565               	addwf	AESCmac@i& (0+255),w,b
 28178  00139E  D869               	call	PL396	;call to abstracted procedure
 28179  0013A0  0E20               	movlw	low AESCmac@mLast
 28180  0013A2  2565               	addwf	AESCmac@i& (0+255),w,b
 28181  0013A4  6EE9               	movwf	fsr0l,c
 28182  0013A6  6AEA               	clrf	fsr0h,c
 28183  0013A8  0E01               	movlw	high AESCmac@mLast
 28184  0013AA  D83F               	call	PL314	;call to abstracted procedure
 28185  0013AC  0E50               	movlw	low AESCmac@x
 28186  0013AE  0101               	movlb	1	; () banked
 28187  0013B0  2565               	addwf	AESCmac@i& (0+255),w,b
 28188  0013B2  D830               	call	PL286	;call to abstracted procedure
 28189                           
 28190                           ; BSR set to: 0
 28191                           
 28192                           ; BSR set to: 1
 28193  0013B4  D823               	call	PL226	;call to abstracted procedure
 28194  0013B6  6565               	cpfsgt	AESCmac@i& (0+255),b
 28195  0013B8  D7F0               	goto	l12944
 28196                           
 28197                           ; BSR set to: 1
 28198                           ;lorawan_aes_cmac.c: 116: }
 28199                           ;lorawan_aes_cmac.c: 118: AESEncodeLoRa(y, key);
 28200  0013BA  0E40               	movlw	low AESCmac@y
 28201  0013BC  0100               	movlb	0	; () banked
 28202  0013BE  6F8C               	movwf	AESEncodeLoRa@block& (0+255),b
 28203  0013C0  0E01               	movlw	high AESCmac@y
 28204  0013C2  D838               	call	PL328	;call to abstracted procedure
 28205  0013C4  EC51  F02E         	call	_AESEncodeLoRa	;wreg free
 28206                           
 28207                           ;lorawan_aes_cmac.c: 120: memcpy(output, y, sizeof(y));
 28208  0013C8  C0CA  F060         	movff	AESCmac@output,memcpy@d1
 28209  0013CC  C0CB  F061         	movff	AESCmac@output+1,memcpy@d1+1
 28210  0013D0  D81D               	call	PL254	;call to abstracted procedure
 28211  0013D2  D80F               	call	PL206	;call to abstracted procedure
 28212  0013D4  EF94  F028         	goto	_memcpy	;wreg free
 28213  0013D8                     __end_of_AESCmac:
 28214                           	opt stack 0
 28215  0013D8                     PL146:
 28216                           	opt stack 16
 28217  0013D8  0100               	movlb	0	; () banked
 28218  0013DA  6FCF               	movwf	??_AESCmac& (0+255),b
 28219  0013DC  6BD0               	clrf	(??_AESCmac+1)& (0+255),b
 28220  0013DE  3BCF               	swapf	??_AESCmac& (0+255),f,b
 28221  0013E0  3BD0               	swapf	(??_AESCmac+1)& (0+255),f,b
 28222  0013E2  0EF0               	movlw	240
 28223  0013E4  17D0               	andwf	(??_AESCmac+1)& (0+255),f,b
 28224  0013E6  51CF               	movf	??_AESCmac& (0+255),w,b
 28225  0013E8  0B0F               	andlw	15
 28226  0013EA  13D0               	iorwf	(??_AESCmac+1)& (0+255),f,b
 28227  0013EC  0EF0               	movlw	240
 28228  0013EE  17CF               	andwf	??_AESCmac& (0+255),f,b
 28229  0013F0  0CF0               	retlw	240
 28230  0013F2                     __end_ofPL146:
 28231                           	opt stack 0
 28232  0013F2                     PL206:
 28233                           	opt stack 16
 28234  0013F2  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 28235  0013F4  6B65               	clrf	(memcpy@n+1)& (0+255),b
 28236  0013F6  0E10               	movlw	16
 28237  0013F8  6F64               	movwf	memcpy@n& (0+255),b
 28238  0013FA  0C10               	retlw	16
 28239  0013FC                     __end_ofPL206:
 28240                           	opt stack 0
 28241  0013FC                     PL226:
 28242                           	opt stack 16
 28243  0013FC  22EA               	addwfc	fsr0h,f,c
 28244  0013FE  50EF               	movf	indf0,w,c
 28245  001400  0100               	movlb	0	; () banked
 28246  001402  19CF               	xorwf	??_AESCmac& (0+255),w,b
 28247  001404  6EDF               	movwf	indf2,c
 28248  001406  0101               	movlb	1	; () banked
 28249  001408  2B65               	incf	AESCmac@i& (0+255),f,b
 28250  00140A  0C0F               	retlw	15
 28251  00140C                     __end_ofPL226:
 28252                           	opt stack 0
 28253  00140C                     PL254:
 28254                           	opt stack 16
 28255  00140C  0E40               	movlw	low AESCmac@y
 28256  00140E  6F62               	movwf	memcpy@s1& (0+255),b
 28257  001410  0E01               	movlw	high AESCmac@y
 28258  001412  0012               	return	
 28259  001414                     __end_ofPL254:
 28260                           	opt stack 0
 28261  001414                     PL286:
 28262                           	opt stack 16
 28263  001414  6EE9               	movwf	fsr0l,c
 28264  001416  6AEA               	clrf	fsr0h,c
 28265  001418  0E01               	movlw	high AESCmac@x
 28266  00141A  0012               	return	
 28267  00141C                     __end_ofPL286:
 28268                           	opt stack 0
 28269  00141C                     PL292:
 28270                           	opt stack 16
 28271  00141C  0E30               	movlw	low AESCmac@padded
 28272  00141E  2565               	addwf	AESCmac@i& (0+255),w,b
 28273  001420  6ED9               	movwf	fsr2l,c
 28274  001422  6ADA               	clrf	fsr2h,c
 28275  001424  0E01               	movlw	high AESCmac@padded
 28276  001426  22DA               	addwfc	fsr2h,f,c
 28277  001428  0012               	return	
 28278  00142A                     __end_ofPL292:
 28279                           	opt stack 0
 28280  00142A                     PL314:
 28281                           	opt stack 16
 28282  00142A  22EA               	addwfc	fsr0h,f,c
 28283  00142C  50EF               	movf	indf0,w,c
 28284  00142E  0100               	movlb	0	; () banked
 28285  001430  6FCF               	movwf	??_AESCmac& (0+255),b
 28286  001432  0012               	return	
 28287  001434                     __end_ofPL314:
 28288                           	opt stack 0
 28289  001434                     PL328:
 28290                           	opt stack 16
 28291  001434  6F8D               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 28292  001436  C0C8  F08E         	movff	AESCmac@key,AESEncodeLoRa@key
 28293  00143A  C0C9  F08F         	movff	AESCmac@key+1,AESEncodeLoRa@key+1
 28294  00143E  0012               	return	
 28295  001440                     __end_ofPL328:
 28296                           	opt stack 0
 28297  001440                     PL352:
 28298                           	opt stack 16
 28299  001440  2565               	addwf	AESCmac@i& (0+255),w,b
 28300  001442  6EE9               	movwf	fsr0l,c
 28301  001444  6AEA               	clrf	fsr0h,c
 28302  001446  0E01               	movlw	high AESCmac@padded
 28303  001448  0012               	return	
 28304  00144A                     __end_ofPL352:
 28305                           	opt stack 0
 28306  00144A                     PL354:
 28307                           	opt stack 16
 28308  00144A  51CF               	movf	??_AESCmac& (0+255),w,b
 28309  00144C  27D1               	addwf	(??_AESCmac+2)& (0+255),f,b
 28310  00144E  51D0               	movf	(??_AESCmac+1)& (0+255),w,b
 28311  001450  23D2               	addwfc	(??_AESCmac+3)& (0+255),f,b
 28312  001452  0101               	movlb	1	; () banked
 28313  001454  0012               	return	
 28314  001456                     __end_ofPL354:
 28315                           	opt stack 0
 28316  001456                     PL366:
 28317                           	opt stack 16
 28318  001456  0100               	movlb	0	; () banked
 28319  001458  6FD1               	movwf	(??_AESCmac+2)& (0+255),b
 28320  00145A  6BD2               	clrf	(??_AESCmac+3)& (0+255),b
 28321  00145C  0012               	return	
 28322  00145E                     __end_ofPL366:
 28323                           	opt stack 0
 28324  00145E                     PL370:
 28325                           	opt stack 16
 28326  00145E  6ED9               	movwf	fsr2l,c
 28327  001460  6ADA               	clrf	fsr2h,c
 28328  001462  0E01               	movlw	high AESCmac@mLast
 28329  001464  22DA               	addwfc	fsr2h,f,c
 28330  001466  0012               	return	
 28331  001468                     __end_ofPL370:
 28332                           	opt stack 0
 28333  001468                     PL378:
 28334                           	opt stack 16
 28335  001468  0100               	movlb	0	; () banked
 28336  00146A  51CE               	movf	AESCmac@size& (0+255),w,b
 28337  00146C  0B0F               	andlw	15
 28338  00146E  0101               	movlb	1	; () banked
 28339  001470  0012               	return	
 28340  001472                     __end_ofPL378:
 28341                           	opt stack 0
 28342  001472                     PL396:
 28343                           	opt stack 16
 28344  001472  6ED9               	movwf	fsr2l,c
 28345  001474  6ADA               	clrf	fsr2h,c
 28346  001476  0E01               	movlw	high AESCmac@y
 28347  001478  22DA               	addwfc	fsr2h,f,c
 28348  00147A  0012               	return	
 28349  00147C                     __end_ofPL396:
 28350                           	opt stack 0
 28351                           tosu	equ	0xFFF
 28352                           tosh	equ	0xFFE
 28353                           tosl	equ	0xFFD
 28354                           pclath	equ	0xFFA
 28355                           tblptru	equ	0xFF8
 28356                           tblptrh	equ	0xFF7
 28357                           tblptrl	equ	0xFF6
 28358                           tablat	equ	0xFF5
 28359                           prodh	equ	0xFF4
 28360                           prodl	equ	0xFF3
 28361                           intcon	equ	0xFF2
 28362                           indf0	equ	0xFEF
 28363                           postinc0	equ	0xFEE
 28364                           plusw0	equ	0xFEB
 28365                           fsr0h	equ	0xFEA
 28366                           fsr0l	equ	0xFE9
 28367                           wreg	equ	0xFE8
 28368                           postinc1	equ	0xFE6
 28369                           postdec1	equ	0xFE5
 28370                           plusw1	equ	0xFE3
 28371                           fsr1h	equ	0xFE2
 28372                           fsr1l	equ	0xFE1
 28373                           indf2	equ	0xFDF
 28374                           postinc2	equ	0xFDE
 28375                           postdec2	equ	0xFDD
 28376                           plusw2	equ	0xFDB
 28377                           fsr2h	equ	0xFDA
 28378                           fsr2l	equ	0xFD9
 28379                           status	equ	0xFD8
 28380                           
 28381 ;; *************** function _GenerateSubkey *****************
 28382 ;; Defined at:
 28383 ;;		line 124 in file "mcc_generated_files/LoRaWAN/lorawan_aes_cmac.c"
 28384 ;; Parameters:    Size  Location     Type
 28385 ;;  key             2   64[BANK0 ] PTR unsigned char 
 28386 ;;		 -> loRa.activationParameters(105), loRa(245), 
 28387 ;;  k1              2   66[BANK0 ] PTR unsigned char 
 28388 ;;		 -> AESCmac@k1(16), 
 28389 ;;  k2              2   68[BANK0 ] PTR unsigned char 
 28390 ;;		 -> AESCmac@k2(16), 
 28391 ;; Auto vars:     Size  Location     Type
 28392 ;;  l              16   87[BANK0 ] unsigned char [16]
 28393 ;;  const_Rb       16   71[BANK0 ] unsigned char [16]
 28394 ;;  i               1  103[BANK0 ] unsigned char 
 28395 ;; Return value:  Size  Location     Type
 28396 ;;                  1    wreg      void 
 28397 ;; Registers used:
 28398 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 28399 ;; Tracked objects:
 28400 ;;		On entry : 3F/0
 28401 ;;		On exit  : 3F/0
 28402 ;;		Unchanged: 0/0
 28403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 28404 ;;      Params:         0       6       0       0       0       0       0       0       0
 28405 ;;      Locals:         0      33       0       0       0       0       0       0       0
 28406 ;;      Temps:          0       1       0       0       0       0       0       0       0
 28407 ;;      Totals:         0      40       0       0       0       0       0       0       0
 28408 ;;Total ram usage:       40 bytes
 28409 ;; Hardware stack levels used:    1
 28410 ;; Hardware stack levels required when called:   10
 28411 ;; This function calls:
 28412 ;;		_AESEncodeLoRa
 28413 ;;		_FillSubKey
 28414 ;;		_memset
 28415 ;; This function is called by:
 28416 ;;		_AESCmac
 28417 ;; This function uses a non-reentrant model
 28418 ;;
 28419                           
 28420                           	psect	text146
 28421  0033F8                     __ptext146:
 28422                           	opt stack 0
 28423  0033F8                     _GenerateSubkey:
 28424                           	opt stack 16
 28425                           
 28426                           ; BSR set to: 0
 28427                           ;lorawan_aes_cmac.c: 127: uint8_t l[16];
 28428                           ;lorawan_aes_cmac.c: 128: uint8_t const_Rb[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x
      +                          00, 0x00,
 28429                           ;lorawan_aes_cmac.c: 129: 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87};
 28430                           
 28431                           ; BSR set to: 0
 28432                           
 28433                           ; BSR set to: 0
 28434                           ;incstack = 0
 28435  0033F8  EE21  F0C7         	lfsr	2,GenerateSubkey@F17267
 28436  0033FC  EE00  F0A7         	lfsr	0,GenerateSubkey@const_Rb
 28437  003400  0E0F               	movlw	15
 28438  003402                     u13401:
 28439  003402  CFDB FFEB          	movff	plusw2,plusw0
 28440  003406  06E8               	decf	wreg,f,c
 28441  003408  E2FC               	bc	u13401
 28442                           
 28443                           ; BSR set to: 0
 28444                           ;lorawan_aes_cmac.c: 132: memset(l, 0, sizeof(l));
 28445  00340A  0EB7               	movlw	low GenerateSubkey@l
 28446  00340C  6F60               	movwf	memset@p1& (0+255),b
 28447  00340E  6B61               	clrf	(memset@p1+1)& (0+255),b
 28448  003410  ECC4  F021         	call	PL140	;call to abstracted procedure
 28449  003414  ECEF  F02D         	call	_memset	;wreg free
 28450                           
 28451                           ; BSR set to: 0
 28452                           ;lorawan_aes_cmac.c: 134: AESEncodeLoRa(l, key);
 28453  003418  0EB7               	movlw	low GenerateSubkey@l
 28454  00341A  6F8C               	movwf	AESEncodeLoRa@block& (0+255),b
 28455  00341C  6B8D               	clrf	(AESEncodeLoRa@block+1)& (0+255),b
 28456  00341E  C0A0  F08E         	movff	GenerateSubkey@key,AESEncodeLoRa@key
 28457  003422  C0A1  F08F         	movff	GenerateSubkey@key+1,AESEncodeLoRa@key+1
 28458  003426  EC51  F02E         	call	_AESEncodeLoRa	;wreg free
 28459                           
 28460                           ; BSR set to: 0
 28461                           ;lorawan_aes_cmac.c: 137: if ( (l[0] & 0x80) == 0x00 )
 28462  00342A  BFB7               	btfsc	GenerateSubkey@l& (0+255),7,b
 28463  00342C  D004               	goto	l12486
 28464                           
 28465                           ; BSR set to: 0
 28466                           ;lorawan_aes_cmac.c: 138: {
 28467                           ;lorawan_aes_cmac.c: 139: FillSubKey( l, k1, (sizeof(l) ) );
 28468  00342E  D84B               	call	PL200	;call to abstracted procedure
 28469  003430  EC70  F02A         	call	_FillSubKey	;wreg free
 28470                           
 28471                           ;lorawan_aes_cmac.c: 140: }
 28472  003434  D016               	goto	l12500
 28473  003436                     l12486:
 28474                           
 28475                           ; BSR set to: 0
 28476                           ;lorawan_aes_cmac.c: 141: else
 28477                           ;lorawan_aes_cmac.c: 142: {
 28478                           ;lorawan_aes_cmac.c: 143: FillSubKey( l, k1, (sizeof(l) ) );
 28479  003436  D847               	call	PL200	;call to abstracted procedure
 28480  003438  EC70  F02A         	call	_FillSubKey	;wreg free
 28481                           
 28482                           ; BSR set to: 0
 28483                           ;lorawan_aes_cmac.c: 145: for (i=0; i<sizeof(l); i++)
 28484  00343C  6BC7               	clrf	GenerateSubkey@i& (0+255),b
 28485  00343E                     l12494:
 28486                           
 28487                           ; BSR set to: 0
 28488                           ;lorawan_aes_cmac.c: 146: {
 28489                           ;lorawan_aes_cmac.c: 147: k1[i] ^= const_Rb[i];
 28490  00343E  51C7               	movf	GenerateSubkey@i& (0+255),w,b
 28491  003440  0FA7               	addlw	low GenerateSubkey@const_Rb
 28492  003442  6ED9               	movwf	fsr2l,c
 28493  003444  6ADA               	clrf	fsr2h,c
 28494  003446  50DF               	movf	indf2,w,c
 28495  003448  6FA6               	movwf	??_GenerateSubkey& (0+255),b
 28496  00344A  51C7               	movf	GenerateSubkey@i& (0+255),w,b
 28497  00344C  25A2               	addwf	GenerateSubkey@k1& (0+255),w,b
 28498  00344E  6ED9               	movwf	fsr2l,c
 28499  003450  0E00               	movlw	0
 28500  003452  21A3               	addwfc	(GenerateSubkey@k1+1)& (0+255),w,b
 28501  003454  6EDA               	movwf	fsr2h,c
 28502  003456  51A6               	movf	??_GenerateSubkey& (0+255),w,b
 28503  003458  1ADF               	xorwf	indf2,f,c
 28504                           
 28505                           ; BSR set to: 0
 28506  00345A  2BC7               	incf	GenerateSubkey@i& (0+255),f,b
 28507                           
 28508                           ; BSR set to: 0
 28509  00345C  0E0F               	movlw	15
 28510  00345E  65C7               	cpfsgt	GenerateSubkey@i& (0+255),b
 28511  003460  D7EE               	goto	l12494
 28512  003462                     l12500:
 28513                           
 28514                           ; BSR set to: 0
 28515                           ;lorawan_aes_cmac.c: 148: }
 28516                           ;lorawan_aes_cmac.c: 149: }
 28517                           ;lorawan_aes_cmac.c: 152: if ( (k1[0] & 0x80) == 0x00 )
 28518  003462  C0A2  FFD9         	movff	GenerateSubkey@k1,fsr2l
 28519  003466  C0A3  FFDA         	movff	GenerateSubkey@k1+1,fsr2h
 28520  00346A  BEDF               	btfsc	indf2,7,c
 28521  00346C  D003               	goto	l12504
 28522                           
 28523                           ; BSR set to: 0
 28524                           ;lorawan_aes_cmac.c: 153: {
 28525                           ;lorawan_aes_cmac.c: 154: FillSubKey( k1, k2, (sizeof(l)) );
 28526  00346E  D820               	call	PL174	;call to abstracted procedure
 28527  003470  EF70  F02A         	goto	_FillSubKey	;wreg free
 28528  003474                     l12504:
 28529                           
 28530                           ; BSR set to: 0
 28531                           ;lorawan_aes_cmac.c: 156: else
 28532                           ;lorawan_aes_cmac.c: 157: {
 28533                           ;lorawan_aes_cmac.c: 158: FillSubKey( k1, k2, (sizeof(l) ) );
 28534  003474  D81D               	call	PL174	;call to abstracted procedure
 28535  003476  EC70  F02A         	call	_FillSubKey	;wreg free
 28536                           
 28537                           ; BSR set to: 0
 28538                           ;lorawan_aes_cmac.c: 160: for (i=0; i<sizeof(l); i++)
 28539  00347A  6BC7               	clrf	GenerateSubkey@i& (0+255),b
 28540  00347C                     l12512:
 28541                           
 28542                           ; BSR set to: 0
 28543                           ;lorawan_aes_cmac.c: 161: {
 28544                           ;lorawan_aes_cmac.c: 162: k2[i] = k2[i] ^ const_Rb[i];
 28545  00347C  51C7               	movf	GenerateSubkey@i& (0+255),w,b
 28546  00347E  25A4               	addwf	GenerateSubkey@k2& (0+255),w,b
 28547  003480  6ED9               	movwf	fsr2l,c
 28548  003482  0E00               	movlw	0
 28549  003484  21A5               	addwfc	(GenerateSubkey@k2+1)& (0+255),w,b
 28550  003486  6EDA               	movwf	fsr2h,c
 28551  003488  51C7               	movf	GenerateSubkey@i& (0+255),w,b
 28552  00348A  0FA7               	addlw	low GenerateSubkey@const_Rb
 28553  00348C  6EE9               	movwf	fsr0l,c
 28554  00348E  6AEA               	clrf	fsr0h,c
 28555  003490  50EF               	movf	indf0,w,c
 28556  003492  6FA6               	movwf	??_GenerateSubkey& (0+255),b
 28557  003494  51C7               	movf	GenerateSubkey@i& (0+255),w,b
 28558  003496  25A4               	addwf	GenerateSubkey@k2& (0+255),w,b
 28559  003498  6EE9               	movwf	fsr0l,c
 28560  00349A  0E00               	movlw	0
 28561  00349C  21A5               	addwfc	(GenerateSubkey@k2+1)& (0+255),w,b
 28562  00349E  6EEA               	movwf	fsr0h,c
 28563  0034A0  50EF               	movf	indf0,w,c
 28564  0034A2  19A6               	xorwf	??_GenerateSubkey& (0+255),w,b
 28565  0034A4  6EDF               	movwf	indf2,c
 28566                           
 28567                           ; BSR set to: 0
 28568  0034A6  2BC7               	incf	GenerateSubkey@i& (0+255),f,b
 28569                           
 28570                           ; BSR set to: 0
 28571  0034A8  0E0F               	movlw	15
 28572  0034AA  65C7               	cpfsgt	GenerateSubkey@i& (0+255),b
 28573  0034AC  D7E7               	goto	l12512
 28574  0034AE  0C0F               	retlw	15
 28575  0034B0                     __end_of_GenerateSubkey:
 28576                           	opt stack 0
 28577  0034B0                     PL174:
 28578                           	opt stack 16
 28579  0034B0  C0A2  F060         	movff	GenerateSubkey@k1,FillSubKey@source
 28580  0034B4  C0A3  F061         	movff	GenerateSubkey@k1+1,FillSubKey@source+1
 28581  0034B8  C0A4  F062         	movff	GenerateSubkey@k2,FillSubKey@key
 28582  0034BC  C0A5  F063         	movff	GenerateSubkey@k2+1,FillSubKey@key+1
 28583  0034C0  0E10               	movlw	16
 28584  0034C2  6F64               	movwf	FillSubKey@size& (0+255),b
 28585  0034C4  0C10               	retlw	16
 28586  0034C6                     __end_ofPL174:
 28587                           	opt stack 0
 28588  0034C6                     PL200:
 28589                           	opt stack 16
 28590  0034C6  0EB7               	movlw	low GenerateSubkey@l
 28591  0034C8  6F60               	movwf	FillSubKey@source& (0+255),b
 28592  0034CA  6B61               	clrf	(FillSubKey@source+1)& (0+255),b
 28593  0034CC  C0A2  F062         	movff	GenerateSubkey@k1,FillSubKey@key
 28594  0034D0  C0A3  F063         	movff	GenerateSubkey@k1+1,FillSubKey@key+1
 28595  0034D4  0E10               	movlw	16
 28596  0034D6  6F64               	movwf	FillSubKey@size& (0+255),b
 28597  0034D8  0C10               	retlw	16
 28598  0034DA                     __end_ofPL200:
 28599                           	opt stack 0
 28600                           tosu	equ	0xFFF
 28601                           tosh	equ	0xFFE
 28602                           tosl	equ	0xFFD
 28603                           pclath	equ	0xFFA
 28604                           tblptru	equ	0xFF8
 28605                           tblptrh	equ	0xFF7
 28606                           tblptrl	equ	0xFF6
 28607                           tablat	equ	0xFF5
 28608                           prodh	equ	0xFF4
 28609                           prodl	equ	0xFF3
 28610                           intcon	equ	0xFF2
 28611                           indf0	equ	0xFEF
 28612                           postinc0	equ	0xFEE
 28613                           plusw0	equ	0xFEB
 28614                           fsr0h	equ	0xFEA
 28615                           fsr0l	equ	0xFE9
 28616                           wreg	equ	0xFE8
 28617                           postinc1	equ	0xFE6
 28618                           postdec1	equ	0xFE5
 28619                           plusw1	equ	0xFE3
 28620                           fsr1h	equ	0xFE2
 28621                           fsr1l	equ	0xFE1
 28622                           indf2	equ	0xFDF
 28623                           postinc2	equ	0xFDE
 28624                           postdec2	equ	0xFDD
 28625                           plusw2	equ	0xFDB
 28626                           fsr2h	equ	0xFDA
 28627                           fsr2l	equ	0xFD9
 28628                           status	equ	0xFD8
 28629                           
 28630 ;; *************** function _FillSubKey *****************
 28631 ;; Defined at:
 28632 ;;		line 167 in file "mcc_generated_files/LoRaWAN/lorawan_aes_cmac.c"
 28633 ;; Parameters:    Size  Location     Type
 28634 ;;  source          2    0[BANK0 ] PTR unsigned char 
 28635 ;;		 -> GenerateSubkey@l(16), AESCmac@k1(16), 
 28636 ;;  key             2    2[BANK0 ] PTR unsigned char 
 28637 ;;		 -> AESCmac@k2(16), AESCmac@k1(16), 
 28638 ;;  size            1    4[BANK0 ] unsigned char 
 28639 ;; Auto vars:     Size  Location     Type
 28640 ;;  i               1    7[BANK0 ] unsigned char 
 28641 ;;  carry           1    6[BANK0 ] unsigned char 
 28642 ;; Return value:  Size  Location     Type
 28643 ;;                  1    wreg      void 
 28644 ;; Registers used:
 28645 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
 28646 ;; Tracked objects:
 28647 ;;		On entry : 3F/0
 28648 ;;		On exit  : 3F/0
 28649 ;;		Unchanged: 0/0
 28650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 28651 ;;      Params:         0       5       0       0       0       0       0       0       0
 28652 ;;      Locals:         0       2       0       0       0       0       0       0       0
 28653 ;;      Temps:          0       1       0       0       0       0       0       0       0
 28654 ;;      Totals:         0       8       0       0       0       0       0       0       0
 28655 ;;Total ram usage:        8 bytes
 28656 ;; Hardware stack levels used:    1
 28657 ;; Hardware stack levels required when called:    7
 28658 ;; This function calls:
 28659 ;;		Nothing
 28660 ;; This function is called by:
 28661 ;;		_GenerateSubkey
 28662 ;; This function uses a non-reentrant model
 28663 ;;
 28664                           
 28665                           	psect	text147
 28666  0054E0                     __ptext147:
 28667                           	opt stack 0
 28668  0054E0                     _FillSubKey:
 28669                           	opt stack 18
 28670                           
 28671                           ; BSR set to: 0
 28672                           ;lorawan_aes_cmac.c: 169: uint8_t i = 0;
 28673                           
 28674                           ; BSR set to: 0
 28675                           ;incstack = 0
 28676  0054E0  6B67               	clrf	FillSubKey@i& (0+255),b
 28677                           
 28678                           ;lorawan_aes_cmac.c: 170: uint8_t carry = 0;
 28679  0054E2  6B66               	clrf	FillSubKey@carry& (0+255),b
 28680                           
 28681                           ;lorawan_aes_cmac.c: 172: i=size;
 28682  0054E4  C064  F067         	movff	FillSubKey@size,FillSubKey@i
 28683                           
 28684                           ;lorawan_aes_cmac.c: 174: while(i--)
 28685  0054E8  D01C               	goto	l12124
 28686  0054EA                     l12120:
 28687                           
 28688                           ; BSR set to: 0
 28689                           ;lorawan_aes_cmac.c: 175: {
 28690                           ;lorawan_aes_cmac.c: 176: key[i] = (source[i] << (1)) | carry;
 28691  0054EA  5167               	movf	FillSubKey@i& (0+255),w,b
 28692  0054EC  2562               	addwf	FillSubKey@key& (0+255),w,b
 28693  0054EE  6ED9               	movwf	fsr2l,c
 28694  0054F0  0E00               	movlw	0
 28695  0054F2  2163               	addwfc	(FillSubKey@key+1)& (0+255),w,b
 28696  0054F4  6EDA               	movwf	fsr2h,c
 28697  0054F6  5167               	movf	FillSubKey@i& (0+255),w,b
 28698  0054F8  2560               	addwf	FillSubKey@source& (0+255),w,b
 28699  0054FA  6EE9               	movwf	fsr0l,c
 28700  0054FC  0E00               	movlw	0
 28701  0054FE  2161               	addwfc	(FillSubKey@source+1)& (0+255),w,b
 28702  005500  6EEA               	movwf	fsr0h,c
 28703  005502  50EF               	movf	indf0,w,c
 28704  005504  6F65               	movwf	??_FillSubKey& (0+255),b
 28705  005506  90D8               	bcf	status,0,c
 28706  005508  3565               	rlcf	??_FillSubKey& (0+255),w,b
 28707  00550A  1166               	iorwf	FillSubKey@carry& (0+255),w,b
 28708  00550C  6EDF               	movwf	indf2,c
 28709                           
 28710                           ; BSR set to: 0
 28711                           ;lorawan_aes_cmac.c: 177: carry = !!(source[i] & 0x80);
 28712  00550E  5167               	movf	FillSubKey@i& (0+255),w,b
 28713  005510  2560               	addwf	FillSubKey@source& (0+255),w,b
 28714  005512  6ED9               	movwf	fsr2l,c
 28715  005514  0E00               	movlw	0
 28716  005516  2161               	addwfc	(FillSubKey@source+1)& (0+255),w,b
 28717  005518  6EDA               	movwf	fsr2h,c
 28718  00551A  0E01               	movlw	1
 28719  00551C  AEDF               	btfss	indf2,7,c
 28720  00551E  0E00               	movlw	0
 28721  005520  6F66               	movwf	FillSubKey@carry& (0+255),b
 28722  005522                     l12124:
 28723                           
 28724                           ; BSR set to: 0
 28725  005522  0767               	decf	FillSubKey@i& (0+255),f,b
 28726  005524  2967               	incf	FillSubKey@i& (0+255),w,b
 28727  005526  E1E1               	bnz	l12120
 28728                           
 28729                           ; BSR set to: 0
 28730  005528  0012               	return		;funcret
 28731  00552A                     __end_of_FillSubKey:
 28732                           	opt stack 0
 28733                           tosu	equ	0xFFF
 28734                           tosh	equ	0xFFE
 28735                           tosl	equ	0xFFD
 28736                           pclath	equ	0xFFA
 28737                           tblptru	equ	0xFF8
 28738                           tblptrh	equ	0xFF7
 28739                           tblptrl	equ	0xFF6
 28740                           tablat	equ	0xFF5
 28741                           prodh	equ	0xFF4
 28742                           prodl	equ	0xFF3
 28743                           intcon	equ	0xFF2
 28744                           indf0	equ	0xFEF
 28745                           postinc0	equ	0xFEE
 28746                           plusw0	equ	0xFEB
 28747                           fsr0h	equ	0xFEA
 28748                           fsr0l	equ	0xFE9
 28749                           wreg	equ	0xFE8
 28750                           postinc1	equ	0xFE6
 28751                           postdec1	equ	0xFE5
 28752                           plusw1	equ	0xFE3
 28753                           fsr1h	equ	0xFE2
 28754                           fsr1l	equ	0xFE1
 28755                           indf2	equ	0xFDF
 28756                           postinc2	equ	0xFDE
 28757                           postdec2	equ	0xFDD
 28758                           plusw2	equ	0xFDB
 28759                           fsr2h	equ	0xFDA
 28760                           fsr2l	equ	0xFD9
 28761                           status	equ	0xFD8
 28762                           
 28763 ;; *************** function _AESEncodeLoRa *****************
 28764 ;; Defined at:
 28765 ;;		line 34 in file "mcc_generated_files/LoRaWAN/lorawan_aes.c"
 28766 ;; Parameters:    Size  Location     Type
 28767 ;;  block           2   44[BANK0 ] PTR unsigned char 
 28768 ;;		 -> GenerateSubkey@l(16), AESCmac@y(16), AESCmac@x(16), aesBuffer(16), 
 28769 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), loRa.activationParameters(105), loRa(245), 
 28770 ;;  key             2   46[BANK0 ] PTR unsigned char 
 28771 ;;		 -> loRa.activationParameters(105), loRa(245), 
 28772 ;; Auto vars:     Size  Location     Type
 28773 ;;  useKey         16   48[BANK0 ] unsigned char [16]
 28774 ;; Return value:  Size  Location     Type
 28775 ;;                  1    wreg      void 
 28776 ;; Registers used:
 28777 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 28778 ;; Tracked objects:
 28779 ;;		On entry : 3F/0
 28780 ;;		On exit  : 3F/0
 28781 ;;		Unchanged: 0/0
 28782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 28783 ;;      Params:         0       4       0       0       0       0       0       0       0
 28784 ;;      Locals:         0      16       0       0       0       0       0       0       0
 28785 ;;      Temps:          0       0       0       0       0       0       0       0       0
 28786 ;;      Totals:         0      20       0       0       0       0       0       0       0
 28787 ;;Total ram usage:       20 bytes
 28788 ;; Hardware stack levels used:    1
 28789 ;; Hardware stack levels required when called:    9
 28790 ;; This function calls:
 28791 ;;		_AESEncode
 28792 ;;		_memcpy
 28793 ;; This function is called by:
 28794 ;;		_LORAWAN_RxDone
 28795 ;;		_ComputeSessionKeys
 28796 ;;		_EncryptFRMPayload
 28797 ;;		_AESCmac
 28798 ;;		_GenerateSubkey
 28799 ;; This function uses a non-reentrant model
 28800 ;;
 28801                           
 28802                           	psect	text148
 28803  005CA2                     __ptext148:
 28804                           	opt stack 0
 28805  005CA2                     _AESEncodeLoRa:
 28806                           	opt stack 17
 28807                           
 28808                           ; BSR set to: 0
 28809                           ;lorawan_aes.c: 36: uint8_t useKey[16];
 28810                           ;lorawan_aes.c: 37: memcpy(useKey, key, sizeof(useKey));
 28811                           
 28812                           ; BSR set to: 0
 28813                           ;incstack = 0
 28814  005CA2  0E90               	movlw	low AESEncodeLoRa@useKey
 28815  005CA4  6F60               	movwf	memcpy@d1& (0+255),b
 28816  005CA6  6B61               	clrf	(memcpy@d1+1)& (0+255),b
 28817  005CA8  C08E  F062         	movff	AESEncodeLoRa@key,memcpy@s1
 28818  005CAC  C08F  F063         	movff	AESEncodeLoRa@key+1,memcpy@s1+1
 28819  005CB0  ECF6  F02C         	call	PL306	;call to abstracted procedure
 28820  005CB4  EC94  F028         	call	_memcpy	;wreg free
 28821                           
 28822                           ;lorawan_aes.c: 38: AESEncode(block, useKey);
 28823  005CB8  C08C  F066         	movff	AESEncodeLoRa@block,AESEncode@block
 28824  005CBC  C08D  F067         	movff	AESEncodeLoRa@block+1,AESEncode@block+1
 28825  005CC0  0E90               	movlw	low AESEncodeLoRa@useKey
 28826  005CC2  6F68               	movwf	AESEncode@masterKey& (0+255),b
 28827  005CC4  EFAA  F00C         	goto	_AESEncode	;wreg free
 28828  005CC8                     __end_of_AESEncodeLoRa:
 28829                           	opt stack 0
 28830                           tosu	equ	0xFFF
 28831                           tosh	equ	0xFFE
 28832                           tosl	equ	0xFFD
 28833                           pclath	equ	0xFFA
 28834                           tblptru	equ	0xFF8
 28835                           tblptrh	equ	0xFF7
 28836                           tblptrl	equ	0xFF6
 28837                           tablat	equ	0xFF5
 28838                           prodh	equ	0xFF4
 28839                           prodl	equ	0xFF3
 28840                           intcon	equ	0xFF2
 28841                           indf0	equ	0xFEF
 28842                           postinc0	equ	0xFEE
 28843                           plusw0	equ	0xFEB
 28844                           fsr0h	equ	0xFEA
 28845                           fsr0l	equ	0xFE9
 28846                           wreg	equ	0xFE8
 28847                           postinc1	equ	0xFE6
 28848                           postdec1	equ	0xFE5
 28849                           plusw1	equ	0xFE3
 28850                           fsr1h	equ	0xFE2
 28851                           fsr1l	equ	0xFE1
 28852                           indf2	equ	0xFDF
 28853                           postinc2	equ	0xFDE
 28854                           postdec2	equ	0xFDD
 28855                           plusw2	equ	0xFDB
 28856                           fsr2h	equ	0xFDA
 28857                           fsr2l	equ	0xFD9
 28858                           status	equ	0xFD8
 28859                           
 28860 ;; *************** function _AESEncode *****************
 28861 ;; Defined at:
 28862 ;;		line 236 in file "mcc_generated_files/LoRaWAN/AES.c"
 28863 ;; Parameters:    Size  Location     Type
 28864 ;;  block           2    6[BANK0 ] PTR unsigned char 
 28865 ;;		 -> GenerateSubkey@l(16), AESCmac@y(16), AESCmac@x(16), aesBuffer(16), 
 28866 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), loRa.activationParameters(105), loRa(245), 
 28867 ;;  masterKey       1    8[BANK0 ] PTR unsigned char 
 28868 ;;		 -> AESEncodeLoRa@useKey(16), 
 28869 ;; Auto vars:     Size  Location     Type
 28870 ;;  aux3            1   42[BANK0 ] unsigned char 
 28871 ;;  aux1            1   41[BANK0 ] unsigned char 
 28872 ;;  aux2            1   40[BANK0 ] unsigned char 
 28873 ;;  aux             1   39[BANK0 ] unsigned char 
 28874 ;;  key            16   17[BANK0 ] unsigned char [16]
 28875 ;;  i               1   43[BANK0 ] unsigned char 
 28876 ;; Return value:  Size  Location     Type
 28877 ;;                  1    wreg      void 
 28878 ;; Registers used:
 28879 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 28880 ;; Tracked objects:
 28881 ;;		On entry : 3F/0
 28882 ;;		On exit  : 3F/0
 28883 ;;		Unchanged: 0/0
 28884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 28885 ;;      Params:         0       3       0       0       0       0       0       0       0
 28886 ;;      Locals:         0      27       0       0       0       0       0       0       0
 28887 ;;      Temps:          0       8       0       0       0       0       0       0       0
 28888 ;;      Totals:         0      38       0       0       0       0       0       0       0
 28889 ;;Total ram usage:       38 bytes
 28890 ;; Hardware stack levels used:    1
 28891 ;; Hardware stack levels required when called:    8
 28892 ;; This function calls:
 28893 ;;		_EncKeySchedule
 28894 ;;		_EncodeShiftRow
 28895 ;; This function is called by:
 28896 ;;		_AESEncodeLoRa
 28897 ;; This function uses a non-reentrant model
 28898 ;;
 28899                           
 28900                           	psect	text149
 28901  001954                     __ptext149:
 28902                           	opt stack 0
 28903  001954                     _AESEncode:
 28904                           	opt stack 17
 28905                           
 28906                           ; BSR set to: 0
 28907                           ;AES.c: 238: unsigned char i;
 28908                           ;AES.c: 240: unsigned char key[16];
 28909                           ;AES.c: 242: for (i = 0; i < 16; i++)
 28910                           
 28911                           ; BSR set to: 0
 28912                           ;incstack = 0
 28913  001954  6B8B               	clrf	AESEncode@i& (0+255),b
 28914  001956                     l11886:
 28915                           
 28916                           ; BSR set to: 0
 28917                           ;AES.c: 243: {
 28918                           ;AES.c: 244: key[i] = masterKey[i];
 28919  001956  5168               	movf	AESEncode@masterKey& (0+255),w,b
 28920  001958  258B               	addwf	AESEncode@i& (0+255),w,b
 28921  00195A  6ED9               	movwf	fsr2l,c
 28922  00195C  6ADA               	clrf	fsr2h,c
 28923  00195E  518B               	movf	AESEncode@i& (0+255),w,b
 28924  001960  0F71               	addlw	low AESEncode@key
 28925  001962  6EE9               	movwf	fsr0l,c
 28926  001964  6AEA               	clrf	fsr0h,c
 28927  001966  CFDF FFEF          	movff	indf2,indf0
 28928                           
 28929                           ; BSR set to: 0
 28930  00196A  2B8B               	incf	AESEncode@i& (0+255),f,b
 28931                           
 28932                           ; BSR set to: 0
 28933  00196C  0E0F               	movlw	15
 28934  00196E  658B               	cpfsgt	AESEncode@i& (0+255),b
 28935  001970  D7F2               	goto	l11886
 28936                           
 28937                           ; BSR set to: 0
 28938                           ;AES.c: 245: }
 28939                           ;AES.c: 248: _roundCounter = 10;
 28940  001972  0E0A               	movlw	10
 28941  001974  6E46               	movwf	__roundCounter,c
 28942                           
 28943                           ;AES.c: 250: _rcon = 0x01;
 28944  001976  0E01               	movlw	1
 28945  001978  6E45               	movwf	__rcon,c
 28946                           
 28947                           ; BSR set to: 0
 28948                           ;AES.c: 253: for(i=0;i<16;i++)
 28949  00197A  6B8B               	clrf	AESEncode@i& (0+255),b
 28950  00197C                     l11900:
 28951                           
 28952                           ; BSR set to: 0
 28953                           ;AES.c: 254: {
 28954                           ;AES.c: 255: block[i] ^= key[i];
 28955  00197C  D8C1               	call	PL88	;call to abstracted procedure
 28956  00197E  D8B2               	call	PL70	;call to abstracted procedure
 28957                           
 28958                           ; BSR set to: 0
 28959                           
 28960                           ; BSR set to: 0
 28961  001980  D8FD               	call	PL400	;call to abstracted procedure
 28962  001982  658B               	cpfsgt	AESEncode@i& (0+255),b
 28963  001984  D7FB               	goto	l11900
 28964  001986                     l498:
 28965                           
 28966                           ; BSR set to: 0
 28967                           ;AES.c: 259: {
 28968                           ;AES.c: 261: for(i=0;i<16;i++)
 28969  001986  6B8B               	clrf	AESEncode@i& (0+255),b
 28970  001988                     l11910:
 28971                           
 28972                           ; BSR set to: 0
 28973                           ;AES.c: 262: {
 28974                           ;AES.c: 263: block[i]=STable[block[i]];
 28975  001988  D8AD               	call	PL70	;call to abstracted procedure
 28976  00198A  50DF               	movf	indf2,w,c
 28977  00198C  6F69               	movwf	??_AESEncode& (0+255),b
 28978  00198E  6B6A               	clrf	(??_AESEncode+1)& (0+255),b
 28979  001990  0E6D               	movlw	low _STable
 28980  001992  2569               	addwf	??_AESEncode& (0+255),w,b
 28981  001994  6EF6               	movwf	tblptrl,c
 28982  001996  0E7E               	movlw	high _STable
 28983  001998  216A               	addwfc	(??_AESEncode+1)& (0+255),w,b
 28984  00199A  6EF7               	movwf	tblptrh,c
 28985  00199C                     	if	0	;There are less than 3 active tblptr bytes
 28986  00199C                     	endif
 28987  00199C  D8A3               	call	PL70	;call to abstracted procedure
 28988  00199E  0008               	tblrd		*
 28989  0019A0  CFF5 FFDF          	movff	tablat,indf2
 28990                           
 28991                           ; BSR set to: 0
 28992  0019A4  2B8B               	incf	AESEncode@i& (0+255),f,b
 28993                           
 28994                           ; BSR set to: 0
 28995  0019A6  0E0F               	movlw	15
 28996  0019A8  658B               	cpfsgt	AESEncode@i& (0+255),b
 28997  0019AA  D7EE               	goto	l11910
 28998                           
 28999                           ; BSR set to: 0
 29000                           ;AES.c: 264: }
 29001                           ;AES.c: 267: EncodeShiftRow(block);
 29002  0019AC  C066  F060         	movff	AESEncode@block,EncodeShiftRow@stateTable
 29003  0019B0  C067  F061         	movff	AESEncode@block+1,EncodeShiftRow@stateTable+1
 29004  0019B4  ECF2  F01C         	call	_EncodeShiftRow	;wreg free
 29005                           
 29006                           ; BSR set to: 0
 29007                           ;AES.c: 270: if(_roundCounter != 1)
 29008  0019B8  0446               	decf	__roundCounter,w,c
 29009  0019BA  E101 D084          	bz	l11958
 29010                           
 29011                           ; BSR set to: 0
 29012                           ;AES.c: 271: {
 29013                           ;AES.c: 272: unsigned char aux,aux1,aux2,aux3;
 29014                           ;AES.c: 274: for(i=0;i<16;i+=4)
 29015  0019BE  6B8B               	clrf	AESEncode@i& (0+255),b
 29016  0019C0                     l11926:
 29017                           
 29018                           ; BSR set to: 0
 29019                           ;AES.c: 275: {
 29020                           ;AES.c: 276: aux1= block[i+0] ^ block[i+1];
 29021  0019C0  D898               	call	PL72	;call to abstracted procedure
 29022  0019C2  2969               	incf	??_AESEncode& (0+255),w,b
 29023  0019C4  6ED9               	movwf	fsr2l,c
 29024  0019C6  D8BD               	call	PL156	;call to abstracted procedure
 29025  0019C8  6F6B               	movwf	(??_AESEncode+2)& (0+255),b
 29026  0019CA  D88C               	call	PL70	;call to abstracted procedure
 29027  0019CC  50DF               	movf	indf2,w,c
 29028  0019CE  196B               	xorwf	(??_AESEncode+2)& (0+255),w,b
 29029  0019D0  6F89               	movwf	AESEncode@aux1& (0+255),b
 29030                           
 29031                           ;AES.c: 277: aux3= block[i+2]^block[i+3];
 29032  0019D2  D88F               	call	PL72	;call to abstracted procedure
 29033  0019D4  D8CF               	call	PL290	;call to abstracted procedure
 29034  0019D6  D8B5               	call	PL156	;call to abstracted procedure
 29035  0019D8  D8A4               	call	PL104	;call to abstracted procedure
 29036  0019DA  6F8A               	movwf	AESEncode@aux3& (0+255),b
 29037                           
 29038                           ; BSR set to: 0
 29039                           ;AES.c: 278: aux = aux1 ^ aux3;
 29040  0019DC  1989               	xorwf	AESEncode@aux1& (0+255),w,b
 29041  0019DE  6F87               	movwf	AESEncode@aux& (0+255),b
 29042                           
 29043                           ; BSR set to: 0
 29044                           ;AES.c: 279: aux2= block[i+2]^block[i+1];
 29045  0019E0  D888               	call	PL72	;call to abstracted procedure
 29046  0019E2  2969               	incf	??_AESEncode& (0+255),w,b
 29047  0019E4  6ED9               	movwf	fsr2l,c
 29048  0019E6  D8AD               	call	PL156	;call to abstracted procedure
 29049  0019E8  D89C               	call	PL104	;call to abstracted procedure
 29050  0019EA  6F88               	movwf	AESEncode@aux2& (0+255),b
 29051                           
 29052                           ;AES.c: 281: aux1 = (((aux1)<0x80)?(aux1)<<1:(((aux1)<<1)^0x1b) );
 29053  0019EC  0E7F               	movlw	127
 29054  0019EE  6589               	cpfsgt	AESEncode@aux1& (0+255),b
 29055  0019F0  D008               	goto	l11934
 29056                           
 29057                           ; BSR set to: 0
 29058  0019F2  0E1B               	movlw	27
 29059  0019F4  C089  F069         	movff	AESEncode@aux1,??_AESEncode
 29060  0019F8  D8AF               	call	PL232	;call to abstracted procedure
 29061  0019FA  6F81               	movwf	_AESEncode$1346& (0+255),b
 29062  0019FC  516A               	movf	(??_AESEncode+1)& (0+255),w,b
 29063  0019FE  6F82               	movwf	(_AESEncode$1346+1)& (0+255),b
 29064  001A00  D005               	goto	l11936
 29065  001A02                     l11934:
 29066                           
 29067                           ; BSR set to: 0
 29068  001A02  90D8               	bcf	status,0,c
 29069  001A04  3589               	rlcf	AESEncode@aux1& (0+255),w,b
 29070  001A06  6F81               	movwf	_AESEncode$1346& (0+255),b
 29071  001A08  6B82               	clrf	(_AESEncode$1346+1)& (0+255),b
 29072  001A0A  3782               	rlcf	(_AESEncode$1346+1)& (0+255),f,b
 29073  001A0C                     l11936:
 29074                           
 29075                           ; BSR set to: 0
 29076  001A0C  C081  F089         	movff	_AESEncode$1346,AESEncode@aux1
 29077                           
 29078                           ;AES.c: 282: aux2 = (((aux2)<0x80)?(aux2)<<1:(((aux2)<<1)^0x1b) );
 29079  001A10  0E7F               	movlw	127
 29080  001A12  6588               	cpfsgt	AESEncode@aux2& (0+255),b
 29081  001A14  D008               	goto	l11940
 29082                           
 29083                           ; BSR set to: 0
 29084  001A16  0E1B               	movlw	27
 29085  001A18  C088  F069         	movff	AESEncode@aux2,??_AESEncode
 29086  001A1C  D89D               	call	PL232	;call to abstracted procedure
 29087  001A1E  6F83               	movwf	_AESEncode$1347& (0+255),b
 29088  001A20  516A               	movf	(??_AESEncode+1)& (0+255),w,b
 29089  001A22  6F84               	movwf	(_AESEncode$1347+1)& (0+255),b
 29090  001A24  D005               	goto	l11942
 29091  001A26                     l11940:
 29092                           
 29093                           ; BSR set to: 0
 29094  001A26  90D8               	bcf	status,0,c
 29095  001A28  3588               	rlcf	AESEncode@aux2& (0+255),w,b
 29096  001A2A  6F83               	movwf	_AESEncode$1347& (0+255),b
 29097  001A2C  6B84               	clrf	(_AESEncode$1347+1)& (0+255),b
 29098  001A2E  3784               	rlcf	(_AESEncode$1347+1)& (0+255),f,b
 29099  001A30                     l11942:
 29100                           
 29101                           ; BSR set to: 0
 29102  001A30  C083  F088         	movff	_AESEncode$1347,AESEncode@aux2
 29103                           
 29104                           ;AES.c: 283: aux3 = (((aux3)<0x80)?(aux3)<<1:(((aux3)<<1)^0x1b) );
 29105  001A34  0E7F               	movlw	127
 29106  001A36  658A               	cpfsgt	AESEncode@aux3& (0+255),b
 29107  001A38  D008               	goto	l11946
 29108                           
 29109                           ; BSR set to: 0
 29110  001A3A  0E1B               	movlw	27
 29111  001A3C  C08A  F069         	movff	AESEncode@aux3,??_AESEncode
 29112  001A40  D88B               	call	PL232	;call to abstracted procedure
 29113  001A42  6F85               	movwf	_AESEncode$1348& (0+255),b
 29114  001A44  516A               	movf	(??_AESEncode+1)& (0+255),w,b
 29115  001A46  6F86               	movwf	(_AESEncode$1348+1)& (0+255),b
 29116  001A48  D005               	goto	l11948
 29117  001A4A                     l11946:
 29118                           
 29119                           ; BSR set to: 0
 29120  001A4A  90D8               	bcf	status,0,c
 29121  001A4C  358A               	rlcf	AESEncode@aux3& (0+255),w,b
 29122  001A4E  6F85               	movwf	_AESEncode$1348& (0+255),b
 29123  001A50  6B86               	clrf	(_AESEncode$1348+1)& (0+255),b
 29124  001A52  3786               	rlcf	(_AESEncode$1348+1)& (0+255),f,b
 29125  001A54                     l11948:
 29126                           
 29127                           ; BSR set to: 0
 29128  001A54  C085  F08A         	movff	_AESEncode$1348,AESEncode@aux3
 29129                           
 29130                           ; BSR set to: 0
 29131                           ;AES.c: 285: block[i+0]= aux^aux1^block[i+0];
 29132  001A58  D845               	call	PL70	;call to abstracted procedure
 29133  001A5A  D884               	call	PL272	;call to abstracted procedure
 29134  001A5C  1987               	xorwf	AESEncode@aux& (0+255),w,b
 29135  001A5E  1989               	xorwf	AESEncode@aux1& (0+255),w,b
 29136  001A60  6EDF               	movwf	indf2,c
 29137                           
 29138                           ; BSR set to: 0
 29139                           ;AES.c: 286: block[i+1]= aux^aux2^block[i+1];
 29140  001A62  D847               	call	PL72	;call to abstracted procedure
 29141  001A64  2969               	incf	??_AESEncode& (0+255),w,b
 29142  001A66  6ED9               	movwf	fsr2l,c
 29143  001A68  D852               	call	PL100	;call to abstracted procedure
 29144  001A6A  296B               	incf	(??_AESEncode+2)& (0+255),w,b
 29145  001A6C  D86F               	call	PL230	;call to abstracted procedure
 29146  001A6E  1987               	xorwf	AESEncode@aux& (0+255),w,b
 29147  001A70  1988               	xorwf	AESEncode@aux2& (0+255),w,b
 29148  001A72  6EDF               	movwf	indf2,c
 29149                           
 29150                           ; BSR set to: 0
 29151                           ;AES.c: 287: block[i+2]= aux^aux3^block[i+2];
 29152  001A74  D83E               	call	PL72	;call to abstracted procedure
 29153  001A76  0E02               	movlw	2
 29154  001A78  2569               	addwf	??_AESEncode& (0+255),w,b
 29155  001A7A  6ED9               	movwf	fsr2l,c
 29156  001A7C  D848               	call	PL100	;call to abstracted procedure
 29157  001A7E  0E02               	movlw	2
 29158  001A80  256B               	addwf	(??_AESEncode+2)& (0+255),w,b
 29159  001A82  D864               	call	PL230	;call to abstracted procedure
 29160  001A84  1987               	xorwf	AESEncode@aux& (0+255),w,b
 29161  001A86  198A               	xorwf	AESEncode@aux3& (0+255),w,b
 29162  001A88  6EDF               	movwf	indf2,c
 29163                           
 29164                           ; BSR set to: 0
 29165                           ;AES.c: 288: block[i+3]= block[i+0]^block[i+1]^block[i+2]^aux;
 29166  001A8A  D833               	call	PL72	;call to abstracted procedure
 29167  001A8C  D873               	call	PL290	;call to abstracted procedure
 29168  001A8E  D83F               	call	PL100	;call to abstracted procedure
 29169  001A90  0E02               	movlw	2
 29170  001A92  256B               	addwf	(??_AESEncode+2)& (0+255),w,b
 29171  001A94  D85B               	call	PL230	;call to abstracted procedure
 29172  001A96  6F6D               	movwf	(??_AESEncode+4)& (0+255),b
 29173  001A98  518B               	movf	AESEncode@i& (0+255),w,b
 29174  001A9A  2566               	addwf	AESEncode@block& (0+255),w,b
 29175  001A9C  6F6E               	movwf	(??_AESEncode+5)& (0+255),b
 29176  001A9E  0E00               	movlw	0
 29177  001AA0  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29178  001AA2  6F6F               	movwf	(??_AESEncode+6)& (0+255),b
 29179  001AA4  296E               	incf	(??_AESEncode+5)& (0+255),w,b
 29180  001AA6  6EE9               	movwf	fsr0l,c
 29181  001AA8  0E00               	movlw	0
 29182  001AAA  216F               	addwfc	(??_AESEncode+6)& (0+255),w,b
 29183  001AAC  6EEA               	movwf	fsr0h,c
 29184  001AAE  50EF               	movf	indf0,w,c
 29185  001AB0  6F70               	movwf	(??_AESEncode+7)& (0+255),b
 29186  001AB2  D858               	call	PL272	;call to abstracted procedure
 29187  001AB4  1970               	xorwf	(??_AESEncode+7)& (0+255),w,b
 29188  001AB6  196D               	xorwf	(??_AESEncode+4)& (0+255),w,b
 29189  001AB8  1987               	xorwf	AESEncode@aux& (0+255),w,b
 29190  001ABA  6EDF               	movwf	indf2,c
 29191  001ABC  0E04               	movlw	4
 29192  001ABE  278B               	addwf	AESEncode@i& (0+255),f,b
 29193  001AC0  0E0F               	movlw	15
 29194  001AC2  658B               	cpfsgt	AESEncode@i& (0+255),b
 29195  001AC4  D77D               	goto	l11926
 29196  001AC6                     l11958:
 29197                           
 29198                           ; BSR set to: 0
 29199                           ;AES.c: 289: }
 29200                           ;AES.c: 290: }
 29201                           ;AES.c: 292: EncKeySchedule(key);
 29202  001AC6  0E71               	movlw	low AESEncode@key
 29203  001AC8  6F60               	movwf	EncKeySchedule@key& (0+255),b
 29204  001ACA  EC6E  F016         	call	_EncKeySchedule	;wreg free
 29205                           
 29206                           ; BSR set to: 0
 29207                           ;AES.c: 294: for(i=0;i<16;i++)
 29208  001ACE  6B8B               	clrf	AESEncode@i& (0+255),b
 29209  001AD0                     l11966:
 29210                           
 29211                           ; BSR set to: 0
 29212                           ;AES.c: 295: {
 29213                           ;AES.c: 296: block[i] ^= key[i];
 29214  001AD0  D817               	call	PL88	;call to abstracted procedure
 29215  001AD2  D808               	call	PL70	;call to abstracted procedure
 29216                           
 29217                           ; BSR set to: 0
 29218                           
 29219                           ; BSR set to: 0
 29220  001AD4  D853               	call	PL400	;call to abstracted procedure
 29221  001AD6  658B               	cpfsgt	AESEncode@i& (0+255),b
 29222  001AD8  D7FB               	goto	l11966
 29223                           
 29224                           ; BSR set to: 0
 29225                           ;AES.c: 297: }
 29226                           ;AES.c: 299: _roundCounter--;
 29227  001ADA  0646               	decf	__roundCounter,f,c
 29228                           
 29229                           ; BSR set to: 0
 29230                           ;AES.c: 300: }
 29231                           ;AES.c: 301: while(_roundCounter !=0);
 29232  001ADC  5046               	movf	__roundCounter,w,c
 29233  001ADE  E001 D752          	bnz	l498
 29234                           
 29235                           ; BSR set to: 0
 29236  001AE2  0012               	return		;funcret
 29237  001AE4                     __end_of_AESEncode:
 29238                           	opt stack 0
 29239  001AE4                     PL70:
 29240                           	opt stack 17
 29241  001AE4  518B               	movf	AESEncode@i& (0+255),w,b
 29242  001AE6  2566               	addwf	AESEncode@block& (0+255),w,b
 29243  001AE8  6ED9               	movwf	fsr2l,c
 29244  001AEA  0E00               	movlw	0
 29245  001AEC  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29246  001AEE  6EDA               	movwf	fsr2h,c
 29247  001AF0  0012               	return	
 29248  001AF2                     __end_ofPL70:
 29249                           	opt stack 0
 29250  001AF2                     PL72:
 29251                           	opt stack 17
 29252  001AF2  518B               	movf	AESEncode@i& (0+255),w,b
 29253  001AF4  2566               	addwf	AESEncode@block& (0+255),w,b
 29254  001AF6  6F69               	movwf	??_AESEncode& (0+255),b
 29255  001AF8  0E00               	movlw	0
 29256  001AFA  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29257  001AFC  6F6A               	movwf	(??_AESEncode+1)& (0+255),b
 29258  001AFE  0012               	return	
 29259  001B00                     __end_ofPL72:
 29260                           	opt stack 0
 29261  001B00                     PL88:
 29262                           	opt stack 17
 29263  001B00  518B               	movf	AESEncode@i& (0+255),w,b
 29264  001B02  0F71               	addlw	low AESEncode@key
 29265  001B04  6ED9               	movwf	fsr2l,c
 29266  001B06  6ADA               	clrf	fsr2h,c
 29267  001B08  50DF               	movf	indf2,w,c
 29268  001B0A  6F69               	movwf	??_AESEncode& (0+255),b
 29269  001B0C  0012               	return	
 29270  001B0E                     __end_ofPL88:
 29271                           	opt stack 0
 29272  001B0E                     PL100:
 29273                           	opt stack 17
 29274  001B0E  0E00               	movlw	0
 29275  001B10  216A               	addwfc	(??_AESEncode+1)& (0+255),w,b
 29276  001B12  6EDA               	movwf	fsr2h,c
 29277  001B14  518B               	movf	AESEncode@i& (0+255),w,b
 29278  001B16  2566               	addwf	AESEncode@block& (0+255),w,b
 29279  001B18  6F6B               	movwf	(??_AESEncode+2)& (0+255),b
 29280  001B1A  0E00               	movlw	0
 29281  001B1C  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29282  001B1E  6F6C               	movwf	(??_AESEncode+3)& (0+255),b
 29283  001B20  0012               	return	
 29284  001B22                     __end_ofPL100:
 29285                           	opt stack 0
 29286  001B22                     PL104:
 29287                           	opt stack 17
 29288  001B22  6F6B               	movwf	(??_AESEncode+2)& (0+255),b
 29289  001B24  518B               	movf	AESEncode@i& (0+255),w,b
 29290  001B26  2566               	addwf	AESEncode@block& (0+255),w,b
 29291  001B28  6F6C               	movwf	(??_AESEncode+3)& (0+255),b
 29292  001B2A  0E00               	movlw	0
 29293  001B2C  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29294  001B2E  6F6D               	movwf	(??_AESEncode+4)& (0+255),b
 29295  001B30  0E02               	movlw	2
 29296  001B32  256C               	addwf	(??_AESEncode+3)& (0+255),w,b
 29297  001B34  6ED9               	movwf	fsr2l,c
 29298  001B36  0E00               	movlw	0
 29299  001B38  216D               	addwfc	(??_AESEncode+4)& (0+255),w,b
 29300  001B3A  6EDA               	movwf	fsr2h,c
 29301  001B3C  50DF               	movf	indf2,w,c
 29302  001B3E  196B               	xorwf	(??_AESEncode+2)& (0+255),w,b
 29303  001B40  0012               	return	
 29304  001B42                     __end_ofPL104:
 29305                           	opt stack 0
 29306  001B42                     PL156:
 29307                           	opt stack 17
 29308  001B42  0E00               	movlw	0
 29309  001B44  216A               	addwfc	(??_AESEncode+1)& (0+255),w,b
 29310  001B46  6EDA               	movwf	fsr2h,c
 29311  001B48  50DF               	movf	indf2,w,c
 29312  001B4A  0012               	return	
 29313  001B4C                     __end_ofPL156:
 29314                           	opt stack 0
 29315  001B4C                     PL230:
 29316                           	opt stack 17
 29317  001B4C  6EE9               	movwf	fsr0l,c
 29318  001B4E  0E00               	movlw	0
 29319  001B50  216C               	addwfc	(??_AESEncode+3)& (0+255),w,b
 29320  001B52  6EEA               	movwf	fsr0h,c
 29321  001B54  50EF               	movf	indf0,w,c
 29322  001B56  0012               	return	
 29323  001B58                     __end_ofPL230:
 29324                           	opt stack 0
 29325  001B58                     PL232:
 29326                           	opt stack 17
 29327  001B58  6B6A               	clrf	(??_AESEncode+1)& (0+255),b
 29328  001B5A  90D8               	bcf	status,0,c
 29329  001B5C  3769               	rlcf	??_AESEncode& (0+255),f,b
 29330  001B5E  376A               	rlcf	(??_AESEncode+1)& (0+255),f,b
 29331  001B60  1969               	xorwf	??_AESEncode& (0+255),w,b
 29332  001B62  0012               	return	
 29333  001B64                     __end_ofPL232:
 29334                           	opt stack 0
 29335  001B64                     PL272:
 29336                           	opt stack 17
 29337  001B64  518B               	movf	AESEncode@i& (0+255),w,b
 29338  001B66  2566               	addwf	AESEncode@block& (0+255),w,b
 29339  001B68  6EE9               	movwf	fsr0l,c
 29340  001B6A  0E00               	movlw	0
 29341  001B6C  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29342  001B6E  6EEA               	movwf	fsr0h,c
 29343  001B70  50EF               	movf	indf0,w,c
 29344  001B72  0012               	return	
 29345  001B74                     __end_ofPL272:
 29346                           	opt stack 0
 29347  001B74                     PL290:
 29348                           	opt stack 17
 29349  001B74  0E03               	movlw	3
 29350  001B76  2569               	addwf	??_AESEncode& (0+255),w,b
 29351  001B78  6ED9               	movwf	fsr2l,c
 29352  001B7A  0012               	return	
 29353  001B7C                     __end_ofPL290:
 29354                           	opt stack 0
 29355  001B7C                     PL400:
 29356                           	opt stack 17
 29357  001B7C  5169               	movf	??_AESEncode& (0+255),w,b
 29358  001B7E  1ADF               	xorwf	indf2,f,c
 29359  001B80  2B8B               	incf	AESEncode@i& (0+255),f,b
 29360  001B82  0C0F               	retlw	15
 29361  001B84                     __end_ofPL400:
 29362                           	opt stack 0
 29363                           tosu	equ	0xFFF
 29364                           tosh	equ	0xFFE
 29365                           tosl	equ	0xFFD
 29366                           pclath	equ	0xFFA
 29367                           tblptru	equ	0xFF8
 29368                           tblptrh	equ	0xFF7
 29369                           tblptrl	equ	0xFF6
 29370                           tablat	equ	0xFF5
 29371                           prodh	equ	0xFF4
 29372                           prodl	equ	0xFF3
 29373                           intcon	equ	0xFF2
 29374                           indf0	equ	0xFEF
 29375                           postinc0	equ	0xFEE
 29376                           plusw0	equ	0xFEB
 29377                           fsr0h	equ	0xFEA
 29378                           fsr0l	equ	0xFE9
 29379                           wreg	equ	0xFE8
 29380                           postinc1	equ	0xFE6
 29381                           postdec1	equ	0xFE5
 29382                           plusw1	equ	0xFE3
 29383                           fsr1h	equ	0xFE2
 29384                           fsr1l	equ	0xFE1
 29385                           indf2	equ	0xFDF
 29386                           postinc2	equ	0xFDE
 29387                           postdec2	equ	0xFDD
 29388                           plusw2	equ	0xFDB
 29389                           fsr2h	equ	0xFDA
 29390                           fsr2l	equ	0xFD9
 29391                           status	equ	0xFD8
 29392                           
 29393 ;; *************** function _EncodeShiftRow *****************
 29394 ;; Defined at:
 29395 ;;		line 205 in file "mcc_generated_files/LoRaWAN/AES.c"
 29396 ;; Parameters:    Size  Location     Type
 29397 ;;  stateTable      2    0[BANK0 ] PTR unsigned char 
 29398 ;;		 -> GenerateSubkey@l(16), AESCmac@y(16), AESCmac@x(16), aesBuffer(16), 
 29399 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), loRa.activationParameters(105), loRa(245), 
 29400 ;; Auto vars:     Size  Location     Type
 29401 ;;  temp            1    2[BANK0 ] unsigned char 
 29402 ;; Return value:  Size  Location     Type
 29403 ;;                  1    wreg      void 
 29404 ;; Registers used:
 29405 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
 29406 ;; Tracked objects:
 29407 ;;		On entry : 3F/0
 29408 ;;		On exit  : 3F/0
 29409 ;;		Unchanged: 0/0
 29410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 29411 ;;      Params:         0       2       0       0       0       0       0       0       0
 29412 ;;      Locals:         0       1       0       0       0       0       0       0       0
 29413 ;;      Temps:          0       0       0       0       0       0       0       0       0
 29414 ;;      Totals:         0       3       0       0       0       0       0       0       0
 29415 ;;Total ram usage:        3 bytes
 29416 ;; Hardware stack levels used:    1
 29417 ;; Hardware stack levels required when called:    7
 29418 ;; This function calls:
 29419 ;;		Nothing
 29420 ;; This function is called by:
 29421 ;;		_AESEncode
 29422 ;; This function uses a non-reentrant model
 29423 ;;
 29424                           
 29425                           	psect	text150
 29426  0039E4                     __ptext150:
 29427                           	opt stack 0
 29428  0039E4                     _EncodeShiftRow:
 29429                           	opt stack 17
 29430                           
 29431                           ; BSR set to: 0
 29432                           ;AES.c: 207: unsigned char temp;
 29433                           ;AES.c: 212: temp=stateTable[1];
 29434                           
 29435                           ; BSR set to: 0
 29436                           ;incstack = 0
 29437  0039E4  EE20 F001          	lfsr	2,1
 29438  0039E8  D85D               	call	PL62	;call to abstracted procedure
 29439  0039EA  50DF               	movf	indf2,w,c
 29440  0039EC  6F62               	movwf	EncodeShiftRow@temp& (0+255),b
 29441                           
 29442                           ; BSR set to: 0
 29443                           ;AES.c: 213: stateTable[1]=stateTable[5];
 29444  0039EE  EE20 F005          	lfsr	2,5
 29445  0039F2  D858               	call	PL62	;call to abstracted procedure
 29446  0039F4  EE00 F001          	lfsr	0,1
 29447  0039F8  D84E               	call	PL52	;call to abstracted procedure
 29448                           
 29449                           ; BSR set to: 0
 29450                           ;AES.c: 214: stateTable[5]=stateTable[9];
 29451  0039FA  EE20 F009          	lfsr	2,9
 29452  0039FE  D852               	call	PL62	;call to abstracted procedure
 29453  003A00  EE00 F005          	lfsr	0,5
 29454  003A04  D848               	call	PL52	;call to abstracted procedure
 29455                           
 29456                           ; BSR set to: 0
 29457                           ;AES.c: 215: stateTable[9]=stateTable[13];
 29458  003A06  EE20 F00D          	lfsr	2,13
 29459  003A0A  D84C               	call	PL62	;call to abstracted procedure
 29460  003A0C  EE00 F009          	lfsr	0,9
 29461  003A10  D842               	call	PL52	;call to abstracted procedure
 29462                           
 29463                           ; BSR set to: 0
 29464                           ;AES.c: 216: stateTable[13]=temp;
 29465  003A12  EE20 F00D          	lfsr	2,13
 29466  003A16  D846               	call	PL62	;call to abstracted procedure
 29467  003A18  C062  FFDF         	movff	EncodeShiftRow@temp,indf2
 29468                           
 29469                           ; BSR set to: 0
 29470                           ;AES.c: 219: temp=stateTable[2];
 29471  003A1C  EE20 F002          	lfsr	2,2
 29472  003A20  D841               	call	PL62	;call to abstracted procedure
 29473  003A22  50DF               	movf	indf2,w,c
 29474  003A24  6F62               	movwf	EncodeShiftRow@temp& (0+255),b
 29475                           
 29476                           ; BSR set to: 0
 29477                           ;AES.c: 220: stateTable[2]=stateTable[10];
 29478  003A26  EE20 F00A          	lfsr	2,10
 29479  003A2A  D83C               	call	PL62	;call to abstracted procedure
 29480  003A2C  EE00 F002          	lfsr	0,2
 29481  003A30  D832               	call	PL52	;call to abstracted procedure
 29482                           
 29483                           ;AES.c: 221: stateTable[10]=temp;
 29484  003A32  EE20 F00A          	lfsr	2,10
 29485  003A36  D836               	call	PL62	;call to abstracted procedure
 29486  003A38  C062  FFDF         	movff	EncodeShiftRow@temp,indf2
 29487                           
 29488                           ;AES.c: 222: temp=stateTable[14];
 29489  003A3C  EE20 F00E          	lfsr	2,14
 29490  003A40  D831               	call	PL62	;call to abstracted procedure
 29491  003A42  50DF               	movf	indf2,w,c
 29492  003A44  6F62               	movwf	EncodeShiftRow@temp& (0+255),b
 29493                           
 29494                           ; BSR set to: 0
 29495                           ;AES.c: 223: stateTable[14]=stateTable[6];
 29496  003A46  EE20 F006          	lfsr	2,6
 29497  003A4A  D82C               	call	PL62	;call to abstracted procedure
 29498  003A4C  EE00 F00E          	lfsr	0,14
 29499  003A50  D822               	call	PL52	;call to abstracted procedure
 29500                           
 29501                           ; BSR set to: 0
 29502                           ;AES.c: 224: stateTable[6]=temp;
 29503  003A52  EE20 F006          	lfsr	2,6
 29504  003A56  D826               	call	PL62	;call to abstracted procedure
 29505  003A58  C062  FFDF         	movff	EncodeShiftRow@temp,indf2
 29506                           
 29507                           ; BSR set to: 0
 29508                           ;AES.c: 227: temp=stateTable[3];
 29509  003A5C  EE20 F003          	lfsr	2,3
 29510  003A60  D821               	call	PL62	;call to abstracted procedure
 29511  003A62  50DF               	movf	indf2,w,c
 29512  003A64  6F62               	movwf	EncodeShiftRow@temp& (0+255),b
 29513                           
 29514                           ; BSR set to: 0
 29515                           ;AES.c: 228: stateTable[3]=stateTable[15];
 29516  003A66  EE20 F00F          	lfsr	2,15
 29517  003A6A  D81C               	call	PL62	;call to abstracted procedure
 29518  003A6C  EE00 F003          	lfsr	0,3
 29519  003A70  D812               	call	PL52	;call to abstracted procedure
 29520                           
 29521                           ; BSR set to: 0
 29522                           ;AES.c: 229: stateTable[15]=stateTable[11];
 29523  003A72  EE20 F00B          	lfsr	2,11
 29524  003A76  D816               	call	PL62	;call to abstracted procedure
 29525  003A78  EE00 F00F          	lfsr	0,15
 29526  003A7C  D80C               	call	PL52	;call to abstracted procedure
 29527                           
 29528                           ; BSR set to: 0
 29529                           ;AES.c: 230: stateTable[11]=stateTable[7];
 29530  003A7E  EE20 F007          	lfsr	2,7
 29531  003A82  D810               	call	PL62	;call to abstracted procedure
 29532  003A84  EE00 F00B          	lfsr	0,11
 29533  003A88  D806               	call	PL52	;call to abstracted procedure
 29534                           
 29535                           ;AES.c: 231: stateTable[7]=temp;
 29536  003A8A  EE20 F007          	lfsr	2,7
 29537  003A8E  D80A               	call	PL62	;call to abstracted procedure
 29538  003A90  C062  FFDF         	movff	EncodeShiftRow@temp,indf2
 29539                           
 29540                           ; BSR set to: 0
 29541  003A94  0012               	return		;funcret
 29542  003A96                     __end_of_EncodeShiftRow:
 29543                           	opt stack 0
 29544  003A96                     PL52:
 29545                           	opt stack 17
 29546  003A96  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29547  003A98  26E9               	addwf	fsr0l,f,c
 29548  003A9A  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29549  003A9C  22EA               	addwfc	fsr0h,f,c
 29550  003A9E  CFDF FFEF          	movff	indf2,indf0
 29551  003AA2  0012               	return	
 29552  003AA4                     __end_ofPL52:
 29553                           	opt stack 0
 29554  003AA4                     PL62:
 29555                           	opt stack 17
 29556  003AA4  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29557  003AA6  26D9               	addwf	fsr2l,f,c
 29558  003AA8  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29559  003AAA  22DA               	addwfc	fsr2h,f,c
 29560  003AAC  0012               	return	
 29561  003AAE                     __end_ofPL62:
 29562                           	opt stack 0
 29563                           tosu	equ	0xFFF
 29564                           tosh	equ	0xFFE
 29565                           tosl	equ	0xFFD
 29566                           pclath	equ	0xFFA
 29567                           tblptru	equ	0xFF8
 29568                           tblptrh	equ	0xFF7
 29569                           tblptrl	equ	0xFF6
 29570                           tablat	equ	0xFF5
 29571                           prodh	equ	0xFF4
 29572                           prodl	equ	0xFF3
 29573                           intcon	equ	0xFF2
 29574                           indf0	equ	0xFEF
 29575                           postinc0	equ	0xFEE
 29576                           plusw0	equ	0xFEB
 29577                           fsr0h	equ	0xFEA
 29578                           fsr0l	equ	0xFE9
 29579                           wreg	equ	0xFE8
 29580                           postinc1	equ	0xFE6
 29581                           postdec1	equ	0xFE5
 29582                           plusw1	equ	0xFE3
 29583                           fsr1h	equ	0xFE2
 29584                           fsr1l	equ	0xFE1
 29585                           indf2	equ	0xFDF
 29586                           postinc2	equ	0xFDE
 29587                           postdec2	equ	0xFDD
 29588                           plusw2	equ	0xFDB
 29589                           fsr2h	equ	0xFDA
 29590                           fsr2l	equ	0xFD9
 29591                           status	equ	0xFD8
 29592                           
 29593 ;; *************** function _EncKeySchedule *****************
 29594 ;; Defined at:
 29595 ;;		line 160 in file "mcc_generated_files/LoRaWAN/AES.c"
 29596 ;; Parameters:    Size  Location     Type
 29597 ;;  key             1    0[BANK0 ] PTR unsigned char 
 29598 ;;		 -> AESEncode@key(16), 
 29599 ;; Auto vars:     Size  Location     Type
 29600 ;;		None
 29601 ;; Return value:  Size  Location     Type
 29602 ;;                  1    wreg      void 
 29603 ;; Registers used:
 29604 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 29605 ;; Tracked objects:
 29606 ;;		On entry : 3F/0
 29607 ;;		On exit  : 3F/0
 29608 ;;		Unchanged: 0/0
 29609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 29610 ;;      Params:         0       1       0       0       0       0       0       0       0
 29611 ;;      Locals:         0       2       0       0       0       0       0       0       0
 29612 ;;      Temps:          0       3       0       0       0       0       0       0       0
 29613 ;;      Totals:         0       6       0       0       0       0       0       0       0
 29614 ;;Total ram usage:        6 bytes
 29615 ;; Hardware stack levels used:    1
 29616 ;; Hardware stack levels required when called:    7
 29617 ;; This function calls:
 29618 ;;		Nothing
 29619 ;; This function is called by:
 29620 ;;		_AESEncode
 29621 ;; This function uses a non-reentrant model
 29622 ;;
 29623                           
 29624                           	psect	text151
 29625  002CDC                     __ptext151:
 29626                           	opt stack 0
 29627  002CDC                     _EncKeySchedule:
 29628                           	opt stack 17
 29629                           
 29630                           ; BSR set to: 0
 29631                           ;AES.c: 163: key[0]^=STable[key[13]];
 29632                           
 29633                           ; BSR set to: 0
 29634                           ;incstack = 0
 29635  002CDC  5160               	movf	EncKeySchedule@key& (0+255),w,b
 29636  002CDE  6ED9               	movwf	fsr2l,c
 29637  002CE0  6ADA               	clrf	fsr2h,c
 29638  002CE2  0E0D               	movlw	13
 29639  002CE4  D860               	call	PL22	;call to abstracted procedure
 29640  002CE6  5163               	movf	(??_EncKeySchedule+2)& (0+255),w,b
 29641                           
 29642                           ;AES.c: 164: key[1]^=STable[key[14]];
 29643  002CE8  D883               	call	PL64	;call to abstracted procedure
 29644  002CEA  0E0E               	movlw	14
 29645  002CEC  D85C               	call	PL22	;call to abstracted procedure
 29646  002CEE  2AD9               	incf	fsr2l,f,c
 29647  002CF0  5163               	movf	(??_EncKeySchedule+2)& (0+255),w,b
 29648                           
 29649                           ;AES.c: 165: key[2]^=STable[key[15]];
 29650  002CF2  D87E               	call	PL64	;call to abstracted procedure
 29651  002CF4  0E0F               	movlw	15
 29652  002CF6  D857               	call	PL22	;call to abstracted procedure
 29653  002CF8  0E02               	movlw	2
 29654  002CFA  26D9               	addwf	fsr2l,f,c
 29655  002CFC  5163               	movf	(??_EncKeySchedule+2)& (0+255),w,b
 29656                           
 29657                           ;AES.c: 166: key[3]^=STable[key[12]];
 29658  002CFE  D878               	call	PL64	;call to abstracted procedure
 29659  002D00  0E0C               	movlw	12
 29660  002D02  D851               	call	PL22	;call to abstracted procedure
 29661  002D04  0E03               	movlw	3
 29662  002D06  26D9               	addwf	fsr2l,f,c
 29663  002D08  5163               	movf	(??_EncKeySchedule+2)& (0+255),w,b
 29664                           
 29665                           ; BSR set to: 0
 29666                           ;AES.c: 168: key[0]^=_rcon;
 29667  002D0A  D872               	call	PL64	;call to abstracted procedure
 29668  002D0C  5045               	movf	__rcon,w,c
 29669  002D0E  1ADF               	xorwf	indf2,f,c
 29670                           
 29671                           ; BSR set to: 0
 29672                           ;AES.c: 169: _rcon = (((_rcon)<0x80)?(_rcon)<<1:(((_rcon)<<1)^0x1b) );
 29673  002D10  0E7F               	movlw	127
 29674  002D12  6445               	cpfsgt	__rcon,c
 29675  002D14  D00C               	goto	l11822
 29676                           
 29677                           ; BSR set to: 0
 29678  002D16  0E1B               	movlw	27
 29679  002D18  C045  F061         	movff	__rcon,??_EncKeySchedule
 29680  002D1C  6B62               	clrf	(??_EncKeySchedule+1)& (0+255),b
 29681  002D1E  90D8               	bcf	status,0,c
 29682  002D20  3761               	rlcf	??_EncKeySchedule& (0+255),f,b
 29683  002D22  3762               	rlcf	(??_EncKeySchedule+1)& (0+255),f,b
 29684  002D24  1961               	xorwf	??_EncKeySchedule& (0+255),w,b
 29685  002D26  6F64               	movwf	_EncKeySchedule$1332& (0+255),b
 29686  002D28  5162               	movf	(??_EncKeySchedule+1)& (0+255),w,b
 29687  002D2A  6F65               	movwf	(_EncKeySchedule$1332+1)& (0+255),b
 29688  002D2C  D005               	goto	l11824
 29689  002D2E                     l11822:
 29690                           
 29691                           ; BSR set to: 0
 29692  002D2E  90D8               	bcf	status,0,c
 29693  002D30  3445               	rlcf	__rcon,w,c
 29694  002D32  6F64               	movwf	_EncKeySchedule$1332& (0+255),b
 29695  002D34  6B65               	clrf	(_EncKeySchedule$1332+1)& (0+255),b
 29696  002D36  3765               	rlcf	(_EncKeySchedule$1332+1)& (0+255),f,b
 29697  002D38                     l11824:
 29698                           
 29699                           ; BSR set to: 0
 29700  002D38  C064  F045         	movff	_EncKeySchedule$1332,__rcon
 29701                           
 29702                           ; BSR set to: 0
 29703                           ;AES.c: 172: key[4]^=key[0];
 29704  002D3C  5160               	movf	EncKeySchedule@key& (0+255),w,b
 29705  002D3E  6ED9               	movwf	fsr2l,c
 29706  002D40  6ADA               	clrf	fsr2h,c
 29707  002D42  D850               	call	PL44	;call to abstracted procedure
 29708  002D44  0E04               	movlw	4
 29709                           
 29710                           ; BSR set to: 0
 29711                           ;AES.c: 173: key[5]^=key[1];
 29712  002D46  D840               	call	PL28	;call to abstracted procedure
 29713  002D48  2AD9               	incf	fsr2l,f,c
 29714  002D4A  D84C               	call	PL44	;call to abstracted procedure
 29715  002D4C  0E05               	movlw	5
 29716                           
 29717                           ; BSR set to: 0
 29718                           ;AES.c: 174: key[6]^=key[2];
 29719  002D4E  D83C               	call	PL28	;call to abstracted procedure
 29720  002D50  0E02               	movlw	2
 29721  002D52  D841               	call	PL38	;call to abstracted procedure
 29722  002D54  0E06               	movlw	6
 29723                           
 29724                           ; BSR set to: 0
 29725                           ;AES.c: 175: key[7]^=key[3];
 29726  002D56  D838               	call	PL28	;call to abstracted procedure
 29727  002D58  0E03               	movlw	3
 29728  002D5A  D83D               	call	PL38	;call to abstracted procedure
 29729  002D5C  0E07               	movlw	7
 29730                           
 29731                           ; BSR set to: 0
 29732                           ;AES.c: 178: key[8]^=key[4];
 29733  002D5E  D834               	call	PL28	;call to abstracted procedure
 29734  002D60  0E04               	movlw	4
 29735  002D62  D839               	call	PL38	;call to abstracted procedure
 29736  002D64  0E08               	movlw	8
 29737                           
 29738                           ; BSR set to: 0
 29739                           ;AES.c: 179: key[9]^=key[5];
 29740  002D66  D830               	call	PL28	;call to abstracted procedure
 29741  002D68  0E05               	movlw	5
 29742  002D6A  D835               	call	PL38	;call to abstracted procedure
 29743  002D6C  0E09               	movlw	9
 29744                           
 29745                           ; BSR set to: 0
 29746                           ;AES.c: 180: key[10]^=key[6];
 29747  002D6E  D82C               	call	PL28	;call to abstracted procedure
 29748  002D70  0E06               	movlw	6
 29749  002D72  D831               	call	PL38	;call to abstracted procedure
 29750  002D74  0E0A               	movlw	10
 29751                           
 29752                           ; BSR set to: 0
 29753                           ;AES.c: 181: key[11]^=key[7];
 29754  002D76  D828               	call	PL28	;call to abstracted procedure
 29755  002D78  0E07               	movlw	7
 29756  002D7A  D82D               	call	PL38	;call to abstracted procedure
 29757  002D7C  0E0B               	movlw	11
 29758                           
 29759                           ; BSR set to: 0
 29760                           ;AES.c: 184: key[12]^=key[8];
 29761  002D7E  D824               	call	PL28	;call to abstracted procedure
 29762  002D80  0E08               	movlw	8
 29763  002D82  D829               	call	PL38	;call to abstracted procedure
 29764  002D84  0E0C               	movlw	12
 29765                           
 29766                           ; BSR set to: 0
 29767                           ;AES.c: 185: key[13]^=key[9];
 29768  002D86  D820               	call	PL28	;call to abstracted procedure
 29769  002D88  0E09               	movlw	9
 29770  002D8A  D825               	call	PL38	;call to abstracted procedure
 29771  002D8C  0E0D               	movlw	13
 29772                           
 29773                           ; BSR set to: 0
 29774                           ;AES.c: 186: key[14]^=key[10];
 29775  002D8E  D81C               	call	PL28	;call to abstracted procedure
 29776  002D90  0E0A               	movlw	10
 29777  002D92  D821               	call	PL38	;call to abstracted procedure
 29778  002D94  0E0E               	movlw	14
 29779                           
 29780                           ; BSR set to: 0
 29781                           ;AES.c: 187: key[15]^=key[11];
 29782  002D96  D818               	call	PL28	;call to abstracted procedure
 29783  002D98  0E0B               	movlw	11
 29784  002D9A  D81D               	call	PL38	;call to abstracted procedure
 29785  002D9C  0E0F               	movlw	15
 29786  002D9E  26D9               	addwf	fsr2l,f,c
 29787  002DA0  5161               	movf	??_EncKeySchedule& (0+255),w,b
 29788  002DA2  1ADF               	xorwf	indf2,f,c
 29789                           
 29790                           ; BSR set to: 0
 29791  002DA4  0012               	return		;funcret
 29792  002DA6                     __end_of_EncKeySchedule:
 29793                           	opt stack 0
 29794  002DA6                     PL22:
 29795                           	opt stack 17
 29796  002DA6  26D9               	addwf	fsr2l,f,c
 29797  002DA8  50DF               	movf	indf2,w,c
 29798  002DAA  6F61               	movwf	??_EncKeySchedule& (0+255),b
 29799  002DAC  6B62               	clrf	(??_EncKeySchedule+1)& (0+255),b
 29800  002DAE  0E6D               	movlw	low _STable
 29801  002DB0  2561               	addwf	??_EncKeySchedule& (0+255),w,b
 29802  002DB2  6EF6               	movwf	tblptrl,c
 29803  002DB4  0E7E               	movlw	high _STable
 29804  002DB6  2162               	addwfc	(??_EncKeySchedule+1)& (0+255),w,b
 29805  002DB8  6EF7               	movwf	tblptrh,c
 29806  002DBA                     	if	0	;There are less than 3 active tblptr bytes
 29807  002DBA                     	endif
 29808  002DBA  0008               	tblrd		*
 29809  002DBC  CFF5 F063          	movff	tablat,??_EncKeySchedule+2
 29810  002DC0  5160               	movf	EncKeySchedule@key& (0+255),w,b
 29811  002DC2  6ED9               	movwf	fsr2l,c
 29812  002DC4  6ADA               	clrf	fsr2h,c
 29813  002DC6  0012               	return	
 29814  002DC8                     __end_ofPL22:
 29815                           	opt stack 0
 29816  002DC8                     PL28:
 29817                           	opt stack 17
 29818  002DC8  26D9               	addwf	fsr2l,f,c
 29819  002DCA  5161               	movf	??_EncKeySchedule& (0+255),w,b
 29820  002DCC  1ADF               	xorwf	indf2,f,c
 29821  002DCE  5160               	movf	EncKeySchedule@key& (0+255),w,b
 29822  002DD0  6ED9               	movwf	fsr2l,c
 29823  002DD2  6ADA               	clrf	fsr2h,c
 29824  002DD4  0012               	return	
 29825  002DD6                     __end_ofPL28:
 29826                           	opt stack 0
 29827  002DD6                     PL38:
 29828                           	opt stack 17
 29829  002DD6  26D9               	addwf	fsr2l,f,c
 29830  002DD8  50DF               	movf	indf2,w,c
 29831  002DDA  6F61               	movwf	??_EncKeySchedule& (0+255),b
 29832  002DDC  5160               	movf	EncKeySchedule@key& (0+255),w,b
 29833  002DDE  6ED9               	movwf	fsr2l,c
 29834  002DE0  6ADA               	clrf	fsr2h,c
 29835  002DE2  0012               	return	
 29836  002DE4                     __end_ofPL38:
 29837                           	opt stack 0
 29838  002DE4                     PL44:
 29839                           	opt stack 17
 29840  002DE4  50DF               	movf	indf2,w,c
 29841  002DE6  6F61               	movwf	??_EncKeySchedule& (0+255),b
 29842  002DE8  5160               	movf	EncKeySchedule@key& (0+255),w,b
 29843  002DEA  6ED9               	movwf	fsr2l,c
 29844  002DEC  6ADA               	clrf	fsr2h,c
 29845  002DEE  0012               	return	
 29846  002DF0                     __end_ofPL44:
 29847                           	opt stack 0
 29848  002DF0                     PL64:
 29849                           	opt stack 17
 29850  002DF0  1ADF               	xorwf	indf2,f,c
 29851  002DF2  5160               	movf	EncKeySchedule@key& (0+255),w,b
 29852  002DF4  6ED9               	movwf	fsr2l,c
 29853  002DF6  6ADA               	clrf	fsr2h,c
 29854  002DF8  0012               	return	
 29855  002DFA                     __end_ofPL64:
 29856                           	opt stack 0
 29857                           tosu	equ	0xFFF
 29858                           tosh	equ	0xFFE
 29859                           tosl	equ	0xFFD
 29860                           pclath	equ	0xFFA
 29861                           tblptru	equ	0xFF8
 29862                           tblptrh	equ	0xFF7
 29863                           tblptrl	equ	0xFF6
 29864                           tablat	equ	0xFF5
 29865                           prodh	equ	0xFF4
 29866                           prodl	equ	0xFF3
 29867                           intcon	equ	0xFF2
 29868                           indf0	equ	0xFEF
 29869                           postinc0	equ	0xFEE
 29870                           plusw0	equ	0xFEB
 29871                           fsr0h	equ	0xFEA
 29872                           fsr0l	equ	0xFE9
 29873                           wreg	equ	0xFE8
 29874                           postinc1	equ	0xFE6
 29875                           postdec1	equ	0xFE5
 29876                           plusw1	equ	0xFE3
 29877                           fsr1h	equ	0xFE2
 29878                           fsr1l	equ	0xFE1
 29879                           indf2	equ	0xFDF
 29880                           postinc2	equ	0xFDE
 29881                           postdec2	equ	0xFDD
 29882                           plusw2	equ	0xFDB
 29883                           fsr2h	equ	0xFDA
 29884                           fsr2l	equ	0xFD9
 29885                           status	equ	0xFD8
 29886                           
 29887 ;; *************** function _LORAWAN_Init *****************
 29888 ;; Defined at:
 29889 ;;		line 123 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 29890 ;; Parameters:    Size  Location     Type
 29891 ;;  RxPayload       2   72[BANK0 ] PTR FTN(PTR unsigned cha
 29892 ;;		 -> RxDataDone(1), 
 29893 ;;  RxJoinRespon    2   74[BANK0 ] PTR FTN(unsigned char ,)
 29894 ;;		 -> RxJoinResponse(1), 
 29895 ;; Auto vars:     Size  Location     Type
 29896 ;;		None
 29897 ;; Return value:  Size  Location     Type
 29898 ;;                  1    wreg      void 
 29899 ;; Registers used:
 29900 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29901 ;; Tracked objects:
 29902 ;;		On entry : 3F/0
 29903 ;;		On exit  : 3D/0
 29904 ;;		Unchanged: 0/0
 29905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 29906 ;;      Params:         0       4       0       0       0       0       0       0       0
 29907 ;;      Locals:         0       0       0       0       0       0       0       0       0
 29908 ;;      Temps:          0       0       0       0       0       0       0       0       0
 29909 ;;      Totals:         0       4       0       0       0       0       0       0       0
 29910 ;;Total ram usage:        4 bytes
 29911 ;; Hardware stack levels used:    1
 29912 ;; Hardware stack levels required when called:   13
 29913 ;; This function calls:
 29914 ;;		_CreateAllSoftwareTimers
 29915 ;;		_LORAWAN_Reset
 29916 ;;		_RADIO_Init
 29917 ;;		_RADIO_ReadRandom
 29918 ;;		_SetCallbackSoftwareTimers
 29919 ;;		_StopAllSoftwareTimers
 29920 ;;		_srand
 29921 ;; This function is called by:
 29922 ;;		_main
 29923 ;; This function uses a non-reentrant model
 29924 ;;
 29925                           
 29926                           	psect	text152
 29927  0053FE                     __ptext152:
 29928                           	opt stack 0
 29929  0053FE                     _LORAWAN_Init:
 29930                           	opt stack 17
 29931                           
 29932                           ; BSR set to: 0
 29933                           ;lorawan_eu.c: 126: if (loRa.macInitialized == 0)
 29934                           
 29935                           ; BSR set to: 0
 29936                           ;incstack = 0
 29937  0053FE  0102               	movlb	2	; () banked
 29938  005400  51F0               	movf	(_loRa+240)& (0+255),w,b
 29939  005402  E108               	bnz	l15538
 29940                           
 29941                           ; BSR set to: 2
 29942                           ;lorawan_eu.c: 127: {
 29943                           ;lorawan_eu.c: 128: CreateAllSoftwareTimers ();
 29944  005404  EC12  F029         	call	_CreateAllSoftwareTimers	;wreg free
 29945                           
 29946                           ;lorawan_eu.c: 129: SetCallbackSoftwareTimers ();
 29947  005408  EC3A  F020         	call	_SetCallbackSoftwareTimers	;wreg free
 29948                           
 29949                           ; BSR set to: 0
 29950                           ;lorawan_eu.c: 130: loRa.macInitialized = 1;
 29951  00540C  0E01               	movlw	1
 29952  00540E  0102               	movlb	2	; () banked
 29953  005410  6FF0               	movwf	(_loRa+240)& (0+255),b
 29954                           
 29955                           ;lorawan_eu.c: 131: }
 29956  005412  D002               	goto	l15540
 29957  005414                     l15538:
 29958                           
 29959                           ; BSR set to: 2
 29960                           ;lorawan_eu.c: 132: else
 29961                           ;lorawan_eu.c: 133: {
 29962                           ;lorawan_eu.c: 134: StopAllSoftwareTimers ();
 29963  005414  ECD8  F029         	call	_StopAllSoftwareTimers	;wreg free
 29964  005418                     l15540:
 29965                           
 29966                           ;lorawan_eu.c: 135: }
 29967                           ;lorawan_eu.c: 137: rxPayload.RxAppData = RxPayload;
 29968  005418  C0A8  F179         	movff	LORAWAN_Init@RxPayload,_rxPayload
 29969  00541C  C0A9  F17A         	movff	LORAWAN_Init@RxPayload+1,_rxPayload+1
 29970                           
 29971                           ;lorawan_eu.c: 138: rxPayload.RxJoinResponse = RxJoinResponse;
 29972  005420  C0AA  F17B         	movff	LORAWAN_Init@RxJoinResponse,_rxPayload+2
 29973  005424  C0AB  F17C         	movff	LORAWAN_Init@RxJoinResponse+1,_rxPayload+3
 29974                           
 29975                           ;lorawan_eu.c: 140: RADIO_Init(&radioBuffer[16], (868100000));
 29976  005428  0EF0               	movlw	low (_radioBuffer+16)
 29977  00542A  0100               	movlb	0	; () banked
 29978  00542C  EC6C  F014         	call	PL160	;call to abstracted procedure
 29979  005430  EC93  F011         	call	_RADIO_Init	;wreg free
 29980                           
 29981                           ; BSR set to: 1
 29982                           ;lorawan_eu.c: 142: srand (RADIO_ReadRandom ());
 29983  005434  EC68  F024         	call	_RADIO_ReadRandom	;wreg free
 29984  005438  C06C  F071         	movff	?_RADIO_ReadRandom,srand@x
 29985  00543C  C06D  F072         	movff	?_RADIO_ReadRandom+1,srand@x+1
 29986  005440  EC7D  F030         	call	_srand	;wreg free
 29987                           
 29988                           ;lorawan_eu.c: 144: LORAWAN_Reset (ISM_EU868);
 29989  005444  0E00               	movlw	0
 29990  005446  EFDD  F013         	goto	_LORAWAN_Reset
 29991  00544A                     __end_of_LORAWAN_Init:
 29992                           	opt stack 0
 29993                           tosu	equ	0xFFF
 29994                           tosh	equ	0xFFE
 29995                           tosl	equ	0xFFD
 29996                           pclath	equ	0xFFA
 29997                           tblptru	equ	0xFF8
 29998                           tblptrh	equ	0xFF7
 29999                           tblptrl	equ	0xFF6
 30000                           tablat	equ	0xFF5
 30001                           prodh	equ	0xFF4
 30002                           prodl	equ	0xFF3
 30003                           intcon	equ	0xFF2
 30004                           indf0	equ	0xFEF
 30005                           postinc0	equ	0xFEE
 30006                           plusw0	equ	0xFEB
 30007                           fsr0h	equ	0xFEA
 30008                           fsr0l	equ	0xFE9
 30009                           wreg	equ	0xFE8
 30010                           postinc1	equ	0xFE6
 30011                           postdec1	equ	0xFE5
 30012                           plusw1	equ	0xFE3
 30013                           fsr1h	equ	0xFE2
 30014                           fsr1l	equ	0xFE1
 30015                           indf2	equ	0xFDF
 30016                           postinc2	equ	0xFDE
 30017                           postdec2	equ	0xFDD
 30018                           plusw2	equ	0xFDB
 30019                           fsr2h	equ	0xFDA
 30020                           fsr2l	equ	0xFD9
 30021                           status	equ	0xFD8
 30022                           
 30023 ;; *************** function _srand *****************
 30024 ;; Defined at:
 30025 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\rand.c"
 30026 ;; Parameters:    Size  Location     Type
 30027 ;;  x               2   17[BANK0 ] unsigned int 
 30028 ;; Auto vars:     Size  Location     Type
 30029 ;;		None
 30030 ;; Return value:  Size  Location     Type
 30031 ;;                  1    wreg      void 
 30032 ;; Registers used:
 30033 ;;		status,2
 30034 ;; Tracked objects:
 30035 ;;		On entry : 31/0
 30036 ;;		On exit  : 31/0
 30037 ;;		Unchanged: 31/0
 30038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 30039 ;;      Params:         0       2       0       0       0       0       0       0       0
 30040 ;;      Locals:         0       0       0       0       0       0       0       0       0
 30041 ;;      Temps:          0       0       0       0       0       0       0       0       0
 30042 ;;      Totals:         0       2       0       0       0       0       0       0       0
 30043 ;;Total ram usage:        2 bytes
 30044 ;; Hardware stack levels used:    1
 30045 ;; Hardware stack levels required when called:    7
 30046 ;; This function calls:
 30047 ;;		Nothing
 30048 ;; This function is called by:
 30049 ;;		_LORAWAN_Init
 30050 ;; This function uses a non-reentrant model
 30051 ;;
 30052                           
 30053                           	psect	text153
 30054  0060FA                     __ptext153:
 30055                           	opt stack 0
 30056  0060FA                     _srand:
 30057                           	opt stack 22
 30058                           
 30059                           ;incstack = 0
 30060  0060FA  C071  F054         	movff	srand@x,_randx
 30061  0060FE  C072  F055         	movff	srand@x+1,_randx+1
 30062  006102  6A56               	clrf	_randx+2,c
 30063  006104  6A57               	clrf	_randx+3,c
 30064  006106  0012               	return		;funcret
 30065  006108                     __end_of_srand:
 30066                           	opt stack 0
 30067                           tosu	equ	0xFFF
 30068                           tosh	equ	0xFFE
 30069                           tosl	equ	0xFFD
 30070                           pclath	equ	0xFFA
 30071                           tblptru	equ	0xFF8
 30072                           tblptrh	equ	0xFF7
 30073                           tblptrl	equ	0xFF6
 30074                           tablat	equ	0xFF5
 30075                           prodh	equ	0xFF4
 30076                           prodl	equ	0xFF3
 30077                           intcon	equ	0xFF2
 30078                           indf0	equ	0xFEF
 30079                           postinc0	equ	0xFEE
 30080                           plusw0	equ	0xFEB
 30081                           fsr0h	equ	0xFEA
 30082                           fsr0l	equ	0xFE9
 30083                           wreg	equ	0xFE8
 30084                           postinc1	equ	0xFE6
 30085                           postdec1	equ	0xFE5
 30086                           plusw1	equ	0xFE3
 30087                           fsr1h	equ	0xFE2
 30088                           fsr1l	equ	0xFE1
 30089                           indf2	equ	0xFDF
 30090                           postinc2	equ	0xFDE
 30091                           postdec2	equ	0xFDD
 30092                           plusw2	equ	0xFDB
 30093                           fsr2h	equ	0xFDA
 30094                           fsr2l	equ	0xFD9
 30095                           status	equ	0xFD8
 30096                           
 30097 ;; *************** function _SetCallbackSoftwareTimers *****************
 30098 ;; Defined at:
 30099 ;;		line 951 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 30100 ;; Parameters:    Size  Location     Type
 30101 ;;		None
 30102 ;; Auto vars:     Size  Location     Type
 30103 ;;		None
 30104 ;; Return value:  Size  Location     Type
 30105 ;;                  1    wreg      void 
 30106 ;; Registers used:
 30107 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 30108 ;; Tracked objects:
 30109 ;;		On entry : 3F/2
 30110 ;;		On exit  : 3F/0
 30111 ;;		Unchanged: 0/0
 30112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 30113 ;;      Params:         0       0       0       0       0       0       0       0       0
 30114 ;;      Locals:         0       0       0       0       0       0       0       0       0
 30115 ;;      Temps:          0       0       0       0       0       0       0       0       0
 30116 ;;      Totals:         0       0       0       0       0       0       0       0       0
 30117 ;;Total ram usage:        0 bytes
 30118 ;; Hardware stack levels used:    1
 30119 ;; Hardware stack levels required when called:    8
 30120 ;; This function calls:
 30121 ;;		_SwTimerSetCallback
 30122 ;; This function is called by:
 30123 ;;		_LORAWAN_Init
 30124 ;; This function uses a non-reentrant model
 30125 ;;
 30126                           
 30127                           	psect	text154
 30128  004074                     __ptext154:
 30129                           	opt stack 0
 30130  004074                     _SetCallbackSoftwareTimers:
 30131                           	opt stack 21
 30132                           
 30133                           ; BSR set to: 2
 30134                           ;lorawan_eu.c: 953: SwTimerSetCallback(loRa.joinAccept1TimerId, LORAWAN_ReceiveWindow1Ca
      +                          llback, 0);
 30135                           
 30136                           ;incstack = 0
 30137  004074  0EC8               	movlw	low _LORAWAN_ReceiveWindow1Callback
 30138  004076  0100               	movlb	0	; () banked
 30139  004078  D84D               	call	PL332	;call to abstracted procedure
 30140  00407A  51E2               	movf	(_loRa+226)& (0+255),w,b
 30141  00407C  ECAE  F02D         	call	_SwTimerSetCallback
 30142                           
 30143                           ;lorawan_eu.c: 954: SwTimerSetCallback(loRa.joinAccept2TimerId, LORAWAN_ReceiveWindow2Ca
      +                          llback, 0);
 30144  004080  D842               	call	PL288	;call to abstracted procedure
 30145  004082  51E3               	movf	(_loRa+227)& (0+255),w,b
 30146  004084  ECAE  F02D         	call	_SwTimerSetCallback
 30147                           
 30148                           ;lorawan_eu.c: 955: SwTimerSetCallback(loRa.linkCheckTimerId, LORAWAN_LinkCheckCallback,
      +                           0);
 30149  004088  0E14               	movlw	low _LORAWAN_LinkCheckCallback
 30150  00408A  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 30151  00408C  0E2F               	movlw	high _LORAWAN_LinkCheckCallback
 30152  00408E  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30153  004090  6B62               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30154  004092  0102               	movlb	2	; () banked
 30155  004094  51E7               	movf	(_loRa+231)& (0+255),w,b
 30156  004096  ECAE  F02D         	call	_SwTimerSetCallback
 30157                           
 30158                           ;lorawan_eu.c: 956: SwTimerSetCallback(loRa.receiveWindow1TimerId, LORAWAN_ReceiveWindow
      +                          1Callback, 0);
 30159  00409A  0EC8               	movlw	low _LORAWAN_ReceiveWindow1Callback
 30160  00409C  D83B               	call	PL332	;call to abstracted procedure
 30161  00409E  51E4               	movf	(_loRa+228)& (0+255),w,b
 30162  0040A0  ECAE  F02D         	call	_SwTimerSetCallback
 30163                           
 30164                           ;lorawan_eu.c: 957: SwTimerSetCallback(loRa.receiveWindow2TimerId, LORAWAN_ReceiveWindow
      +                          2Callback, 0);
 30165  0040A4  D830               	call	PL288	;call to abstracted procedure
 30166  0040A6  51E5               	movf	(_loRa+229)& (0+255),w,b
 30167  0040A8  ECAE  F02D         	call	_SwTimerSetCallback
 30168                           
 30169                           ;lorawan_eu.c: 958: SwTimerSetCallback(loRa.ackTimeoutTimerId, AckRetransmissionCallback
      +                          , 0);
 30170  0040AC  0E12               	movlw	low _AckRetransmissionCallback
 30171  0040AE  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 30172  0040B0  0E33               	movlw	high _AckRetransmissionCallback
 30173  0040B2  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30174  0040B4  6B62               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30175  0040B6  0102               	movlb	2	; () banked
 30176  0040B8  51E8               	movf	(_loRa+232)& (0+255),w,b
 30177  0040BA  ECAE  F02D         	call	_SwTimerSetCallback
 30178                           
 30179                           ;lorawan_eu.c: 959: SwTimerSetCallback(loRa.automaticReplyTimerId, AutomaticReplyCallbac
      +                          k, 0);
 30180  0040BE  0E00               	movlw	low _AutomaticReplyCallback
 30181  0040C0  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 30182  0040C2  0E60               	movlw	high _AutomaticReplyCallback
 30183  0040C4  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30184  0040C6  6B62               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30185  0040C8  0102               	movlb	2	; () banked
 30186  0040CA  51E6               	movf	(_loRa+230)& (0+255),w,b
 30187  0040CC  ECAE  F02D         	call	_SwTimerSetCallback
 30188                           
 30189                           ;lorawan_eu.c: 960: SwTimerSetCallback(loRa.unconfirmedRetransmisionTimerId, Unconfirmed
      +                          TransmissionCallback, 0);
 30190  0040D0  0EAC               	movlw	low _UnconfirmedTransmissionCallback
 30191  0040D2  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 30192  0040D4  0E4A               	movlw	high _UnconfirmedTransmissionCallback
 30193  0040D6  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30194  0040D8  6B62               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30195  0040DA  0102               	movlb	2	; () banked
 30196  0040DC  51EA               	movf	(_loRa+234)& (0+255),w,b
 30197  0040DE  ECAE  F02D         	call	_SwTimerSetCallback
 30198                           
 30199                           ;lorawan_eu.c: 961: SwTimerSetCallback(loRa.abpJoinTimerId, UpdateJoinSuccessState, 0);
 30200  0040E2  0E76               	movlw	low _UpdateJoinSuccessState
 30201  0040E4  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 30202  0040E6  0E3B               	movlw	high _UpdateJoinSuccessState
 30203  0040E8  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30204  0040EA  6B62               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30205  0040EC  0102               	movlb	2	; () banked
 30206  0040EE  51F3               	movf	(_loRa+243)& (0+255),w,b
 30207  0040F0  ECAE  F02D         	call	_SwTimerSetCallback
 30208                           
 30209                           ;lorawan_eu.c: 962: SwTimerSetCallback (loRa.dutyCycleTimerId, DutyCycleCallback, 0);
 30210  0040F4  0E84               	movlw	low _DutyCycleCallback
 30211  0040F6  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 30212  0040F8  0E1B               	movlw	high _DutyCycleCallback
 30213  0040FA  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30214  0040FC  6B62               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30215  0040FE  0102               	movlb	2	; () banked
 30216  004100  51E9               	movf	(_loRa+233)& (0+255),w,b
 30217  004102  EFAE  F02D         	goto	_SwTimerSetCallback
 30218  004106                     __end_of_SetCallbackSoftwareTimers:
 30219                           	opt stack 0
 30220  004106                     PL288:
 30221                           	opt stack 21
 30222  004106  0E64               	movlw	low _LORAWAN_ReceiveWindow2Callback
 30223  004108  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 30224  00410A  0E44               	movlw	high _LORAWAN_ReceiveWindow2Callback
 30225  00410C  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30226  00410E  6B62               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30227  004110  0102               	movlb	2	; () banked
 30228  004112  0012               	return	
 30229  004114                     __end_ofPL288:
 30230                           	opt stack 0
 30231  004114                     PL332:
 30232                           	opt stack 21
 30233  004114  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 30234  004116  0E3F               	movlw	high _LORAWAN_ReceiveWindow1Callback
 30235  004118  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30236  00411A  6B62               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30237  00411C  0102               	movlb	2	; () banked
 30238  00411E  0012               	return	
 30239  004120                     __end_ofPL332:
 30240                           	opt stack 0
 30241                           tosu	equ	0xFFF
 30242                           tosh	equ	0xFFE
 30243                           tosl	equ	0xFFD
 30244                           pclath	equ	0xFFA
 30245                           tblptru	equ	0xFF8
 30246                           tblptrh	equ	0xFF7
 30247                           tblptrl	equ	0xFF6
 30248                           tablat	equ	0xFF5
 30249                           prodh	equ	0xFF4
 30250                           prodl	equ	0xFF3
 30251                           intcon	equ	0xFF2
 30252                           indf0	equ	0xFEF
 30253                           postinc0	equ	0xFEE
 30254                           plusw0	equ	0xFEB
 30255                           fsr0h	equ	0xFEA
 30256                           fsr0l	equ	0xFE9
 30257                           wreg	equ	0xFE8
 30258                           postinc1	equ	0xFE6
 30259                           postdec1	equ	0xFE5
 30260                           plusw1	equ	0xFE3
 30261                           fsr1h	equ	0xFE2
 30262                           fsr1l	equ	0xFE1
 30263                           indf2	equ	0xFDF
 30264                           postinc2	equ	0xFDE
 30265                           postdec2	equ	0xFDD
 30266                           plusw2	equ	0xFDB
 30267                           fsr2h	equ	0xFDA
 30268                           fsr2l	equ	0xFD9
 30269                           status	equ	0xFD8
 30270                           
 30271 ;; *************** function _RADIO_ReadRandom *****************
 30272 ;; Defined at:
 30273 ;;		line 1367 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 30274 ;; Parameters:    Size  Location     Type
 30275 ;;		None
 30276 ;; Auto vars:     Size  Location     Type
 30277 ;;  retVal          2   14[BANK0 ] unsigned int 
 30278 ;;  i               1   16[BANK0 ] unsigned char 
 30279 ;; Return value:  Size  Location     Type
 30280 ;;                  2   12[BANK0 ] unsigned int 
 30281 ;; Registers used:
 30282 ;;		wreg, status,2, status,0, cstack
 30283 ;; Tracked objects:
 30284 ;;		On entry : 3F/1
 30285 ;;		On exit  : 31/0
 30286 ;;		Unchanged: 0/0
 30287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 30288 ;;      Params:         0       2       0       0       0       0       0       0       0
 30289 ;;      Locals:         0       3       0       0       0       0       0       0       0
 30290 ;;      Temps:          0       0       0       0       0       0       0       0       0
 30291 ;;      Totals:         0       5       0       0       0       0       0       0       0
 30292 ;;Total ram usage:        5 bytes
 30293 ;; Hardware stack levels used:    1
 30294 ;; Hardware stack levels required when called:   11
 30295 ;; This function calls:
 30296 ;;		_RADIO_RegisterRead
 30297 ;;		_RADIO_RegisterWrite
 30298 ;;		_RADIO_WriteMode
 30299 ;;		_SystemBlockingWaitMs
 30300 ;; This function is called by:
 30301 ;;		_LORAWAN_Init
 30302 ;; This function uses a non-reentrant model
 30303 ;;
 30304                           
 30305                           	psect	text155
 30306  0048D0                     __ptext155:
 30307                           	opt stack 0
 30308  0048D0                     _RADIO_ReadRandom:
 30309                           	opt stack 18
 30310                           
 30311                           ; BSR set to: 1
 30312                           ;radio_driver_SX1276.c: 1369: uint8_t i;
 30313                           ;radio_driver_SX1276.c: 1370: uint16_t retVal;
 30314                           ;radio_driver_SX1276.c: 1371: retVal = 0;
 30315                           
 30316                           ; BSR set to: 0
 30317                           ;incstack = 0
 30318  0048D0  0100               	movlb	0	; () banked
 30319  0048D2  6B6E               	clrf	RADIO_ReadRandom@retVal& (0+255),b
 30320  0048D4  6B6F               	clrf	(RADIO_ReadRandom@retVal+1)& (0+255),b
 30321                           
 30322                           ; BSR set to: 0
 30323                           ;radio_driver_SX1276.c: 1373: RADIO_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
 30324  0048D6  D831               	call	PL420	;call to abstracted procedure
 30325  0048D8  ECDB  F01A         	call	_RADIO_WriteMode
 30326                           
 30327                           ;radio_driver_SX1276.c: 1374: RADIO_RegisterWrite(0x11, 0xFF);
 30328  0048DC  0100               	movlb	0	; () banked
 30329  0048DE  6962               	setf	RADIO_RegisterWrite@value& (0+255),b
 30330  0048E0  0E11               	movlw	17
 30331  0048E2  EC2E  F02F         	call	_RADIO_RegisterWrite
 30332                           
 30333                           ;radio_driver_SX1276.c: 1375: RADIO_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
 30334  0048E6  0E01               	movlw	1
 30335  0048E8  D824               	call	PL368	;call to abstracted procedure
 30336  0048EA  ECDB  F01A         	call	_RADIO_WriteMode
 30337                           
 30338                           ;radio_driver_SX1276.c: 1376: for (i = 0; i < 16; i++)
 30339  0048EE  0100               	movlb	0	; () banked
 30340  0048F0  6B70               	clrf	RADIO_ReadRandom@i& (0+255),b
 30341  0048F2                     l15390:
 30342                           
 30343                           ; BSR set to: 0
 30344                           ;radio_driver_SX1276.c: 1377: {
 30345                           ;radio_driver_SX1276.c: 1378: SystemBlockingWaitMs(1);
 30346  0048F2  EC3F  F01B         	call	PL228	;call to abstracted procedure
 30347  0048F6  ECC4  F02D         	call	_SystemBlockingWaitMs	;wreg free
 30348                           
 30349                           ; BSR set to: 0
 30350                           ;radio_driver_SX1276.c: 1379: retVal <<= (1);
 30351  0048FA  90D8               	bcf	status,0,c
 30352  0048FC  376E               	rlcf	RADIO_ReadRandom@retVal& (0+255),f,b
 30353  0048FE  376F               	rlcf	(RADIO_ReadRandom@retVal+1)& (0+255),f,b
 30354                           
 30355                           ; BSR set to: 0
 30356                           ;radio_driver_SX1276.c: 1380: retVal |= RADIO_RegisterRead(0x2C) & 0x01;
 30357  004900  0E2C               	movlw	44
 30358  004902  EC64  F02E         	call	_RADIO_RegisterRead
 30359  004906  0B01               	andlw	1
 30360  004908  136E               	iorwf	RADIO_ReadRandom@retVal& (0+255),f,b
 30361  00490A  2B70               	incf	RADIO_ReadRandom@i& (0+255),f,b
 30362                           
 30363                           ; BSR set to: 0
 30364  00490C  0E0F               	movlw	15
 30365  00490E  6570               	cpfsgt	RADIO_ReadRandom@i& (0+255),b
 30366  004910  D7F0               	goto	l15390
 30367                           
 30368                           ; BSR set to: 0
 30369                           ;radio_driver_SX1276.c: 1381: }
 30370                           ;radio_driver_SX1276.c: 1384: RADIO_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
 30371  004912  D813               	call	PL420	;call to abstracted procedure
 30372  004914  ECDB  F01A         	call	_RADIO_WriteMode
 30373                           
 30374                           ;radio_driver_SX1276.c: 1386: RADIO_RegisterWrite(0x12, 0xFF);
 30375  004918  D814               	call	PL454	;call to abstracted procedure
 30376  00491A  EC2E  F02F         	call	_RADIO_RegisterWrite
 30377                           
 30378                           ;radio_driver_SX1276.c: 1388: RADIO_RegisterWrite(0x11, 0x00);
 30379  00491E  0100               	movlb	0	; () banked
 30380  004920  6B62               	clrf	RADIO_RegisterWrite@value& (0+255),b
 30381  004922  0E11               	movlw	17
 30382  004924  EC2E  F02F         	call	_RADIO_RegisterWrite
 30383                           
 30384                           ;radio_driver_SX1276.c: 1389: return retVal;
 30385  004928  C06E  F06C         	movff	RADIO_ReadRandom@retVal,?_RADIO_ReadRandom
 30386  00492C  C06F  F06D         	movff	RADIO_ReadRandom@retVal+1,?_RADIO_ReadRandom+1
 30387  004930  0012               	return		;funcret
 30388  004932                     __end_of_RADIO_ReadRandom:
 30389                           	opt stack 0
 30390  004932                     PL368:
 30391                           	opt stack 13
 30392  004932  0100               	movlb	0	; () banked
 30393  004934  6F65               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 30394  004936  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 30395  004938  0C05               	retlw	5
 30396  00493A                     __end_ofPL368:
 30397                           	opt stack 0
 30398  00493A                     PL420:
 30399                           	opt stack 18
 30400  00493A  0E01               	movlw	1
 30401  00493C  6F65               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 30402  00493E  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 30403  004940  0C00               	retlw	0
 30404  004942                     __end_ofPL420:
 30405                           	opt stack 0
 30406  004942                     PL454:
 30407                           	opt stack 16
 30408  004942  0100               	movlb	0	; () banked
 30409  004944  6962               	setf	RADIO_RegisterWrite@value& (0+255),b
 30410  004946  0C12               	retlw	18
 30411  004948                     __end_ofPL454:
 30412                           	opt stack 0
 30413                           tosu	equ	0xFFF
 30414                           tosh	equ	0xFFE
 30415                           tosl	equ	0xFFD
 30416                           pclath	equ	0xFFA
 30417                           tblptru	equ	0xFF8
 30418                           tblptrh	equ	0xFF7
 30419                           tblptrl	equ	0xFF6
 30420                           tablat	equ	0xFF5
 30421                           prodh	equ	0xFF4
 30422                           prodl	equ	0xFF3
 30423                           intcon	equ	0xFF2
 30424                           indf0	equ	0xFEF
 30425                           postinc0	equ	0xFEE
 30426                           plusw0	equ	0xFEB
 30427                           fsr0h	equ	0xFEA
 30428                           fsr0l	equ	0xFE9
 30429                           wreg	equ	0xFE8
 30430                           postinc1	equ	0xFE6
 30431                           postdec1	equ	0xFE5
 30432                           plusw1	equ	0xFE3
 30433                           fsr1h	equ	0xFE2
 30434                           fsr1l	equ	0xFE1
 30435                           indf2	equ	0xFDF
 30436                           postinc2	equ	0xFDE
 30437                           postdec2	equ	0xFDD
 30438                           plusw2	equ	0xFDB
 30439                           fsr2h	equ	0xFDA
 30440                           fsr2l	equ	0xFD9
 30441                           status	equ	0xFD8
 30442                           
 30443 ;; *************** function _LORAWAN_Reset *****************
 30444 ;; Defined at:
 30445 ;;		line 148 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 30446 ;; Parameters:    Size  Location     Type
 30447 ;;  ismBandNew      1    wreg     enum E17444
 30448 ;; Auto vars:     Size  Location     Type
 30449 ;;  ismBandNew      1   71[BANK0 ] enum E17444
 30450 ;; Return value:  Size  Location     Type
 30451 ;;                  1    wreg      void 
 30452 ;; Registers used:
 30453 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30454 ;; Tracked objects:
 30455 ;;		On entry : 31/0
 30456 ;;		On exit  : 3D/0
 30457 ;;		Unchanged: 0/0
 30458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 30459 ;;      Params:         0       0       0       0       0       0       0       0       0
 30460 ;;      Locals:         0       1       0       0       0       0       0       0       0
 30461 ;;      Temps:          0       0       0       0       0       0       0       0       0
 30462 ;;      Totals:         0       1       0       0       0       0       0       0       0
 30463 ;;Total ram usage:        1 bytes
 30464 ;; Hardware stack levels used:    1
 30465 ;; Hardware stack levels required when called:   12
 30466 ;; This function calls:
 30467 ;;		_InitDefault433Channels
 30468 ;;		_InitDefault868Channels
 30469 ;;		_LORAWAN_LinkCheckConfigure
 30470 ;;		_RADIO_Init
 30471 ;;		_RADIO_SetLoRaSyncWord
 30472 ;;		_StopAllSoftwareTimers
 30473 ;;		_UpdateMinMaxChDataRate
 30474 ;;		_memset
 30475 ;; This function is called by:
 30476 ;;		_LORAWAN_Init
 30477 ;; This function uses a non-reentrant model
 30478 ;;
 30479                           
 30480                           	psect	text156
 30481  0027BA                     __ptext156:
 30482                           	opt stack 0
 30483  0027BA                     _LORAWAN_Reset:
 30484                           	opt stack 17
 30485                           
 30486                           ;incstack = 0
 30487                           ;LORAWAN_Reset@ismBandNew stored from wreg
 30488  0027BA  0100               	movlb	0	; () banked
 30489  0027BC  6FA7               	movwf	LORAWAN_Reset@ismBandNew& (0+255),b
 30490                           
 30491                           ;lorawan_eu.c: 150: if (loRa.macInitialized == 1)
 30492  0027BE  0102               	movlb	2	; () banked
 30493  0027C0  05F0               	decf	(_loRa+240)& (0+255),w,b
 30494  0027C2  E102               	bnz	l15408
 30495                           
 30496                           ; BSR set to: 2
 30497                           ;lorawan_eu.c: 151: {
 30498                           ;lorawan_eu.c: 152: StopAllSoftwareTimers ();
 30499  0027C4  ECD8  F029         	call	_StopAllSoftwareTimers	;wreg free
 30500  0027C8                     l15408:
 30501                           
 30502                           ;lorawan_eu.c: 153: }
 30503                           ;lorawan_eu.c: 155: loRa.syncWord = 0x34;
 30504  0027C8  0E34               	movlw	52
 30505  0027CA  0102               	movlb	2	; () banked
 30506  0027CC  6FF4               	movwf	(_loRa+244)& (0+255),b
 30507                           
 30508                           ; BSR set to: 2
 30509                           ;lorawan_eu.c: 156: RADIO_SetLoRaSyncWord(loRa.syncWord);
 30510  0027CE  51F4               	movf	(_loRa+244)& (0+255),w,b
 30511  0027D0  ECD4  F030         	call	_RADIO_SetLoRaSyncWord
 30512                           
 30513                           ;lorawan_eu.c: 158: loRa.macStatus.value = 0;
 30514  0027D4  0102               	movlb	2	; () banked
 30515  0027D6  D897               	call	PL406	;call to abstracted procedure
 30516                           
 30517                           ; BSR set to: 2
 30518                           ;lorawan_eu.c: 159: loRa.linkCheckMargin = 255;
 30519  0027D8  69DD               	setf	(_loRa+221)& (0+255),b
 30520                           
 30521                           ; BSR set to: 2
 30522                           ;lorawan_eu.c: 160: loRa.linkCheckGwCnt = 0;
 30523  0027DA  6BDE               	clrf	(_loRa+222)& (0+255),b
 30524                           
 30525                           ; BSR set to: 2
 30526                           ;lorawan_eu.c: 161: loRa.lastTimerValue = 0;
 30527  0027DC  D88F               	call	PL402	;call to abstracted procedure
 30528                           
 30529                           ; BSR set to: 2
 30530                           ;lorawan_eu.c: 162: loRa.lastPacketLength = 0;
 30531  0027DE  6BD4               	clrf	(_loRa+212)& (0+255),b
 30532  0027E0  6BD5               	clrf	(_loRa+213)& (0+255),b
 30533                           
 30534                           ; BSR set to: 2
 30535                           ;lorawan_eu.c: 163: loRa.fCntDown.value = 0;
 30536  0027E2  D896               	call	PL408	;call to abstracted procedure
 30537                           
 30538                           ; BSR set to: 2
 30539                           ;lorawan_eu.c: 164: loRa.fCntUp.value = 0;
 30540  0027E4  D89A               	call	PL428	;call to abstracted procedure
 30541                           
 30542                           ; BSR set to: 2
 30543                           ;lorawan_eu.c: 165: loRa.devNonce = 0;
 30544  0027E6  6BD2               	clrf	(_loRa+210)& (0+255),b
 30545  0027E8  6BD3               	clrf	(_loRa+211)& (0+255),b
 30546                           
 30547                           ; BSR set to: 2
 30548                           ;lorawan_eu.c: 166: loRa.prescaler = 1;
 30549  0027EA  6BDC               	clrf	(_loRa+220)& (0+255),b
 30550  0027EC  0E01               	movlw	1
 30551  0027EE  6FDB               	movwf	(_loRa+219)& (0+255),b
 30552                           
 30553                           ; BSR set to: 2
 30554                           ;lorawan_eu.c: 167: loRa.adrAckCnt = 0;
 30555  0027F0  6BD0               	clrf	(_loRa+208)& (0+255),b
 30556  0027F2  6BD1               	clrf	(_loRa+209)& (0+255),b
 30557                           
 30558                           ; BSR set to: 2
 30559                           ;lorawan_eu.c: 168: loRa.counterAdrAckDelay = 0;
 30560  0027F4  6BEE               	clrf	(_loRa+238)& (0+255),b
 30561                           
 30562                           ; BSR set to: 2
 30563                           ;lorawan_eu.c: 169: loRa.offset = 0;
 30564  0027F6  6BEF               	clrf	(_loRa+239)& (0+255),b
 30565                           
 30566                           ; BSR set to: 2
 30567                           ;lorawan_eu.c: 170: loRa.lastTimerValue = 0;
 30568  0027F8  D881               	call	PL402	;call to abstracted procedure
 30569                           
 30570                           ; BSR set to: 2
 30571                           ;lorawan_eu.c: 173: loRa.macStatus.linkCheck = 0;
 30572  0027FA  9503               	bcf	(_loRa+3)& (0+255),2,b
 30573                           
 30574                           ; BSR set to: 2
 30575                           ;lorawan_eu.c: 176: loRa.macStatus.value = 0;
 30576  0027FC  D884               	call	PL406	;call to abstracted procedure
 30577                           
 30578                           ; BSR set to: 2
 30579                           ;lorawan_eu.c: 177: loRa.lorawanMacStatus.value = 0;
 30580  0027FE  6B00               	clrf	_loRa& (0+255),b
 30581  002800  6B01               	clrf	(_loRa+1)& (0+255),b
 30582                           
 30583                           ; BSR set to: 2
 30584                           ;lorawan_eu.c: 179: loRa.maxRepetitionsConfirmedUplink = 7;
 30585  002802  0E07               	movlw	7
 30586  002804  6FD7               	movwf	(_loRa+215)& (0+255),b
 30587                           
 30588                           ; BSR set to: 2
 30589                           ;lorawan_eu.c: 180: loRa.maxRepetitionsUnconfirmedUplink = 0;
 30590  002806  6BD6               	clrf	(_loRa+214)& (0+255),b
 30591                           
 30592                           ; BSR set to: 2
 30593                           ;lorawan_eu.c: 181: loRa.counterRepetitionsConfirmedUplink = 1;
 30594  002808  0E01               	movlw	1
 30595  00280A  6FD9               	movwf	(_loRa+217)& (0+255),b
 30596                           
 30597                           ; BSR set to: 2
 30598                           ;lorawan_eu.c: 182: loRa.counterRepetitionsUnconfirmedUplink = 1;
 30599  00280C  6FD8               	movwf	(_loRa+216)& (0+255),b
 30600                           
 30601                           ; BSR set to: 2
 30602                           ;lorawan_eu.c: 184: loRa.batteryLevel = (0xFF);
 30603  00280E  69E0               	setf	(_loRa+224)& (0+255),b
 30604                           
 30605                           ; BSR set to: 2
 30606                           ;lorawan_eu.c: 186: loRa.ismBand = ismBandNew;
 30607  002810  C0A7  F2A4         	movff	LORAWAN_Reset@ismBandNew,_loRa+164
 30608                           
 30609                           ; BSR set to: 2
 30610                           ;lorawan_eu.c: 188: loRa.deviceClass = CLASS_A;
 30611  002814  6B12               	clrf	(_loRa+18)& (0+255),b
 30612                           
 30613                           ; BSR set to: 2
 30614                           ;lorawan_eu.c: 191: loRa.maxChannels = 16;
 30615  002816  0E10               	movlw	16
 30616  002818  6FED               	movwf	(_loRa+237)& (0+255),b
 30617                           
 30618                           ; BSR set to: 2
 30619                           ;lorawan_eu.c: 192: if(ISM_EU868 == ismBandNew)
 30620  00281A  0100               	movlb	0	; () banked
 30621  00281C  51A7               	movf	LORAWAN_Reset@ismBandNew& (0+255),w,b
 30622  00281E  E110               	bnz	l15470
 30623                           
 30624                           ; BSR set to: 0
 30625                           ;lorawan_eu.c: 193: {
 30626                           ;lorawan_eu.c: 194: RADIO_Init(&radioBuffer[16], (868100000));
 30627  002820  0EF0               	movlw	low (_radioBuffer+16)
 30628  002822  D85A               	call	PL160	;call to abstracted procedure
 30629  002824  EC93  F011         	call	_RADIO_Init	;wreg free
 30630                           
 30631                           ; BSR set to: 1
 30632                           ;lorawan_eu.c: 196: InitDefault868Channels ();
 30633  002828  ECD8  F02B         	call	_InitDefault868Channels	;wreg free
 30634                           
 30635                           ; BSR set to: 0
 30636                           ;lorawan_eu.c: 198: loRa.receiveWindow2Parameters.dataRate = (0);
 30637  00282C  0102               	movlb	2	; () banked
 30638  00282E  6B1C               	clrf	(_loRa+28)& (0+255),b
 30639                           
 30640                           ; BSR set to: 2
 30641                           ;lorawan_eu.c: 199: loRa.receiveWindow2Parameters.frequency = (869525000);
 30642  002830  0E08               	movlw	8
 30643  002832  6F18               	movwf	(_loRa+24)& (0+255),b
 30644  002834  0EE6               	movlw	230
 30645  002836  6F19               	movwf	(_loRa+25)& (0+255),b
 30646  002838  0ED3               	movlw	211
 30647  00283A  6F1A               	movwf	(_loRa+26)& (0+255),b
 30648  00283C  0E33               	movlw	51
 30649  00283E  D019               	goto	L23
 30650  002840                     l15470:
 30651                           
 30652                           ; BSR set to: 0
 30653                           ;lorawan_eu.c: 201: else
 30654                           ;lorawan_eu.c: 202: {
 30655                           ;lorawan_eu.c: 203: RADIO_Init(&radioBuffer[16], (433300000));
 30656  002840  0EF0               	movlw	low (_radioBuffer+16)
 30657  002842  6F79               	movwf	RADIO_Init@radioBuffer& (0+255),b
 30658  002844  0E04               	movlw	high (_radioBuffer+16)
 30659  002846  6F7A               	movwf	(RADIO_Init@radioBuffer+1)& (0+255),b
 30660  002848  0E20               	movlw	32
 30661  00284A  6F7B               	movwf	RADIO_Init@frequency& (0+255),b
 30662  00284C  0EA2               	movlw	162
 30663  00284E  6F7C               	movwf	(RADIO_Init@frequency+1)& (0+255),b
 30664  002850  0ED3               	movlw	211
 30665  002852  6F7D               	movwf	(RADIO_Init@frequency+2)& (0+255),b
 30666  002854  0E19               	movlw	25
 30667  002856  6F7E               	movwf	(RADIO_Init@frequency+3)& (0+255),b
 30668  002858  EC93  F011         	call	_RADIO_Init	;wreg free
 30669                           
 30670                           ; BSR set to: 1
 30671                           ;lorawan_eu.c: 205: InitDefault433Channels ();
 30672  00285C  EC86  F027         	call	_InitDefault433Channels	;wreg free
 30673                           
 30674                           ; BSR set to: 0
 30675                           ;lorawan_eu.c: 207: loRa.receiveWindow2Parameters.dataRate = (0);
 30676  002860  0102               	movlb	2	; () banked
 30677  002862  6B1C               	clrf	(_loRa+28)& (0+255),b
 30678                           
 30679                           ; BSR set to: 2
 30680                           ;lorawan_eu.c: 208: loRa.receiveWindow2Parameters.frequency = (434665000);
 30681  002864  0E28               	movlw	40
 30682  002866  6F18               	movwf	(_loRa+24)& (0+255),b
 30683  002868  0E76               	movlw	118
 30684  00286A  6F19               	movwf	(_loRa+25)& (0+255),b
 30685  00286C  0EE8               	movlw	232
 30686  00286E  6F1A               	movwf	(_loRa+26)& (0+255),b
 30687  002870  0E19               	movlw	25
 30688  002872                     L23:
 30689  002872  6F1B               	movwf	(_loRa+27)& (0+255),b
 30690                           
 30691                           ; BSR set to: 2
 30692                           ;lorawan_eu.c: 209: }
 30693                           ;lorawan_eu.c: 211: loRa.txPower = 1;
 30694  002874  0E01               	movlw	1
 30695  002876  6FE1               	movwf	(_loRa+225)& (0+255),b
 30696                           
 30697                           ; BSR set to: 2
 30698                           ;lorawan_eu.c: 213: loRa.currentDataRate = 0;
 30699  002878  6BDF               	clrf	(_loRa+223)& (0+255),b
 30700                           
 30701                           ; BSR set to: 2
 30702                           ;lorawan_eu.c: 215: UpdateMinMaxChDataRate ();
 30703  00287A  EC8F  F025         	call	_UpdateMinMaxChDataRate	;wreg free
 30704                           
 30705                           ; BSR set to: 0
 30706                           ;lorawan_eu.c: 218: loRa.macKeys.value = 0;
 30707  00287E  0102               	movlb	2	; () banked
 30708  002880  6BA5               	clrf	(_loRa+165)& (0+255),b
 30709  002882  6BA6               	clrf	(_loRa+166)& (0+255),b
 30710                           
 30711                           ; BSR set to: 2
 30712                           ;lorawan_eu.c: 219: memset (&loRa.activationParameters, 0, sizeof(loRa.activationParamet
      +                          ers));
 30713  002884  0E1D               	movlw	low (_loRa+29)
 30714  002886  0100               	movlb	0	; () banked
 30715  002888  6F60               	movwf	memset@p1& (0+255),b
 30716  00288A  0E02               	movlw	high (_loRa+29)
 30717  00288C  6F61               	movwf	(memset@p1+1)& (0+255),b
 30718  00288E  6B63               	clrf	(memset@c+1)& (0+255),b
 30719  002890  6B62               	clrf	memset@c& (0+255),b
 30720  002892  6B65               	clrf	(memset@n+1)& (0+255),b
 30721  002894  0E69               	movlw	105
 30722  002896  6F64               	movwf	memset@n& (0+255),b
 30723  002898  ECEF  F02D         	call	_memset	;wreg free
 30724                           
 30725                           ; BSR set to: 0
 30726                           ;lorawan_eu.c: 222: loRa.protocolParameters.receiveDelay1 = 1000UL;
 30727  00289C  D829               	call	PL344	;call to abstracted procedure
 30728                           
 30729                           ; BSR set to: 2
 30730                           ;lorawan_eu.c: 223: loRa.protocolParameters.receiveDelay2 = 2000UL;
 30731  00289E  0E07               	movlw	7
 30732  0028A0  6F97               	movwf	(_loRa+151)& (0+255),b
 30733  0028A2  0ED0               	movlw	208
 30734  0028A4  6F96               	movwf	(_loRa+150)& (0+255),b
 30735                           
 30736                           ; BSR set to: 2
 30737                           ;lorawan_eu.c: 224: loRa.protocolParameters.joinAcceptDelay1 = 5000UL;
 30738  0028A6  0E13               	movlw	19
 30739  0028A8  6F99               	movwf	(_loRa+153)& (0+255),b
 30740  0028AA  0E88               	movlw	136
 30741  0028AC  6F98               	movwf	(_loRa+152)& (0+255),b
 30742                           
 30743                           ; BSR set to: 2
 30744                           ;lorawan_eu.c: 225: loRa.protocolParameters.joinAcceptDelay2 = 6000UL;
 30745  0028AE  0E17               	movlw	23
 30746  0028B0  6F9B               	movwf	(_loRa+155)& (0+255),b
 30747  0028B2  0E70               	movlw	112
 30748  0028B4  6F9A               	movwf	(_loRa+154)& (0+255),b
 30749                           
 30750                           ; BSR set to: 2
 30751                           ;lorawan_eu.c: 226: loRa.protocolParameters.ackTimeout = 2000;
 30752  0028B6  0E07               	movlw	7
 30753  0028B8  6FA1               	movwf	(_loRa+161)& (0+255),b
 30754  0028BA  0ED0               	movlw	208
 30755  0028BC  6FA0               	movwf	(_loRa+160)& (0+255),b
 30756                           
 30757                           ; BSR set to: 2
 30758                           ;lorawan_eu.c: 227: loRa.protocolParameters.adrAckDelay = 32;
 30759  0028BE  0E20               	movlw	32
 30760  0028C0  6FA3               	movwf	(_loRa+163)& (0+255),b
 30761                           
 30762                           ; BSR set to: 2
 30763                           ;lorawan_eu.c: 228: loRa.protocolParameters.adrAckLimit = 64;
 30764  0028C2  0E40               	movlw	64
 30765  0028C4  6FA2               	movwf	(_loRa+162)& (0+255),b
 30766                           
 30767                           ; BSR set to: 2
 30768                           ;lorawan_eu.c: 229: loRa.protocolParameters.maxFcntGap = 16384;
 30769  0028C6  6F9D               	movwf	(_loRa+157)& (0+255),b
 30770  0028C8  6B9C               	clrf	(_loRa+156)& (0+255),b
 30771                           
 30772                           ; BSR set to: 2
 30773                           ;lorawan_eu.c: 230: loRa.protocolParameters.maxMultiFcntGap = 16384;
 30774  0028CA  6F9F               	movwf	(_loRa+159)& (0+255),b
 30775  0028CC  6B9E               	clrf	(_loRa+158)& (0+255),b
 30776                           
 30777                           ; BSR set to: 2
 30778                           ;lorawan_eu.c: 232: LORAWAN_LinkCheckConfigure (0);
 30779  0028CE  0100               	movlb	0	; () banked
 30780  0028D0  6B9D               	clrf	(LORAWAN_LinkCheckConfigure@period+1)& (0+255),b
 30781  0028D2  6B9C               	clrf	LORAWAN_LinkCheckConfigure@period& (0+255),b
 30782  0028D4  EF94  F018         	goto	_LORAWAN_LinkCheckConfigure	;wreg free
 30783  0028D8                     __end_of_LORAWAN_Reset:
 30784                           	opt stack 0
 30785  0028D8                     PL160:
 30786                           	opt stack 17
 30787  0028D8  6F79               	movwf	RADIO_Init@radioBuffer& (0+255),b
 30788  0028DA  0E04               	movlw	high (_radioBuffer+16)
 30789  0028DC  6F7A               	movwf	(RADIO_Init@radioBuffer+1)& (0+255),b
 30790  0028DE  0EA0               	movlw	160
 30791  0028E0  6F7B               	movwf	RADIO_Init@frequency& (0+255),b
 30792  0028E2  0E27               	movlw	39
 30793  0028E4  6F7C               	movwf	(RADIO_Init@frequency+1)& (0+255),b
 30794  0028E6  0EBE               	movlw	190
 30795  0028E8  6F7D               	movwf	(RADIO_Init@frequency+2)& (0+255),b
 30796  0028EA  0E33               	movlw	51
 30797  0028EC  6F7E               	movwf	(RADIO_Init@frequency+3)& (0+255),b
 30798  0028EE  0C33               	retlw	51
 30799  0028F0                     __end_ofPL160:
 30800                           	opt stack 0
 30801  0028F0                     PL344:
 30802                           	opt stack 18
 30803  0028F0  0E03               	movlw	3
 30804  0028F2  0102               	movlb	2	; () banked
 30805  0028F4  6F95               	movwf	(_loRa+149)& (0+255),b
 30806  0028F6  0EE8               	movlw	232
 30807  0028F8  6F94               	movwf	(_loRa+148)& (0+255),b
 30808  0028FA  0CE8               	retlw	232
 30809  0028FC                     __end_ofPL344:
 30810                           	opt stack 0
 30811  0028FC                     PL402:
 30812                           	opt stack 17
 30813  0028FC  6BC8               	clrf	(_loRa+200)& (0+255),b
 30814  0028FE  6BC9               	clrf	(_loRa+201)& (0+255),b
 30815  002900  6BCA               	clrf	(_loRa+202)& (0+255),b
 30816  002902  6BCB               	clrf	(_loRa+203)& (0+255),b
 30817  002904  0012               	return	
 30818  002906                     __end_ofPL402:
 30819                           	opt stack 0
 30820  002906                     PL406:
 30821                           	opt stack 17
 30822  002906  6B02               	clrf	(_loRa+2)& (0+255),b
 30823  002908  6B03               	clrf	(_loRa+3)& (0+255),b
 30824  00290A  6B04               	clrf	(_loRa+4)& (0+255),b
 30825  00290C  6B05               	clrf	(_loRa+5)& (0+255),b
 30826  00290E  0012               	return	
 30827  002910                     __end_ofPL406:
 30828                           	opt stack 0
 30829  002910                     PL408:
 30830                           	opt stack 12
 30831  002910  6B0A               	clrf	(_loRa+10)& (0+255),b
 30832  002912  6B0B               	clrf	(_loRa+11)& (0+255),b
 30833  002914  6B0C               	clrf	(_loRa+12)& (0+255),b
 30834  002916  6B0D               	clrf	(_loRa+13)& (0+255),b
 30835  002918  0012               	return	
 30836  00291A                     __end_ofPL408:
 30837                           	opt stack 0
 30838  00291A                     PL428:
 30839                           	opt stack 12
 30840  00291A  6B06               	clrf	(_loRa+6)& (0+255),b
 30841  00291C  6B07               	clrf	(_loRa+7)& (0+255),b
 30842  00291E  6B08               	clrf	(_loRa+8)& (0+255),b
 30843  002920  6B09               	clrf	(_loRa+9)& (0+255),b
 30844  002922  0012               	return	
 30845  002924                     __end_ofPL428:
 30846                           	opt stack 0
 30847                           tosu	equ	0xFFF
 30848                           tosh	equ	0xFFE
 30849                           tosl	equ	0xFFD
 30850                           pclath	equ	0xFFA
 30851                           tblptru	equ	0xFF8
 30852                           tblptrh	equ	0xFF7
 30853                           tblptrl	equ	0xFF6
 30854                           tablat	equ	0xFF5
 30855                           prodh	equ	0xFF4
 30856                           prodl	equ	0xFF3
 30857                           intcon	equ	0xFF2
 30858                           indf0	equ	0xFEF
 30859                           postinc0	equ	0xFEE
 30860                           plusw0	equ	0xFEB
 30861                           fsr0h	equ	0xFEA
 30862                           fsr0l	equ	0xFE9
 30863                           wreg	equ	0xFE8
 30864                           postinc1	equ	0xFE6
 30865                           postdec1	equ	0xFE5
 30866                           plusw1	equ	0xFE3
 30867                           fsr1h	equ	0xFE2
 30868                           fsr1l	equ	0xFE1
 30869                           indf2	equ	0xFDF
 30870                           postinc2	equ	0xFDE
 30871                           postdec2	equ	0xFDD
 30872                           plusw2	equ	0xFDB
 30873                           fsr2h	equ	0xFDA
 30874                           fsr2l	equ	0xFD9
 30875                           status	equ	0xFD8
 30876                           
 30877 ;; *************** function _UpdateMinMaxChDataRate *****************
 30878 ;; Defined at:
 30879 ;;		line 1063 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 30880 ;; Parameters:    Size  Location     Type
 30881 ;;		None
 30882 ;; Auto vars:     Size  Location     Type
 30883 ;;  i               1    1[BANK0 ] unsigned char 
 30884 ;; Return value:  Size  Location     Type
 30885 ;;                  1    wreg      void 
 30886 ;; Registers used:
 30887 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 30888 ;; Tracked objects:
 30889 ;;		On entry : 3F/2
 30890 ;;		On exit  : 3F/0
 30891 ;;		Unchanged: 0/0
 30892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 30893 ;;      Params:         0       0       0       0       0       0       0       0       0
 30894 ;;      Locals:         0       1       0       0       0       0       0       0       0
 30895 ;;      Temps:          0       1       0       0       0       0       0       0       0
 30896 ;;      Totals:         0       2       0       0       0       0       0       0       0
 30897 ;;Total ram usage:        2 bytes
 30898 ;; Hardware stack levels used:    1
 30899 ;; Hardware stack levels required when called:    7
 30900 ;; This function calls:
 30901 ;;		Nothing
 30902 ;; This function is called by:
 30903 ;;		_LORAWAN_Reset
 30904 ;; This function uses a non-reentrant model
 30905 ;;
 30906                           
 30907                           	psect	text157
 30908  004B1E                     __ptext157:
 30909                           	opt stack 0
 30910  004B1E                     _UpdateMinMaxChDataRate:
 30911                           	opt stack 21
 30912                           
 30913                           ; BSR set to: 2
 30914                           ;lorawan.c: 1065: uint8_t i;
 30915                           ;lorawan.c: 1068: loRa.minDataRate = 7;
 30916                           
 30917                           ;incstack = 0
 30918  004B1E  0E07               	movlw	7
 30919  004B20  6FEB               	movwf	(_loRa+235)& (0+255),b
 30920                           
 30921                           ; BSR set to: 2
 30922                           ;lorawan.c: 1069: loRa.maxDataRate = 0;
 30923  004B22  6BEC               	clrf	(_loRa+236)& (0+255),b
 30924                           
 30925                           ; BSR set to: 2
 30926                           ;lorawan.c: 1071: for (i = 0; i < loRa.maxChannels; i++)
 30927  004B24  0100               	movlb	0	; () banked
 30928  004B26  6B61               	clrf	UpdateMinMaxChDataRate@i& (0+255),b
 30929  004B28  D029               	goto	l10754
 30930  004B2A                     l10742:
 30931                           
 30932                           ; BSR set to: 0
 30933                           ;lorawan.c: 1072: {
 30934                           ;lorawan.c: 1073: if ( (Channels[i].dataRange.min < loRa.minDataRate) && (Channels[i].st
      +                          atus == 1) )
 30935  004B2A  5161               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 30936  004B2C  EC7E  F021         	call	PL6	;call to abstracted procedure
 30937  004B30  50DF               	movf	223,w,c
 30938  004B32  0B0F               	andlw	15
 30939  004B34  0100               	movlb	0	; () banked
 30940  004B36  6F60               	movwf	??_UpdateMinMaxChDataRate& (0+255),b
 30941  004B38  0102               	movlb	2	; () banked
 30942  004B3A  51EB               	movf	(_loRa+235)& (0+255),w,b
 30943  004B3C  0100               	movlb	0	; () banked
 30944  004B3E  5D60               	subwf	??_UpdateMinMaxChDataRate& (0+255),w,b
 30945  004B40  E209               	bc	l1085
 30946                           
 30947                           ; BSR set to: 0
 30948  004B42  5161               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 30949  004B44  EC86  F021         	call	PL12	;call to abstracted procedure
 30950  004B48  E105               	bnz	l1085
 30951                           
 30952                           ; BSR set to: 0
 30953                           ;lorawan.c: 1074: {
 30954                           ;lorawan.c: 1075: loRa.minDataRate = Channels[i].dataRange.min;
 30955  004B4A  5161               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 30956  004B4C  EC7E  F021         	call	PL6	;call to abstracted procedure
 30957  004B50  ECB2  F01D         	call	PL326	;call to abstracted procedure
 30958  004B54                     l1085:
 30959                           
 30960                           ;lorawan.c: 1076: }
 30961                           ;lorawan.c: 1077: if ( (Channels[i].dataRange.max > loRa.maxDataRate) && (Channels[i].st
      +                          atus == 1) )
 30962  004B54  0100               	movlb	0	; () banked
 30963  004B56  5161               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 30964  004B58  EC7E  F021         	call	PL6	;call to abstracted procedure
 30965  004B5C  ECB7  F01D         	call	PL440	;call to abstracted procedure
 30966  004B60  61EC               	cpfslt	(_loRa+236)& (0+255),b
 30967  004B62  D00A               	goto	l10752
 30968                           
 30969                           ; BSR set to: 2
 30970  004B64  0100               	movlb	0	; () banked
 30971  004B66  5161               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 30972  004B68  EC86  F021         	call	PL12	;call to abstracted procedure
 30973  004B6C  E105               	bnz	l10752
 30974                           
 30975                           ; BSR set to: 0
 30976                           ;lorawan.c: 1078: {
 30977                           ;lorawan.c: 1079: loRa.maxDataRate = Channels[i].dataRange.max;
 30978  004B6E  5161               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 30979  004B70  EC7E  F021         	call	PL6	;call to abstracted procedure
 30980  004B74  ECAD  F01D         	call	PL322	;call to abstracted procedure
 30981  004B78                     l10752:
 30982  004B78  0100               	movlb	0	; () banked
 30983  004B7A  2B61               	incf	UpdateMinMaxChDataRate@i& (0+255),f,b
 30984  004B7C                     l10754:
 30985                           
 30986                           ; BSR set to: 0
 30987  004B7C  0102               	movlb	2	; () banked
 30988  004B7E  51ED               	movf	(_loRa+237)& (0+255),w,b
 30989  004B80  0100               	movlb	0	; () banked
 30990  004B82  5D61               	subwf	UpdateMinMaxChDataRate@i& (0+255),w,b
 30991  004B84  E3D2               	bnc	l10742
 30992                           
 30993                           ; BSR set to: 0
 30994  004B86  0012               	return		;funcret
 30995  004B88                     __end_of_UpdateMinMaxChDataRate:
 30996                           	opt stack 0
 30997                           tosu	equ	0xFFF
 30998                           tosh	equ	0xFFE
 30999                           tosl	equ	0xFFD
 31000                           pclath	equ	0xFFA
 31001                           tblptru	equ	0xFF8
 31002                           tblptrh	equ	0xFF7
 31003                           tblptrl	equ	0xFF6
 31004                           tablat	equ	0xFF5
 31005                           prodh	equ	0xFF4
 31006                           prodl	equ	0xFF3
 31007                           intcon	equ	0xFF2
 31008                           indf0	equ	0xFEF
 31009                           postinc0	equ	0xFEE
 31010                           plusw0	equ	0xFEB
 31011                           fsr0h	equ	0xFEA
 31012                           fsr0l	equ	0xFE9
 31013                           wreg	equ	0xFE8
 31014                           postinc1	equ	0xFE6
 31015                           postdec1	equ	0xFE5
 31016                           plusw1	equ	0xFE3
 31017                           fsr1h	equ	0xFE2
 31018                           fsr1l	equ	0xFE1
 31019                           indf2	equ	0xFDF
 31020                           postinc2	equ	0xFDE
 31021                           postdec2	equ	0xFDD
 31022                           plusw2	equ	0xFDB
 31023                           fsr2h	equ	0xFDA
 31024                           fsr2l	equ	0xFD9
 31025                           status	equ	0xFD8
 31026                           
 31027 ;; *************** function _StopAllSoftwareTimers *****************
 31028 ;; Defined at:
 31029 ;;		line 965 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 31030 ;; Parameters:    Size  Location     Type
 31031 ;;		None
 31032 ;; Auto vars:     Size  Location     Type
 31033 ;;		None
 31034 ;; Return value:  Size  Location     Type
 31035 ;;                  1    wreg      void 
 31036 ;; Registers used:
 31037 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 31038 ;; Tracked objects:
 31039 ;;		On entry : 3F/2
 31040 ;;		On exit  : 3F/0
 31041 ;;		Unchanged: 0/0
 31042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 31043 ;;      Params:         0       0       0       0       0       0       0       0       0
 31044 ;;      Locals:         0       0       0       0       0       0       0       0       0
 31045 ;;      Temps:          0       0       0       0       0       0       0       0       0
 31046 ;;      Totals:         0       0       0       0       0       0       0       0       0
 31047 ;;Total ram usage:        0 bytes
 31048 ;; Hardware stack levels used:    1
 31049 ;; Hardware stack levels required when called:    8
 31050 ;; This function calls:
 31051 ;;		_SwTimerStop
 31052 ;; This function is called by:
 31053 ;;		_LORAWAN_Init
 31054 ;;		_LORAWAN_Reset
 31055 ;; This function uses a non-reentrant model
 31056 ;;
 31057                           
 31058                           	psect	text158
 31059  0053B0                     __ptext158:
 31060                           	opt stack 0
 31061  0053B0                     _StopAllSoftwareTimers:
 31062                           	opt stack 21
 31063                           
 31064                           ; BSR set to: 2
 31065                           ;lorawan_eu.c: 967: SwTimerStop(loRa.joinAccept1TimerId);
 31066                           
 31067                           ; BSR set to: 0
 31068                           ;incstack = 0
 31069  0053B0  51E2               	movf	(_loRa+226)& (0+255),w,b
 31070  0053B2  EC65  F030         	call	_SwTimerStop
 31071                           
 31072                           ;lorawan_eu.c: 968: SwTimerStop(loRa.joinAccept2TimerId);
 31073  0053B6  0102               	movlb	2	; () banked
 31074  0053B8  51E3               	movf	(_loRa+227)& (0+255),w,b
 31075  0053BA  EC65  F030         	call	_SwTimerStop
 31076                           
 31077                           ;lorawan_eu.c: 969: SwTimerStop(loRa.linkCheckTimerId);
 31078  0053BE  0102               	movlb	2	; () banked
 31079  0053C0  51E7               	movf	(_loRa+231)& (0+255),w,b
 31080  0053C2  EC65  F030         	call	_SwTimerStop
 31081                           
 31082                           ;lorawan_eu.c: 970: SwTimerStop(loRa.receiveWindow1TimerId);
 31083  0053C6  0102               	movlb	2	; () banked
 31084  0053C8  51E4               	movf	(_loRa+228)& (0+255),w,b
 31085  0053CA  EC65  F030         	call	_SwTimerStop
 31086                           
 31087                           ;lorawan_eu.c: 971: SwTimerStop(loRa.receiveWindow2TimerId);
 31088  0053CE  0102               	movlb	2	; () banked
 31089  0053D0  51E5               	movf	(_loRa+229)& (0+255),w,b
 31090  0053D2  EC65  F030         	call	_SwTimerStop
 31091                           
 31092                           ;lorawan_eu.c: 972: SwTimerStop(loRa.ackTimeoutTimerId);
 31093  0053D6  0102               	movlb	2	; () banked
 31094  0053D8  51E8               	movf	(_loRa+232)& (0+255),w,b
 31095  0053DA  EC65  F030         	call	_SwTimerStop
 31096                           
 31097                           ;lorawan_eu.c: 973: SwTimerStop(loRa.automaticReplyTimerId);
 31098  0053DE  0102               	movlb	2	; () banked
 31099  0053E0  51E6               	movf	(_loRa+230)& (0+255),w,b
 31100  0053E2  EC65  F030         	call	_SwTimerStop
 31101                           
 31102                           ;lorawan_eu.c: 974: SwTimerStop(loRa.unconfirmedRetransmisionTimerId);
 31103  0053E6  0102               	movlb	2	; () banked
 31104  0053E8  51EA               	movf	(_loRa+234)& (0+255),w,b
 31105  0053EA  EC65  F030         	call	_SwTimerStop
 31106                           
 31107                           ;lorawan_eu.c: 975: SwTimerStop(loRa.abpJoinTimerId);
 31108  0053EE  0102               	movlb	2	; () banked
 31109  0053F0  51F3               	movf	(_loRa+243)& (0+255),w,b
 31110  0053F2  EC65  F030         	call	_SwTimerStop
 31111                           
 31112                           ;lorawan_eu.c: 976: SwTimerStop(loRa.dutyCycleTimerId);
 31113  0053F6  0102               	movlb	2	; () banked
 31114  0053F8  51E9               	movf	(_loRa+233)& (0+255),w,b
 31115  0053FA  EF65  F030         	goto	_SwTimerStop
 31116  0053FE                     __end_of_StopAllSoftwareTimers:
 31117                           	opt stack 0
 31118                           tosu	equ	0xFFF
 31119                           tosh	equ	0xFFE
 31120                           tosl	equ	0xFFD
 31121                           pclath	equ	0xFFA
 31122                           tblptru	equ	0xFF8
 31123                           tblptrh	equ	0xFF7
 31124                           tblptrl	equ	0xFF6
 31125                           tablat	equ	0xFF5
 31126                           prodh	equ	0xFF4
 31127                           prodl	equ	0xFF3
 31128                           intcon	equ	0xFF2
 31129                           indf0	equ	0xFEF
 31130                           postinc0	equ	0xFEE
 31131                           plusw0	equ	0xFEB
 31132                           fsr0h	equ	0xFEA
 31133                           fsr0l	equ	0xFE9
 31134                           wreg	equ	0xFE8
 31135                           postinc1	equ	0xFE6
 31136                           postdec1	equ	0xFE5
 31137                           plusw1	equ	0xFE3
 31138                           fsr1h	equ	0xFE2
 31139                           fsr1l	equ	0xFE1
 31140                           indf2	equ	0xFDF
 31141                           postinc2	equ	0xFDE
 31142                           postdec2	equ	0xFDD
 31143                           plusw2	equ	0xFDB
 31144                           fsr2h	equ	0xFDA
 31145                           fsr2l	equ	0xFD9
 31146                           status	equ	0xFD8
 31147                           
 31148 ;; *************** function _RADIO_SetLoRaSyncWord *****************
 31149 ;; Defined at:
 31150 ;;		line 522 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 31151 ;; Parameters:    Size  Location     Type
 31152 ;;  syncWord        1    wreg     unsigned char 
 31153 ;; Auto vars:     Size  Location     Type
 31154 ;;  syncWord        1    0[BANK0 ] unsigned char 
 31155 ;; Return value:  Size  Location     Type
 31156 ;;                  1    wreg      void 
 31157 ;; Registers used:
 31158 ;;		wreg
 31159 ;; Tracked objects:
 31160 ;;		On entry : 3F/2
 31161 ;;		On exit  : 0/0
 31162 ;;		Unchanged: 0/0
 31163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 31164 ;;      Params:         0       0       0       0       0       0       0       0       0
 31165 ;;      Locals:         0       1       0       0       0       0       0       0       0
 31166 ;;      Temps:          0       0       0       0       0       0       0       0       0
 31167 ;;      Totals:         0       1       0       0       0       0       0       0       0
 31168 ;;Total ram usage:        1 bytes
 31169 ;; Hardware stack levels used:    1
 31170 ;; Hardware stack levels required when called:    7
 31171 ;; This function calls:
 31172 ;;		Nothing
 31173 ;; This function is called by:
 31174 ;;		_LORAWAN_Reset
 31175 ;;		_ConfigureRadio
 31176 ;; This function uses a non-reentrant model
 31177 ;;
 31178                           
 31179                           	psect	text159
 31180  0061A8                     __ptext159:
 31181                           	opt stack 0
 31182  0061A8                     _RADIO_SetLoRaSyncWord:
 31183                           	opt stack 18
 31184                           
 31185                           ; BSR set to: 0
 31186                           ;incstack = 0
 31187                           ;RADIO_SetLoRaSyncWord@syncWord stored from wreg
 31188  0061A8  0100               	movlb	0	; () banked
 31189  0061AA  6F60               	movwf	RADIO_SetLoRaSyncWord@syncWord& (0+255),b
 31190                           
 31191                           ;radio_driver_SX1276.c: 525: RadioConfiguration.syncWordLoRa = syncWord;
 31192  0061AC  C060  F18D         	movff	RADIO_SetLoRaSyncWord@syncWord,_RadioConfiguration+14
 31193  0061B0  0012               	return		;funcret
 31194  0061B2                     __end_of_RADIO_SetLoRaSyncWord:
 31195                           	opt stack 0
 31196                           tosu	equ	0xFFF
 31197                           tosh	equ	0xFFE
 31198                           tosl	equ	0xFFD
 31199                           pclath	equ	0xFFA
 31200                           tblptru	equ	0xFF8
 31201                           tblptrh	equ	0xFF7
 31202                           tblptrl	equ	0xFF6
 31203                           tablat	equ	0xFF5
 31204                           prodh	equ	0xFF4
 31205                           prodl	equ	0xFF3
 31206                           intcon	equ	0xFF2
 31207                           indf0	equ	0xFEF
 31208                           postinc0	equ	0xFEE
 31209                           plusw0	equ	0xFEB
 31210                           fsr0h	equ	0xFEA
 31211                           fsr0l	equ	0xFE9
 31212                           wreg	equ	0xFE8
 31213                           postinc1	equ	0xFE6
 31214                           postdec1	equ	0xFE5
 31215                           plusw1	equ	0xFE3
 31216                           fsr1h	equ	0xFE2
 31217                           fsr1l	equ	0xFE1
 31218                           indf2	equ	0xFDF
 31219                           postinc2	equ	0xFDE
 31220                           postdec2	equ	0xFDD
 31221                           plusw2	equ	0xFDB
 31222                           fsr2h	equ	0xFDA
 31223                           fsr2l	equ	0xFD9
 31224                           status	equ	0xFD8
 31225                           
 31226 ;; *************** function _RADIO_Init *****************
 31227 ;; Defined at:
 31228 ;;		line 422 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 31229 ;; Parameters:    Size  Location     Type
 31230 ;;  radioBuffer     2   25[BANK0 ] PTR unsigned char 
 31231 ;;		 -> radioBuffer(271), 
 31232 ;;  frequency       4   27[BANK0 ] unsigned long 
 31233 ;; Auto vars:     Size  Location     Type
 31234 ;;		None
 31235 ;; Return value:  Size  Location     Type
 31236 ;;                  1    wreg      void 
 31237 ;; Registers used:
 31238 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 31239 ;; Tracked objects:
 31240 ;;		On entry : 3F/0
 31241 ;;		On exit  : 3F/1
 31242 ;;		Unchanged: 0/0
 31243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 31244 ;;      Params:         0       6       0       0       0       0       0       0       0
 31245 ;;      Locals:         0       0       0       0       0       0       0       0       0
 31246 ;;      Temps:          0       1       0       0       0       0       0       0       0
 31247 ;;      Totals:         0       7       0       0       0       0       0       0       0
 31248 ;;Total ram usage:        7 bytes
 31249 ;; Hardware stack levels used:    1
 31250 ;; Hardware stack levels required when called:   11
 31251 ;; This function calls:
 31252 ;;		_RADIO_RegisterRead
 31253 ;;		_RADIO_RegisterWrite
 31254 ;;		_RADIO_Reset
 31255 ;;		_RADIO_WriteFrequency
 31256 ;;		_RADIO_WriteMode
 31257 ;;		_SwTimerCreate
 31258 ;;		_SwTimerSetCallback
 31259 ;;		_SwTimerStop
 31260 ;; This function is called by:
 31261 ;;		_LORAWAN_Init
 31262 ;;		_LORAWAN_Reset
 31263 ;; This function uses a non-reentrant model
 31264 ;;
 31265                           
 31266                           	psect	text160
 31267  002326                     __ptext160:
 31268                           	opt stack 0
 31269  002326                     _RADIO_Init:
 31270                           	opt stack 18
 31271                           
 31272                           ; BSR set to: 0
 31273                           ;radio_driver_SX1276.c: 424: RadioConfiguration.frequency = frequency;
 31274                           
 31275                           ;incstack = 0
 31276  002326  C07B  F17F         	movff	RADIO_Init@frequency,_RadioConfiguration
 31277  00232A  C07C  F180         	movff	RADIO_Init@frequency+1,_RadioConfiguration+1
 31278  00232E  C07D  F181         	movff	RADIO_Init@frequency+2,_RadioConfiguration+2
 31279  002332  C07E  F182         	movff	RADIO_Init@frequency+3,_RadioConfiguration+3
 31280                           
 31281                           ; BSR set to: 0
 31282                           ;radio_driver_SX1276.c: 425: RadioConfiguration.frequencyDeviation = 25000;
 31283  002336  0EA8               	movlw	168
 31284  002338  0101               	movlb	1	; () banked
 31285  00233A  6F83               	movwf	(_RadioConfiguration+4)& (0+255),b
 31286  00233C  0E61               	movlw	97
 31287  00233E  6F84               	movwf	(_RadioConfiguration+5)& (0+255),b
 31288  002340  6B85               	clrf	(_RadioConfiguration+6)& (0+255),b
 31289  002342  6B86               	clrf	(_RadioConfiguration+7)& (0+255),b
 31290                           
 31291                           ;radio_driver_SX1276.c: 426: RadioConfiguration.bitRate = 50000;
 31292  002344  0E50               	movlw	80
 31293  002346  6F87               	movwf	(_RadioConfiguration+8)& (0+255),b
 31294  002348  0EC3               	movlw	195
 31295  00234A  6F88               	movwf	(_RadioConfiguration+9)& (0+255),b
 31296  00234C  6B89               	clrf	(_RadioConfiguration+10)& (0+255),b
 31297  00234E  6B8A               	clrf	(_RadioConfiguration+11)& (0+255),b
 31298                           
 31299                           ;radio_driver_SX1276.c: 427: RadioConfiguration.modulation = MODULATION_LORA;
 31300  002350  0E01               	movlw	1
 31301  002352  6F97               	movwf	(_RadioConfiguration+24)& (0+255),b
 31302                           
 31303                           ;radio_driver_SX1276.c: 428: RadioConfiguration.bandWidth = BW_125KHZ;
 31304  002354  0E07               	movlw	7
 31305  002356  6F99               	movwf	(_RadioConfiguration+26)& (0+255),b
 31306                           
 31307                           ;radio_driver_SX1276.c: 429: RadioConfiguration.outputPower = 1;
 31308  002358  0E01               	movlw	1
 31309  00235A  6F9A               	movwf	(_RadioConfiguration+27)& (0+255),b
 31310                           
 31311                           ;radio_driver_SX1276.c: 430: RadioConfiguration.errorCodingRate = CR_4_5;
 31312  00235C  6FA0               	movwf	(_RadioConfiguration+33)& (0+255),b
 31313                           
 31314                           ; BSR set to: 1
 31315                           ;radio_driver_SX1276.c: 431: RadioConfiguration.implicitHeaderMode = 0;
 31316  00235E  6BA1               	clrf	(_RadioConfiguration+34)& (0+255),b
 31317                           
 31318                           ;radio_driver_SX1276.c: 432: RadioConfiguration.preambleLen = 8;
 31319  002360  6B8C               	clrf	(_RadioConfiguration+13)& (0+255),b
 31320  002362  0E08               	movlw	8
 31321  002364  6F8B               	movwf	(_RadioConfiguration+12)& (0+255),b
 31322                           
 31323                           ;radio_driver_SX1276.c: 433: RadioConfiguration.dataRate = SF_12;
 31324  002366  0E0C               	movlw	12
 31325  002368  6F98               	movwf	(_RadioConfiguration+25)& (0+255),b
 31326                           
 31327                           ;radio_driver_SX1276.c: 434: RadioConfiguration.crcOn = 1;
 31328  00236A  0E01               	movlw	1
 31329  00236C  6F9B               	movwf	(_RadioConfiguration+28)& (0+255),b
 31330                           
 31331                           ; BSR set to: 1
 31332                           ;radio_driver_SX1276.c: 435: RadioConfiguration.paBoost = 0;
 31333  00236E  6B9C               	clrf	(_RadioConfiguration+29)& (0+255),b
 31334                           
 31335                           ; BSR set to: 1
 31336                           ;radio_driver_SX1276.c: 436: RadioConfiguration.iqInverted = 0;
 31337  002370  6B9F               	clrf	(_RadioConfiguration+32)& (0+255),b
 31338                           
 31339                           ;radio_driver_SX1276.c: 437: RadioConfiguration.syncWord[0] = 0xC1;
 31340  002372  0EC1               	movlw	193
 31341  002374  6F8E               	movwf	(_RadioConfiguration+15)& (0+255),b
 31342                           
 31343                           ;radio_driver_SX1276.c: 438: RadioConfiguration.syncWord[1] = 0x94;
 31344  002376  0E94               	movlw	148
 31345  002378  6F8F               	movwf	(_RadioConfiguration+16)& (0+255),b
 31346                           
 31347                           ;radio_driver_SX1276.c: 439: RadioConfiguration.syncWord[2] = 0xC1;
 31348  00237A  0EC1               	movlw	193
 31349  00237C  6F90               	movwf	(_RadioConfiguration+17)& (0+255),b
 31350                           
 31351                           ;radio_driver_SX1276.c: 440: RadioConfiguration.syncWordLen = 3;
 31352  00237E  0E03               	movlw	3
 31353  002380  6F96               	movwf	(_RadioConfiguration+23)& (0+255),b
 31354                           
 31355                           ;radio_driver_SX1276.c: 441: RadioConfiguration.syncWordLoRa = 0x34;
 31356  002382  0E34               	movlw	52
 31357  002384  6F8D               	movwf	(_RadioConfiguration+14)& (0+255),b
 31358                           
 31359                           ; BSR set to: 1
 31360                           ;radio_driver_SX1276.c: 442: RadioConfiguration.flags = 0;
 31361  002386  6BA2               	clrf	(_RadioConfiguration+35)& (0+255),b
 31362                           
 31363                           ; BSR set to: 1
 31364                           ;radio_driver_SX1276.c: 443: RadioConfiguration.dataBufferLen = 0;
 31365  002388  6BA3               	clrf	(_RadioConfiguration+36)& (0+255),b
 31366                           
 31367                           ; BSR set to: 1
 31368                           ;radio_driver_SX1276.c: 444: RadioConfiguration.dataBuffer = radioBuffer;
 31369  00238A  C079  F1A4         	movff	RADIO_Init@radioBuffer,_RadioConfiguration+37
 31370  00238E  C07A  F1A5         	movff	RADIO_Init@radioBuffer+1,_RadioConfiguration+38
 31371                           
 31372                           ; BSR set to: 1
 31373                           ;radio_driver_SX1276.c: 445: RadioConfiguration.frequencyHopPeriod = 0;
 31374  002392  6B9D               	clrf	(_RadioConfiguration+30)& (0+255),b
 31375  002394  6B9E               	clrf	(_RadioConfiguration+31)& (0+255),b
 31376                           
 31377                           ; BSR set to: 1
 31378                           ;radio_driver_SX1276.c: 446: RadioConfiguration.packetSNR = -128;
 31379  002396  0E80               	movlw	128
 31380  002398  6FB1               	movwf	(_RadioConfiguration+50)& (0+255),b
 31381                           
 31382                           ; BSR set to: 1
 31383                           ;radio_driver_SX1276.c: 447: RadioConfiguration.watchdogTimerTimeout = ((uint32_t)15000)
      +                          ;
 31384  00239A  0E98               	movlw	152
 31385  00239C  6FA9               	movwf	(_RadioConfiguration+42)& (0+255),b
 31386  00239E  0E3A               	movlw	58
 31387  0023A0  6FAA               	movwf	(_RadioConfiguration+43)& (0+255),b
 31388  0023A2  6BAB               	clrf	(_RadioConfiguration+44)& (0+255),b
 31389  0023A4  6BAC               	clrf	(_RadioConfiguration+45)& (0+255),b
 31390                           
 31391                           ; BSR set to: 1
 31392                           ;radio_driver_SX1276.c: 448: RadioConfiguration.fskDataShaping = FSK_SHAPING_GAUSS_BT_0_
      +                          5;
 31393  0023A6  0E02               	movlw	2
 31394  0023A8  6FB2               	movwf	(_RadioConfiguration+51)& (0+255),b
 31395                           
 31396                           ; BSR set to: 1
 31397                           ;radio_driver_SX1276.c: 449: RadioConfiguration.rxBw = FSKBW_50_0KHZ;
 31398  0023AA  0E0B               	movlw	11
 31399  0023AC  6FB3               	movwf	(_RadioConfiguration+52)& (0+255),b
 31400                           
 31401                           ; BSR set to: 1
 31402                           ;radio_driver_SX1276.c: 450: RadioConfiguration.afcBw = FSKBW_83_3KHZ;
 31403  0023AE  0E12               	movlw	18
 31404  0023B0  6FB4               	movwf	(_RadioConfiguration+53)& (0+255),b
 31405                           
 31406                           ; BSR set to: 1
 31407                           ;radio_driver_SX1276.c: 451: RadioConfiguration.fhssNextFrequency = (0);
 31408  0023B2  6BAE               	clrf	(_RadioConfiguration+47)& (0+255),b
 31409  0023B4  6BAF               	clrf	(_RadioConfiguration+48)& (0+255),b
 31410                           
 31411                           ; BSR set to: 1
 31412                           ;radio_driver_SX1276.c: 456: if (0 == RadioConfiguration.initialized)
 31413  0023B6  51AD               	movf	(_RadioConfiguration+46)& (0+255),w,b
 31414  0023B8  E123               	bnz	l14922
 31415                           
 31416                           ; BSR set to: 1
 31417                           ;radio_driver_SX1276.c: 457: {
 31418                           ;radio_driver_SX1276.c: 460: RadioConfiguration.timeOnAirTimerId = SwTimerCreate();
 31419  0023BA  EC7E  F02B         	call	_SwTimerCreate	;wreg free
 31420  0023BE  0101               	movlb	1	; () banked
 31421  0023C0  6FA6               	movwf	(_RadioConfiguration+39)& (0+255),b
 31422                           
 31423                           ;radio_driver_SX1276.c: 461: RadioConfiguration.fskRxWindowTimerId = SwTimerCreate();
 31424  0023C2  EC7E  F02B         	call	_SwTimerCreate	;wreg free
 31425  0023C6  0101               	movlb	1	; () banked
 31426  0023C8  6FA7               	movwf	(_RadioConfiguration+40)& (0+255),b
 31427                           
 31428                           ;radio_driver_SX1276.c: 462: RadioConfiguration.watchdogTimerId = SwTimerCreate();
 31429  0023CA  EC7E  F02B         	call	_SwTimerCreate	;wreg free
 31430  0023CE  0101               	movlb	1	; () banked
 31431  0023D0  6FA8               	movwf	(_RadioConfiguration+41)& (0+255),b
 31432                           
 31433                           ;radio_driver_SX1276.c: 463: SwTimerSetCallback(RadioConfiguration.fskRxWindowTimerId, R
      +                          ADIO_RxFSKTimeout, 0);
 31434  0023D2  0E64               	movlw	low _RADIO_RxFSKTimeout
 31435  0023D4  0100               	movlb	0	; () banked
 31436  0023D6  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 31437  0023D8  0E59               	movlw	high _RADIO_RxFSKTimeout
 31438  0023DA  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 31439  0023DC  6B62               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 31440  0023DE  0101               	movlb	1	; () banked
 31441  0023E0  51A7               	movf	(_RadioConfiguration+40)& (0+255),w,b
 31442  0023E2  ECAE  F02D         	call	_SwTimerSetCallback
 31443                           
 31444                           ;radio_driver_SX1276.c: 464: SwTimerSetCallback(RadioConfiguration.watchdogTimerId, RADI
      +                          O_WatchdogTimeout, 0);
 31445  0023E6  0E5A               	movlw	low _RADIO_WatchdogTimeout
 31446  0023E8  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 31447  0023EA  0E58               	movlw	high _RADIO_WatchdogTimeout
 31448  0023EC  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 31449  0023EE  6B62               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 31450  0023F0  0101               	movlb	1	; () banked
 31451  0023F2  51A8               	movf	(_RadioConfiguration+41)& (0+255),w,b
 31452  0023F4  ECAE  F02D         	call	_SwTimerSetCallback
 31453                           
 31454                           ; BSR set to: 0
 31455                           ;radio_driver_SX1276.c: 465: RadioConfiguration.initialized = 1;
 31456  0023F8  0E01               	movlw	1
 31457  0023FA  0101               	movlb	1	; () banked
 31458  0023FC  6FAD               	movwf	(_RadioConfiguration+46)& (0+255),b
 31459                           
 31460                           ;radio_driver_SX1276.c: 466: }
 31461  0023FE  D00B               	goto	l14924
 31462  002400                     l14922:
 31463                           
 31464                           ; BSR set to: 1
 31465                           ;radio_driver_SX1276.c: 467: else
 31466                           ;radio_driver_SX1276.c: 468: {
 31467                           ;radio_driver_SX1276.c: 469: SwTimerStop(RadioConfiguration.timeOnAirTimerId);
 31468  002400  51A6               	movf	(_RadioConfiguration+39)& (0+255),w,b
 31469  002402  EC65  F030         	call	_SwTimerStop
 31470                           
 31471                           ;radio_driver_SX1276.c: 470: SwTimerStop(RadioConfiguration.fskRxWindowTimerId);
 31472  002406  0101               	movlb	1	; () banked
 31473  002408  51A7               	movf	(_RadioConfiguration+40)& (0+255),w,b
 31474  00240A  EC65  F030         	call	_SwTimerStop
 31475                           
 31476                           ;radio_driver_SX1276.c: 471: SwTimerStop(RadioConfiguration.watchdogTimerId);
 31477  00240E  0101               	movlb	1	; () banked
 31478  002410  51A8               	movf	(_RadioConfiguration+41)& (0+255),w,b
 31479  002412  EC65  F030         	call	_SwTimerStop
 31480  002416                     l14924:
 31481                           
 31482                           ;radio_driver_SX1276.c: 472: }
 31483                           ;radio_driver_SX1276.c: 474: RADIO_Reset();
 31484  002416  EC3F  F02D         	call	_RADIO_Reset	;wreg free
 31485                           
 31486                           ;radio_driver_SX1276.c: 479: RADIO_WriteMode(MODE_STANDBY, MODULATION_FSK, 1);
 31487  00241A  0E00               	movlw	0
 31488  00241C  0100               	movlb	0	; () banked
 31489  00241E  6F65               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 31490  002420  0E01               	movlw	1
 31491  002422  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 31492  002424  ECDB  F01A         	call	_RADIO_WriteMode
 31493                           
 31494                           ;radio_driver_SX1276.c: 482: RADIO_WriteFrequency(RadioConfiguration.frequency);
 31495  002428  D841               	call	PL224	;call to abstracted procedure
 31496  00242A  ECB4  F01B         	call	_RADIO_WriteFrequency	;wreg free
 31497                           
 31498                           ;radio_driver_SX1276.c: 486: RADIO_RegisterWrite(0x3B, 0x42);
 31499  00242E  0E42               	movlw	66
 31500  002430  ECC2  F008         	call	PL432	;call to abstracted procedure
 31501  002434  EC2E  F02F         	call	_RADIO_RegisterWrite
 31502  002438                     l14932:
 31503  002438  0E3B               	movlw	59
 31504  00243A  EC64  F02E         	call	_RADIO_RegisterRead
 31505  00243E  6F7F               	movwf	??_RADIO_Init& (0+255),b
 31506  002440  BB7F               	btfsc	??_RADIO_Init& (0+255),5,b
 31507  002442  D7FA               	goto	l14932
 31508                           
 31509                           ; BSR set to: 0
 31510                           ;radio_driver_SX1276.c: 493: RADIO_RegisterWrite(0x0C, 0x23);
 31511  002444  0E23               	movlw	35
 31512  002446  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 31513  002448  0E0C               	movlw	12
 31514  00244A  EC2E  F02F         	call	_RADIO_RegisterWrite
 31515                           
 31516                           ;radio_driver_SX1276.c: 496: RADIO_RegisterWrite(0x0D, 0x1E);
 31517  00244E  0E1E               	movlw	30
 31518  002450  0100               	movlb	0	; () banked
 31519  002452  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 31520  002454  0E0D               	movlw	13
 31521  002456  EC2E  F02F         	call	_RADIO_RegisterWrite
 31522                           
 31523                           ;radio_driver_SX1276.c: 500: RADIO_RegisterWrite(0x1F, 0xAA);
 31524  00245A  0EAA               	movlw	170
 31525  00245C  0100               	movlb	0	; () banked
 31526  00245E  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 31527  002460  0E1F               	movlw	31
 31528  002462  EC2E  F02F         	call	_RADIO_RegisterWrite
 31529                           
 31530                           ;radio_driver_SX1276.c: 504: RADIO_RegisterWrite(0x35, 0x8F);
 31531  002466  0E8F               	movlw	143
 31532  002468  0100               	movlb	0	; () banked
 31533  00246A  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 31534  00246C  0E35               	movlw	53
 31535  00246E  EC2E  F02F         	call	_RADIO_RegisterWrite
 31536                           
 31537                           ;radio_driver_SX1276.c: 507: RADIO_RegisterWrite(0x32, 0xFF);
 31538  002472  0100               	movlb	0	; () banked
 31539  002474  6962               	setf	RADIO_RegisterWrite@value& (0+255),b
 31540  002476  0E32               	movlw	50
 31541  002478  EC2E  F02F         	call	_RADIO_RegisterWrite
 31542                           
 31543                           ;radio_driver_SX1276.c: 510: RADIO_RegisterWrite(0x31, 1 << (6));
 31544  00247C  0E40               	movlw	64
 31545  00247E  0100               	movlb	0	; () banked
 31546  002480  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 31547  002482  0E31               	movlw	49
 31548  002484  EC2E  F02F         	call	_RADIO_RegisterWrite
 31549                           
 31550                           ;radio_driver_SX1276.c: 513: RADIO_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
 31551  002488  0E01               	movlw	1
 31552  00248A  0100               	movlb	0	; () banked
 31553  00248C  6F65               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 31554  00248E  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 31555  002490  0E00               	movlw	0
 31556  002492  ECDB  F01A         	call	_RADIO_WriteMode
 31557                           
 31558                           ;radio_driver_SX1276.c: 517: RADIO_RegisterWrite(0x23, 0xFF);
 31559  002496  0100               	movlb	0	; () banked
 31560  002498  6962               	setf	RADIO_RegisterWrite@value& (0+255),b
 31561  00249A  0E23               	movlw	35
 31562  00249C  EC2E  F02F         	call	_RADIO_RegisterWrite
 31563                           
 31564                           ;radio_driver_SX1276.c: 519: RadioConfiguration.regVersion = RADIO_RegisterRead(0x42);
 31565  0024A0  0E42               	movlw	66
 31566  0024A2  EC64  F02E         	call	_RADIO_RegisterRead
 31567  0024A6  0101               	movlb	1	; () banked
 31568  0024A8  6FB0               	movwf	(_RadioConfiguration+49)& (0+255),b
 31569                           
 31570                           ; BSR set to: 1
 31571  0024AA  0012               	return		;funcret
 31572  0024AC                     __end_of_RADIO_Init:
 31573                           	opt stack 0
 31574  0024AC                     PL224:
 31575                           	opt stack 16
 31576  0024AC  C17F  F06D         	movff	_RadioConfiguration,RADIO_WriteFrequency@frequency
 31577  0024B0  C180  F06E         	movff	_RadioConfiguration+1,RADIO_WriteFrequency@frequency+1
 31578  0024B4  C181  F06F         	movff	_RadioConfiguration+2,RADIO_WriteFrequency@frequency+2
 31579  0024B8  C182  F070         	movff	_RadioConfiguration+3,RADIO_WriteFrequency@frequency+3
 31580  0024BC  0012               	return	
 31581  0024BE                     __end_ofPL224:
 31582                           	opt stack 0
 31583                           tosu	equ	0xFFF
 31584                           tosh	equ	0xFFE
 31585                           tosl	equ	0xFFD
 31586                           pclath	equ	0xFFA
 31587                           tblptru	equ	0xFF8
 31588                           tblptrh	equ	0xFF7
 31589                           tblptrl	equ	0xFF6
 31590                           tablat	equ	0xFF5
 31591                           prodh	equ	0xFF4
 31592                           prodl	equ	0xFF3
 31593                           intcon	equ	0xFF2
 31594                           indf0	equ	0xFEF
 31595                           postinc0	equ	0xFEE
 31596                           plusw0	equ	0xFEB
 31597                           fsr0h	equ	0xFEA
 31598                           fsr0l	equ	0xFE9
 31599                           wreg	equ	0xFE8
 31600                           postinc1	equ	0xFE6
 31601                           postdec1	equ	0xFE5
 31602                           plusw1	equ	0xFE3
 31603                           fsr1h	equ	0xFE2
 31604                           fsr1l	equ	0xFE1
 31605                           indf2	equ	0xFDF
 31606                           postinc2	equ	0xFDE
 31607                           postdec2	equ	0xFDD
 31608                           plusw2	equ	0xFDB
 31609                           fsr2h	equ	0xFDA
 31610                           fsr2l	equ	0xFD9
 31611                           status	equ	0xFD8
 31612                           
 31613 ;; *************** function _SwTimerSetCallback *****************
 31614 ;; Defined at:
 31615 ;;		line 180 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 31616 ;; Parameters:    Size  Location     Type
 31617 ;;  timerId         1    wreg     unsigned char 
 31618 ;;  callback        2    0[BANK0 ] PTR FTN(unsigned char ,)
 31619 ;;		 -> RADIO_WatchdogTimeout(1), RADIO_RxFSKTimeout(1), DutyCycleCallback(1), UpdateJoinSuccessState(1), 
 31620 ;;		 -> AutomaticReplyCallback(1), UnconfirmedTransmissionCallback(1), AckRetransmissionCallback(1), LORAWAN_LinkCheckCa
      +llback(1), 
 31621 ;;		 -> LORAWAN_ReceiveWindow2Callback(1), LORAWAN_ReceiveWindow1Callback(1), 
 31622 ;;  callbackPara    1    2[BANK0 ] unsigned char 
 31623 ;; Auto vars:     Size  Location     Type
 31624 ;;  timerId         1    3[BANK0 ] unsigned char 
 31625 ;; Return value:  Size  Location     Type
 31626 ;;                  1    wreg      void 
 31627 ;; Registers used:
 31628 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 31629 ;; Tracked objects:
 31630 ;;		On entry : 3C/2
 31631 ;;		On exit  : 3F/0
 31632 ;;		Unchanged: 0/0
 31633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 31634 ;;      Params:         0       3       0       0       0       0       0       0       0
 31635 ;;      Locals:         0       1       0       0       0       0       0       0       0
 31636 ;;      Temps:          0       0       0       0       0       0       0       0       0
 31637 ;;      Totals:         0       4       0       0       0       0       0       0       0
 31638 ;;Total ram usage:        4 bytes
 31639 ;; Hardware stack levels used:    1
 31640 ;; Hardware stack levels required when called:    7
 31641 ;; This function calls:
 31642 ;;		Nothing
 31643 ;; This function is called by:
 31644 ;;		_SetCallbackSoftwareTimers
 31645 ;;		_RADIO_Init
 31646 ;; This function uses a non-reentrant model
 31647 ;;
 31648                           
 31649                           	psect	text161
 31650  005B5C                     __ptext161:
 31651                           	opt stack 0
 31652  005B5C                     _SwTimerSetCallback:
 31653                           	opt stack 21
 31654                           
 31655                           ; BSR set to: 1
 31656                           ;incstack = 0
 31657                           ;SwTimerSetCallback@timerId stored from wreg
 31658  005B5C  0100               	movlb	0	; () banked
 31659  005B5E  6F63               	movwf	SwTimerSetCallback@timerId& (0+255),b
 31660                           
 31661                           ;sw_timer.c: 182: swTimers[timerId].callback = callback;
 31662  005B60  5163               	movf	SwTimerSetCallback@timerId& (0+255),w,b
 31663  005B62  ECE3  F023         	call	PL94	;call to abstracted procedure
 31664  005B66  C060  FFDE         	movff	SwTimerSetCallback@callback,postinc2	;volatile
 31665  005B6A  C061  FFDD         	movff	SwTimerSetCallback@callback+1,postdec2	;volatile
 31666                           
 31667                           ;sw_timer.c: 183: swTimers[timerId].callbackParameter = callbackParameter;
 31668  005B6E  5163               	movf	SwTimerSetCallback@timerId& (0+255),w,b
 31669  005B70  D803               	call	PL158	;call to abstracted procedure
 31670  005B72  C062  FFDF         	movff	SwTimerSetCallback@callbackParameter,indf2
 31671                           
 31672                           ; BSR set to: 0
 31673  005B76  0012               	return		;funcret
 31674  005B78                     __end_of_SwTimerSetCallback:
 31675                           	opt stack 0
 31676  005B78                     PL158:
 31677                           	opt stack 12
 31678  005B78  0D08               	mullw	8
 31679  005B7A  0E05               	movlw	low (_swTimers+5)
 31680  005B7C  24F3               	addwf	prodl,w,c
 31681  005B7E  6ED9               	movwf	fsr2l,c
 31682  005B80  0E03               	movlw	high (_swTimers+5)
 31683  005B82  20F4               	addwfc	prodh,w,c
 31684  005B84  6EDA               	movwf	fsr2h,c
 31685  005B86  0012               	return	
 31686  005B88                     __end_ofPL158:
 31687                           	opt stack 0
 31688                           tosu	equ	0xFFF
 31689                           tosh	equ	0xFFE
 31690                           tosl	equ	0xFFD
 31691                           pclath	equ	0xFFA
 31692                           tblptru	equ	0xFF8
 31693                           tblptrh	equ	0xFF7
 31694                           tblptrl	equ	0xFF6
 31695                           tablat	equ	0xFF5
 31696                           prodh	equ	0xFF4
 31697                           prodl	equ	0xFF3
 31698                           intcon	equ	0xFF2
 31699                           indf0	equ	0xFEF
 31700                           postinc0	equ	0xFEE
 31701                           plusw0	equ	0xFEB
 31702                           fsr0h	equ	0xFEA
 31703                           fsr0l	equ	0xFE9
 31704                           wreg	equ	0xFE8
 31705                           postinc1	equ	0xFE6
 31706                           postdec1	equ	0xFE5
 31707                           plusw1	equ	0xFE3
 31708                           fsr1h	equ	0xFE2
 31709                           fsr1l	equ	0xFE1
 31710                           indf2	equ	0xFDF
 31711                           postinc2	equ	0xFDE
 31712                           postdec2	equ	0xFDD
 31713                           plusw2	equ	0xFDB
 31714                           fsr2h	equ	0xFDA
 31715                           fsr2l	equ	0xFD9
 31716                           status	equ	0xFD8
 31717                           
 31718 ;; *************** function _RADIO_WriteMode *****************
 31719 ;; Defined at:
 31720 ;;		line 147 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 31721 ;; Parameters:    Size  Location     Type
 31722 ;;  newMode         1    wreg     enum E17880
 31723 ;;  newModulatio    1    5[BANK0 ] enum E17148
 31724 ;;  blocking        1    6[BANK0 ] unsigned char 
 31725 ;; Auto vars:     Size  Location     Type
 31726 ;;  newMode         1   10[BANK0 ] enum E17880
 31727 ;;  opMode          1   11[BANK0 ] unsigned char 
 31728 ;;  currentMode     1    9[BANK0 ] enum E17880
 31729 ;;  dioMapping      1    8[BANK0 ] unsigned char 
 31730 ;;  currentModul    1    7[BANK0 ] enum E17148
 31731 ;; Return value:  Size  Location     Type
 31732 ;;                  1    wreg      void 
 31733 ;; Registers used:
 31734 ;;		wreg, status,2, status,0, cstack
 31735 ;; Tracked objects:
 31736 ;;		On entry : 3F/0
 31737 ;;		On exit  : 0/0
 31738 ;;		Unchanged: 0/0
 31739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 31740 ;;      Params:         0       2       0       0       0       0       0       0       0
 31741 ;;      Locals:         0       5       0       0       0       0       0       0       0
 31742 ;;      Temps:          0       0       0       0       0       0       0       0       0
 31743 ;;      Totals:         0       7       0       0       0       0       0       0       0
 31744 ;;Total ram usage:        7 bytes
 31745 ;; Hardware stack levels used:    1
 31746 ;; Hardware stack levels required when called:   10
 31747 ;; This function calls:
 31748 ;;		_HALDIO5PinValue
 31749 ;;		_RADIO_RegisterRead
 31750 ;;		_RADIO_RegisterWrite
 31751 ;;		_SystemBlockingWaitMs
 31752 ;; This function is called by:
 31753 ;;		_RADIO_Init
 31754 ;;		_RADIO_WriteConfiguration
 31755 ;;		_RADIO_Transmit
 31756 ;;		_RADIO_ReceiveStart
 31757 ;;		_RADIO_ReceiveStop
 31758 ;;		_RADIO_RxDone
 31759 ;;		_RADIO_FSKPayloadReady
 31760 ;;		_RADIO_RxTimeout
 31761 ;;		_RADIO_TxDone
 31762 ;;		_RADIO_FSKPacketSent
 31763 ;;		_RADIO_ReadRandom
 31764 ;;		_RADIO_RxFSKTimeout
 31765 ;;		_RADIO_WatchdogTimeout
 31766 ;; This function uses a non-reentrant model
 31767 ;;
 31768                           
 31769                           	psect	text162
 31770  0035B6                     __ptext162:
 31771                           	opt stack 0
 31772  0035B6                     _RADIO_WriteMode:
 31773                           	opt stack 17
 31774                           
 31775                           ; BSR set to: 0
 31776                           ;incstack = 0
 31777                           ;RADIO_WriteMode@newMode stored from wreg
 31778  0035B6  6F6A               	movwf	RADIO_WriteMode@newMode& (0+255),b
 31779                           
 31780                           ;radio_driver_SX1276.c: 149: uint8_t opMode;
 31781                           ;radio_driver_SX1276.c: 150: uint8_t dioMapping;
 31782                           ;radio_driver_SX1276.c: 151: RadioModulation_t currentModulation;
 31783                           ;radio_driver_SX1276.c: 152: RadioMode_t currentMode;
 31784                           ;radio_driver_SX1276.c: 154: if ((MODULATION_FSK == newModulation) &&
 31785                           ;radio_driver_SX1276.c: 155: ((MODE_RXSINGLE == newMode) || (MODE_CAD == newMode)))
 31786  0035B8  0100               	movlb	0	; () banked
 31787  0035BA  5165               	movf	RADIO_WriteMode@newModulation& (0+255),w,b
 31788  0035BC  E108               	bnz	l12192
 31789                           
 31790                           ; BSR set to: 0
 31791  0035BE  0E06               	movlw	6
 31792  0035C0  196A               	xorwf	RADIO_WriteMode@newMode& (0+255),w,b
 31793  0035C2  B4D8               	btfsc	status,2,c
 31794  0035C4  0012               	return	
 31795                           
 31796                           ; BSR set to: 0
 31797  0035C6  0E07               	movlw	7
 31798  0035C8  196A               	xorwf	RADIO_WriteMode@newMode& (0+255),w,b
 31799  0035CA  E101               	bnz	l12192
 31800  0035CC  0012               	return	
 31801  0035CE                     l12192:
 31802                           
 31803                           ; BSR set to: 0
 31804                           ;radio_driver_SX1276.c: 159: }
 31805                           ;radio_driver_SX1276.c: 162: newMode &= 0x07;
 31806  0035CE  0E07               	movlw	7
 31807  0035D0  176A               	andwf	RADIO_WriteMode@newMode& (0+255),f,b
 31808                           
 31809                           ;radio_driver_SX1276.c: 163: newModulation &= 0x01;
 31810  0035D2  0E01               	movlw	1
 31811  0035D4  1765               	andwf	RADIO_WriteMode@newModulation& (0+255),f,b
 31812                           
 31813                           ; BSR set to: 0
 31814                           ;radio_driver_SX1276.c: 165: opMode = RADIO_RegisterRead(0x01);
 31815  0035D6  EC64  F02E         	call	_RADIO_RegisterRead
 31816  0035DA  6F6B               	movwf	RADIO_WriteMode@opMode& (0+255),b
 31817                           
 31818                           ; BSR set to: 0
 31819                           ;radio_driver_SX1276.c: 167: if ((opMode & 0x80) != 0)
 31820  0035DC  AF6B               	btfss	RADIO_WriteMode@opMode& (0+255),7,b
 31821  0035DE  D003               	goto	l2094
 31822                           
 31823                           ; BSR set to: 0
 31824                           ;radio_driver_SX1276.c: 168: {
 31825                           ;radio_driver_SX1276.c: 169: currentModulation = MODULATION_LORA;
 31826  0035E0  0E01               	movlw	1
 31827  0035E2  6F67               	movwf	RADIO_WriteMode@currentModulation& (0+255),b
 31828                           
 31829                           ;radio_driver_SX1276.c: 170: }
 31830  0035E4  D001               	goto	l12200
 31831  0035E6                     l2094:
 31832                           
 31833                           ; BSR set to: 0
 31834                           ;radio_driver_SX1276.c: 171: else
 31835                           ;radio_driver_SX1276.c: 172: {
 31836                           ;radio_driver_SX1276.c: 173: currentModulation = MODULATION_FSK;
 31837  0035E6  6B67               	clrf	RADIO_WriteMode@currentModulation& (0+255),b
 31838  0035E8                     l12200:
 31839                           
 31840                           ; BSR set to: 0
 31841                           ;radio_driver_SX1276.c: 174: }
 31842                           ;radio_driver_SX1276.c: 176: currentMode = opMode & 0x07;
 31843  0035E8  516B               	movf	RADIO_WriteMode@opMode& (0+255),w,b
 31844  0035EA  0B07               	andlw	7
 31845  0035EC  6F69               	movwf	RADIO_WriteMode@currentMode& (0+255),b
 31846                           
 31847                           ;radio_driver_SX1276.c: 180: if (newModulation != currentModulation)
 31848  0035EE  5167               	movf	RADIO_WriteMode@currentModulation& (0+255),w,b
 31849  0035F0  1965               	xorwf	RADIO_WriteMode@newModulation& (0+255),w,b
 31850  0035F2  E016               	bz	l12216
 31851                           
 31852                           ; BSR set to: 0
 31853                           ;radio_driver_SX1276.c: 181: {
 31854                           ;radio_driver_SX1276.c: 183: if (MODE_SLEEP != currentMode)
 31855  0035F4  5169               	movf	RADIO_WriteMode@currentMode& (0+255),w,b
 31856  0035F6  E008               	bz	l12208
 31857                           
 31858                           ; BSR set to: 0
 31859                           ;radio_driver_SX1276.c: 184: {
 31860                           ;radio_driver_SX1276.c: 186: RADIO_RegisterWrite(0x01, opMode & (~0x07));
 31861  0035F8  516B               	movf	RADIO_WriteMode@opMode& (0+255),w,b
 31862  0035FA  0BF8               	andlw	248
 31863  0035FC  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 31864  0035FE  0E01               	movlw	1
 31865  003600  EC2E  F02F         	call	_RADIO_RegisterWrite
 31866                           
 31867                           ;radio_driver_SX1276.c: 187: currentMode = MODE_SLEEP;
 31868  003604  0100               	movlb	0	; () banked
 31869  003606  6B69               	clrf	RADIO_WriteMode@currentMode& (0+255),b
 31870  003608                     l12208:
 31871                           
 31872                           ; BSR set to: 0
 31873                           ;radio_driver_SX1276.c: 188: }
 31874                           ;radio_driver_SX1276.c: 190: if (MODULATION_FSK == newModulation)
 31875  003608  5165               	movf	RADIO_WriteMode@newModulation& (0+255),w,b
 31876  00360A  E103               	bnz	l12212
 31877                           
 31878                           ; BSR set to: 0
 31879                           ;radio_driver_SX1276.c: 191: {
 31880                           ;radio_driver_SX1276.c: 193: opMode = opMode & (~0x87);
 31881  00360C  0E78               	movlw	120
 31882  00360E  176B               	andwf	RADIO_WriteMode@opMode& (0+255),f,b
 31883                           
 31884                           ;radio_driver_SX1276.c: 194: }
 31885  003610  D004               	goto	l12214
 31886  003612                     l12212:
 31887                           
 31888                           ; BSR set to: 0
 31889                           ;radio_driver_SX1276.c: 195: else
 31890                           ;radio_driver_SX1276.c: 196: {
 31891                           ;radio_driver_SX1276.c: 198: opMode = 0x80 | (opMode & (~0x87));
 31892  003612  516B               	movf	RADIO_WriteMode@opMode& (0+255),w,b
 31893  003614  0B78               	andlw	120
 31894  003616  0980               	iorlw	128
 31895  003618  6F6B               	movwf	RADIO_WriteMode@opMode& (0+255),b
 31896  00361A                     l12214:
 31897                           
 31898                           ; BSR set to: 0
 31899                           ;radio_driver_SX1276.c: 199: }
 31900                           ;radio_driver_SX1276.c: 200: RADIO_RegisterWrite(0x01, opMode);
 31901  00361A  D837               	call	PL458	;call to abstracted procedure
 31902  00361C  EC2E  F02F         	call	_RADIO_RegisterWrite
 31903  003620                     l12216:
 31904                           
 31905                           ;radio_driver_SX1276.c: 201: }
 31906                           ;radio_driver_SX1276.c: 207: if (newMode != currentMode)
 31907  003620  0100               	movlb	0	; () banked
 31908  003622  5169               	movf	RADIO_WriteMode@currentMode& (0+255),w,b
 31909  003624  196A               	xorwf	RADIO_WriteMode@newMode& (0+255),w,b
 31910  003626  B4D8               	btfsc	status,2,c
 31911  003628  0012               	return	
 31912                           
 31913                           ; BSR set to: 0
 31914                           ;radio_driver_SX1276.c: 208: {
 31915                           ;radio_driver_SX1276.c: 211: if ((MODE_SLEEP != newMode) && (1 == blocking))
 31916  00362A  516A               	movf	RADIO_WriteMode@newMode& (0+255),w,b
 31917  00362C  E012               	bz	l12232
 31918                           
 31919                           ; BSR set to: 0
 31920  00362E  0566               	decf	RADIO_WriteMode@blocking& (0+255),w,b
 31921  003630  E110               	bnz	l12232
 31922                           
 31923                           ; BSR set to: 0
 31924                           ;radio_driver_SX1276.c: 212: {
 31925                           ;radio_driver_SX1276.c: 213: dioMapping = RADIO_RegisterRead(0x41);
 31926  003632  0E41               	movlw	65
 31927  003634  EC64  F02E         	call	_RADIO_RegisterRead
 31928  003638  6F68               	movwf	RADIO_WriteMode@dioMapping& (0+255),b
 31929                           
 31930                           ; BSR set to: 0
 31931                           ;radio_driver_SX1276.c: 214: if (MODULATION_FSK == newModulation)
 31932  00363A  5165               	movf	RADIO_WriteMode@newModulation& (0+255),w,b
 31933  00363C  E103               	bnz	l12228
 31934                           
 31935                           ; BSR set to: 0
 31936                           ;radio_driver_SX1276.c: 215: {
 31937                           ;radio_driver_SX1276.c: 217: dioMapping |= 0x30;
 31938  00363E  0E30               	movlw	48
 31939  003640  1368               	iorwf	RADIO_WriteMode@dioMapping& (0+255),f,b
 31940                           
 31941                           ;radio_driver_SX1276.c: 218: }
 31942  003642  D002               	goto	l12230
 31943  003644                     l12228:
 31944                           
 31945                           ; BSR set to: 0
 31946                           ;radio_driver_SX1276.c: 219: else
 31947                           ;radio_driver_SX1276.c: 220: {
 31948                           ;radio_driver_SX1276.c: 222: dioMapping &= ~0x30;
 31949  003644  0ECF               	movlw	207
 31950  003646  1768               	andwf	RADIO_WriteMode@dioMapping& (0+255),f,b
 31951  003648                     l12230:
 31952                           
 31953                           ; BSR set to: 0
 31954                           ;radio_driver_SX1276.c: 223: }
 31955                           ;radio_driver_SX1276.c: 224: RADIO_RegisterWrite(0x41, dioMapping);
 31956  003648  C068  F062         	movff	RADIO_WriteMode@dioMapping,RADIO_RegisterWrite@value
 31957  00364C  0E41               	movlw	65
 31958  00364E  EC2E  F02F         	call	_RADIO_RegisterWrite
 31959  003652                     l12232:
 31960                           
 31961                           ;radio_driver_SX1276.c: 225: }
 31962                           ;radio_driver_SX1276.c: 228: opMode &= ~0x07;
 31963  003652  0EF8               	movlw	248
 31964  003654  0100               	movlb	0	; () banked
 31965  003656  176B               	andwf	RADIO_WriteMode@opMode& (0+255),f,b
 31966                           
 31967                           ; BSR set to: 0
 31968                           ;radio_driver_SX1276.c: 229: opMode |= newMode;
 31969  003658  516A               	movf	RADIO_WriteMode@newMode& (0+255),w,b
 31970  00365A  136B               	iorwf	RADIO_WriteMode@opMode& (0+255),f,b
 31971                           
 31972                           ; BSR set to: 0
 31973                           ;radio_driver_SX1276.c: 230: RADIO_RegisterWrite(0x01, opMode);
 31974  00365C  D816               	call	PL458	;call to abstracted procedure
 31975  00365E  EC2E  F02F         	call	_RADIO_RegisterWrite
 31976                           
 31977                           ;radio_driver_SX1276.c: 233: if (1 == blocking)
 31978  003662  0100               	movlb	0	; () banked
 31979  003664  0566               	decf	RADIO_WriteMode@blocking& (0+255),w,b
 31980  003666  A4D8               	btfss	status,2,c
 31981  003668  0012               	return	
 31982                           
 31983                           ; BSR set to: 0
 31984                           ;radio_driver_SX1276.c: 234: {
 31985                           ;radio_driver_SX1276.c: 235: if (MODE_SLEEP != newMode)
 31986  00366A  516A               	movf	RADIO_WriteMode@newMode& (0+255),w,b
 31987  00366C  E005               	bz	l12244
 31988  00366E                     l12242:
 31989  00366E  EC0D  F031         	call	_HALDIO5PinValue	;wreg free
 31990  003672  0900               	iorlw	0
 31991  003674  E0FC               	bz	l12242
 31992  003676  0012               	return	
 31993  003678                     l12244:
 31994                           
 31995                           ; BSR set to: 0
 31996                           ;radio_driver_SX1276.c: 240: else
 31997                           ;radio_driver_SX1276.c: 241: {
 31998                           ;radio_driver_SX1276.c: 242: SystemBlockingWaitMs(1);
 31999  003678  D802               	call	PL228	;call to abstracted procedure
 32000  00367A  EFC4  F02D         	goto	_SystemBlockingWaitMs	;wreg free
 32001  00367E                     __end_of_RADIO_WriteMode:
 32002                           	opt stack 0
 32003  00367E                     PL228:
 32004                           	opt stack 18
 32005  00367E  0E01               	movlw	1
 32006  003680  6F60               	movwf	SystemBlockingWaitMs@ms& (0+255),b
 32007  003682  6B61               	clrf	(SystemBlockingWaitMs@ms+1)& (0+255),b
 32008  003684  6B62               	clrf	(SystemBlockingWaitMs@ms+2)& (0+255),b
 32009  003686  6B63               	clrf	(SystemBlockingWaitMs@ms+3)& (0+255),b
 32010  003688  0C01               	retlw	1
 32011  00368A                     __end_ofPL228:
 32012                           	opt stack 0
 32013  00368A                     PL458:
 32014                           	opt stack 17
 32015  00368A  C06B  F062         	movff	RADIO_WriteMode@opMode,RADIO_RegisterWrite@value
 32016  00368E  0C01               	retlw	1
 32017  003690                     __end_ofPL458:
 32018                           	opt stack 0
 32019                           tosu	equ	0xFFF
 32020                           tosh	equ	0xFFE
 32021                           tosl	equ	0xFFD
 32022                           pclath	equ	0xFFA
 32023                           tblptru	equ	0xFF8
 32024                           tblptrh	equ	0xFF7
 32025                           tblptrl	equ	0xFF6
 32026                           tablat	equ	0xFF5
 32027                           prodh	equ	0xFF4
 32028                           prodl	equ	0xFF3
 32029                           intcon	equ	0xFF2
 32030                           indf0	equ	0xFEF
 32031                           postinc0	equ	0xFEE
 32032                           plusw0	equ	0xFEB
 32033                           fsr0h	equ	0xFEA
 32034                           fsr0l	equ	0xFE9
 32035                           wreg	equ	0xFE8
 32036                           postinc1	equ	0xFE6
 32037                           postdec1	equ	0xFE5
 32038                           plusw1	equ	0xFE3
 32039                           fsr1h	equ	0xFE2
 32040                           fsr1l	equ	0xFE1
 32041                           indf2	equ	0xFDF
 32042                           postinc2	equ	0xFDE
 32043                           postdec2	equ	0xFDD
 32044                           plusw2	equ	0xFDB
 32045                           fsr2h	equ	0xFDA
 32046                           fsr2l	equ	0xFD9
 32047                           status	equ	0xFD8
 32048                           
 32049 ;; *************** function _RADIO_RegisterRead *****************
 32050 ;; Defined at:
 32051 ;;		line 134 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 32052 ;; Parameters:    Size  Location     Type
 32053 ;;  reg             1    wreg     unsigned char 
 32054 ;; Auto vars:     Size  Location     Type
 32055 ;;  reg             1    2[BANK0 ] unsigned char 
 32056 ;;  readValue       1    3[BANK0 ] unsigned char 
 32057 ;; Return value:  Size  Location     Type
 32058 ;;                  1    wreg      unsigned char 
 32059 ;; Registers used:
 32060 ;;		wreg, status,2, status,0, cstack
 32061 ;; Tracked objects:
 32062 ;;		On entry : 0/0
 32063 ;;		On exit  : 3F/0
 32064 ;;		Unchanged: 0/0
 32065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 32066 ;;      Params:         0       0       0       0       0       0       0       0       0
 32067 ;;      Locals:         0       2       0       0       0       0       0       0       0
 32068 ;;      Temps:          0       0       0       0       0       0       0       0       0
 32069 ;;      Totals:         0       2       0       0       0       0       0       0       0
 32070 ;;Total ram usage:        2 bytes
 32071 ;; Hardware stack levels used:    1
 32072 ;; Hardware stack levels required when called:    9
 32073 ;; This function calls:
 32074 ;;		_HALSPICSAssert
 32075 ;;		_HALSPICSDeassert
 32076 ;;		_HALSPISend
 32077 ;; This function is called by:
 32078 ;;		_RADIO_WriteMode
 32079 ;;		_RADIO_WritePower
 32080 ;;		_RADIO_Init
 32081 ;;		_RADIO_WriteConfiguration
 32082 ;;		_RADIO_Transmit
 32083 ;;		_RADIO_RxDone
 32084 ;;		_RADIO_FSKPayloadReady
 32085 ;;		_RADIO_FSKPacketSent
 32086 ;;		_RADIO_FHSSChangeChannel
 32087 ;;		_RADIO_DIO0
 32088 ;;		_RADIO_DIO1
 32089 ;;		_RADIO_DIO2
 32090 ;;		_RADIO_DIO3
 32091 ;;		_RADIO_DIO4
 32092 ;;		_RADIO_DIO5
 32093 ;;		_RADIO_ReadRandom
 32094 ;;		_RADIO_RxFSKTimeout
 32095 ;; This function uses a non-reentrant model
 32096 ;;
 32097                           
 32098                           	psect	text163
 32099  005CC8                     __ptext163:
 32100                           	opt stack 0
 32101  005CC8                     _RADIO_RegisterRead:
 32102                           	opt stack 17
 32103                           
 32104                           ;incstack = 0
 32105                           ;RADIO_RegisterRead@reg stored from wreg
 32106  005CC8  0100               	movlb	0	; () banked
 32107  005CCA  6F62               	movwf	RADIO_RegisterRead@reg& (0+255),b
 32108                           
 32109                           ;radio_driver_SX1276.c: 136: uint8_t readValue;
 32110                           ;radio_driver_SX1276.c: 137: reg &= 0x7F;
 32111  005CCC  9F62               	bcf	RADIO_RegisterRead@reg& (0+255),7,b
 32112                           
 32113                           ; BSR set to: 0
 32114                           ;radio_driver_SX1276.c: 138: HALSPICSAssert();
 32115  005CCE  EC21  F031         	call	_HALSPICSAssert	;wreg free
 32116                           
 32117                           ;radio_driver_SX1276.c: 139: HALSPISend(reg);
 32118  005CD2  0100               	movlb	0	; () banked
 32119  005CD4  5162               	movf	RADIO_RegisterRead@reg& (0+255),w,b
 32120  005CD6  ECD9  F030         	call	_HALSPISend
 32121                           
 32122                           ; BSR set to: 14
 32123                           ;radio_driver_SX1276.c: 140: readValue = HALSPISend(0xFF);
 32124  005CDA  0EFF               	movlw	255
 32125  005CDC  ECD9  F030         	call	_HALSPISend
 32126  005CE0  0100               	movlb	0	; () banked
 32127  005CE2  6F63               	movwf	RADIO_RegisterRead@readValue& (0+255),b
 32128                           
 32129                           ; BSR set to: 0
 32130                           ;radio_driver_SX1276.c: 141: HALSPICSDeassert();
 32131  005CE4  EC1F  F031         	call	_HALSPICSDeassert	;wreg free
 32132                           
 32133                           ;radio_driver_SX1276.c: 142: return readValue;
 32134  005CE8  0100               	movlb	0	; () banked
 32135  005CEA  5163               	movf	RADIO_RegisterRead@readValue& (0+255),w,b
 32136                           
 32137                           ; BSR set to: 0
 32138  005CEC  0012               	return		;funcret
 32139  005CEE                     __end_of_RADIO_RegisterRead:
 32140                           	opt stack 0
 32141                           tosu	equ	0xFFF
 32142                           tosh	equ	0xFFE
 32143                           tosl	equ	0xFFD
 32144                           pclath	equ	0xFFA
 32145                           tblptru	equ	0xFF8
 32146                           tblptrh	equ	0xFF7
 32147                           tblptrl	equ	0xFF6
 32148                           tablat	equ	0xFF5
 32149                           prodh	equ	0xFF4
 32150                           prodl	equ	0xFF3
 32151                           intcon	equ	0xFF2
 32152                           indf0	equ	0xFEF
 32153                           postinc0	equ	0xFEE
 32154                           plusw0	equ	0xFEB
 32155                           fsr0h	equ	0xFEA
 32156                           fsr0l	equ	0xFE9
 32157                           wreg	equ	0xFE8
 32158                           postinc1	equ	0xFE6
 32159                           postdec1	equ	0xFE5
 32160                           plusw1	equ	0xFE3
 32161                           fsr1h	equ	0xFE2
 32162                           fsr1l	equ	0xFE1
 32163                           indf2	equ	0xFDF
 32164                           postinc2	equ	0xFDE
 32165                           postdec2	equ	0xFDD
 32166                           plusw2	equ	0xFDB
 32167                           fsr2h	equ	0xFDA
 32168                           fsr2l	equ	0xFD9
 32169                           status	equ	0xFD8
 32170                           
 32171 ;; *************** function _HALDIO5PinValue *****************
 32172 ;; Defined at:
 32173 ;;		line 95 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 32174 ;; Parameters:    Size  Location     Type
 32175 ;;		None
 32176 ;; Auto vars:     Size  Location     Type
 32177 ;;		None
 32178 ;; Return value:  Size  Location     Type
 32179 ;;                  1    wreg      unsigned char 
 32180 ;; Registers used:
 32181 ;;		wreg
 32182 ;; Tracked objects:
 32183 ;;		On entry : 0/0
 32184 ;;		On exit  : 0/0
 32185 ;;		Unchanged: 0/0
 32186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 32187 ;;      Params:         0       0       0       0       0       0       0       0       0
 32188 ;;      Locals:         0       0       0       0       0       0       0       0       0
 32189 ;;      Temps:          0       0       0       0       0       0       0       0       0
 32190 ;;      Totals:         0       0       0       0       0       0       0       0       0
 32191 ;;Total ram usage:        0 bytes
 32192 ;; Hardware stack levels used:    1
 32193 ;; Hardware stack levels required when called:    7
 32194 ;; This function calls:
 32195 ;;		Nothing
 32196 ;; This function is called by:
 32197 ;;		_RADIO_WriteMode
 32198 ;; This function uses a non-reentrant model
 32199 ;;
 32200                           
 32201                           	psect	text164
 32202  00621A                     __ptext164:
 32203                           	opt stack 0
 32204  00621A                     _HALDIO5PinValue:
 32205                           	opt stack 19
 32206                           
 32207                           ;radio_driver_hal.c: 97: return PORTBbits.RB2;
 32208                           
 32209                           ; BSR set to: 0
 32210                           ;incstack = 0
 32211  00621A  B48A               	btfsc	3978,2,c	;volatile
 32212  00621C  0C01               	retlw	1
 32213  00621E  0C00               	retlw	0	;funcret
 32214  006220                     __end_of_HALDIO5PinValue:
 32215                           	opt stack 0
 32216                           tosu	equ	0xFFF
 32217                           tosh	equ	0xFFE
 32218                           tosl	equ	0xFFD
 32219                           pclath	equ	0xFFA
 32220                           tblptru	equ	0xFF8
 32221                           tblptrh	equ	0xFF7
 32222                           tblptrl	equ	0xFF6
 32223                           tablat	equ	0xFF5
 32224                           prodh	equ	0xFF4
 32225                           prodl	equ	0xFF3
 32226                           intcon	equ	0xFF2
 32227                           indf0	equ	0xFEF
 32228                           postinc0	equ	0xFEE
 32229                           plusw0	equ	0xFEB
 32230                           fsr0h	equ	0xFEA
 32231                           fsr0l	equ	0xFE9
 32232                           wreg	equ	0xFE8
 32233                           postinc1	equ	0xFE6
 32234                           postdec1	equ	0xFE5
 32235                           plusw1	equ	0xFE3
 32236                           fsr1h	equ	0xFE2
 32237                           fsr1l	equ	0xFE1
 32238                           indf2	equ	0xFDF
 32239                           postinc2	equ	0xFDE
 32240                           postdec2	equ	0xFDD
 32241                           plusw2	equ	0xFDB
 32242                           fsr2h	equ	0xFDA
 32243                           fsr2l	equ	0xFD9
 32244                           status	equ	0xFD8
 32245                           
 32246 ;; *************** function _RADIO_WriteFrequency *****************
 32247 ;; Defined at:
 32248 ;;		line 262 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 32249 ;; Parameters:    Size  Location     Type
 32250 ;;  frequency       4   13[BANK0 ] unsigned long 
 32251 ;; Auto vars:     Size  Location     Type
 32252 ;;  num             4   21[BANK0 ] unsigned long 
 32253 ;;  num_mod         4   17[BANK0 ] unsigned long 
 32254 ;; Return value:  Size  Location     Type
 32255 ;;                  1    wreg      void 
 32256 ;; Registers used:
 32257 ;;		wreg, status,2, status,0, cstack
 32258 ;; Tracked objects:
 32259 ;;		On entry : 0/0
 32260 ;;		On exit  : 31/0
 32261 ;;		Unchanged: 0/0
 32262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 32263 ;;      Params:         0       4       0       0       0       0       0       0       0
 32264 ;;      Locals:         0       8       0       0       0       0       0       0       0
 32265 ;;      Temps:          0       0       0       0       0       0       0       0       0
 32266 ;;      Totals:         0      12       0       0       0       0       0       0       0
 32267 ;;Total ram usage:       12 bytes
 32268 ;; Hardware stack levels used:    1
 32269 ;; Hardware stack levels required when called:   10
 32270 ;; This function calls:
 32271 ;;		_RADIO_RegisterWrite
 32272 ;;		___lldiv
 32273 ;;		___llmod
 32274 ;; This function is called by:
 32275 ;;		_RADIO_Init
 32276 ;;		_RADIO_WriteConfiguration
 32277 ;;		_RADIO_FHSSChangeChannel
 32278 ;; This function uses a non-reentrant model
 32279 ;;
 32280                           
 32281                           	psect	text165
 32282  003768                     __ptext165:
 32283                           	opt stack 0
 32284  003768                     _RADIO_WriteFrequency:
 32285                           	opt stack 16
 32286                           
 32287                           ;radio_driver_SX1276.c: 264: uint32_t num, num_mod;
 32288                           ;radio_driver_SX1276.c: 272: num = frequency / 15625;
 32289                           
 32290                           ;incstack = 0
 32291  003768  C06D  F060         	movff	RADIO_WriteFrequency@frequency,___lldiv@dividend
 32292  00376C  C06E  F061         	movff	RADIO_WriteFrequency@frequency+1,___lldiv@dividend+1
 32293  003770  C06F  F062         	movff	RADIO_WriteFrequency@frequency+2,___lldiv@dividend+2
 32294  003774  C070  F063         	movff	RADIO_WriteFrequency@frequency+3,___lldiv@dividend+3
 32295  003778  0E09               	movlw	9
 32296  00377A  0100               	movlb	0	; () banked
 32297  00377C  D85B               	call	PL236	;call to abstracted procedure
 32298  00377E  EC1B  F025         	call	___lldiv	;wreg free
 32299  003782  C060  F075         	movff	?___lldiv,RADIO_WriteFrequency@num
 32300  003786  C061  F076         	movff	?___lldiv+1,RADIO_WriteFrequency@num+1
 32301  00378A  C062  F077         	movff	?___lldiv+2,RADIO_WriteFrequency@num+2
 32302  00378E  C063  F078         	movff	?___lldiv+3,RADIO_WriteFrequency@num+3
 32303                           
 32304                           ;radio_driver_SX1276.c: 273: num_mod = frequency % 15625;
 32305  003792  C06D  F060         	movff	RADIO_WriteFrequency@frequency,___llmod@dividend
 32306  003796  C06E  F061         	movff	RADIO_WriteFrequency@frequency+1,___llmod@dividend+1
 32307  00379A  C06F  F062         	movff	RADIO_WriteFrequency@frequency+2,___llmod@dividend+2
 32308  00379E  C070  F063         	movff	RADIO_WriteFrequency@frequency+3,___llmod@dividend+3
 32309  0037A2  0E09               	movlw	9
 32310  0037A4  6F64               	movwf	___llmod@divisor& (0+255),b
 32311  0037A6  0E3D               	movlw	61
 32312  0037A8  6F65               	movwf	(___llmod@divisor+1)& (0+255),b
 32313  0037AA  6B66               	clrf	(___llmod@divisor+2)& (0+255),b
 32314  0037AC  6B67               	clrf	(___llmod@divisor+3)& (0+255),b
 32315  0037AE  EC26  F027         	call	___llmod	;wreg free
 32316  0037B2  C060  F071         	movff	?___llmod,RADIO_WriteFrequency@num_mod
 32317  0037B6  C061  F072         	movff	?___llmod+1,RADIO_WriteFrequency@num_mod+1
 32318  0037BA  C062  F073         	movff	?___llmod+2,RADIO_WriteFrequency@num_mod+2
 32319  0037BE  C063  F074         	movff	?___llmod+3,RADIO_WriteFrequency@num_mod+3
 32320                           
 32321                           ; BSR set to: 0
 32322                           ;radio_driver_SX1276.c: 277: num <<= (8);
 32323  0037C2  C077  F078         	movff	RADIO_WriteFrequency@num+2,RADIO_WriteFrequency@num+3
 32324  0037C6  C076  F077         	movff	RADIO_WriteFrequency@num+1,RADIO_WriteFrequency@num+2
 32325  0037CA  C075  F076         	movff	RADIO_WriteFrequency@num,RADIO_WriteFrequency@num+1
 32326  0037CE  6B75               	clrf	RADIO_WriteFrequency@num& (0+255),b
 32327                           
 32328                           ; BSR set to: 0
 32329                           ;radio_driver_SX1276.c: 278: num_mod <<= (8);
 32330  0037D0  C073  F074         	movff	RADIO_WriteFrequency@num_mod+2,RADIO_WriteFrequency@num_mod+3
 32331  0037D4  C072  F073         	movff	RADIO_WriteFrequency@num_mod+1,RADIO_WriteFrequency@num_mod+2
 32332  0037D8  C071  F072         	movff	RADIO_WriteFrequency@num_mod,RADIO_WriteFrequency@num_mod+1
 32333  0037DC  6B71               	clrf	RADIO_WriteFrequency@num_mod& (0+255),b
 32334                           
 32335                           ;radio_driver_SX1276.c: 282: num_mod = num_mod / 15625;
 32336  0037DE  C071  F060         	movff	RADIO_WriteFrequency@num_mod,___lldiv@dividend
 32337  0037E2  C072  F061         	movff	RADIO_WriteFrequency@num_mod+1,___lldiv@dividend+1
 32338  0037E6  C073  F062         	movff	RADIO_WriteFrequency@num_mod+2,___lldiv@dividend+2
 32339  0037EA  C074  F063         	movff	RADIO_WriteFrequency@num_mod+3,___lldiv@dividend+3
 32340  0037EE  0E09               	movlw	9
 32341  0037F0  D821               	call	PL236	;call to abstracted procedure
 32342  0037F2  EC1B  F025         	call	___lldiv	;wreg free
 32343  0037F6  C060  F071         	movff	?___lldiv,RADIO_WriteFrequency@num_mod
 32344  0037FA  C061  F072         	movff	?___lldiv+1,RADIO_WriteFrequency@num_mod+1
 32345  0037FE  C062  F073         	movff	?___lldiv+2,RADIO_WriteFrequency@num_mod+2
 32346  003802  C063  F074         	movff	?___lldiv+3,RADIO_WriteFrequency@num_mod+3
 32347                           
 32348                           ; BSR set to: 0
 32349                           ;radio_driver_SX1276.c: 283: num += num_mod;
 32350  003806  5171               	movf	RADIO_WriteFrequency@num_mod& (0+255),w,b
 32351  003808  2775               	addwf	RADIO_WriteFrequency@num& (0+255),f,b
 32352  00380A  5172               	movf	(RADIO_WriteFrequency@num_mod+1)& (0+255),w,b
 32353  00380C  2376               	addwfc	(RADIO_WriteFrequency@num+1)& (0+255),f,b
 32354  00380E  5173               	movf	(RADIO_WriteFrequency@num_mod+2)& (0+255),w,b
 32355  003810  2377               	addwfc	(RADIO_WriteFrequency@num+2)& (0+255),f,b
 32356  003812  5174               	movf	(RADIO_WriteFrequency@num_mod+3)& (0+255),w,b
 32357  003814  2378               	addwfc	(RADIO_WriteFrequency@num+3)& (0+255),f,b
 32358                           
 32359                           ; BSR set to: 0
 32360                           ;radio_driver_SX1276.c: 287: RADIO_RegisterWrite(0x06, (num >> (16)) & 0xFF);
 32361  003816  C077  F062         	movff	RADIO_WriteFrequency@num+2,RADIO_RegisterWrite@value
 32362  00381A  0E06               	movlw	6
 32363  00381C  EC2E  F02F         	call	_RADIO_RegisterWrite
 32364                           
 32365                           ;radio_driver_SX1276.c: 288: RADIO_RegisterWrite(0x07, (num >> (8)) & 0xFF);
 32366  003820  C076  F062         	movff	RADIO_WriteFrequency@num+1,RADIO_RegisterWrite@value
 32367  003824  0E07               	movlw	7
 32368  003826  EC2E  F02F         	call	_RADIO_RegisterWrite
 32369                           
 32370                           ;radio_driver_SX1276.c: 289: RADIO_RegisterWrite(0x08, num & 0xFF);
 32371  00382A  C075  F062         	movff	RADIO_WriteFrequency@num,RADIO_RegisterWrite@value
 32372  00382E  0E08               	movlw	8
 32373  003830  EF2E  F02F         	goto	_RADIO_RegisterWrite
 32374  003834                     __end_of_RADIO_WriteFrequency:
 32375                           	opt stack 0
 32376  003834                     PL236:
 32377                           	opt stack 16
 32378  003834  6F64               	movwf	___lldiv@divisor& (0+255),b
 32379  003836  0E3D               	movlw	61
 32380  003838  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 32381  00383A  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 32382  00383C  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 32383  00383E  0C3D               	retlw	61
 32384  003840                     __end_ofPL236:
 32385                           	opt stack 0
 32386                           tosu	equ	0xFFF
 32387                           tosh	equ	0xFFE
 32388                           tosl	equ	0xFFD
 32389                           pclath	equ	0xFFA
 32390                           tblptru	equ	0xFF8
 32391                           tblptrh	equ	0xFF7
 32392                           tblptrl	equ	0xFF6
 32393                           tablat	equ	0xFF5
 32394                           prodh	equ	0xFF4
 32395                           prodl	equ	0xFF3
 32396                           intcon	equ	0xFF2
 32397                           indf0	equ	0xFEF
 32398                           postinc0	equ	0xFEE
 32399                           plusw0	equ	0xFEB
 32400                           fsr0h	equ	0xFEA
 32401                           fsr0l	equ	0xFE9
 32402                           wreg	equ	0xFE8
 32403                           postinc1	equ	0xFE6
 32404                           postdec1	equ	0xFE5
 32405                           plusw1	equ	0xFE3
 32406                           fsr1h	equ	0xFE2
 32407                           fsr1l	equ	0xFE1
 32408                           indf2	equ	0xFDF
 32409                           postinc2	equ	0xFDE
 32410                           postdec2	equ	0xFDD
 32411                           plusw2	equ	0xFDB
 32412                           fsr2h	equ	0xFDA
 32413                           fsr2l	equ	0xFD9
 32414                           status	equ	0xFD8
 32415                           
 32416 ;; *************** function ___llmod *****************
 32417 ;; Defined at:
 32418 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
 32419 ;; Parameters:    Size  Location     Type
 32420 ;;  dividend        4    0[BANK0 ] unsigned long 
 32421 ;;  divisor         4    4[BANK0 ] unsigned long 
 32422 ;; Auto vars:     Size  Location     Type
 32423 ;;  counter         1    8[BANK0 ] unsigned char 
 32424 ;; Return value:  Size  Location     Type
 32425 ;;                  4    0[BANK0 ] unsigned long 
 32426 ;; Registers used:
 32427 ;;		wreg, status,2, status,0
 32428 ;; Tracked objects:
 32429 ;;		On entry : 3F/0
 32430 ;;		On exit  : 3F/0
 32431 ;;		Unchanged: 0/0
 32432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 32433 ;;      Params:         0       8       0       0       0       0       0       0       0
 32434 ;;      Locals:         0       1       0       0       0       0       0       0       0
 32435 ;;      Temps:          0       0       0       0       0       0       0       0       0
 32436 ;;      Totals:         0       9       0       0       0       0       0       0       0
 32437 ;;Total ram usage:        9 bytes
 32438 ;; Hardware stack levels used:    1
 32439 ;; Hardware stack levels required when called:    7
 32440 ;; This function calls:
 32441 ;;		Nothing
 32442 ;; This function is called by:
 32443 ;;		_RADIO_WriteFrequency
 32444 ;; This function uses a non-reentrant model
 32445 ;;
 32446                           
 32447                           	psect	text166
 32448  004E4C                     __ptext166:
 32449                           	opt stack 0
 32450  004E4C                     ___llmod:
 32451                           	opt stack 18
 32452                           
 32453                           ; BSR set to: 0
 32454                           
 32455                           ;incstack = 0
 32456  004E4C  5164               	movf	___llmod@divisor& (0+255),w,b
 32457  004E4E  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 32458  004E50  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 32459  004E52  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 32460  004E54  E023               	bz	l3008
 32461                           
 32462                           ; BSR set to: 0
 32463  004E56  0E01               	movlw	1
 32464  004E58  6F68               	movwf	___llmod@counter& (0+255),b
 32465  004E5A  D006               	goto	l12090
 32466  004E5C                     l12088:
 32467                           
 32468                           ; BSR set to: 0
 32469  004E5C  90D8               	bcf	status,0,c
 32470  004E5E  3764               	rlcf	___llmod@divisor& (0+255),f,b
 32471  004E60  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 32472  004E62  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 32473  004E64  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 32474  004E66  2B68               	incf	___llmod@counter& (0+255),f,b
 32475  004E68                     l12090:
 32476                           
 32477                           ; BSR set to: 0
 32478  004E68  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
 32479  004E6A  D7F8               	goto	l12088
 32480  004E6C                     l12092:
 32481                           
 32482                           ; BSR set to: 0
 32483  004E6C  5164               	movf	___llmod@divisor& (0+255),w,b
 32484  004E6E  5D60               	subwf	___llmod@dividend& (0+255),w,b
 32485  004E70  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 32486  004E72  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 32487  004E74  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 32488  004E76  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 32489  004E78  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 32490  004E7A  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 32491  004E7C  E308               	bnc	l12096
 32492                           
 32493                           ; BSR set to: 0
 32494  004E7E  5164               	movf	___llmod@divisor& (0+255),w,b
 32495  004E80  5F60               	subwf	___llmod@dividend& (0+255),f,b
 32496  004E82  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 32497  004E84  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 32498  004E86  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 32499  004E88  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 32500  004E8A  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 32501  004E8C  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 32502  004E8E                     l12096:
 32503                           
 32504                           ; BSR set to: 0
 32505  004E8E  90D8               	bcf	status,0,c
 32506  004E90  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 32507  004E92  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 32508  004E94  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 32509  004E96  3364               	rrcf	___llmod@divisor& (0+255),f,b
 32510                           
 32511                           ; BSR set to: 0
 32512  004E98  2F68               	decfsz	___llmod@counter& (0+255),f,b
 32513  004E9A  D7E8               	goto	l12092
 32514  004E9C                     l3008:
 32515                           
 32516                           ; BSR set to: 0
 32517  004E9C  C060  F060         	movff	___llmod@dividend,?___llmod
 32518  004EA0  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
 32519  004EA4  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
 32520  004EA8  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
 32521                           
 32522                           ; BSR set to: 0
 32523  004EAC  0012               	return		;funcret
 32524  004EAE                     __end_of___llmod:
 32525                           	opt stack 0
 32526                           tosu	equ	0xFFF
 32527                           tosh	equ	0xFFE
 32528                           tosl	equ	0xFFD
 32529                           pclath	equ	0xFFA
 32530                           tblptru	equ	0xFF8
 32531                           tblptrh	equ	0xFF7
 32532                           tblptrl	equ	0xFF6
 32533                           tablat	equ	0xFF5
 32534                           prodh	equ	0xFF4
 32535                           prodl	equ	0xFF3
 32536                           intcon	equ	0xFF2
 32537                           indf0	equ	0xFEF
 32538                           postinc0	equ	0xFEE
 32539                           plusw0	equ	0xFEB
 32540                           fsr0h	equ	0xFEA
 32541                           fsr0l	equ	0xFE9
 32542                           wreg	equ	0xFE8
 32543                           postinc1	equ	0xFE6
 32544                           postdec1	equ	0xFE5
 32545                           plusw1	equ	0xFE3
 32546                           fsr1h	equ	0xFE2
 32547                           fsr1l	equ	0xFE1
 32548                           indf2	equ	0xFDF
 32549                           postinc2	equ	0xFDE
 32550                           postdec2	equ	0xFDD
 32551                           plusw2	equ	0xFDB
 32552                           fsr2h	equ	0xFDA
 32553                           fsr2l	equ	0xFD9
 32554                           status	equ	0xFD8
 32555                           
 32556 ;; *************** function _RADIO_RegisterWrite *****************
 32557 ;; Defined at:
 32558 ;;		line 126 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 32559 ;; Parameters:    Size  Location     Type
 32560 ;;  reg             1    wreg     unsigned char 
 32561 ;;  value           1    2[BANK0 ] unsigned char 
 32562 ;; Auto vars:     Size  Location     Type
 32563 ;;  reg             1    3[BANK0 ] unsigned char 
 32564 ;; Return value:  Size  Location     Type
 32565 ;;                  1    wreg      void 
 32566 ;; Registers used:
 32567 ;;		wreg, status,2, status,0, cstack
 32568 ;; Tracked objects:
 32569 ;;		On entry : 0/0
 32570 ;;		On exit  : 31/0
 32571 ;;		Unchanged: 0/0
 32572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 32573 ;;      Params:         0       1       0       0       0       0       0       0       0
 32574 ;;      Locals:         0       1       0       0       0       0       0       0       0
 32575 ;;      Temps:          0       0       0       0       0       0       0       0       0
 32576 ;;      Totals:         0       2       0       0       0       0       0       0       0
 32577 ;;Total ram usage:        2 bytes
 32578 ;; Hardware stack levels used:    1
 32579 ;; Hardware stack levels required when called:    9
 32580 ;; This function calls:
 32581 ;;		_HALSPICSAssert
 32582 ;;		_HALSPICSDeassert
 32583 ;;		_HALSPISend
 32584 ;; This function is called by:
 32585 ;;		_RADIO_WriteMode
 32586 ;;		_RADIO_WriteFrequency
 32587 ;;		_RADIO_WriteFSKFrequencyDeviation
 32588 ;;		_RADIO_WriteFSKBitRate
 32589 ;;		_RADIO_WritePower
 32590 ;;		_RADIO_Init
 32591 ;;		_RADIO_WriteConfiguration
 32592 ;;		_RADIO_Transmit
 32593 ;;		_RADIO_ReceiveStart
 32594 ;;		_RADIO_RxDone
 32595 ;;		_RADIO_RxTimeout
 32596 ;;		_RADIO_TxDone
 32597 ;;		_RADIO_UnhandledInterrupt
 32598 ;;		_RADIO_FHSSChangeChannel
 32599 ;;		_RADIO_ReadRandom
 32600 ;; This function uses a non-reentrant model
 32601 ;;
 32602                           
 32603                           	psect	text167
 32604  005E5C                     __ptext167:
 32605                           	opt stack 0
 32606  005E5C                     _RADIO_RegisterWrite:
 32607                           	opt stack 17
 32608                           
 32609                           ; BSR set to: 0
 32610                           ;incstack = 0
 32611                           ;RADIO_RegisterWrite@reg stored from wreg
 32612  005E5C  0100               	movlb	0	; () banked
 32613  005E5E  6F63               	movwf	RADIO_RegisterWrite@reg& (0+255),b
 32614                           
 32615                           ;radio_driver_SX1276.c: 128: HALSPICSAssert();
 32616  005E60  EC21  F031         	call	_HALSPICSAssert	;wreg free
 32617                           
 32618                           ;radio_driver_SX1276.c: 129: HALSPISend(0x80 | reg);
 32619  005E64  0100               	movlb	0	; () banked
 32620  005E66  5163               	movf	RADIO_RegisterWrite@reg& (0+255),w,b
 32621  005E68  0980               	iorlw	128
 32622  005E6A  ECD9  F030         	call	_HALSPISend
 32623                           
 32624                           ; BSR set to: 14
 32625                           ;radio_driver_SX1276.c: 130: HALSPISend(value);
 32626  005E6E  0100               	movlb	0	; () banked
 32627  005E70  5162               	movf	RADIO_RegisterWrite@value& (0+255),w,b
 32628  005E72  ECD9  F030         	call	_HALSPISend
 32629                           
 32630                           ; BSR set to: 14
 32631                           ;radio_driver_SX1276.c: 131: HALSPICSDeassert();
 32632  005E76  EF1F  F031         	goto	_HALSPICSDeassert	;wreg free
 32633  005E7A                     __end_of_RADIO_RegisterWrite:
 32634                           	opt stack 0
 32635                           tosu	equ	0xFFF
 32636                           tosh	equ	0xFFE
 32637                           tosl	equ	0xFFD
 32638                           pclath	equ	0xFFA
 32639                           tblptru	equ	0xFF8
 32640                           tblptrh	equ	0xFF7
 32641                           tblptrl	equ	0xFF6
 32642                           tablat	equ	0xFF5
 32643                           prodh	equ	0xFF4
 32644                           prodl	equ	0xFF3
 32645                           intcon	equ	0xFF2
 32646                           indf0	equ	0xFEF
 32647                           postinc0	equ	0xFEE
 32648                           plusw0	equ	0xFEB
 32649                           fsr0h	equ	0xFEA
 32650                           fsr0l	equ	0xFE9
 32651                           wreg	equ	0xFE8
 32652                           postinc1	equ	0xFE6
 32653                           postdec1	equ	0xFE5
 32654                           plusw1	equ	0xFE3
 32655                           fsr1h	equ	0xFE2
 32656                           fsr1l	equ	0xFE1
 32657                           indf2	equ	0xFDF
 32658                           postinc2	equ	0xFDE
 32659                           postdec2	equ	0xFDD
 32660                           plusw2	equ	0xFDB
 32661                           fsr2h	equ	0xFDA
 32662                           fsr2l	equ	0xFD9
 32663                           status	equ	0xFD8
 32664                           
 32665 ;; *************** function _HALSPISend *****************
 32666 ;; Defined at:
 32667 ;;		line 73 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 32668 ;; Parameters:    Size  Location     Type
 32669 ;;  data            1    wreg     unsigned char 
 32670 ;; Auto vars:     Size  Location     Type
 32671 ;;  data            1    1[BANK0 ] unsigned char 
 32672 ;; Return value:  Size  Location     Type
 32673 ;;                  1    wreg      unsigned char 
 32674 ;; Registers used:
 32675 ;;		wreg, status,2, cstack
 32676 ;; Tracked objects:
 32677 ;;		On entry : 0/0
 32678 ;;		On exit  : 3F/E
 32679 ;;		Unchanged: 0/0
 32680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 32681 ;;      Params:         0       0       0       0       0       0       0       0       0
 32682 ;;      Locals:         0       1       0       0       0       0       0       0       0
 32683 ;;      Temps:          0       0       0       0       0       0       0       0       0
 32684 ;;      Totals:         0       1       0       0       0       0       0       0       0
 32685 ;;Total ram usage:        1 bytes
 32686 ;; Hardware stack levels used:    1
 32687 ;; Hardware stack levels required when called:    8
 32688 ;; This function calls:
 32689 ;;		_SPI2_Exchange8bit
 32690 ;; This function is called by:
 32691 ;;		_RADIO_RegisterWrite
 32692 ;;		_RADIO_RegisterRead
 32693 ;;		_RADIO_Transmit
 32694 ;;		_RADIO_RxDone
 32695 ;;		_RADIO_FSKPayloadReady
 32696 ;; This function uses a non-reentrant model
 32697 ;;
 32698                           
 32699                           	psect	text168
 32700  0061B2                     __ptext168:
 32701                           	opt stack 0
 32702  0061B2                     _HALSPISend:
 32703                           	opt stack 17
 32704                           
 32705                           ;incstack = 0
 32706                           ;HALSPISend@data stored from wreg
 32707  0061B2  0100               	movlb	0	; () banked
 32708  0061B4  6F61               	movwf	HALSPISend@data& (0+255),b
 32709                           
 32710                           ;radio_driver_hal.c: 75: return SPI2_Exchange8bit(data);
 32711  0061B6  5161               	movf	HALSPISend@data& (0+255),w,b
 32712  0061B8  EF5C  F030         	goto	_SPI2_Exchange8bit
 32713  0061BC                     __end_of_HALSPISend:
 32714                           	opt stack 0
 32715                           tosu	equ	0xFFF
 32716                           tosh	equ	0xFFE
 32717                           tosl	equ	0xFFD
 32718                           pclath	equ	0xFFA
 32719                           tblptru	equ	0xFF8
 32720                           tblptrh	equ	0xFF7
 32721                           tblptrl	equ	0xFF6
 32722                           tablat	equ	0xFF5
 32723                           prodh	equ	0xFF4
 32724                           prodl	equ	0xFF3
 32725                           intcon	equ	0xFF2
 32726                           indf0	equ	0xFEF
 32727                           postinc0	equ	0xFEE
 32728                           plusw0	equ	0xFEB
 32729                           fsr0h	equ	0xFEA
 32730                           fsr0l	equ	0xFE9
 32731                           wreg	equ	0xFE8
 32732                           postinc1	equ	0xFE6
 32733                           postdec1	equ	0xFE5
 32734                           plusw1	equ	0xFE3
 32735                           fsr1h	equ	0xFE2
 32736                           fsr1l	equ	0xFE1
 32737                           indf2	equ	0xFDF
 32738                           postinc2	equ	0xFDE
 32739                           postdec2	equ	0xFDD
 32740                           plusw2	equ	0xFDB
 32741                           fsr2h	equ	0xFDA
 32742                           fsr2l	equ	0xFD9
 32743                           status	equ	0xFD8
 32744                           
 32745 ;; *************** function _SPI2_Exchange8bit *****************
 32746 ;; Defined at:
 32747 ;;		line 77 in file "mcc_generated_files/spi2.c"
 32748 ;; Parameters:    Size  Location     Type
 32749 ;;  data            1    wreg     unsigned char 
 32750 ;; Auto vars:     Size  Location     Type
 32751 ;;  data            1    0[BANK0 ] unsigned char 
 32752 ;; Return value:  Size  Location     Type
 32753 ;;                  1    wreg      unsigned char 
 32754 ;; Registers used:
 32755 ;;		wreg, status,2
 32756 ;; Tracked objects:
 32757 ;;		On entry : 3F/0
 32758 ;;		On exit  : 3F/E
 32759 ;;		Unchanged: 0/0
 32760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 32761 ;;      Params:         0       0       0       0       0       0       0       0       0
 32762 ;;      Locals:         0       1       0       0       0       0       0       0       0
 32763 ;;      Temps:          0       0       0       0       0       0       0       0       0
 32764 ;;      Totals:         0       1       0       0       0       0       0       0       0
 32765 ;;Total ram usage:        1 bytes
 32766 ;; Hardware stack levels used:    1
 32767 ;; Hardware stack levels required when called:    7
 32768 ;; This function calls:
 32769 ;;		Nothing
 32770 ;; This function is called by:
 32771 ;;		_HALSPISend
 32772 ;; This function uses a non-reentrant model
 32773 ;;
 32774                           
 32775                           	psect	text169
 32776  0060B8                     __ptext169:
 32777                           	opt stack 0
 32778  0060B8                     _SPI2_Exchange8bit:
 32779                           	opt stack 17
 32780                           
 32781                           ; BSR set to: 14
 32782                           ;incstack = 0
 32783                           ;SPI2_Exchange8bit@data stored from wreg
 32784  0060B8  6F60               	movwf	SPI2_Exchange8bit@data& (0+255),b
 32785                           
 32786                           ;spi2.c: 80: SSP2CON1bits.WCOL = 0;
 32787  0060BA  010E               	movlb	14	; () banked
 32788  0060BC  9FD9               	bcf	217,7,b	;volatile
 32789                           
 32790                           ; BSR set to: 14
 32791                           ;spi2.c: 82: SSP2BUF = data;
 32792  0060BE  C060  FED5         	movff	SPI2_Exchange8bit@data,3797	;volatile
 32793  0060C2                     l239:
 32794                           
 32795                           ; BSR set to: 14
 32796  0060C2  A1D8               	btfss	216,0,b	;volatile
 32797  0060C4  D7FE               	goto	l239
 32798                           
 32799                           ; BSR set to: 14
 32800                           ;spi2.c: 86: }
 32801                           ;spi2.c: 88: return (SSP2BUF);
 32802  0060C6  51D5               	movf	213,w,b	;volatile
 32803                           
 32804                           ; BSR set to: 14
 32805  0060C8  0012               	return		;funcret
 32806  0060CA                     __end_of_SPI2_Exchange8bit:
 32807                           	opt stack 0
 32808                           tosu	equ	0xFFF
 32809                           tosh	equ	0xFFE
 32810                           tosl	equ	0xFFD
 32811                           pclath	equ	0xFFA
 32812                           tblptru	equ	0xFF8
 32813                           tblptrh	equ	0xFF7
 32814                           tblptrl	equ	0xFF6
 32815                           tablat	equ	0xFF5
 32816                           prodh	equ	0xFF4
 32817                           prodl	equ	0xFF3
 32818                           intcon	equ	0xFF2
 32819                           indf0	equ	0xFEF
 32820                           postinc0	equ	0xFEE
 32821                           plusw0	equ	0xFEB
 32822                           fsr0h	equ	0xFEA
 32823                           fsr0l	equ	0xFE9
 32824                           wreg	equ	0xFE8
 32825                           postinc1	equ	0xFE6
 32826                           postdec1	equ	0xFE5
 32827                           plusw1	equ	0xFE3
 32828                           fsr1h	equ	0xFE2
 32829                           fsr1l	equ	0xFE1
 32830                           indf2	equ	0xFDF
 32831                           postinc2	equ	0xFDE
 32832                           postdec2	equ	0xFDD
 32833                           plusw2	equ	0xFDB
 32834                           fsr2h	equ	0xFDA
 32835                           fsr2l	equ	0xFD9
 32836                           status	equ	0xFD8
 32837                           
 32838 ;; *************** function _HALSPICSDeassert *****************
 32839 ;; Defined at:
 32840 ;;		line 68 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 32841 ;; Parameters:    Size  Location     Type
 32842 ;;		None
 32843 ;; Auto vars:     Size  Location     Type
 32844 ;;		None
 32845 ;; Return value:  Size  Location     Type
 32846 ;;                  1    wreg      void 
 32847 ;; Registers used:
 32848 ;;		None
 32849 ;; Tracked objects:
 32850 ;;		On entry : 31/0
 32851 ;;		On exit  : 31/0
 32852 ;;		Unchanged: 31/0
 32853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 32854 ;;      Params:         0       0       0       0       0       0       0       0       0
 32855 ;;      Locals:         0       0       0       0       0       0       0       0       0
 32856 ;;      Temps:          0       0       0       0       0       0       0       0       0
 32857 ;;      Totals:         0       0       0       0       0       0       0       0       0
 32858 ;;Total ram usage:        0 bytes
 32859 ;; Hardware stack levels used:    1
 32860 ;; Hardware stack levels required when called:    7
 32861 ;; This function calls:
 32862 ;;		Nothing
 32863 ;; This function is called by:
 32864 ;;		_RADIO_RegisterWrite
 32865 ;;		_RADIO_RegisterRead
 32866 ;;		_RADIO_Transmit
 32867 ;;		_RADIO_RxDone
 32868 ;;		_RADIO_FSKPayloadReady
 32869 ;; This function uses a non-reentrant model
 32870 ;;
 32871                           
 32872                           	psect	text170
 32873  00623E                     __ptext170:
 32874                           	opt stack 0
 32875  00623E                     _HALSPICSDeassert:
 32876                           	opt stack 18
 32877                           
 32878                           ; BSR set to: 14
 32879                           ;incstack = 0
 32880                           ;radio_driver_hal.c: 70: do { LATC1 = 1; } while(0);
 32881  00623E  827B               	bsf	3963,1,c	;volatile
 32882  006240  0012               	return		;funcret
 32883  006242                     __end_of_HALSPICSDeassert:
 32884                           	opt stack 0
 32885                           tosu	equ	0xFFF
 32886                           tosh	equ	0xFFE
 32887                           tosl	equ	0xFFD
 32888                           pclath	equ	0xFFA
 32889                           tblptru	equ	0xFF8
 32890                           tblptrh	equ	0xFF7
 32891                           tblptrl	equ	0xFF6
 32892                           tablat	equ	0xFF5
 32893                           prodh	equ	0xFF4
 32894                           prodl	equ	0xFF3
 32895                           intcon	equ	0xFF2
 32896                           indf0	equ	0xFEF
 32897                           postinc0	equ	0xFEE
 32898                           plusw0	equ	0xFEB
 32899                           fsr0h	equ	0xFEA
 32900                           fsr0l	equ	0xFE9
 32901                           wreg	equ	0xFE8
 32902                           postinc1	equ	0xFE6
 32903                           postdec1	equ	0xFE5
 32904                           plusw1	equ	0xFE3
 32905                           fsr1h	equ	0xFE2
 32906                           fsr1l	equ	0xFE1
 32907                           indf2	equ	0xFDF
 32908                           postinc2	equ	0xFDE
 32909                           postdec2	equ	0xFDD
 32910                           plusw2	equ	0xFDB
 32911                           fsr2h	equ	0xFDA
 32912                           fsr2l	equ	0xFD9
 32913                           status	equ	0xFD8
 32914                           
 32915 ;; *************** function _HALSPICSAssert *****************
 32916 ;; Defined at:
 32917 ;;		line 63 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 32918 ;; Parameters:    Size  Location     Type
 32919 ;;		None
 32920 ;; Auto vars:     Size  Location     Type
 32921 ;;		None
 32922 ;; Return value:  Size  Location     Type
 32923 ;;                  1    wreg      void 
 32924 ;; Registers used:
 32925 ;;		None
 32926 ;; Tracked objects:
 32927 ;;		On entry : 0/0
 32928 ;;		On exit  : 0/0
 32929 ;;		Unchanged: 0/0
 32930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 32931 ;;      Params:         0       0       0       0       0       0       0       0       0
 32932 ;;      Locals:         0       0       0       0       0       0       0       0       0
 32933 ;;      Temps:          0       0       0       0       0       0       0       0       0
 32934 ;;      Totals:         0       0       0       0       0       0       0       0       0
 32935 ;;Total ram usage:        0 bytes
 32936 ;; Hardware stack levels used:    1
 32937 ;; Hardware stack levels required when called:    7
 32938 ;; This function calls:
 32939 ;;		Nothing
 32940 ;; This function is called by:
 32941 ;;		_RADIO_RegisterWrite
 32942 ;;		_RADIO_RegisterRead
 32943 ;;		_RADIO_Transmit
 32944 ;;		_RADIO_RxDone
 32945 ;;		_RADIO_FSKPayloadReady
 32946 ;; This function uses a non-reentrant model
 32947 ;;
 32948                           
 32949                           	psect	text171
 32950  006242                     __ptext171:
 32951                           	opt stack 0
 32952  006242                     _HALSPICSAssert:
 32953                           	opt stack 18
 32954                           
 32955                           ;incstack = 0
 32956                           ;radio_driver_hal.c: 65: do { LATC1 = 0; } while(0);
 32957  006242  927B               	bcf	3963,1,c	;volatile
 32958  006244  0012               	return		;funcret
 32959  006246                     __end_of_HALSPICSAssert:
 32960                           	opt stack 0
 32961                           tosu	equ	0xFFF
 32962                           tosh	equ	0xFFE
 32963                           tosl	equ	0xFFD
 32964                           pclath	equ	0xFFA
 32965                           tblptru	equ	0xFF8
 32966                           tblptrh	equ	0xFF7
 32967                           tblptrl	equ	0xFF6
 32968                           tablat	equ	0xFF5
 32969                           prodh	equ	0xFF4
 32970                           prodl	equ	0xFF3
 32971                           intcon	equ	0xFF2
 32972                           indf0	equ	0xFEF
 32973                           postinc0	equ	0xFEE
 32974                           plusw0	equ	0xFEB
 32975                           fsr0h	equ	0xFEA
 32976                           fsr0l	equ	0xFE9
 32977                           wreg	equ	0xFE8
 32978                           postinc1	equ	0xFE6
 32979                           postdec1	equ	0xFE5
 32980                           plusw1	equ	0xFE3
 32981                           fsr1h	equ	0xFE2
 32982                           fsr1l	equ	0xFE1
 32983                           indf2	equ	0xFDF
 32984                           postinc2	equ	0xFDE
 32985                           postdec2	equ	0xFDD
 32986                           plusw2	equ	0xFDB
 32987                           fsr2h	equ	0xFDA
 32988                           fsr2l	equ	0xFD9
 32989                           status	equ	0xFD8
 32990                           
 32991 ;; *************** function _RADIO_Reset *****************
 32992 ;; Defined at:
 32993 ;;		line 249 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 32994 ;; Parameters:    Size  Location     Type
 32995 ;;		None
 32996 ;; Auto vars:     Size  Location     Type
 32997 ;;		None
 32998 ;; Return value:  Size  Location     Type
 32999 ;;                  1    wreg      void 
 33000 ;; Registers used:
 33001 ;;		wreg, status,2, status,0, cstack
 33002 ;; Tracked objects:
 33003 ;;		On entry : 3E/1
 33004 ;;		On exit  : 3E/0
 33005 ;;		Unchanged: 0/0
 33006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 33007 ;;      Params:         0       0       0       0       0       0       0       0       0
 33008 ;;      Locals:         0       0       0       0       0       0       0       0       0
 33009 ;;      Temps:          0       0       0       0       0       0       0       0       0
 33010 ;;      Totals:         0       0       0       0       0       0       0       0       0
 33011 ;;Total ram usage:        0 bytes
 33012 ;; Hardware stack levels used:    1
 33013 ;; Hardware stack levels required when called:    8
 33014 ;; This function calls:
 33015 ;;		_HALResetPinMakeInput
 33016 ;;		_HALResetPinMakeOutput
 33017 ;;		_HALResetPinOutputValue
 33018 ;;		_SystemBlockingWaitMs
 33019 ;; This function is called by:
 33020 ;;		_RADIO_Init
 33021 ;; This function uses a non-reentrant model
 33022 ;;
 33023                           
 33024                           	psect	text172
 33025  005A7E                     __ptext172:
 33026                           	opt stack 0
 33027  005A7E                     _RADIO_Reset:
 33028                           	opt stack 20
 33029                           
 33030                           ;radio_driver_SX1276.c: 251: HALResetPinMakeOutput();
 33031                           
 33032                           ;incstack = 0
 33033  005A7E  EC23  F031         	call	_HALResetPinMakeOutput	;wreg free
 33034                           
 33035                           ;radio_driver_SX1276.c: 252: HALResetPinOutputValue(0);
 33036  005A82  0E00               	movlw	0
 33037  005A84  EC40  F030         	call	_HALResetPinOutputValue
 33038                           
 33039                           ; BSR set to: 0
 33040                           ;radio_driver_SX1276.c: 253: SystemBlockingWaitMs(1);
 33041  005A88  EC3F  F01B         	call	PL228	;call to abstracted procedure
 33042  005A8C  ECC4  F02D         	call	_SystemBlockingWaitMs	;wreg free
 33043                           
 33044                           ;radio_driver_SX1276.c: 254: HALResetPinMakeInput();
 33045  005A90  EC25  F031         	call	_HALResetPinMakeInput	;wreg free
 33046                           
 33047                           ; BSR set to: 0
 33048                           ;radio_driver_SX1276.c: 255: SystemBlockingWaitMs(10);
 33049  005A94  0E0A               	movlw	10
 33050  005A96  6F60               	movwf	SystemBlockingWaitMs@ms& (0+255),b
 33051  005A98  6B61               	clrf	(SystemBlockingWaitMs@ms+1)& (0+255),b
 33052  005A9A  6B62               	clrf	(SystemBlockingWaitMs@ms+2)& (0+255),b
 33053  005A9C  6B63               	clrf	(SystemBlockingWaitMs@ms+3)& (0+255),b
 33054  005A9E  ECC4  F02D         	call	_SystemBlockingWaitMs	;wreg free
 33055                           
 33056                           ; BSR set to: 0
 33057                           ;radio_driver_SX1276.c: 257: HALResetPinOutputValue(1);
 33058  005AA2  0E01               	movlw	1
 33059  005AA4  EC40  F030         	call	_HALResetPinOutputValue
 33060                           
 33061                           ;radio_driver_SX1276.c: 258: HALResetPinMakeOutput();
 33062  005AA8  EF23  F031         	goto	_HALResetPinMakeOutput	;wreg free
 33063  005AAC                     __end_of_RADIO_Reset:
 33064                           	opt stack 0
 33065                           tosu	equ	0xFFF
 33066                           tosh	equ	0xFFE
 33067                           tosl	equ	0xFFD
 33068                           pclath	equ	0xFFA
 33069                           tblptru	equ	0xFF8
 33070                           tblptrh	equ	0xFF7
 33071                           tblptrl	equ	0xFF6
 33072                           tablat	equ	0xFF5
 33073                           prodh	equ	0xFF4
 33074                           prodl	equ	0xFF3
 33075                           intcon	equ	0xFF2
 33076                           indf0	equ	0xFEF
 33077                           postinc0	equ	0xFEE
 33078                           plusw0	equ	0xFEB
 33079                           fsr0h	equ	0xFEA
 33080                           fsr0l	equ	0xFE9
 33081                           wreg	equ	0xFE8
 33082                           postinc1	equ	0xFE6
 33083                           postdec1	equ	0xFE5
 33084                           plusw1	equ	0xFE3
 33085                           fsr1h	equ	0xFE2
 33086                           fsr1l	equ	0xFE1
 33087                           indf2	equ	0xFDF
 33088                           postinc2	equ	0xFDE
 33089                           postdec2	equ	0xFDD
 33090                           plusw2	equ	0xFDB
 33091                           fsr2h	equ	0xFDA
 33092                           fsr2l	equ	0xFD9
 33093                           status	equ	0xFD8
 33094                           
 33095 ;; *************** function _SystemBlockingWaitMs *****************
 33096 ;; Defined at:
 33097 ;;		line 145 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 33098 ;; Parameters:    Size  Location     Type
 33099 ;;  ms              4    0[BANK0 ] unsigned long 
 33100 ;; Auto vars:     Size  Location     Type
 33101 ;;		None
 33102 ;; Return value:  Size  Location     Type
 33103 ;;                  1    wreg      void 
 33104 ;; Registers used:
 33105 ;;		wreg, status,2, status,0
 33106 ;; Tracked objects:
 33107 ;;		On entry : 3F/0
 33108 ;;		On exit  : 3F/0
 33109 ;;		Unchanged: 0/0
 33110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 33111 ;;      Params:         0       4       0       0       0       0       0       0       0
 33112 ;;      Locals:         0       0       0       0       0       0       0       0       0
 33113 ;;      Temps:          0       1       0       0       0       0       0       0       0
 33114 ;;      Totals:         0       5       0       0       0       0       0       0       0
 33115 ;;Total ram usage:        5 bytes
 33116 ;; Hardware stack levels used:    1
 33117 ;; Hardware stack levels required when called:    7
 33118 ;; This function calls:
 33119 ;;		Nothing
 33120 ;; This function is called by:
 33121 ;;		_RADIO_WriteMode
 33122 ;;		_RADIO_Reset
 33123 ;;		_RADIO_ReadRandom
 33124 ;; This function uses a non-reentrant model
 33125 ;;
 33126                           
 33127                           	psect	text173
 33128  005B88                     __ptext173:
 33129                           	opt stack 0
 33130  005B88                     _SystemBlockingWaitMs:
 33131                           	opt stack 19
 33132                           
 33133                           ; BSR set to: 0
 33134                           ;sw_timer.c: 147: while (ms > 0)
 33135                           
 33136                           ;incstack = 0
 33137  005B88  D00F               	goto	l12018
 33138  005B8A                     l12014:
 33139                           
 33140                           ; BSR set to: 0
 33141                           ;sw_timer.c: 148: {
 33142                           ;sw_timer.c: 149: _delay((unsigned long)((1)*(16000000/4000.0)));
 33143  005B8A  0E06               	movlw	6
 33144  005B8C  0100               	movlb	0	; () banked
 33145  005B8E  6F64               	movwf	??_SystemBlockingWaitMs& (0+255),b
 33146  005B90  0E30               	movlw	48
 33147  005B92                     u19827:
 33148  005B92  2EE8               	decfsz	wreg,f,c
 33149  005B94  D7FE               	bra	u19827
 33150  005B96  2F64               	decfsz	??_SystemBlockingWaitMs& (0+255),f,b
 33151  005B98  D7FC               	bra	u19827
 33152  005B9A  F000               	nop	
 33153                           
 33154                           ;sw_timer.c: 150: ms--;
 33155  005B9C  0100               	movlb	0	; () banked
 33156  005B9E  0760               	decf	SystemBlockingWaitMs@ms& (0+255),f,b
 33157  005BA0  0E00               	movlw	0
 33158  005BA2  5B61               	subwfb	(SystemBlockingWaitMs@ms+1)& (0+255),f,b
 33159  005BA4  5B62               	subwfb	(SystemBlockingWaitMs@ms+2)& (0+255),f,b
 33160  005BA6  5B63               	subwfb	(SystemBlockingWaitMs@ms+3)& (0+255),f,b
 33161  005BA8                     l12018:
 33162                           
 33163                           ; BSR set to: 0
 33164  005BA8  5160               	movf	SystemBlockingWaitMs@ms& (0+255),w,b
 33165  005BAA  1161               	iorwf	(SystemBlockingWaitMs@ms+1)& (0+255),w,b
 33166  005BAC  1162               	iorwf	(SystemBlockingWaitMs@ms+2)& (0+255),w,b
 33167  005BAE  1163               	iorwf	(SystemBlockingWaitMs@ms+3)& (0+255),w,b
 33168  005BB0  E1EC               	bnz	l12014
 33169                           
 33170                           ; BSR set to: 0
 33171  005BB2  0012               	return		;funcret
 33172  005BB4                     __end_of_SystemBlockingWaitMs:
 33173                           	opt stack 0
 33174                           tosu	equ	0xFFF
 33175                           tosh	equ	0xFFE
 33176                           tosl	equ	0xFFD
 33177                           pclath	equ	0xFFA
 33178                           tblptru	equ	0xFF8
 33179                           tblptrh	equ	0xFF7
 33180                           tblptrl	equ	0xFF6
 33181                           tablat	equ	0xFF5
 33182                           prodh	equ	0xFF4
 33183                           prodl	equ	0xFF3
 33184                           intcon	equ	0xFF2
 33185                           indf0	equ	0xFEF
 33186                           postinc0	equ	0xFEE
 33187                           plusw0	equ	0xFEB
 33188                           fsr0h	equ	0xFEA
 33189                           fsr0l	equ	0xFE9
 33190                           wreg	equ	0xFE8
 33191                           postinc1	equ	0xFE6
 33192                           postdec1	equ	0xFE5
 33193                           plusw1	equ	0xFE3
 33194                           fsr1h	equ	0xFE2
 33195                           fsr1l	equ	0xFE1
 33196                           indf2	equ	0xFDF
 33197                           postinc2	equ	0xFDE
 33198                           postdec2	equ	0xFDD
 33199                           plusw2	equ	0xFDB
 33200                           fsr2h	equ	0xFDA
 33201                           fsr2l	equ	0xFD9
 33202                           status	equ	0xFD8
 33203                           
 33204 ;; *************** function _HALResetPinOutputValue *****************
 33205 ;; Defined at:
 33206 ;;		line 55 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 33207 ;; Parameters:    Size  Location     Type
 33208 ;;  value           1    wreg     unsigned char 
 33209 ;; Auto vars:     Size  Location     Type
 33210 ;;  value           1    0[BANK0 ] unsigned char 
 33211 ;; Return value:  Size  Location     Type
 33212 ;;                  1    wreg      void 
 33213 ;; Registers used:
 33214 ;;		wreg, status,2, status,0
 33215 ;; Tracked objects:
 33216 ;;		On entry : 3E/1
 33217 ;;		On exit  : 3F/0
 33218 ;;		Unchanged: 0/0
 33219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 33220 ;;      Params:         0       0       0       0       0       0       0       0       0
 33221 ;;      Locals:         0       1       0       0       0       0       0       0       0
 33222 ;;      Temps:          0       0       0       0       0       0       0       0       0
 33223 ;;      Totals:         0       1       0       0       0       0       0       0       0
 33224 ;;Total ram usage:        1 bytes
 33225 ;; Hardware stack levels used:    1
 33226 ;; Hardware stack levels required when called:    7
 33227 ;; This function calls:
 33228 ;;		Nothing
 33229 ;; This function is called by:
 33230 ;;		_RADIO_Reset
 33231 ;; This function uses a non-reentrant model
 33232 ;;
 33233                           
 33234                           	psect	text174
 33235  006080                     __ptext174:
 33236                           	opt stack 0
 33237  006080                     _HALResetPinOutputValue:
 33238                           	opt stack 20
 33239                           
 33240                           ; BSR set to: 0
 33241                           ;incstack = 0
 33242                           ;HALResetPinOutputValue@value stored from wreg
 33243  006080  0100               	movlb	0	; () banked
 33244  006082  6F60               	movwf	HALResetPinOutputValue@value& (0+255),b
 33245                           
 33246                           ;radio_driver_hal.c: 57: if (value == 0)
 33247  006084  5160               	movf	HALResetPinOutputValue@value& (0+255),w,b
 33248  006086  E102               	bnz	l9866
 33249                           
 33250                           ; BSR set to: 0
 33251                           
 33252                           ;radio_driver_hal.c: 58: do { LATC0 = 0; } while(0);
 33253  006088  907B               	bcf	3963,0,c	;volatile
 33254  00608A  0012               	return	
 33255  00608C                     l9866:
 33256                           
 33257                           ; BSR set to: 0
 33258                           ;radio_driver_hal.c: 59: else if (value == 1)
 33259  00608C  0560               	decf	HALResetPinOutputValue@value& (0+255),w,b
 33260  00608E  B4D8               	btfsc	status,2,c
 33261                           
 33262                           ; BSR set to: 0
 33263                           
 33264                           ;radio_driver_hal.c: 60: do { LATC0 = 1; } while(0);
 33265  006090  807B               	bsf	3963,0,c	;volatile
 33266                           
 33267                           ; BSR set to: 0
 33268  006092  0012               	return		;funcret
 33269  006094                     __end_of_HALResetPinOutputValue:
 33270                           	opt stack 0
 33271                           tosu	equ	0xFFF
 33272                           tosh	equ	0xFFE
 33273                           tosl	equ	0xFFD
 33274                           pclath	equ	0xFFA
 33275                           tblptru	equ	0xFF8
 33276                           tblptrh	equ	0xFF7
 33277                           tblptrl	equ	0xFF6
 33278                           tablat	equ	0xFF5
 33279                           prodh	equ	0xFF4
 33280                           prodl	equ	0xFF3
 33281                           intcon	equ	0xFF2
 33282                           indf0	equ	0xFEF
 33283                           postinc0	equ	0xFEE
 33284                           plusw0	equ	0xFEB
 33285                           fsr0h	equ	0xFEA
 33286                           fsr0l	equ	0xFE9
 33287                           wreg	equ	0xFE8
 33288                           postinc1	equ	0xFE6
 33289                           postdec1	equ	0xFE5
 33290                           plusw1	equ	0xFE3
 33291                           fsr1h	equ	0xFE2
 33292                           fsr1l	equ	0xFE1
 33293                           indf2	equ	0xFDF
 33294                           postinc2	equ	0xFDE
 33295                           postdec2	equ	0xFDD
 33296                           plusw2	equ	0xFDB
 33297                           fsr2h	equ	0xFDA
 33298                           fsr2l	equ	0xFD9
 33299                           status	equ	0xFD8
 33300                           
 33301 ;; *************** function _HALResetPinMakeOutput *****************
 33302 ;; Defined at:
 33303 ;;		line 45 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 33304 ;; Parameters:    Size  Location     Type
 33305 ;;		None
 33306 ;; Auto vars:     Size  Location     Type
 33307 ;;		None
 33308 ;; Return value:  Size  Location     Type
 33309 ;;                  1    wreg      void 
 33310 ;; Registers used:
 33311 ;;		None
 33312 ;; Tracked objects:
 33313 ;;		On entry : 3E/1
 33314 ;;		On exit  : 3E/0
 33315 ;;		Unchanged: 3E/0
 33316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 33317 ;;      Params:         0       0       0       0       0       0       0       0       0
 33318 ;;      Locals:         0       0       0       0       0       0       0       0       0
 33319 ;;      Temps:          0       0       0       0       0       0       0       0       0
 33320 ;;      Totals:         0       0       0       0       0       0       0       0       0
 33321 ;;Total ram usage:        0 bytes
 33322 ;; Hardware stack levels used:    1
 33323 ;; Hardware stack levels required when called:    7
 33324 ;; This function calls:
 33325 ;;		Nothing
 33326 ;; This function is called by:
 33327 ;;		_RADIO_Reset
 33328 ;; This function uses a non-reentrant model
 33329 ;;
 33330                           
 33331                           	psect	text175
 33332  006246                     __ptext175:
 33333                           	opt stack 0
 33334  006246                     _HALResetPinMakeOutput:
 33335                           	opt stack 20
 33336                           
 33337                           ; BSR set to: 0
 33338                           ;incstack = 0
 33339                           ;radio_driver_hal.c: 47: do { TRISC0 = 0; } while(0);
 33340  006246  9083               	bcf	3971,0,c	;volatile
 33341  006248  0012               	return		;funcret
 33342  00624A                     __end_of_HALResetPinMakeOutput:
 33343                           	opt stack 0
 33344                           tosu	equ	0xFFF
 33345                           tosh	equ	0xFFE
 33346                           tosl	equ	0xFFD
 33347                           pclath	equ	0xFFA
 33348                           tblptru	equ	0xFF8
 33349                           tblptrh	equ	0xFF7
 33350                           tblptrl	equ	0xFF6
 33351                           tablat	equ	0xFF5
 33352                           prodh	equ	0xFF4
 33353                           prodl	equ	0xFF3
 33354                           intcon	equ	0xFF2
 33355                           indf0	equ	0xFEF
 33356                           postinc0	equ	0xFEE
 33357                           plusw0	equ	0xFEB
 33358                           fsr0h	equ	0xFEA
 33359                           fsr0l	equ	0xFE9
 33360                           wreg	equ	0xFE8
 33361                           postinc1	equ	0xFE6
 33362                           postdec1	equ	0xFE5
 33363                           plusw1	equ	0xFE3
 33364                           fsr1h	equ	0xFE2
 33365                           fsr1l	equ	0xFE1
 33366                           indf2	equ	0xFDF
 33367                           postinc2	equ	0xFDE
 33368                           postdec2	equ	0xFDD
 33369                           plusw2	equ	0xFDB
 33370                           fsr2h	equ	0xFDA
 33371                           fsr2l	equ	0xFD9
 33372                           status	equ	0xFD8
 33373                           
 33374 ;; *************** function _HALResetPinMakeInput *****************
 33375 ;; Defined at:
 33376 ;;		line 50 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 33377 ;; Parameters:    Size  Location     Type
 33378 ;;		None
 33379 ;; Auto vars:     Size  Location     Type
 33380 ;;		None
 33381 ;; Return value:  Size  Location     Type
 33382 ;;                  1    wreg      void 
 33383 ;; Registers used:
 33384 ;;		None
 33385 ;; Tracked objects:
 33386 ;;		On entry : 3F/0
 33387 ;;		On exit  : 3F/0
 33388 ;;		Unchanged: 3F/0
 33389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 33390 ;;      Params:         0       0       0       0       0       0       0       0       0
 33391 ;;      Locals:         0       0       0       0       0       0       0       0       0
 33392 ;;      Temps:          0       0       0       0       0       0       0       0       0
 33393 ;;      Totals:         0       0       0       0       0       0       0       0       0
 33394 ;;Total ram usage:        0 bytes
 33395 ;; Hardware stack levels used:    1
 33396 ;; Hardware stack levels required when called:    7
 33397 ;; This function calls:
 33398 ;;		Nothing
 33399 ;; This function is called by:
 33400 ;;		_RADIO_Reset
 33401 ;; This function uses a non-reentrant model
 33402 ;;
 33403                           
 33404                           	psect	text176
 33405  00624A                     __ptext176:
 33406                           	opt stack 0
 33407  00624A                     _HALResetPinMakeInput:
 33408                           	opt stack 20
 33409                           
 33410                           ; BSR set to: 0
 33411                           
 33412                           ;incstack = 0
 33413                           ;radio_driver_hal.c: 52: do { TRISC0 = 1; } while(0);
 33414  00624A  8083               	bsf	3971,0,c	;volatile
 33415                           
 33416                           ; BSR set to: 0
 33417  00624C  0012               	return		;funcret
 33418  00624E                     __end_of_HALResetPinMakeInput:
 33419                           	opt stack 0
 33420                           tosu	equ	0xFFF
 33421                           tosh	equ	0xFFE
 33422                           tosl	equ	0xFFD
 33423                           pclath	equ	0xFFA
 33424                           tblptru	equ	0xFF8
 33425                           tblptrh	equ	0xFF7
 33426                           tblptrl	equ	0xFF6
 33427                           tablat	equ	0xFF5
 33428                           prodh	equ	0xFF4
 33429                           prodl	equ	0xFF3
 33430                           intcon	equ	0xFF2
 33431                           indf0	equ	0xFEF
 33432                           postinc0	equ	0xFEE
 33433                           plusw0	equ	0xFEB
 33434                           fsr0h	equ	0xFEA
 33435                           fsr0l	equ	0xFE9
 33436                           wreg	equ	0xFE8
 33437                           postinc1	equ	0xFE6
 33438                           postdec1	equ	0xFE5
 33439                           plusw1	equ	0xFE3
 33440                           fsr1h	equ	0xFE2
 33441                           fsr1l	equ	0xFE1
 33442                           indf2	equ	0xFDF
 33443                           postinc2	equ	0xFDE
 33444                           postdec2	equ	0xFDD
 33445                           plusw2	equ	0xFDB
 33446                           fsr2h	equ	0xFDA
 33447                           fsr2l	equ	0xFD9
 33448                           status	equ	0xFD8
 33449                           
 33450 ;; *************** function _LORAWAN_LinkCheckConfigure *****************
 33451 ;; Defined at:
 33452 ;;		line 755 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 33453 ;; Parameters:    Size  Location     Type
 33454 ;;  period          2   60[BANK0 ] unsigned int 
 33455 ;; Auto vars:     Size  Location     Type
 33456 ;;  iCtr            1   70[BANK0 ] unsigned char 
 33457 ;; Return value:  Size  Location     Type
 33458 ;;                  1    wreg      void 
 33459 ;; Registers used:
 33460 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 33461 ;; Tracked objects:
 33462 ;;		On entry : 3F/0
 33463 ;;		On exit  : 3D/0
 33464 ;;		Unchanged: 0/0
 33465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 33466 ;;      Params:         0       2       0       0       0       0       0       0       0
 33467 ;;      Locals:         0       5       0       0       0       0       0       0       0
 33468 ;;      Temps:          0       4       0       0       0       0       0       0       0
 33469 ;;      Totals:         0      11       0       0       0       0       0       0       0
 33470 ;;Total ram usage:       11 bytes
 33471 ;; Hardware stack levels used:    1
 33472 ;; Hardware stack levels required when called:   11
 33473 ;; This function calls:
 33474 ;;		_SwTimerSetTimeout
 33475 ;;		_SwTimerStart
 33476 ;;		_SwTimerStop
 33477 ;;		___lldiv
 33478 ;;		___lmul
 33479 ;; This function is called by:
 33480 ;;		_LORAWAN_Reset
 33481 ;; This function uses a non-reentrant model
 33482 ;;
 33483                           
 33484                           	psect	text177
 33485  003128                     __ptext177:
 33486                           	opt stack 0
 33487  003128                     _LORAWAN_LinkCheckConfigure:
 33488                           	opt stack 17
 33489                           
 33490                           ; BSR set to: 0
 33491                           ;lorawan.c: 757: uint8_t iCtr;
 33492                           ;lorawan.c: 759: loRa.periodForLinkCheck = period * 1000UL;
 33493                           
 33494                           ; BSR set to: 0
 33495                           ;incstack = 0
 33496  003128  C09C  F090         	movff	LORAWAN_LinkCheckConfigure@period,___lmul@multiplier
 33497  00312C  C09D  F091         	movff	LORAWAN_LinkCheckConfigure@period+1,___lmul@multiplier+1
 33498  003130  6B92               	clrf	(___lmul@multiplier+2)& (0+255),b
 33499  003132  6B93               	clrf	(___lmul@multiplier+3)& (0+255),b
 33500  003134  0EE8               	movlw	232
 33501  003136  6F94               	movwf	___lmul@multiplicand& (0+255),b
 33502  003138  0E03               	movlw	3
 33503  00313A  ECC5  F008         	call	PL438	;call to abstracted procedure
 33504  00313E  EC25  F02A         	call	___lmul	;wreg free
 33505  003142  C090  F2CC         	movff	?___lmul,_loRa+204
 33506  003146  C091  F2CD         	movff	?___lmul+1,_loRa+205
 33507  00314A  C092  F2CE         	movff	?___lmul+2,_loRa+206
 33508  00314E  C093  F2CF         	movff	?___lmul+3,_loRa+207
 33509                           
 33510                           ; BSR set to: 0
 33511                           ;lorawan.c: 761: if (period == 0)
 33512  003152  519C               	movf	LORAWAN_LinkCheckConfigure@period& (0+255),w,b
 33513  003154  119D               	iorwf	(LORAWAN_LinkCheckConfigure@period+1)& (0+255),w,b
 33514  003156  E11D               	bnz	l983
 33515                           
 33516                           ; BSR set to: 0
 33517                           ;lorawan.c: 762: {
 33518                           ;lorawan.c: 763: SwTimerStop(loRa.linkCheckTimerId);
 33519  003158  0102               	movlb	2	; () banked
 33520  00315A  51E7               	movf	(_loRa+231)& (0+255),w,b
 33521  00315C  EC65  F030         	call	_SwTimerStop
 33522                           
 33523                           ; BSR set to: 0
 33524                           ;lorawan.c: 764: loRa.macStatus.linkCheck = 0;
 33525  003160  0102               	movlb	2	; () banked
 33526  003162  9503               	bcf	(_loRa+3)& (0+255),2,b
 33527                           
 33528                           ; BSR set to: 2
 33529                           ;lorawan.c: 765: for(iCtr = 0; iCtr < loRa.crtMacCmdIndex; iCtr ++)
 33530  003164  0100               	movlb	0	; () banked
 33531  003166  6BA6               	clrf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),b
 33532  003168  D00E               	goto	l14750
 33533  00316A                     l14742:
 33534                           
 33535                           ; BSR set to: 0
 33536                           ;lorawan.c: 766: {
 33537                           ;lorawan.c: 767: if(loRa.macCommands[iCtr].receivedCid == LINK_CHECK_CID)
 33538  00316A  51A6               	movf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),w,b
 33539  00316C  ECA3  F010         	call	PL16	;call to abstracted procedure
 33540  003170  0E02               	movlw	2
 33541  003172  18DE               	xorwf	postinc2,w,c
 33542  003174  E106               	bnz	l14748
 33543                           
 33544                           ; BSR set to: 0
 33545                           ;lorawan.c: 768: {
 33546                           ;lorawan.c: 771: loRa.macCommands[iCtr].receivedCid = 0xFF;
 33547  003176  51A6               	movf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),w,b
 33548  003178  ECA3  F010         	call	PL16	;call to abstracted procedure
 33549  00317C  68DF               	setf	indf2,c
 33550                           
 33551                           ; BSR set to: 0
 33552                           ;lorawan.c: 772: loRa.crtMacCmdIndex --;
 33553  00317E  0102               	movlb	2	; () banked
 33554  003180  07A7               	decf	(_loRa+167)& (0+255),f,b
 33555  003182                     l14748:
 33556  003182  0100               	movlb	0	; () banked
 33557  003184  2BA6               	incf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),f,b
 33558  003186                     l14750:
 33559                           
 33560                           ; BSR set to: 0
 33561  003186  0102               	movlb	2	; () banked
 33562  003188  51A7               	movf	(_loRa+167)& (0+255),w,b
 33563  00318A  0100               	movlb	0	; () banked
 33564  00318C  5DA6               	subwf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),w,b
 33565  00318E  E3ED               	bnc	l14742
 33566  003190  0012               	return	
 33567  003192                     l983:
 33568                           
 33569                           ; BSR set to: 0
 33570                           ;lorawan.c: 776: else
 33571                           ;lorawan.c: 777: {
 33572                           ;lorawan.c: 778: loRa.macStatus.linkCheck = 1;
 33573  003192  0102               	movlb	2	; () banked
 33574  003194  8503               	bsf	(_loRa+3)& (0+255),2,b
 33575                           
 33576                           ;lorawan.c: 781: if (loRa.macStatus.networkJoined == 1)
 33577  003196  A902               	btfss	(_loRa+2)& (0+255),4,b
 33578  003198  0012               	return	
 33579                           
 33580                           ; BSR set to: 2
 33581                           ;lorawan.c: 782: {
 33582                           ;lorawan.c: 783: SwTimerSetTimeout(loRa.linkCheckTimerId, ((loRa.periodForLinkCheck) < 0
      +                          x000FFFFFUL ? ( (((uint32_t)(loRa.periodForLinkCheck)) << (12)) / 125UL ) : ( (((uint32_
      +                          t)(loRa.periodForLinkCheck)) / 125UL) << (12) ) ));
 33583  00319A  51CF               	movf	(_loRa+207)& (0+255),w,b
 33584  00319C  E103               	bnz	u17290
 33585  00319E  EC0B  F018         	call	PL244	;call to abstracted procedure
 33586  0031A2  E30C               	bnc	l14756
 33587  0031A4                     u17290:
 33588                           
 33589                           ; BSR set to: 2
 33590  0031A4  EC01  F018         	call	PL58	;call to abstracted procedure
 33591  0031A8  EC77  F011         	call	PL32	;call to abstracted procedure
 33592  0031AC  EC1B  F025         	call	___lldiv	;wreg free
 33593  0031B0  0E0C               	movlw	12
 33594  0031B2                     u17305:
 33595  0031B2  EC85  F011         	call	PL172	;call to abstracted procedure
 33596  0031B6  2EE8               	decfsz	wreg,f,c
 33597  0031B8  D7FC               	goto	u17305
 33598  0031BA  D01E               	goto	L24
 33599  0031BC                     l14756:
 33600                           
 33601                           ; BSR set to: 2
 33602  0031BC  C2CC  F09E         	movff	_loRa+204,??_LORAWAN_LinkCheckConfigure
 33603  0031C0  C2CD  F09F         	movff	_loRa+205,??_LORAWAN_LinkCheckConfigure+1
 33604  0031C4  C2CE  F0A0         	movff	_loRa+206,??_LORAWAN_LinkCheckConfigure+2
 33605  0031C8  C2CF  F0A1         	movff	_loRa+207,??_LORAWAN_LinkCheckConfigure+3
 33606  0031CC  0E0C               	movlw	12
 33607  0031CE                     u17315:
 33608  0031CE  90D8               	bcf	status,0,c
 33609  0031D0  0100               	movlb	0	; () banked
 33610  0031D2  379E               	rlcf	??_LORAWAN_LinkCheckConfigure& (0+255),f,b
 33611  0031D4  379F               	rlcf	(??_LORAWAN_LinkCheckConfigure+1)& (0+255),f,b
 33612  0031D6  37A0               	rlcf	(??_LORAWAN_LinkCheckConfigure+2)& (0+255),f,b
 33613  0031D8  37A1               	rlcf	(??_LORAWAN_LinkCheckConfigure+3)& (0+255),f,b
 33614  0031DA  2EE8               	decfsz	wreg,f,c
 33615  0031DC  D7F8               	goto	u17315
 33616  0031DE  C09E  F060         	movff	??_LORAWAN_LinkCheckConfigure,___lldiv@dividend
 33617  0031E2  C09F  F061         	movff	??_LORAWAN_LinkCheckConfigure+1,___lldiv@dividend+1
 33618  0031E6  C0A0  F062         	movff	??_LORAWAN_LinkCheckConfigure+2,___lldiv@dividend+2
 33619  0031EA  C0A1  F063         	movff	??_LORAWAN_LinkCheckConfigure+3,___lldiv@dividend+3
 33620  0031EE  0E7D               	movlw	125
 33621  0031F0  EC77  F011         	call	PL32	;call to abstracted procedure
 33622  0031F4  EC1B  F025         	call	___lldiv	;wreg free
 33623  0031F8                     L24:
 33624  0031F8  C060  F0A2         	movff	?___lldiv,_LORAWAN_LinkCheckConfigure$2319
 33625  0031FC  C061  F0A3         	movff	?___lldiv+1,_LORAWAN_LinkCheckConfigure$2319+1
 33626  003200  C062  F0A4         	movff	?___lldiv+2,_LORAWAN_LinkCheckConfigure$2319+2
 33627  003204  C063  F0A5         	movff	?___lldiv+3,_LORAWAN_LinkCheckConfigure$2319+3
 33628                           
 33629                           ; BSR set to: 0
 33630  003208  C0A2  F06D         	movff	_LORAWAN_LinkCheckConfigure$2319,SwTimerSetTimeout@timeout
 33631  00320C  C0A3  F06E         	movff	_LORAWAN_LinkCheckConfigure$2319+1,SwTimerSetTimeout@timeout+1
 33632  003210  C0A4  F06F         	movff	_LORAWAN_LinkCheckConfigure$2319+2,SwTimerSetTimeout@timeout+2
 33633  003214  C0A5  F070         	movff	_LORAWAN_LinkCheckConfigure$2319+3,SwTimerSetTimeout@timeout+3
 33634  003218  0102               	movlb	2	; () banked
 33635  00321A  51E7               	movf	(_loRa+231)& (0+255),w,b
 33636  00321C  EC11  F02C         	call	_SwTimerSetTimeout
 33637                           
 33638                           ; BSR set to: 0
 33639                           ;lorawan.c: 784: SwTimerStart(loRa.linkCheckTimerId);
 33640  003220  0102               	movlb	2	; () banked
 33641  003222  51E7               	movf	(_loRa+231)& (0+255),w,b
 33642  003224  EFC4  F025         	goto	_SwTimerStart
 33643  003228                     __end_of_LORAWAN_LinkCheckConfigure:
 33644                           	opt stack 0
 33645                           tosu	equ	0xFFF
 33646                           tosh	equ	0xFFE
 33647                           tosl	equ	0xFFD
 33648                           pclath	equ	0xFFA
 33649                           tblptru	equ	0xFF8
 33650                           tblptrh	equ	0xFF7
 33651                           tblptrl	equ	0xFF6
 33652                           tablat	equ	0xFF5
 33653                           prodh	equ	0xFF4
 33654                           prodl	equ	0xFF3
 33655                           intcon	equ	0xFF2
 33656                           indf0	equ	0xFEF
 33657                           postinc0	equ	0xFEE
 33658                           plusw0	equ	0xFEB
 33659                           fsr0h	equ	0xFEA
 33660                           fsr0l	equ	0xFE9
 33661                           wreg	equ	0xFE8
 33662                           postinc1	equ	0xFE6
 33663                           postdec1	equ	0xFE5
 33664                           plusw1	equ	0xFE3
 33665                           fsr1h	equ	0xFE2
 33666                           fsr1l	equ	0xFE1
 33667                           indf2	equ	0xFDF
 33668                           postinc2	equ	0xFDE
 33669                           postdec2	equ	0xFDD
 33670                           plusw2	equ	0xFDB
 33671                           fsr2h	equ	0xFDA
 33672                           fsr2l	equ	0xFD9
 33673                           status	equ	0xFD8
 33674                           
 33675 ;; *************** function ___lmul *****************
 33676 ;; Defined at:
 33677 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
 33678 ;; Parameters:    Size  Location     Type
 33679 ;;  multiplier      4   48[BANK0 ] unsigned long 
 33680 ;;  multiplicand    4   52[BANK0 ] unsigned long 
 33681 ;; Auto vars:     Size  Location     Type
 33682 ;;  product         4   56[BANK0 ] unsigned long 
 33683 ;; Return value:  Size  Location     Type
 33684 ;;                  4   48[BANK0 ] unsigned long 
 33685 ;; Registers used:
 33686 ;;		wreg, status,2, status,0
 33687 ;; Tracked objects:
 33688 ;;		On entry : 3F/0
 33689 ;;		On exit  : 3F/0
 33690 ;;		Unchanged: 0/0
 33691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 33692 ;;      Params:         0       8       0       0       0       0       0       0       0
 33693 ;;      Locals:         0       4       0       0       0       0       0       0       0
 33694 ;;      Temps:          0       0       0       0       0       0       0       0       0
 33695 ;;      Totals:         0      12       0       0       0       0       0       0       0
 33696 ;;Total ram usage:       12 bytes
 33697 ;; Hardware stack levels used:    1
 33698 ;; Hardware stack levels required when called:    7
 33699 ;; This function calls:
 33700 ;;		Nothing
 33701 ;; This function is called by:
 33702 ;;		_LORAWAN_LinkCheckConfigure
 33703 ;;		_LORAWAN_TxDone
 33704 ;;		_ExecuteNewChannel
 33705 ;;		_ExecuteRxParamSetupReq
 33706 ;;		_UpdateCfList
 33707 ;;		_RADIO_WriteConfiguration
 33708 ;;		_RADIO_TxDone
 33709 ;;		_RADIO_FSKPacketSent
 33710 ;;		_rand
 33711 ;; This function uses a non-reentrant model
 33712 ;;
 33713                           
 33714                           	psect	text178
 33715  00544A                     __ptext178:
 33716                           	opt stack 0
 33717  00544A                     ___lmul:
 33718                           	opt stack 17
 33719                           
 33720                           ; BSR set to: 0
 33721                           
 33722                           ;incstack = 0
 33723  00544A  6B98               	clrf	___lmul@product& (0+255),b
 33724  00544C  6B99               	clrf	(___lmul@product+1)& (0+255),b
 33725  00544E  6B9A               	clrf	(___lmul@product+2)& (0+255),b
 33726  005450  6B9B               	clrf	(___lmul@product+3)& (0+255),b
 33727  005452                     l2660:
 33728                           
 33729                           ; BSR set to: 0
 33730  005452  A190               	btfss	___lmul@multiplier& (0+255),0,b
 33731  005454  D008               	goto	l12058
 33732                           
 33733                           ; BSR set to: 0
 33734  005456  5194               	movf	___lmul@multiplicand& (0+255),w,b
 33735  005458  2798               	addwf	___lmul@product& (0+255),f,b
 33736  00545A  5195               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 33737  00545C  2399               	addwfc	(___lmul@product+1)& (0+255),f,b
 33738  00545E  5196               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 33739  005460  239A               	addwfc	(___lmul@product+2)& (0+255),f,b
 33740  005462  5197               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 33741  005464  239B               	addwfc	(___lmul@product+3)& (0+255),f,b
 33742  005466                     l12058:
 33743                           
 33744                           ; BSR set to: 0
 33745  005466  90D8               	bcf	status,0,c
 33746  005468  3794               	rlcf	___lmul@multiplicand& (0+255),f,b
 33747  00546A  3795               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 33748  00546C  3796               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 33749  00546E  3797               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 33750                           
 33751                           ; BSR set to: 0
 33752  005470  90D8               	bcf	status,0,c
 33753  005472  3393               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 33754  005474  3392               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 33755  005476  3391               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 33756  005478  3390               	rrcf	___lmul@multiplier& (0+255),f,b
 33757  00547A  5190               	movf	___lmul@multiplier& (0+255),w,b
 33758  00547C  1191               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 33759  00547E  1192               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 33760  005480  1193               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 33761  005482  E1E7               	bnz	l2660
 33762                           
 33763                           ; BSR set to: 0
 33764  005484  C098  F090         	movff	___lmul@product,?___lmul
 33765  005488  C099  F091         	movff	___lmul@product+1,?___lmul+1
 33766  00548C  C09A  F092         	movff	___lmul@product+2,?___lmul+2
 33767  005490  C09B  F093         	movff	___lmul@product+3,?___lmul+3
 33768                           
 33769                           ; BSR set to: 0
 33770  005494  0012               	return		;funcret
 33771  005496                     __end_of___lmul:
 33772                           	opt stack 0
 33773                           tosu	equ	0xFFF
 33774                           tosh	equ	0xFFE
 33775                           tosl	equ	0xFFD
 33776                           pclath	equ	0xFFA
 33777                           tblptru	equ	0xFF8
 33778                           tblptrh	equ	0xFF7
 33779                           tblptrl	equ	0xFF6
 33780                           tablat	equ	0xFF5
 33781                           prodh	equ	0xFF4
 33782                           prodl	equ	0xFF3
 33783                           intcon	equ	0xFF2
 33784                           indf0	equ	0xFEF
 33785                           postinc0	equ	0xFEE
 33786                           plusw0	equ	0xFEB
 33787                           fsr0h	equ	0xFEA
 33788                           fsr0l	equ	0xFE9
 33789                           wreg	equ	0xFE8
 33790                           postinc1	equ	0xFE6
 33791                           postdec1	equ	0xFE5
 33792                           plusw1	equ	0xFE3
 33793                           fsr1h	equ	0xFE2
 33794                           fsr1l	equ	0xFE1
 33795                           indf2	equ	0xFDF
 33796                           postinc2	equ	0xFDE
 33797                           postdec2	equ	0xFDD
 33798                           plusw2	equ	0xFDB
 33799                           fsr2h	equ	0xFDA
 33800                           fsr2l	equ	0xFD9
 33801                           status	equ	0xFD8
 33802                           
 33803 ;; *************** function ___lldiv *****************
 33804 ;; Defined at:
 33805 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
 33806 ;; Parameters:    Size  Location     Type
 33807 ;;  dividend        4    0[BANK0 ] unsigned long 
 33808 ;;  divisor         4    4[BANK0 ] unsigned long 
 33809 ;; Auto vars:     Size  Location     Type
 33810 ;;  quotient        4    8[BANK0 ] unsigned long 
 33811 ;;  counter         1   12[BANK0 ] unsigned char 
 33812 ;; Return value:  Size  Location     Type
 33813 ;;                  4    0[BANK0 ] unsigned long 
 33814 ;; Registers used:
 33815 ;;		wreg, status,2, status,0
 33816 ;; Tracked objects:
 33817 ;;		On entry : 3F/0
 33818 ;;		On exit  : 3F/0
 33819 ;;		Unchanged: 0/0
 33820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 33821 ;;      Params:         0       8       0       0       0       0       0       0       0
 33822 ;;      Locals:         0       5       0       0       0       0       0       0       0
 33823 ;;      Temps:          0       0       0       0       0       0       0       0       0
 33824 ;;      Totals:         0      13       0       0       0       0       0       0       0
 33825 ;;Total ram usage:       13 bytes
 33826 ;; Hardware stack levels used:    1
 33827 ;; Hardware stack levels required when called:    7
 33828 ;; This function calls:
 33829 ;;		Nothing
 33830 ;; This function is called by:
 33831 ;;		_LORAWAN_LinkCheckConfigure
 33832 ;;		_LORAWAN_LinkCheckCallback
 33833 ;;		_UpdateRetransmissionAckTimeoutState
 33834 ;;		_UpdateJoinSuccessState
 33835 ;;		_LORAWAN_TxDone
 33836 ;;		_LORAWAN_RxTimeout
 33837 ;;		_StartReTxTimer
 33838 ;;		_DutyCycleCallback
 33839 ;;		_RADIO_WriteFrequency
 33840 ;;		_RADIO_WriteFSKFrequencyDeviation
 33841 ;;		_RADIO_WriteFSKBitRate
 33842 ;;		_RADIO_Transmit
 33843 ;;		_RADIO_ReceiveStart
 33844 ;; This function uses a non-reentrant model
 33845 ;;
 33846                           
 33847                           	psect	text179
 33848  004A36                     __ptext179:
 33849                           	opt stack 0
 33850  004A36                     ___lldiv:
 33851                           	opt stack 20
 33852                           
 33853                           ; BSR set to: 0
 33854                           
 33855                           ; BSR set to: 0
 33856                           ;incstack = 0
 33857  004A36  6B68               	clrf	___lldiv@quotient& (0+255),b
 33858  004A38  6B69               	clrf	(___lldiv@quotient+1)& (0+255),b
 33859  004A3A  6B6A               	clrf	(___lldiv@quotient+2)& (0+255),b
 33860  004A3C  6B6B               	clrf	(___lldiv@quotient+3)& (0+255),b
 33861                           
 33862                           ; BSR set to: 0
 33863  004A3E  5164               	movf	___lldiv@divisor& (0+255),w,b
 33864  004A40  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 33865  004A42  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 33866  004A44  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 33867  004A46  E029               	bz	l2998
 33868                           
 33869                           ; BSR set to: 0
 33870  004A48  0E01               	movlw	1
 33871  004A4A  6F6C               	movwf	___lldiv@counter& (0+255),b
 33872  004A4C  D006               	goto	l12070
 33873  004A4E                     l12068:
 33874                           
 33875                           ; BSR set to: 0
 33876  004A4E  90D8               	bcf	status,0,c
 33877  004A50  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 33878  004A52  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 33879  004A54  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 33880  004A56  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 33881  004A58  2B6C               	incf	___lldiv@counter& (0+255),f,b
 33882  004A5A                     l12070:
 33883                           
 33884                           ; BSR set to: 0
 33885  004A5A  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 33886  004A5C  D7F8               	goto	l12068
 33887  004A5E                     l12072:
 33888                           
 33889                           ; BSR set to: 0
 33890  004A5E  90D8               	bcf	status,0,c
 33891  004A60  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 33892  004A62  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 33893  004A64  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 33894  004A66  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 33895                           
 33896                           ; BSR set to: 0
 33897  004A68  5164               	movf	___lldiv@divisor& (0+255),w,b
 33898  004A6A  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 33899  004A6C  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 33900  004A6E  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 33901  004A70  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 33902  004A72  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 33903  004A74  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 33904  004A76  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 33905  004A78  E309               	bnc	l12080
 33906                           
 33907                           ; BSR set to: 0
 33908  004A7A  5164               	movf	___lldiv@divisor& (0+255),w,b
 33909  004A7C  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 33910  004A7E  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 33911  004A80  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 33912  004A82  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 33913  004A84  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 33914  004A86  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 33915  004A88  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 33916                           
 33917                           ; BSR set to: 0
 33918  004A8A  8168               	bsf	___lldiv@quotient& (0+255),0,b
 33919  004A8C                     l12080:
 33920                           
 33921                           ; BSR set to: 0
 33922  004A8C  90D8               	bcf	status,0,c
 33923  004A8E  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 33924  004A90  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 33925  004A92  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 33926  004A94  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 33927                           
 33928                           ; BSR set to: 0
 33929  004A96  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 33930  004A98  D7E2               	goto	l12072
 33931  004A9A                     l2998:
 33932                           
 33933                           ; BSR set to: 0
 33934  004A9A  C068  F060         	movff	___lldiv@quotient,?___lldiv
 33935  004A9E  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 33936  004AA2  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 33937  004AA6  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 33938                           
 33939                           ; BSR set to: 0
 33940  004AAA  0012               	return		;funcret
 33941  004AAC                     __end_of___lldiv:
 33942                           	opt stack 0
 33943                           tosu	equ	0xFFF
 33944                           tosh	equ	0xFFE
 33945                           tosl	equ	0xFFD
 33946                           pclath	equ	0xFFA
 33947                           tblptru	equ	0xFF8
 33948                           tblptrh	equ	0xFF7
 33949                           tblptrl	equ	0xFF6
 33950                           tablat	equ	0xFF5
 33951                           prodh	equ	0xFF4
 33952                           prodl	equ	0xFF3
 33953                           intcon	equ	0xFF2
 33954                           indf0	equ	0xFEF
 33955                           postinc0	equ	0xFEE
 33956                           plusw0	equ	0xFEB
 33957                           fsr0h	equ	0xFEA
 33958                           fsr0l	equ	0xFE9
 33959                           wreg	equ	0xFE8
 33960                           postinc1	equ	0xFE6
 33961                           postdec1	equ	0xFE5
 33962                           plusw1	equ	0xFE3
 33963                           fsr1h	equ	0xFE2
 33964                           fsr1l	equ	0xFE1
 33965                           indf2	equ	0xFDF
 33966                           postinc2	equ	0xFDE
 33967                           postdec2	equ	0xFDD
 33968                           plusw2	equ	0xFDB
 33969                           fsr2h	equ	0xFDA
 33970                           fsr2l	equ	0xFD9
 33971                           status	equ	0xFD8
 33972                           
 33973 ;; *************** function _SwTimerStop *****************
 33974 ;; Defined at:
 33975 ;;		line 233 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 33976 ;; Parameters:    Size  Location     Type
 33977 ;;  timerId         1    wreg     unsigned char 
 33978 ;; Auto vars:     Size  Location     Type
 33979 ;;  timerId         1    0[BANK0 ] unsigned char 
 33980 ;; Return value:  Size  Location     Type
 33981 ;;                  1    wreg      void 
 33982 ;; Registers used:
 33983 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 33984 ;; Tracked objects:
 33985 ;;		On entry : 3C/1
 33986 ;;		On exit  : 3F/0
 33987 ;;		Unchanged: 0/0
 33988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 33989 ;;      Params:         0       0       0       0       0       0       0       0       0
 33990 ;;      Locals:         0       1       0       0       0       0       0       0       0
 33991 ;;      Temps:          0       0       0       0       0       0       0       0       0
 33992 ;;      Totals:         0       1       0       0       0       0       0       0       0
 33993 ;;Total ram usage:        1 bytes
 33994 ;; Hardware stack levels used:    1
 33995 ;; Hardware stack levels required when called:    7
 33996 ;; This function calls:
 33997 ;;		Nothing
 33998 ;; This function is called by:
 33999 ;;		_LORAWAN_LinkCheckConfigure
 34000 ;;		_LORAWAN_RxDone
 34001 ;;		_LORAWAN_TxDone
 34002 ;;		_StopAllSoftwareTimers
 34003 ;;		_RADIO_Init
 34004 ;;		_RADIO_Transmit
 34005 ;;		_RADIO_RxDone
 34006 ;;		_RADIO_FSKPayloadReady
 34007 ;;		_RADIO_RxTimeout
 34008 ;;		_RADIO_TxDone
 34009 ;;		_RADIO_FSKPacketSent
 34010 ;;		_RADIO_RxFSKTimeout
 34011 ;; This function uses a non-reentrant model
 34012 ;;
 34013                           
 34014                           	psect	text180
 34015  0060CA                     __ptext180:
 34016                           	opt stack 0
 34017  0060CA                     _SwTimerStop:
 34018                           	opt stack 20
 34019                           
 34020                           ; BSR set to: 0
 34021                           ;incstack = 0
 34022                           ;SwTimerStop@timerId stored from wreg
 34023  0060CA  0100               	movlb	0	; () banked
 34024  0060CC  6F60               	movwf	SwTimerStop@timerId& (0+255),b
 34025                           
 34026                           ;sw_timer.c: 235: (INTCONbits.GIE = 0);
 34027  0060CE  9EF2               	bcf	intcon,7,c	;volatile
 34028                           
 34029                           ;sw_timer.c: 236: swTimers[timerId].running = 0;
 34030  0060D0  5160               	movf	SwTimerStop@timerId& (0+255),w,b
 34031  0060D2  ECDB  F023         	call	PL40	;call to abstracted procedure
 34032  0060D6  6ADF               	clrf	indf2,c
 34033                           
 34034                           ; BSR set to: 0
 34035                           ;sw_timer.c: 237: (INTCONbits.GIE = 1);
 34036  0060D8  8EF2               	bsf	intcon,7,c	;volatile
 34037                           
 34038                           ; BSR set to: 0
 34039  0060DA  0C00               	retlw	0	;funcret
 34040  0060DC                     __end_of_SwTimerStop:
 34041                           	opt stack 0
 34042                           tosu	equ	0xFFF
 34043                           tosh	equ	0xFFE
 34044                           tosl	equ	0xFFD
 34045                           pclath	equ	0xFFA
 34046                           tblptru	equ	0xFF8
 34047                           tblptrh	equ	0xFF7
 34048                           tblptrl	equ	0xFF6
 34049                           tablat	equ	0xFF5
 34050                           prodh	equ	0xFF4
 34051                           prodl	equ	0xFF3
 34052                           intcon	equ	0xFF2
 34053                           indf0	equ	0xFEF
 34054                           postinc0	equ	0xFEE
 34055                           plusw0	equ	0xFEB
 34056                           fsr0h	equ	0xFEA
 34057                           fsr0l	equ	0xFE9
 34058                           wreg	equ	0xFE8
 34059                           postinc1	equ	0xFE6
 34060                           postdec1	equ	0xFE5
 34061                           plusw1	equ	0xFE3
 34062                           fsr1h	equ	0xFE2
 34063                           fsr1l	equ	0xFE1
 34064                           indf2	equ	0xFDF
 34065                           postinc2	equ	0xFDE
 34066                           postdec2	equ	0xFDD
 34067                           plusw2	equ	0xFDB
 34068                           fsr2h	equ	0xFDA
 34069                           fsr2l	equ	0xFD9
 34070                           status	equ	0xFD8
 34071                           
 34072 ;; *************** function _SwTimerStart *****************
 34073 ;; Defined at:
 34074 ;;		line 218 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 34075 ;; Parameters:    Size  Location     Type
 34076 ;;  timerId         1    wreg     unsigned char 
 34077 ;; Auto vars:     Size  Location     Type
 34078 ;;  timerId         1   47[BANK0 ] unsigned char 
 34079 ;;  ticksRemaini    4   43[BANK0 ] unsigned long 
 34080 ;; Return value:  Size  Location     Type
 34081 ;;                  1    wreg      void 
 34082 ;; Registers used:
 34083 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 34084 ;; Tracked objects:
 34085 ;;		On entry : 3C/2
 34086 ;;		On exit  : 3F/0
 34087 ;;		Unchanged: 0/0
 34088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 34089 ;;      Params:         0       0       0       0       0       0       0       0       0
 34090 ;;      Locals:         0       5       0       0       0       0       0       0       0
 34091 ;;      Temps:          0       4       0       0       0       0       0       0       0
 34092 ;;      Totals:         0       9       0       0       0       0       0       0       0
 34093 ;;Total ram usage:        9 bytes
 34094 ;; Hardware stack levels used:    1
 34095 ;; Hardware stack levels required when called:   10
 34096 ;; This function calls:
 34097 ;;		_SwTimersInterrupt
 34098 ;;		_TMR_OverrideRemaining
 34099 ;; This function is called by:
 34100 ;;		_LORAWAN_Join
 34101 ;;		_LORAWAN_LinkCheckConfigure
 34102 ;;		_LORAWAN_LinkCheckCallback
 34103 ;;		_UpdateRetransmissionAckTimeoutState
 34104 ;;		_UpdateJoinSuccessState
 34105 ;;		_LORAWAN_TxDone
 34106 ;;		_LORAWAN_RxTimeout
 34107 ;;		_StartReTxTimer
 34108 ;;		_DutyCycleCallback
 34109 ;;		_RADIO_Transmit
 34110 ;;		_RADIO_ReceiveStart
 34111 ;; This function uses a non-reentrant model
 34112 ;;
 34113                           
 34114                           	psect	text181
 34115  004B88                     __ptext181:
 34116                           	opt stack 0
 34117  004B88                     _SwTimerStart:
 34118                           	opt stack 17
 34119                           
 34120                           ; BSR set to: 0
 34121                           ;incstack = 0
 34122                           ;SwTimerStart@timerId stored from wreg
 34123  004B88  0100               	movlb	0	; () banked
 34124  004B8A  6F8F               	movwf	SwTimerStart@timerId& (0+255),b
 34125                           
 34126                           ;sw_timer.c: 220: uint32_t ticksRemaining;
 34127                           ;sw_timer.c: 222: (INTCONbits.GIE = 0);
 34128  004B8C  9EF2               	bcf	intcon,7,c	;volatile
 34129                           
 34130                           ;sw_timer.c: 223: ticksRemaining = SwTimersInterrupt();
 34131  004B8E  EC32  F01F         	call	_SwTimersInterrupt	;wreg free
 34132  004B92  C076  F08B         	movff	?_SwTimersInterrupt,SwTimerStart@ticksRemaining
 34133  004B96  C077  F08C         	movff	?_SwTimersInterrupt+1,SwTimerStart@ticksRemaining+1
 34134  004B9A  C078  F08D         	movff	?_SwTimersInterrupt+2,SwTimerStart@ticksRemaining+2
 34135  004B9E  C079  F08E         	movff	?_SwTimersInterrupt+3,SwTimerStart@ticksRemaining+3
 34136                           
 34137                           ; BSR set to: 0
 34138                           ;sw_timer.c: 224: if (swTimers[timerId].ticksRemaining < ticksRemaining)
 34139  004BA2  518F               	movf	SwTimerStart@timerId& (0+255),w,b
 34140  004BA4  EC84  F01F         	call	PL10	;call to abstracted procedure
 34141  004BA8  518B               	movf	SwTimerStart@ticksRemaining& (0+255),w,b
 34142  004BAA  5CDE               	subwf	postinc2,w,c
 34143  004BAC  518C               	movf	(SwTimerStart@ticksRemaining+1)& (0+255),w,b
 34144  004BAE  58DE               	subwfb	postinc2,w,c
 34145  004BB0  518D               	movf	(SwTimerStart@ticksRemaining+2)& (0+255),w,b
 34146  004BB2  58DE               	subwfb	postinc2,w,c
 34147  004BB4  518E               	movf	(SwTimerStart@ticksRemaining+3)& (0+255),w,b
 34148  004BB6  58DE               	subwfb	postinc2,w,c
 34149  004BB8  E20B               	bc	l12406
 34150                           
 34151                           ; BSR set to: 0
 34152                           ;sw_timer.c: 225: {
 34153                           ;sw_timer.c: 226: ticksRemaining = swTimers[timerId].ticksRemaining;
 34154  004BBA  518F               	movf	SwTimerStart@timerId& (0+255),w,b
 34155  004BBC  EC84  F01F         	call	PL10	;call to abstracted procedure
 34156  004BC0  CFDE F08B          	movff	postinc2,SwTimerStart@ticksRemaining
 34157  004BC4  CFDE F08C          	movff	postinc2,SwTimerStart@ticksRemaining+1
 34158  004BC8  CFDE F08D          	movff	postinc2,SwTimerStart@ticksRemaining+2
 34159  004BCC  CFDE F08E          	movff	postinc2,SwTimerStart@ticksRemaining+3
 34160  004BD0                     l12406:
 34161                           
 34162                           ; BSR set to: 0
 34163                           ;sw_timer.c: 227: }
 34164                           ;sw_timer.c: 228: TMR_OverrideRemaining(ticksRemaining);
 34165  004BD0  C08B  F068         	movff	SwTimerStart@ticksRemaining,TMR_OverrideRemaining@ticksRemaining
 34166  004BD4  C08C  F069         	movff	SwTimerStart@ticksRemaining+1,TMR_OverrideRemaining@ticksRemaining+1
 34167  004BD8  C08D  F06A         	movff	SwTimerStart@ticksRemaining+2,TMR_OverrideRemaining@ticksRemaining+2
 34168  004BDC  C08E  F06B         	movff	SwTimerStart@ticksRemaining+3,TMR_OverrideRemaining@ticksRemaining+3
 34169  004BE0  ECA4  F024         	call	_TMR_OverrideRemaining	;wreg free
 34170                           
 34171                           ; BSR set to: 0
 34172                           ;sw_timer.c: 229: swTimers[timerId].running = 1;
 34173  004BE4  518F               	movf	SwTimerStart@timerId& (0+255),w,b
 34174  004BE6  ECDB  F023         	call	PL40	;call to abstracted procedure
 34175  004BEA  0E01               	movlw	1
 34176  004BEC  6EDF               	movwf	indf2,c
 34177                           
 34178                           ; BSR set to: 0
 34179                           ;sw_timer.c: 230: (INTCONbits.GIE = 1);
 34180  004BEE  8EF2               	bsf	intcon,7,c	;volatile
 34181                           
 34182                           ; BSR set to: 0
 34183  004BF0  0C01               	retlw	1	;funcret
 34184  004BF2                     __end_of_SwTimerStart:
 34185                           	opt stack 0
 34186                           tosu	equ	0xFFF
 34187                           tosh	equ	0xFFE
 34188                           tosl	equ	0xFFD
 34189                           pclath	equ	0xFFA
 34190                           tblptru	equ	0xFF8
 34191                           tblptrh	equ	0xFF7
 34192                           tblptrl	equ	0xFF6
 34193                           tablat	equ	0xFF5
 34194                           prodh	equ	0xFF4
 34195                           prodl	equ	0xFF3
 34196                           intcon	equ	0xFF2
 34197                           indf0	equ	0xFEF
 34198                           postinc0	equ	0xFEE
 34199                           plusw0	equ	0xFEB
 34200                           fsr0h	equ	0xFEA
 34201                           fsr0l	equ	0xFE9
 34202                           wreg	equ	0xFE8
 34203                           postinc1	equ	0xFE6
 34204                           postdec1	equ	0xFE5
 34205                           plusw1	equ	0xFE3
 34206                           fsr1h	equ	0xFE2
 34207                           fsr1l	equ	0xFE1
 34208                           indf2	equ	0xFDF
 34209                           postinc2	equ	0xFDE
 34210                           postdec2	equ	0xFDD
 34211                           plusw2	equ	0xFDB
 34212                           fsr2h	equ	0xFDA
 34213                           fsr2l	equ	0xFD9
 34214                           status	equ	0xFD8
 34215                           
 34216 ;; *************** function _TMR_OverrideRemaining *****************
 34217 ;; Defined at:
 34218 ;;		line 65 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 34219 ;; Parameters:    Size  Location     Type
 34220 ;;  ticksRemaini    4    8[BANK0 ] unsigned long 
 34221 ;; Auto vars:     Size  Location     Type
 34222 ;;  oldReloadVal    2   16[BANK0 ] unsigned int 
 34223 ;;  tmrVal          2   14[BANK0 ] unsigned int 
 34224 ;; Return value:  Size  Location     Type
 34225 ;;                  1    wreg      void 
 34226 ;; Registers used:
 34227 ;;		wreg, status,2, status,0, cstack
 34228 ;; Tracked objects:
 34229 ;;		On entry : 3F/0
 34230 ;;		On exit  : 3F/0
 34231 ;;		Unchanged: 0/0
 34232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 34233 ;;      Params:         0       4       0       0       0       0       0       0       0
 34234 ;;      Locals:         0       4       0       0       0       0       0       0       0
 34235 ;;      Temps:          0       2       0       0       0       0       0       0       0
 34236 ;;      Totals:         0      10       0       0       0       0       0       0       0
 34237 ;;Total ram usage:       10 bytes
 34238 ;; Hardware stack levels used:    1
 34239 ;; Hardware stack levels required when called:    9
 34240 ;; This function calls:
 34241 ;;		_TMR_SwapTimer
 34242 ;; This function is called by:
 34243 ;;		_SwTimerStart
 34244 ;; This function uses a non-reentrant model
 34245 ;;
 34246                           
 34247                           	psect	text182
 34248  004948                     __ptext182:
 34249                           	opt stack 0
 34250  004948                     _TMR_OverrideRemaining:
 34251                           	opt stack 17
 34252                           
 34253                           ; BSR set to: 0
 34254                           ;sw_timer.c: 67: uint16_t tmrVal;
 34255                           ;sw_timer.c: 68: uint16_t oldReloadVal;
 34256                           ;sw_timer.c: 71: if (ticksToScheduledInterrupt > 10)
 34257                           
 34258                           ; BSR set to: 0
 34259                           ;incstack = 0
 34260  004948  505B               	movf	_ticksToScheduledInterrupt+3,w,c	;volatile
 34261  00494A  105A               	iorwf	_ticksToScheduledInterrupt+2,w,c	;volatile
 34262  00494C  1059               	iorwf	_ticksToScheduledInterrupt+1,w,c	;volatile
 34263  00494E  E104               	bnz	u13270
 34264  004950  0E0B               	movlw	11
 34265  004952  5C58               	subwf	_ticksToScheduledInterrupt,w,c	;volatile
 34266  004954  A0D8               	btfss	status,0,c
 34267  004956  0012               	return	
 34268  004958                     u13270:
 34269                           
 34270                           ; BSR set to: 0
 34271                           ;sw_timer.c: 72: {
 34272                           ;sw_timer.c: 73: if (ticksRemaining < ticksToScheduledInterrupt)
 34273  004958  5058               	movf	_ticksToScheduledInterrupt,w,c	;volatile
 34274  00495A  5D68               	subwf	TMR_OverrideRemaining@ticksRemaining& (0+255),w,b
 34275  00495C  5059               	movf	_ticksToScheduledInterrupt+1,w,c	;volatile
 34276  00495E  5969               	subwfb	(TMR_OverrideRemaining@ticksRemaining+1)& (0+255),w,b
 34277  004960  505A               	movf	_ticksToScheduledInterrupt+2,w,c	;volatile
 34278  004962  596A               	subwfb	(TMR_OverrideRemaining@ticksRemaining+2)& (0+255),w,b
 34279  004964  505B               	movf	_ticksToScheduledInterrupt+3,w,c	;volatile
 34280  004966  596B               	subwfb	(TMR_OverrideRemaining@ticksRemaining+3)& (0+255),w,b
 34281  004968  B0D8               	btfsc	status,0,c
 34282  00496A  0012               	return	
 34283                           
 34284                           ; BSR set to: 0
 34285                           ;sw_timer.c: 74: {
 34286                           ;sw_timer.c: 75: ticksToScheduledInterrupt = ticksRemaining;
 34287  00496C  C068  F058         	movff	TMR_OverrideRemaining@ticksRemaining,_ticksToScheduledInterrupt	;volatile
 34288  004970  C069  F059         	movff	TMR_OverrideRemaining@ticksRemaining+1,_ticksToScheduledInterrupt+1	;volatile
 34289  004974  C06A  F05A         	movff	TMR_OverrideRemaining@ticksRemaining+2,_ticksToScheduledInterrupt+2	;volatile
 34290  004978  C06B  F05B         	movff	TMR_OverrideRemaining@ticksRemaining+3,_ticksToScheduledInterrupt+3	;volatile
 34291                           
 34292                           ;sw_timer.c: 76: oldReloadVal = reloadVal;
 34293  00497C  C0FD  F070         	movff	_reloadVal,TMR_OverrideRemaining@oldReloadVal	;volatile
 34294  004980  C0FE  F071         	movff	_reloadVal+1,TMR_OverrideRemaining@oldReloadVal+1	;volatile
 34295                           
 34296                           ; BSR set to: 0
 34297                           ;sw_timer.c: 78: reloadVal = ((uint32_t)0x10000) - ticksRemaining;
 34298  004984  5168               	movf	TMR_OverrideRemaining@ticksRemaining& (0+255),w,b
 34299  004986  0800               	sublw	0
 34300  004988  6FFD               	movwf	_reloadVal& (0+255),b	;volatile
 34301  00498A  5169               	movf	(TMR_OverrideRemaining@ticksRemaining+1)& (0+255),w,b
 34302  00498C  EC5E  F029         	call	PL422	;call to abstracted procedure
 34303                           
 34304                           ; BSR set to: 0
 34305                           ;sw_timer.c: 79: tmrVal = TMR_SwapTimer(reloadVal);
 34306  004990  C0FD  F066         	movff	_reloadVal,TMR_SwapTimer@timerVal	;volatile
 34307  004994  C0FE  F067         	movff	_reloadVal+1,TMR_SwapTimer@timerVal+1	;volatile
 34308  004998  EC63  F02C         	call	_TMR_SwapTimer	;wreg free
 34309  00499C  C066  F06E         	movff	?_TMR_SwapTimer,TMR_OverrideRemaining@tmrVal
 34310  0049A0  C067  F06F         	movff	?_TMR_SwapTimer+1,TMR_OverrideRemaining@tmrVal+1
 34311                           
 34312                           ; BSR set to: 0
 34313                           ;sw_timer.c: 80: ticksAdded += tmrVal - oldReloadVal;
 34314  0049A4  5170               	movf	TMR_OverrideRemaining@oldReloadVal& (0+255),w,b
 34315  0049A6  5D6E               	subwf	TMR_OverrideRemaining@tmrVal& (0+255),w,b
 34316  0049A8  6F6C               	movwf	??_TMR_OverrideRemaining& (0+255),b
 34317  0049AA  5171               	movf	(TMR_OverrideRemaining@oldReloadVal+1)& (0+255),w,b
 34318  0049AC  596F               	subwfb	(TMR_OverrideRemaining@tmrVal+1)& (0+255),w,b
 34319  0049AE  6F6D               	movwf	(??_TMR_OverrideRemaining+1)& (0+255),b
 34320  0049B0  516C               	movf	??_TMR_OverrideRemaining& (0+255),w,b
 34321  0049B2  2638               	addwf	_ticksAdded,f,c	;volatile
 34322  0049B4  516D               	movf	(??_TMR_OverrideRemaining+1)& (0+255),w,b
 34323  0049B6  2239               	addwfc	_ticksAdded+1,f,c	;volatile
 34324  0049B8  0E00               	movlw	0
 34325  0049BA  223A               	addwfc	_ticksAdded+2,f,c	;volatile
 34326  0049BC  223B               	addwfc	_ticksAdded+3,f,c	;volatile
 34327                           
 34328                           ; BSR set to: 0
 34329  0049BE  0C00               	retlw	0	;funcret
 34330  0049C0                     __end_of_TMR_OverrideRemaining:
 34331                           	opt stack 0
 34332                           tosu	equ	0xFFF
 34333                           tosh	equ	0xFFE
 34334                           tosl	equ	0xFFD
 34335                           pclath	equ	0xFFA
 34336                           tblptru	equ	0xFF8
 34337                           tblptrh	equ	0xFF7
 34338                           tblptrl	equ	0xFF6
 34339                           tablat	equ	0xFF5
 34340                           prodh	equ	0xFF4
 34341                           prodl	equ	0xFF3
 34342                           intcon	equ	0xFF2
 34343                           indf0	equ	0xFEF
 34344                           postinc0	equ	0xFEE
 34345                           plusw0	equ	0xFEB
 34346                           fsr0h	equ	0xFEA
 34347                           fsr0l	equ	0xFE9
 34348                           wreg	equ	0xFE8
 34349                           postinc1	equ	0xFE6
 34350                           postdec1	equ	0xFE5
 34351                           plusw1	equ	0xFE3
 34352                           fsr1h	equ	0xFE2
 34353                           fsr1l	equ	0xFE1
 34354                           indf2	equ	0xFDF
 34355                           postinc2	equ	0xFDE
 34356                           postdec2	equ	0xFDD
 34357                           plusw2	equ	0xFDB
 34358                           fsr2h	equ	0xFDA
 34359                           fsr2l	equ	0xFD9
 34360                           status	equ	0xFD8
 34361                           
 34362 ;; *************** function _TMR_SwapTimer *****************
 34363 ;; Defined at:
 34364 ;;		line 112 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 34365 ;; Parameters:    Size  Location     Type
 34366 ;;  timerVal        2    6[BANK0 ] unsigned int 
 34367 ;; Auto vars:     Size  Location     Type
 34368 ;;		None
 34369 ;; Return value:  Size  Location     Type
 34370 ;;                  2    6[BANK0 ] unsigned int 
 34371 ;; Registers used:
 34372 ;;		wreg, status,2, status,0, cstack
 34373 ;; Tracked objects:
 34374 ;;		On entry : 3F/0
 34375 ;;		On exit  : 3F/0
 34376 ;;		Unchanged: 0/0
 34377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 34378 ;;      Params:         0       2       0       0       0       0       0       0       0
 34379 ;;      Locals:         0       0       0       0       0       0       0       0       0
 34380 ;;      Temps:          0       0       0       0       0       0       0       0       0
 34381 ;;      Totals:         0       2       0       0       0       0       0       0       0
 34382 ;;Total ram usage:        2 bytes
 34383 ;; Hardware stack levels used:    1
 34384 ;; Hardware stack levels required when called:    8
 34385 ;; This function calls:
 34386 ;;		_TMR1_ReadTimer
 34387 ;;		_TMR1_WriteTimer
 34388 ;; This function is called by:
 34389 ;;		_TMR_OverrideRemaining
 34390 ;; This function uses a non-reentrant model
 34391 ;;
 34392                           
 34393                           	psect	text183
 34394  0058C6                     __ptext183:
 34395                           	opt stack 0
 34396  0058C6                     _TMR_SwapTimer:
 34397                           	opt stack 17
 34398                           
 34399                           ; BSR set to: 0
 34400                           ;sw_timer.c: 114: static uint16_t oldVal;
 34401                           ;sw_timer.c: 115: static uint16_t retVal;
 34402                           ;sw_timer.c: 117: oldVal = TMR1_ReadTimer();
 34403                           
 34404                           ; BSR set to: 0
 34405                           ;incstack = 0
 34406  0058C6  ECF0  F02E         	call	_TMR1_ReadTimer	;wreg free
 34407  0058CA  C060  F03E         	movff	?_TMR1_ReadTimer,TMR_SwapTimer@oldVal
 34408  0058CE  C061  F03F         	movff	?_TMR1_ReadTimer+1,TMR_SwapTimer@oldVal+1
 34409  0058D2                     l12022:
 34410                           
 34411                           ; BSR set to: 0
 34412  0058D2  ECF0  F02E         	call	_TMR1_ReadTimer	;wreg free
 34413  0058D6  503E               	movf	TMR_SwapTimer@oldVal,w,c
 34414  0058D8  1960               	xorwf	?_TMR1_ReadTimer& (0+255),w,b
 34415  0058DA  E103               	bnz	u12760
 34416  0058DC  503F               	movf	TMR_SwapTimer@oldVal+1,w,c
 34417  0058DE  1961               	xorwf	(?_TMR1_ReadTimer+1)& (0+255),w,b
 34418  0058E0  E0F8               	bz	l12022
 34419  0058E2                     u12760:
 34420                           
 34421                           ; BSR set to: 0
 34422                           ;sw_timer.c: 125: TMR1_WriteTimer(timerVal);
 34423  0058E2  C066  F060         	movff	TMR_SwapTimer@timerVal,TMR1_WriteTimer@timerVal
 34424  0058E6  C067  F061         	movff	TMR_SwapTimer@timerVal+1,TMR1_WriteTimer@timerVal+1
 34425  0058EA  ECE8  F02F         	call	_TMR1_WriteTimer	;wreg free
 34426                           
 34427                           ; BSR set to: 0
 34428                           ;sw_timer.c: 128: oldVal++;
 34429                           
 34430                           ; BSR set to: 0
 34431                           ;sw_timer.c: 130: retVal = oldVal;
 34432  0058EE  EC39  F02B         	call	PL296	;call to abstracted procedure
 34433                           
 34434                           ; BSR set to: 0
 34435                           ;sw_timer.c: 132: return retVal;
 34436  0058F2  C03C  F066         	movff	TMR_SwapTimer@retVal,?_TMR_SwapTimer
 34437  0058F6  C03D  F067         	movff	TMR_SwapTimer@retVal+1,?_TMR_SwapTimer+1
 34438                           
 34439                           ; BSR set to: 0
 34440  0058FA  0012               	return		;funcret
 34441  0058FC                     __end_of_TMR_SwapTimer:
 34442                           	opt stack 0
 34443                           tosu	equ	0xFFF
 34444                           tosh	equ	0xFFE
 34445                           tosl	equ	0xFFD
 34446                           pclath	equ	0xFFA
 34447                           tblptru	equ	0xFF8
 34448                           tblptrh	equ	0xFF7
 34449                           tblptrl	equ	0xFF6
 34450                           tablat	equ	0xFF5
 34451                           prodh	equ	0xFF4
 34452                           prodl	equ	0xFF3
 34453                           intcon	equ	0xFF2
 34454                           indf0	equ	0xFEF
 34455                           postinc0	equ	0xFEE
 34456                           plusw0	equ	0xFEB
 34457                           fsr0h	equ	0xFEA
 34458                           fsr0l	equ	0xFE9
 34459                           wreg	equ	0xFE8
 34460                           postinc1	equ	0xFE6
 34461                           postdec1	equ	0xFE5
 34462                           plusw1	equ	0xFE3
 34463                           fsr1h	equ	0xFE2
 34464                           fsr1l	equ	0xFE1
 34465                           indf2	equ	0xFDF
 34466                           postinc2	equ	0xFDE
 34467                           postdec2	equ	0xFDD
 34468                           plusw2	equ	0xFDB
 34469                           fsr2h	equ	0xFDA
 34470                           fsr2l	equ	0xFD9
 34471                           status	equ	0xFD8
 34472                           
 34473 ;; *************** function _TMR1_WriteTimer *****************
 34474 ;; Defined at:
 34475 ;;		line 122 in file "mcc_generated_files/tmr1.c"
 34476 ;; Parameters:    Size  Location     Type
 34477 ;;  timerVal        2    0[BANK0 ] unsigned int 
 34478 ;; Auto vars:     Size  Location     Type
 34479 ;;		None
 34480 ;; Return value:  Size  Location     Type
 34481 ;;                  1    wreg      void 
 34482 ;; Registers used:
 34483 ;;		None
 34484 ;; Tracked objects:
 34485 ;;		On entry : 3F/0
 34486 ;;		On exit  : 3F/0
 34487 ;;		Unchanged: 3F/0
 34488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 34489 ;;      Params:         0       2       0       0       0       0       0       0       0
 34490 ;;      Locals:         0       0       0       0       0       0       0       0       0
 34491 ;;      Temps:          0       0       0       0       0       0       0       0       0
 34492 ;;      Totals:         0       2       0       0       0       0       0       0       0
 34493 ;;Total ram usage:        2 bytes
 34494 ;; Hardware stack levels used:    1
 34495 ;; Hardware stack levels required when called:    7
 34496 ;; This function calls:
 34497 ;;		Nothing
 34498 ;; This function is called by:
 34499 ;;		_TMR_SwapTimer
 34500 ;; This function uses a non-reentrant model
 34501 ;;
 34502                           
 34503                           	psect	text184
 34504  005FD0                     __ptext184:
 34505                           	opt stack 0
 34506  005FD0                     _TMR1_WriteTimer:
 34507                           	opt stack 17
 34508                           
 34509                           ; BSR set to: 0
 34510                           ;tmr1.c: 124: if (T1CONbits.nT1SYNC == 1)
 34511                           
 34512                           ; BSR set to: 0
 34513                           ;incstack = 0
 34514  005FD0  A4CF               	btfss	4047,2,c	;volatile
 34515  005FD2  D005               	goto	PL380
 34516                           
 34517                           ; BSR set to: 0
 34518                           ;tmr1.c: 125: {
 34519                           ;tmr1.c: 127: T1CONbits.TMR1ON = 0;
 34520  005FD4  90CF               	bcf	4047,0,c	;volatile
 34521                           
 34522                           ;tmr1.c: 130: TMR1H = (timerVal >> 8);
 34523                           
 34524                           ;tmr1.c: 131: TMR1L = timerVal;
 34525  005FD6  D803               	call	PL380	;call to abstracted procedure
 34526                           
 34527                           ;tmr1.c: 134: T1CONbits.TMR1ON =1;
 34528  005FD8  80CF               	bsf	4047,0,c	;volatile
 34529                           
 34530                           ;tmr1.c: 135: }
 34531  005FDA  0012               	return	
 34532  005FDC                     l124:
 34533                           
 34534                           ; BSR set to: 0
 34535                           ;tmr1.c: 136: else
 34536                           ;tmr1.c: 137: {
 34537                           ;tmr1.c: 139: TMR1H = (timerVal >> 8);
 34538                           
 34539                           ;tmr1.c: 140: TMR1L = timerVal;
 34540  005FDC  D000               	goto	PL380	;call to abstracted procedure
 34541  005FDE                     __end_of_TMR1_WriteTimer:
 34542                           	opt stack 0
 34543  005FDE                     PL380:
 34544                           	opt stack 17
 34545  005FDE  C061  FFCE         	movff	TMR1_WriteTimer@timerVal+1,4046	;volatile
 34546  005FE2  C060  FFCD         	movff	TMR1_WriteTimer@timerVal,4045	;volatile
 34547  005FE6  0012               	return	
 34548  005FE8                     __end_ofPL380:
 34549                           	opt stack 0
 34550                           tosu	equ	0xFFF
 34551                           tosh	equ	0xFFE
 34552                           tosl	equ	0xFFD
 34553                           pclath	equ	0xFFA
 34554                           tblptru	equ	0xFF8
 34555                           tblptrh	equ	0xFF7
 34556                           tblptrl	equ	0xFF6
 34557                           tablat	equ	0xFF5
 34558                           prodh	equ	0xFF4
 34559                           prodl	equ	0xFF3
 34560                           intcon	equ	0xFF2
 34561                           indf0	equ	0xFEF
 34562                           postinc0	equ	0xFEE
 34563                           plusw0	equ	0xFEB
 34564                           fsr0h	equ	0xFEA
 34565                           fsr0l	equ	0xFE9
 34566                           wreg	equ	0xFE8
 34567                           postinc1	equ	0xFE6
 34568                           postdec1	equ	0xFE5
 34569                           plusw1	equ	0xFE3
 34570                           fsr1h	equ	0xFE2
 34571                           fsr1l	equ	0xFE1
 34572                           indf2	equ	0xFDF
 34573                           postinc2	equ	0xFDE
 34574                           postdec2	equ	0xFDD
 34575                           plusw2	equ	0xFDB
 34576                           fsr2h	equ	0xFDA
 34577                           fsr2l	equ	0xFD9
 34578                           status	equ	0xFD8
 34579                           
 34580 ;; *************** function _SwTimersInterrupt *****************
 34581 ;; Defined at:
 34582 ;;		line 287 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 34583 ;; Parameters:    Size  Location     Type
 34584 ;;		None
 34585 ;; Auto vars:     Size  Location     Type
 34586 ;;  ticksToNextT    4   34[BANK0 ] unsigned long 
 34587 ;;  timeElapsed     4   30[BANK0 ] unsigned long 
 34588 ;;  i               1   38[BANK0 ] unsigned char 
 34589 ;; Return value:  Size  Location     Type
 34590 ;;                  4   22[BANK0 ] unsigned long 
 34591 ;; Registers used:
 34592 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 34593 ;; Tracked objects:
 34594 ;;		On entry : 0/0
 34595 ;;		On exit  : 3F/0
 34596 ;;		Unchanged: 0/0
 34597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 34598 ;;      Params:         0       4       0       0       0       0       0       0       0
 34599 ;;      Locals:         0       9       0       0       0       0       0       0       0
 34600 ;;      Temps:          0       4       0       0       0       0       0       0       0
 34601 ;;      Totals:         0      17       0       0       0       0       0       0       0
 34602 ;;Total ram usage:       17 bytes
 34603 ;; Hardware stack levels used:    1
 34604 ;; Hardware stack levels required when called:    9
 34605 ;; This function calls:
 34606 ;;		_TMR_GetDeltaTime
 34607 ;; This function is called by:
 34608 ;;		_SwTimerReadValue
 34609 ;;		_SwTimerStart
 34610 ;; This function uses a non-reentrant model
 34611 ;;
 34612                           
 34613                           	psect	text185
 34614  003E64                     __ptext185:
 34615                           	opt stack 0
 34616  003E64                     _SwTimersInterrupt:
 34617                           	opt stack 17
 34618                           
 34619                           ;sw_timer.c: 289: uint8_t i;
 34620                           ;sw_timer.c: 290: uint32_t timeElapsed;
 34621                           ;sw_timer.c: 291: uint32_t ticksToNextTimerEvent = 0xFFFFFFFF;
 34622                           
 34623                           ; BSR set to: 0
 34624                           ;incstack = 0
 34625  003E64  0100               	movlb	0	; () banked
 34626  003E66  6982               	setf	SwTimersInterrupt@ticksToNextTimerEvent& (0+255),b
 34627  003E68  6983               	setf	(SwTimersInterrupt@ticksToNextTimerEvent+1)& (0+255),b
 34628  003E6A  6984               	setf	(SwTimersInterrupt@ticksToNextTimerEvent+2)& (0+255),b
 34629  003E6C  6985               	setf	(SwTimersInterrupt@ticksToNextTimerEvent+3)& (0+255),b
 34630                           
 34631                           ; BSR set to: 0
 34632                           ;sw_timer.c: 295: timeElapsed = TMR_GetDeltaTime();
 34633  003E6E  ECE6  F020         	call	_TMR_GetDeltaTime	;wreg free
 34634  003E72  C066  F07E         	movff	?_TMR_GetDeltaTime,SwTimersInterrupt@timeElapsed
 34635  003E76  C067  F07F         	movff	?_TMR_GetDeltaTime+1,SwTimersInterrupt@timeElapsed+1
 34636  003E7A  C068  F080         	movff	?_TMR_GetDeltaTime+2,SwTimersInterrupt@timeElapsed+2
 34637  003E7E  C069  F081         	movff	?_TMR_GetDeltaTime+3,SwTimersInterrupt@timeElapsed+3
 34638                           
 34639                           ; BSR set to: 0
 34640                           ;sw_timer.c: 297: for (i = 0; i < allocatedTimers; i++)
 34641  003E82  6B86               	clrf	SwTimersInterrupt@i& (0+255),b
 34642  003E84  D035               	goto	l12374
 34643  003E86                     l12362:
 34644                           
 34645                           ; BSR set to: 0
 34646                           ;sw_timer.c: 298: {
 34647                           ;sw_timer.c: 301: if (swTimers[i].running == 1)
 34648  003E86  5186               	movf	SwTimersInterrupt@i& (0+255),w,b
 34649  003E88  ECDB  F023         	call	PL40	;call to abstracted procedure
 34650  003E8C  04DE               	decf	postinc2,w,c
 34651  003E8E  E12F               	bnz	l12372
 34652                           
 34653                           ; BSR set to: 0
 34654                           ;sw_timer.c: 302: {
 34655                           ;sw_timer.c: 303: if (swTimers[i].ticksRemaining <= timeElapsed)
 34656  003E90  5186               	movf	SwTimersInterrupt@i& (0+255),w,b
 34657  003E92  D83A               	call	PL10	;call to abstracted procedure
 34658  003E94  50DE               	movf	postinc2,w,c
 34659  003E96  5D7E               	subwf	SwTimersInterrupt@timeElapsed& (0+255),w,b
 34660  003E98  50DE               	movf	postinc2,w,c
 34661  003E9A  597F               	subwfb	(SwTimersInterrupt@timeElapsed+1)& (0+255),w,b
 34662  003E9C  50DE               	movf	postinc2,w,c
 34663  003E9E  5980               	subwfb	(SwTimersInterrupt@timeElapsed+2)& (0+255),w,b
 34664  003EA0  50DE               	movf	postinc2,w,c
 34665  003EA2  5981               	subwfb	(SwTimersInterrupt@timeElapsed+3)& (0+255),w,b
 34666  003EA4  E305               	bnc	l12368
 34667                           
 34668                           ; BSR set to: 0
 34669                           ;sw_timer.c: 304: {
 34670                           ;sw_timer.c: 305: swTimers[i].ticksRemaining = 0;
 34671  003EA6  5186               	movf	SwTimersInterrupt@i& (0+255),w,b
 34672  003EA8  D82F               	call	PL10	;call to abstracted procedure
 34673  003EAA  ECA2  F01D         	call	PL182	;call to abstracted procedure
 34674                           
 34675                           ;sw_timer.c: 306: }
 34676  003EAE  D01F               	goto	l12372
 34677  003EB0                     l12368:
 34678                           
 34679                           ; BSR set to: 0
 34680                           ;sw_timer.c: 307: else
 34681                           ;sw_timer.c: 308: {
 34682                           ;sw_timer.c: 309: swTimers[i].ticksRemaining -= timeElapsed;
 34683  003EB0  5186               	movf	SwTimersInterrupt@i& (0+255),w,b
 34684  003EB2  D82A               	call	PL10	;call to abstracted procedure
 34685  003EB4  517E               	movf	SwTimersInterrupt@timeElapsed& (0+255),w,b
 34686  003EB6  5EDE               	subwf	postinc2,f,c
 34687  003EB8  517F               	movf	(SwTimersInterrupt@timeElapsed+1)& (0+255),w,b
 34688  003EBA  5ADE               	subwfb	postinc2,f,c
 34689  003EBC  5180               	movf	(SwTimersInterrupt@timeElapsed+2)& (0+255),w,b
 34690  003EBE  5ADE               	subwfb	postinc2,f,c
 34691  003EC0  5181               	movf	(SwTimersInterrupt@timeElapsed+3)& (0+255),w,b
 34692  003EC2  5ADE               	subwfb	postinc2,f,c
 34693                           
 34694                           ;sw_timer.c: 312: if (swTimers[i].ticksRemaining < ticksToNextTimerEvent)
 34695  003EC4  5186               	movf	SwTimersInterrupt@i& (0+255),w,b
 34696  003EC6  D820               	call	PL10	;call to abstracted procedure
 34697  003EC8  5182               	movf	SwTimersInterrupt@ticksToNextTimerEvent& (0+255),w,b
 34698  003ECA  5CDE               	subwf	postinc2,w,c
 34699  003ECC  5183               	movf	(SwTimersInterrupt@ticksToNextTimerEvent+1)& (0+255),w,b
 34700  003ECE  58DE               	subwfb	postinc2,w,c
 34701  003ED0  5184               	movf	(SwTimersInterrupt@ticksToNextTimerEvent+2)& (0+255),w,b
 34702  003ED2  58DE               	subwfb	postinc2,w,c
 34703  003ED4  5185               	movf	(SwTimersInterrupt@ticksToNextTimerEvent+3)& (0+255),w,b
 34704  003ED6  58DE               	subwfb	postinc2,w,c
 34705  003ED8  E20A               	bc	l12372
 34706                           
 34707                           ; BSR set to: 0
 34708                           ;sw_timer.c: 313: {
 34709                           ;sw_timer.c: 314: ticksToNextTimerEvent = swTimers[i].ticksRemaining;
 34710  003EDA  5186               	movf	SwTimersInterrupt@i& (0+255),w,b
 34711  003EDC  D815               	call	PL10	;call to abstracted procedure
 34712  003EDE  CFDE F082          	movff	postinc2,SwTimersInterrupt@ticksToNextTimerEvent
 34713  003EE2  CFDE F083          	movff	postinc2,SwTimersInterrupt@ticksToNextTimerEvent+1
 34714  003EE6  CFDE F084          	movff	postinc2,SwTimersInterrupt@ticksToNextTimerEvent+2
 34715  003EEA  CFDE F085          	movff	postinc2,SwTimersInterrupt@ticksToNextTimerEvent+3
 34716  003EEE                     l12372:
 34717                           
 34718                           ; BSR set to: 0
 34719  003EEE  2B86               	incf	SwTimersInterrupt@i& (0+255),f,b
 34720  003EF0                     l12374:
 34721                           
 34722                           ; BSR set to: 0
 34723  003EF0  51FF               	movf	_allocatedTimers& (0+255),w,b	;volatile
 34724  003EF2  5D86               	subwf	SwTimersInterrupt@i& (0+255),w,b
 34725  003EF4  E3C8               	bnc	l12362
 34726                           
 34727                           ; BSR set to: 0
 34728                           ;sw_timer.c: 315: }
 34729                           ;sw_timer.c: 316: }
 34730                           ;sw_timer.c: 317: }
 34731                           ;sw_timer.c: 318: }
 34732                           ;sw_timer.c: 320: return ticksToNextTimerEvent;
 34733  003EF6  C082  F076         	movff	SwTimersInterrupt@ticksToNextTimerEvent,?_SwTimersInterrupt
 34734  003EFA  C083  F077         	movff	SwTimersInterrupt@ticksToNextTimerEvent+1,?_SwTimersInterrupt+1
 34735  003EFE  C084  F078         	movff	SwTimersInterrupt@ticksToNextTimerEvent+2,?_SwTimersInterrupt+2
 34736  003F02  C085  F079         	movff	SwTimersInterrupt@ticksToNextTimerEvent+3,?_SwTimersInterrupt+3
 34737                           
 34738                           ; BSR set to: 0
 34739  003F06  0012               	return		;funcret
 34740  003F08                     __end_of_SwTimersInterrupt:
 34741                           	opt stack 0
 34742  003F08                     PL10:
 34743                           	opt stack 12
 34744  003F08  0D08               	mullw	8
 34745  003F0A  0E00               	movlw	low _swTimers
 34746  003F0C  24F3               	addwf	prodl,w,c
 34747  003F0E  6ED9               	movwf	fsr2l,c
 34748  003F10  0E03               	movlw	high _swTimers
 34749  003F12  20F4               	addwfc	prodh,w,c
 34750  003F14  6EDA               	movwf	fsr2h,c
 34751  003F16  0012               	return	
 34752  003F18                     __end_ofPL10:
 34753                           	opt stack 0
 34754                           tosu	equ	0xFFF
 34755                           tosh	equ	0xFFE
 34756                           tosl	equ	0xFFD
 34757                           pclath	equ	0xFFA
 34758                           tblptru	equ	0xFF8
 34759                           tblptrh	equ	0xFF7
 34760                           tblptrl	equ	0xFF6
 34761                           tablat	equ	0xFF5
 34762                           prodh	equ	0xFF4
 34763                           prodl	equ	0xFF3
 34764                           intcon	equ	0xFF2
 34765                           indf0	equ	0xFEF
 34766                           postinc0	equ	0xFEE
 34767                           plusw0	equ	0xFEB
 34768                           fsr0h	equ	0xFEA
 34769                           fsr0l	equ	0xFE9
 34770                           wreg	equ	0xFE8
 34771                           postinc1	equ	0xFE6
 34772                           postdec1	equ	0xFE5
 34773                           plusw1	equ	0xFE3
 34774                           fsr1h	equ	0xFE2
 34775                           fsr1l	equ	0xFE1
 34776                           indf2	equ	0xFDF
 34777                           postinc2	equ	0xFDE
 34778                           postdec2	equ	0xFDD
 34779                           plusw2	equ	0xFDB
 34780                           fsr2h	equ	0xFDA
 34781                           fsr2l	equ	0xFD9
 34782                           status	equ	0xFD8
 34783                           
 34784 ;; *************** function _TMR_GetDeltaTime *****************
 34785 ;; Defined at:
 34786 ;;		line 88 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 34787 ;; Parameters:    Size  Location     Type
 34788 ;;		None
 34789 ;; Auto vars:     Size  Location     Type
 34790 ;;		None
 34791 ;; Return value:  Size  Location     Type
 34792 ;;                  4    6[BANK0 ] unsigned long 
 34793 ;; Registers used:
 34794 ;;		wreg, status,2, status,0, cstack
 34795 ;; Tracked objects:
 34796 ;;		On entry : 3F/0
 34797 ;;		On exit  : 3F/0
 34798 ;;		Unchanged: 0/0
 34799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 34800 ;;      Params:         0       4       0       0       0       0       0       0       0
 34801 ;;      Locals:         0       0       0       0       0       0       0       0       0
 34802 ;;      Temps:          0      12       0       0       0       0       0       0       0
 34803 ;;      Totals:         0      16       0       0       0       0       0       0       0
 34804 ;;Total ram usage:       16 bytes
 34805 ;; Hardware stack levels used:    1
 34806 ;; Hardware stack levels required when called:    8
 34807 ;; This function calls:
 34808 ;;		_TMR1_ReadTimer
 34809 ;; This function is called by:
 34810 ;;		_SwTimersInterrupt
 34811 ;; This function uses a non-reentrant model
 34812 ;;
 34813                           
 34814                           	psect	text186
 34815  0041CC                     __ptext186:
 34816                           	opt stack 0
 34817  0041CC                     _TMR_GetDeltaTime:
 34818                           	opt stack 17
 34819                           
 34820                           ; BSR set to: 0
 34821                           ;sw_timer.c: 90: static uint32_t retVal;
 34822                           ;sw_timer.c: 91: static uint16_t tmrVal;
 34823                           ;sw_timer.c: 93: tmrVal = TMR1_ReadTimer();
 34824                           
 34825                           ; BSR set to: 0
 34826                           ;incstack = 0
 34827  0041CC  ECF0  F02E         	call	_TMR1_ReadTimer	;wreg free
 34828  0041D0  C060  F040         	movff	?_TMR1_ReadTimer,TMR_GetDeltaTime@tmrVal
 34829  0041D4  C061  F041         	movff	?_TMR1_ReadTimer+1,TMR_GetDeltaTime@tmrVal+1
 34830                           
 34831                           ; BSR set to: 0
 34832                           ;sw_timer.c: 95: if (timerOverflow == 1)
 34833  0041D8  0444               	decf	_timerOverflow,w,c	;volatile
 34834  0041DA  E11F               	bnz	l12048
 34835                           
 34836                           ; BSR set to: 0
 34837                           ;sw_timer.c: 96: {
 34838                           ;sw_timer.c: 97: timerOverflow = 0;
 34839  0041DC  6A44               	clrf	_timerOverflow,c	;volatile
 34840                           
 34841                           ; BSR set to: 0
 34842                           ;sw_timer.c: 98: retVal = ((uint32_t)0x10000) - reloadVal + tmrVal - ticksAccounted + ti
      +                          cksAdded;
 34843  0041DE  D843               	call	PL260	;call to abstracted procedure
 34844  0041E0  A0D8               	btfss	status,0,c
 34845  0041E2  076C               	decf	(??_TMR_GetDeltaTime+2)& (0+255),f,b
 34846  0041E4  516C               	movf	(??_TMR_GetDeltaTime+2)& (0+255),w,b
 34847  0041E6  6F6D               	movwf	(??_TMR_GetDeltaTime+3)& (0+255),b
 34848  0041E8  D82F               	call	PL114	;call to abstracted procedure
 34849  0041EA  6F72               	movwf	(??_TMR_GetDeltaTime+8)& (0+255),b
 34850  0041EC  5039               	movf	_ticksAdded+1,w,c	;volatile
 34851  0041EE  216F               	addwfc	(??_TMR_GetDeltaTime+5)& (0+255),w,b
 34852  0041F0  6F73               	movwf	(??_TMR_GetDeltaTime+9)& (0+255),b
 34853  0041F2  503A               	movf	_ticksAdded+2,w,c	;volatile
 34854  0041F4  2170               	addwfc	(??_TMR_GetDeltaTime+6)& (0+255),w,b
 34855  0041F6  6F74               	movwf	(??_TMR_GetDeltaTime+10)& (0+255),b
 34856  0041F8  503B               	movf	_ticksAdded+3,w,c	;volatile
 34857  0041FA  2171               	addwfc	(??_TMR_GetDeltaTime+7)& (0+255),w,b
 34858  0041FC  6F75               	movwf	(??_TMR_GetDeltaTime+11)& (0+255),b
 34859  0041FE  0E00               	movlw	0
 34860  004200  2572               	addwf	(??_TMR_GetDeltaTime+8)& (0+255),w,b
 34861  004202  6E30               	movwf	TMR_GetDeltaTime@retVal,c
 34862  004204  0E00               	movlw	0
 34863  004206  2173               	addwfc	(??_TMR_GetDeltaTime+9)& (0+255),w,b
 34864  004208  6E31               	movwf	TMR_GetDeltaTime@retVal+1,c
 34865  00420A  0E01               	movlw	1
 34866  00420C  2174               	addwfc	(??_TMR_GetDeltaTime+10)& (0+255),w,b
 34867  00420E  6E32               	movwf	TMR_GetDeltaTime@retVal+2,c
 34868  004210  0E00               	movlw	0
 34869  004212  2175               	addwfc	(??_TMR_GetDeltaTime+11)& (0+255),w,b
 34870                           
 34871                           ; BSR set to: 0
 34872                           ;sw_timer.c: 99: ticksAccounted = tmrVal;
 34873                           
 34874                           ; BSR set to: 0
 34875                           ;sw_timer.c: 100: ticksAdded = 0;
 34876                           
 34877                           ; BSR set to: 0
 34878                           ;sw_timer.c: 101: reloadVal = 0;
 34879  004214  EC6B  F01C         	call	PL138	;call to abstracted procedure
 34880                           
 34881                           ;sw_timer.c: 102: }
 34882  004218  D00E               	goto	l12050
 34883  00421A                     l12048:
 34884                           
 34885                           ; BSR set to: 0
 34886                           ;sw_timer.c: 103: else
 34887                           ;sw_timer.c: 104: {
 34888                           ;sw_timer.c: 105: retVal = tmrVal - reloadVal - ticksAccounted + ticksAdded;
 34889  00421A  D825               	call	PL260	;call to abstracted procedure
 34890  00421C  6B6D               	clrf	(??_TMR_GetDeltaTime+3)& (0+255),b
 34891  00421E  D814               	call	PL114	;call to abstracted procedure
 34892  004220  6E30               	movwf	TMR_GetDeltaTime@retVal,c
 34893  004222  5039               	movf	_ticksAdded+1,w,c	;volatile
 34894  004224  216F               	addwfc	(??_TMR_GetDeltaTime+5)& (0+255),w,b
 34895  004226  6E31               	movwf	TMR_GetDeltaTime@retVal+1,c
 34896  004228  503A               	movf	_ticksAdded+2,w,c	;volatile
 34897  00422A  2170               	addwfc	(??_TMR_GetDeltaTime+6)& (0+255),w,b
 34898  00422C  6E32               	movwf	TMR_GetDeltaTime@retVal+2,c
 34899  00422E  503B               	movf	_ticksAdded+3,w,c	;volatile
 34900  004230  2171               	addwfc	(??_TMR_GetDeltaTime+7)& (0+255),w,b
 34901                           
 34902                           ;sw_timer.c: 106: ticksAccounted += retVal;
 34903  004232  EC79  F01C         	call	PL202	;call to abstracted procedure
 34904  004236                     l12050:
 34905                           
 34906                           ; BSR set to: 0
 34907                           ;sw_timer.c: 107: }
 34908                           ;sw_timer.c: 109: return retVal;
 34909  004236  C030  F066         	movff	TMR_GetDeltaTime@retVal,?_TMR_GetDeltaTime
 34910  00423A  C031  F067         	movff	TMR_GetDeltaTime@retVal+1,?_TMR_GetDeltaTime+1
 34911  00423E  C032  F068         	movff	TMR_GetDeltaTime@retVal+2,?_TMR_GetDeltaTime+2
 34912  004242  C033  F069         	movff	TMR_GetDeltaTime@retVal+3,?_TMR_GetDeltaTime+3
 34913                           
 34914                           ; BSR set to: 0
 34915  004246  0012               	return		;funcret
 34916  004248                     __end_of_TMR_GetDeltaTime:
 34917                           	opt stack 0
 34918  004248                     PL114:
 34919                           	opt stack 17
 34920  004248  5034               	movf	_ticksAccounted,w,c	;volatile
 34921  00424A  5D6A               	subwf	??_TMR_GetDeltaTime& (0+255),w,b
 34922  00424C  6F6E               	movwf	(??_TMR_GetDeltaTime+4)& (0+255),b
 34923  00424E  5035               	movf	_ticksAccounted+1,w,c	;volatile
 34924  004250  596B               	subwfb	(??_TMR_GetDeltaTime+1)& (0+255),w,b
 34925  004252  6F6F               	movwf	(??_TMR_GetDeltaTime+5)& (0+255),b
 34926  004254  5036               	movf	_ticksAccounted+2,w,c	;volatile
 34927  004256  596C               	subwfb	(??_TMR_GetDeltaTime+2)& (0+255),w,b
 34928  004258  6F70               	movwf	(??_TMR_GetDeltaTime+6)& (0+255),b
 34929  00425A  5037               	movf	_ticksAccounted+3,w,c	;volatile
 34930  00425C  596D               	subwfb	(??_TMR_GetDeltaTime+3)& (0+255),w,b
 34931  00425E  6F71               	movwf	(??_TMR_GetDeltaTime+7)& (0+255),b
 34932  004260  5038               	movf	_ticksAdded,w,c	;volatile
 34933  004262  256E               	addwf	(??_TMR_GetDeltaTime+4)& (0+255),w,b
 34934  004264  0012               	return	
 34935  004266                     __end_ofPL114:
 34936                           	opt stack 0
 34937  004266                     PL260:
 34938                           	opt stack 17
 34939  004266  51FD               	movf	_reloadVal& (0+255),w,b	;volatile
 34940  004268  5C40               	subwf	TMR_GetDeltaTime@tmrVal,w,c
 34941  00426A  6F6A               	movwf	??_TMR_GetDeltaTime& (0+255),b
 34942  00426C  51FE               	movf	(_reloadVal+1)& (0+255),w,b	;volatile
 34943  00426E  5841               	subwfb	TMR_GetDeltaTime@tmrVal+1,w,c
 34944  004270  6F6B               	movwf	(??_TMR_GetDeltaTime+1)& (0+255),b
 34945  004272  6B6C               	clrf	(??_TMR_GetDeltaTime+2)& (0+255),b
 34946  004274  0012               	return	
 34947  004276                     __end_ofPL260:
 34948                           	opt stack 0
 34949                           tosu	equ	0xFFF
 34950                           tosh	equ	0xFFE
 34951                           tosl	equ	0xFFD
 34952                           pclath	equ	0xFFA
 34953                           tblptru	equ	0xFF8
 34954                           tblptrh	equ	0xFF7
 34955                           tblptrl	equ	0xFF6
 34956                           tablat	equ	0xFF5
 34957                           prodh	equ	0xFF4
 34958                           prodl	equ	0xFF3
 34959                           intcon	equ	0xFF2
 34960                           indf0	equ	0xFEF
 34961                           postinc0	equ	0xFEE
 34962                           plusw0	equ	0xFEB
 34963                           fsr0h	equ	0xFEA
 34964                           fsr0l	equ	0xFE9
 34965                           wreg	equ	0xFE8
 34966                           postinc1	equ	0xFE6
 34967                           postdec1	equ	0xFE5
 34968                           plusw1	equ	0xFE3
 34969                           fsr1h	equ	0xFE2
 34970                           fsr1l	equ	0xFE1
 34971                           indf2	equ	0xFDF
 34972                           postinc2	equ	0xFDE
 34973                           postdec2	equ	0xFDD
 34974                           plusw2	equ	0xFDB
 34975                           fsr2h	equ	0xFDA
 34976                           fsr2l	equ	0xFD9
 34977                           status	equ	0xFD8
 34978                           
 34979 ;; *************** function _TMR1_ReadTimer *****************
 34980 ;; Defined at:
 34981 ;;		line 113 in file "mcc_generated_files/tmr1.c"
 34982 ;; Parameters:    Size  Location     Type
 34983 ;;		None
 34984 ;; Auto vars:     Size  Location     Type
 34985 ;;  readVal         2    4[BANK0 ] unsigned int 
 34986 ;; Return value:  Size  Location     Type
 34987 ;;                  2    0[BANK0 ] unsigned int 
 34988 ;; Registers used:
 34989 ;;		wreg, status,2, status,0
 34990 ;; Tracked objects:
 34991 ;;		On entry : 3F/0
 34992 ;;		On exit  : 3F/0
 34993 ;;		Unchanged: 0/0
 34994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 34995 ;;      Params:         0       2       0       0       0       0       0       0       0
 34996 ;;      Locals:         0       2       0       0       0       0       0       0       0
 34997 ;;      Temps:          0       2       0       0       0       0       0       0       0
 34998 ;;      Totals:         0       6       0       0       0       0       0       0       0
 34999 ;;Total ram usage:        6 bytes
 35000 ;; Hardware stack levels used:    1
 35001 ;; Hardware stack levels required when called:    7
 35002 ;; This function calls:
 35003 ;;		Nothing
 35004 ;; This function is called by:
 35005 ;;		_TMR_GetDeltaTime
 35006 ;;		_TMR_SwapTimer
 35007 ;; This function uses a non-reentrant model
 35008 ;;
 35009                           
 35010                           	psect	text187
 35011  005DE0                     __ptext187:
 35012                           	opt stack 0
 35013  005DE0                     _TMR1_ReadTimer:
 35014                           	opt stack 17
 35015                           
 35016                           ; BSR set to: 0
 35017                           ;tmr1.c: 115: uint16_t readVal;
 35018                           ;tmr1.c: 117: readVal = (TMR1H << 8) | TMR1L;
 35019                           
 35020                           ; BSR set to: 0
 35021                           ;incstack = 0
 35022  005DE0  50CD               	movf	4045,w,c	;volatile
 35023  005DE2  CFCE F062          	movff	4046,??_TMR1_ReadTimer	;volatile
 35024  005DE6  6B63               	clrf	(??_TMR1_ReadTimer+1)& (0+255),b
 35025  005DE8  C062  F063         	movff	??_TMR1_ReadTimer,??_TMR1_ReadTimer+1
 35026  005DEC  6B62               	clrf	??_TMR1_ReadTimer& (0+255),b
 35027  005DEE  1162               	iorwf	??_TMR1_ReadTimer& (0+255),w,b
 35028  005DF0  6F64               	movwf	TMR1_ReadTimer@readVal& (0+255),b
 35029  005DF2  5163               	movf	(??_TMR1_ReadTimer+1)& (0+255),w,b
 35030  005DF4  6F65               	movwf	(TMR1_ReadTimer@readVal+1)& (0+255),b
 35031                           
 35032                           ; BSR set to: 0
 35033                           ;tmr1.c: 119: return readVal;
 35034  005DF6  C064  F060         	movff	TMR1_ReadTimer@readVal,?_TMR1_ReadTimer
 35035  005DFA  C065  F061         	movff	TMR1_ReadTimer@readVal+1,?_TMR1_ReadTimer+1
 35036                           
 35037                           ; BSR set to: 0
 35038  005DFE  0012               	return		;funcret
 35039  005E00                     __end_of_TMR1_ReadTimer:
 35040                           	opt stack 0
 35041                           tosu	equ	0xFFF
 35042                           tosh	equ	0xFFE
 35043                           tosl	equ	0xFFD
 35044                           pclath	equ	0xFFA
 35045                           tblptru	equ	0xFF8
 35046                           tblptrh	equ	0xFF7
 35047                           tblptrl	equ	0xFF6
 35048                           tablat	equ	0xFF5
 35049                           prodh	equ	0xFF4
 35050                           prodl	equ	0xFF3
 35051                           intcon	equ	0xFF2
 35052                           indf0	equ	0xFEF
 35053                           postinc0	equ	0xFEE
 35054                           plusw0	equ	0xFEB
 35055                           fsr0h	equ	0xFEA
 35056                           fsr0l	equ	0xFE9
 35057                           wreg	equ	0xFE8
 35058                           postinc1	equ	0xFE6
 35059                           postdec1	equ	0xFE5
 35060                           plusw1	equ	0xFE3
 35061                           fsr1h	equ	0xFE2
 35062                           fsr1l	equ	0xFE1
 35063                           indf2	equ	0xFDF
 35064                           postinc2	equ	0xFDE
 35065                           postdec2	equ	0xFDD
 35066                           plusw2	equ	0xFDB
 35067                           fsr2h	equ	0xFDA
 35068                           fsr2l	equ	0xFD9
 35069                           status	equ	0xFD8
 35070                           
 35071 ;; *************** function _SwTimerSetTimeout *****************
 35072 ;; Defined at:
 35073 ;;		line 186 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 35074 ;; Parameters:    Size  Location     Type
 35075 ;;  timerId         1    wreg     unsigned char 
 35076 ;;  timeout         4   13[BANK0 ] unsigned long 
 35077 ;; Auto vars:     Size  Location     Type
 35078 ;;  timerId         1   21[BANK0 ] unsigned char 
 35079 ;; Return value:  Size  Location     Type
 35080 ;;                  1    wreg      void 
 35081 ;; Registers used:
 35082 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 35083 ;; Tracked objects:
 35084 ;;		On entry : 3C/2
 35085 ;;		On exit  : 3F/0
 35086 ;;		Unchanged: 0/0
 35087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 35088 ;;      Params:         0       4       0       0       0       0       0       0       0
 35089 ;;      Locals:         0       1       0       0       0       0       0       0       0
 35090 ;;      Temps:          0       4       0       0       0       0       0       0       0
 35091 ;;      Totals:         0       9       0       0       0       0       0       0       0
 35092 ;;Total ram usage:        9 bytes
 35093 ;; Hardware stack levels used:    1
 35094 ;; Hardware stack levels required when called:    7
 35095 ;; This function calls:
 35096 ;;		Nothing
 35097 ;; This function is called by:
 35098 ;;		_LORAWAN_Join
 35099 ;;		_LORAWAN_LinkCheckConfigure
 35100 ;;		_LORAWAN_LinkCheckCallback
 35101 ;;		_UpdateRetransmissionAckTimeoutState
 35102 ;;		_UpdateJoinSuccessState
 35103 ;;		_LORAWAN_TxDone
 35104 ;;		_LORAWAN_RxTimeout
 35105 ;;		_StartReTxTimer
 35106 ;;		_DutyCycleCallback
 35107 ;;		_RADIO_Transmit
 35108 ;;		_RADIO_ReceiveStart
 35109 ;; This function uses a non-reentrant model
 35110 ;;
 35111                           
 35112                           	psect	text188
 35113  005822                     __ptext188:
 35114                           	opt stack 0
 35115  005822                     _SwTimerSetTimeout:
 35116                           	opt stack 20
 35117                           
 35118                           ; BSR set to: 0
 35119                           ;incstack = 0
 35120                           ;SwTimerSetTimeout@timerId stored from wreg
 35121  005822  0100               	movlb	0	; () banked
 35122  005824  6F75               	movwf	SwTimerSetTimeout@timerId& (0+255),b
 35123                           
 35124                           ;sw_timer.c: 188: (INTCONbits.GIE = 0);
 35125  005826  9EF2               	bcf	intcon,7,c	;volatile
 35126                           
 35127                           ;sw_timer.c: 189: swTimers[timerId].ticksRemaining = timeout - 32;
 35128  005828  0EE0               	movlw	224
 35129  00582A  256D               	addwf	SwTimerSetTimeout@timeout& (0+255),w,b
 35130  00582C  6F71               	movwf	??_SwTimerSetTimeout& (0+255),b
 35131  00582E  0EFF               	movlw	255
 35132  005830  216E               	addwfc	(SwTimerSetTimeout@timeout+1)& (0+255),w,b
 35133  005832  6F72               	movwf	(??_SwTimerSetTimeout+1)& (0+255),b
 35134  005834  0EFF               	movlw	255
 35135  005836  216F               	addwfc	(SwTimerSetTimeout@timeout+2)& (0+255),w,b
 35136  005838  6F73               	movwf	(??_SwTimerSetTimeout+2)& (0+255),b
 35137  00583A  0EFF               	movlw	255
 35138  00583C  2170               	addwfc	(SwTimerSetTimeout@timeout+3)& (0+255),w,b
 35139  00583E  6F74               	movwf	(??_SwTimerSetTimeout+3)& (0+255),b
 35140  005840  5175               	movf	SwTimerSetTimeout@timerId& (0+255),w,b
 35141  005842  EC84  F01F         	call	PL10	;call to abstracted procedure
 35142  005846  C071  FFDE         	movff	??_SwTimerSetTimeout,postinc2
 35143  00584A  C072  FFDE         	movff	??_SwTimerSetTimeout+1,postinc2
 35144  00584E  C073  FFDE         	movff	??_SwTimerSetTimeout+2,postinc2
 35145  005852  C074  FFDE         	movff	??_SwTimerSetTimeout+3,postinc2
 35146                           
 35147                           ; BSR set to: 0
 35148                           ;sw_timer.c: 190: (INTCONbits.GIE = 1);
 35149  005856  8EF2               	bsf	intcon,7,c	;volatile
 35150                           
 35151                           ; BSR set to: 0
 35152  005858  0012               	return		;funcret
 35153  00585A                     __end_of_SwTimerSetTimeout:
 35154                           	opt stack 0
 35155                           tosu	equ	0xFFF
 35156                           tosh	equ	0xFFE
 35157                           tosl	equ	0xFFD
 35158                           pclath	equ	0xFFA
 35159                           tblptru	equ	0xFF8
 35160                           tblptrh	equ	0xFF7
 35161                           tblptrl	equ	0xFF6
 35162                           tablat	equ	0xFF5
 35163                           prodh	equ	0xFF4
 35164                           prodl	equ	0xFF3
 35165                           intcon	equ	0xFF2
 35166                           indf0	equ	0xFEF
 35167                           postinc0	equ	0xFEE
 35168                           plusw0	equ	0xFEB
 35169                           fsr0h	equ	0xFEA
 35170                           fsr0l	equ	0xFE9
 35171                           wreg	equ	0xFE8
 35172                           postinc1	equ	0xFE6
 35173                           postdec1	equ	0xFE5
 35174                           plusw1	equ	0xFE3
 35175                           fsr1h	equ	0xFE2
 35176                           fsr1l	equ	0xFE1
 35177                           indf2	equ	0xFDF
 35178                           postinc2	equ	0xFDE
 35179                           postdec2	equ	0xFDD
 35180                           plusw2	equ	0xFDB
 35181                           fsr2h	equ	0xFDA
 35182                           fsr2l	equ	0xFD9
 35183                           status	equ	0xFD8
 35184                           
 35185 ;; *************** function _InitDefault868Channels *****************
 35186 ;; Defined at:
 35187 ;;		line 979 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 35188 ;; Parameters:    Size  Location     Type
 35189 ;;		None
 35190 ;; Auto vars:     Size  Location     Type
 35191 ;;  i               1   10[BANK0 ] unsigned char 
 35192 ;; Return value:  Size  Location     Type
 35193 ;;                  1    wreg      void 
 35194 ;; Registers used:
 35195 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35196 ;; Tracked objects:
 35197 ;;		On entry : 3F/1
 35198 ;;		On exit  : 3F/0
 35199 ;;		Unchanged: 0/0
 35200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 35201 ;;      Params:         0       0       0       0       0       0       0       0       0
 35202 ;;      Locals:         0       1       0       0       0       0       0       0       0
 35203 ;;      Temps:          0       0       0       0       0       0       0       0       0
 35204 ;;      Totals:         0       1       0       0       0       0       0       0       0
 35205 ;;Total ram usage:        1 bytes
 35206 ;; Hardware stack levels used:    1
 35207 ;; Hardware stack levels required when called:    8
 35208 ;; This function calls:
 35209 ;;		_memcpy
 35210 ;;		_memset
 35211 ;; This function is called by:
 35212 ;;		_LORAWAN_Reset
 35213 ;; This function uses a non-reentrant model
 35214 ;;
 35215                           
 35216                           	psect	text189
 35217  0057B0                     __ptext189:
 35218                           	opt stack 0
 35219  0057B0                     _InitDefault868Channels:
 35220                           	opt stack 0
 35221                           
 35222                           ; BSR set to: 1
 35223                           ;lorawan_eu.c: 981: uint8_t i;
 35224                           ;lorawan_eu.c: 983: memset (Channels, 0, sizeof(Channels) );
 35225                           
 35226                           ; BSR set to: 0
 35227                           ;incstack = 0
 35228  0057B0  ECA0  F027         	call	PL164	;call to abstracted procedure
 35229  0057B4  ECEF  F02D         	call	_memset	;wreg free
 35230                           
 35231                           ; BSR set to: 0
 35232                           ;lorawan_eu.c: 984: memcpy (Channels, DefaultChannels868, sizeof(DefaultChannels868) );
 35233  0057B8  ECAB  F027         	call	PL362	;call to abstracted procedure
 35234  0057BC  0ED2               	movlw	low _DefaultChannels868
 35235  0057BE  6F62               	movwf	memcpy@s1& (0+255),b
 35236  0057C0  0E7F               	movlw	high _DefaultChannels868
 35237  0057C2  ECB0  F027         	call	PL394	;call to abstracted procedure
 35238  0057C6  EC94  F028         	call	_memcpy	;wreg free
 35239                           
 35240                           ; BSR set to: 0
 35241                           ;lorawan_eu.c: 985: for (i = 3; i < 16; i++)
 35242  0057CA  0E03               	movlw	3
 35243  0057CC  6F6A               	movwf	InitDefault868Channels@i& (0+255),b
 35244  0057CE                     l14946:
 35245                           
 35246                           ; BSR set to: 0
 35247                           ;lorawan_eu.c: 986: {
 35248                           ;lorawan_eu.c: 989: Channels[i].dutyCycle = (65535U);
 35249  0057CE  516A               	movf	InitDefault868Channels@i& (0+255),w,b
 35250  0057D0  ECAD  F006         	call	PL92	;call to abstracted procedure
 35251  0057D4  68DE               	setf	postinc2,c
 35252  0057D6  68DD               	setf	postdec2,c
 35253                           
 35254                           ;lorawan_eu.c: 990: Channels[i].dataRange.value = (255);
 35255  0057D8  516A               	movf	InitDefault868Channels@i& (0+255),w,b
 35256  0057DA  EC7E  F021         	call	PL6	;call to abstracted procedure
 35257  0057DE  68DF               	setf	indf2,c
 35258                           
 35259                           ; BSR set to: 0
 35260  0057E0  2B6A               	incf	InitDefault868Channels@i& (0+255),f,b
 35261                           
 35262                           ; BSR set to: 0
 35263  0057E2  0E0F               	movlw	15
 35264  0057E4  656A               	cpfsgt	InitDefault868Channels@i& (0+255),b
 35265  0057E6  D7F3               	goto	l14946
 35266  0057E8  0C0F               	retlw	15
 35267  0057EA                     __end_of_InitDefault868Channels:
 35268                           	opt stack 0
 35269                           tosu	equ	0xFFF
 35270                           tosh	equ	0xFFE
 35271                           tosl	equ	0xFFD
 35272                           pclath	equ	0xFFA
 35273                           tblptru	equ	0xFF8
 35274                           tblptrh	equ	0xFF7
 35275                           tblptrl	equ	0xFF6
 35276                           tablat	equ	0xFF5
 35277                           prodh	equ	0xFF4
 35278                           prodl	equ	0xFF3
 35279                           intcon	equ	0xFF2
 35280                           indf0	equ	0xFEF
 35281                           postinc0	equ	0xFEE
 35282                           plusw0	equ	0xFEB
 35283                           fsr0h	equ	0xFEA
 35284                           fsr0l	equ	0xFE9
 35285                           wreg	equ	0xFE8
 35286                           postinc1	equ	0xFE6
 35287                           postdec1	equ	0xFE5
 35288                           plusw1	equ	0xFE3
 35289                           fsr1h	equ	0xFE2
 35290                           fsr1l	equ	0xFE1
 35291                           indf2	equ	0xFDF
 35292                           postinc2	equ	0xFDE
 35293                           postdec2	equ	0xFDD
 35294                           plusw2	equ	0xFDB
 35295                           fsr2h	equ	0xFDA
 35296                           fsr2l	equ	0xFD9
 35297                           status	equ	0xFD8
 35298                           
 35299 ;; *************** function _InitDefault433Channels *****************
 35300 ;; Defined at:
 35301 ;;		line 994 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 35302 ;; Parameters:    Size  Location     Type
 35303 ;;		None
 35304 ;; Auto vars:     Size  Location     Type
 35305 ;;  i               1   10[BANK0 ] unsigned char 
 35306 ;; Return value:  Size  Location     Type
 35307 ;;                  1    wreg      void 
 35308 ;; Registers used:
 35309 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35310 ;; Tracked objects:
 35311 ;;		On entry : 3F/1
 35312 ;;		On exit  : 3F/0
 35313 ;;		Unchanged: 0/0
 35314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 35315 ;;      Params:         0       0       0       0       0       0       0       0       0
 35316 ;;      Locals:         0       1       0       0       0       0       0       0       0
 35317 ;;      Temps:          0       0       0       0       0       0       0       0       0
 35318 ;;      Totals:         0       1       0       0       0       0       0       0       0
 35319 ;;Total ram usage:        1 bytes
 35320 ;; Hardware stack levels used:    1
 35321 ;; Hardware stack levels required when called:    8
 35322 ;; This function calls:
 35323 ;;		_memcpy
 35324 ;;		_memset
 35325 ;; This function is called by:
 35326 ;;		_LORAWAN_Reset
 35327 ;; This function uses a non-reentrant model
 35328 ;;
 35329                           
 35330                           	psect	text190
 35331  004F0C                     __ptext190:
 35332                           	opt stack 0
 35333  004F0C                     _InitDefault433Channels:
 35334                           	opt stack 0
 35335                           
 35336                           ; BSR set to: 1
 35337                           ;lorawan_eu.c: 996: uint8_t i;
 35338                           ;lorawan_eu.c: 998: memset (Channels, 0, sizeof(Channels) );
 35339                           
 35340                           ; BSR set to: 0
 35341                           ;incstack = 0
 35342  004F0C  D819               	call	PL164	;call to abstracted procedure
 35343  004F0E  ECEF  F02D         	call	_memset	;wreg free
 35344                           
 35345                           ; BSR set to: 0
 35346                           ;lorawan_eu.c: 999: memcpy (Channels, DefaultChannels433, sizeof(DefaultChannels433) );
 35347  004F12  D821               	call	PL362	;call to abstracted procedure
 35348  004F14  0EA8               	movlw	low _DefaultChannels433
 35349  004F16  6F62               	movwf	memcpy@s1& (0+255),b
 35350  004F18  0E7F               	movlw	high _DefaultChannels433
 35351  004F1A  D822               	call	PL394	;call to abstracted procedure
 35352  004F1C  EC94  F028         	call	_memcpy	;wreg free
 35353                           
 35354                           ; BSR set to: 0
 35355                           ;lorawan_eu.c: 1000: for (i = 3; i < 16; i++)
 35356  004F20  0E03               	movlw	3
 35357  004F22  6F6A               	movwf	InitDefault433Channels@i& (0+255),b
 35358  004F24                     l14962:
 35359                           
 35360                           ; BSR set to: 0
 35361                           ;lorawan_eu.c: 1001: {
 35362                           ;lorawan_eu.c: 1004: Channels[i].dutyCycle = (65535U);
 35363  004F24  516A               	movf	InitDefault433Channels@i& (0+255),w,b
 35364  004F26  ECAD  F006         	call	PL92	;call to abstracted procedure
 35365  004F2A  68DE               	setf	postinc2,c
 35366  004F2C  68DD               	setf	postdec2,c
 35367                           
 35368                           ;lorawan_eu.c: 1005: Channels[i].dataRange.value = (255);
 35369  004F2E  516A               	movf	InitDefault433Channels@i& (0+255),w,b
 35370  004F30  EC7E  F021         	call	PL6	;call to abstracted procedure
 35371  004F34  68DF               	setf	indf2,c
 35372                           
 35373                           ; BSR set to: 0
 35374  004F36  2B6A               	incf	InitDefault433Channels@i& (0+255),f,b
 35375                           
 35376                           ; BSR set to: 0
 35377  004F38  0E0F               	movlw	15
 35378  004F3A  656A               	cpfsgt	InitDefault433Channels@i& (0+255),b
 35379  004F3C  D7F3               	goto	l14962
 35380  004F3E  0C0F               	retlw	15
 35381  004F40                     __end_of_InitDefault433Channels:
 35382                           	opt stack 0
 35383  004F40                     PL164:
 35384                           	opt stack 20
 35385  004F40  0E00               	movlw	low _Channels
 35386  004F42  0100               	movlb	0	; () banked
 35387  004F44  6F60               	movwf	memset@p1& (0+255),b
 35388  004F46  0E04               	movlw	high _Channels
 35389  004F48  6F61               	movwf	(memset@p1+1)& (0+255),b
 35390  004F4A  6B63               	clrf	(memset@c+1)& (0+255),b
 35391  004F4C  6B62               	clrf	memset@c& (0+255),b
 35392  004F4E  6B65               	clrf	(memset@n+1)& (0+255),b
 35393  004F50  0EE0               	movlw	224
 35394  004F52  6F64               	movwf	memset@n& (0+255),b
 35395  004F54  0CE0               	retlw	224
 35396  004F56                     __end_ofPL164:
 35397                           	opt stack 0
 35398  004F56                     PL362:
 35399                           	opt stack 20
 35400  004F56  0E00               	movlw	low _Channels
 35401  004F58  6F60               	movwf	memcpy@d1& (0+255),b
 35402  004F5A  0E04               	movlw	high _Channels
 35403  004F5C  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 35404  004F5E  0012               	return	
 35405  004F60                     __end_ofPL362:
 35406                           	opt stack 0
 35407  004F60                     PL394:
 35408                           	opt stack 20
 35409  004F60  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 35410  004F62  6B65               	clrf	(memcpy@n+1)& (0+255),b
 35411  004F64  0E2A               	movlw	42
 35412  004F66  6F64               	movwf	memcpy@n& (0+255),b
 35413  004F68  0C2A               	retlw	42
 35414  004F6A                     __end_ofPL394:
 35415                           	opt stack 0
 35416                           tosu	equ	0xFFF
 35417                           tosh	equ	0xFFE
 35418                           tosl	equ	0xFFD
 35419                           pclath	equ	0xFFA
 35420                           tblptru	equ	0xFF8
 35421                           tblptrh	equ	0xFF7
 35422                           tblptrl	equ	0xFF6
 35423                           tablat	equ	0xFF5
 35424                           prodh	equ	0xFF4
 35425                           prodl	equ	0xFF3
 35426                           intcon	equ	0xFF2
 35427                           indf0	equ	0xFEF
 35428                           postinc0	equ	0xFEE
 35429                           plusw0	equ	0xFEB
 35430                           fsr0h	equ	0xFEA
 35431                           fsr0l	equ	0xFE9
 35432                           wreg	equ	0xFE8
 35433                           postinc1	equ	0xFE6
 35434                           postdec1	equ	0xFE5
 35435                           plusw1	equ	0xFE3
 35436                           fsr1h	equ	0xFE2
 35437                           fsr1l	equ	0xFE1
 35438                           indf2	equ	0xFDF
 35439                           postinc2	equ	0xFDE
 35440                           postdec2	equ	0xFDD
 35441                           plusw2	equ	0xFDB
 35442                           fsr2h	equ	0xFDA
 35443                           fsr2l	equ	0xFD9
 35444                           status	equ	0xFD8
 35445                           
 35446 ;; *************** function _memset *****************
 35447 ;; Defined at:
 35448 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\memset.c"
 35449 ;; Parameters:    Size  Location     Type
 35450 ;;  p1              2    0[BANK0 ] PTR void 
 35451 ;;		 -> GenerateSubkey@l(16), AESCmac@x(16), AssemblePacket@mhdr(1), aesBuffer(16), 
 35452 ;;		 -> Channels(224), macBuffer(271), loRa.activationParameters(105), loRa(245), 
 35453 ;;  c               2    2[BANK0 ] int 
 35454 ;;  n               2    4[BANK0 ] unsigned int 
 35455 ;; Auto vars:     Size  Location     Type
 35456 ;;  p               2    6[BANK0 ] PTR unsigned char 
 35457 ;;		 -> GenerateSubkey@l(16), AESCmac@x(16), AssemblePacket@mhdr(1), aesBuffer(16), 
 35458 ;;		 -> Channels(224), macBuffer(271), loRa.activationParameters(105), loRa(245), 
 35459 ;; Return value:  Size  Location     Type
 35460 ;;                  2    0[BANK0 ] PTR void 
 35461 ;; Registers used:
 35462 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 35463 ;; Tracked objects:
 35464 ;;		On entry : 3F/0
 35465 ;;		On exit  : 3F/0
 35466 ;;		Unchanged: 0/0
 35467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 35468 ;;      Params:         0       6       0       0       0       0       0       0       0
 35469 ;;      Locals:         0       2       0       0       0       0       0       0       0
 35470 ;;      Temps:          0       0       0       0       0       0       0       0       0
 35471 ;;      Totals:         0       8       0       0       0       0       0       0       0
 35472 ;;Total ram usage:        8 bytes
 35473 ;; Hardware stack levels used:    1
 35474 ;; Hardware stack levels required when called:    7
 35475 ;; This function calls:
 35476 ;;		Nothing
 35477 ;; This function is called by:
 35478 ;;		_AssemblePacket
 35479 ;;		_PrepareJoinRequestFrame
 35480 ;;		_PrepareSessionKeys
 35481 ;;		_AssembleEncryptionBlock
 35482 ;;		_AESCmac
 35483 ;;		_GenerateSubkey
 35484 ;;		_LORAWAN_Reset
 35485 ;;		_InitDefault868Channels
 35486 ;;		_InitDefault433Channels
 35487 ;; This function uses a non-reentrant model
 35488 ;;
 35489                           
 35490                           	psect	text191
 35491  005BDE                     __ptext191:
 35492                           	opt stack 0
 35493  005BDE                     _memset:
 35494                           	opt stack 20
 35495                           
 35496                           ; BSR set to: 0
 35497                           
 35498                           ; BSR set to: 0
 35499                           ;incstack = 0
 35500  005BDE  C060  F066         	movff	memset@p1,memset@p
 35501  005BE2  C061  F067         	movff	memset@p1+1,memset@p+1
 35502  005BE6  D008               	goto	l12116
 35503  005BE8                     l12112:
 35504                           
 35505                           ; BSR set to: 0
 35506  005BE8  C066  FFD9         	movff	memset@p,fsr2l
 35507  005BEC  C067  FFDA         	movff	memset@p+1,fsr2h
 35508  005BF0  C062  FFDF         	movff	memset@c,indf2
 35509                           
 35510                           ; BSR set to: 0
 35511  005BF4  4B66               	infsnz	memset@p& (0+255),f,b
 35512  005BF6  2B67               	incf	(memset@p+1)& (0+255),f,b
 35513  005BF8                     l12116:
 35514                           
 35515                           ; BSR set to: 0
 35516  005BF8  0764               	decf	memset@n& (0+255),f,b
 35517  005BFA  A0D8               	btfss	status,0,c
 35518  005BFC  0765               	decf	(memset@n+1)& (0+255),f,b
 35519  005BFE  2964               	incf	memset@n& (0+255),w,b
 35520  005C00  E1F3               	bnz	l12112
 35521  005C02  2965               	incf	(memset@n+1)& (0+255),w,b
 35522  005C04  E1F1               	bnz	l12112
 35523                           
 35524                           ; BSR set to: 0
 35525  005C06  0012               	return		;funcret
 35526  005C08                     __end_of_memset:
 35527                           	opt stack 0
 35528                           tosu	equ	0xFFF
 35529                           tosh	equ	0xFFE
 35530                           tosl	equ	0xFFD
 35531                           pclath	equ	0xFFA
 35532                           tblptru	equ	0xFF8
 35533                           tblptrh	equ	0xFF7
 35534                           tblptrl	equ	0xFF6
 35535                           tablat	equ	0xFF5
 35536                           prodh	equ	0xFF4
 35537                           prodl	equ	0xFF3
 35538                           intcon	equ	0xFF2
 35539                           indf0	equ	0xFEF
 35540                           postinc0	equ	0xFEE
 35541                           plusw0	equ	0xFEB
 35542                           fsr0h	equ	0xFEA
 35543                           fsr0l	equ	0xFE9
 35544                           wreg	equ	0xFE8
 35545                           postinc1	equ	0xFE6
 35546                           postdec1	equ	0xFE5
 35547                           plusw1	equ	0xFE3
 35548                           fsr1h	equ	0xFE2
 35549                           fsr1l	equ	0xFE1
 35550                           indf2	equ	0xFDF
 35551                           postinc2	equ	0xFDE
 35552                           postdec2	equ	0xFDD
 35553                           plusw2	equ	0xFDB
 35554                           fsr2h	equ	0xFDA
 35555                           fsr2l	equ	0xFD9
 35556                           status	equ	0xFD8
 35557                           
 35558 ;; *************** function _memcpy *****************
 35559 ;; Defined at:
 35560 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\memcpy.c"
 35561 ;; Parameters:    Size  Location     Type
 35562 ;;  d1              2    0[BANK0 ] PTR void 
 35563 ;;		 -> RadioConfiguration(54), UpdateCfList@frequency(4), AESCmac@x(16), AESEncodeLoRa@useKey(16), 
 35564 ;;		 -> ComputeMic@mic(4), ExtractMic@mic(4), aesBuffer(16), radioBuffer(271), 
 35565 ;;		 -> LORAWAN_RxDone@computedMic(4), Channels(224), loRa.activationParameters.applicationEui(8), loRa.activationParame
      +ters.deviceEui(8), 
 35566 ;;		 -> macBuffer(271), loRa.activationParameters(105), loRa(245), 
 35567 ;;  s1              2    2[BANK0 ] PTR const void 
 35568 ;;		 -> LORAWAN_RxDone@hdr.cfList(16), radioBuffer.cfList(16), RadioConfiguration.syncWord(8), RadioConfiguration(54), 
 35569 ;;		 -> FskSyncWordBuff(3), UpdateCfList@joinAccept(2), DefaultChannels433(42), DefaultChannels868(42), 
 35570 ;;		 -> AESCmac@y(16), AssembleEncryptionBlock@frameCounter(4), ComputeSessionKeys@joinAcceptBuffer(2), PrepareJoinReque
      +stFrame@mic(4), 
 35571 ;;		 -> loRa.devNonce(2), loRa.fCntUp.valueLow(2), aesBuffer(16), radioBuffer(271), 
 35572 ;;		 -> LORAWAN_RxDone@hdr(2), loRa.activationParameters.applicationKey(16), loRa.activationParameters.applicationSessio
      +nKey(16), loRa.activationParameters.networkSessionKey(16), 
 35573 ;;		 -> loRa.activationParameters.deviceAddress(4), loRa.activationParameters.applicationEui(8), loRa.activationParamete
      +rs.deviceEui(8), loRa.activationParameters.mcastApplicationSessionKey(16), 
 35574 ;;		 -> loRa.activationParameters.mcastNetworkSessionKey(16), loRa.activationParameters.mcastDeviceAddress(4), loRa.fCnt
      +Up(4), loRa.activationParameters(105), 
 35575 ;;		 -> loRa(245), payload(2), appSKey(16), nwkSKey(16), 
 35576 ;;		 -> NULL(0), 
 35577 ;;  n               2    4[BANK0 ] unsigned int 
 35578 ;; Auto vars:     Size  Location     Type
 35579 ;;  s               2    8[BANK0 ] PTR const unsigned char 
 35580 ;;		 -> LORAWAN_RxDone@hdr.cfList(16), radioBuffer.cfList(16), RadioConfiguration.syncWord(8), RadioConfiguration(54), 
 35581 ;;		 -> FskSyncWordBuff(3), UpdateCfList@joinAccept(2), DefaultChannels433(42), DefaultChannels868(42), 
 35582 ;;		 -> AESCmac@y(16), AssembleEncryptionBlock@frameCounter(4), ComputeSessionKeys@joinAcceptBuffer(2), PrepareJoinReque
      +stFrame@mic(4), 
 35583 ;;		 -> loRa.devNonce(2), loRa.fCntUp.valueLow(2), aesBuffer(16), radioBuffer(271), 
 35584 ;;		 -> LORAWAN_RxDone@hdr(2), loRa.activationParameters.applicationKey(16), loRa.activationParameters.applicationSessio
      +nKey(16), loRa.activationParameters.networkSessionKey(16), 
 35585 ;;		 -> loRa.activationParameters.deviceAddress(4), loRa.activationParameters.applicationEui(8), loRa.activationParamete
      +rs.deviceEui(8), loRa.activationParameters.mcastApplicationSessionKey(16), 
 35586 ;;		 -> loRa.activationParameters.mcastNetworkSessionKey(16), loRa.activationParameters.mcastDeviceAddress(4), loRa.fCnt
      +Up(4), loRa.activationParameters(105), 
 35587 ;;		 -> loRa(245), payload(2), appSKey(16), nwkSKey(16), 
 35588 ;;		 -> NULL(0), 
 35589 ;;  d               2    6[BANK0 ] PTR unsigned char 
 35590 ;;		 -> RadioConfiguration(54), UpdateCfList@frequency(4), AESCmac@x(16), AESEncodeLoRa@useKey(16), 
 35591 ;;		 -> ComputeMic@mic(4), ExtractMic@mic(4), aesBuffer(16), radioBuffer(271), 
 35592 ;;		 -> LORAWAN_RxDone@computedMic(4), Channels(224), loRa.activationParameters.applicationEui(8), loRa.activationParame
      +ters.deviceEui(8), 
 35593 ;;		 -> macBuffer(271), loRa.activationParameters(105), loRa(245), 
 35594 ;; Return value:  Size  Location     Type
 35595 ;;                  2    0[BANK0 ] PTR void 
 35596 ;; Registers used:
 35597 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 35598 ;; Tracked objects:
 35599 ;;		On entry : 3F/0
 35600 ;;		On exit  : 3F/0
 35601 ;;		Unchanged: 0/0
 35602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 35603 ;;      Params:         0       6       0       0       0       0       0       0       0
 35604 ;;      Locals:         0       4       0       0       0       0       0       0       0
 35605 ;;      Temps:          0       0       0       0       0       0       0       0       0
 35606 ;;      Totals:         0      10       0       0       0       0       0       0       0
 35607 ;;Total ram usage:       10 bytes
 35608 ;; Hardware stack levels used:    1
 35609 ;; Hardware stack levels required when called:    7
 35610 ;; This function calls:
 35611 ;;		Nothing
 35612 ;; This function is called by:
 35613 ;;		_LORAWAN_SetNetworkSessionKey
 35614 ;;		_LORAWAN_SetApplicationSessionKey
 35615 ;;		_LORAWAN_RxDone
 35616 ;;		_AssemblePacket
 35617 ;;		_PrepareJoinRequestFrame
 35618 ;;		_PrepareSessionKeys
 35619 ;;		_AssembleEncryptionBlock
 35620 ;;		_ExtractMic
 35621 ;;		_ComputeMic
 35622 ;;		_AESEncodeLoRa
 35623 ;;		_AESCmac
 35624 ;;		_UpdateCfList
 35625 ;;		_InitDefault868Channels
 35626 ;;		_InitDefault433Channels
 35627 ;;		_RADIO_SetFSKSyncWord
 35628 ;; This function uses a non-reentrant model
 35629 ;;
 35630                           
 35631                           	psect	text192
 35632  005128                     __ptext192:
 35633                           	opt stack 0
 35634  005128                     _memcpy:
 35635                           	opt stack 17
 35636                           
 35637                           ; BSR set to: 0
 35638                           
 35639                           ; BSR set to: 0
 35640                           ;incstack = 0
 35641  005128  C062  F068         	movff	memcpy@s1,memcpy@s
 35642  00512C  C063  F069         	movff	memcpy@s1+1,memcpy@s+1
 35643  005130  C060  F066         	movff	memcpy@d1,memcpy@d
 35644  005134  C061  F067         	movff	memcpy@d1+1,memcpy@d+1
 35645  005138  D01A               	goto	l11984
 35646  00513A                     l11978:
 35647                           
 35648                           ; BSR set to: 0
 35649  00513A  C068  FFF6         	movff	memcpy@s,tblptrl
 35650  00513E  C069  FFF7         	movff	memcpy@s+1,tblptrh
 35651  005142  6AF8               	clrf	tblptru,c
 35652  005144  C066  FFD9         	movff	memcpy@d,fsr2l
 35653  005148  C067  FFDA         	movff	memcpy@d+1,fsr2h
 35654  00514C  0E07               	movlw	(high __ramtop+-1)
 35655  00514E  64F7               	cpfsgt	tblptrh,c
 35656  005150  D003               	bra	u12727
 35657  005152  0008               	tblrd		*
 35658  005154  50F5               	movf	tablat,w,c
 35659  005156  D005               	bra	u12720
 35660  005158                     u12727:
 35661  005158  CFF6 FFE9          	movff	tblptrl,fsr0l
 35662  00515C  CFF7 FFEA          	movff	tblptrh,fsr0h
 35663  005160  50EF               	movf	indf0,w,c
 35664  005162                     u12720:
 35665  005162  6EDF               	movwf	indf2,c
 35666  005164  0100               	movlb	0	; () banked
 35667  005166  4B68               	infsnz	memcpy@s& (0+255),f,b
 35668  005168  2B69               	incf	(memcpy@s+1)& (0+255),f,b
 35669                           
 35670                           ; BSR set to: 0
 35671  00516A  4B66               	infsnz	memcpy@d& (0+255),f,b
 35672  00516C  2B67               	incf	(memcpy@d+1)& (0+255),f,b
 35673  00516E                     l11984:
 35674                           
 35675                           ; BSR set to: 0
 35676  00516E  0764               	decf	memcpy@n& (0+255),f,b
 35677  005170  A0D8               	btfss	status,0,c
 35678  005172  0765               	decf	(memcpy@n+1)& (0+255),f,b
 35679  005174  2964               	incf	memcpy@n& (0+255),w,b
 35680  005176  E1E1               	bnz	l11978
 35681  005178  2965               	incf	(memcpy@n+1)& (0+255),w,b
 35682  00517A  E1DF               	bnz	l11978
 35683                           
 35684                           ; BSR set to: 0
 35685  00517C  0012               	return		;funcret
 35686  00517E                     __end_of_memcpy:
 35687                           	opt stack 0
 35688                           tosu	equ	0xFFF
 35689                           tosh	equ	0xFFE
 35690                           tosl	equ	0xFFD
 35691                           pclath	equ	0xFFA
 35692                           tblptru	equ	0xFF8
 35693                           tblptrh	equ	0xFF7
 35694                           tblptrl	equ	0xFF6
 35695                           tablat	equ	0xFF5
 35696                           prodh	equ	0xFF4
 35697                           prodl	equ	0xFF3
 35698                           intcon	equ	0xFF2
 35699                           indf0	equ	0xFEF
 35700                           postinc0	equ	0xFEE
 35701                           plusw0	equ	0xFEB
 35702                           fsr0h	equ	0xFEA
 35703                           fsr0l	equ	0xFE9
 35704                           wreg	equ	0xFE8
 35705                           postinc1	equ	0xFE6
 35706                           postdec1	equ	0xFE5
 35707                           plusw1	equ	0xFE3
 35708                           fsr1h	equ	0xFE2
 35709                           fsr1l	equ	0xFE1
 35710                           indf2	equ	0xFDF
 35711                           postinc2	equ	0xFDE
 35712                           postdec2	equ	0xFDD
 35713                           plusw2	equ	0xFDB
 35714                           fsr2h	equ	0xFDA
 35715                           fsr2l	equ	0xFD9
 35716                           status	equ	0xFD8
 35717                           
 35718 ;; *************** function _CreateAllSoftwareTimers *****************
 35719 ;; Defined at:
 35720 ;;		line 937 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 35721 ;; Parameters:    Size  Location     Type
 35722 ;;		None
 35723 ;; Auto vars:     Size  Location     Type
 35724 ;;		None
 35725 ;; Return value:  Size  Location     Type
 35726 ;;                  1    wreg      void 
 35727 ;; Registers used:
 35728 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 35729 ;; Tracked objects:
 35730 ;;		On entry : 3F/2
 35731 ;;		On exit  : 3F/2
 35732 ;;		Unchanged: 0/0
 35733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 35734 ;;      Params:         0       0       0       0       0       0       0       0       0
 35735 ;;      Locals:         0       0       0       0       0       0       0       0       0
 35736 ;;      Temps:          0       0       0       0       0       0       0       0       0
 35737 ;;      Totals:         0       0       0       0       0       0       0       0       0
 35738 ;;Total ram usage:        0 bytes
 35739 ;; Hardware stack levels used:    1
 35740 ;; Hardware stack levels required when called:    8
 35741 ;; This function calls:
 35742 ;;		_SwTimerCreate
 35743 ;; This function is called by:
 35744 ;;		_LORAWAN_Init
 35745 ;; This function uses a non-reentrant model
 35746 ;;
 35747                           
 35748                           	psect	text193
 35749  005224                     __ptext193:
 35750                           	opt stack 0
 35751  005224                     _CreateAllSoftwareTimers:
 35752                           	opt stack 21
 35753                           
 35754                           ; BSR set to: 2
 35755                           ;lorawan_eu.c: 939: loRa.joinAccept1TimerId = SwTimerCreate();
 35756                           
 35757                           ; BSR set to: 0
 35758                           ;incstack = 0
 35759  005224  EC7E  F02B         	call	_SwTimerCreate	;wreg free
 35760  005228  0102               	movlb	2	; () banked
 35761  00522A  6FE2               	movwf	(_loRa+226)& (0+255),b
 35762                           
 35763                           ;lorawan_eu.c: 940: loRa.joinAccept2TimerId = SwTimerCreate();
 35764  00522C  EC7E  F02B         	call	_SwTimerCreate	;wreg free
 35765  005230  0102               	movlb	2	; () banked
 35766  005232  6FE3               	movwf	(_loRa+227)& (0+255),b
 35767                           
 35768                           ;lorawan_eu.c: 941: loRa.receiveWindow1TimerId = SwTimerCreate();
 35769  005234  EC7E  F02B         	call	_SwTimerCreate	;wreg free
 35770  005238  0102               	movlb	2	; () banked
 35771  00523A  6FE4               	movwf	(_loRa+228)& (0+255),b
 35772                           
 35773                           ;lorawan_eu.c: 942: loRa.receiveWindow2TimerId = SwTimerCreate();
 35774  00523C  EC7E  F02B         	call	_SwTimerCreate	;wreg free
 35775  005240  0102               	movlb	2	; () banked
 35776  005242  6FE5               	movwf	(_loRa+229)& (0+255),b
 35777                           
 35778                           ;lorawan_eu.c: 943: loRa.linkCheckTimerId = SwTimerCreate();
 35779  005244  EC7E  F02B         	call	_SwTimerCreate	;wreg free
 35780  005248  0102               	movlb	2	; () banked
 35781  00524A  6FE7               	movwf	(_loRa+231)& (0+255),b
 35782                           
 35783                           ;lorawan_eu.c: 944: loRa.ackTimeoutTimerId = SwTimerCreate();
 35784  00524C  EC7E  F02B         	call	_SwTimerCreate	;wreg free
 35785  005250  0102               	movlb	2	; () banked
 35786  005252  6FE8               	movwf	(_loRa+232)& (0+255),b
 35787                           
 35788                           ;lorawan_eu.c: 945: loRa.automaticReplyTimerId = SwTimerCreate();
 35789  005254  EC7E  F02B         	call	_SwTimerCreate	;wreg free
 35790  005258  0102               	movlb	2	; () banked
 35791  00525A  6FE6               	movwf	(_loRa+230)& (0+255),b
 35792                           
 35793                           ;lorawan_eu.c: 946: loRa.unconfirmedRetransmisionTimerId = SwTimerCreate();
 35794  00525C  EC7E  F02B         	call	_SwTimerCreate	;wreg free
 35795  005260  0102               	movlb	2	; () banked
 35796  005262  6FEA               	movwf	(_loRa+234)& (0+255),b
 35797                           
 35798                           ;lorawan_eu.c: 947: loRa.abpJoinTimerId = SwTimerCreate();
 35799  005264  EC7E  F02B         	call	_SwTimerCreate	;wreg free
 35800  005268  0102               	movlb	2	; () banked
 35801  00526A  6FF3               	movwf	(_loRa+243)& (0+255),b
 35802                           
 35803                           ;lorawan_eu.c: 948: loRa.dutyCycleTimerId = SwTimerCreate();
 35804  00526C  EC7E  F02B         	call	_SwTimerCreate	;wreg free
 35805  005270  0102               	movlb	2	; () banked
 35806  005272  6FE9               	movwf	(_loRa+233)& (0+255),b
 35807                           
 35808                           ; BSR set to: 2
 35809  005274  0012               	return		;funcret
 35810  005276                     __end_of_CreateAllSoftwareTimers:
 35811                           	opt stack 0
 35812                           tosu	equ	0xFFF
 35813                           tosh	equ	0xFFE
 35814                           tosl	equ	0xFFD
 35815                           pclath	equ	0xFFA
 35816                           tblptru	equ	0xFF8
 35817                           tblptrh	equ	0xFF7
 35818                           tblptrl	equ	0xFF6
 35819                           tablat	equ	0xFF5
 35820                           prodh	equ	0xFF4
 35821                           prodl	equ	0xFF3
 35822                           intcon	equ	0xFF2
 35823                           indf0	equ	0xFEF
 35824                           postinc0	equ	0xFEE
 35825                           plusw0	equ	0xFEB
 35826                           fsr0h	equ	0xFEA
 35827                           fsr0l	equ	0xFE9
 35828                           wreg	equ	0xFE8
 35829                           postinc1	equ	0xFE6
 35830                           postdec1	equ	0xFE5
 35831                           plusw1	equ	0xFE3
 35832                           fsr1h	equ	0xFE2
 35833                           fsr1l	equ	0xFE1
 35834                           indf2	equ	0xFDF
 35835                           postinc2	equ	0xFDE
 35836                           postdec2	equ	0xFDD
 35837                           plusw2	equ	0xFDB
 35838                           fsr2h	equ	0xFDA
 35839                           fsr2l	equ	0xFD9
 35840                           status	equ	0xFD8
 35841                           
 35842 ;; *************** function _SwTimerCreate *****************
 35843 ;; Defined at:
 35844 ;;		line 154 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 35845 ;; Parameters:    Size  Location     Type
 35846 ;;		None
 35847 ;; Auto vars:     Size  Location     Type
 35848 ;;  retVal          1    0[BANK0 ] unsigned char 
 35849 ;; Return value:  Size  Location     Type
 35850 ;;                  1    wreg      unsigned char 
 35851 ;; Registers used:
 35852 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 35853 ;; Tracked objects:
 35854 ;;		On entry : 3C/1
 35855 ;;		On exit  : 3F/0
 35856 ;;		Unchanged: 0/0
 35857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 35858 ;;      Params:         0       0       0       0       0       0       0       0       0
 35859 ;;      Locals:         0       1       0       0       0       0       0       0       0
 35860 ;;      Temps:          0       0       0       0       0       0       0       0       0
 35861 ;;      Totals:         0       1       0       0       0       0       0       0       0
 35862 ;;Total ram usage:        1 bytes
 35863 ;; Hardware stack levels used:    1
 35864 ;; Hardware stack levels required when called:    7
 35865 ;; This function calls:
 35866 ;;		Nothing
 35867 ;; This function is called by:
 35868 ;;		_CreateAllSoftwareTimers
 35869 ;;		_RADIO_Init
 35870 ;; This function uses a non-reentrant model
 35871 ;;
 35872                           
 35873                           	psect	text194
 35874  0056FC                     __ptext194:
 35875                           	opt stack 0
 35876  0056FC                     _SwTimerCreate:
 35877                           	opt stack 21
 35878                           
 35879                           ;sw_timer.c: 156: uint8_t retVal;
 35880                           ;sw_timer.c: 157: if (allocatedTimers < 20)
 35881                           
 35882                           ; BSR set to: 2
 35883                           ;incstack = 0
 35884  0056FC  0E14               	movlw	20
 35885  0056FE  0100               	movlb	0	; () banked
 35886  005700  61FF               	cpfslt	_allocatedTimers& (0+255),b	;volatile
 35887  005702  D018               	goto	l2577
 35888                           
 35889                           ; BSR set to: 0
 35890                           ;sw_timer.c: 158: {
 35891                           ;sw_timer.c: 159: (INTCONbits.GIE = 0);
 35892  005704  9EF2               	bcf	intcon,7,c	;volatile
 35893                           
 35894                           ;sw_timer.c: 160: retVal = allocatedTimers;
 35895  005706  C0FF  F060         	movff	_allocatedTimers,SwTimerCreate@retVal	;volatile
 35896                           
 35897                           ; BSR set to: 0
 35898                           ;sw_timer.c: 161: swTimers[retVal].running = 0;
 35899  00570A  5160               	movf	SwTimerCreate@retVal& (0+255),w,b
 35900  00570C  ECDB  F023         	call	PL40	;call to abstracted procedure
 35901  005710  6ADF               	clrf	indf2,c
 35902                           
 35903                           ;sw_timer.c: 162: swTimers[retVal].ticksRemaining = 0;
 35904  005712  5160               	movf	SwTimerCreate@retVal& (0+255),w,b
 35905  005714  EC84  F01F         	call	PL10	;call to abstracted procedure
 35906  005718  ECA2  F01D         	call	PL182	;call to abstracted procedure
 35907                           
 35908                           ;sw_timer.c: 163: swTimers[retVal].callbackParameter = 0;
 35909  00571C  5160               	movf	SwTimerCreate@retVal& (0+255),w,b
 35910  00571E  ECBC  F02D         	call	PL158	;call to abstracted procedure
 35911  005722  6ADF               	clrf	indf2,c
 35912                           
 35913                           ;sw_timer.c: 164: swTimers[retVal].callback = (0);
 35914  005724  5160               	movf	SwTimerCreate@retVal& (0+255),w,b
 35915  005726  ECE3  F023         	call	PL94	;call to abstracted procedure
 35916  00572A  6ADE               	clrf	postinc2,c
 35917  00572C  6ADD               	clrf	postdec2,c
 35918                           
 35919                           ; BSR set to: 0
 35920                           ;sw_timer.c: 165: allocatedTimers++;
 35921  00572E  2BFF               	incf	_allocatedTimers& (0+255),f,b	;volatile
 35922                           
 35923                           ; BSR set to: 0
 35924                           ;sw_timer.c: 166: (INTCONbits.GIE = 1);
 35925  005730  8EF2               	bsf	intcon,7,c	;volatile
 35926                           
 35927                           ;sw_timer.c: 167: }
 35928  005732  D001               	goto	l10482
 35929  005734                     l2577:
 35930  005734  D7FF               	goto	l2577
 35931  005736                     l10482:
 35932                           
 35933                           ; BSR set to: 0
 35934                           ;sw_timer.c: 175: }
 35935                           ;sw_timer.c: 176: }
 35936                           ;sw_timer.c: 177: return retVal;
 35937  005736  5160               	movf	SwTimerCreate@retVal& (0+255),w,b
 35938                           
 35939                           ; BSR set to: 0
 35940  005738  0012               	return		;funcret
 35941  00573A                     __end_of_SwTimerCreate:
 35942                           	opt stack 0
 35943                           tosu	equ	0xFFF
 35944                           tosh	equ	0xFFE
 35945                           tosl	equ	0xFFD
 35946                           pclath	equ	0xFFA
 35947                           tblptru	equ	0xFF8
 35948                           tblptrh	equ	0xFF7
 35949                           tblptrl	equ	0xFF6
 35950                           tablat	equ	0xFF5
 35951                           prodh	equ	0xFF4
 35952                           prodl	equ	0xFF3
 35953                           intcon	equ	0xFF2
 35954                           indf0	equ	0xFEF
 35955                           postinc0	equ	0xFEE
 35956                           plusw0	equ	0xFEB
 35957                           fsr0h	equ	0xFEA
 35958                           fsr0l	equ	0xFE9
 35959                           wreg	equ	0xFE8
 35960                           postinc1	equ	0xFE6
 35961                           postdec1	equ	0xFE5
 35962                           plusw1	equ	0xFE3
 35963                           fsr1h	equ	0xFE2
 35964                           fsr1l	equ	0xFE1
 35965                           indf2	equ	0xFDF
 35966                           postinc2	equ	0xFDE
 35967                           postdec2	equ	0xFDD
 35968                           plusw2	equ	0xFDB
 35969                           fsr2h	equ	0xFDA
 35970                           fsr2l	equ	0xFD9
 35971                           status	equ	0xFD8
 35972                           
 35973 ;; *************** function _INTERRUPT_InterruptManager *****************
 35974 ;; Defined at:
 35975 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 35976 ;; Parameters:    Size  Location     Type
 35977 ;;		None
 35978 ;; Auto vars:     Size  Location     Type
 35979 ;;		None
 35980 ;; Return value:  Size  Location     Type
 35981 ;;                  1    wreg      void 
 35982 ;; Registers used:
 35983 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 35984 ;; Tracked objects:
 35985 ;;		On entry : 0/0
 35986 ;;		On exit  : 0/0
 35987 ;;		Unchanged: 0/0
 35988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 35989 ;;      Params:         0       0       0       0       0       0       0       0       0
 35990 ;;      Locals:         0       0       0       0       0       0       0       0       0
 35991 ;;      Temps:          8       0       0       0       0       0       0       0       0
 35992 ;;      Totals:         8       0       0       0       0       0       0       0       0
 35993 ;;Total ram usage:        8 bytes
 35994 ;; Hardware stack levels used:    1
 35995 ;; Hardware stack levels required when called:    6
 35996 ;; This function calls:
 35997 ;;		_INT1_ISR
 35998 ;;		_INT2_ISR
 35999 ;;		_INT3_ISR
 36000 ;;		_PIN_MANAGER_IOC
 36001 ;;		_TMR1_ISR
 36002 ;; This function is called by:
 36003 ;;		Interrupt level 2
 36004 ;; This function uses a non-reentrant model
 36005 ;;
 36006                           
 36007                           	psect	intcode
 36008  000008                     __pintcode:
 36009                           	opt stack 0
 36010  000008                     _INTERRUPT_InterruptManager:
 36011                           	opt stack 12
 36012                           
 36013                           ; BSR set to: 0
 36014                           ;incstack = 0
 36015  000008  CFFA F028          	movff	pclath,??_INTERRUPT_InterruptManager
 36016  00000C  CFFB F029          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 36017  000010  CFE1 F02A          	movff	fsr1l,??_INTERRUPT_InterruptManager+2
 36018  000014  CFE2 F02B          	movff	fsr1h,??_INTERRUPT_InterruptManager+3
 36019  000018  CFD9 F02C          	movff	fsr2l,??_INTERRUPT_InterruptManager+4
 36020  00001C  CFDA F02D          	movff	fsr2h,??_INTERRUPT_InterruptManager+5
 36021  000020  CFF3 F02E          	movff	prodl,??_INTERRUPT_InterruptManager+6
 36022  000024  CFF4 F02F          	movff	prodh,??_INTERRUPT_InterruptManager+7
 36023  000028  EE17  F054         	lfsr	1,___inthi_sp
 36024                           
 36025                           ;interrupt_manager.c: 60: if(PIE0bits.INT3IE == 1 && PIR0bits.INT3IF == 1)
 36026  00002C  010E               	movlb	14	; () banked
 36027  00002E  B729               	btfsc	41,3,b	;volatile
 36028                           
 36029                           ; BSR set to: 14
 36030  000030  A733               	btfss	51,3,b	;volatile
 36031  000032  D003               	goto	i2l211
 36032                           
 36033                           ; BSR set to: 14
 36034                           ;interrupt_manager.c: 61: {
 36035                           ;interrupt_manager.c: 62: INT3_ISR();
 36036  000034  EC10  F031         	call	_INT3_ISR	;wreg free
 36037                           
 36038                           ;interrupt_manager.c: 63: }
 36039  000038  D019               	goto	i2l221
 36040  00003A                     i2l211:
 36041                           
 36042                           ; BSR set to: 14
 36043                           ;interrupt_manager.c: 64: else if(PIE0bits.INT1IE == 1 && PIR0bits.INT1IF == 1)
 36044  00003A  B329               	btfsc	41,1,b	;volatile
 36045                           
 36046                           ; BSR set to: 14
 36047  00003C  A333               	btfss	51,1,b	;volatile
 36048  00003E  D003               	goto	i2l213
 36049                           
 36050                           ; BSR set to: 14
 36051                           ;interrupt_manager.c: 65: {
 36052                           ;interrupt_manager.c: 66: INT1_ISR();
 36053  000040  EC16  F031         	call	_INT1_ISR	;wreg free
 36054                           
 36055                           ;interrupt_manager.c: 67: }
 36056  000044  D013               	goto	i2l221
 36057  000046                     i2l213:
 36058                           
 36059                           ; BSR set to: 14
 36060                           ;interrupt_manager.c: 68: else if(PIE0bits.INT2IE == 1 && PIR0bits.INT2IF == 1)
 36061  000046  B529               	btfsc	41,2,b	;volatile
 36062                           
 36063                           ; BSR set to: 14
 36064  000048  A533               	btfss	51,2,b	;volatile
 36065  00004A  D003               	goto	i2l215
 36066                           
 36067                           ; BSR set to: 14
 36068                           ;interrupt_manager.c: 69: {
 36069                           ;interrupt_manager.c: 70: INT2_ISR();
 36070  00004C  EC13  F031         	call	_INT2_ISR	;wreg free
 36071                           
 36072                           ;interrupt_manager.c: 71: }
 36073  000050  D00D               	goto	i2l221
 36074  000052                     i2l215:
 36075                           
 36076                           ; BSR set to: 14
 36077                           ;interrupt_manager.c: 72: else if(INTCONbits.PEIE == 1 && PIE5bits.TMR1IE == 1 && PIR5bi
      +                          ts.TMR1IF == 1)
 36078  000052  BCF2               	btfsc	intcon,6,c	;volatile
 36079                           
 36080                           ; BSR set to: 14
 36081  000054  A12E               	btfss	46,0,b	;volatile
 36082  000056  D005               	goto	i2l217
 36083                           
 36084                           ; BSR set to: 14
 36085  000058  A138               	btfss	56,0,b	;volatile
 36086  00005A  D003               	goto	i2l217
 36087                           
 36088                           ; BSR set to: 14
 36089                           ;interrupt_manager.c: 73: {
 36090                           ;interrupt_manager.c: 74: TMR1_ISR();
 36091  00005C  EC9C  F02E         	call	_TMR1_ISR	;wreg free
 36092                           
 36093                           ;interrupt_manager.c: 75: }
 36094  000060  D005               	goto	i2l221
 36095  000062                     i2l217:
 36096                           
 36097                           ; BSR set to: 14
 36098                           ;interrupt_manager.c: 76: else if(PIE0bits.IOCIE == 1 && PIR0bits.IOCIF == 1)
 36099  000062  B929               	btfsc	41,4,b	;volatile
 36100                           
 36101                           ; BSR set to: 14
 36102  000064  A933               	btfss	51,4,b	;volatile
 36103  000066  D002               	goto	i2l221
 36104                           
 36105                           ; BSR set to: 14
 36106                           ;interrupt_manager.c: 77: {
 36107                           ;interrupt_manager.c: 78: PIN_MANAGER_IOC();
 36108  000068  ECFA  F030         	call	_PIN_MANAGER_IOC	;wreg free
 36109  00006C                     i2l221:
 36110  00006C  C02F  FFF4         	movff	??_INTERRUPT_InterruptManager+7,prodh
 36111  000070  C02E  FFF3         	movff	??_INTERRUPT_InterruptManager+6,prodl
 36112  000074  C02D  FFDA         	movff	??_INTERRUPT_InterruptManager+5,fsr2h
 36113  000078  C02C  FFD9         	movff	??_INTERRUPT_InterruptManager+4,fsr2l
 36114  00007C  C02B  FFE2         	movff	??_INTERRUPT_InterruptManager+3,fsr1h
 36115  000080  C02A  FFE1         	movff	??_INTERRUPT_InterruptManager+2,fsr1l
 36116  000084  C029  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 36117  000088  C028  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 36118  00008C  0011               	retfie		f
 36119  00008E                     __end_of_INTERRUPT_InterruptManager:
 36120                           	opt stack 0
 36121                           tosu	equ	0xFFF
 36122                           tosh	equ	0xFFE
 36123                           tosl	equ	0xFFD
 36124                           pclatu	equ	0xFFB
 36125                           pclath	equ	0xFFA
 36126                           tblptru	equ	0xFF8
 36127                           tblptrh	equ	0xFF7
 36128                           tblptrl	equ	0xFF6
 36129                           tablat	equ	0xFF5
 36130                           prodh	equ	0xFF4
 36131                           prodl	equ	0xFF3
 36132                           intcon	equ	0xFF2
 36133                           indf0	equ	0xFEF
 36134                           postinc0	equ	0xFEE
 36135                           plusw0	equ	0xFEB
 36136                           fsr0h	equ	0xFEA
 36137                           fsr0l	equ	0xFE9
 36138                           wreg	equ	0xFE8
 36139                           postinc1	equ	0xFE6
 36140                           postdec1	equ	0xFE5
 36141                           plusw1	equ	0xFE3
 36142                           fsr1h	equ	0xFE2
 36143                           fsr1l	equ	0xFE1
 36144                           indf2	equ	0xFDF
 36145                           postinc2	equ	0xFDE
 36146                           postdec2	equ	0xFDD
 36147                           plusw2	equ	0xFDB
 36148                           fsr2h	equ	0xFDA
 36149                           fsr2l	equ	0xFD9
 36150                           status	equ	0xFD8
 36151                           
 36152 ;; *************** function _TMR1_ISR *****************
 36153 ;; Defined at:
 36154 ;;		line 161 in file "mcc_generated_files/tmr1.c"
 36155 ;; Parameters:    Size  Location     Type
 36156 ;;		None
 36157 ;; Auto vars:     Size  Location     Type
 36158 ;;		None
 36159 ;; Return value:  Size  Location     Type
 36160 ;;                  1    wreg      void 
 36161 ;; Registers used:
 36162 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 36163 ;; Tracked objects:
 36164 ;;		On entry : 3F/E
 36165 ;;		On exit  : 0/0
 36166 ;;		Unchanged: 0/0
 36167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 36168 ;;      Params:         0       0       0       0       0       0       0       0       0
 36169 ;;      Locals:         0       0       0       0       0       0       0       0       0
 36170 ;;      Temps:          0       0       0       0       0       0       0       0       0
 36171 ;;      Totals:         0       0       0       0       0       0       0       0       0
 36172 ;;Total ram usage:        0 bytes
 36173 ;; Hardware stack levels used:    1
 36174 ;; Hardware stack levels required when called:    5
 36175 ;; This function calls:
 36176 ;;		_TMR1_CallBack
 36177 ;; This function is called by:
 36178 ;;		_INTERRUPT_InterruptManager
 36179 ;; This function uses a non-reentrant model
 36180 ;;
 36181                           
 36182                           	psect	text196
 36183  005D38                     __ptext196:
 36184                           	opt stack 0
 36185  005D38                     _TMR1_ISR:
 36186                           	opt stack 12
 36187                           
 36188                           ; BSR set to: 14
 36189                           ;tmr1.c: 163: static volatile unsigned int CountCallBack = 0;
 36190                           ;tmr1.c: 166: PIR5bits.TMR1IF = 0;
 36191                           
 36192                           ;incstack = 0
 36193  005D38  9138               	bcf	56,0,b	;volatile
 36194                           
 36195                           ;tmr1.c: 168: TMR1H = (timer1ReloadVal >> 8);
 36196  005D3A  C05D  FFCE         	movff	_timer1ReloadVal+1,4046	;volatile
 36197                           
 36198                           ;tmr1.c: 169: TMR1L = timer1ReloadVal;
 36199  005D3E  C05C  FFCD         	movff	_timer1ReloadVal,4045	;volatile
 36200                           
 36201                           ; BSR set to: 14
 36202                           ;tmr1.c: 172: if (++CountCallBack >= 16)
 36203  005D42  4A42               	infsnz	TMR1_ISR@CountCallBack,f,c	;volatile
 36204  005D44  2A43               	incf	TMR1_ISR@CountCallBack+1,f,c	;volatile
 36205  005D46  5043               	movf	TMR1_ISR@CountCallBack+1,w,c	;volatile
 36206  005D48  E104               	bnz	i2u1957_40
 36207  005D4A  0E10               	movlw	16
 36208  005D4C  5C42               	subwf	TMR1_ISR@CountCallBack,w,c	;volatile
 36209  005D4E  A0D8               	btfss	status,0,c
 36210  005D50  0012               	return	
 36211  005D52                     i2u1957_40:
 36212                           
 36213                           ; BSR set to: 14
 36214                           ;tmr1.c: 173: {
 36215                           ;tmr1.c: 175: TMR1_CallBack();
 36216  005D52  EC3D  F02F         	call	_TMR1_CallBack	;wreg free
 36217                           
 36218                           ;tmr1.c: 178: CountCallBack = 0;
 36219  005D56  6A42               	clrf	TMR1_ISR@CountCallBack,c	;volatile
 36220  005D58  6A43               	clrf	TMR1_ISR@CountCallBack+1,c	;volatile
 36221  005D5A  0012               	return		;funcret
 36222  005D5C                     __end_of_TMR1_ISR:
 36223                           	opt stack 0
 36224                           tosu	equ	0xFFF
 36225                           tosh	equ	0xFFE
 36226                           tosl	equ	0xFFD
 36227                           pclatu	equ	0xFFB
 36228                           pclath	equ	0xFFA
 36229                           tblptru	equ	0xFF8
 36230                           tblptrh	equ	0xFF7
 36231                           tblptrl	equ	0xFF6
 36232                           tablat	equ	0xFF5
 36233                           prodh	equ	0xFF4
 36234                           prodl	equ	0xFF3
 36235                           intcon	equ	0xFF2
 36236                           indf0	equ	0xFEF
 36237                           postinc0	equ	0xFEE
 36238                           plusw0	equ	0xFEB
 36239                           fsr0h	equ	0xFEA
 36240                           fsr0l	equ	0xFE9
 36241                           wreg	equ	0xFE8
 36242                           postinc1	equ	0xFE6
 36243                           postdec1	equ	0xFE5
 36244                           plusw1	equ	0xFE3
 36245                           fsr1h	equ	0xFE2
 36246                           fsr1l	equ	0xFE1
 36247                           indf2	equ	0xFDF
 36248                           postinc2	equ	0xFDE
 36249                           postdec2	equ	0xFDD
 36250                           plusw2	equ	0xFDB
 36251                           fsr2h	equ	0xFDA
 36252                           fsr2l	equ	0xFD9
 36253                           status	equ	0xFD8
 36254                           
 36255 ;; *************** function _TMR1_CallBack *****************
 36256 ;; Defined at:
 36257 ;;		line 182 in file "mcc_generated_files/tmr1.c"
 36258 ;; Parameters:    Size  Location     Type
 36259 ;;		None
 36260 ;; Auto vars:     Size  Location     Type
 36261 ;;		None
 36262 ;; Return value:  Size  Location     Type
 36263 ;;                  1    wreg      void 
 36264 ;; Registers used:
 36265 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 36266 ;; Tracked objects:
 36267 ;;		On entry : 3F/E
 36268 ;;		On exit  : 0/0
 36269 ;;		Unchanged: 0/0
 36270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 36271 ;;      Params:         0       0       0       0       0       0       0       0       0
 36272 ;;      Locals:         0       0       0       0       0       0       0       0       0
 36273 ;;      Temps:          0       0       0       0       0       0       0       0       0
 36274 ;;      Totals:         0       0       0       0       0       0       0       0       0
 36275 ;;Total ram usage:        0 bytes
 36276 ;; Hardware stack levels used:    1
 36277 ;; Hardware stack levels required when called:    4
 36278 ;; This function calls:
 36279 ;;		Absolute function
 36280 ;;		_TMR1_DefaultInterruptHandler
 36281 ;;		_TMR_ISR_lora
 36282 ;; This function is called by:
 36283 ;;		_TMR1_ISR
 36284 ;; This function uses a non-reentrant model
 36285 ;;
 36286                           
 36287                           	psect	text197
 36288  005E7A                     __ptext197:
 36289                           	opt stack 0
 36290  005E7A                     _TMR1_CallBack:
 36291                           	opt stack 12
 36292                           
 36293                           ; BSR set to: 14
 36294                           ;tmr1.c: 185: if(TMR1_InterruptHandler)
 36295                           
 36296                           ;incstack = 0
 36297  005E7A  0101               	movlb	1	; () banked
 36298  005E7C  51F9               	movf	_TMR1_InterruptHandler& (0+255),w,b
 36299  005E7E  11FA               	iorwf	(_TMR1_InterruptHandler+1)& (0+255),w,b
 36300  005E80  B4D8               	btfsc	status,2,c
 36301  005E82  0012               	return	
 36302                           
 36303                           ; BSR set to: 1
 36304                           ;tmr1.c: 186: {
 36305                           ;tmr1.c: 187: TMR1_InterruptHandler();
 36306  005E84  0005               	push	
 36307  005E86  6EFA               	movwf	pclath,c
 36308  005E88  51F9               	movf	_TMR1_InterruptHandler& (0+255),w,b
 36309  005E8A  6EFD               	movwf	tosl,c
 36310  005E8C  51FA               	movf	(_TMR1_InterruptHandler+1)& (0+255),w,b
 36311  005E8E  6EFE               	movwf	tosh,c
 36312  005E90  50F8               	movf	tblptru,w,c
 36313  005E92  6EFF               	movwf	tosu,c
 36314  005E94  50FA               	movf	pclath,w,c
 36315  005E96  0012               	return		;indir
 36316  005E98                     __end_of_TMR1_CallBack:
 36317                           	opt stack 0
 36318                           tosu	equ	0xFFF
 36319                           tosh	equ	0xFFE
 36320                           tosl	equ	0xFFD
 36321                           pclatu	equ	0xFFB
 36322                           pclath	equ	0xFFA
 36323                           tblptru	equ	0xFF8
 36324                           tblptrh	equ	0xFF7
 36325                           tblptrl	equ	0xFF6
 36326                           tablat	equ	0xFF5
 36327                           prodh	equ	0xFF4
 36328                           prodl	equ	0xFF3
 36329                           intcon	equ	0xFF2
 36330                           indf0	equ	0xFEF
 36331                           postinc0	equ	0xFEE
 36332                           plusw0	equ	0xFEB
 36333                           fsr0h	equ	0xFEA
 36334                           fsr0l	equ	0xFE9
 36335                           wreg	equ	0xFE8
 36336                           postinc1	equ	0xFE6
 36337                           postdec1	equ	0xFE5
 36338                           plusw1	equ	0xFE3
 36339                           fsr1h	equ	0xFE2
 36340                           fsr1l	equ	0xFE1
 36341                           indf2	equ	0xFDF
 36342                           postinc2	equ	0xFDE
 36343                           postdec2	equ	0xFDD
 36344                           plusw2	equ	0xFDB
 36345                           fsr2h	equ	0xFDA
 36346                           fsr2l	equ	0xFD9
 36347                           status	equ	0xFD8
 36348                           
 36349 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 36350 ;; Defined at:
 36351 ;;		line 195 in file "mcc_generated_files/tmr1.c"
 36352 ;; Parameters:    Size  Location     Type
 36353 ;;		None
 36354 ;; Auto vars:     Size  Location     Type
 36355 ;;		None
 36356 ;; Return value:  Size  Location     Type
 36357 ;;                  1    wreg      void 
 36358 ;; Registers used:
 36359 ;;		None
 36360 ;; Tracked objects:
 36361 ;;		On entry : 3F/1
 36362 ;;		On exit  : 3F/1
 36363 ;;		Unchanged: 3F/0
 36364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 36365 ;;      Params:         0       0       0       0       0       0       0       0       0
 36366 ;;      Locals:         0       0       0       0       0       0       0       0       0
 36367 ;;      Temps:          0       0       0       0       0       0       0       0       0
 36368 ;;      Totals:         0       0       0       0       0       0       0       0       0
 36369 ;;Total ram usage:        0 bytes
 36370 ;; Hardware stack levels used:    1
 36371 ;; This function calls:
 36372 ;;		Nothing
 36373 ;; This function is called by:
 36374 ;;		_TMR1_Initialize
 36375 ;;		_TMR1_CallBack
 36376 ;; This function uses a non-reentrant model
 36377 ;;
 36378                           
 36379                           	psect	text198
 36380  006262                     __ptext198:
 36381                           	opt stack 0
 36382  006262                     _TMR1_DefaultInterruptHandler:
 36383                           	opt stack 15
 36384                           
 36385                           ; BSR set to: 1
 36386                           
 36387                           ;incstack = 0
 36388  006262  0012               	return		;funcret
 36389  006264                     __end_of_TMR1_DefaultInterruptHandler:
 36390                           	opt stack 0
 36391                           tosu	equ	0xFFF
 36392                           tosh	equ	0xFFE
 36393                           tosl	equ	0xFFD
 36394                           pclatu	equ	0xFFB
 36395                           pclath	equ	0xFFA
 36396                           tblptru	equ	0xFF8
 36397                           tblptrh	equ	0xFF7
 36398                           tblptrl	equ	0xFF6
 36399                           tablat	equ	0xFF5
 36400                           prodh	equ	0xFF4
 36401                           prodl	equ	0xFF3
 36402                           intcon	equ	0xFF2
 36403                           indf0	equ	0xFEF
 36404                           postinc0	equ	0xFEE
 36405                           plusw0	equ	0xFEB
 36406                           fsr0h	equ	0xFEA
 36407                           fsr0l	equ	0xFE9
 36408                           wreg	equ	0xFE8
 36409                           postinc1	equ	0xFE6
 36410                           postdec1	equ	0xFE5
 36411                           plusw1	equ	0xFE3
 36412                           fsr1h	equ	0xFE2
 36413                           fsr1l	equ	0xFE1
 36414                           indf2	equ	0xFDF
 36415                           postinc2	equ	0xFDE
 36416                           postdec2	equ	0xFDD
 36417                           plusw2	equ	0xFDB
 36418                           fsr2h	equ	0xFDA
 36419                           fsr2l	equ	0xFD9
 36420                           status	equ	0xFD8
 36421                           
 36422 ;; *************** function _TMR_ISR_lora *****************
 36423 ;; Defined at:
 36424 ;;		line 59 in file "mcc_generated_files/LoRaWAN/tmr_lora_addons.c"
 36425 ;; Parameters:    Size  Location     Type
 36426 ;;		None
 36427 ;; Auto vars:     Size  Location     Type
 36428 ;;		None
 36429 ;; Return value:  Size  Location     Type
 36430 ;;                  1    wreg      void 
 36431 ;; Registers used:
 36432 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 36433 ;; Tracked objects:
 36434 ;;		On entry : 3F/1
 36435 ;;		On exit  : 0/0
 36436 ;;		Unchanged: 0/0
 36437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 36438 ;;      Params:         0       0       0       0       0       0       0       0       0
 36439 ;;      Locals:         0       0       0       0       0       0       0       0       0
 36440 ;;      Temps:          0       0       0       0       0       0       0       0       0
 36441 ;;      Totals:         0       0       0       0       0       0       0       0       0
 36442 ;;Total ram usage:        0 bytes
 36443 ;; Hardware stack levels used:    1
 36444 ;; Hardware stack levels required when called:    3
 36445 ;; This function calls:
 36446 ;;		i2_SwTimersInterrupt
 36447 ;;		i2_TMR_SwapTimer
 36448 ;; This function is called by:
 36449 ;;		_TMR_ISR_Lora_Init
 36450 ;;		_TMR1_CallBack
 36451 ;; This function uses a non-reentrant model
 36452 ;;
 36453                           
 36454                           	psect	text199
 36455  005276                     __ptext199:
 36456                           	opt stack 0
 36457  005276                     _TMR_ISR_lora:
 36458                           	opt stack 12
 36459                           
 36460                           ; BSR set to: 1
 36461                           ;tmr_lora_addons.c: 61: timerOverflow = 1;
 36462                           
 36463                           ; BSR set to: 1
 36464                           ;incstack = 0
 36465  005276  0E01               	movlw	1
 36466  005278  6E44               	movwf	_timerOverflow,c	;volatile
 36467                           
 36468                           ; BSR set to: 1
 36469                           ;tmr_lora_addons.c: 63: ticksToScheduledInterrupt = SwTimersInterrupt();
 36470  00527A  EC90  F020         	call	i2_SwTimersInterrupt	;wreg free
 36471  00527E  C017  F058         	movff	?i2_SwTimersInterrupt,_ticksToScheduledInterrupt	;volatile
 36472  005282  C018  F059         	movff	?i2_SwTimersInterrupt+1,_ticksToScheduledInterrupt+1	;volatile
 36473  005286  C019  F05A         	movff	?i2_SwTimersInterrupt+2,_ticksToScheduledInterrupt+2	;volatile
 36474  00528A  C01A  F05B         	movff	?i2_SwTimersInterrupt+3,_ticksToScheduledInterrupt+3	;volatile
 36475                           
 36476                           ; BSR set to: 0
 36477                           ;tmr_lora_addons.c: 65: if (ticksToScheduledInterrupt < ((uint32_t)0x10000))
 36478  00528E  505B               	movf	_ticksToScheduledInterrupt+3,w,c	;volatile
 36479  005290  E114               	bnz	i2l2648
 36480  005292  045A               	decf	_ticksToScheduledInterrupt+2,w,c	;volatile
 36481  005294  B0D8               	btfsc	status,0,c
 36482  005296  0012               	return	
 36483                           
 36484                           ; BSR set to: 0
 36485                           ;tmr_lora_addons.c: 66: {
 36486                           ;tmr_lora_addons.c: 67: reloadVal = ((uint32_t)0x10000) - ticksToScheduledInterrupt;
 36487  005298  5058               	movf	_ticksToScheduledInterrupt,w,c	;volatile
 36488  00529A  0800               	sublw	0
 36489  00529C  6FFD               	movwf	_reloadVal& (0+255),b	;volatile
 36490  00529E  5059               	movf	_ticksToScheduledInterrupt+1,w,c	;volatile
 36491  0052A0  D80D               	call	PL422	;call to abstracted procedure
 36492                           
 36493                           ; BSR set to: 0
 36494                           ;tmr_lora_addons.c: 68: ticksAdded = TMR_SwapTimer(reloadVal);
 36495  0052A2  C0FD  F007         	movff	_reloadVal,i2TMR_SwapTimer@timerVal	;volatile
 36496  0052A6  C0FE  F008         	movff	_reloadVal+1,i2TMR_SwapTimer@timerVal+1	;volatile
 36497  0052AA  EC1F  F02B         	call	i2_TMR_SwapTimer	;wreg free
 36498  0052AE  C007  F038         	movff	?i2_TMR_SwapTimer,_ticksAdded	;volatile
 36499  0052B2  C008  F039         	movff	?i2_TMR_SwapTimer+1,_ticksAdded+1	;volatile
 36500  0052B6  6A3A               	clrf	_ticksAdded+2,c	;volatile
 36501  0052B8  6A3B               	clrf	_ticksAdded+3,c	;volatile
 36502  0052BA                     i2l2648:
 36503  0052BA  0012               	return		;funcret
 36504  0052BC                     __end_of_TMR_ISR_lora:
 36505                           	opt stack 0
 36506  0052BC                     PL422:
 36507                           	opt stack 17
 36508  0052BC  A0D8               	btfss	status,0,c
 36509  0052BE  2AE8               	incf	wreg,f,c
 36510  0052C0  0800               	sublw	0
 36511  0052C2  6FFE               	movwf	(_reloadVal+1)& (0+255),b	;volatile
 36512  0052C4  0012               	return	
 36513  0052C6                     __end_ofPL422:
 36514                           	opt stack 0
 36515                           tosu	equ	0xFFF
 36516                           tosh	equ	0xFFE
 36517                           tosl	equ	0xFFD
 36518                           pclatu	equ	0xFFB
 36519                           pclath	equ	0xFFA
 36520                           tblptru	equ	0xFF8
 36521                           tblptrh	equ	0xFF7
 36522                           tblptrl	equ	0xFF6
 36523                           tablat	equ	0xFF5
 36524                           prodh	equ	0xFF4
 36525                           prodl	equ	0xFF3
 36526                           intcon	equ	0xFF2
 36527                           indf0	equ	0xFEF
 36528                           postinc0	equ	0xFEE
 36529                           plusw0	equ	0xFEB
 36530                           fsr0h	equ	0xFEA
 36531                           fsr0l	equ	0xFE9
 36532                           wreg	equ	0xFE8
 36533                           postinc1	equ	0xFE6
 36534                           postdec1	equ	0xFE5
 36535                           plusw1	equ	0xFE3
 36536                           fsr1h	equ	0xFE2
 36537                           fsr1l	equ	0xFE1
 36538                           indf2	equ	0xFDF
 36539                           postinc2	equ	0xFDE
 36540                           postdec2	equ	0xFDD
 36541                           plusw2	equ	0xFDB
 36542                           fsr2h	equ	0xFDA
 36543                           fsr2l	equ	0xFD9
 36544                           status	equ	0xFD8
 36545                           
 36546 ;; *************** function i2_TMR_SwapTimer *****************
 36547 ;; Defined at:
 36548 ;;		line 112 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 36549 ;; Parameters:    Size  Location     Type
 36550 ;;  timerVal        2    6[COMRAM] unsigned int 
 36551 ;; Auto vars:     Size  Location     Type
 36552 ;;		None
 36553 ;; Return value:  Size  Location     Type
 36554 ;;                  2    6[COMRAM] unsigned int 
 36555 ;; Registers used:
 36556 ;;		wreg, status,2, status,0, cstack
 36557 ;; Tracked objects:
 36558 ;;		On entry : 3F/0
 36559 ;;		On exit  : 0/0
 36560 ;;		Unchanged: 0/0
 36561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 36562 ;;      Params:         2       0       0       0       0       0       0       0       0
 36563 ;;      Locals:         0       0       0       0       0       0       0       0       0
 36564 ;;      Temps:          0       0       0       0       0       0       0       0       0
 36565 ;;      Totals:         2       0       0       0       0       0       0       0       0
 36566 ;;Total ram usage:        2 bytes
 36567 ;; Hardware stack levels used:    1
 36568 ;; Hardware stack levels required when called:    1
 36569 ;; This function calls:
 36570 ;;		i2_TMR1_ReadTimer
 36571 ;;		i2_TMR1_WriteTimer
 36572 ;; This function is called by:
 36573 ;;		_TMR_ISR_lora
 36574 ;; This function uses a non-reentrant model
 36575 ;;
 36576                           
 36577                           	psect	text200
 36578  00563E                     __ptext200:
 36579                           	opt stack 0
 36580  00563E                     i2_TMR_SwapTimer:
 36581                           	opt stack 13
 36582                           
 36583                           ; BSR set to: 0
 36584                           ;sw_timer.c: 114: static uint16_t oldVal;
 36585                           ;sw_timer.c: 115: static uint16_t retVal;
 36586                           ;sw_timer.c: 117: oldVal = TMR1_ReadTimer();
 36587                           
 36588                           ;incstack = 0
 36589  00563E  EC00  F02F         	call	i2_TMR1_ReadTimer	;wreg free
 36590  005642  C001  F03E         	movff	?i2_TMR1_ReadTimer,TMR_SwapTimer@oldVal
 36591  005646  C002  F03F         	movff	?i2_TMR1_ReadTimer+1,TMR_SwapTimer@oldVal+1
 36592  00564A                     i2l10544:
 36593  00564A  EC00  F02F         	call	i2_TMR1_ReadTimer	;wreg free
 36594  00564E  503E               	movf	TMR_SwapTimer@oldVal,w,c
 36595  005650  1801               	xorwf	?i2_TMR1_ReadTimer,w,c
 36596  005652  E103               	bnz	i2u1101_40
 36597  005654  503F               	movf	TMR_SwapTimer@oldVal+1,w,c
 36598  005656  1802               	xorwf	?i2_TMR1_ReadTimer+1,w,c
 36599  005658  E0F8               	bz	i2l10544
 36600  00565A                     i2u1101_40:
 36601                           
 36602                           ;sw_timer.c: 125: TMR1_WriteTimer(timerVal);
 36603  00565A  C007  F001         	movff	i2TMR_SwapTimer@timerVal,i2TMR1_WriteTimer@timerVal
 36604  00565E  C008  F002         	movff	i2TMR_SwapTimer@timerVal+1,i2TMR1_WriteTimer@timerVal+1
 36605  005662  ECF4  F02F         	call	i2_TMR1_WriteTimer	;wreg free
 36606                           
 36607                           ;sw_timer.c: 128: oldVal++;
 36608                           
 36609                           ;sw_timer.c: 130: retVal = oldVal;
 36610  005666  D805               	call	PL296	;call to abstracted procedure
 36611                           
 36612                           ;sw_timer.c: 132: return retVal;
 36613  005668  C03C  F007         	movff	TMR_SwapTimer@retVal,?i2_TMR_SwapTimer
 36614  00566C  C03D  F008         	movff	TMR_SwapTimer@retVal+1,?i2_TMR_SwapTimer+1
 36615  005670  0012               	return		;funcret
 36616  005672                     __end_ofi2_TMR_SwapTimer:
 36617                           	opt stack 0
 36618  005672                     PL296:
 36619                           	opt stack 17
 36620  005672  4A3E               	infsnz	TMR_SwapTimer@oldVal,f,c
 36621  005674  2A3F               	incf	TMR_SwapTimer@oldVal+1,f,c
 36622  005676  C03E  F03C         	movff	TMR_SwapTimer@oldVal,TMR_SwapTimer@retVal
 36623  00567A  C03F  F03D         	movff	TMR_SwapTimer@oldVal+1,TMR_SwapTimer@retVal+1
 36624  00567E  0012               	return	
 36625  005680                     __end_ofPL296:
 36626                           	opt stack 0
 36627                           tosu	equ	0xFFF
 36628                           tosh	equ	0xFFE
 36629                           tosl	equ	0xFFD
 36630                           pclatu	equ	0xFFB
 36631                           pclath	equ	0xFFA
 36632                           tblptru	equ	0xFF8
 36633                           tblptrh	equ	0xFF7
 36634                           tblptrl	equ	0xFF6
 36635                           tablat	equ	0xFF5
 36636                           prodh	equ	0xFF4
 36637                           prodl	equ	0xFF3
 36638                           intcon	equ	0xFF2
 36639                           indf0	equ	0xFEF
 36640                           postinc0	equ	0xFEE
 36641                           plusw0	equ	0xFEB
 36642                           fsr0h	equ	0xFEA
 36643                           fsr0l	equ	0xFE9
 36644                           wreg	equ	0xFE8
 36645                           postinc1	equ	0xFE6
 36646                           postdec1	equ	0xFE5
 36647                           plusw1	equ	0xFE3
 36648                           fsr1h	equ	0xFE2
 36649                           fsr1l	equ	0xFE1
 36650                           indf2	equ	0xFDF
 36651                           postinc2	equ	0xFDE
 36652                           postdec2	equ	0xFDD
 36653                           plusw2	equ	0xFDB
 36654                           fsr2h	equ	0xFDA
 36655                           fsr2l	equ	0xFD9
 36656                           status	equ	0xFD8
 36657                           
 36658 ;; *************** function i2_TMR1_WriteTimer *****************
 36659 ;; Defined at:
 36660 ;;		line 122 in file "mcc_generated_files/tmr1.c"
 36661 ;; Parameters:    Size  Location     Type
 36662 ;;  timerVal        2    0[COMRAM] unsigned int 
 36663 ;; Auto vars:     Size  Location     Type
 36664 ;;		None
 36665 ;; Return value:  Size  Location     Type
 36666 ;;                  1    wreg      void 
 36667 ;; Registers used:
 36668 ;;		None
 36669 ;; Tracked objects:
 36670 ;;		On entry : 0/0
 36671 ;;		On exit  : 0/0
 36672 ;;		Unchanged: 0/0
 36673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 36674 ;;      Params:         2       0       0       0       0       0       0       0       0
 36675 ;;      Locals:         0       0       0       0       0       0       0       0       0
 36676 ;;      Temps:          0       0       0       0       0       0       0       0       0
 36677 ;;      Totals:         2       0       0       0       0       0       0       0       0
 36678 ;;Total ram usage:        2 bytes
 36679 ;; Hardware stack levels used:    1
 36680 ;; This function calls:
 36681 ;;		Nothing
 36682 ;; This function is called by:
 36683 ;;		i2_TMR_SwapTimer
 36684 ;; This function uses a non-reentrant model
 36685 ;;
 36686                           
 36687                           	psect	text201
 36688  005FE8                     __ptext201:
 36689                           	opt stack 0
 36690  005FE8                     i2_TMR1_WriteTimer:
 36691                           	opt stack 13
 36692                           
 36693                           ;tmr1.c: 124: if (T1CONbits.nT1SYNC == 1)
 36694                           
 36695                           ;incstack = 0
 36696  005FE8  A4CF               	btfss	4047,2,c	;volatile
 36697  005FEA  D005               	goto	PL386
 36698                           
 36699                           ;tmr1.c: 125: {
 36700                           ;tmr1.c: 127: T1CONbits.TMR1ON = 0;
 36701  005FEC  90CF               	bcf	4047,0,c	;volatile
 36702                           
 36703                           ;tmr1.c: 130: TMR1H = (timerVal >> 8);
 36704                           
 36705                           ;tmr1.c: 131: TMR1L = timerVal;
 36706  005FEE  D803               	call	PL386	;call to abstracted procedure
 36707                           
 36708                           ;tmr1.c: 134: T1CONbits.TMR1ON =1;
 36709  005FF0  80CF               	bsf	4047,0,c	;volatile
 36710                           
 36711                           ;tmr1.c: 135: }
 36712  005FF2  0012               	return	
 36713  005FF4                     i2l124:
 36714                           
 36715                           ;tmr1.c: 136: else
 36716                           ;tmr1.c: 137: {
 36717                           ;tmr1.c: 139: TMR1H = (timerVal >> 8);
 36718                           
 36719                           ;tmr1.c: 140: TMR1L = timerVal;
 36720  005FF4  D000               	goto	PL386	;call to abstracted procedure
 36721  005FF6                     __end_ofi2_TMR1_WriteTimer:
 36722                           	opt stack 0
 36723  005FF6                     PL386:
 36724                           	opt stack 13
 36725  005FF6  C002  FFCE         	movff	i2TMR1_WriteTimer@timerVal+1,4046	;volatile
 36726  005FFA  C001  FFCD         	movff	i2TMR1_WriteTimer@timerVal,4045	;volatile
 36727  005FFE  0012               	return	
 36728  006000                     __end_ofPL386:
 36729                           	opt stack 0
 36730                           tosu	equ	0xFFF
 36731                           tosh	equ	0xFFE
 36732                           tosl	equ	0xFFD
 36733                           pclatu	equ	0xFFB
 36734                           pclath	equ	0xFFA
 36735                           tblptru	equ	0xFF8
 36736                           tblptrh	equ	0xFF7
 36737                           tblptrl	equ	0xFF6
 36738                           tablat	equ	0xFF5
 36739                           prodh	equ	0xFF4
 36740                           prodl	equ	0xFF3
 36741                           intcon	equ	0xFF2
 36742                           indf0	equ	0xFEF
 36743                           postinc0	equ	0xFEE
 36744                           plusw0	equ	0xFEB
 36745                           fsr0h	equ	0xFEA
 36746                           fsr0l	equ	0xFE9
 36747                           wreg	equ	0xFE8
 36748                           postinc1	equ	0xFE6
 36749                           postdec1	equ	0xFE5
 36750                           plusw1	equ	0xFE3
 36751                           fsr1h	equ	0xFE2
 36752                           fsr1l	equ	0xFE1
 36753                           indf2	equ	0xFDF
 36754                           postinc2	equ	0xFDE
 36755                           postdec2	equ	0xFDD
 36756                           plusw2	equ	0xFDB
 36757                           fsr2h	equ	0xFDA
 36758                           fsr2l	equ	0xFD9
 36759                           status	equ	0xFD8
 36760                           
 36761 ;; *************** function i2_SwTimersInterrupt *****************
 36762 ;; Defined at:
 36763 ;;		line 287 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 36764 ;; Parameters:    Size  Location     Type
 36765 ;;		None
 36766 ;; Auto vars:     Size  Location     Type
 36767 ;;  SwTimersInte    4   34[COMRAM] unsigned long 
 36768 ;;  SwTimersInte    4   30[COMRAM] unsigned long 
 36769 ;;  SwTimersInte    1   38[COMRAM] unsigned char 
 36770 ;; Return value:  Size  Location     Type
 36771 ;;                  4   22[COMRAM] unsigned long 
 36772 ;; Registers used:
 36773 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 36774 ;; Tracked objects:
 36775 ;;		On entry : 3F/1
 36776 ;;		On exit  : 3F/0
 36777 ;;		Unchanged: 0/0
 36778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 36779 ;;      Params:         4       0       0       0       0       0       0       0       0
 36780 ;;      Locals:         9       0       0       0       0       0       0       0       0
 36781 ;;      Temps:          4       0       0       0       0       0       0       0       0
 36782 ;;      Totals:        17       0       0       0       0       0       0       0       0
 36783 ;;Total ram usage:       17 bytes
 36784 ;; Hardware stack levels used:    1
 36785 ;; Hardware stack levels required when called:    2
 36786 ;; This function calls:
 36787 ;;		i2_TMR_GetDeltaTime
 36788 ;; This function is called by:
 36789 ;;		_TMR_ISR_lora
 36790 ;; This function uses a non-reentrant model
 36791 ;;
 36792                           
 36793                           	psect	text202
 36794  004120                     __ptext202:
 36795                           	opt stack 0
 36796  004120                     i2_SwTimersInterrupt:
 36797                           	opt stack 12
 36798                           
 36799                           ; BSR set to: 1
 36800                           ;sw_timer.c: 289: uint8_t i;
 36801                           ;sw_timer.c: 290: uint32_t timeElapsed;
 36802                           ;sw_timer.c: 291: uint32_t ticksToNextTimerEvent = 0xFFFFFFFF;
 36803                           
 36804                           ;incstack = 0
 36805  004120  6823               	setf	i2SwTimersInterrupt@ticksToNextTimerEvent,c
 36806  004122  6824               	setf	i2SwTimersInterrupt@ticksToNextTimerEvent+1,c
 36807  004124  6825               	setf	i2SwTimersInterrupt@ticksToNextTimerEvent+2,c
 36808  004126  6826               	setf	i2SwTimersInterrupt@ticksToNextTimerEvent+3,c
 36809                           
 36810                           ; BSR set to: 1
 36811                           ;sw_timer.c: 295: timeElapsed = TMR_GetDeltaTime();
 36812  004128  EC20  F01C         	call	i2_TMR_GetDeltaTime	;wreg free
 36813  00412C  C007  F01F         	movff	?i2_TMR_GetDeltaTime,i2SwTimersInterrupt@timeElapsed
 36814  004130  C008  F020         	movff	?i2_TMR_GetDeltaTime+1,i2SwTimersInterrupt@timeElapsed+1
 36815  004134  C009  F021         	movff	?i2_TMR_GetDeltaTime+2,i2SwTimersInterrupt@timeElapsed+2
 36816  004138  C00A  F022         	movff	?i2_TMR_GetDeltaTime+3,i2SwTimersInterrupt@timeElapsed+3
 36817                           
 36818                           ; BSR set to: 0
 36819                           ;sw_timer.c: 297: for (i = 0; i < allocatedTimers; i++)
 36820  00413C  6A27               	clrf	i2SwTimersInterrupt@i,c
 36821  00413E  D03A               	goto	i2l10574
 36822  004140                     i2l10562:
 36823                           
 36824                           ; BSR set to: 0
 36825                           ;sw_timer.c: 298: {
 36826                           ;sw_timer.c: 301: if (swTimers[i].running == 1)
 36827  004140  5027               	movf	i2SwTimersInterrupt@i,w,c
 36828  004142  ECDB  F023         	call	PL40	;call to abstracted procedure
 36829  004146  04DE               	decf	postinc2,w,c
 36830  004148  E134               	bnz	i2l10572
 36831                           
 36832                           ; BSR set to: 0
 36833                           ;sw_timer.c: 302: {
 36834                           ;sw_timer.c: 303: if (swTimers[i].ticksRemaining <= timeElapsed)
 36835  00414A  5027               	movf	i2SwTimersInterrupt@i,w,c
 36836  00414C  EC84  F01F         	call	PL10	;call to abstracted procedure
 36837  004150  50DE               	movf	postinc2,w,c
 36838  004152  5C1F               	subwf	i2SwTimersInterrupt@timeElapsed,w,c
 36839  004154  50DE               	movf	postinc2,w,c
 36840  004156  5820               	subwfb	i2SwTimersInterrupt@timeElapsed+1,w,c
 36841  004158  50DE               	movf	postinc2,w,c
 36842  00415A  5821               	subwfb	i2SwTimersInterrupt@timeElapsed+2,w,c
 36843  00415C  50DE               	movf	postinc2,w,c
 36844  00415E  5822               	subwfb	i2SwTimersInterrupt@timeElapsed+3,w,c
 36845  004160  E306               	bnc	i2l10568
 36846                           
 36847                           ; BSR set to: 0
 36848                           ;sw_timer.c: 304: {
 36849                           ;sw_timer.c: 305: swTimers[i].ticksRemaining = 0;
 36850  004162  5027               	movf	i2SwTimersInterrupt@i,w,c
 36851  004164  EC84  F01F         	call	PL10	;call to abstracted procedure
 36852  004168  ECA2  F01D         	call	PL182	;call to abstracted procedure
 36853                           
 36854                           ;sw_timer.c: 306: }
 36855  00416C  D022               	goto	i2l10572
 36856  00416E                     i2l10568:
 36857                           
 36858                           ; BSR set to: 0
 36859                           ;sw_timer.c: 307: else
 36860                           ;sw_timer.c: 308: {
 36861                           ;sw_timer.c: 309: swTimers[i].ticksRemaining -= timeElapsed;
 36862  00416E  5027               	movf	i2SwTimersInterrupt@i,w,c
 36863  004170  EC84  F01F         	call	PL10	;call to abstracted procedure
 36864  004174  501F               	movf	i2SwTimersInterrupt@timeElapsed,w,c
 36865  004176  5EDE               	subwf	postinc2,f,c
 36866  004178  5020               	movf	i2SwTimersInterrupt@timeElapsed+1,w,c
 36867  00417A  5ADE               	subwfb	postinc2,f,c
 36868  00417C  5021               	movf	i2SwTimersInterrupt@timeElapsed+2,w,c
 36869  00417E  5ADE               	subwfb	postinc2,f,c
 36870  004180  5022               	movf	i2SwTimersInterrupt@timeElapsed+3,w,c
 36871  004182  5ADE               	subwfb	postinc2,f,c
 36872                           
 36873                           ;sw_timer.c: 312: if (swTimers[i].ticksRemaining < ticksToNextTimerEvent)
 36874  004184  5027               	movf	i2SwTimersInterrupt@i,w,c
 36875  004186  EC84  F01F         	call	PL10	;call to abstracted procedure
 36876  00418A  5023               	movf	i2SwTimersInterrupt@ticksToNextTimerEvent,w,c
 36877  00418C  5CDE               	subwf	postinc2,w,c
 36878  00418E  5024               	movf	i2SwTimersInterrupt@ticksToNextTimerEvent+1,w,c
 36879  004190  58DE               	subwfb	postinc2,w,c
 36880  004192  5025               	movf	i2SwTimersInterrupt@ticksToNextTimerEvent+2,w,c
 36881  004194  58DE               	subwfb	postinc2,w,c
 36882  004196  5026               	movf	i2SwTimersInterrupt@ticksToNextTimerEvent+3,w,c
 36883  004198  58DE               	subwfb	postinc2,w,c
 36884  00419A  E20B               	bc	i2l10572
 36885                           
 36886                           ; BSR set to: 0
 36887                           ;sw_timer.c: 313: {
 36888                           ;sw_timer.c: 314: ticksToNextTimerEvent = swTimers[i].ticksRemaining;
 36889  00419C  5027               	movf	i2SwTimersInterrupt@i,w,c
 36890  00419E  EC84  F01F         	call	PL10	;call to abstracted procedure
 36891  0041A2  CFDE F023          	movff	postinc2,i2SwTimersInterrupt@ticksToNextTimerEvent
 36892  0041A6  CFDE F024          	movff	postinc2,i2SwTimersInterrupt@ticksToNextTimerEvent+1
 36893  0041AA  CFDE F025          	movff	postinc2,i2SwTimersInterrupt@ticksToNextTimerEvent+2
 36894  0041AE  CFDE F026          	movff	postinc2,i2SwTimersInterrupt@ticksToNextTimerEvent+3
 36895  0041B2                     i2l10572:
 36896                           
 36897                           ; BSR set to: 0
 36898  0041B2  2A27               	incf	i2SwTimersInterrupt@i,f,c
 36899  0041B4                     i2l10574:
 36900                           
 36901                           ; BSR set to: 0
 36902  0041B4  51FF               	movf	_allocatedTimers& (0+255),w,b	;volatile
 36903  0041B6  5C27               	subwf	i2SwTimersInterrupt@i,w,c
 36904  0041B8  E3C3               	bnc	i2l10562
 36905                           
 36906                           ; BSR set to: 0
 36907                           ;sw_timer.c: 315: }
 36908                           ;sw_timer.c: 316: }
 36909                           ;sw_timer.c: 317: }
 36910                           ;sw_timer.c: 318: }
 36911                           ;sw_timer.c: 320: return ticksToNextTimerEvent;
 36912  0041BA  C023  F017         	movff	i2SwTimersInterrupt@ticksToNextTimerEvent,?i2_SwTimersInterrupt
 36913  0041BE  C024  F018         	movff	i2SwTimersInterrupt@ticksToNextTimerEvent+1,?i2_SwTimersInterrupt+1
 36914  0041C2  C025  F019         	movff	i2SwTimersInterrupt@ticksToNextTimerEvent+2,?i2_SwTimersInterrupt+2
 36915  0041C6  C026  F01A         	movff	i2SwTimersInterrupt@ticksToNextTimerEvent+3,?i2_SwTimersInterrupt+3
 36916                           
 36917                           ; BSR set to: 0
 36918  0041CA  0012               	return		;funcret
 36919  0041CC                     __end_ofi2_SwTimersInterrupt:
 36920                           	opt stack 0
 36921                           tosu	equ	0xFFF
 36922                           tosh	equ	0xFFE
 36923                           tosl	equ	0xFFD
 36924                           pclatu	equ	0xFFB
 36925                           pclath	equ	0xFFA
 36926                           tblptru	equ	0xFF8
 36927                           tblptrh	equ	0xFF7
 36928                           tblptrl	equ	0xFF6
 36929                           tablat	equ	0xFF5
 36930                           prodh	equ	0xFF4
 36931                           prodl	equ	0xFF3
 36932                           intcon	equ	0xFF2
 36933                           indf0	equ	0xFEF
 36934                           postinc0	equ	0xFEE
 36935                           plusw0	equ	0xFEB
 36936                           fsr0h	equ	0xFEA
 36937                           fsr0l	equ	0xFE9
 36938                           wreg	equ	0xFE8
 36939                           postinc1	equ	0xFE6
 36940                           postdec1	equ	0xFE5
 36941                           plusw1	equ	0xFE3
 36942                           fsr1h	equ	0xFE2
 36943                           fsr1l	equ	0xFE1
 36944                           indf2	equ	0xFDF
 36945                           postinc2	equ	0xFDE
 36946                           postdec2	equ	0xFDD
 36947                           plusw2	equ	0xFDB
 36948                           fsr2h	equ	0xFDA
 36949                           fsr2l	equ	0xFD9
 36950                           status	equ	0xFD8
 36951                           
 36952 ;; *************** function i2_TMR_GetDeltaTime *****************
 36953 ;; Defined at:
 36954 ;;		line 88 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 36955 ;; Parameters:    Size  Location     Type
 36956 ;;		None
 36957 ;; Auto vars:     Size  Location     Type
 36958 ;;		None
 36959 ;; Return value:  Size  Location     Type
 36960 ;;                  4    6[COMRAM] unsigned long 
 36961 ;; Registers used:
 36962 ;;		wreg, status,2, status,0, cstack
 36963 ;; Tracked objects:
 36964 ;;		On entry : 3F/1
 36965 ;;		On exit  : 3F/0
 36966 ;;		Unchanged: 0/0
 36967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 36968 ;;      Params:         4       0       0       0       0       0       0       0       0
 36969 ;;      Locals:         0       0       0       0       0       0       0       0       0
 36970 ;;      Temps:         12       0       0       0       0       0       0       0       0
 36971 ;;      Totals:        16       0       0       0       0       0       0       0       0
 36972 ;;Total ram usage:       16 bytes
 36973 ;; Hardware stack levels used:    1
 36974 ;; Hardware stack levels required when called:    1
 36975 ;; This function calls:
 36976 ;;		i2_TMR1_ReadTimer
 36977 ;; This function is called by:
 36978 ;;		i2_SwTimersInterrupt
 36979 ;; This function uses a non-reentrant model
 36980 ;;
 36981                           
 36982                           	psect	text203
 36983  003840                     __ptext203:
 36984                           	opt stack 0
 36985  003840                     i2_TMR_GetDeltaTime:
 36986                           	opt stack 12
 36987                           
 36988                           ; BSR set to: 1
 36989                           ;sw_timer.c: 90: static uint32_t retVal;
 36990                           ;sw_timer.c: 91: static uint16_t tmrVal;
 36991                           ;sw_timer.c: 93: tmrVal = TMR1_ReadTimer();
 36992                           
 36993                           ; BSR set to: 0
 36994                           ;incstack = 0
 36995  003840  EC00  F02F         	call	i2_TMR1_ReadTimer	;wreg free
 36996  003844  C001  F040         	movff	?i2_TMR1_ReadTimer,TMR_GetDeltaTime@tmrVal
 36997  003848  C002  F041         	movff	?i2_TMR1_ReadTimer+1,TMR_GetDeltaTime@tmrVal+1
 36998                           
 36999                           ;sw_timer.c: 95: if (timerOverflow == 1)
 37000  00384C  0444               	decf	_timerOverflow,w,c	;volatile
 37001  00384E  E11E               	bnz	i2l9886
 37002                           
 37003                           ;sw_timer.c: 96: {
 37004                           ;sw_timer.c: 97: timerOverflow = 0;
 37005  003850  6A44               	clrf	_timerOverflow,c	;volatile
 37006                           
 37007                           ;sw_timer.c: 98: retVal = ((uint32_t)0x10000) - reloadVal + tmrVal - ticksAccounted + ti
      +                          cksAdded;
 37008  003852  D859               	call	PL214	;call to abstracted procedure
 37009  003854  A0D8               	btfss	status,0,c
 37010  003856  060D               	decf	(??i2_TMR_GetDeltaTime+2)& (0+255),f,c
 37011  003858  500D               	movf	(??i2_TMR_GetDeltaTime+2)& (0+255),w,c
 37012  00385A  6E0E               	movwf	(??i2_TMR_GetDeltaTime+3)& (0+255),c
 37013  00385C  D82D               	call	PL116	;call to abstracted procedure
 37014  00385E  6E13               	movwf	(??i2_TMR_GetDeltaTime+8)& (0+255),c
 37015  003860  5039               	movf	_ticksAdded+1,w,c	;volatile
 37016  003862  2010               	addwfc	??i2_TMR_GetDeltaTime+5,w,c
 37017  003864  6E14               	movwf	(??i2_TMR_GetDeltaTime+9)& (0+255),c
 37018  003866  503A               	movf	_ticksAdded+2,w,c	;volatile
 37019  003868  2011               	addwfc	??i2_TMR_GetDeltaTime+6,w,c
 37020  00386A  6E15               	movwf	(??i2_TMR_GetDeltaTime+10)& (0+255),c
 37021  00386C  503B               	movf	_ticksAdded+3,w,c	;volatile
 37022  00386E  2012               	addwfc	??i2_TMR_GetDeltaTime+7,w,c
 37023  003870  6E16               	movwf	(??i2_TMR_GetDeltaTime+11)& (0+255),c
 37024  003872  0E00               	movlw	0
 37025  003874  2413               	addwf	??i2_TMR_GetDeltaTime+8,w,c
 37026  003876  6E30               	movwf	TMR_GetDeltaTime@retVal,c
 37027  003878  0E00               	movlw	0
 37028  00387A  2014               	addwfc	??i2_TMR_GetDeltaTime+9,w,c
 37029  00387C  6E31               	movwf	TMR_GetDeltaTime@retVal+1,c
 37030  00387E  0E01               	movlw	1
 37031  003880  2015               	addwfc	??i2_TMR_GetDeltaTime+10,w,c
 37032  003882  6E32               	movwf	TMR_GetDeltaTime@retVal+2,c
 37033  003884  0E00               	movlw	0
 37034  003886  2016               	addwfc	??i2_TMR_GetDeltaTime+11,w,c
 37035                           
 37036                           ; BSR set to: 0
 37037                           ;sw_timer.c: 99: ticksAccounted = tmrVal;
 37038                           
 37039                           ; BSR set to: 0
 37040                           ;sw_timer.c: 100: ticksAdded = 0;
 37041                           
 37042                           ; BSR set to: 0
 37043                           ;sw_timer.c: 101: reloadVal = 0;
 37044  003888  D826               	call	PL138	;call to abstracted procedure
 37045                           
 37046                           ;sw_timer.c: 102: }
 37047  00388A  D00D               	goto	i2l9888
 37048  00388C                     i2l9886:
 37049                           
 37050                           ;sw_timer.c: 103: else
 37051                           ;sw_timer.c: 104: {
 37052                           ;sw_timer.c: 105: retVal = tmrVal - reloadVal - ticksAccounted + ticksAdded;
 37053  00388C  D83C               	call	PL214	;call to abstracted procedure
 37054  00388E  6A0E               	clrf	(??i2_TMR_GetDeltaTime+3)& (0+255),c
 37055  003890  D813               	call	PL116	;call to abstracted procedure
 37056  003892  6E30               	movwf	TMR_GetDeltaTime@retVal,c
 37057  003894  5039               	movf	_ticksAdded+1,w,c	;volatile
 37058  003896  2010               	addwfc	??i2_TMR_GetDeltaTime+5,w,c
 37059  003898  6E31               	movwf	TMR_GetDeltaTime@retVal+1,c
 37060  00389A  503A               	movf	_ticksAdded+2,w,c	;volatile
 37061  00389C  2011               	addwfc	??i2_TMR_GetDeltaTime+6,w,c
 37062  00389E  6E32               	movwf	TMR_GetDeltaTime@retVal+2,c
 37063  0038A0  503B               	movf	_ticksAdded+3,w,c	;volatile
 37064  0038A2  2012               	addwfc	??i2_TMR_GetDeltaTime+7,w,c
 37065                           
 37066                           ;sw_timer.c: 106: ticksAccounted += retVal;
 37067  0038A4  D826               	call	PL202	;call to abstracted procedure
 37068  0038A6                     i2l9888:
 37069                           
 37070                           ; BSR set to: 0
 37071                           ;sw_timer.c: 107: }
 37072                           ;sw_timer.c: 109: return retVal;
 37073  0038A6  C030  F007         	movff	TMR_GetDeltaTime@retVal,?i2_TMR_GetDeltaTime
 37074  0038AA  C031  F008         	movff	TMR_GetDeltaTime@retVal+1,?i2_TMR_GetDeltaTime+1
 37075  0038AE  C032  F009         	movff	TMR_GetDeltaTime@retVal+2,?i2_TMR_GetDeltaTime+2
 37076  0038B2  C033  F00A         	movff	TMR_GetDeltaTime@retVal+3,?i2_TMR_GetDeltaTime+3
 37077                           
 37078                           ; BSR set to: 0
 37079  0038B6  0012               	return		;funcret
 37080  0038B8                     __end_ofi2_TMR_GetDeltaTime:
 37081                           	opt stack 0
 37082  0038B8                     PL116:
 37083                           	opt stack 12
 37084  0038B8  5034               	movf	_ticksAccounted,w,c	;volatile
 37085  0038BA  5C0B               	subwf	??i2_TMR_GetDeltaTime,w,c
 37086  0038BC  6E0F               	movwf	(??i2_TMR_GetDeltaTime+4)& (0+255),c
 37087  0038BE  5035               	movf	_ticksAccounted+1,w,c	;volatile
 37088  0038C0  580C               	subwfb	??i2_TMR_GetDeltaTime+1,w,c
 37089  0038C2  6E10               	movwf	(??i2_TMR_GetDeltaTime+5)& (0+255),c
 37090  0038C4  5036               	movf	_ticksAccounted+2,w,c	;volatile
 37091  0038C6  580D               	subwfb	??i2_TMR_GetDeltaTime+2,w,c
 37092  0038C8  6E11               	movwf	(??i2_TMR_GetDeltaTime+6)& (0+255),c
 37093  0038CA  5037               	movf	_ticksAccounted+3,w,c	;volatile
 37094  0038CC  580E               	subwfb	??i2_TMR_GetDeltaTime+3,w,c
 37095  0038CE  6E12               	movwf	(??i2_TMR_GetDeltaTime+7)& (0+255),c
 37096  0038D0  5038               	movf	_ticksAdded,w,c	;volatile
 37097  0038D2  240F               	addwf	??i2_TMR_GetDeltaTime+4,w,c
 37098  0038D4  0012               	return	
 37099  0038D6                     __end_ofPL116:
 37100                           	opt stack 0
 37101  0038D6                     PL138:
 37102                           	opt stack 17
 37103  0038D6  6E33               	movwf	TMR_GetDeltaTime@retVal+3,c
 37104  0038D8  C040  F034         	movff	TMR_GetDeltaTime@tmrVal,_ticksAccounted	;volatile
 37105  0038DC  C041  F035         	movff	TMR_GetDeltaTime@tmrVal+1,_ticksAccounted+1	;volatile
 37106  0038E0  6A36               	clrf	_ticksAccounted+2,c	;volatile
 37107  0038E2  6A37               	clrf	_ticksAccounted+3,c	;volatile
 37108  0038E4  6A38               	clrf	_ticksAdded,c	;volatile
 37109  0038E6  6A39               	clrf	_ticksAdded+1,c	;volatile
 37110  0038E8  6A3A               	clrf	_ticksAdded+2,c	;volatile
 37111  0038EA  6A3B               	clrf	_ticksAdded+3,c	;volatile
 37112  0038EC  6BFD               	clrf	_reloadVal& (0+255),b	;volatile
 37113  0038EE  6BFE               	clrf	(_reloadVal+1)& (0+255),b	;volatile
 37114  0038F0  0012               	return	
 37115  0038F2                     __end_ofPL138:
 37116                           	opt stack 0
 37117  0038F2                     PL202:
 37118                           	opt stack 17
 37119  0038F2  6E33               	movwf	TMR_GetDeltaTime@retVal+3,c
 37120  0038F4  5030               	movf	TMR_GetDeltaTime@retVal,w,c
 37121  0038F6  2634               	addwf	_ticksAccounted,f,c	;volatile
 37122  0038F8  5031               	movf	TMR_GetDeltaTime@retVal+1,w,c
 37123  0038FA  2235               	addwfc	_ticksAccounted+1,f,c	;volatile
 37124  0038FC  5032               	movf	TMR_GetDeltaTime@retVal+2,w,c
 37125  0038FE  2236               	addwfc	_ticksAccounted+2,f,c	;volatile
 37126  003900  5033               	movf	TMR_GetDeltaTime@retVal+3,w,c
 37127  003902  2237               	addwfc	_ticksAccounted+3,f,c	;volatile
 37128  003904  0012               	return	
 37129  003906                     __end_ofPL202:
 37130                           	opt stack 0
 37131  003906                     PL214:
 37132                           	opt stack 12
 37133  003906  0100               	movlb	0	; () banked
 37134  003908  51FD               	movf	_reloadVal& (0+255),w,b	;volatile
 37135  00390A  5C40               	subwf	TMR_GetDeltaTime@tmrVal,w,c
 37136  00390C  6E0B               	movwf	??i2_TMR_GetDeltaTime& (0+255),c
 37137  00390E  51FE               	movf	(_reloadVal+1)& (0+255),w,b	;volatile
 37138  003910  5841               	subwfb	TMR_GetDeltaTime@tmrVal+1,w,c
 37139  003912  6E0C               	movwf	(??i2_TMR_GetDeltaTime+1)& (0+255),c
 37140  003914  6A0D               	clrf	(??i2_TMR_GetDeltaTime+2)& (0+255),c
 37141  003916  0012               	return	
 37142  003918                     __end_ofPL214:
 37143                           	opt stack 0
 37144                           tosu	equ	0xFFF
 37145                           tosh	equ	0xFFE
 37146                           tosl	equ	0xFFD
 37147                           pclatu	equ	0xFFB
 37148                           pclath	equ	0xFFA
 37149                           tblptru	equ	0xFF8
 37150                           tblptrh	equ	0xFF7
 37151                           tblptrl	equ	0xFF6
 37152                           tablat	equ	0xFF5
 37153                           prodh	equ	0xFF4
 37154                           prodl	equ	0xFF3
 37155                           intcon	equ	0xFF2
 37156                           indf0	equ	0xFEF
 37157                           postinc0	equ	0xFEE
 37158                           plusw0	equ	0xFEB
 37159                           fsr0h	equ	0xFEA
 37160                           fsr0l	equ	0xFE9
 37161                           wreg	equ	0xFE8
 37162                           postinc1	equ	0xFE6
 37163                           postdec1	equ	0xFE5
 37164                           plusw1	equ	0xFE3
 37165                           fsr1h	equ	0xFE2
 37166                           fsr1l	equ	0xFE1
 37167                           indf2	equ	0xFDF
 37168                           postinc2	equ	0xFDE
 37169                           postdec2	equ	0xFDD
 37170                           plusw2	equ	0xFDB
 37171                           fsr2h	equ	0xFDA
 37172                           fsr2l	equ	0xFD9
 37173                           status	equ	0xFD8
 37174                           
 37175 ;; *************** function i2_TMR1_ReadTimer *****************
 37176 ;; Defined at:
 37177 ;;		line 113 in file "mcc_generated_files/tmr1.c"
 37178 ;; Parameters:    Size  Location     Type
 37179 ;;		None
 37180 ;; Auto vars:     Size  Location     Type
 37181 ;;  TMR1_ReadTim    2    4[COMRAM] unsigned int 
 37182 ;; Return value:  Size  Location     Type
 37183 ;;                  2    0[COMRAM] unsigned int 
 37184 ;; Registers used:
 37185 ;;		wreg, status,2, status,0
 37186 ;; Tracked objects:
 37187 ;;		On entry : 0/0
 37188 ;;		On exit  : 0/0
 37189 ;;		Unchanged: 0/0
 37190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 37191 ;;      Params:         2       0       0       0       0       0       0       0       0
 37192 ;;      Locals:         2       0       0       0       0       0       0       0       0
 37193 ;;      Temps:          2       0       0       0       0       0       0       0       0
 37194 ;;      Totals:         6       0       0       0       0       0       0       0       0
 37195 ;;Total ram usage:        6 bytes
 37196 ;; Hardware stack levels used:    1
 37197 ;; This function calls:
 37198 ;;		Nothing
 37199 ;; This function is called by:
 37200 ;;		i2_TMR_GetDeltaTime
 37201 ;;		i2_TMR_SwapTimer
 37202 ;; This function uses a non-reentrant model
 37203 ;;
 37204                           
 37205                           	psect	text204
 37206  005E00                     __ptext204:
 37207                           	opt stack 0
 37208  005E00                     i2_TMR1_ReadTimer:
 37209                           	opt stack 13
 37210                           
 37211                           ;tmr1.c: 115: uint16_t readVal;
 37212                           ;tmr1.c: 117: readVal = (TMR1H << 8) | TMR1L;
 37213                           
 37214                           ; BSR set to: 0
 37215                           ;incstack = 0
 37216  005E00  50CD               	movf	4045,w,c	;volatile
 37217  005E02  CFCE F003          	movff	4046,??i2_TMR1_ReadTimer	;volatile
 37218  005E06  6A04               	clrf	(??i2_TMR1_ReadTimer+1)& (0+255),c
 37219  005E08  C003  F004         	movff	??i2_TMR1_ReadTimer,??i2_TMR1_ReadTimer+1
 37220  005E0C  6A03               	clrf	??i2_TMR1_ReadTimer,c
 37221  005E0E  1003               	iorwf	??i2_TMR1_ReadTimer,w,c
 37222  005E10  6E05               	movwf	i2TMR1_ReadTimer@readVal,c
 37223  005E12  5004               	movf	??i2_TMR1_ReadTimer+1,w,c
 37224  005E14  6E06               	movwf	i2TMR1_ReadTimer@readVal+1,c
 37225                           
 37226                           ;tmr1.c: 119: return readVal;
 37227  005E16  C005  F001         	movff	i2TMR1_ReadTimer@readVal,?i2_TMR1_ReadTimer
 37228  005E1A  C006  F002         	movff	i2TMR1_ReadTimer@readVal+1,?i2_TMR1_ReadTimer+1
 37229  005E1E  0012               	return		;funcret
 37230  005E20                     __end_ofi2_TMR1_ReadTimer:
 37231                           	opt stack 0
 37232                           tosu	equ	0xFFF
 37233                           tosh	equ	0xFFE
 37234                           tosl	equ	0xFFD
 37235                           pclatu	equ	0xFFB
 37236                           pclath	equ	0xFFA
 37237                           tblptru	equ	0xFF8
 37238                           tblptrh	equ	0xFF7
 37239                           tblptrl	equ	0xFF6
 37240                           tablat	equ	0xFF5
 37241                           prodh	equ	0xFF4
 37242                           prodl	equ	0xFF3
 37243                           intcon	equ	0xFF2
 37244                           indf0	equ	0xFEF
 37245                           postinc0	equ	0xFEE
 37246                           plusw0	equ	0xFEB
 37247                           fsr0h	equ	0xFEA
 37248                           fsr0l	equ	0xFE9
 37249                           wreg	equ	0xFE8
 37250                           postinc1	equ	0xFE6
 37251                           postdec1	equ	0xFE5
 37252                           plusw1	equ	0xFE3
 37253                           fsr1h	equ	0xFE2
 37254                           fsr1l	equ	0xFE1
 37255                           indf2	equ	0xFDF
 37256                           postinc2	equ	0xFDE
 37257                           postdec2	equ	0xFDD
 37258                           plusw2	equ	0xFDB
 37259                           fsr2h	equ	0xFDA
 37260                           fsr2l	equ	0xFD9
 37261                           status	equ	0xFD8
 37262                           
 37263 ;; *************** function _PIN_MANAGER_IOC *****************
 37264 ;; Defined at:
 37265 ;;		line 151 in file "mcc_generated_files/pin_manager.c"
 37266 ;; Parameters:    Size  Location     Type
 37267 ;;		None
 37268 ;; Auto vars:     Size  Location     Type
 37269 ;;		None
 37270 ;; Return value:  Size  Location     Type
 37271 ;;                  1    wreg      void 
 37272 ;; Registers used:
 37273 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 37274 ;; Tracked objects:
 37275 ;;		On entry : 3F/E
 37276 ;;		On exit  : 3F/E
 37277 ;;		Unchanged: 0/0
 37278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 37279 ;;      Params:         0       0       0       0       0       0       0       0       0
 37280 ;;      Locals:         0       0       0       0       0       0       0       0       0
 37281 ;;      Temps:          0       0       0       0       0       0       0       0       0
 37282 ;;      Totals:         0       0       0       0       0       0       0       0       0
 37283 ;;Total ram usage:        0 bytes
 37284 ;; Hardware stack levels used:    1
 37285 ;; Hardware stack levels required when called:    2
 37286 ;; This function calls:
 37287 ;;		_IOCBF4_ISR
 37288 ;; This function is called by:
 37289 ;;		_INTERRUPT_InterruptManager
 37290 ;; This function uses a non-reentrant model
 37291 ;;
 37292                           
 37293                           	psect	text205
 37294  0061F4                     __ptext205:
 37295                           	opt stack 0
 37296  0061F4                     _PIN_MANAGER_IOC:
 37297                           	opt stack 15
 37298                           
 37299                           ; BSR set to: 14
 37300                           ;pin_manager.c: 154: if(IOCBFbits.IOCBF4 == 1)
 37301                           
 37302                           ;incstack = 0
 37303  0061F4  B993               	btfsc	147,4,b	;volatile
 37304                           
 37305                           ; BSR set to: 14
 37306                           ;pin_manager.c: 155: {
 37307                           ;pin_manager.c: 156: IOCBF4_ISR();
 37308  0061F6  EC77  F02E         	call	_IOCBF4_ISR	;wreg free
 37309                           
 37310                           ; BSR set to: 14
 37311  0061FA  0012               	return		;funcret
 37312  0061FC                     __end_of_PIN_MANAGER_IOC:
 37313                           	opt stack 0
 37314                           tosu	equ	0xFFF
 37315                           tosh	equ	0xFFE
 37316                           tosl	equ	0xFFD
 37317                           pclatu	equ	0xFFB
 37318                           pclath	equ	0xFFA
 37319                           tblptru	equ	0xFF8
 37320                           tblptrh	equ	0xFF7
 37321                           tblptrl	equ	0xFF6
 37322                           tablat	equ	0xFF5
 37323                           prodh	equ	0xFF4
 37324                           prodl	equ	0xFF3
 37325                           intcon	equ	0xFF2
 37326                           indf0	equ	0xFEF
 37327                           postinc0	equ	0xFEE
 37328                           plusw0	equ	0xFEB
 37329                           fsr0h	equ	0xFEA
 37330                           fsr0l	equ	0xFE9
 37331                           wreg	equ	0xFE8
 37332                           postinc1	equ	0xFE6
 37333                           postdec1	equ	0xFE5
 37334                           plusw1	equ	0xFE3
 37335                           fsr1h	equ	0xFE2
 37336                           fsr1l	equ	0xFE1
 37337                           indf2	equ	0xFDF
 37338                           postinc2	equ	0xFDE
 37339                           postdec2	equ	0xFDD
 37340                           plusw2	equ	0xFDB
 37341                           fsr2h	equ	0xFDA
 37342                           fsr2l	equ	0xFD9
 37343                           status	equ	0xFD8
 37344                           
 37345 ;; *************** function _IOCBF4_ISR *****************
 37346 ;; Defined at:
 37347 ;;		line 165 in file "mcc_generated_files/pin_manager.c"
 37348 ;; Parameters:    Size  Location     Type
 37349 ;;		None
 37350 ;; Auto vars:     Size  Location     Type
 37351 ;;		None
 37352 ;; Return value:  Size  Location     Type
 37353 ;;                  1    wreg      void 
 37354 ;; Registers used:
 37355 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 37356 ;; Tracked objects:
 37357 ;;		On entry : 3F/E
 37358 ;;		On exit  : 3F/E
 37359 ;;		Unchanged: 0/0
 37360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 37361 ;;      Params:         0       0       0       0       0       0       0       0       0
 37362 ;;      Locals:         0       0       0       0       0       0       0       0       0
 37363 ;;      Temps:          0       0       0       0       0       0       0       0       0
 37364 ;;      Totals:         0       0       0       0       0       0       0       0       0
 37365 ;;Total ram usage:        0 bytes
 37366 ;; Hardware stack levels used:    1
 37367 ;; Hardware stack levels required when called:    1
 37368 ;; This function calls:
 37369 ;;		Absolute function
 37370 ;;		_DIO2_ISR_Lora
 37371 ;;		_IOCBF4_DefaultInterruptHandler
 37372 ;; This function is called by:
 37373 ;;		_PIN_MANAGER_IOC
 37374 ;; This function uses a non-reentrant model
 37375 ;;
 37376                           
 37377                           	psect	text206
 37378  005CEE                     __ptext206:
 37379                           	opt stack 0
 37380  005CEE                     _IOCBF4_ISR:
 37381                           	opt stack 15
 37382                           
 37383                           ; BSR set to: 14
 37384                           ;pin_manager.c: 170: if(IOCBF4_InterruptHandler)
 37385                           
 37386                           ; BSR set to: 14
 37387                           ;incstack = 0
 37388  005CEE  0101               	movlb	1	; () banked
 37389  005CF0  51F7               	movf	_IOCBF4_InterruptHandler& (0+255),w,b
 37390  005CF2  11F8               	iorwf	(_IOCBF4_InterruptHandler+1)& (0+255),w,b
 37391  005CF4  E00C               	bz	i2l16062
 37392                           
 37393                           ; BSR set to: 1
 37394                           ;pin_manager.c: 171: {
 37395                           ;pin_manager.c: 172: IOCBF4_InterruptHandler();
 37396  005CF6  D801               	call	i2u1951_48
 37397  005CF8  D00A               	goto	i2l16062
 37398  005CFA                     i2u1951_48:
 37399  005CFA  0005               	push	
 37400  005CFC  6EFA               	movwf	pclath,c
 37401  005CFE  51F7               	movf	_IOCBF4_InterruptHandler& (0+255),w,b
 37402  005D00  6EFD               	movwf	tosl,c
 37403  005D02  51F8               	movf	(_IOCBF4_InterruptHandler+1)& (0+255),w,b
 37404  005D04  6EFE               	movwf	tosh,c
 37405  005D06  50F8               	movf	tblptru,w,c
 37406  005D08  6EFF               	movwf	tosu,c
 37407  005D0A  50FA               	movf	pclath,w,c
 37408  005D0C  0012               	return		;indir
 37409  005D0E                     i2l16062:
 37410                           
 37411                           ;pin_manager.c: 173: }
 37412                           ;pin_manager.c: 174: IOCBFbits.IOCBF4 = 0;
 37413  005D0E  010E               	movlb	14	; () banked
 37414  005D10  9993               	bcf	147,4,b	;volatile
 37415                           
 37416                           ; BSR set to: 14
 37417  005D12  0012               	return		;funcret
 37418  005D14                     __end_of_IOCBF4_ISR:
 37419                           	opt stack 0
 37420                           tosu	equ	0xFFF
 37421                           tosh	equ	0xFFE
 37422                           tosl	equ	0xFFD
 37423                           pclatu	equ	0xFFB
 37424                           pclath	equ	0xFFA
 37425                           tblptru	equ	0xFF8
 37426                           tblptrh	equ	0xFF7
 37427                           tblptrl	equ	0xFF6
 37428                           tablat	equ	0xFF5
 37429                           prodh	equ	0xFF4
 37430                           prodl	equ	0xFF3
 37431                           intcon	equ	0xFF2
 37432                           indf0	equ	0xFEF
 37433                           postinc0	equ	0xFEE
 37434                           plusw0	equ	0xFEB
 37435                           fsr0h	equ	0xFEA
 37436                           fsr0l	equ	0xFE9
 37437                           wreg	equ	0xFE8
 37438                           postinc1	equ	0xFE6
 37439                           postdec1	equ	0xFE5
 37440                           plusw1	equ	0xFE3
 37441                           fsr1h	equ	0xFE2
 37442                           fsr1l	equ	0xFE1
 37443                           indf2	equ	0xFDF
 37444                           postinc2	equ	0xFDE
 37445                           postdec2	equ	0xFDD
 37446                           plusw2	equ	0xFDB
 37447                           fsr2h	equ	0xFDA
 37448                           fsr2l	equ	0xFD9
 37449                           status	equ	0xFD8
 37450                           
 37451 ;; *************** function _DIO2_ISR_Lora *****************
 37452 ;; Defined at:
 37453 ;;		line 73 in file "mcc_generated_files/LoRaWAN/interrupt_manager_lora_addons.c"
 37454 ;; Parameters:    Size  Location     Type
 37455 ;;		None
 37456 ;; Auto vars:     Size  Location     Type
 37457 ;;		None
 37458 ;; Return value:  Size  Location     Type
 37459 ;;                  1    wreg      void 
 37460 ;; Registers used:
 37461 ;;		status,2, status,0
 37462 ;; Tracked objects:
 37463 ;;		On entry : 3F/1
 37464 ;;		On exit  : 3F/1
 37465 ;;		Unchanged: 3F/0
 37466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 37467 ;;      Params:         0       0       0       0       0       0       0       0       0
 37468 ;;      Locals:         0       0       0       0       0       0       0       0       0
 37469 ;;      Temps:          0       0       0       0       0       0       0       0       0
 37470 ;;      Totals:         0       0       0       0       0       0       0       0       0
 37471 ;;Total ram usage:        0 bytes
 37472 ;; Hardware stack levels used:    1
 37473 ;; This function calls:
 37474 ;;		Nothing
 37475 ;; This function is called by:
 37476 ;;		_DIO2_ISR_Lora_Init
 37477 ;;		_IOCBF4_ISR
 37478 ;; This function uses a non-reentrant model
 37479 ;;
 37480                           
 37481                           	psect	text207
 37482  00624E                     __ptext207:
 37483                           	opt stack 0
 37484  00624E                     _DIO2_ISR_Lora:
 37485                           	opt stack 15
 37486                           
 37487                           ; BSR set to: 1
 37488                           ;interrupt_manager_lora_addons.c: 75: dioStatus |= 0x04;
 37489                           
 37490                           ; BSR set to: 14
 37491                           ;incstack = 0
 37492  00624E  8447               	bsf	_dioStatus,2,c	;volatile
 37493                           
 37494                           ; BSR set to: 1
 37495  006250  0012               	return		;funcret
 37496  006252                     __end_of_DIO2_ISR_Lora:
 37497                           	opt stack 0
 37498                           tosu	equ	0xFFF
 37499                           tosh	equ	0xFFE
 37500                           tosl	equ	0xFFD
 37501                           pclatu	equ	0xFFB
 37502                           pclath	equ	0xFFA
 37503                           tblptru	equ	0xFF8
 37504                           tblptrh	equ	0xFF7
 37505                           tblptrl	equ	0xFF6
 37506                           tablat	equ	0xFF5
 37507                           prodh	equ	0xFF4
 37508                           prodl	equ	0xFF3
 37509                           intcon	equ	0xFF2
 37510                           indf0	equ	0xFEF
 37511                           postinc0	equ	0xFEE
 37512                           plusw0	equ	0xFEB
 37513                           fsr0h	equ	0xFEA
 37514                           fsr0l	equ	0xFE9
 37515                           wreg	equ	0xFE8
 37516                           postinc1	equ	0xFE6
 37517                           postdec1	equ	0xFE5
 37518                           plusw1	equ	0xFE3
 37519                           fsr1h	equ	0xFE2
 37520                           fsr1l	equ	0xFE1
 37521                           indf2	equ	0xFDF
 37522                           postinc2	equ	0xFDE
 37523                           postdec2	equ	0xFDD
 37524                           plusw2	equ	0xFDB
 37525                           fsr2h	equ	0xFDA
 37526                           fsr2l	equ	0xFD9
 37527                           status	equ	0xFD8
 37528                           
 37529 ;; *************** function _IOCBF4_DefaultInterruptHandler *****************
 37530 ;; Defined at:
 37531 ;;		line 187 in file "mcc_generated_files/pin_manager.c"
 37532 ;; Parameters:    Size  Location     Type
 37533 ;;		None
 37534 ;; Auto vars:     Size  Location     Type
 37535 ;;		None
 37536 ;; Return value:  Size  Location     Type
 37537 ;;                  1    wreg      void 
 37538 ;; Registers used:
 37539 ;;		None
 37540 ;; Tracked objects:
 37541 ;;		On entry : 3F/1
 37542 ;;		On exit  : 3F/1
 37543 ;;		Unchanged: 3F/0
 37544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 37545 ;;      Params:         0       0       0       0       0       0       0       0       0
 37546 ;;      Locals:         0       0       0       0       0       0       0       0       0
 37547 ;;      Temps:          0       0       0       0       0       0       0       0       0
 37548 ;;      Totals:         0       0       0       0       0       0       0       0       0
 37549 ;;Total ram usage:        0 bytes
 37550 ;; Hardware stack levels used:    1
 37551 ;; This function calls:
 37552 ;;		Nothing
 37553 ;; This function is called by:
 37554 ;;		_PIN_MANAGER_Initialize
 37555 ;;		_IOCBF4_ISR
 37556 ;; This function uses a non-reentrant model
 37557 ;;
 37558                           
 37559                           	psect	text208
 37560  006264                     __ptext208:
 37561                           	opt stack 0
 37562  006264                     _IOCBF4_DefaultInterruptHandler:
 37563                           	opt stack 15
 37564                           
 37565                           ; BSR set to: 1
 37566                           
 37567                           ; BSR set to: 1
 37568                           ;incstack = 0
 37569  006264  0012               	return		;funcret
 37570  006266                     __end_of_IOCBF4_DefaultInterruptHandler:
 37571                           	opt stack 0
 37572                           tosu	equ	0xFFF
 37573                           tosh	equ	0xFFE
 37574                           tosl	equ	0xFFD
 37575                           pclatu	equ	0xFFB
 37576                           pclath	equ	0xFFA
 37577                           tblptru	equ	0xFF8
 37578                           tblptrh	equ	0xFF7
 37579                           tblptrl	equ	0xFF6
 37580                           tablat	equ	0xFF5
 37581                           prodh	equ	0xFF4
 37582                           prodl	equ	0xFF3
 37583                           intcon	equ	0xFF2
 37584                           indf0	equ	0xFEF
 37585                           postinc0	equ	0xFEE
 37586                           plusw0	equ	0xFEB
 37587                           fsr0h	equ	0xFEA
 37588                           fsr0l	equ	0xFE9
 37589                           wreg	equ	0xFE8
 37590                           postinc1	equ	0xFE6
 37591                           postdec1	equ	0xFE5
 37592                           plusw1	equ	0xFE3
 37593                           fsr1h	equ	0xFE2
 37594                           fsr1l	equ	0xFE1
 37595                           indf2	equ	0xFDF
 37596                           postinc2	equ	0xFDE
 37597                           postdec2	equ	0xFDD
 37598                           plusw2	equ	0xFDB
 37599                           fsr2h	equ	0xFDA
 37600                           fsr2l	equ	0xFD9
 37601                           status	equ	0xFD8
 37602                           
 37603 ;; *************** function _INT3_ISR *****************
 37604 ;; Defined at:
 37605 ;;		line 169 in file "mcc_generated_files/ext_int.c"
 37606 ;; Parameters:    Size  Location     Type
 37607 ;;		None
 37608 ;; Auto vars:     Size  Location     Type
 37609 ;;		None
 37610 ;; Return value:  Size  Location     Type
 37611 ;;                  1    wreg      void 
 37612 ;; Registers used:
 37613 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 37614 ;; Tracked objects:
 37615 ;;		On entry : 3F/E
 37616 ;;		On exit  : 0/0
 37617 ;;		Unchanged: 0/0
 37618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 37619 ;;      Params:         0       0       0       0       0       0       0       0       0
 37620 ;;      Locals:         0       0       0       0       0       0       0       0       0
 37621 ;;      Temps:          0       0       0       0       0       0       0       0       0
 37622 ;;      Totals:         0       0       0       0       0       0       0       0       0
 37623 ;;Total ram usage:        0 bytes
 37624 ;; Hardware stack levels used:    1
 37625 ;; Hardware stack levels required when called:    2
 37626 ;; This function calls:
 37627 ;;		_INT3_CallBack
 37628 ;; This function is called by:
 37629 ;;		_INTERRUPT_InterruptManager
 37630 ;; This function uses a non-reentrant model
 37631 ;;
 37632                           
 37633                           	psect	text209
 37634  006220                     __ptext209:
 37635                           	opt stack 0
 37636  006220                     _INT3_ISR:
 37637                           	opt stack 15
 37638                           
 37639                           ; BSR set to: 14
 37640                           ;ext_int.c: 175: (PIR0bits.INT3IF = 0);
 37641                           
 37642                           ; BSR set to: 1
 37643                           ;incstack = 0
 37644  006220  9733               	bcf	51,3,b	;volatile
 37645                           
 37646                           ; BSR set to: 14
 37647                           ;ext_int.c: 178: INT3_CallBack();
 37648  006222  EF4C  F02F         	goto	_INT3_CallBack	;wreg free
 37649  006226                     __end_of_INT3_ISR:
 37650                           	opt stack 0
 37651                           tosu	equ	0xFFF
 37652                           tosh	equ	0xFFE
 37653                           tosl	equ	0xFFD
 37654                           pclatu	equ	0xFFB
 37655                           pclath	equ	0xFFA
 37656                           tblptru	equ	0xFF8
 37657                           tblptrh	equ	0xFF7
 37658                           tblptrl	equ	0xFF6
 37659                           tablat	equ	0xFF5
 37660                           prodh	equ	0xFF4
 37661                           prodl	equ	0xFF3
 37662                           intcon	equ	0xFF2
 37663                           indf0	equ	0xFEF
 37664                           postinc0	equ	0xFEE
 37665                           plusw0	equ	0xFEB
 37666                           fsr0h	equ	0xFEA
 37667                           fsr0l	equ	0xFE9
 37668                           wreg	equ	0xFE8
 37669                           postinc1	equ	0xFE6
 37670                           postdec1	equ	0xFE5
 37671                           plusw1	equ	0xFE3
 37672                           fsr1h	equ	0xFE2
 37673                           fsr1l	equ	0xFE1
 37674                           indf2	equ	0xFDF
 37675                           postinc2	equ	0xFDE
 37676                           postdec2	equ	0xFDD
 37677                           plusw2	equ	0xFDB
 37678                           fsr2h	equ	0xFDA
 37679                           fsr2l	equ	0xFD9
 37680                           status	equ	0xFD8
 37681                           
 37682 ;; *************** function _INT3_CallBack *****************
 37683 ;; Defined at:
 37684 ;;		line 184 in file "mcc_generated_files/ext_int.c"
 37685 ;; Parameters:    Size  Location     Type
 37686 ;;		None
 37687 ;; Auto vars:     Size  Location     Type
 37688 ;;		None
 37689 ;; Return value:  Size  Location     Type
 37690 ;;                  1    wreg      void 
 37691 ;; Registers used:
 37692 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 37693 ;; Tracked objects:
 37694 ;;		On entry : 3F/E
 37695 ;;		On exit  : 0/0
 37696 ;;		Unchanged: 0/0
 37697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 37698 ;;      Params:         0       0       0       0       0       0       0       0       0
 37699 ;;      Locals:         0       0       0       0       0       0       0       0       0
 37700 ;;      Temps:          0       0       0       0       0       0       0       0       0
 37701 ;;      Totals:         0       0       0       0       0       0       0       0       0
 37702 ;;Total ram usage:        0 bytes
 37703 ;; Hardware stack levels used:    1
 37704 ;; Hardware stack levels required when called:    1
 37705 ;; This function calls:
 37706 ;;		Absolute function
 37707 ;;		_INT3_DefaultInterruptHandler
 37708 ;; This function is called by:
 37709 ;;		_INT3_ISR
 37710 ;; This function uses a non-reentrant model
 37711 ;;
 37712                           
 37713                           	psect	text210
 37714  005E98                     __ptext210:
 37715                           	opt stack 0
 37716  005E98                     _INT3_CallBack:
 37717                           	opt stack 15
 37718                           
 37719                           ; BSR set to: 14
 37720                           ;ext_int.c: 187: if(INT3_InterruptHandler)
 37721                           
 37722                           ;incstack = 0
 37723  005E98  0101               	movlb	1	; () banked
 37724  005E9A  51FB               	movf	_INT3_InterruptHandler& (0+255),w,b
 37725  005E9C  11FC               	iorwf	(_INT3_InterruptHandler+1)& (0+255),w,b
 37726  005E9E  B4D8               	btfsc	status,2,c
 37727  005EA0  0012               	return	
 37728                           
 37729                           ; BSR set to: 1
 37730                           ;ext_int.c: 188: {
 37731                           ;ext_int.c: 189: INT3_InterruptHandler();
 37732  005EA2  0005               	push	
 37733  005EA4  6EFA               	movwf	pclath,c
 37734  005EA6  51FB               	movf	_INT3_InterruptHandler& (0+255),w,b
 37735  005EA8  6EFD               	movwf	tosl,c
 37736  005EAA  51FC               	movf	(_INT3_InterruptHandler+1)& (0+255),w,b
 37737  005EAC  6EFE               	movwf	tosh,c
 37738  005EAE  50F8               	movf	tblptru,w,c
 37739  005EB0  6EFF               	movwf	tosu,c
 37740  005EB2  50FA               	movf	pclath,w,c
 37741  005EB4  0012               	return		;indir
 37742  005EB6                     __end_of_INT3_CallBack:
 37743                           	opt stack 0
 37744                           tosu	equ	0xFFF
 37745                           tosh	equ	0xFFE
 37746                           tosl	equ	0xFFD
 37747                           pclatu	equ	0xFFB
 37748                           pclath	equ	0xFFA
 37749                           tblptru	equ	0xFF8
 37750                           tblptrh	equ	0xFF7
 37751                           tblptrl	equ	0xFF6
 37752                           tablat	equ	0xFF5
 37753                           prodh	equ	0xFF4
 37754                           prodl	equ	0xFF3
 37755                           intcon	equ	0xFF2
 37756                           indf0	equ	0xFEF
 37757                           postinc0	equ	0xFEE
 37758                           plusw0	equ	0xFEB
 37759                           fsr0h	equ	0xFEA
 37760                           fsr0l	equ	0xFE9
 37761                           wreg	equ	0xFE8
 37762                           postinc1	equ	0xFE6
 37763                           postdec1	equ	0xFE5
 37764                           plusw1	equ	0xFE3
 37765                           fsr1h	equ	0xFE2
 37766                           fsr1l	equ	0xFE1
 37767                           indf2	equ	0xFDF
 37768                           postinc2	equ	0xFDE
 37769                           postdec2	equ	0xFDD
 37770                           plusw2	equ	0xFDB
 37771                           fsr2h	equ	0xFDA
 37772                           fsr2l	equ	0xFD9
 37773                           status	equ	0xFD8
 37774                           
 37775 ;; *************** function _INT3_DefaultInterruptHandler *****************
 37776 ;; Defined at:
 37777 ;;		line 203 in file "mcc_generated_files/ext_int.c"
 37778 ;; Parameters:    Size  Location     Type
 37779 ;;		None
 37780 ;; Auto vars:     Size  Location     Type
 37781 ;;		None
 37782 ;; Return value:  Size  Location     Type
 37783 ;;                  1    wreg      void 
 37784 ;; Registers used:
 37785 ;;		None
 37786 ;; Tracked objects:
 37787 ;;		On entry : 3F/1
 37788 ;;		On exit  : 3F/1
 37789 ;;		Unchanged: 3F/0
 37790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 37791 ;;      Params:         0       0       0       0       0       0       0       0       0
 37792 ;;      Locals:         0       0       0       0       0       0       0       0       0
 37793 ;;      Temps:          0       0       0       0       0       0       0       0       0
 37794 ;;      Totals:         0       0       0       0       0       0       0       0       0
 37795 ;;Total ram usage:        0 bytes
 37796 ;; Hardware stack levels used:    1
 37797 ;; This function calls:
 37798 ;;		Nothing
 37799 ;; This function is called by:
 37800 ;;		_EXT_INT_Initialize
 37801 ;;		_INT3_CallBack
 37802 ;; This function uses a non-reentrant model
 37803 ;;
 37804                           
 37805                           	psect	text211
 37806  006266                     __ptext211:
 37807                           	opt stack 0
 37808  006266                     _INT3_DefaultInterruptHandler:
 37809                           	opt stack 15
 37810                           
 37811                           ; BSR set to: 1
 37812                           
 37813                           ;incstack = 0
 37814  006266  0012               	return		;funcret
 37815  006268                     __end_of_INT3_DefaultInterruptHandler:
 37816                           	opt stack 0
 37817                           tosu	equ	0xFFF
 37818                           tosh	equ	0xFFE
 37819                           tosl	equ	0xFFD
 37820                           pclatu	equ	0xFFB
 37821                           pclath	equ	0xFFA
 37822                           tblptru	equ	0xFF8
 37823                           tblptrh	equ	0xFF7
 37824                           tblptrl	equ	0xFF6
 37825                           tablat	equ	0xFF5
 37826                           prodh	equ	0xFF4
 37827                           prodl	equ	0xFF3
 37828                           intcon	equ	0xFF2
 37829                           indf0	equ	0xFEF
 37830                           postinc0	equ	0xFEE
 37831                           plusw0	equ	0xFEB
 37832                           fsr0h	equ	0xFEA
 37833                           fsr0l	equ	0xFE9
 37834                           wreg	equ	0xFE8
 37835                           postinc1	equ	0xFE6
 37836                           postdec1	equ	0xFE5
 37837                           plusw1	equ	0xFE3
 37838                           fsr1h	equ	0xFE2
 37839                           fsr1l	equ	0xFE1
 37840                           indf2	equ	0xFDF
 37841                           postinc2	equ	0xFDE
 37842                           postdec2	equ	0xFDD
 37843                           plusw2	equ	0xFDB
 37844                           fsr2h	equ	0xFDA
 37845                           fsr2l	equ	0xFD9
 37846                           status	equ	0xFD8
 37847                           
 37848 ;; *************** function _INT2_ISR *****************
 37849 ;; Defined at:
 37850 ;;		line 87 in file "mcc_generated_files/ext_int.c"
 37851 ;; Parameters:    Size  Location     Type
 37852 ;;		None
 37853 ;; Auto vars:     Size  Location     Type
 37854 ;;		None
 37855 ;; Return value:  Size  Location     Type
 37856 ;;                  1    wreg      void 
 37857 ;; Registers used:
 37858 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 37859 ;; Tracked objects:
 37860 ;;		On entry : 3F/E
 37861 ;;		On exit  : 0/0
 37862 ;;		Unchanged: 0/0
 37863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 37864 ;;      Params:         0       0       0       0       0       0       0       0       0
 37865 ;;      Locals:         0       0       0       0       0       0       0       0       0
 37866 ;;      Temps:          0       0       0       0       0       0       0       0       0
 37867 ;;      Totals:         0       0       0       0       0       0       0       0       0
 37868 ;;Total ram usage:        0 bytes
 37869 ;; Hardware stack levels used:    1
 37870 ;; Hardware stack levels required when called:    2
 37871 ;; This function calls:
 37872 ;;		_INT2_CallBack
 37873 ;; This function is called by:
 37874 ;;		_INTERRUPT_InterruptManager
 37875 ;; This function uses a non-reentrant model
 37876 ;;
 37877                           
 37878                           	psect	text212
 37879  006226                     __ptext212:
 37880                           	opt stack 0
 37881  006226                     _INT2_ISR:
 37882                           	opt stack 15
 37883                           
 37884                           ; BSR set to: 14
 37885                           ;ext_int.c: 93: (PIR0bits.INT2IF = 0);
 37886                           
 37887                           ; BSR set to: 1
 37888                           ;incstack = 0
 37889  006226  9533               	bcf	51,2,b	;volatile
 37890                           
 37891                           ; BSR set to: 14
 37892                           ;ext_int.c: 96: INT2_CallBack();
 37893  006228  EF5B  F02F         	goto	_INT2_CallBack	;wreg free
 37894  00622C                     __end_of_INT2_ISR:
 37895                           	opt stack 0
 37896                           tosu	equ	0xFFF
 37897                           tosh	equ	0xFFE
 37898                           tosl	equ	0xFFD
 37899                           pclatu	equ	0xFFB
 37900                           pclath	equ	0xFFA
 37901                           tblptru	equ	0xFF8
 37902                           tblptrh	equ	0xFF7
 37903                           tblptrl	equ	0xFF6
 37904                           tablat	equ	0xFF5
 37905                           prodh	equ	0xFF4
 37906                           prodl	equ	0xFF3
 37907                           intcon	equ	0xFF2
 37908                           indf0	equ	0xFEF
 37909                           postinc0	equ	0xFEE
 37910                           plusw0	equ	0xFEB
 37911                           fsr0h	equ	0xFEA
 37912                           fsr0l	equ	0xFE9
 37913                           wreg	equ	0xFE8
 37914                           postinc1	equ	0xFE6
 37915                           postdec1	equ	0xFE5
 37916                           plusw1	equ	0xFE3
 37917                           fsr1h	equ	0xFE2
 37918                           fsr1l	equ	0xFE1
 37919                           indf2	equ	0xFDF
 37920                           postinc2	equ	0xFDE
 37921                           postdec2	equ	0xFDD
 37922                           plusw2	equ	0xFDB
 37923                           fsr2h	equ	0xFDA
 37924                           fsr2l	equ	0xFD9
 37925                           status	equ	0xFD8
 37926                           
 37927 ;; *************** function _INT2_CallBack *****************
 37928 ;; Defined at:
 37929 ;;		line 102 in file "mcc_generated_files/ext_int.c"
 37930 ;; Parameters:    Size  Location     Type
 37931 ;;		None
 37932 ;; Auto vars:     Size  Location     Type
 37933 ;;		None
 37934 ;; Return value:  Size  Location     Type
 37935 ;;                  1    wreg      void 
 37936 ;; Registers used:
 37937 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 37938 ;; Tracked objects:
 37939 ;;		On entry : 3F/E
 37940 ;;		On exit  : 0/0
 37941 ;;		Unchanged: 0/0
 37942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 37943 ;;      Params:         0       0       0       0       0       0       0       0       0
 37944 ;;      Locals:         0       0       0       0       0       0       0       0       0
 37945 ;;      Temps:          0       0       0       0       0       0       0       0       0
 37946 ;;      Totals:         0       0       0       0       0       0       0       0       0
 37947 ;;Total ram usage:        0 bytes
 37948 ;; Hardware stack levels used:    1
 37949 ;; Hardware stack levels required when called:    1
 37950 ;; This function calls:
 37951 ;;		Absolute function
 37952 ;;		_DIO5_ISR_Lora
 37953 ;;		_INT2_DefaultInterruptHandler
 37954 ;; This function is called by:
 37955 ;;		_INT2_ISR
 37956 ;; This function uses a non-reentrant model
 37957 ;;
 37958                           
 37959                           	psect	text213
 37960  005EB6                     __ptext213:
 37961                           	opt stack 0
 37962  005EB6                     _INT2_CallBack:
 37963                           	opt stack 15
 37964                           
 37965                           ; BSR set to: 14
 37966                           ;ext_int.c: 105: if(INT2_InterruptHandler)
 37967                           
 37968                           ;incstack = 0
 37969  005EB6  0101               	movlb	1	; () banked
 37970  005EB8  51FD               	movf	_INT2_InterruptHandler& (0+255),w,b
 37971  005EBA  11FE               	iorwf	(_INT2_InterruptHandler+1)& (0+255),w,b
 37972  005EBC  B4D8               	btfsc	status,2,c
 37973  005EBE  0012               	return	
 37974                           
 37975                           ; BSR set to: 1
 37976                           ;ext_int.c: 106: {
 37977                           ;ext_int.c: 107: INT2_InterruptHandler();
 37978  005EC0  0005               	push	
 37979  005EC2  6EFA               	movwf	pclath,c
 37980  005EC4  51FD               	movf	_INT2_InterruptHandler& (0+255),w,b
 37981  005EC6  6EFD               	movwf	tosl,c
 37982  005EC8  51FE               	movf	(_INT2_InterruptHandler+1)& (0+255),w,b
 37983  005ECA  6EFE               	movwf	tosh,c
 37984  005ECC  50F8               	movf	tblptru,w,c
 37985  005ECE  6EFF               	movwf	tosu,c
 37986  005ED0  50FA               	movf	pclath,w,c
 37987  005ED2  0012               	return		;indir
 37988  005ED4                     __end_of_INT2_CallBack:
 37989                           	opt stack 0
 37990                           tosu	equ	0xFFF
 37991                           tosh	equ	0xFFE
 37992                           tosl	equ	0xFFD
 37993                           pclatu	equ	0xFFB
 37994                           pclath	equ	0xFFA
 37995                           tblptru	equ	0xFF8
 37996                           tblptrh	equ	0xFF7
 37997                           tblptrl	equ	0xFF6
 37998                           tablat	equ	0xFF5
 37999                           prodh	equ	0xFF4
 38000                           prodl	equ	0xFF3
 38001                           intcon	equ	0xFF2
 38002                           indf0	equ	0xFEF
 38003                           postinc0	equ	0xFEE
 38004                           plusw0	equ	0xFEB
 38005                           fsr0h	equ	0xFEA
 38006                           fsr0l	equ	0xFE9
 38007                           wreg	equ	0xFE8
 38008                           postinc1	equ	0xFE6
 38009                           postdec1	equ	0xFE5
 38010                           plusw1	equ	0xFE3
 38011                           fsr1h	equ	0xFE2
 38012                           fsr1l	equ	0xFE1
 38013                           indf2	equ	0xFDF
 38014                           postinc2	equ	0xFDE
 38015                           postdec2	equ	0xFDD
 38016                           plusw2	equ	0xFDB
 38017                           fsr2h	equ	0xFDA
 38018                           fsr2l	equ	0xFD9
 38019                           status	equ	0xFD8
 38020                           
 38021 ;; *************** function _DIO5_ISR_Lora *****************
 38022 ;; Defined at:
 38023 ;;		line 88 in file "mcc_generated_files/LoRaWAN/interrupt_manager_lora_addons.c"
 38024 ;; Parameters:    Size  Location     Type
 38025 ;;		None
 38026 ;; Auto vars:     Size  Location     Type
 38027 ;;		None
 38028 ;; Return value:  Size  Location     Type
 38029 ;;                  1    wreg      void 
 38030 ;; Registers used:
 38031 ;;		status,2, status,0
 38032 ;; Tracked objects:
 38033 ;;		On entry : 3F/1
 38034 ;;		On exit  : 3F/1
 38035 ;;		Unchanged: 3F/0
 38036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 38037 ;;      Params:         0       0       0       0       0       0       0       0       0
 38038 ;;      Locals:         0       0       0       0       0       0       0       0       0
 38039 ;;      Temps:          0       0       0       0       0       0       0       0       0
 38040 ;;      Totals:         0       0       0       0       0       0       0       0       0
 38041 ;;Total ram usage:        0 bytes
 38042 ;; Hardware stack levels used:    1
 38043 ;; This function calls:
 38044 ;;		Nothing
 38045 ;; This function is called by:
 38046 ;;		_DIO5_ISR_Lora_Init
 38047 ;;		_INT2_CallBack
 38048 ;; This function uses a non-reentrant model
 38049 ;;
 38050                           
 38051                           	psect	text214
 38052  006252                     __ptext214:
 38053                           	opt stack 0
 38054  006252                     _DIO5_ISR_Lora:
 38055                           	opt stack 15
 38056                           
 38057                           ; BSR set to: 1
 38058                           ;interrupt_manager_lora_addons.c: 90: dioStatus |= 0x20;
 38059                           
 38060                           ;incstack = 0
 38061  006252  8A47               	bsf	_dioStatus,5,c	;volatile
 38062                           
 38063                           ; BSR set to: 1
 38064  006254  0012               	return		;funcret
 38065  006256                     __end_of_DIO5_ISR_Lora:
 38066                           	opt stack 0
 38067                           tosu	equ	0xFFF
 38068                           tosh	equ	0xFFE
 38069                           tosl	equ	0xFFD
 38070                           pclatu	equ	0xFFB
 38071                           pclath	equ	0xFFA
 38072                           tblptru	equ	0xFF8
 38073                           tblptrh	equ	0xFF7
 38074                           tblptrl	equ	0xFF6
 38075                           tablat	equ	0xFF5
 38076                           prodh	equ	0xFF4
 38077                           prodl	equ	0xFF3
 38078                           intcon	equ	0xFF2
 38079                           indf0	equ	0xFEF
 38080                           postinc0	equ	0xFEE
 38081                           plusw0	equ	0xFEB
 38082                           fsr0h	equ	0xFEA
 38083                           fsr0l	equ	0xFE9
 38084                           wreg	equ	0xFE8
 38085                           postinc1	equ	0xFE6
 38086                           postdec1	equ	0xFE5
 38087                           plusw1	equ	0xFE3
 38088                           fsr1h	equ	0xFE2
 38089                           fsr1l	equ	0xFE1
 38090                           indf2	equ	0xFDF
 38091                           postinc2	equ	0xFDE
 38092                           postdec2	equ	0xFDD
 38093                           plusw2	equ	0xFDB
 38094                           fsr2h	equ	0xFDA
 38095                           fsr2l	equ	0xFD9
 38096                           status	equ	0xFD8
 38097                           
 38098 ;; *************** function _INT2_DefaultInterruptHandler *****************
 38099 ;; Defined at:
 38100 ;;		line 121 in file "mcc_generated_files/ext_int.c"
 38101 ;; Parameters:    Size  Location     Type
 38102 ;;		None
 38103 ;; Auto vars:     Size  Location     Type
 38104 ;;		None
 38105 ;; Return value:  Size  Location     Type
 38106 ;;                  1    wreg      void 
 38107 ;; Registers used:
 38108 ;;		None
 38109 ;; Tracked objects:
 38110 ;;		On entry : 3F/1
 38111 ;;		On exit  : 3F/1
 38112 ;;		Unchanged: 3F/0
 38113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 38114 ;;      Params:         0       0       0       0       0       0       0       0       0
 38115 ;;      Locals:         0       0       0       0       0       0       0       0       0
 38116 ;;      Temps:          0       0       0       0       0       0       0       0       0
 38117 ;;      Totals:         0       0       0       0       0       0       0       0       0
 38118 ;;Total ram usage:        0 bytes
 38119 ;; Hardware stack levels used:    1
 38120 ;; This function calls:
 38121 ;;		Nothing
 38122 ;; This function is called by:
 38123 ;;		_EXT_INT_Initialize
 38124 ;;		_INT2_CallBack
 38125 ;; This function uses a non-reentrant model
 38126 ;;
 38127                           
 38128                           	psect	text215
 38129  006268                     __ptext215:
 38130                           	opt stack 0
 38131  006268                     _INT2_DefaultInterruptHandler:
 38132                           	opt stack 15
 38133                           
 38134                           ; BSR set to: 1
 38135                           
 38136                           ; BSR set to: 1
 38137                           ;incstack = 0
 38138  006268  0012               	return		;funcret
 38139  00626A                     __end_of_INT2_DefaultInterruptHandler:
 38140                           	opt stack 0
 38141                           tosu	equ	0xFFF
 38142                           tosh	equ	0xFFE
 38143                           tosl	equ	0xFFD
 38144                           pclatu	equ	0xFFB
 38145                           pclath	equ	0xFFA
 38146                           tblptru	equ	0xFF8
 38147                           tblptrh	equ	0xFF7
 38148                           tblptrl	equ	0xFF6
 38149                           tablat	equ	0xFF5
 38150                           prodh	equ	0xFF4
 38151                           prodl	equ	0xFF3
 38152                           intcon	equ	0xFF2
 38153                           indf0	equ	0xFEF
 38154                           postinc0	equ	0xFEE
 38155                           plusw0	equ	0xFEB
 38156                           fsr0h	equ	0xFEA
 38157                           fsr0l	equ	0xFE9
 38158                           wreg	equ	0xFE8
 38159                           postinc1	equ	0xFE6
 38160                           postdec1	equ	0xFE5
 38161                           plusw1	equ	0xFE3
 38162                           fsr1h	equ	0xFE2
 38163                           fsr1l	equ	0xFE1
 38164                           indf2	equ	0xFDF
 38165                           postinc2	equ	0xFDE
 38166                           postdec2	equ	0xFDD
 38167                           plusw2	equ	0xFDB
 38168                           fsr2h	equ	0xFDA
 38169                           fsr2l	equ	0xFD9
 38170                           status	equ	0xFD8
 38171                           
 38172 ;; *************** function _INT1_ISR *****************
 38173 ;; Defined at:
 38174 ;;		line 46 in file "mcc_generated_files/ext_int.c"
 38175 ;; Parameters:    Size  Location     Type
 38176 ;;		None
 38177 ;; Auto vars:     Size  Location     Type
 38178 ;;		None
 38179 ;; Return value:  Size  Location     Type
 38180 ;;                  1    wreg      void 
 38181 ;; Registers used:
 38182 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 38183 ;; Tracked objects:
 38184 ;;		On entry : 3F/E
 38185 ;;		On exit  : 0/0
 38186 ;;		Unchanged: 0/0
 38187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 38188 ;;      Params:         0       0       0       0       0       0       0       0       0
 38189 ;;      Locals:         0       0       0       0       0       0       0       0       0
 38190 ;;      Temps:          0       0       0       0       0       0       0       0       0
 38191 ;;      Totals:         0       0       0       0       0       0       0       0       0
 38192 ;;Total ram usage:        0 bytes
 38193 ;; Hardware stack levels used:    1
 38194 ;; Hardware stack levels required when called:    2
 38195 ;; This function calls:
 38196 ;;		_INT1_CallBack
 38197 ;; This function is called by:
 38198 ;;		_INTERRUPT_InterruptManager
 38199 ;; This function uses a non-reentrant model
 38200 ;;
 38201                           
 38202                           	psect	text216
 38203  00622C                     __ptext216:
 38204                           	opt stack 0
 38205  00622C                     _INT1_ISR:
 38206                           	opt stack 15
 38207                           
 38208                           ; BSR set to: 14
 38209                           ;ext_int.c: 52: (PIR0bits.INT1IF = 0);
 38210                           
 38211                           ; BSR set to: 1
 38212                           ;incstack = 0
 38213  00622C  9333               	bcf	51,1,b	;volatile
 38214                           
 38215                           ; BSR set to: 14
 38216                           ;ext_int.c: 55: INT1_CallBack();
 38217  00622E  EF78  F02F         	goto	_INT1_CallBack	;wreg free
 38218  006232                     __end_of_INT1_ISR:
 38219                           	opt stack 0
 38220                           tosu	equ	0xFFF
 38221                           tosh	equ	0xFFE
 38222                           tosl	equ	0xFFD
 38223                           pclatu	equ	0xFFB
 38224                           pclath	equ	0xFFA
 38225                           tblptru	equ	0xFF8
 38226                           tblptrh	equ	0xFF7
 38227                           tblptrl	equ	0xFF6
 38228                           tablat	equ	0xFF5
 38229                           prodh	equ	0xFF4
 38230                           prodl	equ	0xFF3
 38231                           intcon	equ	0xFF2
 38232                           indf0	equ	0xFEF
 38233                           postinc0	equ	0xFEE
 38234                           plusw0	equ	0xFEB
 38235                           fsr0h	equ	0xFEA
 38236                           fsr0l	equ	0xFE9
 38237                           wreg	equ	0xFE8
 38238                           postinc1	equ	0xFE6
 38239                           postdec1	equ	0xFE5
 38240                           plusw1	equ	0xFE3
 38241                           fsr1h	equ	0xFE2
 38242                           fsr1l	equ	0xFE1
 38243                           indf2	equ	0xFDF
 38244                           postinc2	equ	0xFDE
 38245                           postdec2	equ	0xFDD
 38246                           plusw2	equ	0xFDB
 38247                           fsr2h	equ	0xFDA
 38248                           fsr2l	equ	0xFD9
 38249                           status	equ	0xFD8
 38250                           
 38251 ;; *************** function _INT1_CallBack *****************
 38252 ;; Defined at:
 38253 ;;		line 61 in file "mcc_generated_files/ext_int.c"
 38254 ;; Parameters:    Size  Location     Type
 38255 ;;		None
 38256 ;; Auto vars:     Size  Location     Type
 38257 ;;		None
 38258 ;; Return value:  Size  Location     Type
 38259 ;;                  1    wreg      void 
 38260 ;; Registers used:
 38261 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 38262 ;; Tracked objects:
 38263 ;;		On entry : 3F/E
 38264 ;;		On exit  : 0/0
 38265 ;;		Unchanged: 0/0
 38266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 38267 ;;      Params:         0       0       0       0       0       0       0       0       0
 38268 ;;      Locals:         0       0       0       0       0       0       0       0       0
 38269 ;;      Temps:          0       0       0       0       0       0       0       0       0
 38270 ;;      Totals:         0       0       0       0       0       0       0       0       0
 38271 ;;Total ram usage:        0 bytes
 38272 ;; Hardware stack levels used:    1
 38273 ;; Hardware stack levels required when called:    1
 38274 ;; This function calls:
 38275 ;;		Absolute function
 38276 ;;		_DIO1_ISR_Lora
 38277 ;;		_INT1_DefaultInterruptHandler
 38278 ;; This function is called by:
 38279 ;;		_INT1_ISR
 38280 ;; This function uses a non-reentrant model
 38281 ;;
 38282                           
 38283                           	psect	text217
 38284  005EF0                     __ptext217:
 38285                           	opt stack 0
 38286  005EF0                     _INT1_CallBack:
 38287                           	opt stack 15
 38288                           
 38289                           ; BSR set to: 14
 38290                           ;ext_int.c: 64: if(INT1_InterruptHandler)
 38291                           
 38292                           ;incstack = 0
 38293  005EF0  505E               	movf	_INT1_InterruptHandler,w,c
 38294  005EF2  105F               	iorwf	_INT1_InterruptHandler+1,w,c
 38295  005EF4  B4D8               	btfsc	status,2,c
 38296  005EF6  0012               	return	
 38297                           
 38298                           ; BSR set to: 14
 38299                           ;ext_int.c: 65: {
 38300                           ;ext_int.c: 66: INT1_InterruptHandler();
 38301  005EF8  0005               	push	
 38302  005EFA  6EFA               	movwf	pclath,c
 38303  005EFC  505E               	movf	_INT1_InterruptHandler,w,c
 38304  005EFE  6EFD               	movwf	tosl,c
 38305  005F00  505F               	movf	_INT1_InterruptHandler+1,w,c
 38306  005F02  6EFE               	movwf	tosh,c
 38307  005F04  50F8               	movf	tblptru,w,c
 38308  005F06  6EFF               	movwf	tosu,c
 38309  005F08  50FA               	movf	pclath,w,c
 38310  005F0A  0012               	return		;indir
 38311  005F0C                     __end_of_INT1_CallBack:
 38312                           	opt stack 0
 38313                           tosu	equ	0xFFF
 38314                           tosh	equ	0xFFE
 38315                           tosl	equ	0xFFD
 38316                           pclatu	equ	0xFFB
 38317                           pclath	equ	0xFFA
 38318                           tblptru	equ	0xFF8
 38319                           tblptrh	equ	0xFF7
 38320                           tblptrl	equ	0xFF6
 38321                           tablat	equ	0xFF5
 38322                           prodh	equ	0xFF4
 38323                           prodl	equ	0xFF3
 38324                           intcon	equ	0xFF2
 38325                           indf0	equ	0xFEF
 38326                           postinc0	equ	0xFEE
 38327                           plusw0	equ	0xFEB
 38328                           fsr0h	equ	0xFEA
 38329                           fsr0l	equ	0xFE9
 38330                           wreg	equ	0xFE8
 38331                           postinc1	equ	0xFE6
 38332                           postdec1	equ	0xFE5
 38333                           plusw1	equ	0xFE3
 38334                           fsr1h	equ	0xFE2
 38335                           fsr1l	equ	0xFE1
 38336                           indf2	equ	0xFDF
 38337                           postinc2	equ	0xFDE
 38338                           postdec2	equ	0xFDD
 38339                           plusw2	equ	0xFDB
 38340                           fsr2h	equ	0xFDA
 38341                           fsr2l	equ	0xFD9
 38342                           status	equ	0xFD8
 38343                           
 38344 ;; *************** function _DIO1_ISR_Lora *****************
 38345 ;; Defined at:
 38346 ;;		line 68 in file "mcc_generated_files/LoRaWAN/interrupt_manager_lora_addons.c"
 38347 ;; Parameters:    Size  Location     Type
 38348 ;;		None
 38349 ;; Auto vars:     Size  Location     Type
 38350 ;;		None
 38351 ;; Return value:  Size  Location     Type
 38352 ;;                  1    wreg      void 
 38353 ;; Registers used:
 38354 ;;		status,2, status,0
 38355 ;; Tracked objects:
 38356 ;;		On entry : 3F/E
 38357 ;;		On exit  : 3F/E
 38358 ;;		Unchanged: 3F/0
 38359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 38360 ;;      Params:         0       0       0       0       0       0       0       0       0
 38361 ;;      Locals:         0       0       0       0       0       0       0       0       0
 38362 ;;      Temps:          0       0       0       0       0       0       0       0       0
 38363 ;;      Totals:         0       0       0       0       0       0       0       0       0
 38364 ;;Total ram usage:        0 bytes
 38365 ;; Hardware stack levels used:    1
 38366 ;; This function calls:
 38367 ;;		Nothing
 38368 ;; This function is called by:
 38369 ;;		_DIO1_ISR_Lora_Init
 38370 ;;		_INT1_CallBack
 38371 ;; This function uses a non-reentrant model
 38372 ;;
 38373                           
 38374                           	psect	text218
 38375  006256                     __ptext218:
 38376                           	opt stack 0
 38377  006256                     _DIO1_ISR_Lora:
 38378                           	opt stack 15
 38379                           
 38380                           ; BSR set to: 14
 38381                           ;interrupt_manager_lora_addons.c: 70: dioStatus |= 0x02;
 38382                           
 38383                           ;incstack = 0
 38384  006256  8247               	bsf	_dioStatus,1,c	;volatile
 38385                           
 38386                           ; BSR set to: 14
 38387  006258  0012               	return		;funcret
 38388  00625A                     __end_of_DIO1_ISR_Lora:
 38389                           	opt stack 0
 38390                           tosu	equ	0xFFF
 38391                           tosh	equ	0xFFE
 38392                           tosl	equ	0xFFD
 38393                           pclatu	equ	0xFFB
 38394                           pclath	equ	0xFFA
 38395                           tblptru	equ	0xFF8
 38396                           tblptrh	equ	0xFF7
 38397                           tblptrl	equ	0xFF6
 38398                           tablat	equ	0xFF5
 38399                           prodh	equ	0xFF4
 38400                           prodl	equ	0xFF3
 38401                           intcon	equ	0xFF2
 38402                           indf0	equ	0xFEF
 38403                           postinc0	equ	0xFEE
 38404                           plusw0	equ	0xFEB
 38405                           fsr0h	equ	0xFEA
 38406                           fsr0l	equ	0xFE9
 38407                           wreg	equ	0xFE8
 38408                           postinc1	equ	0xFE6
 38409                           postdec1	equ	0xFE5
 38410                           plusw1	equ	0xFE3
 38411                           fsr1h	equ	0xFE2
 38412                           fsr1l	equ	0xFE1
 38413                           indf2	equ	0xFDF
 38414                           postinc2	equ	0xFDE
 38415                           postdec2	equ	0xFDD
 38416                           plusw2	equ	0xFDB
 38417                           fsr2h	equ	0xFDA
 38418                           fsr2l	equ	0xFD9
 38419                           status	equ	0xFD8
 38420                           
 38421 ;; *************** function _INT1_DefaultInterruptHandler *****************
 38422 ;; Defined at:
 38423 ;;		line 80 in file "mcc_generated_files/ext_int.c"
 38424 ;; Parameters:    Size  Location     Type
 38425 ;;		None
 38426 ;; Auto vars:     Size  Location     Type
 38427 ;;		None
 38428 ;; Return value:  Size  Location     Type
 38429 ;;                  1    wreg      void 
 38430 ;; Registers used:
 38431 ;;		None
 38432 ;; Tracked objects:
 38433 ;;		On entry : 3F/E
 38434 ;;		On exit  : 3F/E
 38435 ;;		Unchanged: 3F/0
 38436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 38437 ;;      Params:         0       0       0       0       0       0       0       0       0
 38438 ;;      Locals:         0       0       0       0       0       0       0       0       0
 38439 ;;      Temps:          0       0       0       0       0       0       0       0       0
 38440 ;;      Totals:         0       0       0       0       0       0       0       0       0
 38441 ;;Total ram usage:        0 bytes
 38442 ;; Hardware stack levels used:    1
 38443 ;; This function calls:
 38444 ;;		Nothing
 38445 ;; This function is called by:
 38446 ;;		_EXT_INT_Initialize
 38447 ;;		_INT1_CallBack
 38448 ;; This function uses a non-reentrant model
 38449 ;;
 38450                           
 38451                           	psect	text219
 38452  00626A                     __ptext219:
 38453                           	opt stack 0
 38454  00626A                     _INT1_DefaultInterruptHandler:
 38455                           	opt stack 15
 38456                           
 38457                           ; BSR set to: 14
 38458                           
 38459                           ; BSR set to: 14
 38460                           ;incstack = 0
 38461  00626A  0012               	return		;funcret
 38462  00626C                     __end_of_INT1_DefaultInterruptHandler:
 38463                           	opt stack 0
 38464                           tosu	equ	0xFFF
 38465                           tosh	equ	0xFFE
 38466                           tosl	equ	0xFFD
 38467                           pclatu	equ	0xFFB
 38468                           pclath	equ	0xFFA
 38469                           tblptru	equ	0xFF8
 38470                           tblptrh	equ	0xFF7
 38471                           tblptrl	equ	0xFF6
 38472                           tablat	equ	0xFF5
 38473                           prodh	equ	0xFF4
 38474                           prodl	equ	0xFF3
 38475                           intcon	equ	0xFF2
 38476                           indf0	equ	0xFEF
 38477                           postinc0	equ	0xFEE
 38478                           plusw0	equ	0xFEB
 38479                           fsr0h	equ	0xFEA
 38480                           fsr0l	equ	0xFE9
 38481                           wreg	equ	0xFE8
 38482                           postinc1	equ	0xFE6
 38483                           postdec1	equ	0xFE5
 38484                           plusw1	equ	0xFE3
 38485                           fsr1h	equ	0xFE2
 38486                           fsr1l	equ	0xFE1
 38487                           indf2	equ	0xFDF
 38488                           postinc2	equ	0xFDE
 38489                           postdec2	equ	0xFDD
 38490                           plusw2	equ	0xFDB
 38491                           fsr2h	equ	0xFDA
 38492                           fsr2l	equ	0xFD9
 38493                           status	equ	0xFD8
 38494                           tosu	equ	0xFFF
 38495                           tosh	equ	0xFFE
 38496                           tosl	equ	0xFFD
 38497                           pclatu	equ	0xFFB
 38498                           pclath	equ	0xFFA
 38499                           tblptru	equ	0xFF8
 38500                           tblptrh	equ	0xFF7
 38501                           tblptrl	equ	0xFF6
 38502                           tablat	equ	0xFF5
 38503                           prodh	equ	0xFF4
 38504                           prodl	equ	0xFF3
 38505                           intcon	equ	0xFF2
 38506                           indf0	equ	0xFEF
 38507                           postinc0	equ	0xFEE
 38508                           plusw0	equ	0xFEB
 38509                           fsr0h	equ	0xFEA
 38510                           fsr0l	equ	0xFE9
 38511                           wreg	equ	0xFE8
 38512                           postinc1	equ	0xFE6
 38513                           postdec1	equ	0xFE5
 38514                           plusw1	equ	0xFE3
 38515                           fsr1h	equ	0xFE2
 38516                           fsr1l	equ	0xFE1
 38517                           indf2	equ	0xFDF
 38518                           postinc2	equ	0xFDE
 38519                           postdec2	equ	0xFDD
 38520                           plusw2	equ	0xFDB
 38521                           fsr2h	equ	0xFDA
 38522                           fsr2l	equ	0xFD9
 38523                           status	equ	0xFD8
 38524                           
 38525                           	psect	text220
 38526  000000                     __ptext220:
 38527                           	opt stack 0
 38528                           tosu	equ	0xFFF
 38529                           tosh	equ	0xFFE
 38530                           tosl	equ	0xFFD
 38531                           pclatu	equ	0xFFB
 38532                           pclath	equ	0xFFA
 38533                           tblptru	equ	0xFF8
 38534                           tblptrh	equ	0xFF7
 38535                           tblptrl	equ	0xFF6
 38536                           tablat	equ	0xFF5
 38537                           prodh	equ	0xFF4
 38538                           prodl	equ	0xFF3
 38539                           intcon	equ	0xFF2
 38540                           indf0	equ	0xFEF
 38541                           postinc0	equ	0xFEE
 38542                           plusw0	equ	0xFEB
 38543                           fsr0h	equ	0xFEA
 38544                           fsr0l	equ	0xFE9
 38545                           wreg	equ	0xFE8
 38546                           postinc1	equ	0xFE6
 38547                           postdec1	equ	0xFE5
 38548                           plusw1	equ	0xFE3
 38549                           fsr1h	equ	0xFE2
 38550                           fsr1l	equ	0xFE1
 38551                           indf2	equ	0xFDF
 38552                           postinc2	equ	0xFDE
 38553                           postdec2	equ	0xFDD
 38554                           plusw2	equ	0xFDB
 38555                           fsr2h	equ	0xFDA
 38556                           fsr2l	equ	0xFD9
 38557                           status	equ	0xFD8
 38558                           
 38559                           	psect	rparam
 38560  0000                     tosu	equ	0xFFF
 38561                           tosh	equ	0xFFE
 38562                           tosl	equ	0xFFD
 38563                           pclatu	equ	0xFFB
 38564                           pclath	equ	0xFFA
 38565                           tblptru	equ	0xFF8
 38566                           tblptrh	equ	0xFF7
 38567                           tblptrl	equ	0xFF6
 38568                           tablat	equ	0xFF5
 38569                           prodh	equ	0xFF4
 38570                           prodl	equ	0xFF3
 38571                           intcon	equ	0xFF2
 38572                           indf0	equ	0xFEF
 38573                           postinc0	equ	0xFEE
 38574                           plusw0	equ	0xFEB
 38575                           fsr0h	equ	0xFEA
 38576                           fsr0l	equ	0xFE9
 38577                           wreg	equ	0xFE8
 38578                           postinc1	equ	0xFE6
 38579                           postdec1	equ	0xFE5
 38580                           plusw1	equ	0xFE3
 38581                           fsr1h	equ	0xFE2
 38582                           fsr1l	equ	0xFE1
 38583                           indf2	equ	0xFDF
 38584                           postinc2	equ	0xFDE
 38585                           postdec2	equ	0xFDD
 38586                           plusw2	equ	0xFDB
 38587                           fsr2h	equ	0xFDA
 38588                           fsr2l	equ	0xFD9
 38589                           status	equ	0xFD8
 38590                           
 38591                           	psect	temp
 38592  000048                     btemp:
 38593                           	opt stack 0
 38594  000048                     	ds	12
 38595  0000                     wtemp0	set	btemp
 38596  0000                     wtemp1	set	btemp+2
 38597  0000                     wtemp2	set	btemp+4
 38598  0000                     wtemp3	set	btemp+6
 38599  0000                     wtemp4	set	btemp+8
 38600  0000                     wtemp5	set	btemp+10
 38601  0000                     ttemp0	set	btemp
 38602  0000                     ttemp1	set	btemp+3
 38603  0000                     ttemp2	set	btemp+6
 38604  0000                     ttemp3	set	btemp+9
 38605  0000                     ltemp0	set	btemp
 38606  0000                     ltemp1	set	btemp+4
 38607  0000                     ltemp2	set	btemp+8
 38608                           tosu	equ	0xFFF
 38609                           tosh	equ	0xFFE
 38610                           tosl	equ	0xFFD
 38611                           pclatu	equ	0xFFB
 38612                           pclath	equ	0xFFA
 38613                           tblptru	equ	0xFF8
 38614                           tblptrh	equ	0xFF7
 38615                           tblptrl	equ	0xFF6
 38616                           tablat	equ	0xFF5
 38617                           prodh	equ	0xFF4
 38618                           prodl	equ	0xFF3
 38619                           intcon	equ	0xFF2
 38620                           indf0	equ	0xFEF
 38621                           postinc0	equ	0xFEE
 38622                           plusw0	equ	0xFEB
 38623                           fsr0h	equ	0xFEA
 38624                           fsr0l	equ	0xFE9
 38625                           wreg	equ	0xFE8
 38626                           postinc1	equ	0xFE6
 38627                           postdec1	equ	0xFE5
 38628                           plusw1	equ	0xFE3
 38629                           fsr1h	equ	0xFE2
 38630                           fsr1l	equ	0xFE1
 38631                           indf2	equ	0xFDF
 38632                           postinc2	equ	0xFDE
 38633                           postdec2	equ	0xFDD
 38634                           plusw2	equ	0xFDB
 38635                           fsr2h	equ	0xFDA
 38636                           fsr2l	equ	0xFD9
 38637                           status	equ	0xFD8
 38638                           tosu	equ	0xFFF
 38639                           tosh	equ	0xFFE
 38640                           tosl	equ	0xFFD
 38641                           pclatu	equ	0xFFB
 38642                           pclath	equ	0xFFA
 38643                           tblptru	equ	0xFF8
 38644                           tblptrh	equ	0xFF7
 38645                           tblptrl	equ	0xFF6
 38646                           tablat	equ	0xFF5
 38647                           prodh	equ	0xFF4
 38648                           prodl	equ	0xFF3
 38649                           intcon	equ	0xFF2
 38650                           indf0	equ	0xFEF
 38651                           postinc0	equ	0xFEE
 38652                           plusw0	equ	0xFEB
 38653                           fsr0h	equ	0xFEA
 38654                           fsr0l	equ	0xFE9
 38655                           wreg	equ	0xFE8
 38656                           postinc1	equ	0xFE6
 38657                           postdec1	equ	0xFE5
 38658                           plusw1	equ	0xFE3
 38659                           fsr1h	equ	0xFE2
 38660                           fsr1l	equ	0xFE1
 38661                           indf2	equ	0xFDF
 38662                           postinc2	equ	0xFDE
 38663                           postdec2	equ	0xFDD
 38664                           plusw2	equ	0xFDB
 38665                           fsr2h	equ	0xFDA
 38666                           fsr2l	equ	0xFD9
 38667                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    402
    Data        56
    BSS         1276
    Persistent  12
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           83     47      83
    BANK0           160    157     160
    BANK1           256    121     255
    BANK2           256      0     245
    BANK3           256      0     160
    BANK4           256      0     224
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    RxDataDone@pData	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), NULL(NULL[0]), 

    RxPayload$0	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), NULL(NULL[0]), 

    S1558$0$0	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), NULL(NULL[0]), 

    memset@p1	PTR void  size(2) Largest target is 271
		 -> GenerateSubkey@l(BANK0[16]), AESCmac@x(BANK1[16]), AssemblePacket@mhdr(BANK0[1]), aesBuffer(BANK1[16]), 
		 -> Channels(BANK4[224]), macBuffer(BIGRAM[271]), loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    memset@p	PTR unsigned char  size(2) Largest target is 271
		 -> GenerateSubkey@l(BANK0[16]), AESCmac@x(BANK1[16]), AssemblePacket@mhdr(BANK0[1]), aesBuffer(BANK1[16]), 
		 -> Channels(BANK4[224]), macBuffer(BIGRAM[271]), loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    memcpy@d1	PTR void  size(2) Largest target is 271
		 -> RadioConfiguration(BANK1[54]), UpdateCfList@frequency(BANK0[4]), AESCmac@x(BANK1[16]), AESEncodeLoRa@useKey(BANK0[16]), 
		 -> ComputeMic@mic(BANK0[4]), ExtractMic@mic(BANK0[4]), aesBuffer(BANK1[16]), radioBuffer(BIGRAM[271]), 
		 -> LORAWAN_RxDone@computedMic(BANK0[4]), Channels(BANK4[224]), loRa.activationParameters.applicationEui(BANK2[8]), loRa.activationParameters.deviceEui(BANK2[8]), 
		 -> macBuffer(BIGRAM[271]), loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 271
		 -> RadioConfiguration(BANK1[54]), UpdateCfList@frequency(BANK0[4]), AESCmac@x(BANK1[16]), AESEncodeLoRa@useKey(BANK0[16]), 
		 -> ComputeMic@mic(BANK0[4]), ExtractMic@mic(BANK0[4]), aesBuffer(BANK1[16]), radioBuffer(BIGRAM[271]), 
		 -> LORAWAN_RxDone@computedMic(BANK0[4]), Channels(BANK4[224]), loRa.activationParameters.applicationEui(BANK2[8]), loRa.activationParameters.deviceEui(BANK2[8]), 
		 -> macBuffer(BIGRAM[271]), loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    memcpy@s1	PTR const void  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr.cfList(COMRAM[16]), radioBuffer.cfList(BIGRAM[16]), RadioConfiguration.syncWord(BANK1[8]), RadioConfiguration(BANK1[54]), 
		 -> FskSyncWordBuff(CODE[3]), UpdateCfList@joinAccept(BANK0[2]), DefaultChannels433(CODE[42]), DefaultChannels868(CODE[42]), 
		 -> AESCmac@y(BANK1[16]), AssembleEncryptionBlock@frameCounter(BANK0[4]), ComputeSessionKeys@joinAcceptBuffer(BANK0[2]), PrepareJoinRequestFrame@mic(BANK0[4]), 
		 -> loRa.devNonce(BANK2[2]), loRa.fCntUp.valueLow(BANK2[2]), aesBuffer(BANK1[16]), radioBuffer(BIGRAM[271]), 
		 -> LORAWAN_RxDone@hdr(BANK0[2]), loRa.activationParameters.applicationKey(BANK2[16]), loRa.activationParameters.applicationSessionKey(BANK2[16]), loRa.activationParameters.networkSessionKey(BANK2[16]), 
		 -> loRa.activationParameters.deviceAddress(BANK2[4]), loRa.activationParameters.applicationEui(BANK2[8]), loRa.activationParameters.deviceEui(BANK2[8]), loRa.activationParameters.mcastApplicationSessionKey(BANK2[16]), 
		 -> loRa.activationParameters.mcastNetworkSessionKey(BANK2[16]), loRa.activationParameters.mcastDeviceAddress(BANK2[4]), loRa.fCntUp(BANK2[4]), loRa.activationParameters(BANK2[105]), 
		 -> loRa(BANK2[245]), payload(BANK1[2]), appSKey(BANK1[16]), nwkSKey(BANK1[16]), 
		 -> NULL(NULL[0]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr.cfList(COMRAM[16]), radioBuffer.cfList(BIGRAM[16]), RadioConfiguration.syncWord(BANK1[8]), RadioConfiguration(BANK1[54]), 
		 -> FskSyncWordBuff(CODE[3]), UpdateCfList@joinAccept(BANK0[2]), DefaultChannels433(CODE[42]), DefaultChannels868(CODE[42]), 
		 -> AESCmac@y(BANK1[16]), AssembleEncryptionBlock@frameCounter(BANK0[4]), ComputeSessionKeys@joinAcceptBuffer(BANK0[2]), PrepareJoinRequestFrame@mic(BANK0[4]), 
		 -> loRa.devNonce(BANK2[2]), loRa.fCntUp.valueLow(BANK2[2]), aesBuffer(BANK1[16]), radioBuffer(BIGRAM[271]), 
		 -> LORAWAN_RxDone@hdr(BANK0[2]), loRa.activationParameters.applicationKey(BANK2[16]), loRa.activationParameters.applicationSessionKey(BANK2[16]), loRa.activationParameters.networkSessionKey(BANK2[16]), 
		 -> loRa.activationParameters.deviceAddress(BANK2[4]), loRa.activationParameters.applicationEui(BANK2[8]), loRa.activationParameters.deviceEui(BANK2[8]), loRa.activationParameters.mcastApplicationSessionKey(BANK2[16]), 
		 -> loRa.activationParameters.mcastNetworkSessionKey(BANK2[16]), loRa.activationParameters.mcastDeviceAddress(BANK2[4]), loRa.fCntUp(BANK2[4]), loRa.activationParameters(BANK2[105]), 
		 -> loRa(BANK2[245]), payload(BANK1[2]), appSKey(BANK1[16]), nwkSKey(BANK1[16]), 
		 -> NULL(NULL[0]), 

    SwTimerSetCallback@callback	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> RADIO_WatchdogTimeout(), RADIO_RxFSKTimeout(), DutyCycleCallback(), UpdateJoinSuccessState(), 
		 -> AutomaticReplyCallback(), UnconfirmedTransmissionCallback(), AckRetransmissionCallback(), LORAWAN_LinkCheckCallback(), 
		 -> LORAWAN_ReceiveWindow2Callback(), LORAWAN_ReceiveWindow1Callback(), 

    S3867$callback	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> RADIO_WatchdogTimeout(), RADIO_RxFSKTimeout(), DutyCycleCallback(), UpdateJoinSuccessState(), 
		 -> AutomaticReplyCallback(), UnconfirmedTransmissionCallback(), AckRetransmissionCallback(), LORAWAN_LinkCheckCallback(), 
		 -> LORAWAN_ReceiveWindow2Callback(), LORAWAN_ReceiveWindow1Callback(), Absolute function(), 

    swTimers.callback	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> RADIO_WatchdogTimeout(), RADIO_RxFSKTimeout(), DutyCycleCallback(), UpdateJoinSuccessState(), 
		 -> AutomaticReplyCallback(), UnconfirmedTransmissionCallback(), AckRetransmissionCallback(), LORAWAN_LinkCheckCallback(), 
		 -> LORAWAN_ReceiveWindow2Callback(), LORAWAN_ReceiveWindow1Callback(), Absolute function(), 

    RADIO_SetFSKSyncWord@syncWord	PTR unsigned char  size(2) Largest target is 3
		 -> FskSyncWordBuff(CODE[3]), 

    RADIO_Transmit@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> macBuffer(BIGRAM[271]), 

    RADIO_Init@radioBuffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), 

    S3552$fhssNextFrequency	PTR FTN()unsigned long  size(2) Largest target is 1
		 -> Absolute function(), 

    RadioConfiguration.fhssNextFrequency	PTR FTN()unsigned long  size(2) Largest target is 1
		 -> Absolute function(), 

    S3552$dataBuffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), 

    RadioConfiguration.dataBuffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), 

    UpdateCfList@joinAccept	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    SearchAvailableChannel@channelIndex	PTR unsigned char  size(1) Largest target is 1
		 -> SelectChannelForTransmission@channelIndex(BANK0[1]), LORAWAN_RxDone@channelIndex(BANK0[1]), 

    ExecuteRxParamSetupReq@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ExecuteNewChannel@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ExecuteDevStatus@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ExecuteLinkAdr@redundancy	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ExecuteLinkAdr@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ExecuteDutyCycle@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    LORAWAN_Init@RxJoinResponse	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> RxJoinResponse(), 

    LORAWAN_Init@RxPayload	PTR FTN(PTR unsigned char ,unsigned char ,enum E17428,)void  size(2) Largest target is 1
		 -> RxDataDone(), 

    FillSubKey@source	PTR unsigned char  size(2) Largest target is 16
		 -> GenerateSubkey@l(BANK0[16]), AESCmac@k1(BANK1[16]), 

    FillSubKey@key	PTR unsigned char  size(2) Largest target is 16
		 -> AESCmac@k2(BANK1[16]), AESCmac@k1(BANK1[16]), 

    GenerateSubkey@k2	PTR unsigned char  size(2) Largest target is 16
		 -> AESCmac@k2(BANK1[16]), 

    GenerateSubkey@k1	PTR unsigned char  size(2) Largest target is 16
		 -> AESCmac@k1(BANK1[16]), 

    GenerateSubkey@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    AESCmac@output	PTR unsigned char  size(2) Largest target is 16
		 -> aesBuffer(BANK1[16]), 

    AESCmac@input	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), macBuffer(BIGRAM[271]), 

    AESCmac@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    AESCmac@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), macBuffer(BIGRAM[271]), NULL(NULL[0]), 

    AESEncodeLoRa@block	PTR unsigned char  size(2) Largest target is 271
		 -> GenerateSubkey@l(BANK0[16]), AESCmac@y(BANK1[16]), AESCmac@x(BANK1[16]), aesBuffer(BANK1[16]), 
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    AESEncodeLoRa@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    EncryptFRMPayload@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), payload(BANK1[2]), NULL(NULL[0]), 

    EncryptFRMPayload@bufferToBeEncrypted	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), macBuffer(BIGRAM[271]), 

    EncryptFRMPayload@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    ComputeMic@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), macBuffer(BIGRAM[271]), 

    ComputeMic@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    ExtractMic@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    CheckMcastFlags@hdr	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    CheckFlags@hdr	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ComputeSessionKeys@joinAcceptBuffer	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    PrepareSessionKeys@networkId	PTR unsigned char  size(2) Largest target is 2
		 -> ComputeSessionKeys@joinAcceptBuffer(BANK0[2]), radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    PrepareSessionKeys@appNonce	PTR unsigned char  size(2) Largest target is 2
		 -> ComputeSessionKeys@joinAcceptBuffer(BANK0[2]), radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    PrepareSessionKeys@sessionKey	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    IncludeMacCommandsResponse@macBuffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), macBuffer(BIGRAM[271]), 

    IncludeMacCommandsResponse@pBufferIndex	PTR unsigned char  size(1) Largest target is 1
		 -> AssemblePacket@macCmdIdx(BANK0[1]), AssemblePacket@bufferIndex(BANK0[1]), 

    AssemblePacket@buffer	PTR unsigned char  size(2) Largest target is 2
		 -> payload(BANK1[2]), NULL(NULL[0]), 

    sp__memset	PTR void  size(2) Largest target is 271
		 -> GenerateSubkey@l(BANK0[16]), AESCmac@x(BANK1[16]), AssemblePacket@mhdr(BANK0[1]), aesBuffer(BANK1[16]), 
		 -> Channels(BANK4[224]), macBuffer(BIGRAM[271]), loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    ExecuteRxTimingSetup@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ExecuteLinkCheck@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteRxTimingSetup	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteNewChannel	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteDevStatus	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteRxParamSetupReq	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteDutyCycle	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteLinkAdr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteLinkCheck	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    MacExecuteCommands@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    MacExecuteCommands@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__MacExecuteCommands	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    LORAWAN_RxDone@packet	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), NULL(NULL[0]), 

    LORAWAN_RxDone@hdr	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    LORAWAN_RxDone@joinAccept	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    LORAWAN_RxDone@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew	PTR unsigned char  size(2) Largest target is 16
		 -> appSKey(BANK1[16]), 

    LORAWAN_SetNetworkSessionKey@networkSessionKeyNew	PTR unsigned char  size(2) Largest target is 16
		 -> nwkSKey(BANK1[16]), 

    sp__memcpy	PTR void  size(2) Largest target is 271
		 -> RadioConfiguration(BANK1[54]), UpdateCfList@frequency(BANK0[4]), AESCmac@x(BANK1[16]), AESEncodeLoRa@useKey(BANK0[16]), 
		 -> ComputeMic@mic(BANK0[4]), ExtractMic@mic(BANK0[4]), aesBuffer(BANK1[16]), radioBuffer(BIGRAM[271]), 
		 -> LORAWAN_RxDone@computedMic(BANK0[4]), Channels(BANK4[224]), loRa.activationParameters.applicationEui(BANK2[8]), loRa.activationParameters.deviceEui(BANK2[8]), 
		 -> macBuffer(BIGRAM[271]), loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    LORAWAN_Send@buffer	PTR void  size(2) Largest target is 2
		 -> payload(BANK1[2]), NULL(NULL[0]), 

    S1558$RxJoinResponse	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> RxJoinResponse(), 

    rxPayload.RxJoinResponse	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> RxJoinResponse(), 

    S1558$RxAppData	PTR FTN(PTR unsigned char ,unsigned char ,enum E17369,)void  size(2) Largest target is 1
		 -> RxDataDone(), 

    rxPayload.RxAppData	PTR FTN(PTR unsigned char ,unsigned char ,enum E17369,)void  size(2) Largest target is 1
		 -> RxDataDone(), 

    AESEncode@block	PTR unsigned char  size(2) Largest target is 271
		 -> GenerateSubkey@l(BANK0[16]), AESCmac@y(BANK1[16]), AESCmac@x(BANK1[16]), aesBuffer(BANK1[16]), 
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    AESEncode@masterKey	PTR unsigned char  size(1) Largest target is 16
		 -> AESEncodeLoRa@useKey(BANK0[16]), 

    EncodeShiftRow@stateTable	PTR unsigned char  size(2) Largest target is 271
		 -> GenerateSubkey@l(BANK0[16]), AESCmac@y(BANK1[16]), AESCmac@x(BANK1[16]), aesBuffer(BANK1[16]), 
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    EncKeySchedule@key	PTR unsigned char  size(1) Largest target is 16
		 -> AESEncode@key(BANK0[16]), 

    IOCBF4_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> DIO2_ISR_Lora(), IOCBF4_DefaultInterruptHandler(), 

    IOCBF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> DIO2_ISR_Lora(), IOCBF4_DefaultInterruptHandler(), Absolute function(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR_ISR_lora(), TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR_ISR_lora(), TMR1_DefaultInterruptHandler(), Absolute function(), 

    INT3_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> INT3_DefaultInterruptHandler(), 

    INT3_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT3_DefaultInterruptHandler(), Absolute function(), 

    INT0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> DIO0_ISR_Lora(), INT0_DefaultInterruptHandler(), 

    INT0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> DIO0_ISR_Lora(), INT0_DefaultInterruptHandler(), Absolute function(), 

    INT2_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> DIO5_ISR_Lora(), INT2_DefaultInterruptHandler(), 

    INT2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> DIO5_ISR_Lora(), INT2_DefaultInterruptHandler(), Absolute function(), 

    INT1_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> DIO1_ISR_Lora(), INT1_DefaultInterruptHandler(), 

    INT1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> DIO1_ISR_Lora(), INT1_DefaultInterruptHandler(), Absolute function(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR_ISR_lora->i2_SwTimersInterrupt
    i2_TMR_SwapTimer->i2_TMR1_ReadTimer
    i2_SwTimersInterrupt->i2_TMR_GetDeltaTime
    i2_TMR_GetDeltaTime->i2_TMR1_ReadTimer

Critical Paths under _main in BANK0

    _sendPacket->_LORAWAN_Send
    _SYSTEM_Initialize->_TMR1_Initialize
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCBF4_SetInterruptHandler
    _TMR_ISR_Lora_Init->_TMR1_SetInterruptHandler
    _DIO5_ISR_Lora_Init->_INT2_SetInterruptHandler
    _DIO2_ISR_Lora_Init->_IOCBF4_SetInterruptHandler
    _DIO1_ISR_Lora_Init->_INT1_SetInterruptHandler
    _DIO0_ISR_Lora_Init->_INT0_SetInterruptHandler
    _EXT_INT_Initialize->_INT0_SetInterruptHandler
    _EXT_INT_Initialize->_INT1_SetInterruptHandler
    _EXT_INT_Initialize->_INT2_SetInterruptHandler
    _EXT_INT_Initialize->_INT3_SetInterruptHandler
    _LORAWAN_SetNetworkSessionKey->_memcpy
    _LORAWAN_SetApplicationSessionKey->_memcpy
    _LORAWAN_Mainloop->_RADIO_DIO0
    _UnconfirmedTransmissionCallback->_RADIO_Transmit
    _RADIO_WatchdogTimeout->_RADIO_WriteMode
    _RADIO_RxFSKTimeout->_RADIO_WriteMode
    _LORAWAN_ReceiveWindow1Callback->_RADIO_ReceiveStart
    _LORAWAN_LinkCheckCallback->_SwTimerStart
    _DutyCycleCallback->_SwTimerStart
    _AutomaticReplyCallback->_LORAWAN_Send
    _AckRetransmissionCallback->_RADIO_Transmit
    _RADIO_DIO5->_RADIO_UnhandledInterrupt
    _RADIO_DIO4->_RADIO_UnhandledInterrupt
    _RADIO_DIO3->_RADIO_UnhandledInterrupt
    _RADIO_RxTimeout->_LORAWAN_RxTimeout
    _RADIO_FHSSChangeChannel->_RADIO_WriteFrequency
    _RADIO_DIO0->_RADIO_FSKPayloadReady
    _RADIO_DIO0->_RADIO_RxDone
    _RADIO_UnhandledInterrupt->_RADIO_RegisterWrite
    _RADIO_TxDone->_LORAWAN_TxDone
    _RADIO_RxDone->_LORAWAN_RxDone
    _RADIO_FSKPayloadReady->_LORAWAN_RxDone
    _LORAWAN_RxTimeout->_RADIO_Transmit
    _LORAWAN_ReceiveWindow2Callback->_RADIO_ReceiveStart
    _LORAWAN_RxDone->_LORAWAN_Send
    _UpdateRetransmissionAckTimeoutState->_SwTimerStart
    _UpdateJoinSuccessState->_SwTimerStart
    _UpdateCfList->___lmul
    _StartReTxTimer->_SwTimerStart
    _MacExecuteCommands->_ExecuteNewChannel
    _ExecuteRxTimingSetup->_UpdateReceiveDelays
    _UpdateReceiveDelays->___wmul
    _ExecuteRxParamSetupReq->___lmul
    _ExecuteNewChannel->___lmul
    _ValidateDataRange->_ValidateDataRate
    _LORAWAN_SetChannelIdStatus->_UpdateChannelIdStatus
    _ExecuteLinkAdr->_EnableChannels
    _EnableChannels->_EnableChannels1
    _EnableChannels1->_UpdateChannelIdStatus
    _LORAWAN_Send->_AssemblePacket
    _LORAWAN_GetMaxPayloadSize->_CountfOptsLength
    _AssemblePacket->_AESCmac
    _EncryptFRMPayload->_AESEncodeLoRa
    _AssembleEncryptionBlock->_memcpy
    _ExtractMic->_memcpy
    _ComputeSessionKeys->_AESEncodeLoRa
    _PrepareSessionKeys->_memcpy
    _RADIO_FSKPacketSent->_LORAWAN_TxDone
    _SwTimerReadValue->_SwTimersInterrupt
    _LORAWAN_EnterContinuousReceive->_RADIO_ReceiveStart
    _RADIO_ReceiveStop->_RADIO_WriteMode
    _RADIO_ReceiveStart->_RADIO_WriteConfiguration
    _ConfigureRadioRx->_ConfigureRadio
    _LORAWAN_Join->_PrepareJoinRequestFrame
    _SelectChannelForTransmission->_SearchAvailableChannel
    _SearchAvailableChannel->_Random
    _ConfigureRadioTx->_ConfigureRadio
    _ConfigureRadio->_RADIO_SetFSKSyncWord
    _RADIO_SetFSKSyncWord->_memcpy
    _RADIO_Transmit->_RADIO_WriteConfiguration
    _RADIO_WriteConfiguration->___lmul
    _RADIO_WritePower->_RADIO_RegisterRead
    _RADIO_WritePower->_RADIO_RegisterWrite
    _RADIO_WriteFSKFrequencyDeviation->___lldiv
    _RADIO_WriteFSKBitRate->___lldiv
    _PrepareJoinRequestFrame->_ComputeMic
    _Random->___lwmod
    _rand->___lmul
    ___lwmod->_rand
    _ComputeMic->_AESCmac
    _AESCmac->_GenerateSubkey
    _GenerateSubkey->_AESEncodeLoRa
    _AESEncodeLoRa->_AESEncode
    _AESEncode->_EncKeySchedule
    _LORAWAN_Init->_LORAWAN_Reset
    _srand->_RADIO_ReadRandom
    _SetCallbackSoftwareTimers->_SwTimerSetCallback
    _RADIO_ReadRandom->_RADIO_WriteMode
    _LORAWAN_Reset->_LORAWAN_LinkCheckConfigure
    _StopAllSoftwareTimers->_SwTimerStop
    _RADIO_Init->_RADIO_WriteFrequency
    _RADIO_WriteMode->_SystemBlockingWaitMs
    _RADIO_RegisterRead->_HALSPISend
    _RADIO_WriteFrequency->___lldiv
    _RADIO_RegisterWrite->_HALSPISend
    _HALSPISend->_SPI2_Exchange8bit
    _RADIO_Reset->_SystemBlockingWaitMs
    _LORAWAN_LinkCheckConfigure->___lmul
    ___lmul->_SwTimerReadValue
    _SwTimerStart->_SwTimersInterrupt
    _TMR_OverrideRemaining->_TMR_SwapTimer
    _TMR_SwapTimer->_TMR1_ReadTimer
    _SwTimersInterrupt->_TMR_GetDeltaTime
    _TMR_GetDeltaTime->_TMR1_ReadTimer
    _SwTimerSetTimeout->___lldiv
    _InitDefault868Channels->_memcpy
    _InitDefault433Channels->_memcpy
    _CreateAllSoftwareTimers->_SwTimerCreate

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _sendPacket->_LORAWAN_Send
    _LORAWAN_Mainloop->_RADIO_DIO0
    _AutomaticReplyCallback->_LORAWAN_Send
    _RADIO_RxDone->_LORAWAN_RxDone
    _RADIO_FSKPayloadReady->_LORAWAN_RxDone
    _LORAWAN_RxDone->_LORAWAN_Send
    _LORAWAN_Send->_AssemblePacket
    _AssemblePacket->_AESCmac
    _PrepareJoinRequestFrame->_ComputeMic
    _ComputeMic->_AESCmac

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0 6728738
                                            116 BANK1      5     5      0
                       _LORAWAN_Init
                       _LORAWAN_Join
                   _LORAWAN_Mainloop
   _LORAWAN_SetApplicationSessionKey
           _LORAWAN_SetDeviceAddress
       _LORAWAN_SetNetworkSessionKey
                  _SYSTEM_Initialize
                              _flash
                         _sendPacket
 ---------------------------------------------------------------------------------
 (1) _sendPacket                                           0     0      0  317742
                       _LORAWAN_Send
 ---------------------------------------------------------------------------------
 (1) _flash                                                2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2112
                 _EXT_INT_Initialize
               _INTERRUPT_Initialize
               _LORAWAN_PlatformInit
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI2_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      2     2      0     200
                                              2 BANK0      2     2      0
           _TMR1_SetInterruptHandler
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0     223
                                              2 BANK0      1     1      0
         _IOCBF4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LORAWAN_PlatformInit                                 0     0      0     989
                 _DIO0_ISR_Lora_Init
                 _DIO1_ISR_Lora_Init
                 _DIO2_ISR_Lora_Init
                 _DIO3_ISR_Lora_Init
                 _DIO4_ISR_Lora_Init
                 _DIO5_ISR_Lora_Init
                    _SystemTimerInit
                  _TMR_ISR_Lora_Init
 ---------------------------------------------------------------------------------
 (3) _TMR_ISR_Lora_Init                                    0     0      0     200
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     200
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _SystemTimerInit                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DIO5_ISR_Lora_Init                                   0     0      0     200
           _INT2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _DIO4_ISR_Lora_Init                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DIO3_ISR_Lora_Init                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DIO2_ISR_Lora_Init                                   0     0      0     200
         _IOCBF4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCBF4_SetInterruptHandler                           2     0      2     200
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _DIO1_ISR_Lora_Init                                   0     0      0     200
           _INT1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _DIO0_ISR_Lora_Init                                   0     0      0     189
           _INT0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     700
           _INT0_SetInterruptHandler
           _INT1_SetInterruptHandler
           _INT2_SetInterruptHandler
           _INT3_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT3_SetInterruptHandler                             2     0      2     111
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _INT2_SetInterruptHandler                             2     0      2     200
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _INT1_SetInterruptHandler                             2     0      2     200
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _INT0_SetInterruptHandler                             2     0      2     189
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_SetNetworkSessionKey                         2     0      2   13228
                                             10 BANK0      2     0      2
                             _memcpy
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_SetDeviceAddress                             4     0      4     111
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_SetApplicationSessionKey                     2     0      2   13228
                                             10 BANK0      2     0      2
                             _memcpy
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_Mainloop                                     0     0      0 5952755
             _INTERRUPT_GetDioStatus
                         _RADIO_DIO0
                         _RADIO_DIO1
                         _RADIO_DIO2
                         _RADIO_DIO3
                         _RADIO_DIO4
                         _RADIO_DIO5
                    _SwTimersExecute
 ---------------------------------------------------------------------------------
 (2) _SwTimersExecute                                      5     5      0 2321151
                                            128 BANK0      5     5      0
                   Absolute function *
          _AckRetransmissionCallback *
             _AutomaticReplyCallback *
                  _DutyCycleCallback *
          _LORAWAN_LinkCheckCallback *
     _LORAWAN_ReceiveWindow1Callback *
     _LORAWAN_ReceiveWindow2Callback *
                 _RADIO_RxFSKTimeout *
              _RADIO_WatchdogTimeout *
    _UnconfirmedTransmissionCallback *
             _UpdateJoinSuccessState *
 ---------------------------------------------------------------------------------
 (3) _UnconfirmedTransmissionCallback                      1     0      1  153376
                     _RADIO_Transmit
_ResetParametersForUnconfirmedTransm
                         _RxDataDone *
       _SelectChannelForTransmission
 ---------------------------------------------------------------------------------
 (3) _RADIO_WatchdogTimeout                                1     0      1  681520
                  _LORAWAN_RxTimeout
                     _LORAWAN_TxDone
                    _RADIO_WriteMode
 ---------------------------------------------------------------------------------
 (3) _RADIO_RxFSKTimeout                                   2     1      1  499821
                  _LORAWAN_RxTimeout
                 _RADIO_RegisterRead
                    _RADIO_WriteMode
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (3) _LORAWAN_ReceiveWindow1Callback                       5     4      1  155778
                   _ConfigureRadioRx
                         _GetRx1Freq
                 _RADIO_ReceiveStart
                  _RADIO_ReceiveStop
                  _RADIO_ReleaseData
 ---------------------------------------------------------------------------------
 (4) _GetRx1Freq                                           4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _LORAWAN_LinkCheckCallback                            6     5      1    9224
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _DutyCycleCallback                                   11    10      1    9667
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _AutomaticReplyCallback                               1     0      1  317742
                       _LORAWAN_Send
 ---------------------------------------------------------------------------------
 (3) _AckRetransmissionCallback                            2     1      1  163191
               _FindSmallestDataRate
          _LORAWAN_GetMaxPayloadSize
                     _RADIO_Transmit
_ResetParametersForConfirmedTransmis
                         _RxDataDone *
       _SelectChannelForTransmission
_UpdateRetransmissionAckTimeoutState
 ---------------------------------------------------------------------------------
 (16) Absolute function(Fake)                              4     0      4       0
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO5                                           2     2      0    9877
                                              5 BANK0      1     1      0
                 _RADIO_RegisterRead
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO4                                           2     2      0    9877
                                              5 BANK0      1     1      0
                 _RADIO_RegisterRead
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO3                                           2     2      0    9877
                                              5 BANK0      1     1      0
                 _RADIO_RegisterRead
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO2                                           3     3      0   36323
                                             25 BANK0      2     2      0
            _RADIO_FHSSChangeChannel
                 _RADIO_RegisterRead
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO1                                           2     2      0  545727
                                             96 BANK0      2     2      0
            _RADIO_FHSSChangeChannel
                 _RADIO_RegisterRead
                    _RADIO_RxTimeout
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (3) _RADIO_RxTimeout                                      0     0      0  509373
                  _LORAWAN_RxTimeout
                _RADIO_RegisterWrite
                    _RADIO_WriteMode
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (3) _RADIO_FHSSChangeChannel                              1     1      0   26412
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
               _RADIO_WriteFrequency
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO0                                           4     4      0 3019900
                                            155 BANK0      2     2      0
                                            114 BANK1      2     2      0
                _RADIO_FSKPacketSent
              _RADIO_FSKPayloadReady
                 _RADIO_RegisterRead
                       _RADIO_RxDone
                       _RADIO_TxDone
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (3) _RADIO_UnhandledInterrupt                             1     1      0    9747
                                              4 BANK0      1     1      0
                _RADIO_RegisterWrite
 ---------------------------------------------------------------------------------
 (3) _RADIO_TxDone                                         8     8      0  213243
                                            116 BANK0      8     8      0
                     _LORAWAN_TxDone
                _RADIO_RegisterWrite
                    _RADIO_WriteMode
                   _SwTimerReadValue
                        _SwTimerStop
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) _RADIO_RxDone                                         2     2      0 1059641
                                            153 BANK0      2     2      0
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
                     _LORAWAN_RxDone
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
                    _RADIO_WriteMode
                        _SwTimerStop
                            ___abdiv
 ---------------------------------------------------------------------------------
 (4) ___abdiv                                              5     4      1     549
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (3) _RADIO_FSKPayloadReady                                2     2      0 1533284
                                            153 BANK0      2     2      0
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
                     _LORAWAN_RxDone
                  _LORAWAN_RxTimeout
                 _RADIO_RegisterRead
                    _RADIO_WriteMode
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (4) _LORAWAN_RxTimeout                                    9     9      0  483942
                                             87 BANK0      9     9      0
     _LORAWAN_ReceiveWindow2Callback
                     _RADIO_Transmit
_ResetParametersForConfirmedTransmis
_ResetParametersForUnconfirmedTransm
                         _RxDataDone *
       _SelectChannelForTransmission
                   _SetJoinFailState
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _LORAWAN_ReceiveWindow2Callback                       1     0      1  321190
                   _ConfigureRadioRx
     _LORAWAN_EnterContinuousReceive
                    _RADIO_GetStatus
                 _RADIO_ReceiveStart
                  _RADIO_ReceiveStop
                  _RADIO_ReleaseData
_ResetParametersForConfirmedTransmis
_ResetParametersForUnconfirmedTransm
                         _RxDataDone *
 ---------------------------------------------------------------------------------
 (4) _LORAWAN_RxDone                                      28    25      3 1033302
                                            128 BANK0     25    25      0
                                            111 BANK1      3     0      3
                            _AESCmac
                      _AESEncodeLoRa
            _AssembleEncryptionBlock
                         _CheckFlags
                    _CheckMcastFlags
                         _ComputeMic
                 _ComputeSessionKeys
                  _EncryptFRMPayload
                         _ExtractMic
     _LORAWAN_EnterContinuousReceive
                       _LORAWAN_Send
                 _MacExecuteCommands
                    _RADIO_GetStatus
                  _RADIO_ReleaseData
                         _RxDataDone *
             _SearchAvailableChannel
                   _SetJoinFailState
             _SetReceptionNotOkState
                     _StartReTxTimer
                        _SwTimerStop
                       _UpdateCfList
                   _UpdateDLSettings
             _UpdateJoinSuccessState
                _UpdateReceiveDelays
_UpdateRetransmissionAckTimeoutState
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _UpdateRetransmissionAckTimeoutState                  4     4      0    9085
                                             48 BANK0      4     4      0
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _UpdateJoinSuccessState                               5     4      1    9122
                     _RxJoinResponse *
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _UpdateDLSettings                                     2     1      1     228
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _UpdateCfList                                        11     9      2   22339
                                             60 BANK0     11     9      2
         _LORAWAN_SetChannelIdStatus
                  _ValidateFrequency
                             ___lmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _StartReTxTimer                                       9     9      0    9376
                                             48 BANK0      9     9      0
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _SetReceptionNotOkState                               0     0      0  165446
     _LORAWAN_EnterContinuousReceive
                         _RxDataDone *
 ---------------------------------------------------------------------------------
 (5) _SetJoinFailState                                     0     0      0       0
                     _RxJoinResponse *
 ---------------------------------------------------------------------------------
 (4) _RxJoinResponse                                       1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _MacExecuteCommands                                   8     5      3   25555
                                             68 BANK0      8     5      3
                   _ExecuteDevStatus
                   _ExecuteDutyCycle
                     _ExecuteLinkAdr
                   _ExecuteLinkCheck
                  _ExecuteNewChannel
             _ExecuteRxParamSetupReq
               _ExecuteRxTimingSetup
 ---------------------------------------------------------------------------------
 (6) _ExecuteRxTimingSetup                                 3     1      2     843
                                              7 BANK0      3     1      2
                _UpdateReceiveDelays
 ---------------------------------------------------------------------------------
 (5) _UpdateReceiveDelays                                  1     1      0     640
                                              6 BANK0      1     1      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     578
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (6) _ExecuteRxParamSetupReq                               7     5      2    7042
                                             60 BANK0      7     5      2
     _UpdateReceiveWindow2Parameters
                   _ValidateDataRate
                  _ValidateFrequency
                   _ValidateRxOffset
                             ___lmul
 ---------------------------------------------------------------------------------
 (7) _ValidateRxOffset                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _UpdateReceiveWindow2Parameters                       5     0      5     438
                                              0 BANK0      5     0      5
 ---------------------------------------------------------------------------------
 (6) _ExecuteNewChannel                                    8     6      2   12796
                                             60 BANK0      8     6      2
         _LORAWAN_SetChannelIdStatus
              _UpdateChannelIdStatus
                    _UpdateDataRange
                    _UpdateDutyCycle
                    _UpdateFrequency
                  _ValidateChannelId
                  _ValidateDataRange
                  _ValidateFrequency
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) _ValidateFrequency                                    5     1      4     644
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (7) _ValidateDataRange                                    4     4      0     297
                                              2 BANK0      4     4      0
                   _ValidateDataRate
 ---------------------------------------------------------------------------------
 (7) _UpdateFrequency                                      5     1      4     385
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (7) _UpdateDutyCycle                                      3     1      2     385
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (7) _UpdateDataRange                                      4     3      1     608
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (6) _LORAWAN_SetChannelIdStatus                           3     2      1    2369
                                              4 BANK0      3     2      1
              _UpdateChannelIdStatus
                  _ValidateChannelId
 ---------------------------------------------------------------------------------
 (7) _ValidateChannelId                                    3     2      1     842
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _ExecuteLinkCheck                                     2     0      2     203
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (6) _ExecuteLinkAdr                                       9     7      2    3295
                                             13 BANK0      9     7      2
                     _EnableChannels
              _UpdateCurrentDataRate
                      _UpdateTxPower
                _ValidateChannelMask
            _ValidateChannelMaskCntl
                   _ValidateDataRate
                    _ValidateTxPower
 ---------------------------------------------------------------------------------
 (7) _ValidateTxPower                                      2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _ValidateDataRate                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _ValidateChannelMaskCntl                              2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _ValidateChannelMask                                  3     1      2     271
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (7) _UpdateTxPower                                        1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _UpdateCurrentDataRate                                1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _EnableChannels                                       3     0      3    2044
                                             10 BANK0      3     0      3
                    _EnableChannels1
 ---------------------------------------------------------------------------------
 (8) _EnableChannels1                                      6     1      5    1774
                                              4 BANK0      6     1      5
              _UpdateChannelIdStatus
 ---------------------------------------------------------------------------------
 (7) _UpdateChannelIdStatus                                4     3      1     971
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (6) _ExecuteDutyCycle                                     6     4      2     265
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (6) _ExecuteDevStatus                                     2     0      2     135
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _LORAWAN_Send                                         7     3      4  317742
                                            125 BANK0      3     3      0
                                            107 BANK1      4     0      4
                     _AssemblePacket
          _LORAWAN_GetMaxPayloadSize
                  _RADIO_ReceiveStop
                     _RADIO_Transmit
       _SelectChannelForTransmission
 ---------------------------------------------------------------------------------
 (3) _LORAWAN_GetMaxPayloadSize                            3     3      0     272
                                              8 BANK0      3     3      0
                   _CountfOptsLength
 ---------------------------------------------------------------------------------
 (3) _AssemblePacket                                      12     7      5  151724
                                            118 BANK0      7     7      0
                                            102 BANK1      5     0      5
                            _AESCmac
            _AssembleEncryptionBlock
                   _CountfOptsLength
                  _EncryptFRMPayload
               _FindSmallestDataRate
         _IncludeMacCommandsResponse
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (4) _IncludeMacCommandsResponse                          12     8      4    2532
                                              0 BANK0     12     8      4
                 _RADIO_GetPacketSnr
 ---------------------------------------------------------------------------------
 (5) _RADIO_GetPacketSnr                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _FindSmallestDataRate                                 4     4      0     424
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _EncryptFRMPayload                                   22     8     14   44159
                                             64 BANK0     22     8     14
                      _AESEncodeLoRa
            _AssembleEncryptionBlock
 ---------------------------------------------------------------------------------
 (5) _AssembleEncryptionBlock                              9     2      7   19076
                                             10 BANK0      9     2      7
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (4) _CountfOptsLength                                     8     8      0     198
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (5) _ExtractMic                                          10     6      4   13819
                                             10 BANK0     10     6      4
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _ComputeSessionKeys                                   2     0      2   37793
                                             64 BANK0      2     0      2
                      _AESEncodeLoRa
                 _PrepareSessionKeys
 ---------------------------------------------------------------------------------
 (6) _PrepareSessionKeys                                   7     1      6   17605
                                             10 BANK0      7     1      6
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (5) _CheckMcastFlags                                      2     0      2     290
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _CheckFlags                                           2     0      2     228
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _RADIO_FSKPacketSent                                  9     9      0  203691
                                            116 BANK0      9     9      0
                     _LORAWAN_TxDone
                 _RADIO_RegisterRead
                    _RADIO_WriteMode
                   _SwTimerReadValue
                        _SwTimerStop
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) _LORAWAN_TxDone                                      40    38      2  181894
                                             80 BANK0     36    34      2
     _LORAWAN_EnterContinuousReceive
                    _RADIO_GetStatus
                         _RxDataDone *
                   _SwTimerIsRunning
                   _SwTimerReadValue
                  _SwTimerSetTimeout
                       _SwTimerStart
                        _SwTimerStop
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) _SwTimerReadValue                                     9     5      4     455
                                             39 BANK0      9     5      4
                  _SwTimersInterrupt
 ---------------------------------------------------------------------------------
 (5) _SwTimerIsRunning                                     2     2      0      65
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _RADIO_GetStatus                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _LORAWAN_EnterContinuousReceive                       0     0      0  160595
                   _ConfigureRadioRx
                 _RADIO_ReceiveStart
                  _RADIO_ReceiveStop
                  _RADIO_ReleaseData
_ResetParametersForConfirmedTransmis
_ResetParametersForUnconfirmedTransm
                         _RxDataDone *
 ---------------------------------------------------------------------------------
 (4) _RxDataDone                                           4     0      4    4851
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) _ResetParametersForUnconfirmedTransmission            0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _ResetParametersForConfirmedTransmission              0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _RADIO_ReleaseData                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _RADIO_ReceiveStop                                    0     0      0   15684
                    _RADIO_WriteMode
 ---------------------------------------------------------------------------------
 (6) _RADIO_ReceiveStart                                  10     8      2  125388
                                             70 BANK0     10     8      2
                _RADIO_RegisterWrite
           _RADIO_WriteConfiguration
                    _RADIO_WriteMode
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (6) _ConfigureRadioRx                                     5     1      4   14672
                                             18 BANK0      5     1      4
                     _ConfigureRadio
                       _RADIO_SetCRC
                _RADIO_SetIQInverted
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_GetDioStatus                               1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_Join                                         3     3      0  256427
                                            131 BANK0      3     3      0
            _PrepareJoinRequestFrame
                     _RADIO_Transmit
       _SelectChannelForTransmission
                  _SwTimerSetTimeout
                       _SwTimerStart
               _UpdateJoinInProgress
 ---------------------------------------------------------------------------------
 (2) _UpdateJoinInProgress                                 1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _SelectChannelForTransmission                         3     3      0   22010
                                             80 BANK0      3     3      0
                   _ConfigureRadioTx
             _SearchAvailableChannel
 ---------------------------------------------------------------------------------
 (4) _SearchAvailableChannel                              11     9      2    7280
                                             69 BANK0     11     9      2
                             _Random
 ---------------------------------------------------------------------------------
 (4) _ConfigureRadioTx                                     6     2      4   14532
                                             18 BANK0      6     2      4
                     _ConfigureRadio
                       _RADIO_SetCRC
                _RADIO_SetIQInverted
               _RADIO_SetOutputPower
 ---------------------------------------------------------------------------------
 (5) _RADIO_SetOutputPower                                 1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _RADIO_SetIQInverted                                  1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _RADIO_SetCRC                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _ConfigureRadio                                       5     1      4   14236
                                             13 BANK0      5     1      4
                 _RADIO_SetBandwidth
          _RADIO_SetChannelFrequency
               _RADIO_SetFSKSyncWord
        _RADIO_SetFrequencyHopPeriod
              _RADIO_SetLoRaSyncWord
                _RADIO_SetModulation
           _RADIO_SetSpreadingFactor
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetSpreadingFactor                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetModulation                                  1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetFrequencyHopPeriod                          2     0      2     135
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetFSKSyncWord                                 3     1      2   13293
                                             10 BANK0      3     1      2
                             _memcpy
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetChannelFrequency                            4     0      4     321
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetBandwidth                                   1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RADIO_Transmit                                      17    14      3  126515
                                             70 BANK0     17    14      3
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
           _RADIO_WriteConfiguration
                    _RADIO_WriteMode
                  _SwTimerSetTimeout
                       _SwTimerStart
                        _SwTimerStop
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) _RADIO_WriteConfiguration                            10     8      2   90430
                                             60 BANK0     10     8      2
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
              _RADIO_WriteFSKBitRate
   _RADIO_WriteFSKFrequencyDeviation
               _RADIO_WriteFrequency
                    _RADIO_WriteMode
                   _RADIO_WritePower
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) _RADIO_WritePower                                     3     3      0   10303
                                              4 BANK0      3     3      0
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
 ---------------------------------------------------------------------------------
 (5) _RADIO_WriteFSKFrequencyDeviation                     8     4      4   15813
                                             13 BANK0      8     4      4
                _RADIO_RegisterWrite
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _RADIO_WriteFSKBitRate                                8     4      4   15810
                                             13 BANK0      8     4      4
                _RADIO_RegisterWrite
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) _PrepareJoinRequestFrame                              9     9      0  104515
                                            122 BANK0      9     9      0
                         _ComputeMic
                             _Random
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (5) _Random                                               2     0      2    6071
                                             67 BANK0      2     0      2
                            ___lwmod
                               _rand
 ---------------------------------------------------------------------------------
 (6) _rand                                                 2     0      2    5392
                                             60 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     440
                                             62 BANK0      5     1      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (5) _ComputeMic                                           9     4      5   81241
                                            118 BANK0      4     4      0
                                            102 BANK1      5     0      5
                            _AESCmac
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _AESCmac                                            116   109      7   67391
                                            104 BANK0     14     7      7
                                              0 BANK1    102   102      0
                      _AESEncodeLoRa
                     _GenerateSubkey
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (5) _GenerateSubkey                                      40    34      6   26439
                                             64 BANK0     40    34      6
                      _AESEncodeLoRa
                         _FillSubKey
                             _memset
 ---------------------------------------------------------------------------------
 (6) _FillSubKey                                           8     3      5    1539
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (5) _AESEncodeLoRa                                       20    16      4   19957
                                             44 BANK0     20    16      4
                          _AESEncode
                             _memcpy
 ---------------------------------------------------------------------------------
 (6) _AESEncode                                           38    35      3    5098
                                              6 BANK0     38    35      3
                     _EncKeySchedule
                     _EncodeShiftRow
 ---------------------------------------------------------------------------------
 (7) _EncodeShiftRow                                       3     1      2     984
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (7) _EncKeySchedule                                       6     5      1    1164
                                              0 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_Init                                         4     0      4  172804
                                             72 BANK0      4     0      4
            _CreateAllSoftwareTimers
                      _LORAWAN_Reset
                         _RADIO_Init
                   _RADIO_ReadRandom
          _SetCallbackSoftwareTimers
              _StopAllSoftwareTimers
                              _srand
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2     111
                                             17 BANK0      2     0      2
                   _RADIO_ReadRandom (ARG)
 ---------------------------------------------------------------------------------
 (2) _SetCallbackSoftwareTimers                            0     0      0    2224
                 _SwTimerSetCallback
 ---------------------------------------------------------------------------------
 (2) _RADIO_ReadRandom                                     5     3      2   26256
                                             12 BANK0      5     3      2
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
                    _RADIO_WriteMode
               _SystemBlockingWaitMs
 ---------------------------------------------------------------------------------
 (2) _LORAWAN_Reset                                        1     1      0   97991
                                             71 BANK0      1     1      0
             _InitDefault433Channels
             _InitDefault868Channels
         _LORAWAN_LinkCheckConfigure
                         _RADIO_Init
              _RADIO_SetLoRaSyncWord
              _StopAllSoftwareTimers
             _UpdateMinMaxChDataRate
                             _memset
 ---------------------------------------------------------------------------------
 (3) _UpdateMinMaxChDataRate                               2     2      0     156
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _StopAllSoftwareTimers                                0     0      0      31
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetLoRaSyncWord                                1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RADIO_Init                                           7     1      6   45810
                                             25 BANK0      7     1      6
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
                        _RADIO_Reset
               _RADIO_WriteFrequency
                    _RADIO_WriteMode
                      _SwTimerCreate
                 _SwTimerSetCallback
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (3) _SwTimerSetCallback                                   4     1      3    2224
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (4) _RADIO_WriteMode                                      7     5      2   15684
                                              5 BANK0      7     5      2
                    _HALDIO5PinValue
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
               _SystemBlockingWaitMs
 ---------------------------------------------------------------------------------
 (5) _RADIO_RegisterRead                                   2     2      0     130
                                              2 BANK0      2     2      0
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
 ---------------------------------------------------------------------------------
 (5) _HALDIO5PinValue                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RADIO_WriteFrequency                                12     8      4   16566
                                             13 BANK0     12     8      4
                _RADIO_RegisterWrite
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (6) ___llmod                                              9     1      8     440
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (5) _RADIO_RegisterWrite                                  2     1      1    9716
                                              2 BANK0      2     1      1
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
 ---------------------------------------------------------------------------------
 (6) _HALSPISend                                           1     1      0      62
                                              1 BANK0      1     1      0
                  _SPI2_Exchange8bit
 ---------------------------------------------------------------------------------
 (7) _SPI2_Exchange8bit                                    1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _HALSPICSDeassert                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _HALSPICSAssert                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _RADIO_Reset                                          0     0      0     662
               _HALResetPinMakeInput
              _HALResetPinMakeOutput
             _HALResetPinOutputValue
               _SystemBlockingWaitMs
 ---------------------------------------------------------------------------------
 (5) _SystemBlockingWaitMs                                 5     1      4     618
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (4) _HALResetPinOutputValue                               1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _HALResetPinMakeOutput                                0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _HALResetPinMakeInput                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LORAWAN_LinkCheckConfigure                          11     9      2   14810
                                             60 BANK0     11     9      2
                  _SwTimerSetTimeout
                       _SwTimerStart
                        _SwTimerStop
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (7) ___lmul                                              12     4      8    5392
                                             48 BANK0     12     4      8
                   _SwTimerReadValue (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8    5857
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) _SwTimerStop                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _SwTimerStart                                         9     9      0    1294
                                             39 BANK0      9     9      0
                  _SwTimersInterrupt
              _TMR_OverrideRemaining
 ---------------------------------------------------------------------------------
 (5) _TMR_OverrideRemaining                               10     6      4     743
                                              8 BANK0     10     6      4
                      _TMR_SwapTimer
 ---------------------------------------------------------------------------------
 (6) _TMR_SwapTimer                                        2     0      2     478
                                              6 BANK0      2     0      2
                     _TMR1_ReadTimer
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (7) _TMR1_WriteTimer                                      2     0      2     240
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SwTimersInterrupt                                   17    13      4     390
                                             22 BANK0     17    13      4
                   _TMR_GetDeltaTime
 ---------------------------------------------------------------------------------
 (6) _TMR_GetDeltaTime                                    16    12      4      34
                                              6 BANK0     16    12      4
                     _TMR1_ReadTimer
 ---------------------------------------------------------------------------------
 (7) _TMR1_ReadTimer                                       6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _SwTimerSetTimeout                                    9     5      4    1934
                                             13 BANK0      9     5      4
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _InitDefault868Channels                               1     1      0   16761
                                             10 BANK0      1     1      0
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (3) _InitDefault433Channels                               1     1      0   16761
                                             10 BANK0      1     1      0
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6    3569
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (7) _memcpy                                              10     4      6   13062
                                              0 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _CreateAllSoftwareTimers                              0     0      0     111
                      _SwTimerCreate
 ---------------------------------------------------------------------------------
 (3) _SwTimerCreate                                        1     1      0     111
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (13) _INTERRUPT_InterruptManager                          8     8      0     455
                                             39 COMRAM     8     8      0
                           _INT1_ISR
                           _INT2_ISR
                           _INT3_ISR
                    _PIN_MANAGER_IOC
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (14) _TMR1_ISR                                            0     0      0     455
                      _TMR1_CallBack
 ---------------------------------------------------------------------------------
 (15) _TMR1_CallBack                                       0     0      0     455
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                       _TMR_ISR_lora *
 ---------------------------------------------------------------------------------
 (16) _TMR_ISR_lora                                        0     0      0     455
                i2_SwTimersInterrupt
                    i2_TMR_SwapTimer
 ---------------------------------------------------------------------------------
 (17) i2_TMR_SwapTimer                                     2     0      2     185
                                              6 COMRAM     2     0      2
                   i2_TMR1_ReadTimer
                  i2_TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (18) i2_TMR1_WriteTimer                                   2     0      2     114
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (17) i2_SwTimersInterrupt                                17    13      4     270
                                             22 COMRAM    17    13      4
                 i2_TMR_GetDeltaTime
 ---------------------------------------------------------------------------------
 (18) i2_TMR_GetDeltaTime                                 16    12      4      23
                                              6 COMRAM    16    12      4
                   i2_TMR1_ReadTimer
 ---------------------------------------------------------------------------------
 (18) i2_TMR1_ReadTimer                                    6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (16) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _PIN_MANAGER_IOC                                     0     0      0       0
                         _IOCBF4_ISR
 ---------------------------------------------------------------------------------
 (15) _IOCBF4_ISR                                          0     0      0       0
                   Absolute function *
                      _DIO2_ISR_Lora *
     _IOCBF4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (16) _IOCBF4_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _DIO2_ISR_Lora                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _INT3_ISR                                            0     0      0       0
                      _INT3_CallBack
 ---------------------------------------------------------------------------------
 (15) _INT3_CallBack                                       0     0      0       0
                   Absolute function *
       _INT3_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (16) _INT3_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _INT2_ISR                                            0     0      0       0
                      _INT2_CallBack
 ---------------------------------------------------------------------------------
 (15) _INT2_CallBack                                       0     0      0       0
                   Absolute function *
                      _DIO5_ISR_Lora *
       _INT2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (16) _INT2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _DIO5_ISR_Lora                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _INT1_ISR                                            0     0      0       0
                      _INT1_CallBack
 ---------------------------------------------------------------------------------
 (15) _INT1_CallBack                                       0     0      0       0
                   Absolute function *
                      _DIO1_ISR_Lora *
       _INT1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (16) _INT1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _DIO1_ISR_Lora                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (16) Absolute function(Fake)                              4     0      4       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LORAWAN_Init
     _CreateAllSoftwareTimers
       _SwTimerCreate
     _LORAWAN_Reset
       _InitDefault433Channels
         _memcpy
         _memset
       _InitDefault868Channels
         _memcpy
         _memset
       _LORAWAN_LinkCheckConfigure
         _SwTimerSetTimeout
           ___lldiv (ARG)
         _SwTimerStart
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         _SwTimerStop
         ___lldiv
         ___lmul
           _SwTimerReadValue (ARG)
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
       _RADIO_Init
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_Reset
           _HALResetPinMakeInput
           _HALResetPinMakeOutput
           _HALResetPinOutputValue
           _SystemBlockingWaitMs
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
           ___llmod
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerCreate
         _SwTimerSetCallback
         _SwTimerStop
       _RADIO_SetLoRaSyncWord
       _StopAllSoftwareTimers
         _SwTimerStop
       _UpdateMinMaxChDataRate
       _memset
     _RADIO_Init
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RegisterWrite
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_Reset
         _HALResetPinMakeInput
         _HALResetPinMakeOutput
         _HALResetPinOutputValue
         _SystemBlockingWaitMs
       _RADIO_WriteFrequency
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         ___lldiv
         ___llmod
       _RADIO_WriteMode
         _HALDIO5PinValue
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _SystemBlockingWaitMs
       _SwTimerCreate
       _SwTimerSetCallback
       _SwTimerStop
     _RADIO_ReadRandom
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RegisterWrite
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_WriteMode
         _HALDIO5PinValue
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _SystemBlockingWaitMs
       _SystemBlockingWaitMs
     _SetCallbackSoftwareTimers
       _SwTimerSetCallback
     _StopAllSoftwareTimers
       _SwTimerStop
     _srand
       _RADIO_ReadRandom (ARG)
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SystemBlockingWaitMs
   _LORAWAN_Join
     _PrepareJoinRequestFrame
       _ComputeMic
         _AESCmac
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _GenerateSubkey
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _FillSubKey
             _memset
           _memcpy
           _memset
         _memcpy
       _Random
         ___lwmod
           _rand (ARG)
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
         _rand
           ___lmul
             _SwTimerReadValue (ARG)
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
       _memcpy
       _memset
     _RADIO_Transmit
       _HALSPICSAssert
       _HALSPICSDeassert
       _HALSPISend
         _SPI2_Exchange8bit
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RegisterWrite
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_WriteConfiguration
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteFSKBitRate
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
         _RADIO_WriteFSKFrequencyDeviation
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
           ___llmod
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _RADIO_WritePower
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
         ___lmul
           _SwTimerReadValue (ARG)
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
       _RADIO_WriteMode
         _HALDIO5PinValue
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _SystemBlockingWaitMs
       _SwTimerSetTimeout
         ___lldiv (ARG)
       _SwTimerStart
         _SwTimersInterrupt
           _TMR_GetDeltaTime
             _TMR1_ReadTimer
         _TMR_OverrideRemaining
           _TMR_SwapTimer
             _TMR1_ReadTimer
             _TMR1_WriteTimer
       _SwTimerStop
       ___lldiv
     _SelectChannelForTransmission
       _ConfigureRadioTx
         _ConfigureRadio
           _RADIO_SetBandwidth
           _RADIO_SetChannelFrequency
           _RADIO_SetFSKSyncWord
             _memcpy
           _RADIO_SetFrequencyHopPeriod
           _RADIO_SetLoRaSyncWord
           _RADIO_SetModulation
           _RADIO_SetSpreadingFactor
         _RADIO_SetCRC
         _RADIO_SetIQInverted
         _RADIO_SetOutputPower
       _SearchAvailableChannel
         _Random
           ___lwmod
             _rand (ARG)
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
           _rand
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
     _SwTimerSetTimeout
       ___lldiv (ARG)
     _SwTimerStart
       _SwTimersInterrupt
         _TMR_GetDeltaTime
           _TMR1_ReadTimer
       _TMR_OverrideRemaining
         _TMR_SwapTimer
           _TMR1_ReadTimer
           _TMR1_WriteTimer
     _UpdateJoinInProgress
   _LORAWAN_Mainloop
     _INTERRUPT_GetDioStatus
     _RADIO_DIO0
       _RADIO_FSKPacketSent
         _LORAWAN_TxDone
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_GetStatus
           _RxDataDone *
           _SwTimerIsRunning *
           _SwTimerReadValue *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop *
           ___lldiv *
           ___lmul *
             _SwTimerReadValue (ARG)
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerReadValue
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
         _SwTimerStop
         ___lmul
           _SwTimerReadValue (ARG)
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
       _RADIO_FSKPayloadReady
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
         _LORAWAN_RxDone
           _AESCmac
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _GenerateSubkey
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _FillSubKey
               _memset
             _memcpy
             _memset
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _AssembleEncryptionBlock
             _memcpy
             _memset
           _CheckFlags
           _CheckMcastFlags
           _ComputeMic
             _AESCmac
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _GenerateSubkey
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _FillSubKey
                 _memset
               _memcpy
               _memset
             _memcpy
           _ComputeSessionKeys
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _PrepareSessionKeys
               _memcpy
               _memset
           _EncryptFRMPayload
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _AssembleEncryptionBlock
               _memcpy
               _memset
           _ExtractMic
             _memcpy
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _LORAWAN_Send
             _AssemblePacket
               _AESCmac
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _GenerateSubkey
                   _AESEncodeLoRa
                     _AESEncode
                       _EncKeySchedule
                       _EncodeShiftRow
                     _memcpy
                   _FillSubKey
                   _memset
                 _memcpy
                 _memset
               _AssembleEncryptionBlock
                 _memcpy
                 _memset
               _CountfOptsLength
               _EncryptFRMPayload
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _AssembleEncryptionBlock
                   _memcpy
                   _memset
               _FindSmallestDataRate
               _IncludeMacCommandsResponse
                 _RADIO_GetPacketSnr
               _memcpy
               _memset
             _LORAWAN_GetMaxPayloadSize
               _CountfOptsLength
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_Transmit
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               _SwTimerStop
               ___lldiv
             _SelectChannelForTransmission
               _ConfigureRadioTx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
                 _RADIO_SetOutputPower
               _SearchAvailableChannel
                 _Random
                   ___lwmod
                     _rand (ARG)
                       ___lmul
                         _SwTimerReadValue (ARG)
                           _SwTimersInterrupt
                             _TMR_GetDeltaTime
                               _TMR1_ReadTimer
                   _rand
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
           _MacExecuteCommands
             _ExecuteDevStatus
             _ExecuteDutyCycle
             _ExecuteLinkAdr
               _EnableChannels
                 _EnableChannels1
                   _UpdateChannelIdStatus
               _UpdateCurrentDataRate
               _UpdateTxPower
               _ValidateChannelMask
               _ValidateChannelMaskCntl
               _ValidateDataRate
               _ValidateTxPower
             _ExecuteLinkCheck
             _ExecuteNewChannel
               _LORAWAN_SetChannelIdStatus
                 _UpdateChannelIdStatus
                 _ValidateChannelId
               _UpdateChannelIdStatus
               _UpdateDataRange
               _UpdateDutyCycle
               _UpdateFrequency
               _ValidateChannelId
               _ValidateDataRange
                 _ValidateDataRate
               _ValidateFrequency
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _ExecuteRxParamSetupReq
               _UpdateReceiveWindow2Parameters
               _ValidateDataRate
               _ValidateFrequency
               _ValidateRxOffset
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _ExecuteRxTimingSetup
               _UpdateReceiveDelays
                 ___wmul
           _RADIO_GetStatus
           _RADIO_ReleaseData
           _RxDataDone *
           _SearchAvailableChannel *
             _Random
               ___lwmod
                 _rand (ARG)
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
               _rand
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
           _SetJoinFailState *
             _RxJoinResponse *
           _SetReceptionNotOkState *
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxDataDone *
             _RxDataDone *
           _StartReTxTimer *
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _SwTimerStop *
           _UpdateCfList *
             _LORAWAN_SetChannelIdStatus
               _UpdateChannelIdStatus
               _ValidateChannelId
             _ValidateFrequency
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
             _memcpy
           _UpdateDLSettings *
           _UpdateJoinSuccessState *
             _RxJoinResponse *
             _SwTimerSetTimeout *
               ___lldiv (ARG)
             _SwTimerStart *
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv *
           _UpdateReceiveDelays *
             ___wmul
           _UpdateRetransmissionAckTimeoutState *
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _memcpy *
         _LORAWAN_RxTimeout
           _LORAWAN_ReceiveWindow2Callback
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxDataDone *
             _RADIO_GetStatus
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxDataDone *
           _SelectChannelForTransmission *
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
                 _rand
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
           _SetJoinFailState *
             _RxJoinResponse *
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv *
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerStop
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RxDone
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
         _LORAWAN_RxDone
           _AESCmac
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _GenerateSubkey
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _FillSubKey
               _memset
             _memcpy
             _memset
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _AssembleEncryptionBlock
             _memcpy
             _memset
           _CheckFlags
           _CheckMcastFlags
           _ComputeMic
             _AESCmac
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _GenerateSubkey
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _FillSubKey
                 _memset
               _memcpy
               _memset
             _memcpy
           _ComputeSessionKeys
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _PrepareSessionKeys
               _memcpy
               _memset
           _EncryptFRMPayload
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _AssembleEncryptionBlock
               _memcpy
               _memset
           _ExtractMic
             _memcpy
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _LORAWAN_Send
             _AssemblePacket
               _AESCmac
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _GenerateSubkey
                   _AESEncodeLoRa
                     _AESEncode
                       _EncKeySchedule
                       _EncodeShiftRow
                     _memcpy
                   _FillSubKey
                   _memset
                 _memcpy
                 _memset
               _AssembleEncryptionBlock
                 _memcpy
                 _memset
               _CountfOptsLength
               _EncryptFRMPayload
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _AssembleEncryptionBlock
                   _memcpy
                   _memset
               _FindSmallestDataRate
               _IncludeMacCommandsResponse
                 _RADIO_GetPacketSnr
               _memcpy
               _memset
             _LORAWAN_GetMaxPayloadSize
               _CountfOptsLength
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_Transmit
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               _SwTimerStop
               ___lldiv
             _SelectChannelForTransmission
               _ConfigureRadioTx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
                 _RADIO_SetOutputPower
               _SearchAvailableChannel
                 _Random
                   ___lwmod
                     _rand (ARG)
                       ___lmul
                         _SwTimerReadValue (ARG)
                           _SwTimersInterrupt
                             _TMR_GetDeltaTime
                               _TMR1_ReadTimer
                   _rand
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
           _MacExecuteCommands
             _ExecuteDevStatus
             _ExecuteDutyCycle
             _ExecuteLinkAdr
               _EnableChannels
                 _EnableChannels1
                   _UpdateChannelIdStatus
               _UpdateCurrentDataRate
               _UpdateTxPower
               _ValidateChannelMask
               _ValidateChannelMaskCntl
               _ValidateDataRate
               _ValidateTxPower
             _ExecuteLinkCheck
             _ExecuteNewChannel
               _LORAWAN_SetChannelIdStatus
                 _UpdateChannelIdStatus
                 _ValidateChannelId
               _UpdateChannelIdStatus
               _UpdateDataRange
               _UpdateDutyCycle
               _UpdateFrequency
               _ValidateChannelId
               _ValidateDataRange
                 _ValidateDataRate
               _ValidateFrequency
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _ExecuteRxParamSetupReq
               _UpdateReceiveWindow2Parameters
               _ValidateDataRate
               _ValidateFrequency
               _ValidateRxOffset
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _ExecuteRxTimingSetup
               _UpdateReceiveDelays
                 ___wmul
           _RADIO_GetStatus
           _RADIO_ReleaseData
           _RxDataDone *
           _SearchAvailableChannel *
             _Random
               ___lwmod
                 _rand (ARG)
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
               _rand
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
           _SetJoinFailState *
             _RxJoinResponse *
           _SetReceptionNotOkState *
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxDataDone *
             _RxDataDone *
           _StartReTxTimer *
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _SwTimerStop *
           _UpdateCfList *
             _LORAWAN_SetChannelIdStatus
               _UpdateChannelIdStatus
               _ValidateChannelId
             _ValidateFrequency
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
             _memcpy
           _UpdateDLSettings *
           _UpdateJoinSuccessState *
             _RxJoinResponse *
             _SwTimerSetTimeout *
               ___lldiv (ARG)
             _SwTimerStart *
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv *
           _UpdateReceiveDelays *
             ___wmul
           _UpdateRetransmissionAckTimeoutState *
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _memcpy *
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerStop
         ___abdiv
       _RADIO_TxDone
         _LORAWAN_TxDone
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_GetStatus
           _RxDataDone *
           _SwTimerIsRunning *
           _SwTimerReadValue *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop *
           ___lldiv *
           ___lmul *
             _SwTimerReadValue (ARG)
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerReadValue
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
         _SwTimerStop
         ___lmul
           _SwTimerReadValue (ARG)
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO1
       _RADIO_FHSSChangeChannel
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
           ___llmod
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RxTimeout
         _LORAWAN_RxTimeout
           _LORAWAN_ReceiveWindow2Callback
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxDataDone *
             _RADIO_GetStatus
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxDataDone *
           _SelectChannelForTransmission *
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
                 _rand
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
           _SetJoinFailState *
             _RxJoinResponse *
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv *
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerStop
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO2
       _RADIO_FHSSChangeChannel
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
           ___llmod
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO3
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO4
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO5
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _SwTimersExecute
       Absolute function(Fake) *
       _AckRetransmissionCallback *
         _FindSmallestDataRate
         _LORAWAN_GetMaxPayloadSize
           _CountfOptsLength
         _RADIO_Transmit
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_WriteConfiguration
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteFSKBitRate
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFSKFrequencyDeviation
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFrequency
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
               ___llmod
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _RADIO_WritePower
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop
           ___lldiv
         _ResetParametersForConfirmedTransmission
         _RxDataDone *
         _SelectChannelForTransmission *
           _ConfigureRadioTx
             _ConfigureRadio
               _RADIO_SetBandwidth
               _RADIO_SetChannelFrequency
               _RADIO_SetFSKSyncWord
                 _memcpy
               _RADIO_SetFrequencyHopPeriod
               _RADIO_SetLoRaSyncWord
               _RADIO_SetModulation
               _RADIO_SetSpreadingFactor
             _RADIO_SetCRC
             _RADIO_SetIQInverted
             _RADIO_SetOutputPower
           _SearchAvailableChannel
             _Random
               ___lwmod
                 _rand (ARG)
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
               _rand
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
         _UpdateRetransmissionAckTimeoutState *
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv
       _AutomaticReplyCallback *
         _LORAWAN_Send
           _AssemblePacket
             _AESCmac
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _GenerateSubkey
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _FillSubKey
                 _memset
               _memcpy
               _memset
             _AssembleEncryptionBlock
               _memcpy
               _memset
             _CountfOptsLength
             _EncryptFRMPayload
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _AssembleEncryptionBlock
                 _memcpy
                 _memset
             _FindSmallestDataRate
             _IncludeMacCommandsResponse
               _RADIO_GetPacketSnr
             _memcpy
             _memset
           _LORAWAN_GetMaxPayloadSize
             _CountfOptsLength
           _RADIO_ReceiveStop
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _SelectChannelForTransmission
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
                 _rand
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
       _DutyCycleCallback *
         _SwTimerSetTimeout
           ___lldiv (ARG)
         _SwTimerStart
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         ___lldiv
       _LORAWAN_LinkCheckCallback *
         _SwTimerSetTimeout
           ___lldiv (ARG)
         _SwTimerStart
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         ___lldiv
       _LORAWAN_ReceiveWindow1Callback *
         _ConfigureRadioRx
           _ConfigureRadio
             _RADIO_SetBandwidth
             _RADIO_SetChannelFrequency
             _RADIO_SetFSKSyncWord
               _memcpy
             _RADIO_SetFrequencyHopPeriod
             _RADIO_SetLoRaSyncWord
             _RADIO_SetModulation
             _RADIO_SetSpreadingFactor
           _RADIO_SetCRC
           _RADIO_SetIQInverted
         _GetRx1Freq
         _RADIO_ReceiveStart
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_WriteConfiguration
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteFSKBitRate
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFSKFrequencyDeviation
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFrequency
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
               ___llmod
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _RADIO_WritePower
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv
         _RADIO_ReceiveStop
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
         _RADIO_ReleaseData
       _LORAWAN_ReceiveWindow2Callback *
         _ConfigureRadioRx
           _ConfigureRadio
             _RADIO_SetBandwidth
             _RADIO_SetChannelFrequency
             _RADIO_SetFSKSyncWord
               _memcpy
             _RADIO_SetFrequencyHopPeriod
             _RADIO_SetLoRaSyncWord
             _RADIO_SetModulation
             _RADIO_SetSpreadingFactor
           _RADIO_SetCRC
           _RADIO_SetIQInverted
         _LORAWAN_EnterContinuousReceive
           _ConfigureRadioRx
             _ConfigureRadio
               _RADIO_SetBandwidth
               _RADIO_SetChannelFrequency
               _RADIO_SetFSKSyncWord
                 _memcpy
               _RADIO_SetFrequencyHopPeriod
               _RADIO_SetLoRaSyncWord
               _RADIO_SetModulation
               _RADIO_SetSpreadingFactor
             _RADIO_SetCRC
             _RADIO_SetIQInverted
           _RADIO_ReceiveStart
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _RADIO_ReceiveStop
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
           _RADIO_ReleaseData
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxDataDone *
         _RADIO_GetStatus
         _RADIO_ReceiveStart
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_WriteConfiguration
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteFSKBitRate
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFSKFrequencyDeviation
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFrequency
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
               ___llmod
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _RADIO_WritePower
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv
         _RADIO_ReceiveStop
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
         _RADIO_ReleaseData
         _ResetParametersForConfirmedTransmission
         _ResetParametersForUnconfirmedTransmission
         _RxDataDone *
       _RADIO_RxFSKTimeout *
         _LORAWAN_RxTimeout
           _LORAWAN_ReceiveWindow2Callback
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxDataDone *
             _RADIO_GetStatus
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxDataDone *
           _SelectChannelForTransmission *
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
                 _rand
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
           _SetJoinFailState *
             _RxJoinResponse *
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv *
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerStop
       _RADIO_WatchdogTimeout *
         _LORAWAN_RxTimeout
           _LORAWAN_ReceiveWindow2Callback
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxDataDone *
             _RADIO_GetStatus
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxDataDone *
           _SelectChannelForTransmission *
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
                 _rand
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
           _SetJoinFailState *
             _RxJoinResponse *
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv *
         _LORAWAN_TxDone
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_GetStatus
           _RxDataDone *
           _SwTimerIsRunning *
           _SwTimerReadValue *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop *
           ___lldiv *
           ___lmul *
             _SwTimerReadValue (ARG)
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
       _UnconfirmedTransmissionCallback *
         _RADIO_Transmit
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_WriteConfiguration
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteFSKBitRate
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFSKFrequencyDeviation
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFrequency
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
               ___llmod
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _RADIO_WritePower
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop
           ___lldiv
         _ResetParametersForUnconfirmedTransmission
         _RxDataDone *
         _SelectChannelForTransmission *
           _ConfigureRadioTx
             _ConfigureRadio
               _RADIO_SetBandwidth
               _RADIO_SetChannelFrequency
               _RADIO_SetFSKSyncWord
                 _memcpy
               _RADIO_SetFrequencyHopPeriod
               _RADIO_SetLoRaSyncWord
               _RADIO_SetModulation
               _RADIO_SetSpreadingFactor
             _RADIO_SetCRC
             _RADIO_SetIQInverted
             _RADIO_SetOutputPower
           _SearchAvailableChannel
             _Random
               ___lwmod
                 _rand (ARG)
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
               _rand
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
       _UpdateJoinSuccessState *
         _RxJoinResponse *
         _SwTimerSetTimeout *
           ___lldiv (ARG)
         _SwTimerStart *
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         ___lldiv *
   _LORAWAN_SetApplicationSessionKey
     _memcpy
   _LORAWAN_SetDeviceAddress
   _LORAWAN_SetNetworkSessionKey
     _memcpy
   _SYSTEM_Initialize
     _EXT_INT_Initialize
       _INT0_SetInterruptHandler
       _INT1_SetInterruptHandler
       _INT2_SetInterruptHandler
       _INT3_SetInterruptHandler
     _INTERRUPT_Initialize
     _LORAWAN_PlatformInit
       _DIO0_ISR_Lora_Init
         _INT0_SetInterruptHandler
       _DIO1_ISR_Lora_Init
         _INT1_SetInterruptHandler
       _DIO2_ISR_Lora_Init
         _IOCBF4_SetInterruptHandler
       _DIO3_ISR_Lora_Init
       _DIO4_ISR_Lora_Init
       _DIO5_ISR_Lora_Init
         _INT2_SetInterruptHandler
       _SystemTimerInit
       _TMR_ISR_Lora_Init
         _TMR1_SetInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCBF4_SetInterruptHandler
     _SPI2_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
       _TMR1_StartTimer
   _flash
   _sendPacket
     _LORAWAN_Send
       _AssemblePacket
         _AESCmac
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _GenerateSubkey
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _FillSubKey
             _memset
           _memcpy
           _memset
         _AssembleEncryptionBlock
           _memcpy
           _memset
         _CountfOptsLength
         _EncryptFRMPayload
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _AssembleEncryptionBlock
             _memcpy
             _memset
         _FindSmallestDataRate
         _IncludeMacCommandsResponse
           _RADIO_GetPacketSnr
         _memcpy
         _memset
       _LORAWAN_GetMaxPayloadSize
         _CountfOptsLength
       _RADIO_ReceiveStop
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
       _RADIO_Transmit
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteConfiguration
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_WriteFSKBitRate
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             ___lldiv
           _RADIO_WriteFSKFrequencyDeviation
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             ___lldiv
           _RADIO_WriteFrequency
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             ___lldiv
             ___llmod
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
           _RADIO_WritePower
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
           ___lmul
             _SwTimerReadValue (ARG)
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerSetTimeout
           ___lldiv (ARG)
         _SwTimerStart
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         _SwTimerStop
         ___lldiv
       _SelectChannelForTransmission
         _ConfigureRadioTx
           _ConfigureRadio
             _RADIO_SetBandwidth
             _RADIO_SetChannelFrequency
             _RADIO_SetFSKSyncWord
               _memcpy
             _RADIO_SetFrequencyHopPeriod
             _RADIO_SetLoRaSyncWord
             _RADIO_SetModulation
             _RADIO_SetSpreadingFactor
           _RADIO_SetCRC
           _RADIO_SetIQInverted
           _RADIO_SetOutputPower
         _SearchAvailableChannel
           _Random
             ___lwmod
               _rand (ARG)
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
             _rand
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer

 _INTERRUPT_InterruptManager (ROOT)
   _INT1_ISR
     _INT1_CallBack
       Absolute function(Fake) *
       _DIO1_ISR_Lora *
       _INT1_DefaultInterruptHandler *
   _INT2_ISR
     _INT2_CallBack
       Absolute function(Fake) *
       _DIO5_ISR_Lora *
       _INT2_DefaultInterruptHandler *
   _INT3_ISR
     _INT3_CallBack
       Absolute function(Fake) *
       _INT3_DefaultInterruptHandler *
   _PIN_MANAGER_IOC
     _IOCBF4_ISR
       Absolute function(Fake) *
       _DIO2_ISR_Lora *
       _IOCBF4_DefaultInterruptHandler *
   _TMR1_ISR
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *
       _TMR_ISR_lora *
         i2_SwTimersInterrupt
           i2_TMR_GetDeltaTime
             i2_TMR1_ReadTimer
         i2_TMR_SwapTimer
           i2_TMR1_ReadTimer
           i2_TMR1_WriteTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     21E      21       26.5%
EEDATA             400      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      E0      14       87.5%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0      A0      12       62.5%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      F5      10       95.7%
BITBANK1           100      0       0       7        0.0%
BANK1              100     79      FF       8       99.6%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0     9D      A0       6      100.0%
BITCOMRAM           53      0       0       0        0.0%
COMRAM              53     2F      53       1      100.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       2       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     467       3        0.0%
DATA                 0      0     687       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri May 05 13:53:51 2023

                                        ??_LORAWAN_TxDone 00B2  
                              __end_of_DIO3_ISR_Lora_Init 625E  
                                      ?_LORAWAN_RxTimeout 0001  
                        __size_of_RADIO_FHSSChangeChannel 002E  
                                          HALSPISend@data 0061  
                                             __CFG_CP$OFF 000000  
                                                      PL2 2B96  
                                                      PL4 0CA2  
                                                      PL6 42FC  
                         __end_of_ValidateChannelMaskCntl 5FB8  
                                                      PL8 0CB2  
                         __size_of_UpdateJoinSuccessState 0092  
                                     ___wmul@multiplicand 0062  
                                            _TMR_ISR_lora 5276  
                                   __end_of_AESEncodeLoRa 5CC8  
                                             ?_RADIO_DIO0 0001  
                                             ?_RADIO_DIO1 0001  
                                             ?_RADIO_DIO2 0001  
                                             ?_RADIO_DIO3 0001  
                                             ?_RADIO_DIO4 0001  
                                             ?_RADIO_DIO5 0001  
                                                     PL10 3F08  
                                                     PL20 0CE6  
                                                     PL12 430C  
                                                     PL30 2A42  
                                                     PL22 2DA6  
                                                     PL14 2138  
                                                     PL40 47B6  
                                                     PL32 22EE  
                                                     PL24 06BE  
                                                     PL16 2146  
                                                     PL50 3C08  
                                                     PL42 06F0  
                                                     PL34 06DE  
                                                     PL26 06CE  
                                                     PL18 3B36  
                                                     PL60 06FA  
                                                     PL52 3A96  
                                                     PL44 2DE4  
                                                     PL36 32C6  
                                                     PL28 2DC8  
                                                     PL70 1AE4  
                                                     PL62 3AA4  
                                                     PL54 0CFA  
                                                     PL46 2FCE  
                                                     PL38 2DD6  
                                             __CFG_LVP$ON 000000  
                                                     PL80 0D30  
                                                     PL72 1AF2  
                                                     PL64 2DF0  
                                                     PL56 48A6  
                                                     PL48 192C  
                                                     PL90 0704  
                                                     PL82 2A6C  
                                                     PL74 2A5A  
                                                     PL66 3C1A  
                                                     PL58 3002  
                                                     PL92 0D5A  
                                                     PL84 0D3A  
                                                     PL76 2EAA  
                                                     PL68 5AF4  
                                                     PL94 47C6  
                                                     PL86 0D4A  
                                                     PL78 5ACC  
                                                     PL96 0726  
                                                     PL88 1B00  
                                                     PL98 073A  
                                     ??_LORAWAN_RxTimeout 00B7  
                                                     l124 5FDC  
                                                     l239 60C2  
                                                     l707 4654  
                                                     l708 469C  
                                             ?_RADIO_Init 0079  
                                                     l736 3DA6  
                                                     l498 1986  
                                                     l983 3192  
                                         ??_UpdateTxPower 0060  
                                                     _GIE 007F97  
                                            __CFG_CPD$OFF 000000  
                    __end_of_SelectChannelForTransmission 4DDA  
                   __size_of_SelectChannelForTransmission 0052  
                            _SelectChannelForTransmission 4D88  
                                  _ExecuteRxParamSetupReq 3022  
                              ??_INT0_SetInterruptHandler 0062  
                                      _DIO2_ISR_Lora_Init 612C  
                                      __size_of_AESEncode 0190  
                                         _timer1ReloadVal 005C  
                              ??_INT3_SetInterruptHandler 0062  
                                         ?_EncKeySchedule 0060  
                                   _RADIO_SetLoRaSyncWord 61A8  
                                                     prod 000FF3  
                                                     tosl 000FFD  
                                                     wreg 000FE8  
                                         __end_of_AESCmac 13D8  
                                 __end_of_SwTimersExecute 47B6  
                                  SystemBlockingWaitMs@ms 0060  
                                 LORAWAN_Join@bufferIndex 00E3  
                                __size_of_RADIO_GetStatus 0006  
                                   ?_SystemBlockingWaitMs 0060  
                                    ??i2_TMR_GetDeltaTime 000B  
                      __end_of_IOCBF4_SetInterruptHandler 6158  
                              _IOCBF4_SetInterruptHandler 614E  
                                ??_SearchAvailableChannel 00A7  
                            __end_of_FindSmallestDataRate 4752  
                     __end_of_RADIO_SetFrequencyHopPeriod 61A8  
                             _RADIO_SetFrequencyHopPeriod 619E  
                                              _CheckFlags 5496  
                                  ?_TMR_OverrideRemaining 0068  
                                                    PL100 1B0E  
                                                    PL110 074E  
                                                    PL102 1D40  
                                                    PL200 34C6  
                                                    PL120 1F3C  
                                                    PL112 48B0  
                                                    PL104 1B22  
                                                    PL210 2CA2  
                                                    PL202 38F2  
                                                    PL130 1D76  
                                                    PL122 113A  
                                                    PL114 4248  
                                                    PL106 2C82  
                                                    PL300 2CC4  
                                                    PL220 0826  
                                                    PL212 16E6  
                                                    PL204 2784  
                                                    PL140 4388  
                                                    PL132 437E  
                                                    PL124 076E  
                                                    PL116 38B8  
                                                    PL108 1D4C  
                                                    PL310 43B4  
                                                    PL302 3B4E  
                                                    PL230 1B4C  
                                                    PL222 0838  
                                                    PL214 3906  
                                                    PL206 13F2  
                                                    PL150 4C9C  
                                                    PL142 07A4  
                                                    PL134 22F8  
                                                    PL126 0780  
                                                    PL118 1D58  
                                                    PL400 1B7C  
                                                    PL320 2BB0  
                                                    PL312 1D92  
                                                    PL304 5B22  
                                                    PL240 4CB6  
                                                    PL232 1B58  
                                                    PL224 24AC  
                                                    PL216 16F2  
                                                    PL208 1D80  
                                                    PL160 28D8  
                                                    PL152 07CA  
                                                    PL144 4046  
                                                    PL136 50C4  
                                                    PL128 0792  
                                                    PL410 60E4  
                                                    PL402 28FC  
                                                    PL330 3306  
                                                    PL322 3B5A  
                                                    PL314 142A  
                                                    PL306 59EC  
                                                    PL250 3C34  
                                                    PL242 32E2  
                                                    PL234 0840  
                                                    PL226 13FC  
                                                    PL218 0814  
                                                    PL170 4AFA  
                                                    PL162 07DA  
                                                    PL154 54D0  
                                                    PL146 13D8  
                                                    PL138 38D6  
                                                    PL420 493A  
                                                    PL412 1710  
                                                    PL404 117C  
                                                    PL340 375C  
                                                    PL332 4114  
                                                    PL324 27B0  
                                                    PL316 0880  
                                                    PL308 4632  
                                                    PL260 4266  
                                                    PL252 084C  
                                                    PL244 3016  
                                                    PL236 3834  
                                                    PL228 367E  
                                                    PL180 0D6A  
                                                    PL172 230A  
                                                    PL164 4F40  
                                                    PL156 1B42  
                                                    PL148 07B0  
                                                    PL430 2320  
                                                    PL422 52BC  
                                                    PL414 1718  
                                                    PL406 2906  
                                                    PL350 1158  
                                                    PL342 1F5C  
                                                    PL334 1F50  
                                                    PL326 3B64  
                                                    PL318 27A6  
                                                    PL270 0868  
                                                    PL262 2BA6  
                                                    PL254 140C  
                                                    PL246 4DDA  
                                                    PL238 1704  
                                                    PL190 4394  
                                                    PL182 3B44  
                                                    PL174 34B0  
                                                    PL166 2ED0  
                                                    PL158 5B78  
                                                    PL440 3B6E  
                                                    PL432 1184  
                                                    PL424 4A24  
                                                    PL416 1F7A  
                                                    PL408 2910  
                                                    PL360 2CD2  
                                                    PL352 1440  
                                                    PL344 28F0  
                                                    PL336 088A  
                                                    PL328 1434  
                                                    PL280 2F00  
                                                    PL272 1B64  
                                                    PL264 4B06  
                                                    PL256 2EF0  
                                                    PL248 4624  
                                                    PL192 500C  
                                                    PL184 07E2  
                                                    PL176 16C6  
                                                    PL168 4D72  
                                                    PL450 08B4  
                                                    PL442 1192  
                                                    PL434 4A2E  
                                                    PL426 08AA  
                                                    PL418 194C  
                                                    PL370 145E  
                                                    PL362 4F56  
                                                    PL354 144A  
                                                    PL346 1F68  
                                                    PL338 114C  
                                                    PL290 1B74  
                                                    PL282 2798  
                                                    PL274 2CB4  
                                                    PL266 5812  
                                                    PL258 0858  
                                                    PL194 4060  
                                                    PL186 07F8  
                                                    PL178 2EE6  
                                                    PL460 39DE  
                                                    PL452 2160  
                                                    PL444 1198  
                                                    PL436 501A  
                                                    PL428 291A  
                                                    PL380 5FDE  
                                                    PL372 1176  
                                                    PL364 116E  
                                                    PL356 2316  
                                                    PL348 2F08  
                                                    PL292 141C  
                                                    PL284 4B10  
                                                    PL276 43AC  
                                                    PL268 1938  
                                                    PL196 43A2  
                                                    PL188 0806  
                                                    PL454 4942  
                                                    PL446 5072  
                                                    PL438 118A  
                                                    PL390 1942  
                                                    PL382 4D1C  
                                                    PL374 1F74  
                                                    PL366 1456  
                                                    PL358 1164  
                                                    PL294 32F8  
                                                    PL286 1414  
                                                    PL278 32EE  
                                                    PL198 16D2  
                                                    PL456 119E  
                                                    PL448 33F2  
                                                    PL392 2156  
                                                    PL384 0896  
                                                    PL376 263C  
                                                    PL368 4932  
                                                    PL296 5672  
                                                    PL288 4106  
                                                    PL458 368A  
                                                    PL394 4F60  
                                                    PL386 5FF6  
                                                    PL378 1468  
                                                    PL298 0872  
                                                    PL396 1472  
                                                    PL388 311E  
                                                    PL398 08A0  
                                           _INT1_CallBack 5EF0  
                                ?_AssembleEncryptionBlock 006A  
                                     ?_DIO2_ISR_Lora_Init 0001  
                                       ??_UpdateFrequency 0064  
                                            __CFG_ZCD$OFF 000000  
                                                    l1002 3FF0  
                                                    l1004 4040  
                                                    l1111 00F6  
                                                    l1007 44F0  
                                                    l1031 2FC8  
                                                    l1016 4500  
                                                    l1123 0200  
                                                    l1140 0396  
                                                    l1221 14C8  
                                                    l1141 0398  
                                                    l1053 33F0  
                                                    l1222 1558  
                                                    l1231 1566  
                                                    l1223 1556  
                                                    l1080 3C04  
                                                    l1161 05AC  
                                                    l1226 1552  
                                                    l1059 4AF6  
                                                    l1085 4B54  
                                                    l1413 1306  
                                                    l3008 4E9C  
                                                    l2304 5A16  
                                                    l1273 20E0  
                                                    l2402 4846  
                                                    l1282 46E0  
                                                    l2172 0EB4  
                                                    l3061 56F2  
                                                    l2165 0E3C  
                                                    l2094 35E6  
                                                    l1702 1814  
                                                    l2191 112A  
                                                    l2159 0E6C  
                                                    l1297 4CD2  
                                                    l2178 1060  
                                                    l1730 534E  
                                                    l1722 5D7A  
                                                    l1661 0994  
                                                    l1398 1210  
                                                    l1670 0B42  
                                                    l1718 607C  
                                                    l2382 5992  
                   RADIO_WriteConfiguration@symbolTimeout 009C  
                                                    l1903 5A5A  
                                                    l2385 587A  
                                                    l1738 2B16  
                                                    l1843 42BC  
                                                    l2660 5452  
                                                    l1772 3F32  
                                                    l2388 588C  
                                                    l1749 26EE  
                                                    l1854 3AFA  
                                                    l1918 504C  
                                                    l1870 4FC2  
                                                    l1862 6068  
                                                    l1766 30CA  
                                                    l1790 2936  
                                                    l1775 3F92  
                                                    l1688 1754  
                                                    l1936 1D3A  
                                                    l2577 5734  
                                                    l1785 3FC4  
                                                    l1883 5E58  
                                                    l1877 592C  
                                                    l1889 5FB4  
                                                    l2998 4A9A  
                                                    l9866 608C  
                                        _RADIO_WritePower 3918  
                            ??_LORAWAN_SetChannelIdStatus 0065  
                                 _PrepareJoinRequestFrame 2DFA  
                                                    _LATA 000F79  
                                                    _LATB 000F7A  
                                                    _LATC 000F7B  
                                                    _LATD 000F7C  
                                                    _LATE 000F7D  
                                                    _LATF 000F7E  
                                                    _LATG 000F7F  
                                                    _LATH 000F80  
                                     _RADIO_Transmit$3745 00B1  
                                            ?_RADIO_Reset 0001  
                              __size_of_RADIO_ReceiveStop 0018  
                                       ??_UpdateDutyCycle 0062  
                                                    _WPUA 000E91  
                                                    _WPUB 000E99  
                                                    _WPUC 000EA1  
                                  ??_LORAWAN_PlatformInit 0062  
                                                    _WPUD 000EA6  
                                                    _WPUE 000EAE  
                                                    _WPUF 000EB3  
                                                    _WPUG 000EBB  
                                                    _WPUH 000EC0  
                                           _INT2_CallBack 5EB6  
                                           __CFG_FCMEN$ON 000000  
                                ??_InitDefault433Channels 006A  
                                ExecuteNewChannel@drRange 009E  
                                      _PrepareSessionKeys 4FC6  
                                                    _loRa 0200  
                                                    _main 3C3C  
                                                    _rand 5362  
                          __end_of_UpdateMinMaxChDataRate 4B88  
                                                    fsr0h 000FEA  
                                                    fsr1h 000FE2  
                                                    indf0 000FEF  
                                                    fsr2h 000FDA  
                                                    fsr0l 000FE9  
                                                    indf2 000FDF  
                                                    fsr1l 000FE1  
                                                    fsr2l 000FD9  
                                 __size_of_RADIO_Transmit 01A0  
                                                    btemp 0048  
                          __size_of_StopAllSoftwareTimers 004E  
                                           ComputeMic@mic 00D6  
                                           ComputeMic@key 0166  
                               __end_of_LORAWAN_RxTimeout 192C  
                               __size_of_ConfigureRadioRx 0026  
                                           _INT3_CallBack 5E98  
                               __size_of_ConfigureRadioTx 0042  
                       __size_of_INT2_SetInterruptHandler 000A  
                           __end_of_StopAllSoftwareTimers 53FE  
                               ?_INT2_SetInterruptHandler 0060  
                                                    prodh 000FF4  
                                                    prodl 000FF3  
                                                    start 008E  
                                __end_of_CountfOptsLength 48A6  
                                   ExecuteLinkAdr@txPower 0072  
                                     __size_of_HALSPISend 000A  
                              ??_TMR1_SetInterruptHandler 0062  
                                           __CFG_CSWEN$ON 000000  
                              EnableChannels1@channelMask 0064  
                                        ??_AssemblePacket 00D6  
                                  ?_HALResetPinMakeOutput 0001  
                                     ?_PrepareSessionKeys 006A  
                                  __size_of_TMR_SwapTimer 0036  
                              __end_of_RADIO_GetPacketSnr 620E  
                                            ___param_bank 000000  
                                              _GetRx1Freq 60A6  
                              __size_of_RADIO_ReleaseData 0006  
                                           __CFG_SCANE$ON 000000  
                                    ??_DIO2_ISR_Lora_Init 0062  
                         __end_of_CreateAllSoftwareTimers 5276  
                  SearchAvailableChannel@transmissionType 00A5  
                         __size_of_HALResetPinOutputValue 0014  
                                   MacExecuteCommands@ptr 00AA  
                                   _RADIO_WriteFSKBitRate 4DEA  
                                __size_of_SystemTimerInit 0004  
                                        __end_of_INT1_ISR 6232  
                                        __end_of_INT2_ISR 622C  
                                        __end_of_INT3_ISR 6226  
                          __size_of_OSCILLATOR_Initialize 0012  
                                  ExecuteLinkAdr@dataRate 0075  
                           __end_of_OSCILLATOR_Initialize 60A6  
                                     __size_of_IOCBF4_ISR 0026  
                      __size_of_LORAWAN_LinkCheckCallback 00BA  
                                                   l12022 58D2  
                                                   l12014 5B8A  
                                                   l12112 5BE8  
                                                   l12200 35E8  
                                                   l12120 54EA  
                                                   l12050 4236  
                                                   l12018 5BA8  
                                                   l13010 3F90  
                                                   l12116 5BF8  
                                                   l12212 3612  
                                                   l12124 5522  
                                                   l12132 3ACE  
                                                   l12070 4A5A  
                                                   l12230 3648  
                                                   l12214 361A  
                                                   l12310 397A  
                                                   l13014 3F96  
                                                   l13022 3FAC  
                                                   l13102 2074  
                                                   l12134 3AD2  
                                                   l12048 421A  
                                                   l12080 4A8C  
                                                   l12072 4A5E  
                                                   l12232 3652  
                                                   l12208 3608  
                                                   l12216 3620  
                                                   l12304 3960  
                                                   l13024 3FB0  
                                                   l13040 4896  
                                                   l13120 20AE  
                                                   l13112 2098  
                                                   l12152 3B34  
                                                   l12144 3B1A  
                                                   l10482 5736  
                                                   l12058 5466  
                                                   l12090 4E68  
                                                   l12242 366E  
                                                   l12314 3986  
                                                   l12306 396C  
                                                   l12162 47FC  
                                                   l13018 3FA0  
                                                   l13034 4860  
                                                   l13042 4898  
                                                   l13130 20CC  
                                                   l12146 3B1E  
                                                   l14002 4D08  
                                         __end_of___abdiv 5224  
                                                   l12068 4A4E  
                                                   l12092 4E6C  
                                                   l12244 3678  
                                                   l12228 3644  
                                                   l12500 3462  
                                                   l12332 39B8  
                                                   l13028 3FC0  
                                                   l13044 48A2  
                                                   l13116 20A0  
                                                   l14004 4D0C  
                                                   l12406 4BD0  
                                                   l10742 4B2A  
                                                   l12318 3992  
                                                   l12166 4820  
                                                   l12182 5B3C  
                                                   l14022 54B4  
                                                   l14014 54A0  
                                                   l13038 488C  
                                                   l13062 1FEC  
                                                   l13054 1F8C  
                                                   l13150 2120  
                                                   l13214 42F8  
                                                   l13206 42DA  
                                                   l14030 24CA  
                                                   l12096 4E8E  
                                                   l12088 4E5C  
                                                   l12192 35CE  
                                                   l10752 4B78  
                                                   l12512 347C  
                                                   l12504 3474  
                                                   l12440 434A  
                                                   l13136 20E6  
                                                   l13080 2030  
                                                   l13072 200A  
                                                   l13152 212C  
                                                   l13224 5A36  
                                                   l13208 42DE  
                                                   l14040 2558  
                                                   l14120 00C4  
                                                   l12362 3E86  
                                                   l10754 4B7C  
                                                   l12338 39C0  
                                                   l12290 393C  
                                                   l13402 1EC8  
                                                   l14018 54AA  
                                                   l12442 4350  
                                                   l13082 2036  
                                                   l13146 20FA  
                                                   l13162 4F98  
                                                   l14050 25C6  
                                                   l14042 256E  
                                                   l14034 2522  
                                                   l11714 52CA  
                                                   l12372 3EEE  
                                                   l11900 197C  
                                                   l12380 56CA  
                                                   l12612 0EF6  
                                                   l13092 2054  
                                                   l13148 211E  
                                                   l13076 201C  
                                                   l13420 57FE  
                                                   l12540 5040  
                                                   l13164 4F9E  
                                                   l14044 2584  
                                                   l14060 2600  
                                                   l14036 2536  
                                                   l14300 03EC  
                                                   l14220 02EA  
                                                   l12374 3EF0  
                                                   l11822 2D2E  
                                                   l11910 1988  
                                                   l12382 56D2  
                                                   l12286 3930  
                                                   l12702 1100  
                                                   l12622 0F1C  
                                                   l12630 0F34  
                                                   l13342 1DDC  
                                                   l13334 1DC4  
                                                   l13318 4DD4  
                                                   l12446 4360  
                                                   l13078 2028  
                                                   l13422 580C  
                                                   l12534 502E  
                                                   l12526 5E54  
                                                   l13182 5928  
                                                   l14070 2632  
                                                   l14046 259A  
                                                   l14038 2542  
                                                   l14222 02F6  
                                                   l14126 00F8  
                                                   l12368 3EB0  
                                                   l11824 2D38  
                                                   l12384 56D6  
                                                   l13408 1F34  
                                                   l13328 1DAE  
                                                   l12800 2292  
                                                   l13096 2066  
                                                   l13504 15D6  
                                                   l12552 506A  
                                                   l13264 5A6E  
                                                   l14048 25B0  
                                                   l14320 0442  
                                                   l14240 0310  
                                                   l14208 02CE  
                                                   l14144 0160  
                                                   l15040 3E1C  
                                                   l15008 1CC8  
                                                   l12570 0E1A  
                                                   l13362 1E2A  
                                                   l13522 1656  
                                                   l13442 14C0  
                                                   l12546 5058  
                                                   l12538 5038  
                                                   l12730 5D6E  
                                                   l14058 25D8  
                                                   l14066 2614  
                                                   l14090 355C  
                                                   l14410 0566  
                                                   l14170 01E6  
                                                   l15050 3E4C  
                                                   l11940 1A26  
                                                   l12900 12B4  
                                                   l12388 56E8  
                                                   l12708 1120  
                                                   l13364 1E38  
                                                   l12468 4A16  
                                                   l13516 1622  
                                                   l12548 5060  
                                                   l12732 5D76  
                                                   l13612 2B68  
                                                   l13196 4298  
                                                   l14076 34E8  
                                                   l14420 05AE  
                                                   l14260 034A  
                                                   l14252 0324  
                                                   l14148 0170  
                                                   l15052 3E50  
                                                   l15036 3E0C  
                                                   l15028 3DEA  
                                                   l11942 1A30  
                                                   l11934 1A02  
                                                   l11926 19C0  
                                                   l12494 343E  
                                                   l12486 3436  
                                                   l12590 0EAA  
                                                   l12566 0DFA  
                                                   l12574 0E40  
                                                   l13374 1E58  
                                                   l12806 22E6  
                                                   l13614 2B76  
                                                   l13702 26CE  
                                                   l14334 0494  
                                                   l14350 04A0  
                                                   l14182 0248  
                                                   l15126 4552  
                                                   l15302 4C1E  
                                                   l11936 1A0C  
                                                   l12904 12C2  
                                                   l12920 12EE  
                                                   l12680 1052  
                                                   l12672 102A  
                                                   l12664 0FF0  
                                                   l12592 0EB0  
                                                   l12568 0E0A  
                                                   l12576 0E52  
                                                   l13368 1E48  
                                                   l12832 4718  
                                                   l12824 46E4  
                                                   l13616 2B7A  
                                                   l13704 26D8  
                                                   l14088 3558  
                                                   l14504 06A2  
                                                   l14256 033C  
                                                   l15072 45D8  
                                                   l15160 5DD0  
                                                   l15312 4C44  
                                                   l11946 1A4A  
                                                   l12914 12D0  
                                                   l12906 12C6  
                                                   l15250 2E36  
                                                   l12674 1036  
                                                   l12586 0E9E  
                                                   l12578 0E6E  
                                                   l12682 1068  
                                                   l13378 1E6E  
                                                   l12770 21AC  
                                                   l12834 471A  
                                                   l12842 4734  
                                                   l12850 474C  
                                                   l13490 158E  
                                                   l13634 5358  
                                                   l13618 2B8C  
                                                   l13722 276C  
                                                   l14370 04D6  
                                                   l14610 1746  
                                                   l15090 460E  
                                                   l15306 4C24  
                                                   l15322 4C54  
                                                   l16202 3CCE  
                                                   l11948 1A54  
                                                   l12764 2190  
                                                   l15148 3272  
                                                   l12836 4724  
                                                   l13468 151C  
                                                   l13724 2776  
                                                   l13716 2732  
                                                   l14460 061E  
                                                   l14444 05F6  
                                                   l14380 04DC  
                                                   l14348 049A  
                                                   l14292 03E0  
                                                   l14188 0250  
                                                   l15092 4614  
                                                   l15076 45E6  
                                                   l15308 4C36  
                                                   l15332 5794  
                                                   l15340 57AC  
                                                   l11966 1AD0  
                                                   l11958 1AC6  
                                                   l11886 1956  
                                                   l15238 2E1C  
                                                   l12694 10D4  
                                                   l12774 21CE  
                                                   l12758 217A  
                                                   l14542 0A68  
                                                   l12846 4744  
                                                   l13486 1578  
                                                   l13718 273C  
                                                   l13726 277A  
                                                   l13654 309A  
                                                   l12862 58B6  
                                                   l14454 0608  
                                                   l14462 0624  
                                                   l14358 04BE  
                                                   l14630 17C0  
                                                   l14702 51EC  
                                                   l15318 4C4E  
                                                   l11984 516E  
                                                   l15408 27C8  
                                                   l12944 139A  
                                                   l12928 130A  
                                                   l12784 220C  
                                                   l12776 21F0  
                                                   l12768 21A0  
                                                   l14552 0AC6  
                                                   l14528 094E  
                                                   l13488 1580  
                                                   l13592 2B02  
                                                   l13584 2ADE  
                                                   l13672 3114  
                                                   l13912 5F1A  
                                                   l14480 065E  
                                                   l14472 064E  
                                                   l14464 062A  
                                                   l14392 051A  
                                                   l14384 04EA  
                                                   l14368 04C4  
                                                   l14288 03BE  
                                                   l14632 17DA  
                                                   l15096 4618  
                                                   l14720 5212  
                                                   l14712 51FE  
                                                   l15336 579A  
                                                   l15352 5558  
                                                   l16080 47AC  
                                                   l11978 513A  
                                                   l12938 136E  
                                                   l12882 1222  
                                                   l12890 1270  
                                                   l12698 10E4  
                                                   l12794 226E  
                                                   l14562 0B3A  
                                                   l14570 0B7C  
                                                   l14546 0AC4  
                                                   l13658 30B2  
                                                   l14458 0618  
                                                   l14394 051C  
                                                   l14650 1818  
                                                   l14626 17B2  
                                                   l14714 5202  
                                                   l13850 44F8  
                                                   l13842 44DE  
                                                   l16066 475A  
                                                   l15540 5418  
                                                   l12876 11FC  
                                                   l12788 2224  
                                                   l13780 3D3A  
                                                   l13772 3D12  
                                                   l13940 2A28  
                                                   l14644 1806  
                                                   l14708 51F8  
                                                   l14724 521A  
                                                   l15348 5552  
                                                   l14812 2F88  
                                                   l16076 47A6  
                                                   l16180 3C98  
                                                   l14742 316A  
                                                   l14750 3186  
                                                   l15470 2840  
                                                   l15390 48F2  
                                                   l14582 0BCE  
                                                   l12990 2C78  
                                                   l12966 2BD8  
                                                   l12958 2BCA  
                                                   l13942 2A32  
                                                   l14662 1888  
                                                   l13846 44E8  
                                                   l14806 2F62  
                                                   l16078 47A8  
                                                   l12896 1296  
                                                   l12888 1252  
                                                   l12984 2C48  
                                                   l12976 2C2C  
                                                   l13776 3D24  
                                                   l14664 188C  
                                                   l14728 5220  
                                                   l13872 3BB6  
                                                   l16184 3CA4  
                                                   l16176 3C92  
                                                   l14922 2400  
                                                   l15538 5414  
                                                   l14594 0C4E  
                                                   l13794 3D54  
                                                   l13786 3D46  
                                                   l14498 0670  
                                                   l14674 190A  
                                                   l14842 3390  
                                                   l14756 31BC  
                                                   l14748 3182  
                                                   l14932 2438  
                                                   l14924 2416  
                                                   l14588 0C38  
                                                   l13980 50B8  
                                                   l14668 18E4  
                                                   l14772 3FF2  
                                                   l14852 33B6  
                                                   l16196 3CC8  
                                                   l12998 3F36  
                                                   l14598 0C7C  
                                                   l13974 50A6  
                                                   l13966 509C  
                                                   l13798 3D60  
                                                   l14790 2F2A  
                                                   l14846 3396  
                                                   l14862 33EC  
                                                   l13878 3BE0  
                                                   l14696 51E2  
                                                   l14872 4ACA  
                                                   l14768 3FE0  
                                                   l14962 4F24  
                                                   l14946 57CE  
                                                   l14796 2F3C  
                                                   l14798 2F48  
                                                   l14986 1C08  
                                                   l14978 1B9A  
                                                   l14988 1C14  
                                                   l14996 1C4E  
                                                   ?_main 0001  
                                                   ?_rand 009C  
                                           __CFG_WDTE$OFF 000000  
                                              _FillSubKey 54E0  
                                         _TMR1_StartTimer 6232  
                                           ?_RADIO_SetCRC 0001  
                                         __end_of___lldiv 4AAC  
                                         RADIO_Transmit@i 00B6  
                                                   _T1CLK 000FD2  
                                                   _T1CON 000FCF  
                                         __end_of___llmod 4EAE  
                                                   u13401 3402  
                                       ??_EnableChannels1 0069  
                                                   u14045 11E0  
                                                   u13270 4958  
                                                   _LATC0 007BD8  
                                                   _LATC1 007BD9  
                                                   u12720 5162  
                                                   u16000 0142  
                                    RxJoinResponse@status 0001  
                                                   u13550 0E66  
                                                   u12727 5158  
                                                   u12760 58E2  
                       __end_of_AckRetransmissionCallback 33F2  
                  SearchAvailableChannel@randomNumberCopy 00AB  
                                                   u14370 1FEA  
                                                   u15154 533E  
                                                   u11970 3758  
                                                   u13555 0E5C  
                                                   u15155 5338  
                                                   u13900 227E  
                                                   u16230 035A  
                                                   u13655 0F4C  
                                                   u17015 177E  
                                                   u16081 0232  
                                                   u13915 228A  
                                                   u14820 1EB2  
                                                   u16420 052C  
                                                   u16260 03DC  
                                                   u15508 44C8  
                                                   u15540 3B9C  
                                                   u13925 22A4  
                                                   u15525 5198  
                                                   u16158 02E2  
                                                   u16280 043C  
                                                   u17305 31B2  
                                                   u17145 18A6  
                                                   u16338 047E  
                                                   u16258 03A8  
                                                   u17315 31CE  
                                                   u14835 1EBE  
                                                   u15555 3BAC  
                                                   u17420 2F6E  
                                                   u14845 1EDA  
                                                   u13885 223E  
                                                   u15565 2FE0  
                                          __CFG_DEBUG$OFF 000000  
                                                   u17520 338A  
                                                   u17290 31A4  
                                                   u17435 2F7E  
                                                   u16740 0A2C  
                                                   u15588 3BF0  
                                                   u16750 0A4A  
                                                   u16558 0638  
                                                   u16760 0A88  
                                                   u16488 05E0  
                                                   u15945 357A  
                                                   u16850 0BA8  
                                                   u16755 0A40  
                                                   u18195 4BFE  
                                                   u15788 4CF2  
                                                   u17900 456A  
                                                   u17628 4AE0  
                                                   u17548 33AE  
                                                   u17740 1C98  
                                                   u16765 0A84  
                                                   u16685 0CBC  
                                                   u16865 0BC4  
                                                   u17905 4566  
                                                   u17930 3258  
                                                   u16875 0BE0  
                                                   u17755 1CC0  
                                                   u17940 3266  
                                                   u17588 33D6  
                                                   u17765 1CE2  
                                                   u17950 3286  
                                                   u17880 4534  
                                                   u17945 3264  
                                                   u17890 4544  
                                                   u17955 3284  
                                                   u19558 4792  
                                                   u17895 4540  
                                                   u19807 52EA  
                                                   u19817 52FC  
                                                   u19770 3CBC  
                                                   u19827 5B92  
                                         __end_of___lwmod 56FC  
                                                   i2l211 003A  
                                                   i2l124 5FF4  
                                                   i2l213 0046  
                                                   i2l221 006C  
                                                   u19797 3CD6  
                                                   i2l215 0052  
                                                   i2l217 0062  
                                           ?_RADIO_RxDone 0001  
                             __size_of_RADIO_ReceiveStart 0186  
                                                   _OSCEN 000E47  
                     __size_of_LORAWAN_SetChannelIdStatus 002E  
                                           ?_RADIO_TxDone 0001  
                                                   _TMR1H 000FCE  
                                                   _TMR1L 000FCD  
                                                   _TRISA 000F81  
                                                   _TRISB 000F82  
                                                   _TRISC 000F83  
                                                   _TRISD 000F84  
                                                   _TRISE 000F85  
                                                   _TRISF 000F86  
                                                   _TRISG 000F87  
                                                   _TRISH 000F88  
                                __size_of_RADIO_RxTimeout 0020  
                                           __CFG_WRT0$OFF 000000  
                                           __CFG_WRT1$OFF 000000  
                           ?_SelectChannelForTransmission 0001  
                                           __CFG_WRT2$OFF 000000  
                                     ___lmul@multiplicand 0094  
                                           __CFG_WRT3$OFF 000000  
                                          _RxJoinResponse 6202  
                                 ?_SetReceptionNotOkState 0001  
                                          __CFG_EBTR0$OFF 000000  
                                          __CFG_EBTR1$OFF 000000  
                                          __CFG_EBTR2$OFF 000000  
                                          __CFG_EBTR3$OFF 000000  
                                    ??_PrepareSessionKeys 0070  
                                        __end_of_TMR1_ISR 5D5C  
                               FindSmallestDataRate@found 0061  
                                           __CFG_WRTB$OFF 000000  
                                           __CFG_WRTC$OFF 000000  
                                           __CFG_WRTD$OFF 000000  
                                          ?_INT1_CallBack 0001  
                                  LORAWAN_RxTimeout@minim 00BB  
                             __size_of_RADIO_SetBandwidth 0008  
                                          __CFG_EBTRB$OFF 000000  
                          __size_of_RADIO_WatchdogTimeout 0036  
                                                   __rcon 0045  
                                 __end_of_PIN_MANAGER_IOC 61FC  
                                                   _flash 52C6  
                            ??_IncludeMacCommandsResponse 0064  
                           __end_of_RADIO_WatchdogTimeout 5890  
      RADIO_WriteFSKFrequencyDeviation@frequencyDeviation 006D  
                          ??_INT1_DefaultInterruptHandler 0001  
                               __size_of_ValidateDataRate 0014  
                                                   _randx 0054  
                          LORAWAN_RxDone@frmPayloadLength 00F6  
                           ValidateChannelMaskCntl@result 0060  
                                      __CFG_MCLRE$EXTMCLR 000000  
                                                   _srand 60FA  
                                        UpdateDataRange@i 0063  
                                LORAWAN_RxDone@joinAccept 00F4  
                                  _UpdateJoinSuccessState 3B76  
                                                   main@x 0177  
                                          ?_INT2_CallBack 0001  
                                _INT1_SetInterruptHandler 616C  
                                              _ComputeMic 5572  
                                 __end_of_TMR1_Initialize 55FC  
                                  UpdateCfList@joinAccept 009C  
                                                   pclath 000FFA  
                                                   tablat 000FF5  
                                                   ltemp0 0048  
                                 RADIO_WriteFrequency@num 0075  
                                                   ltemp1 004C  
                                                   ltemp2 0050  
                          __size_of_UpdateCurrentDataRate 0008  
                          __size_of_UpdateChannelIdStatus 0088  
                              PrepareSessionKeys@appNonce 006C  
                                  UpdateChannelIdStatus@i 0063  
                           __end_of_UpdateCurrentDataRate 61D4  
                            __size_of_RADIO_FSKPacketSent 009E  
                           __end_of_UpdateChannelIdStatus 3B36  
                                                   plusw0 000FEB  
                                                   plusw1 000FE3  
                                                   plusw2 000FDB  
                                                   ttemp0 0048  
                                                   ttemp1 004B  
                                                   ttemp2 004E  
                                                   ttemp3 0051  
                                          ?_INT3_CallBack 0001  
                                UpdateFrequency@channelId 0064  
                                                   status 000FD8  
                                                   wtemp0 0048  
                                                   wtemp1 004A  
                                                   wtemp2 004C  
                                                   wtemp3 004E  
                                                   wtemp4 0050  
                                                   wtemp5 0052  
                                      _MacExecuteCommands 24BE  
                                UpdateCfList@channelIndex 00A5  
                                     __size_of_RADIO_DIO0 0068  
                                     __size_of_RADIO_DIO1 003A  
                                     __size_of_RADIO_DIO2 0048  
                                     __size_of_RADIO_DIO3 0018  
                                     __size_of_RADIO_DIO4 0018  
                                     __size_of_RADIO_DIO5 0018  
                      PrepareJoinRequestFrame@bufferIndex 00E1  
                                            __end_ofPL100 1B22  
                                            __end_ofPL110 076E  
                                            __end_ofPL102 1D4C  
                                            __end_ofPL200 34DA  
                                            __end_ofPL120 1F50  
                                            __end_ofPL112 48D0  
                                            __end_ofPL104 1B42  
                                            __end_ofPL210 2CB4  
                                            __end_ofPL202 3906  
                                            __end_ofPL130 1D80  
                                            __end_ofPL122 114C  
                                            __end_ofPL114 4266  
                                            __end_ofPL106 2CA2  
                                            __end_ofPL300 2CD2  
                                            __end_ofPL220 0838  
                                            __end_ofPL212 16F2  
                                            __end_ofPL204 2798  
                                            __end_ofPL140 4394  
                                            __end_ofPL132 4388  
                                            __end_ofPL124 0780  
                                            __end_ofPL116 38D6  
                                            __end_ofPL108 1D58  
                                            __end_ofPL310 43C2  
                                            __end_ofPL302 3B5A  
                                            __end_ofPL230 1B58  
                                            __end_ofPL222 0840  
                                            __end_ofPL214 3918  
                                            __end_ofPL206 13FC  
                                            __end_ofPL150 4CB6  
                                            __end_ofPL142 07B0  
                                            __end_ofPL134 230A  
                                            __end_ofPL126 0792  
                                            __end_ofPL118 1D76  
                                            __end_ofPL400 1B84  
                                            __end_ofPL320 2BBA  
                                            __end_ofPL312 1D9C  
                                            __end_ofPL304 5B30  
                                            __end_ofPL240 4CC2  
                                            __end_ofPL232 1B64  
                                            __end_ofPL224 24BE  
                                            __end_ofPL216 1704  
                                            __end_ofPL208 1D92  
                                            __end_ofPL160 28F0  
                                            __end_ofPL152 07DA  
                                            __end_ofPL144 4060  
                                            __end_ofPL136 50D2  
                                            __end_ofPL128 07A4  
                                            __end_ofPL410 60EC  
                                            __end_ofPL402 2906  
                                            __end_ofPL330 3312  
                                            __end_ofPL322 3B64  
                                            __end_ofPL314 1434  
                                            __end_ofPL306 59F4  
                                            __end_ofPL250 3C3C  
                                            __end_ofPL242 32EE  
                                            __end_ofPL234 084C  
                                            __end_ofPL226 140C  
                                            __end_ofPL218 0826  
                                            __end_ofPL170 4B06  
                                            __end_ofPL162 07E2  
                                            __end_ofPL154 54E0  
                                            __end_ofPL146 13F2  
                                            __end_ofPL138 38F2  
                                            __end_ofPL420 4942  
                                            __end_ofPL412 1718  
                                            __end_ofPL404 1184  
                                            __end_ofPL340 3768  
                                            __end_ofPL332 4120  
                                            __end_ofPL324 27BA  
                                            __end_ofPL316 088A  
                                            __end_ofPL308 4640  
                                            __end_ofPL260 4276  
                                            __end_ofPL252 0858  
                                            __end_ofPL244 3022  
                                            __end_ofPL236 3840  
                                            __end_ofPL228 368A  
                                            __end_ofPL180 0D72  
                                            __end_ofPL172 2316  
                                            __end_ofPL164 4F56  
                                            __end_ofPL156 1B4C  
                                            __end_ofPL148 07CA  
                                            __end_ofPL430 2326  
                                            __end_ofPL422 52C6  
                                            __end_ofPL414 1720  
                                            __end_ofPL406 2910  
                                            __end_ofPL350 1164  
                                            __end_ofPL342 1F68  
                                            __end_ofPL334 1F5C  
                                            __end_ofPL326 3B6E  
                                            __end_ofPL318 27B0  
                                            __end_ofPL270 0872  
                                            __end_ofPL262 2BB0  
                                            __end_ofPL254 1414  
                                            __end_ofPL246 4DEA  
                                            __end_ofPL238 1710  
                                            __end_ofPL190 43A2  
                                            __end_ofPL182 3B4E  
                                            __end_ofPL174 34C6  
                                            __end_ofPL166 2EE6  
                                            __end_ofPL158 5B88  
                                            __end_ofPL440 3B76  
                                            __end_ofPL432 118A  
                                            __end_ofPL424 4A2E  
                                            __end_ofPL416 1F84  
                                            __end_ofPL408 291A  
                                            __end_ofPL360 2CDC  
                                            __end_ofPL352 144A  
                                            __end_ofPL344 28FC  
                                            __end_ofPL336 0896  
                                            __end_ofPL328 1440  
                                            __end_ofPL280 2F08  
                                            __end_ofPL272 1B74  
                                            __end_ofPL264 4B10  
                                            __end_ofPL256 2F00  
                                            __end_ofPL248 4632  
                                            __end_ofPL192 501A  
                                            __end_ofPL184 07F8  
                                            __end_ofPL176 16D2  
                                            __end_ofPL168 4D88  
                                            __end_ofPL450 08BC  
                                            __end_ofPL442 1198  
                                            __end_ofPL434 4A36  
                                            __end_ofPL426 08B4  
                                            __end_ofPL418 1954  
                                            __end_ofPL370 1468  
                                            __end_ofPL362 4F60  
                                            __end_ofPL354 1456  
                                            __end_ofPL346 1F74  
                                            __end_ofPL338 1158  
                                            __end_ofPL290 1B7C  
                                            __end_ofPL282 27A6  
                                            __end_ofPL274 2CC4  
                                            __end_ofPL266 5822  
                                            __end_ofPL258 0868  
                                            __end_ofPL194 4074  
                                            __end_ofPL186 0806  
                                            __end_ofPL178 2EF0  
                                            __end_ofPL460 39E4  
                                            __end_ofPL452 2168  
                                            __end_ofPL444 119E  
                                            __end_ofPL436 5022  
                                            __end_ofPL428 2924  
                                            __end_ofPL380 5FE8  
                                            __end_ofPL372 117C  
                                            __end_ofPL364 1176  
                                            __end_ofPL356 2320  
                                            __end_ofPL348 2F14  
                                            __end_ofPL292 142A  
                                            __end_ofPL284 4B1E  
                                            __end_ofPL276 43B4  
                                            __end_ofPL268 1942  
                                            __end_ofPL196 43AC  
                                            __end_ofPL188 0814  
                                            __end_ofPL454 4948  
                                            __end_ofPL446 507A  
                                            __end_ofPL438 1192  
                                            __end_ofPL390 194C  
                                            __end_ofPL382 4D26  
                                            __end_ofPL374 1F7A  
                                            __end_ofPL366 145E  
                                            __end_ofPL358 116E  
                                            __end_ofPL294 3306  
                                            __end_ofPL286 141C  
                                            __end_ofPL278 32F8  
                                            __end_ofPL198 16E6  
                                            __end_ofPL456 11A4  
                                            __end_ofPL448 33F8  
                                            __end_ofPL392 2160  
                                            __end_ofPL384 08A0  
                                            __end_ofPL376 2646  
                                            __end_ofPL368 493A  
                                            __end_ofPL296 5680  
                                            __end_ofPL288 4114  
                                            __end_ofPL458 3690  
                                            __end_ofPL394 4F6A  
                                            __end_ofPL386 6000  
                                            __end_ofPL378 1472  
                                            __end_ofPL298 0880  
                                            __end_ofPL396 147C  
                                            __end_ofPL388 3128  
                                            __end_ofPL398 08AA  
                                         _TMR1_WriteTimer 5FD0  
                       TMR_OverrideRemaining@oldReloadVal 0070  
                                     LORAWAN_RxDone@fPort 00E5  
                                __size_of_RADIO_WriteMode 00C8  
                                       __end_of_AESEncode 1AE4  
                                     __size_of_RADIO_Init 0186  
                        __end_of_RADIO_WriteConfiguration 113A  
                            __size_of_RADIO_SetIQInverted 000A  
                               __size_ofi2_TMR1_ReadTimer 0020  
                               RADIO_WriteMode@dioMapping 0068  
                                         __initialization 43C2  
                            __size_ofi2_SwTimersInterrupt 00AC  
                                        LORAWAN_Send@port 016B  
                             __size_of_DIO1_ISR_Lora_Init 000C  
                                     ?_MacExecuteCommands 00A4  
                                       _SPI2_Exchange8bit 60B8  
                                            __end_of_main 3CF6  
                              AssembleEncryptionBlock@dir 0071  
                                            __end_of_rand 53B0  
                                       ?_TMR_GetDeltaTime 0066  
                                           AESCmac@padded 0130  
                                __end_of_RADIO_ReadRandom 4932  
                                        _SetJoinFailState 5BB4  
                                 RADIO_WriteMode@blocking 0066  
                                    _UpdateJoinInProgress 5F26  
                                    _ExecuteRxTimingSetup 5D14  
                               __size_of_UpdateDLSettings 001A  
                                      ?_SPI2_Exchange8bit 0001  
                               __size_of_ValidateRxOffset 0014  
                             ?_INTERRUPT_InterruptManager 0001  
                                      ??_TMR_GetDeltaTime 006A  
                                           AESCmac@output 00CA  
                            __end_of_RADIO_SetOutputPower 61DC  
                                               ??_AESCmac 00CF  
                                          ??_RADIO_SetCRC 0060  
                                  MacExecuteCommands@done 00A9  
                                 InitDefault868Channels@i 006A  
                                                  ??_main 0174  
                                                  ??_rand 009E  
                                          ??_RADIO_RxDone 00F9  
                                          ??_RADIO_TxDone 00D4  
                                           __activetblptr 000002  
                                  ?_RADIO_SetLoRaSyncWord 0001  
                                  __end_of_RxJoinResponse 6208  
                       __end_of_LORAWAN_LinkCheckCallback 2FCE  
                          __end_of_SetReceptionNotOkState 4D1C  
                             __end_of_UpdateReceiveDelays 58C6  
                         __end_of_AssembleEncryptionBlock 437E  
                                __size_of_SPI2_Initialize 000C  
                                  ??_SystemBlockingWaitMs 0064  
                                        ??_StartReTxTimer 0090  
                                     ??_SPI2_Exchange8bit 0060  
                        CountfOptsLength@macCommandLength 0066  
                                      EncodeShiftRow@temp 0062  
                                ??_InitDefault868Channels 006A  
                             __size_of_RADIO_RegisterRead 0026  
                                       ?_HALSPICSDeassert 0001  
                                        ?_SwTimersExecute 0001  
                                           _TMR_SwapTimer 58C6  
                                              _RxDataDone 6260  
                                          _EnableChannels 602C  
                               ??_PrepareJoinRequestFrame 00DA  
                                          _HALSPICSAssert 6242  
                                    ??_MacExecuteCommands 00A7  
                                             ?_CheckFlags 0060  
                                 LORAWAN_TxDone@timeOnAir 00B0  
                                              _ExtractMic 5680  
                                                  ?_flash 0001  
                         __size_of_SearchAvailableChannel 00B0  
                                      ??_HALSPICSDeassert 0060  
                                  _HALResetPinOutputValue 6080  
                                        ___llmod@dividend 0060  
                                                  ?_srand 0071  
                  __end_of_LORAWAN_ReceiveWindow1Callback 4046  
                 __size_of_LORAWAN_ReceiveWindow1Callback 007E  
                          _LORAWAN_ReceiveWindow1Callback 3FC8  
                                                  _ANSELA 000E92  
                                                  _ANSELB 000E9A  
                                                  _ANSELD 000EA7  
                                                  _ANSELE 000EAF  
                                                  _ANSELF 000EB4  
                                                  _ANSELG 000EBC  
                                         _ValidateTxPower 5D5C  
                                _RADIO_FSKPacketSent$3766 00D8  
                                                  _T1GATE 000FD1  
                                                  _T1GCON 000FD0  
                                 SwTimerReadValue@timerId 008F  
                                 TMR1_WriteTimer@timerVal 0060  
                                          _ExecuteLinkAdr 2A7A  
                                                  _ODCONA 000E90  
                                                  _ODCONB 000E98  
                                                  _ODCONC 000EA0  
                                                  _ODCOND 000EA5  
                                                  _ODCONE 000EAD  
                                                  _ODCONF 000EB2  
                                                  _ODCONG 000EBA  
                                                  _ODCONH 000EBF  
                                                  _RD5PPS 000E6F  
                                                  _RD6PPS 000E70  
                                          __CFG_WDTCCS$SC 000000  
                  __end_of_LORAWAN_ReceiveWindow2Callback 4504  
                 __size_of_LORAWAN_ReceiveWindow2Callback 00A0  
                          _LORAWAN_ReceiveWindow2Callback 4464  
                                                  i2l2648 52BA  
                           __size_of_RADIO_SetFSKSyncWord 002C  
                                                  i2l9886 388C  
                                                  i2l9888 38A6  
                                                  _OSCFRQ 000E49  
                                       ??_RADIO_GetStatus 0060  
                        __size_of_ValidateChannelMaskCntl 0018  
                         __size_of_InitDefault433Channels 0034  
                                                  _TRISC0 007C18  
                                           ?_LORAWAN_Init 00A8  
                                           ?_LORAWAN_Join 0001  
                        AssembleEncryptionBlock@firstByte 006F  
                                           ?_LORAWAN_Send 016B  
                         __size_of_AutomaticReplyCallback 0016  
                              __size_of_LORAWAN_RxTimeout 020C  
                                       ?_ExecuteDevStatus 0060  
                              __end_of_DIO0_ISR_Lora_Init 6202  
                                __size_ofi2_TMR_SwapTimer 0034  
                                       ExecuteLinkAdr@ptr 006D  
                           __size_of_RADIO_WriteFrequency 00CC  
                                                  _STable 7E6D  
                             RADIO_WriteFrequency@num_mod 0071  
                                     LORAWAN_TxDone@delta 00C3  
                                          __CFG_PWRTE$OFF 000000  
                             __size_of_ComputeSessionKeys 0042  
                                               AESCmac@k1 0110  
                                               AESCmac@k2 0100  
                               __end_of_SPI2_Exchange8bit 60CA  
                                     LORAWAN_TxDone@found 00C2  
                                         _CheckMcastFlags 507A  
                                     LORAWAN_TxDone@minim 00CF  
                                      ??_ExecuteDevStatus 0062  
                                                  _Random 5D7E  
                                          __CFG_XINST$OFF 000000  
                                     LORAWAN_TxDone@ticks 00CB  
                      SearchAvailableChannel@randomNumber 00AE  
                    __end_of_TMR1_DefaultInterruptHandler 6264  
                   __size_of_TMR1_DefaultInterruptHandler 0002  
                            _TMR1_DefaultInterruptHandler 6262  
                                             ?_GetRx1Freq 0060  
                           ValidateDataRange@dataRangeNew 0063  
                                 _RADIO_FHSSChangeChannel 59F4  
                                               ??___abdiv 0061  
                                                  ___lmul 544A  
                                  ?_RADIO_WriteFSKBitRate 006D  
                                 __end_of_TMR1_StartTimer 6236  
                                   ?_UpdateJoinInProgress 0001  
                                                  ___wmul 5C30  
                             ?_LORAWAN_LinkCheckConfigure 009C  
                                   ?_ExecuteRxTimingSetup 0067  
                                          __CFG_STVREN$ON 000000  
                                    _FindSmallestDataRate 46CC  
                                               ??___lldiv 0068  
                                               ??___llmod 0068  
                                               ??___lwmod 00A2  
                      RADIO_SetChannelFrequency@frequency 0060  
                                         StartReTxTimer@i 0098  
                               ExecuteRxParamSetupReq@ptr 009C  
                                  __size_of_LORAWAN_Reset 011E  
                                                  _memcpy 5128  
                                                  _memset 5BDE  
                                                  clear_0 440A  
                                                  clear_1 441C  
                                                  clear_2 4428  
                                                  clear_3 4434  
                                                  clear_4 4440  
                                                  clear_5 4454  
                                 SwTimerIsRunning@timerId 0060  
                                                  flash@x 0061  
                             __size_of_DIO5_ISR_Lora_Init 000C  
                                             ?_FillSubKey 0060  
                                       ?_SwTimerIsRunning 0001  
                                       ?_ExecuteLinkCheck 0060  
                                         ?_RxJoinResponse 0001  
                                 __size_of_EncodeShiftRow 00B2  
                                  __end_of_EnableChannels 6042  
                              ??_RADIO_UnhandledInterrupt 0064  
                                            ??_HALSPISend 0061  
                    __end_of_INT2_DefaultInterruptHandler 626A  
                   __size_of_INT2_DefaultInterruptHandler 0002  
                            _INT2_DefaultInterruptHandler 6268  
                                            __pdataCOMRAM 0054  
                                  __end_of_HALSPICSAssert 6246  
                       __size_of_RADIO_SetSpreadingFactor 0008  
                            __size_of_ValidateChannelMask 002E  
                                           ??_SwTimerStop 0060  
                                         ??_INT1_CallBack 0001  
                                       ??_SystemTimerInit 0060  
                               ?_RADIO_SetSpreadingFactor 0001  
                                       ?_SwTimerReadValue 0087  
                                      ??_SwTimerIsRunning 0060  
                                          ?_TMR_SwapTimer 0066  
                                       ?_ExecuteDutyCycle 0060  
                                      ??_ExecuteLinkCheck 0062  
                                            __mediumconst 7E6C  
                                                  tblptrh 000FF7  
                                                  tblptrl 000FF6  
                                                  tblptru 000FF8  
                                                  srand@x 0071  
                                         ??_INT2_CallBack 0001  
                                      ??_SwTimerReadValue 008B  
                                         _UpdateDataRange 4276  
                                  __end_of_ExecuteLinkAdr 2B96  
                                      ??_ExecuteDutyCycle 0062  
              IOCBF4_SetInterruptHandler@InterruptHandler 0060  
                TMR1_SetInterruptHandler@InterruptHandler 0060  
                INT3_SetInterruptHandler@InterruptHandler 0060  
                INT0_SetInterruptHandler@InterruptHandler 0060  
                INT2_SetInterruptHandler@InterruptHandler 0060  
                INT1_SetInterruptHandler@InterruptHandler 0060  
                      __end_of_LORAWAN_SetChannelIdStatus 5A50  
                              _LORAWAN_SetChannelIdStatus 5A22  
                                        ?_PIN_MANAGER_IOC 0001  
                                           AESEncode@aux1 0089  
                                           AESEncode@aux2 0088  
                                           AESEncode@aux3 008A  
                                 __end_of_TMR1_WriteTimer 5FDE  
                                   __end_of_SwTimerCreate 573A  
                                            ??_IOCBF4_ISR 0001  
                          ??_SelectChannelForTransmission 00B0  
                                             ?_ComputeMic 0166  
                           __size_of_INTERRUPT_Initialize 0004  
                                         ??_INT3_CallBack 0001  
                                   __end_of_TMR1_CallBack 5E98  
                               ExecuteDutyCycle@maxDCycle 0065  
                                       ??_RADIO_RxTimeout 00C0  
                                        ?_TMR1_Initialize 0001  
                             UpdateFrequency@frequencyNew 0060  
                                       _SYSTEM_Initialize 5ED4  
                        __size_of_CreateAllSoftwareTimers 0052  
                                 __size_of_GenerateSubkey 00B8  
                                          ??_LORAWAN_Init 00AC  
                                          ??_LORAWAN_Join 00E3  
                                          ??_LORAWAN_Send 00DD  
                          __size_of_RADIO_FSKPayloadReady 0082  
                                              __accesstop 0060  
                                 __end_of__initialization 445A  
                           __end_of_RADIO_FSKPayloadReady 4624  
                                          _RADIO_Transmit 1D9C  
                                               ?_INT1_ISR 0001  
                                               ?_INT2_ISR 0001  
                                               ?_INT3_ISR 0001  
                                    LORAWAN_RxDone@buffer 016F  
                                  RADIO_ReadRandom@retVal 006E  
                                        _ConfigureRadioRx 5C7C  
                                    __size_of_RADIO_Reset 002E  
                                        _ConfigureRadioTx 55FC  
                                     ExecuteDevStatus@ptr 0060  
                        ??_UpdateReceiveWindow2Parameters 0065  
                         ?_UpdateReceiveWindow2Parameters 0060  
                                      ?_SYSTEM_Initialize 0001  
                                    LORAWAN_RxDone@packet 00EE  
                                          _maxPayloadSize 7F7D  
                           RADIO_SetLoRaSyncWord@syncWord 0060  
                                           ___rparam_used 000001  
                              ValidateChannelId@channelId 0062  
                               ExecuteLinkAdr@channelMask 0070  
                                      __end_of_HALSPISend 61BC  
                                          __pcstackCOMRAM 0001  
                                              ___inthi_sp 0754  
                                  _SearchAvailableChannel 3F18  
                                 ValidateChannelId@result 0061  
                                   ?_FindSmallestDataRate 0001  
                                            __pidataBANK1 5996  
                                     ??_SYSTEM_Initialize 0064  
                              __end_of_DIO4_ISR_Lora_Init 625C  
                                               ?_TMR1_ISR 0001  
                                     __size_of_CheckFlags 003A  
                           ?_TMR1_DefaultInterruptHandler 0001  
                                _RADIO_WriteConfiguration 0D72  
                                           __end_of_flash 5314  
                                       ??_RADIO_WriteMode 0067  
                                         _spreadingFactor 7F94  
                               __size_of_LORAWAN_Mainloop 003C  
                                        ??_EncKeySchedule 0061  
                                __end_of_RADIO_WritePower 39DE  
                                 ?_ExecuteRxParamSetupReq 009C  
                                           __end_of_srand 6108  
                                              __end_ofPL2 2BA6  
                                              __end_ofPL4 0CB2  
                                              __end_ofPL6 430C  
                                              __end_ofPL8 0CE6  
                                       LORAWAN_RxDone@hdr 00F7  
                                            ??_RADIO_DIO0 00FB  
                                            ??_RADIO_DIO1 00C0  
                                            ??_RADIO_DIO2 0079  
                                            ??_RADIO_DIO3 0065  
                                            ??_RADIO_DIO4 0065  
                                            ??_RADIO_DIO5 0065  
                                  _InitDefault433Channels 4F0C  
                                         _UpdateFrequency 5C56  
                                  _AutomaticReplyCallback 6000  
                                      __end_of_IOCBF4_ISR 5D14  
                                ??_INTERRUPT_GetDioStatus 0060  
                                            ??_RADIO_Init 007F  
                               SwTimerSetCallback@timerId 0063  
                              LORAWAN_RxDone@channelIndex 00E6  
                          AssembleEncryptionBlock@blockId 006E  
                             __size_of_EXT_INT_Initialize 0056  
                                         _UpdateDutyCycle 5AD8  
                                         ?_EnableChannels 006A  
                                 ??_TMR_OverrideRemaining 006C  
                                 __end_of_ValidateTxPower 5D7E  
                                         ?_HALSPICSAssert 0001  
                                      _DIO3_ISR_Lora_Init 625C  
                            __end_of_HALResetPinMakeInput 624E  
                                 __size_of_TMR1_ReadTimer 0020  
                        __end_of_INT2_SetInterruptHandler 616C  
                                        RADIO_DIO0@opMode 0173  
                             RADIO_RegisterRead@readValue 0063  
                                             ?_RxDataDone 0060  
                      __end_of_IncludeMacCommandsResponse 2138  
                              _IncludeMacCommandsResponse 1F84  
                           ?_INT2_DefaultInterruptHandler 0001  
                         __size_of_InitDefault868Channels 003A  
                                UpdateCfList@bufferLength 00A0  
                             ?_IOCBF4_SetInterruptHandler 0060  
                                   LORAWAN_Send@confirmed 00DF  
                                             ?_ExtractMic 006A  
                                                 ??_flash 0060  
                                         ?_ExecuteLinkAdr 006D  
                                        _ValidateDataRate 606C  
                         LORAWAN_GetMaxPayloadSize@result 006A  
                                     __size_of_GetRx1Freq 0012  
                               __end_of_SYSTEM_Initialize 5EF0  
                      __size_of_RADIO_SetChannelFrequency 0082  
                                                 ??_srand 0073  
                                  __end_of_RADIO_Transmit 1F3C  
                                       ??_SPI2_Initialize 0060  
                                     ?_DIO3_ISR_Lora_Init 0001  
                                           _LORAWAN_Reset 27BA  
                              ?_RADIO_SetChannelFrequency 0060  
                                              __pbssBANK0 00FD  
                                              __pbssBANK1 0179  
                                              __pbssBANK2 0200  
                                              __pbssBANK3 0300  
                                              __pbssBANK4 0400  
                                     __end_of_SwTimerStop 60DC  
                              ?_SetCallbackSoftwareTimers 0001  
                                 __end_of_CheckMcastFlags 50C4  
                                  __end_of_maxPayloadSize 7F85  
                                              ??_INT1_ISR 0001  
                                              ??_INT2_ISR 0001  
                                              ??_INT3_ISR 0001  
                                      SwTimersInterrupt@i 0086  
                                    _RADIO_SetOutputPower 61D4  
                                              __pnvCOMRAM 005C  
                                    __end_of_RADIO_SetCRC 619E  
                                 ??_HALResetPinMakeOutput 0060  
                                    __end_of_RADIO_RxDone 3E64  
                              __end_of_RADIO_RxFSKTimeout 5996  
                                    __end_of_RADIO_TxDone 45A2  
                                     __size_of_FillSubKey 004A  
                                      __end_of_RADIO_DIO0 4C5A  
                                      __end_of_RADIO_DIO1 57B0  
                                      __end_of_RADIO_DIO2 5572  
                                      __end_of_RADIO_DIO3 5FA0  
                                      __end_of_RADIO_DIO4 5F88  
                                      __end_of_RADIO_DIO5 5F70  
                               ??_RADIO_FHSSChangeChannel 0079  
                             __size_of_SwTimerSetCallback 001C  
                               RADIO_SetOutputPower@power 0060  
                              __size_of_SPI2_Exchange8bit 0012  
                                      __end_of_RADIO_Init 24AC  
                       __size_of_LORAWAN_SetDeviceAddress 0018  
                         ?_LORAWAN_EnterContinuousReceive 0001  
                        ??_LORAWAN_EnterContinuousReceive 00B0  
                                                 ?_Random 00A3  
                                       ?_CountfOptsLength 0001  
                                  __size_of_DIO1_ISR_Lora 0004  
                               ?_LORAWAN_SetDeviceAddress 0060  
                                        i2_TMR1_ReadTimer 5E00  
                                          FillSubKey@size 0064  
                                         _EnableChannels1 5022  
                                __size_of_HALDIO5PinValue 0006  
                            __size_of_RADIO_RegisterWrite 001E  
                                  ??_UpdateJoinInProgress 0060  
                        __size_of_AssembleEncryptionBlock 0060  
                                  ??_ExecuteRxTimingSetup 0069  
                                        FillSubKey@source 0060  
            SelectChannelForTransmission@transmissionType 00B0  
                                                 ?___lmul 0090  
                  AssembleEncryptionBlock@multicastStatus 0070  
                          __end_of_ExecuteRxParamSetupReq 311E  
                                      ??_CountfOptsLength 0060  
                                                 ?___wmul 0060  
                                  __size_of_DIO2_ISR_Lora 0004  
                                        ?_TMR1_StartTimer 0001  
                                      EncryptFRMPayload@i 00B4  
                                      EncryptFRMPayload@j 00B5  
                                      EncryptFRMPayload@k 00B3  
                                              ??_TMR1_ISR 0028  
                                         __CFG_PPS1WAY$ON 000000  
                                       ??i2_TMR_SwapTimer 0009  
                                    ??_DIO3_ISR_Lora_Init 0060  
                                        _UpdateDLSettings 5F0C  
                                        _ValidateRxOffset 6058  
                                                 ?_memcpy 0060  
                                                 ?_memset 0060  
                                          ___lmul@product 0098  
                                       _TMR_ISR_Lora_Init 6114  
                        ??_IOCBF4_DefaultInterruptHandler 0001  
                         ?_IOCBF4_DefaultInterruptHandler 0001  
                                          _SSP2DATPPSbits 000E1D  
                                  RADIO_RegisterWrite@reg 0063  
                                     __size_of_ComputeMic 0046  
                                  RADIO_Transmit@regValue 00B5  
                            __size_of_RADIO_SetModulation 0008  
                                     _RADIO_FSKPacketSent 3228  
                                                 _AESCmac 11A4  
                                  ComputeMic@bufferLength 016A  
                                 __end_of_UpdateDataRange 42FC  
                                         ??_TMR_SwapTimer 0068  
                                RADIO_WriteFSKBitRate@num 0071  
                                      ?_TMR_ISR_Lora_Init 0001  
                              ??_INT1_SetInterruptHandler 0062  
                                                 i2l10544 564A  
                                                 i2l10562 4140  
                                                 i2l10572 41B2  
                                                 i2l10574 41B4  
                                                 i2l10568 416E  
                                                 i2l16062 5D0E  
                                    EncryptFRMPayload@dir 00A3  
                                      _RADIO_GetPacketSnr 6208  
                                    EncryptFRMPayload@key 00A8  
                                   __end_of_UpdateTxPower 61CC  
                                     _RADIO_SetIQInverted 618A  
                                  __size_of_DIO5_ISR_Lora 0004  
                                                 _OSCCON1 000E43  
                                                 _OSCCON3 000E45  
                                 __size_of_ConfigureRadio 0064  
                                                 _OSCTUNE 000E48  
                             __size_ofi2_TMR_GetDeltaTime 0078  
                                     i2_SwTimersInterrupt 4120  
                                                 _SSP2ADD 000ED6  
                                                 _PPSLOCK 000DEF  
                                                 _SSP2BUF 000ED5  
                                     ??_TMR_ISR_Lora_Init 0062  
                                       __end_of_bandwidth 7F94  
                  UpdateReceiveWindow2Parameters@dataRate 0064  
                                __end_of_SetJoinFailState 5BDE  
                                          ?_LORAWAN_Reset 0001  
                            RADIO_WriteMode@newModulation 0065  
                                  ValidateDataRate@result 0061  
                                        ?_TMR1_WriteTimer 0060  
                                     ?_RADIO_GetPacketSnr 0001  
                                         ___abdiv@divisor 0060  
                                         ?_RADIO_Transmit 00A6  
                                 _ValidateChannelMaskCntl 5FA0  
                                         ___abdiv@counter 0061  
                                     StartReTxTimer@minim 0094  
                              AssemblePacket@bufferLength 0169  
                            PrepareSessionKeys@sessionKey 006A  
                                    ?_RADIO_FSKPacketSent 0001  
                                   TMR_SwapTimer@timerVal 0066  
                       __end_of_RADIO_SetChannelFrequency 4858  
                             PrepareJoinRequestFrame@iCtr 00E2  
                       __end_of_SetCallbackSoftwareTimers 4106  
                                   ?_RADIO_SetOutputPower 0001  
                               _AckRetransmissionCallback 3312  
                             PrepareJoinRequestFrame@mhdr 00E0  
                                  __size_of_AESEncodeLoRa 0026  
                       __size_of_INT0_SetInterruptHandler 0002  
                           __size_of_LORAWAN_PlatformInit 0020  
                       __size_of_INT3_SetInterruptHandler 000A  
                               ?_INT0_SetInterruptHandler 0060  
                               ?_INT3_SetInterruptHandler 0060  
                                          _ticksAccounted 0034  
                                           ?_SwTimerStart 0001  
                                              AESCmac@key 00C8  
                                              AESCmac@ptr 0160  
                                 __end_of_spreadingFactor 7F9B  
                           UpdateCurrentDataRate@valueNew 0060  
                                                 __Hparam 0000  
                                    ?_RADIO_SetIQInverted 0001  
                              PrepareJoinRequestFrame@mic 00DC  
                                  _InitDefault868Channels 57B0  
                                RADIO_RegisterWrite@value 0062  
                                                 __Lparam 0000  
                                  ??_FindSmallestDataRate 0060  
                                LORAWAN_Send@bufferLength 016E  
                                   _StopAllSoftwareTimers 53B0  
                                         __size_of_Random 0022  
                              __CFG_RSTOSC$HFINTOSC_64MHZ 000000  
                                    ?i2_SwTimersInterrupt 0017  
                                 __end_of_UpdateFrequency 5C7C  
                                     AssemblePacket@fCtrl 00DA  
                                                 ___abdiv 51D2  
                                     __size_of_RxDataDone 0002  
                                              AESEncode@i 008B  
                                               _AESEncode 1954  
                                  ValidateRxOffset@result 0061  
                               __end_of_TMR_ISR_Lora_Init 6120  
                                         __size_of___lmul 004C  
                             __size_of_DIO2_ISR_Lora_Init 000C  
                                 __end_of_UpdateDutyCycle 5AF4  
                                                 ___lldiv 4A36  
                                     __size_of_ExtractMic 003E  
                                         __size_of___wmul 0026  
                                    ??_RADIO_GetPacketSnr 0060  
                                                 ___llmod 4E4C  
                                       ?_RADIO_ReadRandom 006C  
                                                 ___lwmod 56BE  
                               SwTimerIsRunning@isRunning 0061  
                                 ??_RADIO_SetLoRaSyncWord 0060  
                                    ValidateChannelMask@i 0062  
                                                 __pcinit 43C2  
                      __size_of_LORAWAN_GetMaxPayloadSize 0028  
                                                 _appSKey 01D7  
                                         __size_of_memcpy 0056  
                              __end_of_RADIO_ReceiveStart 22EE  
                                   RADIO_Init@radioBuffer 0079  
                                         __size_of_memset 002A  
                                                 __ramtop 0800  
                        EncryptFRMPayload@multicastStatus 00AD  
                                      ??_RADIO_ReadRandom 006E  
                              ?_LORAWAN_GetMaxPayloadSize 0001  
           RADIO_SetFrequencyHopPeriod@frequencyHopPeriod 0060  
                                                 __ptext0 3C3C  
                                                 __ptext1 5E20  
                                                 __ptext2 52C6  
                                                 __ptext3 5ED4  
                                                 __ptext4 55B8  
                                                 __ptext5 6232  
                                                 __ptext6 6108  
                                                 __ptext7 3690  
                                                 __ptext8 6094  
                                                 __ptext9 5DA0  
                                    __end_of_LORAWAN_Init 544A  
                                    __end_of_LORAWAN_Join 46CC  
                                    __end_of_LORAWAN_Send 3DAE  
                                           _DIO0_ISR_Lora 000000  
                          ??_TMR1_DefaultInterruptHandler 0001  
                         RADIO_SetFSKSyncWord@syncWordLen 006C  
                                          _EncodeShiftRow 39E4  
                              ExecuteNewChannel@frequency 009F  
                         __size_of_INTERRUPT_GetDioStatus 000E  
                                               _T1CONbits 000FCF  
                      SelectChannelForTransmission@result 00B1  
                                 __size_of_LORAWAN_RxDone 0628  
                                   _OSCILLATOR_Initialize 6094  
                          __end_of_UpdateJoinSuccessState 3C08  
                                 __size_of_LORAWAN_TxDone 03E6  
                              __end_of_RADIO_SetBandwidth 61F4  
                                         _RADIO_GetStatus 620E  
                                        ?_ValidateTxPower 0001  
                                 ?_HALResetPinOutputValue 0001  
                            __end_of_macEndDevCmdReplyLen 7FA2  
                       __size_of_TMR1_SetInterruptHandler 000A  
                                           _DIO1_ISR_Lora 6256  
                                             _SwTimerStop 60CA  
                                                 _payload 01C5  
                                ??_PIN_MANAGER_Initialize 0062  
                               ?_TMR1_SetInterruptHandler 0060  
                                                 _nwkSKey 01E7  
                                               _IOCBFbits 000E93  
                             IncludeMacCommandsResponse@i 006A  
                                           ?_UpdateCfList 009C  
                                       _ExecuteNewChannel 2646  
                                               _IOCBNbits 000E94  
                                               _IOCBPbits 000E95  
                             __size_of_PrepareSessionKeys 0046  
                                            ??_CheckFlags 0062  
                           RADIO_SetModulation@modulation 0060  
                                 UpdateDLSettings@dlRx2Dr 0061  
                               __size_of_TMR_GetDeltaTime 007C  
                                           _DIO2_ISR_Lora 624E  
                              __size_of_SYSTEM_Initialize 001C  
                    __end_of_LORAWAN_SetNetworkSessionKey 5C30  
                   __size_of_LORAWAN_SetNetworkSessionKey 0028  
                            _LORAWAN_SetNetworkSessionKey 5C08  
                                      ?_ExecuteNewChannel 009C  
                                              _sendPacket 5E20  
                              RADIO_WriteMode@currentMode 0069  
                                        ComputeMic@buffer 0168  
                                    end_of_initialization 445A  
                                 _CreateAllSoftwareTimers 5224  
                                     SwTimerCreate@retVal 0060  
                                _INT2_SetInterruptHandler 6162  
                                   ??_RADIO_FSKPacketSent 00D4  
                                          _GenerateSubkey 33F8  
                                   _RADIO_WatchdogTimeout 585A  
                          ??_INT2_DefaultInterruptHandler 0001  
                                              _modulation 7F6D  
                                        ?_CheckMcastFlags 0060  
                                  ExtractMic@bufferLength 006C  
                                                 memcpy@d 0066  
                                                 memcpy@n 0064  
                                                 memcpy@s 0068  
                                 __end_of_EnableChannels1 5072  
                                                 memset@c 0062  
                                                 memset@n 0064  
                                                 memset@p 0066  
                               _LORAWAN_LinkCheckCallback 2F14  
                                           __Lmediumconst 7E6C  
                                               i2u1101_40 565A  
                                          ??_SwTimerStart 0087  
                                     ??_ExecuteNewChannel 009E  
                                   _UpdateCurrentDataRate 61CC  
                                   _UpdateChannelIdStatus 3AAE  
                                 ??_RADIO_WriteFSKBitRate 0071  
                                   ??_RADIO_SetIQInverted 0060  
                              __end_of_DIO1_ISR_Lora_Init 6144  
                                               i2u1951_48 5CFA  
                                         ___lldiv@divisor 0064  
                                     _ValidateChannelMask 5A50  
                                              _ticksAdded 0038  
                             HALResetPinOutputValue@value 0060  
                                EncodeShiftRow@stateTable 0060  
                                               i2u1957_40 5D52  
                               __size_of_HALSPICSDeassert 0004  
                                ValidateDataRate@dataRate 0060  
                                         ___lldiv@counter 006C  
                                           _DIO5_ISR_Lora 6252  
                             TMR_OverrideRemaining@tmrVal 006E  
                                   ??i2_SwTimersInterrupt 001B  
                                ExecuteLinkAdr@redundancy 0073  
                                       GenerateSubkey@key 00A0  
                                    _HALResetPinMakeInput 624A  
                                            ??_GetRx1Freq 0064  
                           UpdateDLSettings@dlRx1DrOffset 0060  
                              LORAWAN_Init@RxJoinResponse 00AA  
                              LORAWAN_RxDone@bufferLength 0171  
                        __end_of_RADIO_SetSpreadingFactor 61E4  
                      AssembleEncryptionBlock@bufferIndex 0072  
                                                 postdec1 000FE5  
                                                 postdec2 000FDD  
                                              ?_AESEncode 0066  
                                         _SystemTimerInit 6236  
                                                 postinc0 000FEE  
                                                 postinc1 000FE6  
                                                 postinc2 000FDE  
                                        ??_RxJoinResponse 0060  
                                        _LORAWAN_Mainloop 573A  
                            __end_of_RADIO_SetFSKSyncWord 5B5C  
                                      LORAWAN_Join@result 00E4  
                                      __end_of_CheckFlags 54D0  
                               ValidateTxPower@txPowerNew 0061  
                                   __CFG_WDTCPS$WDTCPS_31 000000  
                                          AESEncode@block 0066  
                       SearchAvailableChannel@maxChannels 00AD  
                                  __end_of_EncodeShiftRow 3A96  
                                      _DIO0_ISR_Lora_Init 61FC  
                                       ??_HALDIO5PinValue 0060  
                                   _INT1_InterruptHandler 005E  
                                               _PORTBbits 000F8A  
                                            ??_FillSubKey 0065  
                                        RxDataDone@status 0063  
                            SwTimersInterrupt@timeElapsed 007E  
                                           _AESEncodeLoRa 5CA2  
                               __size_of_ExecuteDevStatus 000A  
                            __end_of_RADIO_WriteFrequency 3834  
                              __end_of_RADIO_RegisterRead 5CEE  
                       __end_of_LORAWAN_GetMaxPayloadSize 5812  
                          __end_of_HALResetPinOutputValue 6094  
                                        ?_UpdateDataRange 0060  
                                __end_of_ConfigureRadioRx 5CA2  
                                __end_of_ConfigureRadioTx 563E  
                                         _RADIO_RxTimeout 5AAC  
                          UpdateChannelIdStatus@channelId 0062  
                               __end_of_ExecuteNewChannel 2784  
                                        EnableChannels1@i 0069  
                                 __size_of_AssemblePacket 024A  
                                          ?_DIO1_ISR_Lora 0001  
                                    ?_ValidateChannelMask 0060  
                                       _SwTimerSetTimeout 5822  
                                          _TMR1_ReadTimer 5DE0  
                                          ??_UpdateCfList 009E  
                                              _txPower868 7FA2  
                                     ?_DIO0_ISR_Lora_Init 0001  
                                         ??_LORAWAN_Reset 00A7  
                                          ?_DIO2_ISR_Lora 0001  
                           __size_of_SystemBlockingWaitMs 002C  
                               ??_ValidateChannelMaskCntl 0060  
                                      ?_SwTimerSetTimeout 006D  
                             __size_of_MacExecuteCommands 017E  
                                    ExecuteNewChannel@ptr 009C  
                                ??_UpdateMinMaxChDataRate 0060  
                                  __end_of_GenerateSubkey 34B0  
                                           RADIO_RxDone@i 00FA  
                                   __size_of_RADIO_SetCRC 000A  
                                 AssemblePacket@macCmdIdx 00DB  
                             ?_LORAWAN_SetChannelIdStatus 0064  
                                        __CFG_FEXTOSC$OFF 000000  
                                          _localDioStatus 017D  
                                      __end_of_GetRx1Freq 60B8  
                                   __size_of_RADIO_RxDone 00B6  
                                            ??_ComputeMic 00D6  
                            __size_of_UpdateReceiveDelays 0036  
                                   __size_of_RADIO_TxDone 009E  
                                  ??_RADIO_SetOutputPower 0060  
                         EncryptFRMPayload@macBufferIndex 00AA  
                           ?_LORAWAN_SetNetworkSessionKey 006A  
                                 UpdateMinMaxChDataRate@i 0061  
                                 LORAWAN_Reset@ismBandNew 00A7  
                               __size_of_SwTimerIsRunning 0016  
                              __end_of_ComputeSessionKeys 4C9C  
                                     ??_SwTimerSetTimeout 0071  
                                __size_of_SwTimersExecute 0064  
                               __size_of_ExecuteLinkCheck 001E  
                                  _INTERRUPT_GetDioStatus 60EC  
                                         _RADIO_WriteMode 35B6  
                              ??_RADIO_WriteConfiguration 009E  
                                   SPI2_Exchange8bit@data 0060  
                                 ?_SearchAvailableChannel 00A5  
                               __size_of_SwTimerReadValue 0034  
                                          ?_DIO5_ISR_Lora 0001  
                             RADIO_FSKPacketSent@irqFlags 00DC  
                               __size_of_ExecuteDutyCycle 004E  
                                  ?_StopAllSoftwareTimers 0001  
                                 AssemblePacket@confirmed 00D8  
                                      __end_of_FillSubKey 552A  
                                 _AssembleEncryptionBlock 431E  
                                       __size_of_INT1_ISR 0006  
                                       __size_of_INT2_ISR 0006  
                                       __size_of_INT3_ISR 0006  
                                    ??_DIO0_ISR_Lora_Init 0062  
                                   ?_HALResetPinMakeInput 0001  
                                          __end_of_STable 7F6D  
                                     AESEncodeLoRa@useKey 0090  
                              SwTimerSetCallback@callback 0060  
                LORAWAN_SetDeviceAddress@deviceAddressNew 0060  
                                        ?_UpdateFrequency 0060  
                                      LORAWAN_Send@buffer 016C  
                                          __end_of_Random 5DA0  
                                 ?_InitDefault433Channels 0001  
                              __size_of_TMR_ISR_Lora_Init 000C  
                                __end_of_ValidateDataRate 6080  
                            __end_of_INTERRUPT_Initialize 623E  
                          EnableChannels1@channelMaskCntl 0066  
                          EnableChannels1@channelIndexMax 0068  
                          EnableChannels1@channelIndexMin 0067  
                     LORAWAN_SetChannelIdStatus@channelId 0066  
                                        ?_UpdateDutyCycle 0060  
                            _INT0_DefaultInterruptHandler 000000  
                              __end_of_DIO5_ISR_Lora_Init 612C  
                                 __end_of_RADIO_GetStatus 6214  
                                          __end_of___lmul 5496  
                                      LORAWAN_Send@result 00DE  
                                        ??_EnableChannels 006D  
                               i2TMR1_WriteTimer@timerVal 0001  
                                          __end_of___wmul 5C56  
                                           ?_TMR_ISR_lora 0001  
                                        ??_HALSPICSAssert 0060  
                     TMR_OverrideRemaining@ticksRemaining 0068  
                                       ?_RADIO_WritePower 0001  
                                           __pidataCOMRAM 61BC  
                                         ?_EncodeShiftRow 0060  
                                          ?_AESEncodeLoRa 008C  
                                       __size_of_TMR1_ISR 0024  
                                      __end_of_ComputeMic 55B8  
                                               Random@max 00A3  
                                          __end_of_memcpy 517E  
                                  ?_OSCILLATOR_Initialize 0001  
                               __end_of_SwTimerSetTimeout 585A  
                                  __end_of_TMR1_ReadTimer 5E00  
                                          __end_of_memset 5C08  
                                         _SPI2_Initialize 6108  
                                ?_PrepareJoinRequestFrame 0001  
                                      ??_RADIO_WritePower 0064  
                                            _RADIO_SetCRC 6194  
                                   ??_ValidateChannelMask 0062  
                                        ??_ExecuteLinkAdr 006F  
                                   UpdateCfList@frequency 00A1  
                                            _RADIO_RxDone 3DAE  
                                            _RADIO_TxDone 4504  
LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew 006A  
                                             __end_ofPL10 3F18  
                                             __end_ofPL20 0CFA  
                                             __end_ofPL12 431E  
                                             __end_ofPL30 2A5A  
                                             __end_ofPL22 2DC8  
                                             __end_ofPL14 2146  
                                             __end_ofPL40 47C6  
                                             __end_ofPL32 22F8  
                                             __end_ofPL24 06CE  
                                             __end_ofPL16 2156  
                                             __end_ofPL50 3C1A  
                                             __end_ofPL42 06FA  
                                             __end_ofPL34 06F0  
                                             __end_ofPL26 06DE  
                                             __end_ofPL18 3B44  
                                             __end_ofPL60 0704  
                                             __end_ofPL52 3AA4  
                                             __end_ofPL44 2DF0  
                                             __end_ofPL36 32E2  
                                             __end_ofPL28 2DD6  
                                             __end_ofPL70 1AF2  
                                             __end_ofPL62 3AAE  
                                             __end_ofPL54 0D30  
                                             __end_ofPL46 3002  
                                             __end_ofPL38 2DE4  
                                             __end_ofPL80 0D3A  
                                             __end_ofPL72 1B00  
                                             __end_ofPL64 2DFA  
                                             __end_ofPL56 48B0  
                                             __end_ofPL48 1938  
                                             __end_ofPL90 0726  
                                             __end_ofPL82 2A7A  
                                             __end_ofPL74 2A6C  
                                             __end_ofPL66 3C34  
                                             __end_ofPL58 3016  
                                             __end_ofPL92 0D6A  
                                             __end_ofPL84 0D4A  
                                             __end_ofPL76 2ED0  
                                             __end_ofPL68 5B04  
                                             __end_ofPL94 47D6  
                                             __end_ofPL86 0D5A  
                                             __end_ofPL78 5AD8  
                                             __end_ofPL96 073A  
                                             __end_ofPL88 1B0E  
                                             __end_ofPL98 074E  
                                     start_initialization 43C2  
                                          _ConfigureRadio 49C0  
                                      LORAWAN_RxDone@mhdr 00E7  
                                      LORAWAN_RxDone@temp 00ED  
                                            ??_RxDataDone 0064  
                                      _DIO4_ISR_Lora_Init 625A  
                                __end_ofi2_TMR1_ReadTimer 5E20  
                          __size_of_TMR_OverrideRemaining 0078  
                                     _RADIO_RegisterWrite 5E5C  
                                            AESCmac@mLast 0120  
                               ??_CreateAllSoftwareTimers 0061  
                                    RxDataDone@dataLength 0062  
                         __size_of_PIN_MANAGER_Initialize 00CC  
                    __end_of_INT3_DefaultInterruptHandler 6268  
                   __size_of_INT3_DefaultInterruptHandler 0002  
                            _INT3_DefaultInterruptHandler 6266  
                           __end_of_TMR_OverrideRemaining 49C0  
                             ?_IncludeMacCommandsResponse 0060  
                                   __end_of_INT1_CallBack 5F0C  
                                            ??_ExtractMic 006E  
                    EncryptFRMPayload@bufferToBeEncrypted 00AB  
                                            AESCmac@input 00CC  
                        __end_of_LORAWAN_SetDeviceAddress 5F58  
                                         ?_GenerateSubkey 00A0  
                            ?_RADIO_SetFrequencyHopPeriod 0060  
                                         LORAWAN_TxDone@i 00D3  
                                             ?_sendPacket 0001  
                                   LORAWAN_Init@RxPayload 00A8  
                     AssembleEncryptionBlock@frameCounter 006A  
                                 i2TMR_SwapTimer@timerVal 0007  
                                   __end_of_INT2_CallBack 5ED4  
                                           ??_RADIO_Reset 0065  
                                __end_of_UpdateDLSettings 5F26  
                              SwTimerStart@ticksRemaining 008B  
                                  RADIO_WriteMode@newMode 006A  
                                __end_of_ValidateRxOffset 606C  
                             ??_RADIO_SetChannelFrequency 0064  
                             ??_SetCallbackSoftwareTimers 0064  
                                     ?_DIO4_ISR_Lora_Init 0001  
                                     _RADIO_SetModulation 61E4  
                           ExecuteNewChannel@channelIndex 00A3  
                          __end_of_SearchAvailableChannel 3FC8  
                                        ?_EnableChannels1 0064  
                                   __end_of_INT3_CallBack 5EB6  
                                         i2_TMR_SwapTimer 563E  
                                 __size_of_StartReTxTimer 00DC  
                                  ?_UpdateCurrentDataRate 0001  
                                  ?_UpdateChannelIdStatus 0060  
                                         ___llmod@divisor 0064  
                              MacExecuteCommands@fOptsLen 00A6  
                                 __end_of_SystemTimerInit 623A  
                          UpdateChannelIdStatus@statusNew 0060  
                       __size_of_RADIO_UnhandledInterrupt 0020  
                                         ___llmod@counter 0068  
                                            _JoinedServer 017E  
                                     TMR_SwapTimer@oldVal 003E  
                               ?_RADIO_UnhandledInterrupt 0001  
                                __size_of_PIN_MANAGER_IOC 0008  
                                     TMR_SwapTimer@retVal 003C  
                                   _RADIO_FSKPayloadReady 45A2  
                          __size_of_HALResetPinMakeOutput 0004  
                           __end_of_HALResetPinMakeOutput 624A  
                                                ??_Random 00A5  
                                                AESCmac@i 0165  
                                                AESCmac@j 0164  
                                        __CFG_LPBOREN$OFF 000000  
                                                AESCmac@n 0163  
                                                AESCmac@x 0150  
                                                AESCmac@y 0140  
                              SwTimerReadValue@ticksCount 008B  
                                    ?_RADIO_RegisterWrite 0062  
                          __end_of_InitDefault433Channels 4F40  
                          __end_of_AutomaticReplyCallback 6016  
                                     RADIO_Init@frequency 007B  
                                __size_of_TMR1_Initialize 0044  
                                    _macEndDevCmdReplyLen 7F9B  
                                                ??___lmul 0098  
                                             ??_AESEncode 0069  
                       RADIO_WriteConfiguration@tempValue 00A1  
                                   __size_of_LORAWAN_Init 004C  
                      __size_of_AckRetransmissionCallback 00E0  
                                   __size_of_LORAWAN_Join 008C  
                                                ??___wmul 0064  
                                   __size_of_LORAWAN_Send 00B8  
                                 __end_of_RADIO_RxTimeout 5ACC  
                                MacExecuteCommands@buffer 00A4  
                                      __end_of_RxDataDone 6262  
                                ??_SetReceptionNotOkState 00B0  
                                          ??_TMR_ISR_lora 0028  
                                             __pdataBANK1 01C7  
                                       _ValidateDataRange 58FC  
                                      __end_of_ExtractMic 56BE  
                i2SwTimersInterrupt@ticksToNextTimerEvent 0023  
                  SwTimersInterrupt@ticksToNextTimerEvent 0082  
                                                ??_memcpy 0066  
                                  __size_of_SwTimerCreate 003E  
                                                ??_memset 0066  
                                    ??_DIO4_ISR_Lora_Init 0060  
                              __end_of_EXT_INT_Initialize 5128  
                                       _ValidateChannelId 5E3E  
                                    ?_RADIO_SetModulation 0001  
                                _RADIO_SetSpreadingFactor 61DC  
                                      _RADIO_RxFSKTimeout 5964  
                                                ?_AESCmac 00C8  
                                  __size_of_TMR1_CallBack 001E  
                                         ??_DIO1_ISR_Lora 0001  
                                      ?_ValidateDataRange 0001  
                                ValidateRxOffset@rxOffset 0060  
                                            AESEncode@aux 0087  
                                            AESEncode@key 0071  
                                  TMR_GetDeltaTime@retVal 0030  
                                         ?_TMR1_ReadTimer 0060  
                                  __end_of_ConfigureRadio 4A24  
                                          _LORAWAN_RxDone 0096  
                                      ?_ValidateChannelId 0060  
                                  TMR_GetDeltaTime@tmrVal 0040  
                                          _LORAWAN_TxDone 08BC  
                              __size_of_ExecuteNewChannel 013E  
              LORAWAN_GetMaxPayloadSize@macCommandsLength 0069  
                                    __end_of_SwTimerStart 4BF2  
                  __end_of_LORAWAN_EnterContinuousReceive 4D72  
                 __size_of_LORAWAN_EnterContinuousReceive 004C  
                          _LORAWAN_EnterContinuousReceive 4D26  
                                             __pbssBIGRAM 04E0  
                                   TMR1_ISR@CountCallBack 0042  
                                         ??_DIO2_ISR_Lora 0001  
                               __size_of_CountfOptsLength 004E  
                                       CountfOptsLength@i 0067  
                                             __pbssCOMRAM 0030  
                              __end_of_DefaultChannels433 7FD2  
                              __end_of_DefaultChannels868 7FFC  
                                        ??_RADIO_Transmit 00A9  
                        __end_of_INT0_SetInterruptHandler 6260  
                                      LORAWAN_RxTimeout@i 00BF  
                        __end_of_INT3_SetInterruptHandler 6162  
                                           __pcstackBANK0 0060  
                                           __pcstackBANK1 0100  
                                     ??_ValidateDataRange 0062  
                                        _TMR_GetDeltaTime 41CC  
                           EnableChannels@channelMaskCntl 006C  
                                 __end_of_RADIO_WriteMode 367E  
                 __end_of_UnconfirmedTransmissionCallback 4AFA  
                __size_of_UnconfirmedTransmissionCallback 004E  
                         _UnconfirmedTransmissionCallback 4AAC  
                                 SearchAvailableChannel@i 00AF  
                                     ??_ValidateChannelId 0061  
                                   RADIO_RegisterRead@reg 0062  
                         __size_of_UpdateMinMaxChDataRate 006A  
                           ?_INT3_DefaultInterruptHandler 0001  
                     LORAWAN_SetChannelIdStatus@statusNew 0064  
                                 _RADIO_ReceiveStart$3748 00AC  
                                               _aesBuffer 01B5  
                                 INTERRUPT_GetDioStatus@a 0060  
                  __end_of_IOCBF4_DefaultInterruptHandler 6266  
                 __size_of_IOCBF4_DefaultInterruptHandler 0002  
                          _IOCBF4_DefaultInterruptHandler 6264  
                                       ?_SetJoinFailState 0001  
                                     SwTimerStart@timerId 008F  
                           ??_RADIO_SetFrequencyHopPeriod 0062  
                                    _RADIO_SetFSKSyncWord 5B30  
                             RADIO_SetBandwidth@bandwidth 0060  
                              __end_of_SwTimerSetCallback 5B78  
       __end_of_ResetParametersForUnconfirmedTransmission 618A  
      __size_of_ResetParametersForUnconfirmedTransmission 000A  
              ?_ResetParametersForUnconfirmedTransmission 0001  
             ??_ResetParametersForUnconfirmedTransmission 0060  
               _ResetParametersForUnconfirmedTransmission 6180  
                               ??_AssembleEncryptionBlock 0071  
                                   _INT2_InterruptHandler 01FD  
                                               _bandwidth 7F8D  
                                      ??_SetJoinFailState 0060  
                                         ??_DIO5_ISR_Lora 0001  
                                 ?_InitDefault868Channels 0001  
                                            _LORAWAN_Init 53FE  
                                            _LORAWAN_Join 4640  
                                            _LORAWAN_Send 3CF6  
                                  RADIO_FSKPayloadReady@i 00FA  
                                       _ValidateFrequency 4F6A  
                                               __pnvBANK1 01F7  
                                  ??_HALResetPinMakeInput 0060  
                                    _RADIO_WriteFrequency 3768  
                                         FillSubKey@carry 0066  
                                        _HALSPICSDeassert 623E  
                          ??_LORAWAN_SetNetworkSessionKey 006C  
                                     __end_of_RADIO_Reset 5AAC  
                                   ??_RADIO_RegisterWrite 0063  
                                  _PIN_MANAGER_Initialize 3690  
                                           FillSubKey@key 0062  
                                      ?_ValidateFrequency 0060  
                                    __end_of_UpdateCfList 2A42  
                     RADIO_WriteFSKFrequencyDeviation@num 0071  
                               EnableChannels@channelMask 006A  
                                               _macBuffer 05EF  
                                               _dioStatus 0047  
                               __end_of_ValidateDataRange 5930  
                           RADIO_FSKPayloadReady@irqFlags 00F9  
                                       _SwTimersInterrupt 3E64  
                                       ??_SwTimersExecute 00E0  
                                               __pintcode 0008  
                                                ?___abdiv 0060  
                        __end_of_TMR1_SetInterruptHandler 614E  
                                           __pmediumconst 7E6C  
                                 RADIO_Transmit@bufferLen 00A8  
                                 __end_of_SPI2_Initialize 6114  
                                               __ptext100 4858  
                                               __ptext101 5680  
                                               __ptext110 620E  
                                               __ptext102 4C5A  
                               __end_of_ValidateChannelId 5E5C  
                                               __ptext111 4D26  
                                               __ptext103 4FC6  
                                               __ptext200 563E  
                                               __ptext120 4640  
                                               __ptext112 6260  
                                               __ptext104 507A  
                                               __ptext201 5FE8  
                                               __ptext121 5F26  
                                               __ptext113 6180  
                                               __ptext105 5496  
                                               __ptext210 5E98  
                                               __ptext202 4120  
                                               __ptext130 61E4  
                                               __ptext122 4D88  
                                               __ptext114 60DC  
                                               __ptext106 3228  
                                               __ptext211 6266  
                                               __ptext203 3840  
                                               __ptext131 619E  
                                               __ptext123 3F18  
                                               __ptext115 6214  
                                               __ptext107 08BC  
                                               __ptext220 0000  
                                               __ptext212 6226  
                                               __ptext204 5E00  
                                               __ptext140 2DFA  
                                               __ptext132 5B30  
                                               __ptext124 55FC  
                                               __ptext116 5FB8  
                                               __ptext108 5930  
                                               __ptext213 5EB6  
                                               __ptext205 61F4  
                                               __ptext141 5D7E  
                                               __ptext133 47D6  
                                               __ptext125 61D4  
                                               __ptext117 2168  
                                               __ptext109 6042  
                                               __ptext214 6252  
                                               __ptext206 5CEE  
                                               __ptext150 39E4  
                                               __ptext142 5362  
                                               __ptext134 61EC  
                                               __ptext126 618A  
                                               __ptext118 5C7C  
                                               __ptext215 6268  
                                               __ptext207 624E  
                                               __ptext151 2CDC  
                                               __ptext143 56BE  
                                               __ptext135 1D9C  
                                               __ptext127 6194  
                                               __ptext119 60EC  
                                               __ptext216 622C  
                                               __ptext208 6264  
                                               __ptext160 2326  
                                               __ptext152 53FE  
                                               __ptext144 5572  
                                               __ptext136 0D72  
                                               __ptext128 49C0  
                                               __ptext217 5EF0  
                                               __ptext209 6220  
                                               __ptext161 5B5C  
                                               __ptext153 60FA  
                                               __ptext145 11A4  
                                               __ptext137 3918  
                                               __ptext129 61DC  
                                               __ptext218 6256  
                                               __ptext170 623E  
                                               __ptext162 35B6  
                                               __ptext154 4074  
                                               __ptext146 33F8  
                                               __ptext138 4EAE  
                                               __ptext219 626A  
                                               __ptext171 6242  
                                               __ptext163 5CC8  
                                               __ptext155 48D0  
                                               __ptext147 54E0  
                                               __ptext139 4DEA  
                                               __ptext180 60CA  
                                               __ptext172 5A7E  
                                               __ptext164 621A  
                                               __ptext156 27BA  
                                               __ptext148 5CA2  
                                               __ptext181 4B88  
                                               __ptext173 5B88  
                                               __ptext165 3768  
                                               __ptext157 4B1E  
                                               __ptext149 1954  
                                               __ptext190 4F0C  
                                               __ptext182 4948  
                                               __ptext174 6080  
                                               __ptext166 4E4C  
                                               __ptext158 53B0  
                                               __ptext191 5BDE  
                                               __ptext183 58C6  
                                               __ptext175 6246  
                                               __ptext167 5E5C  
                                               __ptext159 61A8  
                                               __ptext192 5128  
                                               __ptext184 5FD0  
                                               __ptext176 624A  
                                               __ptext168 61B2  
                                               __ptext193 5224  
                                               __ptext185 3E64  
                                               __ptext177 3128  
                                               __ptext169 60B8  
                                               __ptext194 56FC  
                                               __ptext186 41CC  
                                               __ptext178 544A  
                                               __ptext187 5DE0  
                                               __ptext179 4A36  
                                               __ptext196 5D38  
                                               __ptext188 5822  
                                               __ptext197 5E7A  
                                               __ptext189 57B0  
                                               __ptext198 6262  
                                               __ptext199 5276  
                                       _EncryptFRMPayload 2BBA  
                                                ?___lldiv 0060  
                            RADIO_FSKPacketSent@timeOnAir 00D4  
                           __size_of_UpdateJoinInProgress 001A  
                                                ?___llmod 0060  
                           __size_of_ExecuteRxTimingSetup 0024  
                                         ??_AESEncodeLoRa 0090  
                SelectChannelForTransmission@channelIndex 00B2  
                         __end_of_PrepareJoinRequestFrame 2EAA  
                                                ?___lwmod 009E  
                                      ?_SwTimersInterrupt 0076  
                               _RADIO_SetChannelFrequency 47D6  
                             __size_of_DIO3_ISR_Lora_Init 0002  
                   IncludeMacCommandsResponse@bufferIndex 006B  
                               _SetCallbackSoftwareTimers 4074  
                                      ConfigureRadio@freq 006D  
                                   ??_RADIO_SetModulation 0060  
                                        ?_RADIO_GetStatus 0001  
                                     __size_of_sendPacket 001E  
                                  __end_of_LORAWAN_RxDone 06BE  
                                     ??_ValidateFrequency 0064  
                                  __end_of_LORAWAN_TxDone 0CA2  
                                      ?_EncryptFRMPayload 00A0  
                            ??_INTERRUPT_InterruptManager 0028  
                            __end_of_LORAWAN_PlatformInit 5DC0  
                          __size_of_RADIO_SetLoRaSyncWord 000A  
                                    GenerateSubkey@F17267 01C7  
                                        _ExecuteDevStatus 6176  
                           __end_of_RADIO_SetLoRaSyncWord 61B2  
                  IncludeMacCommandsResponse@pBufferIndex 0062  
                              __size_of_SwTimerSetTimeout 0038  
                             ??_LORAWAN_GetMaxPayloadSize 0068  
                          LORAWAN_LinkCheckConfigure@iCtr 00A6  
                        ExecuteRxParamSetupReq@dlSettings 00A2  
                                          _AssemblePacket 147C  
                                         ?_ConfigureRadio 006D  
                               AssemblePacket@bufferIndex 00DC  
                              ??_INT2_SetInterruptHandler 0062  
                              __end_ofi2_TMR_GetDeltaTime 38B8  
                                __size_of_TMR1_StartTimer 0004  
                                     ??_SwTimersInterrupt 007A  
                                    RADIO_DIO0@dioMapping 0172  
                                       _DutyCycleCallback 1B84  
                                 InitDefault433Channels@i 006A  
                                   __end_of_TMR_SwapTimer 58FC  
                                            ?_SwTimerStop 0001  
                                     ??_EncryptFRMPayload 00AE  
                                 __end_ofi2_TMR_SwapTimer 5672  
                                 __size_of_EncKeySchedule 00CA  
                                      AssemblePacket@mhdr 00D9  
                                      AssemblePacket@port 0166  
                                          __size_of_flash 004E  
                               __size_of_RADIO_ReadRandom 0062  
                                ConfigureRadioRx@dataRate 0076  
                                      _RADIO_ReceiveStart 2168  
                                          __size_of_srand 000E  
                                __end_of_LORAWAN_Mainloop 5776  
                                   ?_RADIO_SetFSKSyncWord 006A  
                                    _INTERRUPT_Initialize 623A  
                                           _SwTimerCreate 56FC  
                          __end_of_InitDefault868Channels 57EA  
                     IncludeMacCommandsResponse@macBuffer 0060  
                                ?_RADIO_FHSSChangeChannel 0001  
                           ValidateFrequency@frequencyNew 0060  
                                           _TMR1_CallBack 5E7A  
                               __end_of_ValidateFrequency 4FC6  
                                        _SwTimerIsRunning 6042  
                                        _ExecuteLinkCheck 5B04  
                                    i2SwTimersInterrupt@i 0027  
                                                _INT1_ISR 622C  
                                _LORAWAN_SetDeviceAddress 5F40  
                                                _INT2_ISR 6226  
                                       EncKeySchedule@key 0060  
                                          ___wmul@product 0064  
                                                _INT3_ISR 6220  
                                      _RADIO_SetBandwidth 61EC  
                                                _LATCbits 000F7B  
                                  ?_RADIO_FSKPayloadReady 0001  
                       __size_of_INT1_SetInterruptHandler 000A  
                                    __end_of_rxWindowSize 7F8D  
                                   ?_RADIO_WriteFrequency 006D  
                               ?_INT1_SetInterruptHandler 0060  
                                        ?_SystemTimerInit 0001  
                                               _reloadVal 00FD  
                                     ?_RADIO_ReceiveStart 00A6  
                                                _PIE0bits 000E29  
                                        _SwTimerReadValue 5930  
                                        _ExecuteDutyCycle 5314  
                                                _PIE5bits 000E2E  
                                         _HALDIO5PinValue 621A  
                                    RADIO_DIO1@dioMapping 00C1  
                               __end_of_SwTimersInterrupt 3F08  
                                __size_of_TMR1_WriteTimer 000E  
                                      AESEncode@masterKey 0068  
                     __size_of_INTERRUPT_InterruptManager 0086  
                              __end_of_DIO2_ISR_Lora_Init 6138  
                                                _PIR0bits 000E33  
                                        GenerateSubkey@k1 00A2  
                                        GenerateSubkey@k2 00A4  
                                    ConfigureRadioRx@freq 0072  
                               __end_of_EncryptFRMPayload 2C82  
                                                _PIR5bits 000E38  
                          __size_of_RADIO_WriteFSKBitRate 0062  
                                UpdateReceiveDelays@delay 0066  
                               LORAWAN_RxDone@bufferIndex 00EC  
                                  __size_of_UpdateTxPower 0008  
                           __end_of_RADIO_WriteFSKBitRate 4E4C  
                                    ConfigureRadioTx@freq 0072  
                                         RxDataDone@pData 0060  
                             UpdateDataRange@dataRangeNew 0060  
                                     ?_RADIO_SetBandwidth 0001  
                      SearchAvailableChannel@channelIndex 00A6  
                                               _rxPayload 0179  
                                  _UpdateMinMaxChDataRate 4B1E  
                           EncryptFRMPayload@bufferLength 00A2  
                                 ValidateDataRange@result 0062  
                                                _SSP2CON1 000ED9  
                             UpdateDutyCycle@dutyCycleNew 0060  
              ValidateChannelId@allowedForDefaultChannels 0060  
                           __size_of_FindSmallestDataRate 0086  
                                                _TMR1_ISR 5D38  
                                ConfigureRadioTx@dataRate 0076  
                    __size_of_RADIO_SetFrequencyHopPeriod 000A  
                                   ValidateTxPower@result 0060  
                                        ?_RADIO_RxTimeout 0001  
                     __size_of_IncludeMacCommandsResponse 01B4  
                                                _SSP2STAT 000ED8  
                            ??_LORAWAN_LinkCheckConfigure 009E  
                                       ??_PIN_MANAGER_IOC 0001  
                             __size_of_RADIO_GetPacketSnr 0006  
                                     _UpdateReceiveDelays 5890  
                                             _INT0PPSbits 000DF0  
                         __size_of_SetReceptionNotOkState 005A  
                                             _INT1PPSbits 000DF1  
                                  __end_of_AssemblePacket 16C6  
                                         ?_LORAWAN_RxDone 016F  
                                             _INT2PPSbits 000DF2  
                                         ?_LORAWAN_TxDone 00B0  
                                       ??_TMR1_Initialize 0062  
                                             _INT3PPSbits 000DF3  
                                        ___abdiv@dividend 0064  
                                      _DIO1_ISR_Lora_Init 6138  
                               __end_of_DutyCycleCallback 1D40  
                                       ___wmul@multiplier 0060  
                                        __size_of_AESCmac 0234  
                                    ??_RADIO_ReceiveStart 00A8  
                                 ValidateFrequency@result 0064  
                              __end_of_PrepareSessionKeys 500C  
                                       ?_ConfigureRadioRx 0072  
                                       ?_ConfigureRadioTx 0072  
                                    RADIO_DIO2@dioMapping 007A  
                                      AESEncodeLoRa@block 008C  
                                                _Channels 0400  
                             __end_of_RADIO_FSKPacketSent 32C6  
                 RADIO_SetSpreadingFactor@spreadingFactor 0060  
                                      ??_ConfigureRadioRx 0076  
                                      ??_ConfigureRadioTx 0076  
                                    ??_RADIO_SetBandwidth 0060  
                                     ?_DIO1_ISR_Lora_Init 0001  
                           RADIO_SetIQInverted@iqInverted 0060  
                                        ?_RADIO_WriteMode 0065  
                               LORAWAN_RxDone@computedMic 00F0  
                                       ___lmul@multiplier 0090  
                                          ?_SwTimerCreate 0001  
                                               copy_data0 43D6  
                                               copy_data1 43F6  
                                     _EncKeySchedule$1332 0064  
                                   ?_INTERRUPT_Initialize 0001  
                                 ?_INTERRUPT_GetDioStatus 0001  
                                    ?_UpdateReceiveDelays 0001  
                                _INT0_SetInterruptHandler 625E  
                             __end_of_RADIO_SetIQInverted 6194  
                                          ?_TMR1_CallBack 0001  
                                _INT3_SetInterruptHandler 6158  
                                    __end_of_TMR_ISR_lora 52BC  
                                             _RADIO_Reset 5A7E  
                                     ExecuteLinkCheck@ptr 0060  
                          i2SwTimersInterrupt@timeElapsed 001F  
                                      _RADIO_RegisterRead 5CC8  
                                __size_of_ValidateTxPower 0022  
                                 ??_StopAllSoftwareTimers 0061  
                                          _StartReTxTimer 34DA  
                             __end_ofi2_SwTimersInterrupt 41CC  
                               _LORAWAN_GetMaxPayloadSize 57EA  
                              LORAWAN_RxDone@extractedMic 00E8  
                                             AESCmac@flag 0162  
                           EncryptFRMPayload@frameCounter 00A4  
                                      CheckMcastFlags@hdr 0060  
                                             AESCmac@size 00CE  
                                SwTimerSetTimeout@timerId 0075  
                                SwTimerSetTimeout@timeout 006D  
                                   RADIO_WriteMode@opMode 006B  
                          ??_INT3_DefaultInterruptHandler 0001  
                                ??_ExecuteRxParamSetupReq 009E  
                     __size_of_LORAWAN_LinkCheckConfigure 0100  
                                        ___abdiv@quotient 0063  
                 UpdateReceiveWindow2Parameters@frequency 0060  
                                                __Hrparam 0000  
                                     ?_RADIO_RegisterRead 0001  
                            __end_of_SystemBlockingWaitMs 5BB4  
                  ValidateChannelMaskCntl@channelMaskCntl 0061  
                                       i2_TMR1_WriteTimer 5FE8  
                                                __Lrparam 0000  
                                        ??_EncodeShiftRow 0062  
                                    ??_DIO1_ISR_Lora_Init 0062  
                                __size_of_CheckMcastFlags 004A  
                                      __CFG_BOREN$SBORDIS 000000  
                                   TMR1_ReadTimer@readVal 0064  
                              __size_of_ValidateDataRange 0034  
                               _ticksToScheduledInterrupt 0058  
                            ValidateDataRange@dataRateMax 0064  
                            ValidateDataRange@dataRateMin 0065  
                              __size_of_ValidateChannelId 001E  
                                        ?_SPI2_Initialize 0001  
                                      ?i2_TMR1_WriteTimer 0001  
                                        __size_of___abdiv 0052  
                                 ??_OSCILLATOR_Initialize 0060  
                                       ?_ValidateDataRate 0001  
                                      _ComputeSessionKeys 4C5A  
                                   __size_of_SwTimerStart 006A  
                                        __size_of___lldiv 0076  
                                        __size_of___llmod 0062  
                                        __size_of___lwmod 003E  
                                         ?_AssemblePacket 0166  
                                    AssemblePacket@buffer 0167  
                                        SwTimersExecute@i 00E4  
                                      ??_ValidateDataRate 0060  
                                   _INT3_InterruptHandler 01FB  
                                _TMR1_SetInterruptHandler 6144  
                                             _radioBuffer 04E0  
                                     ??i2_TMR1_WriteTimer 0003  
         __end_of_ResetParametersForConfirmedTransmission 60E4  
        __size_of_ResetParametersForConfirmedTransmission 0008  
                ?_ResetParametersForConfirmedTransmission 0001  
               ??_ResetParametersForConfirmedTransmission 0060  
                 _ResetParametersForConfirmedTransmission 60DC  
                                   _TMR1_InterruptHandler 01F9  
                                        ??_GenerateSubkey 00A6  
                                        _CountfOptsLength 4858  
                                              _HALSPISend 61B2  
                                     ?_ComputeSessionKeys 00A0  
                                          _rxWindowOffset 7F75  
                      RADIO_UnhandledInterrupt@modulation 0064  
                                 _IOCBF4_InterruptHandler 01F7  
                              __end_of_MacExecuteCommands 263C  
                                    ??_RADIO_RegisterRead 0062  
                        __end_of_RADIO_UnhandledInterrupt 5DE0  
                                           _UpdateTxPower 61C4  
                                    RADIO_Transmit@buffer 00A6  
                         __end_of_RADIO_FHSSChangeChannel 5A22  
                                         _allocatedTimers 00FF  
                          __end_of_INTERRUPT_GetDioStatus 60FA  
                                       ?i2_TMR1_ReadTimer 0001  
                                      _DIO5_ISR_Lora_Init 6120  
                                                __ptext10 6114  
                                                __ptext11 6144  
                                                __ptext20 623A  
                                                __ptext12 6236  
                                                __ptext21 50D2  
                                                __ptext13 6120  
                                                __ptext30 4752  
                                                __ptext22 6158  
                                                __ptext14 625A  
                                                __ptext31 585A  
                                                __ptext23 6162  
                                                __ptext15 625C  
                                                __ptext40 4AAC  
                                                __ptext32 5964  
                                                __ptext24 616C  
                                                __ptext16 612C  
                                                __ptext41 60A6  
                                                __ptext33 1B84  
                                                __ptext25 625E  
                                                __ptext17 614E  
                                                __ptext50 5DC0  
                                                __ptext42 5F58  
                                                __ptext34 3B76  
                                                __ptext26 5C08  
                                                __ptext18 6138  
                                                __ptext51 4504  
                                                __ptext43 5F70  
                                                __ptext35 6000  
                                                __ptext27 5F40  
                                                __ptext19 61FC  
                                                __ptext60 34DA  
                                                __ptext52 3DAE  
                                                __ptext44 5F88  
                                                __ptext36 3312  
                                                __ptext28 59C6  
                                                __ptext61 4CC2  
                                                __ptext53 51D2  
                                                __ptext45 552A  
                                                __ptext37 2F14  
                                                __ptext29 573A  
                                                __ptext70 6016  
                                                __ptext62 5BB4  
                                                __ptext54 45A2  
                                                __ptext46 5776  
                                                __ptext38 4464  
                                        ?i2_TMR_SwapTimer 0007  
                                                __ptext71 2646  
                                                __ptext63 6202  
                                                __ptext55 1720  
                                                __ptext47 5AAC  
                                                __ptext39 3FC8  
                                                __ptext80 2A7A  
                                                __ptext72 4F6A  
                                                __ptext64 24BE  
                                                __ptext56 0096  
                                                __ptext48 59F4  
                                                __ptext81 5D5C  
                                                __ptext73 58FC  
                                                __ptext65 5D14  
                                                __ptext57 517E  
                                                __ptext49 4BF2  
                                                __ptext90 5314  
                                                __ptext82 606C  
                                                __ptext74 5C56  
                                                __ptext66 5890  
                                                __ptext58 5F0C  
                                                __ptext91 6176  
                                                __ptext83 5FA0  
                                                __ptext75 5AD8  
                                                __ptext67 5C30  
                                                __ptext59 2924  
                                                __ptext92 3CF6  
                                                __ptext84 5A50  
                                                __ptext76 4276  
                                                __ptext68 3022  
                                                __ptext93 57EA  
                                                __ptext85 61C4  
                                                __ptext77 5A22  
                                                __ptext69 6058  
                                                __ptext94 147C  
                                                __ptext86 61CC  
                                                __ptext78 5E3E  
                                                __ptext95 1F84  
                                                __ptext87 602C  
                                                __ptext79 5B04  
                                                __ptext96 6208  
                                                __ptext88 5022  
                                                __ptext97 46CC  
                                                __ptext89 3AAE  
                                                __ptext98 2BBA  
                                                __ptext99 431E  
                                 ExecuteRxTimingSetup@ptr 0067  
                                  ??_RADIO_SetFSKSyncWord 006C  
                            ??_IOCBF4_SetInterruptHandler 0062  
                                   ??_UpdateReceiveDelays 0066  
                                   __end_of_LORAWAN_Reset 28D8  
                                            ??_sendPacket 00E0  
                                  __end_of_StartReTxTimer 35B6  
                                 ??_UpdateCurrentDataRate 0060  
                                 ??_UpdateChannelIdStatus 0061  
                                __size_of_UpdateDataRange 0086  
                                  _SetReceptionNotOkState 4CC2  
                                            _SSP2CON1bits 000ED9  
                                       ??_TMR1_StartTimer 0060  
                                      ??i2_TMR1_ReadTimer 0003  
                               __size_of_RADIO_WritePower 00C6  
                                 __end_of_HALDIO5PinValue 6220  
                                              _IOCBF4_ISR 5CEE  
                                       ?_UpdateDLSettings 0060  
                                  ConfigureRadio@dataRate 0071  
                                       ?_ValidateRxOffset 0001  
                              __size_of_ValidateFrequency 005C  
                        __size_of_PrepareJoinRequestFrame 00B0  
                                           CheckFlags@hdr 0060  
                                  ??_RADIO_WriteFrequency 0071  
                                   __size_of_UpdateCfList 011E  
                                     ?_DIO5_ISR_Lora_Init 0001  
                           __size_of_RADIO_SetOutputPower 0008  
                                           __size_of_main 00BA  
                                           __size_of_rand 004E  
                                       _RADIO_ReceiveStop 5FB8  
                                      ??_UpdateDLSettings 0061  
                                    _LORAWAN_PlatformInit 5DA0  
                                         _FskSyncWordBuff 7FFC  
                                      ??_ValidateRxOffset 0060  
                               __end_ofi2_TMR1_WriteTimer 5FF6  
               IncludeMacCommandsResponse@bIncludeInFopts 0063  
                                    ??_ComputeSessionKeys 00A2  
                                           _timerOverflow 0044  
                                    __CFG_WDTCWS$WDTCWS_7 000000  
                                            _SwTimerStart 4B88  
                              __size_of_SwTimersInterrupt 00A4  
                                      ?_RADIO_ReceiveStop 0001  
                                      __CFG_BORV$VBOR_190 000000  
                              ??_RADIO_SetSpreadingFactor 0060  
                                   RADIO_TxDone@timeOnAir 00D4  
                          ValidateChannelMask@channelMask 0060  
                             __size_of_DIO0_ISR_Lora_Init 0006  
                              __size_of_EncryptFRMPayload 00C8  
                                         GenerateSubkey@i 00C7  
                                         GenerateSubkey@l 00B7  
                                 PrepareSessionKeys@index 0070  
                                __end_of_TMR_GetDeltaTime 4248  
                                      SwTimerStop@timerId 0060  
                                                _swTimers 0300  
                                        ??_TMR1_ReadTimer 0062  
        LORAWAN_SetNetworkSessionKey@networkSessionKeyNew 006A  
                                    RADIO_RxDone@irqFlags 00F9  
                             __end_of_ValidateChannelMask 5A7E  
                                           UpdateCfList@i 00A6  
                      __end_of_INTERRUPT_InterruptManager 008E  
                              _INTERRUPT_InterruptManager 0008  
                                     ??_RADIO_ReceiveStop 006C  
                             PrepareSessionKeys@networkId 006E  
                                       _RADIO_ReleaseData 6214  
                                                main@flag 0175  
                                       ??_TMR1_WriteTimer 0062  
                                      __end_of_sendPacket 5E3E  
                                              _RADIO_DIO0 4BF2  
                                              _RADIO_DIO1 5776  
                                              _RADIO_DIO2 552A  
                                              _RADIO_DIO3 5F88  
                                              _RADIO_DIO4 5F70  
                                              _RADIO_DIO5 5F58  
                                            _SSP2STATbits 000ED8  
                                    ??_DIO5_ISR_Lora_Init 0062  
                    __end_of_INT1_DefaultInterruptHandler 626C  
                   __size_of_INT1_DefaultInterruptHandler 0002  
                            _INT1_DefaultInterruptHandler 626A  
                       __size_of_RADIO_WriteConfiguration 03C8  
                                  __end_of_rxWindowOffset 7F7D  
                             PIN_MANAGER_Initialize@state 0062  
                     __size_of_IOCBF4_SetInterruptHandler 000A  
                              __size_of_DutyCycleCallback 01BC  
                                 EncryptFRMPayload@buffer 00A0  
                                      ?_RADIO_ReleaseData 0001  
                               ?_RADIO_WriteConfiguration 009C  
                                      __end_of_modulation 7F75  
                                              _RADIO_Init 2326  
                         ExecuteRxParamSetupReq@frequency 009E  
                                __size_of_UpdateFrequency 0026  
                                ?_ValidateChannelMaskCntl 0001  
                                           __roundCounter 0046  
                                              _INTCONbits 000FF2  
                                 ConfigureRadioTx@txPower 0077  
                                __end_of_HALSPICSDeassert 6242  
                                __size_of_UpdateDutyCycle 001C  
                                          ?_UpdateTxPower 0001  
                                                memcpy@d1 0060  
                                                memcpy@s1 0062  
                                          _EncKeySchedule 2CDC  
                      __size_of_SetCallbackSoftwareTimers 0092  
                                 __size_of_RxJoinResponse 0006  
                                         ??_SwTimerCreate 0060  
                                     ExecuteDutyCycle@ptr 0060  
                                            _UpdateCfList 2924  
                                     ??_RADIO_ReleaseData 0060  
                                  ??_INTERRUPT_Initialize 0060  
                                                memset@p1 0060  
                                         ??_TMR1_CallBack 0028  
                                    __size_of_SwTimerStop 0012  
                                        _RADIO_ReadRandom 48D0  
                                       _RADIO_TxDone$3761 00D8  
                                      _EXT_INT_Initialize 50D2  
                                         ?_StartReTxTimer 0001  
                                   _TMR_OverrideRemaining 4948  
                                                intlevel2 0000  
                          RADIO_ReceiveStart@rxWindowSize 00A6  
                               __end_of_RADIO_ReceiveStop 5FD0  
                                         _SwTimersExecute 4752  
                     SwTimerSetCallback@callbackParameter 0062  
                                             FillSubKey@i 0067  
                           RADIO_WriteFrequency@frequency 006D  
                                        ___lwmod@dividend 009E  
                                   ?_LORAWAN_PlatformInit 0001  
                                        ___lldiv@dividend 0060  
                                __end_of_ExecuteDevStatus 6180  
                                 ?_PIN_MANAGER_Initialize 0001  
                                      _DefaultChannels433 7FA8  
                                      _DefaultChannels868 7FD2  
                                       __CFG_CLKOUTEN$OFF 000000  
                                     ?_EXT_INT_Initialize 0001  
                                            ___abdiv@sign 0062  
                                UpdateDutyCycle@channelId 0062  
                                  GenerateSubkey@const_Rb 00A7  
                                             _PPSLOCKbits 000DEF  
                         __size_of_ExecuteRxParamSetupReq 00FC  
                               UpdateJoinInProgress@state 0060  
                                       ??_ValidateTxPower 0060  
                                     _LORAWAN_TxDone$3265 00BA  
                                     _LORAWAN_TxDone$3266 00BE  
                                     _LORAWAN_TxDone$5060 00C7  
                      __end_of_LORAWAN_LinkCheckConfigure 3228  
                               __end_of_RADIO_ReleaseData 621A  
                              _LORAWAN_LinkCheckConfigure 3128  
                                __size_of_EnableChannels1 0050  
                                      __end_of_txPower868 7FA8  
                                   _HALResetPinMakeOutput 6246  
                                ??_HALResetPinOutputValue 0060  
                                  __size_of_INT1_CallBack 001C  
                               RADIO_WriteConfiguration@i 00A0  
                               ExecuteRxTimingSetup@delay 0069  
                                        AESEncodeLoRa@key 008E  
                               __size_of_SetJoinFailState 002A  
                        LORAWAN_LinkCheckConfigure@period 009C  
                                        ??_ConfigureRadio 0071  
                                      _SwTimerSetCallback 5B5C  
             __end_of_UpdateRetransmissionAckTimeoutState 51D2  
            __size_of_UpdateRetransmissionAckTimeoutState 0054  
                    ?_UpdateRetransmissionAckTimeoutState 0001  
                   ??_UpdateRetransmissionAckTimeoutState 0090  
                     _UpdateRetransmissionAckTimeoutState 517E  
                                       RADIO_ReadRandom@i 0070  
                            SearchAvailableChannel@result 00AC  
                                   RADIO_WritePower@paDac 0065  
                                  __size_of_INT2_CallBack 001E  
                             __size_of_DIO4_ISR_Lora_Init 0002  
                                          _AESEncode$1346 0081  
                                          _AESEncode$1347 0083  
                                          _AESEncode$1348 0085  
                                __end_of_SwTimerIsRunning 6058  
                                       ??_CheckMcastFlags 0062  
                                __end_of_ExecuteLinkCheck 5B22  
                                   RADIO_WritePower@power 0066  
                                ?_CreateAllSoftwareTimers 0001  
                        RADIO_WriteMode@currentModulation 0067  
                                    ??_EXT_INT_Initialize 0062  
                            RADIO_SetFSKSyncWord@syncWord 006A  
                                  __size_of_INT3_CallBack 001E  
                                            _rxWindowSize 7F85  
                                  __end_of_EncKeySchedule 2DA6  
                           ?_INT1_DefaultInterruptHandler 0001  
                                   __end_of_DIO1_ISR_Lora 625A  
                                     ?_SwTimerSetCallback 0060  
                                __end_of_SwTimerReadValue 5964  
                                        ___lldiv@quotient 0068  
                                             ?_HALSPISend 0001  
                                __end_of_ExecuteDutyCycle 5362  
                                         ___lwmod@divisor 00A0  
                  __end_of_UpdateReceiveWindow2Parameters 602C  
                 __size_of_UpdateReceiveWindow2Parameters 0016  
                          _UpdateReceiveWindow2Parameters 6016  
                                 UpdateTxPower@txPowerNew 0060  
                                         ___lwmod@counter 00A2  
                         _LORAWAN_LinkCheckConfigure$2319 00A2  
                        __end_of_INT1_SetInterruptHandler 6176  
                            FindSmallestDataRate@dataRate 0063  
                           LORAWAN_Join@activationTypeNew 00E5  
                                   __size_of_TMR_ISR_lora 0046  
                              ??_LORAWAN_SetDeviceAddress 0064  
                                   __end_of_DIO2_ISR_Lora 6252  
                                    _SystemBlockingWaitMs 5B88  
                                   FindSmallestDataRate@i 0062  
                      ComputeSessionKeys@joinAcceptBuffer 00A0  
                                 __size_of_EnableChannels 0016  
                            __end_of_UpdateJoinInProgress 5F40  
                            __end_of_ExecuteRxTimingSetup 5D38  
                                 __size_of_HALSPICSAssert 0004  
                                 __end_of_FskSyncWordBuff 7FFF  
                __end_of_RADIO_WriteFSKFrequencyDeviation 4F0C  
               __size_of_RADIO_WriteFSKFrequencyDeviation 005E  
                      ??_RADIO_WriteFSKFrequencyDeviation 0071  
                       ?_RADIO_WriteFSKFrequencyDeviation 006D  
                        _RADIO_WriteFSKFrequencyDeviation 4EAE  
                __end_of_LORAWAN_SetApplicationSessionKey 59EC  
               __size_of_LORAWAN_SetApplicationSessionKey 0026  
                      ??_LORAWAN_SetApplicationSessionKey 006C  
                       ?_LORAWAN_SetApplicationSessionKey 006A  
                        _LORAWAN_SetApplicationSessionKey 59C6  
                                        ExtractMic@buffer 006A  
                                 ??_RADIO_FSKPayloadReady 00F9  
                                UpdateDataRange@channelId 0062  
                                             ?_IOCBF4_ISR 0001  
                                _RADIO_UnhandledInterrupt 5DC0  
                                        ?_HALDIO5PinValue 0001  
                          __end_of_PIN_MANAGER_Initialize 375C  
                                       ?_LORAWAN_Mainloop 0001  
                             __end_of_RADIO_RegisterWrite 5E7A  
                                 __size_of_ExecuteLinkAdr 011C  
                            RADIO_WriteFSKBitRate@bitRate 006D  
                                      i2_TMR_GetDeltaTime 3840  
                                         RADIO_SetCRC@crc 0060  
                                         _PIN_MANAGER_IOC 61F4  
                                     RADIO_WritePower@ocp 0064  
                                      ??_LORAWAN_Mainloop 00FD  
                              __size_ofi2_TMR1_WriteTimer 000E  
                                    ??_SwTimerSetCallback 0063  
                                   __end_of_DIO5_ISR_Lora 6256  
                                       ??_UpdateDataRange 0061  
                                 ?_UpdateMinMaxChDataRate 0001  
                                         _TMR1_Initialize 55B8  
                        RADIO_WriteConfiguration@regValue 00A5  
                                 i2TMR1_ReadTimer@readVal 0005  
                                      _RadioConfiguration 017F  
                                           ExtractMic@mic 0070  
                                       _LORAWAN_RxTimeout 1720  
                             __end_of_RADIO_SetModulation 61EC  
                           __size_of_HALResetPinMakeInput 0004  
                             __size_of_RADIO_RxFSKTimeout 0032  
                                        ??_LORAWAN_RxDone 00E0  
                                     ?i2_TMR_GetDeltaTime 0007  
